// Code generated by Facebook Business API codegen. DO NOT EDIT.

package {{.PackageName}}

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/shared"
	"unified-ads-mcp/internal/facebook/utils"
)

// Tool{{capitalizeFirst .Tool.Name}} returns the MCP tool definition for {{.Tool.Name}}
func Tool{{capitalizeFirst .Tool.Name}}() mcp.Tool {
	{{if .Tool.AvailableFields}}// Available fields for {{.Tool.Return}}: {{range $i, $field := .Tool.AvailableFields}}{{if $i}}, {{end}}{{$field}}{{end}}{{end}}
	{{if .Tool.APIParams}}// Params object accepts: {{range $i, $param := .Tool.APIParams}}{{if $i}}, {{end}}{{$param.Name}} ({{$param.Type}}){{end}}{{end}}
	return mcp.NewTool("{{.Tool.Name}}",
		mcp.WithDescription("{{.Tool.Description}}"),
{{range $param := .Tool.Parameters}}{{if eq $param.Name "params"}}{{if gt (len $param.APIParams) 0}}		mcp.WithObject("{{$param.Name}}",
{{if $param.Required}}			mcp.Required(),
{{end}}			mcp.Properties(map[string]any{
{{range $apiParam := $param.APIParams}}				"{{$apiParam.Name}}": map[string]any{
					"type": "{{convertTypeToJSONSchema $apiParam.Type}}",
					"description": "{{$apiParam.Description}}",
{{if $apiParam.Required}}					"required": true,
{{end}}{{if $apiParam.EnumValues}}					"enum": []string{ {{range $i, $val := $apiParam.EnumValues}}{{if $i}}, {{end}}"{{$val}}"{{end}} },
{{end}}{{if hasPrefix $apiParam.Type "list<"}}					"items": map[string]any{"type": "{{extractItemType $apiParam.Type}}"},
{{end}}				},
{{end}}			}),
			mcp.Description("{{$param.Description}}"),
		),
{{else}}		mcp.WithObject("{{$param.Name}}",
{{if $param.Required}}			mcp.Required(),
{{end}}			mcp.Description("{{$param.Description}}"),
		),
{{end}}{{else}}		mcp.With{{paramType $param.Type}}("{{$param.Name}}",
{{if $param.Required}}			mcp.Required(),
{{end}}			mcp.Description("{{$param.Description}}"),
{{if $param.EnumValues}}			mcp.Enum({{range $i, $val := $param.EnumValues}}{{if $i}}, {{end}}"{{$val}}"{{end}}),
{{end}}		),
{{end}}{{end}}	)
}

// Handle{{capitalizeFirst .Tool.Name}} handles the {{.Tool.Name}} tool with context-based auth
func Handle{{capitalizeFirst .Tool.Name}}(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

{{range $param := .Tool.Parameters}}{{if $param.Required}}	// Required: {{$param.Name}}
{{if eq $param.Type "string"}}	if err := utils.ParseRequiredString(request, "{{$param.Name}}", args); err != nil {
		return mcp.NewToolResultError(err.Error()), nil
	}
{{else if eq $param.Type "object"}}{{if eq $param.Name "params"}}	// Parse required params object and expand into args
	val, err := request.RequireString("{{$param.Name}}")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter {{$param.Name}}: %v", err)), nil
	}
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(val), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}
{{else}}	if err := utils.ParseRequiredObject(request, "{{$param.Name}}", args); err != nil {
		return mcp.NewToolResultError(err.Error()), nil
	}
{{end}}{{else if eq $param.Type "array"}}{{if eq $param.Name "fields"}}	if err := utils.ParseRequiredFieldsArray(request, args); err != nil {
		return mcp.NewToolResultError(err.Error()), nil
	}
{{else}}	if err := utils.ParseRequiredArray(request, "{{$param.Name}}", args); err != nil {
		return mcp.NewToolResultError(err.Error()), nil
	}
{{end}}{{else}}	// {{$param.Type}} type
	{{sanitizeVarName $param.Name}}, err := request.{{requireMethod $param.Type}}("{{$param.Name}}")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter {{$param.Name}}: %v", err)), nil
	}
	args["{{$param.Name}}"] = {{sanitizeVarName $param.Name}}
{{end}}{{else}}	// Optional: {{$param.Name}}
{{if eq $param.Type "string"}}	utils.ParseOptionalString(request, "{{$param.Name}}", args)
{{else if eq $param.Type "integer"}}	utils.ParseOptionalInt(request, "{{$param.Name}}", args)
{{else if eq $param.Type "number"}}	utils.ParseOptionalFloat(request, "{{$param.Name}}", args)
{{else if eq $param.Type "boolean"}}	utils.ParseOptionalBool(request, "{{$param.Name}}", args)
{{else if eq $param.Type "array"}}{{if eq $param.Name "fields"}}	utils.ParseFieldsArray(request, args)
{{else}}	utils.ParseOptionalArray(request, "{{$param.Name}}", args)
{{end}}{{else if eq $param.Type "object"}}{{if eq $param.Name "params"}}	utils.ParseParamsObject(request, args)
{{else}}	utils.ParseOptionalObject(request, "{{$param.Name}}", args)
{{end}}{{else}}	// {{$param.Type}} type - using string
	utils.ParseOptionalString(request, "{{$param.Name}}", args)
{{end}}{{end}}
{{end}}

	// Call the API method
	result, err := {{capitalizeFirst .Tool.Name}}(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute {{.Tool.Name}}: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// {{capitalizeFirst .Tool.Name}} performs {{.Tool.Method}} {{.Tool.Endpoint}} for {{.NodeName}}
func {{capitalizeFirst .Tool.Name}}(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	{{if eq .NodeName "AdAccount"}}
	// Extract account_id for URL construction
	accountId, ok := args["account_id"].(string)
	if !ok {
		return nil, fmt.Errorf("account_id is required for {{.Tool.Name}}")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/{{.APIVersion}}/act_%s{{.Tool.Endpoint}}", accountId)
	{{else if eq .NodeName "Ad"}}
	// Extract ad_id for URL construction
	adId, ok := args["ad_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_id is required for {{.Tool.Name}}")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/{{.APIVersion}}/%s{{.Tool.Endpoint}}", adId)
	{{else if eq .NodeName "AdCreative"}}
	// Extract ad_creative_id for URL construction
	adCreativeId, ok := args["ad_creative_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_creative_id is required for {{.Tool.Name}}")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/{{.APIVersion}}/%s{{.Tool.Endpoint}}", adCreativeId)
	{{else if eq .NodeName "AdSet"}}
	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for {{.Tool.Name}}")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/{{.APIVersion}}/%s{{.Tool.Endpoint}}", adSetId)
	{{else if eq .NodeName "Campaign"}}
	// Extract campaign_id for URL construction
	campaignId, ok := args["campaign_id"].(string)
	if !ok {
		return nil, fmt.Errorf("campaign_id is required for {{.Tool.Name}}")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/{{.APIVersion}}/%s{{.Tool.Endpoint}}", campaignId)
	{{else}}
	baseURL = fmt.Sprintf("https://graph.facebook.com/{{.APIVersion}}/{{.Tool.Endpoint}}")
	{{end}}

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{
		{{if eq .NodeName "AdAccount"}}"account_id",
		{{else if eq .NodeName "Ad"}}"ad_id",
		{{else if eq .NodeName "AdCreative"}}"ad_creative_id",
		{{else if eq .NodeName "AdSet"}}"ad_set_id",
		{{else if eq .NodeName "Campaign"}}"campaign_id",
		{{end}}
	}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("{{.Tool.Method}}", baseURL, urlParams)
}