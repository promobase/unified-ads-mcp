// Code generated by Facebook Business API codegen. DO NOT EDIT.

package {{.PackageName}}

import (
	"fmt"
	"net/url"
	"testing"
)

func Test{{capitalizeFirst .Tool.Name}}_URLConstruction(t *testing.T) {
	accessToken := "test-token"
	
	tests := []struct {
		name        string
		args        map[string]interface{}
		wantBaseURL string
		wantParams  map[string]string
	}{
		{
			name: "basic request with required params",
			args: map[string]interface{}{
				{{if eq .NodeName "AdAccount"}}"account_id": "123456789",{{end}}
				{{if eq .NodeName "Ad"}}"ad_id": "123456789",{{end}}
				{{if eq .NodeName "AdCreative"}}"ad_creative_id": "123456789",{{end}}
				{{if eq .NodeName "AdSet"}}"ad_set_id": "123456789",{{end}}
				{{if eq .NodeName "Campaign"}}"campaign_id": "123456789",{{end}}
			},
			wantBaseURL: {{if eq .NodeName "AdAccount"}}{{if .Tool.Endpoint}}"https://graph.facebook.com/v23.0/act_123456789/{{.Tool.Endpoint}}"{{else}}"https://graph.facebook.com/v23.0/act_123456789"{{end}}{{else if eq .NodeName "Ad"}}{{if .Tool.Endpoint}}"https://graph.facebook.com/v23.0/123456789/{{.Tool.Endpoint}}"{{else}}"https://graph.facebook.com/v23.0/123456789"{{end}}{{else if eq .NodeName "AdCreative"}}{{if .Tool.Endpoint}}"https://graph.facebook.com/v23.0/123456789/{{.Tool.Endpoint}}"{{else}}"https://graph.facebook.com/v23.0/123456789"{{end}}{{else if eq .NodeName "AdSet"}}{{if .Tool.Endpoint}}"https://graph.facebook.com/v23.0/123456789/{{.Tool.Endpoint}}"{{else}}"https://graph.facebook.com/v23.0/123456789"{{end}}{{else if eq .NodeName "Campaign"}}{{if .Tool.Endpoint}}"https://graph.facebook.com/v23.0/123456789/{{.Tool.Endpoint}}"{{else}}"https://graph.facebook.com/v23.0/123456789"{{end}}{{else}}{{if .Tool.Endpoint}}"https://graph.facebook.com/v23.0/{{.Tool.Endpoint}}"{{else}}"https://graph.facebook.com/v23.0"{{end}}{{end}},
			wantParams: map[string]string{
				"access_token": accessToken,
			},
		},
		{
			name: "request with fields parameter",
			args: map[string]interface{}{
				{{if eq .NodeName "AdAccount"}}"account_id": "123456789",{{end}}
				{{if eq .NodeName "Ad"}}"ad_id": "123456789",{{end}}
				{{if eq .NodeName "AdCreative"}}"ad_creative_id": "123456789",{{end}}
				{{if eq .NodeName "AdSet"}}"ad_set_id": "123456789",{{end}}
				{{if eq .NodeName "Campaign"}}"campaign_id": "123456789",{{end}}
				"fields": "id,name,status",
			},
			wantBaseURL: {{if eq .NodeName "AdAccount"}}{{if .Tool.Endpoint}}"https://graph.facebook.com/v23.0/act_123456789/{{.Tool.Endpoint}}"{{else}}"https://graph.facebook.com/v23.0/act_123456789"{{end}}{{else if eq .NodeName "Ad"}}{{if .Tool.Endpoint}}"https://graph.facebook.com/v23.0/123456789/{{.Tool.Endpoint}}"{{else}}"https://graph.facebook.com/v23.0/123456789"{{end}}{{else if eq .NodeName "AdCreative"}}{{if .Tool.Endpoint}}"https://graph.facebook.com/v23.0/123456789/{{.Tool.Endpoint}}"{{else}}"https://graph.facebook.com/v23.0/123456789"{{end}}{{else if eq .NodeName "AdSet"}}{{if .Tool.Endpoint}}"https://graph.facebook.com/v23.0/123456789/{{.Tool.Endpoint}}"{{else}}"https://graph.facebook.com/v23.0/123456789"{{end}}{{else if eq .NodeName "Campaign"}}{{if .Tool.Endpoint}}"https://graph.facebook.com/v23.0/123456789/{{.Tool.Endpoint}}"{{else}}"https://graph.facebook.com/v23.0/123456789"{{end}}{{else}}{{if .Tool.Endpoint}}"https://graph.facebook.com/v23.0/{{.Tool.Endpoint}}"{{else}}"https://graph.facebook.com/v23.0"{{end}}{{end}},
			wantParams: map[string]string{
				"access_token": accessToken,
				"fields": "id,name,status",
			},
		},
		{
			name: "request with pagination",
			args: map[string]interface{}{
				{{if eq .NodeName "AdAccount"}}"account_id": "123456789",{{end}}
				{{if eq .NodeName "Ad"}}"ad_id": "123456789",{{end}}
				{{if eq .NodeName "AdCreative"}}"ad_creative_id": "123456789",{{end}}
				{{if eq .NodeName "AdSet"}}"ad_set_id": "123456789",{{end}}
				{{if eq .NodeName "Campaign"}}"campaign_id": "123456789",{{end}}
				"limit": 10,
				"after": "cursor123",
			},
			wantBaseURL: {{if eq .NodeName "AdAccount"}}{{if .Tool.Endpoint}}"https://graph.facebook.com/v23.0/act_123456789/{{.Tool.Endpoint}}"{{else}}"https://graph.facebook.com/v23.0/act_123456789"{{end}}{{else if eq .NodeName "Ad"}}{{if .Tool.Endpoint}}"https://graph.facebook.com/v23.0/123456789/{{.Tool.Endpoint}}"{{else}}"https://graph.facebook.com/v23.0/123456789"{{end}}{{else if eq .NodeName "AdCreative"}}{{if .Tool.Endpoint}}"https://graph.facebook.com/v23.0/123456789/{{.Tool.Endpoint}}"{{else}}"https://graph.facebook.com/v23.0/123456789"{{end}}{{else if eq .NodeName "AdSet"}}{{if .Tool.Endpoint}}"https://graph.facebook.com/v23.0/123456789/{{.Tool.Endpoint}}"{{else}}"https://graph.facebook.com/v23.0/123456789"{{end}}{{else if eq .NodeName "Campaign"}}{{if .Tool.Endpoint}}"https://graph.facebook.com/v23.0/123456789/{{.Tool.Endpoint}}"{{else}}"https://graph.facebook.com/v23.0/123456789"{{end}}{{else}}{{if .Tool.Endpoint}}"https://graph.facebook.com/v23.0/{{.Tool.Endpoint}}"{{else}}"https://graph.facebook.com/v23.0"{{end}}{{end}},
			wantParams: map[string]string{
				"access_token": accessToken,
				"limit": "10",
				"after": "cursor123",
			},
		},
	}
	
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Get the base URL
			var baseURL string
			{{if eq .NodeName "AdAccount"}}
			accountId := tt.args["account_id"].(string)
			{{if .Tool.Endpoint}}
			baseURL = fmt.Sprintf("%s/act_%s/{{.Tool.Endpoint}}", FacebookGraphAPIBaseURL, accountId)
			{{else}}
			baseURL = fmt.Sprintf("%s/act_%s", FacebookGraphAPIBaseURL, accountId)
			{{end}}
			{{else if eq .NodeName "Ad"}}
			adId := tt.args["ad_id"].(string)
			{{if .Tool.Endpoint}}
			baseURL = fmt.Sprintf("%s/%s/{{.Tool.Endpoint}}", FacebookGraphAPIBaseURL, adId)
			{{else}}
			baseURL = fmt.Sprintf("%s/%s", FacebookGraphAPIBaseURL, adId)
			{{end}}
			{{else if eq .NodeName "AdCreative"}}
			adCreativeId := tt.args["ad_creative_id"].(string)
			{{if .Tool.Endpoint}}
			baseURL = fmt.Sprintf("%s/%s/{{.Tool.Endpoint}}", FacebookGraphAPIBaseURL, adCreativeId)
			{{else}}
			baseURL = fmt.Sprintf("%s/%s", FacebookGraphAPIBaseURL, adCreativeId)
			{{end}}
			{{else if eq .NodeName "AdSet"}}
			adSetId := tt.args["ad_set_id"].(string)
			{{if .Tool.Endpoint}}
			baseURL = fmt.Sprintf("%s/%s/{{.Tool.Endpoint}}", FacebookGraphAPIBaseURL, adSetId)
			{{else}}
			baseURL = fmt.Sprintf("%s/%s", FacebookGraphAPIBaseURL, adSetId)
			{{end}}
			{{else if eq .NodeName "Campaign"}}
			campaignId := tt.args["campaign_id"].(string)
			{{if .Tool.Endpoint}}
			baseURL = fmt.Sprintf("%s/%s/{{.Tool.Endpoint}}", FacebookGraphAPIBaseURL, campaignId)
			{{else}}
			baseURL = fmt.Sprintf("%s/%s", FacebookGraphAPIBaseURL, campaignId)
			{{end}}
			{{else}}
			{{if .Tool.Endpoint}}
			baseURL = FacebookGraphAPIBaseURL + "/{{.Tool.Endpoint}}"
			{{else}}
			baseURL = FacebookGraphAPIBaseURL
			{{end}}
			{{end}}
			
			// Check base URL
			if baseURL != tt.wantBaseURL {
				t.Errorf("baseURL = %v, want %v", baseURL, tt.wantBaseURL)
			}
			
			// Build URL parameters
			skipParams := []string{
				{{if eq .NodeName "AdAccount"}}"account_id",{{end}}
				{{if eq .NodeName "Ad"}}"ad_id",{{end}}
				{{if eq .NodeName "AdCreative"}}"ad_creative_id",{{end}}
				{{if eq .NodeName "AdSet"}}"ad_set_id",{{end}}
				{{if eq .NodeName "Campaign"}}"campaign_id",{{end}}
			}
			urlParams := buildURLParams{{capitalizeFirst .Tool.Name}}(accessToken, tt.args, skipParams...)
			
			// Check all expected parameters
			for key, expectedValue := range tt.wantParams {
				actualValue := urlParams.Get(key)
				if actualValue != expectedValue {
					t.Errorf("param %s = %v, want %v", key, actualValue, expectedValue)
				}
			}
			
			// Check no unexpected parameters
			for key := range urlParams {
				if _, exists := tt.wantParams[key]; !exists {
					t.Errorf("unexpected param %s = %v", key, urlParams.Get(key))
				}
			}
		})
	}
}

// Helper function to simulate BuildURLParams (for testing)
func buildURLParams{{capitalizeFirst .Tool.Name}}(accessToken string, args map[string]interface{}, skipParams ...string) url.Values {
	params := url.Values{}
	params.Set("access_token", accessToken)
	
	skipMap := make(map[string]bool)
	for _, param := range skipParams {
		skipMap[param] = true
	}
	
	for key, value := range args {
		if skipMap[key] {
			continue
		}
		if key == "params" {
			continue
		}
		params.Set(key, fmt.Sprintf("%v", value))
	}
	
	return params
}