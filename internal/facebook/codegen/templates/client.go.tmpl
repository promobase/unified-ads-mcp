// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// {{.NodeName}}Client represents a client for {{.NodeName}} operations
type {{.NodeName}}Client struct {
	accessToken string
}

// New{{.NodeName}}Client creates a new {{.NodeName}} client
func New{{.NodeName}}Client(accessToken string) *{{.NodeName}}Client {
	return &{{.NodeName}}Client{
		accessToken: accessToken,
	}
}

{{range .Tools}}
// {{capitalizeFirst .Name}} performs {{.Method}} {{.Endpoint}} for {{$.NodeName}}
func (c *{{$.NodeName}}Client) {{capitalizeFirst .Name}}(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	{{if eq $.NodeName "AdAccount"}}
	// Extract account_id for URL construction
	accountId, ok := args["account_id"].(string)
	if !ok {
		return nil, fmt.Errorf("account_id is required for {{.Name}}")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/{{$.APIVersion}}/act_%s/{{.Endpoint}}", accountId)
	{{else if eq $.NodeName "Ad"}}
	// Extract ad_id for URL construction
	adId, ok := args["ad_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_id is required for {{.Name}}")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/{{$.APIVersion}}/%s/{{.Endpoint}}", adId)
	{{else if eq $.NodeName "AdCreative"}}
	// Extract ad_creative_id for URL construction
	adCreativeId, ok := args["ad_creative_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_creative_id is required for {{.Name}}")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/{{$.APIVersion}}/%s/{{.Endpoint}}", adCreativeId)
	{{else if eq $.NodeName "AdSet"}}
	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for {{.Name}}")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/{{$.APIVersion}}/%s/{{.Endpoint}}", adSetId)
	{{else if eq $.NodeName "Campaign"}}
	// Extract campaign_id for URL construction
	campaignId, ok := args["campaign_id"].(string)
	if !ok {
		return nil, fmt.Errorf("campaign_id is required for {{.Name}}")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/{{$.APIVersion}}/%s/{{.Endpoint}}", campaignId)
	{{else}}
	baseURL = fmt.Sprintf("https://graph.facebook.com/{{$.APIVersion}}/{{.Endpoint}}")
	{{end}}
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

{{range .Parameters}}	if val, ok := args["{{.Name}}"]; ok {
		// Skip ID parameters as they're already in the URL path
		{{if eq $.NodeName "AdAccount"}}
		if "{{.Name}}" != "account_id" {
			urlParams.Set("{{.Name}}", fmt.Sprintf("%v", val))
		}
		{{else if eq $.NodeName "Ad"}}
		if "{{.Name}}" != "ad_id" {
			urlParams.Set("{{.Name}}", fmt.Sprintf("%v", val))
		}
		{{else if eq $.NodeName "AdCreative"}}
		if "{{.Name}}" != "ad_creative_id" {
			urlParams.Set("{{.Name}}", fmt.Sprintf("%v", val))
		}
		{{else if eq $.NodeName "AdSet"}}
		if "{{.Name}}" != "ad_set_id" {
			urlParams.Set("{{.Name}}", fmt.Sprintf("%v", val))
		}
		{{else if eq $.NodeName "Campaign"}}
		if "{{.Name}}" != "campaign_id" {
			urlParams.Set("{{.Name}}", fmt.Sprintf("%v", val))
		}
		{{else}}
		urlParams.Set("{{.Name}}", fmt.Sprintf("%v", val))
		{{end}}
	}
{{end}}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "{{.Method}}" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: {{.Method}}")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

{{end}}