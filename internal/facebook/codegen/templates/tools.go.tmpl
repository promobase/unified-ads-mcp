// Code generated by codegen. DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

const (
	graphAPIVersion = "v23.0"
	graphAPIHost    = "https://graph.facebook.com"
)

// getAccessToken retrieves the Facebook access token from environment
func getAccessToken() string {
	return os.Getenv("FACEBOOK_ACCESS_TOKEN")
}

// buildGraphURL constructs the Facebook Graph API URL
func buildGraphURL(objectID, endpoint string) string {
	if objectID != "" {
		return fmt.Sprintf("%s/%s/%s/%s", graphAPIHost, graphAPIVersion, objectID, endpoint)
	}
	return fmt.Sprintf("%s/%s/%s", graphAPIHost, graphAPIVersion, endpoint)
}

// makeGraphRequest performs an HTTP request to the Facebook Graph API
func makeGraphRequest(method, urlStr string, data map[string]interface{}) ([]byte, error) {
	client := &http.Client{}
	
	var req *http.Request
	var err error
	
	// Parse URL to add access token
	parsedURL, err := url.Parse(urlStr)
	if err != nil {
		return nil, fmt.Errorf("invalid URL: %w", err)
	}
	
	// Add access token to query params
	q := parsedURL.Query()
	q.Set("access_token", getAccessToken())
	parsedURL.RawQuery = q.Encode()
	
	// Create request based on method
	switch method {
	case "GET", "DELETE":
		req, err = http.NewRequest(method, parsedURL.String(), nil)
	case "POST", "PUT":
		jsonData, err := json.Marshal(data)
		if err != nil {
			return nil, fmt.Errorf("failed to marshal data: %w", err)
		}
		req, err = http.NewRequest(method, parsedURL.String(), bytes.NewBuffer(jsonData))
		if err == nil {
			req.Header.Set("Content-Type", "application/json")
		}
	default:
		return nil, fmt.Errorf("unsupported method: %s", method)
	}
	
	if err != nil {
		return nil, fmt.Errorf("failed to create request: %w", err)
	}
	
	// Execute request
	resp, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("request failed: %w", err)
	}
	defer resp.Body.Close()
	
	// Read response
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("failed to read response: %w", err)
	}
	
	// Check for errors
	if resp.StatusCode >= 400 {
		var fbError map[string]interface{}
		if err := json.Unmarshal(body, &fbError); err == nil {
			if errData, ok := fbError["error"].(map[string]interface{}); ok {
				return nil, fmt.Errorf("Facebook API error: %v - %v", 
					errData["type"], errData["message"])
			}
		}
		return nil, fmt.Errorf("HTTP %d: %s", resp.StatusCode, string(body))
	}
	
	return body, nil
}

{{range .Tools}}
// {{.HandlerName}} handles {{.ToolName}}
func {{.HandlerName}}(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}
	
	{{if eq .Method "GET" "DELETE"}}
	// Build query parameters
	query := url.Values{}
	{{if .NeedsID}}
	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")
	{{else}}
	id := ""
	{{end}}
	
	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}
	
	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}
	
	// Build URL
	baseURL := buildGraphURL(id, "{{.Endpoint}}")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}
	
	// Make request
	resp, err := makeGraphRequest("{{.Method}}", baseURL, nil)
	{{else}}
	// POST/PUT request
	{{if .NeedsID}}
	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")
	{{else}}
	id := ""
	{{end}}
	
	// Build URL
	url := buildGraphURL(id, "{{.Endpoint}}")
	
	// Make request with remaining params as body
	resp, err := makeGraphRequest("{{.Method}}", url, params)
	{{end}}
	
	if err != nil {
		return nil, err
	}
	
	return mcp.NewToolResultText(string(resp)), nil
}

{{end}}

// RegisterTools registers all generated tools with the MCP server
func RegisterTools(s *server.MCPServer) error {
	{{range .Tools}}
	s.AddTool(
		mcp.NewToolWithRawSchema(
			"{{.ToolName}}",
			"{{.Description}}",
			json.RawMessage(`{{.InputSchema}}`),
		),
		{{.HandlerName}},
	)
	{{end}}
	
	return nil
}

// Total tools generated: {{.TotalTools}}