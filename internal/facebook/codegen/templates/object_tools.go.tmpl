// Code generated by codegen. DO NOT EDIT.

package generated

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

{{range .Tools}}
// {{.HandlerName}} handles {{.ToolName}}
func {{.HandlerName}}(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}
	
	{{if eq .Method "GET" "DELETE"}}
	// Build query parameters
	query := url.Values{}
	{{if .NeedsID}}
	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")
	{{else}}
	id := ""
	{{end}}
	
	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}
	
	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}
	
	// Build URL
	baseURL := buildGraphURL(id, "{{.Endpoint}}")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}
	
	// Make request
	resp, err := makeGraphRequest("{{.Method}}", baseURL, nil)
	{{else}}
	// POST/PUT request
	{{if .NeedsID}}
	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")
	{{else}}
	id := ""
	{{end}}
	
	// Build URL
	url := buildGraphURL(id, "{{.Endpoint}}")
	
	// Make request with remaining params as body
	resp, err := makeGraphRequest("{{.Method}}", url, params)
	{{end}}
	
	if err != nil {
		return nil, err
	}
	
	return mcp.NewToolResultText(string(resp)), nil
}

{{end}}

// Register{{.ObjectName}}Tools registers all {{.ObjectName}} tools with the MCP server
func Register{{.ObjectName}}Tools(s *server.MCPServer) error {
	{{range .Tools}}
	s.AddTool(
		mcp.NewToolWithRawSchema(
			"{{.ToolName}}",
			"{{.Description}}",
			json.RawMessage(`{{.InputSchema}}`),
		),
		{{.HandlerName}},
	)
	{{end}}
	
	return nil
}

// {{.ObjectName}} tools: {{.TotalTools}} endpoints