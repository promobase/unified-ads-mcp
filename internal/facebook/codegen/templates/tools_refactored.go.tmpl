// Code generated by codegen. DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

{{range .Tools}}
// {{.HandlerName}} handles {{.ToolName}}
func {{.HandlerName}}(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	{{if and (eq .Method "GET") (not .HasComplexLogic)}}
	// Use standard GET handler
	return StandardGETHandler(ctx, request, "{{.Endpoint}}", "{{.ObjectName}}", {{.NeedsID}})
	{{else if and (eq .Method "POST") (not .HasComplexLogic) (not .HasQueryParams)}}
	// Use standard POST handler
	return StandardPOSTHandler(ctx, request, "{{.Endpoint}}", {{.NeedsID}})
	{{else if and (eq .Method "DELETE") (not .HasComplexLogic)}}
	// Use standard DELETE handler
	return StandardDELETEHandler(ctx, request, "{{.Endpoint}}")
	{{else}}
	// Custom implementation required
	// Initialize parameters
	params := InitializeParams(request)
	
	{{if eq .Method "GET" "DELETE"}}
	// Build query parameters
	query := BuildQueryParameters()
	{{if .NeedsID}}
	// Extract ID
	id, err := ExtractRequiredID(params)
	if err != nil {
		return mcp.NewToolResultErrorf(err.Error()), nil
	}
	{{else}}
	id := ExtractOptionalID(params)
	{{end}}
	
	{{if eq .Method "GET"}}
	// Handle fields parameter
	HandleFieldsParameter(params, query, "{{.ObjectName}}")
	{{end}}
	
	// Add remaining parameters
	AddRemainingParams(params, query)
	
	// Build URL
	baseURL := buildGraphURL(id, "{{.Endpoint}}")
	fullURL := BuildURLWithQuery(baseURL, query)
	
	// Execute request
	return Execute{{.Method}}Request(ctx, fullURL)
	{{else}}
	// POST/PUT request
	{{if .NeedsID}}
	// Extract ID
	id, err := ExtractRequiredID(params)
	if err != nil {
		return mcp.NewToolResultErrorf(err.Error()), nil
	}
	{{else}}
	id := ExtractOptionalID(params)
	{{end}}
	
	// Build URL
	url := buildGraphURL(id, "{{.Endpoint}}")
	
	// Execute request with params as body
	return Execute{{.Method}}Request(ctx, url, params)
	{{end}}
	{{end}}
}

{{end}}

// RegisterAllTools registers all generated tools with the MCP server
func RegisterAllTools(s *server.MCPServer) error {
	// Register tools in batches by object type for better organization
	{{range .ObjectGroups}}
	// {{.ObjectName}} tools ({{len .Tools}} tools)
	{{range .Tools}}
	s.AddTool(
		mcp.NewTool(
			"{{.ToolName}}",
			mcp.WithDescription("{{.Description}}"),
			{{range .SchemaParams}}
			{{if eq .Type "string"}}
			mcp.WithString("{{.Name}}"{{if .Required}}, mcp.Required(){{end}}{{if .Description}}, mcp.Description("{{.Description}}"){{end}}),
			{{else if eq .Type "array"}}
			mcp.WithArray("{{.Name}}"{{if .Required}}, mcp.Required(){{end}}{{if .Description}}, mcp.Description("{{.Description}}"){{end}}, mcp.Items(map[string]interface{}{"type": "string"})),
			{{else if eq .Type "number"}}
			mcp.WithNumber("{{.Name}}"{{if .Required}}, mcp.Required(){{end}}{{if .Description}}, mcp.Description("{{.Description}}"){{end}}),
			{{else if eq .Type "boolean"}}
			mcp.WithBoolean("{{.Name}}"{{if .Required}}, mcp.Required(){{end}}{{if .Description}}, mcp.Description("{{.Description}}"){{end}}),
			{{else if eq .Type "object"}}
			mcp.WithObject("{{.Name}}"{{if .Required}}, mcp.Required(){{end}}{{if .Description}}, mcp.Description("{{.Description}}"){{end}}),
			{{end}}
			{{end}}
		),
		{{.HandlerName}},
	)
	{{end}}
	
	{{end}}
	
	return nil
}

// Total tools generated: {{.TotalTools}}