// Code generated by Facebook Business API codegen. DO NOT EDIT.

package hotel

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolHotel_post returns the MCP tool definition for hotel_post
func ToolHotel_post() mcp.Tool {

	// Params object accepts: address (Object), applinks (Object), base_price (unsigned int), brand (string), currency (string), description (string), guest_ratings (list<Object>), images (list<Object>), name (string), phone (string), star_rating (float), url (string)
	return mcp.NewTool("hotel_post",
		mcp.WithDescription("POST  for Hotel"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"address": map[string]any{
					"type":        "object",
					"description": "address parameter",
				},
				"applinks": map[string]any{
					"type":        "object",
					"description": "applinks parameter",
				},
				"base_price": map[string]any{
					"type":        "integer",
					"description": "base_price parameter",
				},
				"brand": map[string]any{
					"type":        "string",
					"description": "brand parameter",
				},
				"currency": map[string]any{
					"type":        "string",
					"description": "currency parameter",
				},
				"description": map[string]any{
					"type":        "string",
					"description": "description parameter",
				},
				"guest_ratings": map[string]any{
					"type":        "array",
					"description": "guest_ratings parameter",
					"items":       map[string]any{"type": "object"},
				},
				"images": map[string]any{
					"type":        "array",
					"description": "images parameter",
					"items":       map[string]any{"type": "object"},
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
				},
				"phone": map[string]any{
					"type":        "string",
					"description": "phone parameter",
				},
				"star_rating": map[string]any{
					"type":        "number",
					"description": "star_rating parameter",
				},
				"url": map[string]any{
					"type":        "string",
					"description": "url parameter",
				},
			}),
			mcp.Description("Parameters object containing: address (object), applinks (object), base_price (integer), brand (string), currency (string), description (string), guest_ratings (array<object>), images (array<object>), name (string), phone (string), star_rating (number), url (string)"),
		),
	)
}

// HandleHotel_post handles the hotel_post tool with context-based auth
func HandleHotel_post(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Hotel_post(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute hotel_post: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Hotel_post performs POST  for Hotel
func Hotel_post(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
