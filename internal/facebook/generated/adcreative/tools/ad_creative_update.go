// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_creative_updateArgs defines the typed arguments for ad_creative_update
type ad_creative_updateArgs struct {
	ID        string            `json:"id" jsonschema:"required,description=AdCreative ID,pattern=^[0-9]+$"`
	AccountId string            `json:"account_id,omitempty" jsonschema:"description=ID of the Account,pattern=^[0-9]+$"`
	Adlabels  []*common.AdLabel `json:"adlabels,omitempty" jsonschema:"description=Adlabels"`
	Name      string            `json:"name,omitempty" jsonschema:"description=Name"`
	Status    string            `json:"status,omitempty" jsonschema:"description=Status,enum=ACTIVE,enum=PAUSED,enum=DELETED,enum=ARCHIVED"`
}

// RegisterAdCreativeUpdateHandler registers the ad_creative_update tool
func RegisterAdCreativeUpdateHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_creative_update",
		"Update a AdCreative Returns AdCreative.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"account_id":{"description":"ID of the Account","pattern":"^[0-9]+$","type":"string"},"adlabels":{"description":"Adlabels","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"AdCreative ID","pattern":"^[0-9]+$","type":"string"},"name":{"description":"Name","type":"string"},"status":{"description":"Status (enum: adcreative_status)","enum":["ACTIVE","DELETED","IN_PROCESS","WITH_ISSUES"],"type":"string"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, AdCreativeUpdateHandler)
	return nil
}

// AdCreativeUpdateHandler handles the ad_creative_update tool
func AdCreativeUpdateHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_creative_updateArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if args.AccountId != "" {
		body["account_id"] = args.AccountId
	}
	if len(args.Adlabels) > 0 {
		body["adlabels"] = args.Adlabels
	}
	if args.Name != "" {
		body["name"] = args.Name
	}
	if args.Status != "" {
		body["status"] = args.Status
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
