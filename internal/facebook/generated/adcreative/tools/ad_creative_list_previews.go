// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_creative_list_previewsArgs defines the typed arguments for ad_creative_list_previews
type ad_creative_list_previewsArgs struct {
	ID                   string                 `json:"id" jsonschema:"required,description=AdCreative ID,pattern=^[0-9]+$"`
	Fields               []string               `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit                int                    `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After                string                 `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before               string                 `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AdFormat             string                 `json:"ad_format" jsonschema:"description=Ad Format,required"`
	CreativeFeature      string                 `json:"creative_feature,omitempty" jsonschema:"description=Creative Feature"`
	DynamicAssetLabel    string                 `json:"dynamic_asset_label,omitempty" jsonschema:"description=Dynamic Asset Label"`
	DynamicCreativeSpec  map[string]interface{} `json:"dynamic_creative_spec,omitempty" jsonschema:"description=Dynamic Creative Spec"`
	DynamicCustomization map[string]interface{} `json:"dynamic_customization,omitempty" jsonschema:"description=Dynamic Customization"`
	EndDate              string                 `json:"end_date,omitempty" jsonschema:"description=End Date,format=date-time"`
	Height               int                    `json:"height,omitempty" jsonschema:"description=Height"`
	Locale               string                 `json:"locale,omitempty" jsonschema:"description=Locale"`
	PlacePageId          int                    `json:"place_page_id,omitempty" jsonschema:"description=ID of the Place Page,pattern=^[0-9]+$"`
	Post                 map[string]interface{} `json:"post,omitempty" jsonschema:"description=Post"`
	ProductItemIds       []string               `json:"product_item_ids,omitempty" jsonschema:"description=Product Item Ids,pattern=^[0-9]+$"`
	RenderType           string                 `json:"render_type,omitempty" jsonschema:"description=Render Type"`
	StartDate            string                 `json:"start_date,omitempty" jsonschema:"description=Start Date,format=date-time"`
	Width                int                    `json:"width,omitempty" jsonschema:"description=Width"`
}

// RegisterAdCreativeListPreviewsHandler registers the ad_creative_list_previews tool
func RegisterAdCreativeListPreviewsHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_creative_list_previews",
		"List previews for this AdCreative Returns AdPreview. Required: ad_format (enum)",
		json.RawMessage(`{"additionalProperties":false,"properties":{"ad_format":{"description":"Ad Format (enum: adcreativepreviews_ad_format_enum_param)","enum":["AUDIENCE_NETWORK_INSTREAM_VIDEO","AUDIENCE_NETWORK_INSTREAM_VIDEO_MOBILE","AUDIENCE_NETWORK_OUTSTREAM_VIDEO","AUDIENCE_NETWORK_REWARDED_VIDEO","BIZ_DISCO_FEED_MOBILE","DESKTOP_FEED_STANDARD","FACEBOOK_PROFILE_FEED_DESKTOP","FACEBOOK_PROFILE_FEED_MOBILE","FACEBOOK_PROFILE_REELS_MOBILE","FACEBOOK_REELS_BANNER","FACEBOOK_REELS_BANNER_DESKTOP","FACEBOOK_REELS_BANNER_FULLSCREEN_IOS","FACEBOOK_REELS_BANNER_FULLSCREEN_MOBILE","FACEBOOK_REELS_MOBILE","FACEBOOK_REELS_POSTLOOP","FACEBOOK_REELS_STICKER","FACEBOOK_STORY_MOBILE","FACEBOOK_STORY_STICKER_MOBILE","INSTAGRAM_EXPLORE_CONTEXTUAL","INSTAGRAM_EXPLORE_GRID_HOME","INSTAGRAM_EXPLORE_IMMERSIVE","INSTAGRAM_FEED_WEB","INSTAGRAM_FEED_WEB_M_SITE","INSTAGRAM_LEAD_GEN_MULTI_SUBMIT_ADS","INSTAGRAM_PROFILE_FEED","INSTAGRAM_PROFILE_REELS","INSTAGRAM_REELS","INSTAGRAM_REELS_OVERLAY","INSTAGRAM_SEARCH_CHAIN","INSTAGRAM_SEARCH_GRID","INSTAGRAM_STANDARD","INSTAGRAM_STORY","INSTAGRAM_STORY_EFFECT_TRAY","INSTAGRAM_STORY_WEB","INSTAGRAM_STORY_WEB_M_SITE","INSTANT_ARTICLE_RECIRCULATION_AD","INSTANT_ARTICLE_STANDARD","INSTREAM_BANNER_DESKTOP","INSTREAM_BANNER_FULLSCREEN_IOS","INSTREAM_BANNER_FULLSCREEN_MOBILE","INSTREAM_BANNER_IMMERSIVE_MOBILE","INSTREAM_BANNER_MOBILE","INSTREAM_VIDEO_DESKTOP","INSTREAM_VIDEO_FULLSCREEN_IOS","INSTREAM_VIDEO_FULLSCREEN_MOBILE","INSTREAM_VIDEO_IMAGE","INSTREAM_VIDEO_IMMERSIVE_MOBILE","INSTREAM_VIDEO_MOBILE","JOB_BROWSER_DESKTOP","JOB_BROWSER_MOBILE","MARKETPLACE_MOBILE","MESSENGER_MOBILE_INBOX_MEDIA","MESSENGER_MOBILE_STORY_MEDIA","MOBILE_BANNER","MOBILE_FEED_BASIC","MOBILE_FEED_STANDARD","MOBILE_FULLWIDTH","MOBILE_INTERSTITIAL","MOBILE_MEDIUM_RECTANGLE","MOBILE_NATIVE","RIGHT_COLUMN_STANDARD","SUGGESTED_VIDEO_DESKTOP","SUGGESTED_VIDEO_FULLSCREEN_MOBILE","SUGGESTED_VIDEO_IMMERSIVE_MOBILE","SUGGESTED_VIDEO_MOBILE","WATCH_FEED_HOME","WATCH_FEED_MOBILE"],"type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"creative_feature":{"description":"Creative Feature (enum: adcreativepreviews_creative_feature_enum_param)","enum":["product_metadata_automation","profile_card","standard_enhancements_catalog","video_to_image"],"type":"string"},"dynamic_asset_label":{"description":"Dynamic Asset Label","type":"string"},"dynamic_creative_spec":{"additionalProperties":true,"description":"Dynamic Creative Spec","type":"object"},"dynamic_customization":{"additionalProperties":true,"description":"Dynamic Customization","type":"object"},"end_date":{"description":"End Date","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"height":{"description":"Height","type":"integer"},"id":{"description":"AdCreative ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"locale":{"description":"Locale","type":"string"},"place_page_id":{"description":"ID of the Place Page","pattern":"^[0-9]+$","type":"integer"},"post":{"additionalProperties":true,"description":"Post","type":"object"},"product_item_ids":{"description":"Product Item Ids","items":{"type":"string"},"type":"array"},"render_type":{"description":"Render Type (enum: adcreativepreviews_render_type_enum_param)","enum":["FALLBACK"],"type":"string"},"start_date":{"description":"Start Date","type":"string"},"width":{"description":"Width","type":"integer"}},"required":["id","ad_format"],"type":"object"}`),
	)

	s.AddTool(tool, AdCreativeListPreviewsHandler)
	return nil
}

// AdCreativeListPreviewsHandler handles the ad_creative_list_previews tool
func AdCreativeListPreviewsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_creative_list_previewsArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/previews", args.ID)
	// Prepare query parameters
	params := make(map[string]string)
	// ID is part of path, not query params
	if len(args.Fields) > 0 {
		params["fields"] = strings.Join(args.Fields, ",")
	}
	if args.Limit > 0 {
		params["limit"] = fmt.Sprintf("%d", args.Limit)
	}
	if args.After != "" {
		params["after"] = args.After
	}
	if args.Before != "" {
		params["before"] = args.Before
	}
	if args.AdFormat != "" {
		params["ad_format"] = args.AdFormat
	}
	if args.CreativeFeature != "" {
		params["creative_feature"] = args.CreativeFeature
	}
	if args.DynamicAssetLabel != "" {
		params["dynamic_asset_label"] = args.DynamicAssetLabel
	}
	// TODO: Handle map[string]interface{} for DynamicCreativeSpec
	// TODO: Handle map[string]interface{} for DynamicCustomization
	if args.EndDate != "" {
		params["end_date"] = args.EndDate
	}
	if args.Height > 0 {
		params["height"] = fmt.Sprintf("%d", args.Height)
	}
	if args.Locale != "" {
		params["locale"] = args.Locale
	}
	if args.PlacePageId > 0 {
		params["place_page_id"] = fmt.Sprintf("%d", args.PlacePageId)
	}
	// TODO: Handle map[string]interface{} for Post
	if len(args.ProductItemIds) > 0 {
		params["product_item_ids"] = strings.Join(args.ProductItemIds, ",")
	}
	if args.RenderType != "" {
		params["render_type"] = args.RenderType
	}
	if args.StartDate != "" {
		params["start_date"] = args.StartDate
	}
	if args.Width > 0 {
		params["width"] = fmt.Sprintf("%d", args.Width)
	}

	result, err := common.MakeGraphAPIRequest(ctx, "GET", endpoint, params, nil)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
