// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_creative_getArgs defines the typed arguments for ad_creative_get
type ad_creative_getArgs struct {
	ID              string   `json:"id" jsonschema:"required,description=AdCreative ID,pattern=^[0-9]+$"`
	Fields          []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit           int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After           string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before          string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	ThumbnailHeight int      `json:"thumbnail_height,omitempty" jsonschema:"description=Thumbnail Height"`
	ThumbnailWidth  int      `json:"thumbnail_width,omitempty" jsonschema:"description=Thumbnail Width"`
}

// RegisterAdCreativeGetHandler registers the ad_creative_get tool
func RegisterAdCreativeGetHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_creative_get",
		"Get details of a specific AdCreative Returns AdCreative.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdCreative ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"thumbnail_height":{"description":"Thumbnail Height","type":"integer"},"thumbnail_width":{"description":"Thumbnail Width","type":"integer"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, AdCreativeGetHandler)
	return nil
}

// AdCreativeGetHandler handles the ad_creative_get tool
func AdCreativeGetHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_creative_getArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s", args.ID)
	// Prepare query parameters
	params := make(map[string]string)
	// ID is part of path, not query params
	if len(args.Fields) > 0 {
		params["fields"] = strings.Join(args.Fields, ",")
	}
	if args.Limit > 0 {
		params["limit"] = fmt.Sprintf("%d", args.Limit)
	}
	if args.After != "" {
		params["after"] = args.After
	}
	if args.Before != "" {
		params["before"] = args.Before
	}
	if args.ThumbnailHeight > 0 {
		params["thumbnail_height"] = fmt.Sprintf("%d", args.ThumbnailHeight)
	}
	if args.ThumbnailWidth > 0 {
		params["thumbnail_width"] = fmt.Sprintf("%d", args.ThumbnailWidth)
	}

	result, err := common.MakeGraphAPIRequest(ctx, "GET", endpoint, params, nil)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
