// Code generated by Facebook Business API codegen. DO NOT EDIT.

package adcreative

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolAdcreative_delete_ returns the MCP tool definition for adcreative_delete_
func ToolAdcreative_delete_() mcp.Tool {

	// Params object accepts: account_id (string), adlabels (list<Object>), name (string), status (adcreative_status)
	return mcp.NewTool("adcreative_delete_",
		mcp.WithDescription("DELETE  for AdCreative"),
		mcp.WithString("ad_creative_id",
			mcp.Required(),
			mcp.Description("Facebook Ad Creative ID"),
		),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"account_id": map[string]any{
					"type":        "string",
					"description": "account_id parameter",
				},
				"adlabels": map[string]any{
					"type":        "array",
					"description": "adlabels parameter",
					"items":       map[string]any{"type": "object"},
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
				},
				"status": map[string]any{
					"type":        "string",
					"description": "status parameter",
					"enum":        []string{"ACTIVE", "DELETED", "IN_PROCESS", "WITH_ISSUES"},
				},
			}),
			mcp.Description("Parameters object containing: account_id (string), adlabels (array<object>), name (string), status (adcreative_status) [ACTIVE, DELETED, IN_PROCESS, WITH_ISSUES]"),
		),
	)
}

// HandleAdcreative_delete_ handles the adcreative_delete_ tool with context-based auth
func HandleAdcreative_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: ad_creative_id
	if err := utils.ParseRequiredString(request, "ad_creative_id", args); err != nil {
		return mcp.NewToolResultError(err.Error()), nil
	}

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Adcreative_delete_(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adcreative_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Adcreative_delete_ performs DELETE  for AdCreative
func Adcreative_delete_(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	// Extract ad_creative_id for URL construction
	adCreativeId, ok := args["ad_creative_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_creative_id is required for adcreative_delete_")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s", adCreativeId)

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{
		"ad_creative_id",
	}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("DELETE", baseURL, urlParams)
}
