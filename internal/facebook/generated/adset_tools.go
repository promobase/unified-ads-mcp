// Code generated by codegen. DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// list_ad_set_activitiesArgs defines the typed arguments for list_ad_set_activities
type list_ad_set_activitiesArgs struct {
	ID         string   `json:"id"`
	Fields     []string `json:"fields,omitempty"`
	Limit      int      `json:"limit,omitempty"`
	After      string   `json:"after,omitempty"`
	Before     string   `json:"before,omitempty"`
	BusinessId string   `json:"business_id,omitempty"`
	Category   string   `json:"category,omitempty"`
	Since      string   `json:"since,omitempty"`
	Uid        int      `json:"uid,omitempty"`
	Until      string   `json:"until,omitempty"`
}

// list_ad_set_ad_studiesArgs defines the typed arguments for list_ad_set_ad_studies
type list_ad_set_ad_studiesArgs struct {
	ID     string   `json:"id"`
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
}

// list_ad_set_adcreativesArgs defines the typed arguments for list_ad_set_adcreatives
type list_ad_set_adcreativesArgs struct {
	ID     string   `json:"id"`
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
}

// remove_adlabels_from_ad_setArgs defines the typed arguments for remove_adlabels_from_ad_set
type remove_adlabels_from_ad_setArgs struct {
	ID               string     `json:"id"`
	Adlabels         []*AdLabel `json:"adlabels"`
	ExecutionOptions []string   `json:"execution_options,omitempty"`
}

// create_ad_set_adlabelArgs defines the typed arguments for create_ad_set_adlabel
type create_ad_set_adlabelArgs struct {
	ID               string     `json:"id"`
	Adlabels         []*AdLabel `json:"adlabels"`
	ExecutionOptions []string   `json:"execution_options,omitempty"`
}

// get_ad_set_adrules_governedArgs defines the typed arguments for get_ad_set_adrules_governed
type get_ad_set_adrules_governedArgs struct {
	ID             string   `json:"id"`
	Fields         []string `json:"fields,omitempty"`
	Limit          int      `json:"limit,omitempty"`
	After          string   `json:"after,omitempty"`
	Before         string   `json:"before,omitempty"`
	PassEvaluation bool     `json:"pass_evaluation,omitempty"`
}

// list_ad_set_adsArgs defines the typed arguments for list_ad_set_ads
type list_ad_set_adsArgs struct {
	ID              string                 `json:"id"`
	Fields          []string               `json:"fields,omitempty"`
	Limit           int                    `json:"limit,omitempty"`
	After           string                 `json:"after,omitempty"`
	Before          string                 `json:"before,omitempty"`
	DatePreset      string                 `json:"date_preset,omitempty"`
	EffectiveStatus []string               `json:"effective_status,omitempty"`
	TimeRange       map[string]interface{} `json:"time_range,omitempty"`
	UpdatedSince    int                    `json:"updated_since,omitempty"`
}

// list_ad_set_asyncadrequestsArgs defines the typed arguments for list_ad_set_asyncadrequests
type list_ad_set_asyncadrequestsArgs struct {
	ID       string   `json:"id"`
	Fields   []string `json:"fields,omitempty"`
	Limit    int      `json:"limit,omitempty"`
	After    string   `json:"after,omitempty"`
	Before   string   `json:"before,omitempty"`
	Statuses []string `json:"statuses,omitempty"`
}

// create_ad_set_budget_scheduleArgs defines the typed arguments for create_ad_set_budget_schedule
type create_ad_set_budget_scheduleArgs struct {
	ID              string `json:"id"`
	BudgetValue     int    `json:"budget_value"`
	BudgetValueType string `json:"budget_value_type"`
	TimeEnd         int    `json:"time_end"`
	TimeStart       int    `json:"time_start"`
}

// list_ad_set_copiesArgs defines the typed arguments for list_ad_set_copies
type list_ad_set_copiesArgs struct {
	ID              string                 `json:"id"`
	Fields          []string               `json:"fields,omitempty"`
	Limit           int                    `json:"limit,omitempty"`
	After           string                 `json:"after,omitempty"`
	Before          string                 `json:"before,omitempty"`
	DatePreset      string                 `json:"date_preset,omitempty"`
	EffectiveStatus []string               `json:"effective_status,omitempty"`
	IsCompleted     bool                   `json:"is_completed,omitempty"`
	TimeRange       map[string]interface{} `json:"time_range,omitempty"`
}

// create_ad_set_copieArgs defines the typed arguments for create_ad_set_copie
type create_ad_set_copieArgs struct {
	ID             string                 `json:"id"`
	CampaignId     string                 `json:"campaign_id,omitempty"`
	CreateDcoAdset bool                   `json:"create_dco_adset,omitempty"`
	DeepCopy       bool                   `json:"deep_copy,omitempty"`
	EndTime        string                 `json:"end_time,omitempty"`
	RenameOptions  map[string]interface{} `json:"rename_options,omitempty"`
	StartTime      string                 `json:"start_time,omitempty"`
	StatusOption   string                 `json:"status_option,omitempty"`
}

// get_ad_set_delivery_estimateArgs defines the typed arguments for get_ad_set_delivery_estimate
type get_ad_set_delivery_estimateArgs struct {
	ID               string            `json:"id"`
	Fields           []string          `json:"fields,omitempty"`
	Limit            int               `json:"limit,omitempty"`
	After            string            `json:"after,omitempty"`
	Before           string            `json:"before,omitempty"`
	OptimizationGoal string            `json:"optimization_goal,omitempty"`
	PromotedObject   *AdPromotedObject `json:"promoted_object,omitempty"`
	TargetingSpec    *Targeting        `json:"targeting_spec,omitempty"`
}

// get_ad_set_insightsArgs defines the typed arguments for get_ad_set_insights
type get_ad_set_insightsArgs struct {
	ID                           string                   `json:"id"`
	Fields                       []string                 `json:"fields,omitempty"`
	Limit                        int                      `json:"limit,omitempty"`
	After                        string                   `json:"after,omitempty"`
	Before                       string                   `json:"before,omitempty"`
	ActionAttributionWindows     []string                 `json:"action_attribution_windows,omitempty"`
	ActionBreakdowns             []string                 `json:"action_breakdowns,omitempty"`
	ActionReportTime             string                   `json:"action_report_time,omitempty"`
	Breakdowns                   []string                 `json:"breakdowns,omitempty"`
	DatePreset                   string                   `json:"date_preset,omitempty"`
	DefaultSummary               bool                     `json:"default_summary,omitempty"`
	ExportColumns                []string                 `json:"export_columns,omitempty"`
	ExportFormat                 string                   `json:"export_format,omitempty"`
	ExportName                   string                   `json:"export_name,omitempty"`
	Filtering                    []map[string]interface{} `json:"filtering,omitempty"`
	Level                        string                   `json:"level,omitempty"`
	ProductIdLimit               int                      `json:"product_id_limit,omitempty"`
	Sort                         []string                 `json:"sort,omitempty"`
	Summary                      []string                 `json:"summary,omitempty"`
	SummaryActionBreakdowns      []string                 `json:"summary_action_breakdowns,omitempty"`
	TimeIncrement                string                   `json:"time_increment,omitempty"`
	TimeRange                    map[string]interface{}   `json:"time_range,omitempty"`
	TimeRanges                   []map[string]interface{} `json:"time_ranges,omitempty"`
	UseAccountAttributionSetting bool                     `json:"use_account_attribution_setting,omitempty"`
	UseUnifiedAttributionSetting bool                     `json:"use_unified_attribution_setting,omitempty"`
}

// create_ad_set_insights_reportArgs defines the typed arguments for create_ad_set_insights_report
type create_ad_set_insights_reportArgs struct {
	ID                           string                   `json:"id"`
	ActionAttributionWindows     []string                 `json:"action_attribution_windows,omitempty"`
	ActionBreakdowns             []string                 `json:"action_breakdowns,omitempty"`
	ActionReportTime             string                   `json:"action_report_time,omitempty"`
	Breakdowns                   []string                 `json:"breakdowns,omitempty"`
	DatePreset                   string                   `json:"date_preset,omitempty"`
	DefaultSummary               bool                     `json:"default_summary,omitempty"`
	ExportColumns                []string                 `json:"export_columns,omitempty"`
	ExportFormat                 string                   `json:"export_format,omitempty"`
	ExportName                   string                   `json:"export_name,omitempty"`
	Fields                       []string                 `json:"fields,omitempty"`
	Filtering                    []map[string]interface{} `json:"filtering,omitempty"`
	Level                        string                   `json:"level,omitempty"`
	Limit                        int                      `json:"limit,omitempty"`
	ProductIdLimit               int                      `json:"product_id_limit,omitempty"`
	Sort                         []string                 `json:"sort,omitempty"`
	Summary                      []string                 `json:"summary,omitempty"`
	SummaryActionBreakdowns      []string                 `json:"summary_action_breakdowns,omitempty"`
	TimeIncrement                string                   `json:"time_increment,omitempty"`
	TimeRange                    map[string]interface{}   `json:"time_range,omitempty"`
	TimeRanges                   []map[string]interface{} `json:"time_ranges,omitempty"`
	UseAccountAttributionSetting bool                     `json:"use_account_attribution_setting,omitempty"`
	UseUnifiedAttributionSetting bool                     `json:"use_unified_attribution_setting,omitempty"`
}

// get_ad_set_message_delivery_estimateArgs defines the typed arguments for get_ad_set_message_delivery_estimate
type get_ad_set_message_delivery_estimateArgs struct {
	Fields               []string          `json:"fields,omitempty"`
	Limit                int               `json:"limit,omitempty"`
	After                string            `json:"after,omitempty"`
	Before               string            `json:"before,omitempty"`
	BidAmount            int               `json:"bid_amount,omitempty"`
	DailyBudget          int               `json:"daily_budget,omitempty"`
	IsDirectSendCampaign bool              `json:"is_direct_send_campaign,omitempty"`
	LifetimeBudget       int               `json:"lifetime_budget,omitempty"`
	LifetimeInDays       int               `json:"lifetime_in_days,omitempty"`
	OptimizationGoal     string            `json:"optimization_goal,omitempty"`
	PacingType           string            `json:"pacing_type,omitempty"`
	PromotedObject       *AdPromotedObject `json:"promoted_object,omitempty"`
	TargetingSpec        *Targeting        `json:"targeting_spec,omitempty"`
}

// list_ad_set_targetingsentencelinesArgs defines the typed arguments for list_ad_set_targetingsentencelines
type list_ad_set_targetingsentencelinesArgs struct {
	ID     string   `json:"id"`
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
}

// delete_ad_setArgs defines the typed arguments for delete_ad_set
type delete_ad_setArgs struct {
	ID string `json:"id"`
}

// get_ad_setArgs defines the typed arguments for get_ad_set
type get_ad_setArgs struct {
	ID          string                 `json:"id"`
	Fields      []string               `json:"fields,omitempty"`
	Limit       int                    `json:"limit,omitempty"`
	After       string                 `json:"after,omitempty"`
	Before      string                 `json:"before,omitempty"`
	AmCallTags  map[string]interface{} `json:"am_call_tags,omitempty"`
	DatePreset  string                 `json:"date_preset,omitempty"`
	FromAdtable bool                   `json:"from_adtable,omitempty"`
	TimeRange   map[string]interface{} `json:"time_range,omitempty"`
}

// update_ad_setArgs defines the typed arguments for update_ad_set
type update_ad_setArgs struct {
	ID                                string                   `json:"id"`
	AccountId                         string                   `json:"account_id,omitempty"`
	Adlabels                          []*AdLabel               `json:"adlabels,omitempty"`
	AdsetSchedule                     []map[string]interface{} `json:"adset_schedule,omitempty"`
	AttributionSpec                   []map[string]interface{} `json:"attribution_spec,omitempty"`
	BidAdjustments                    map[string]interface{}   `json:"bid_adjustments,omitempty"`
	BidAmount                         int                      `json:"bid_amount,omitempty"`
	BidConstraints                    map[string]interface{}   `json:"bid_constraints,omitempty"`
	BidStrategy                       string                   `json:"bid_strategy,omitempty"`
	BillingEvent                      string                   `json:"billing_event,omitempty"`
	CampaignAttribution               map[string]interface{}   `json:"campaign_attribution,omitempty"`
	CampaignSpec                      map[string]interface{}   `json:"campaign_spec,omitempty"`
	CreativeSequence                  []string                 `json:"creative_sequence,omitempty"`
	CreativeSequenceRepetitionPattern string                   `json:"creative_sequence_repetition_pattern,omitempty"`
	DailyBudget                       int                      `json:"daily_budget,omitempty"`
	DailyImps                         int                      `json:"daily_imps,omitempty"`
	DailyMinSpendTarget               int                      `json:"daily_min_spend_target,omitempty"`
	DailySpendCap                     int                      `json:"daily_spend_cap,omitempty"`
	DateFormat                        string                   `json:"date_format,omitempty"`
	DestinationType                   string                   `json:"destination_type,omitempty"`
	DsaBeneficiary                    string                   `json:"dsa_beneficiary,omitempty"`
	DsaPayor                          string                   `json:"dsa_payor,omitempty"`
	EndTime                           string                   `json:"end_time,omitempty"`
	ExecutionOptions                  []string                 `json:"execution_options,omitempty"`
	ExistingCustomerBudgetPercentage  int                      `json:"existing_customer_budget_percentage,omitempty"`
	FullFunnelExplorationMode         string                   `json:"full_funnel_exploration_mode,omitempty"`
	IsBaSkipDelayedEligible           bool                     `json:"is_ba_skip_delayed_eligible,omitempty"`
	IsIncrementalAttributionEnabled   bool                     `json:"is_incremental_attribution_enabled,omitempty"`
	IsSacCfcaTermsCertified           bool                     `json:"is_sac_cfca_terms_certified,omitempty"`
	LifetimeBudget                    int                      `json:"lifetime_budget,omitempty"`
	LifetimeImps                      int                      `json:"lifetime_imps,omitempty"`
	LifetimeMinSpendTarget            int                      `json:"lifetime_min_spend_target,omitempty"`
	LifetimeSpendCap                  int                      `json:"lifetime_spend_cap,omitempty"`
	MaxBudgetSpendPercentage          int                      `json:"max_budget_spend_percentage,omitempty"`
	MinBudgetSpendPercentage          int                      `json:"min_budget_spend_percentage,omitempty"`
	MultiOptimizationGoalWeight       string                   `json:"multi_optimization_goal_weight,omitempty"`
	Name                              string                   `json:"name,omitempty"`
	OptimizationGoal                  string                   `json:"optimization_goal,omitempty"`
	OptimizationSubEvent              string                   `json:"optimization_sub_event,omitempty"`
	PacingType                        []string                 `json:"pacing_type,omitempty"`
	PromotedObject                    *AdPromotedObject        `json:"promoted_object,omitempty"`
	RbPredictionId                    string                   `json:"rb_prediction_id,omitempty"`
	RegionalRegulatedCategories       []string                 `json:"regional_regulated_categories,omitempty"`
	RegionalRegulationIdentities      map[string]interface{}   `json:"regional_regulation_identities,omitempty"`
	RfPredictionId                    string                   `json:"rf_prediction_id,omitempty"`
	StartTime                         string                   `json:"start_time,omitempty"`
	Status                            string                   `json:"status,omitempty"`
	Targeting                         *Targeting               `json:"targeting,omitempty"`
	TimeBasedAdRotationIdBlocks       []interface{}            `json:"time_based_ad_rotation_id_blocks,omitempty"`
	TimeBasedAdRotationIntervals      []interface{}            `json:"time_based_ad_rotation_intervals,omitempty"`
	TimeStart                         string                   `json:"time_start,omitempty"`
	TimeStop                          string                   `json:"time_stop,omitempty"`
	TuneForCategory                   string                   `json:"tune_for_category,omitempty"`
}

// ListAdSetActivitiesHandler handles list_ad_set_activities with typed arguments
func ListAdSetActivitiesHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_set_activitiesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdSet")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.BusinessId != "" {
		query.Set("business_id", args.BusinessId)
	}

	if args.Category != "" {
		query.Set("category", args.Category)
	}

	if args.Since != "" {
		query.Set("since", args.Since)
	}

	if args.Uid > 0 {
		query.Set("uid", fmt.Sprintf("%d", args.Uid))
	}

	if args.Until != "" {
		query.Set("until", args.Until)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "activities")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdSetAdStudiesHandler handles list_ad_set_ad_studies with typed arguments
func ListAdSetAdStudiesHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_set_ad_studiesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdSet")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ad_studies")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdSetAdcreativesHandler handles list_ad_set_adcreatives with typed arguments
func ListAdSetAdcreativesHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_set_adcreativesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdSet")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "adcreatives")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// RemoveAdlabelsFromAdSetHandler handles remove_adlabels_from_ad_set with typed arguments
func RemoveAdlabelsFromAdSetHandler(ctx context.Context, request mcp.CallToolRequest, args remove_adlabels_from_ad_setArgs) (*mcp.CallToolResult, error) {

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "adlabels")

	return ExecuteDELETERequest(ctx, url)

}

// CreateAdSetAdlabelHandler handles create_ad_set_adlabel with typed arguments
func CreateAdSetAdlabelHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_set_adlabelArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.Adlabels) > 0 {
		body["adlabels"] = args.Adlabels
	}

	if len(args.ExecutionOptions) > 0 {
		body["execution_options"] = args.ExecutionOptions
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "adlabels")

	return ExecutePOSTRequest(ctx, url, body)

}

// GetAdSetAdrulesGovernedHandler handles get_ad_set_adrules_governed with typed arguments
func GetAdSetAdrulesGovernedHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_set_adrules_governedArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdSet")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.PassEvaluation {
		query.Set("pass_evaluation", "true")
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "adrules_governed")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdSetAdsHandler handles list_ad_set_ads with typed arguments
func ListAdSetAdsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_set_adsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdSet")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.DatePreset != "" {
		query.Set("date_preset", args.DatePreset)
	}

	if len(args.EffectiveStatus) > 0 {
		query.Set("effective_status", strings.Join(args.EffectiveStatus, ","))
	}

	// Handle TimeRange map parameter
	for k, v := range args.TimeRange {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	if args.UpdatedSince > 0 {
		query.Set("updated_since", fmt.Sprintf("%d", args.UpdatedSince))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ads")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdSetAsyncadrequestsHandler handles list_ad_set_asyncadrequests with typed arguments
func ListAdSetAsyncadrequestsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_set_asyncadrequestsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdSet")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if len(args.Statuses) > 0 {
		query.Set("statuses", strings.Join(args.Statuses, ","))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "asyncadrequests")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdSetBudgetScheduleHandler handles create_ad_set_budget_schedule with typed arguments
func CreateAdSetBudgetScheduleHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_set_budget_scheduleArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.BudgetValue > 0 {
		body["budget_value"] = args.BudgetValue
	}

	if args.BudgetValueType != "" {
		body["budget_value_type"] = args.BudgetValueType
	}

	if args.TimeEnd > 0 {
		body["time_end"] = args.TimeEnd
	}

	if args.TimeStart > 0 {
		body["time_start"] = args.TimeStart
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "budget_schedules")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdSetCopiesHandler handles list_ad_set_copies with typed arguments
func ListAdSetCopiesHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_set_copiesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdSet")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.DatePreset != "" {
		query.Set("date_preset", args.DatePreset)
	}

	if len(args.EffectiveStatus) > 0 {
		query.Set("effective_status", strings.Join(args.EffectiveStatus, ","))
	}

	if args.IsCompleted {
		query.Set("is_completed", "true")
	}

	// Handle TimeRange map parameter
	for k, v := range args.TimeRange {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "copies")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdSetCopieHandler handles create_ad_set_copie with typed arguments
func CreateAdSetCopieHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_set_copieArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.CampaignId != "" {
		body["campaign_id"] = args.CampaignId
	}

	body["create_dco_adset"] = args.CreateDcoAdset

	body["deep_copy"] = args.DeepCopy

	if args.EndTime != "" {
		body["end_time"] = args.EndTime
	}

	if args.RenameOptions != nil {
		body["rename_options"] = args.RenameOptions
	}

	if args.StartTime != "" {
		body["start_time"] = args.StartTime
	}

	if args.StatusOption != "" {
		body["status_option"] = args.StatusOption
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "copies")

	return ExecutePOSTRequest(ctx, url, body)

}

// GetAdSetDeliveryEstimateHandler handles get_ad_set_delivery_estimate with typed arguments
func GetAdSetDeliveryEstimateHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_set_delivery_estimateArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdSet")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.OptimizationGoal != "" {
		query.Set("optimization_goal", args.OptimizationGoal)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "delivery_estimate")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// GetAdSetInsightsHandler handles get_ad_set_insights with typed arguments
func GetAdSetInsightsHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_set_insightsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdSet")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if len(args.ActionAttributionWindows) > 0 {
		query.Set("action_attribution_windows", strings.Join(args.ActionAttributionWindows, ","))
	}

	if len(args.ActionBreakdowns) > 0 {
		query.Set("action_breakdowns", strings.Join(args.ActionBreakdowns, ","))
	}

	if args.ActionReportTime != "" {
		query.Set("action_report_time", args.ActionReportTime)
	}

	if len(args.Breakdowns) > 0 {
		query.Set("breakdowns", strings.Join(args.Breakdowns, ","))
	}

	if args.DatePreset != "" {
		query.Set("date_preset", args.DatePreset)
	}

	if args.DefaultSummary {
		query.Set("default_summary", "true")
	}

	if len(args.ExportColumns) > 0 {
		query.Set("export_columns", strings.Join(args.ExportColumns, ","))
	}

	if args.ExportFormat != "" {
		query.Set("export_format", args.ExportFormat)
	}

	if args.ExportName != "" {
		query.Set("export_name", args.ExportName)
	}

	if args.Level != "" {
		query.Set("level", args.Level)
	}

	if args.ProductIdLimit > 0 {
		query.Set("product_id_limit", fmt.Sprintf("%d", args.ProductIdLimit))
	}

	if len(args.Sort) > 0 {
		query.Set("sort", strings.Join(args.Sort, ","))
	}

	if len(args.Summary) > 0 {
		query.Set("summary", strings.Join(args.Summary, ","))
	}

	if len(args.SummaryActionBreakdowns) > 0 {
		query.Set("summary_action_breakdowns", strings.Join(args.SummaryActionBreakdowns, ","))
	}

	if args.TimeIncrement != "" {
		query.Set("time_increment", args.TimeIncrement)
	}

	// Handle TimeRange map parameter
	for k, v := range args.TimeRange {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	if args.UseAccountAttributionSetting {
		query.Set("use_account_attribution_setting", "true")
	}

	if args.UseUnifiedAttributionSetting {
		query.Set("use_unified_attribution_setting", "true")
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "insights")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdSetInsightsReportHandler handles create_ad_set_insights_report with typed arguments
func CreateAdSetInsightsReportHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_set_insights_reportArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.ActionAttributionWindows) > 0 {
		body["action_attribution_windows"] = args.ActionAttributionWindows
	}

	if len(args.ActionBreakdowns) > 0 {
		body["action_breakdowns"] = args.ActionBreakdowns
	}

	if args.ActionReportTime != "" {
		body["action_report_time"] = args.ActionReportTime
	}

	if len(args.Breakdowns) > 0 {
		body["breakdowns"] = args.Breakdowns
	}

	if args.DatePreset != "" {
		body["date_preset"] = args.DatePreset
	}

	body["default_summary"] = args.DefaultSummary

	if len(args.ExportColumns) > 0 {
		body["export_columns"] = args.ExportColumns
	}

	if args.ExportFormat != "" {
		body["export_format"] = args.ExportFormat
	}

	if args.ExportName != "" {
		body["export_name"] = args.ExportName
	}

	if len(args.Fields) > 0 {
		body["fields"] = args.Fields
	}

	if len(args.Filtering) > 0 {
		body["filtering"] = args.Filtering
	}

	if args.Level != "" {
		body["level"] = args.Level
	}

	if args.Limit > 0 {
		body["limit"] = args.Limit
	}

	if args.ProductIdLimit > 0 {
		body["product_id_limit"] = args.ProductIdLimit
	}

	if len(args.Sort) > 0 {
		body["sort"] = args.Sort
	}

	if len(args.Summary) > 0 {
		body["summary"] = args.Summary
	}

	if len(args.SummaryActionBreakdowns) > 0 {
		body["summary_action_breakdowns"] = args.SummaryActionBreakdowns
	}

	if args.TimeIncrement != "" {
		body["time_increment"] = args.TimeIncrement
	}

	if args.TimeRange != nil {
		body["time_range"] = args.TimeRange
	}

	if len(args.TimeRanges) > 0 {
		body["time_ranges"] = args.TimeRanges
	}

	body["use_account_attribution_setting"] = args.UseAccountAttributionSetting

	body["use_unified_attribution_setting"] = args.UseUnifiedAttributionSetting

	// Build URL and execute
	url := buildGraphURL(args.ID, "insights")

	return ExecutePOSTRequest(ctx, url, body)

}

// GetAdSetMessageDeliveryEstimateHandler handles get_ad_set_message_delivery_estimate with typed arguments
func GetAdSetMessageDeliveryEstimateHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_set_message_delivery_estimateArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdSet")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.BidAmount > 0 {
		query.Set("bid_amount", fmt.Sprintf("%d", args.BidAmount))
	}

	if args.DailyBudget > 0 {
		query.Set("daily_budget", fmt.Sprintf("%d", args.DailyBudget))
	}

	if args.IsDirectSendCampaign {
		query.Set("is_direct_send_campaign", "true")
	}

	if args.LifetimeBudget > 0 {
		query.Set("lifetime_budget", fmt.Sprintf("%d", args.LifetimeBudget))
	}

	if args.LifetimeInDays > 0 {
		query.Set("lifetime_in_days", fmt.Sprintf("%d", args.LifetimeInDays))
	}

	if args.OptimizationGoal != "" {
		query.Set("optimization_goal", args.OptimizationGoal)
	}

	if args.PacingType != "" {
		query.Set("pacing_type", args.PacingType)
	}

	// Build URL and execute
	baseURL := buildGraphURL("", "message_delivery_estimate")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdSetTargetingsentencelinesHandler handles list_ad_set_targetingsentencelines with typed arguments
func ListAdSetTargetingsentencelinesHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_set_targetingsentencelinesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdSet")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "targetingsentencelines")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// DeleteAdSetHandler handles delete_ad_set with typed arguments
func DeleteAdSetHandler(ctx context.Context, request mcp.CallToolRequest, args delete_ad_setArgs) (*mcp.CallToolResult, error) {

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "")

	return ExecuteDELETERequest(ctx, url)

}

// GetAdSetHandler handles get_ad_set with typed arguments
func GetAdSetHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_setArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdSet")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Handle AmCallTags map parameter
	for k, v := range args.AmCallTags {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	if args.DatePreset != "" {
		query.Set("date_preset", args.DatePreset)
	}

	if args.FromAdtable {
		query.Set("from_adtable", "true")
	}

	// Handle TimeRange map parameter
	for k, v := range args.TimeRange {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UpdateAdSetHandler handles update_ad_set with typed arguments
func UpdateAdSetHandler(ctx context.Context, request mcp.CallToolRequest, args update_ad_setArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.AccountId != "" {
		body["account_id"] = args.AccountId
	}

	if len(args.Adlabels) > 0 {
		body["adlabels"] = args.Adlabels
	}

	if len(args.AdsetSchedule) > 0 {
		body["adset_schedule"] = args.AdsetSchedule
	}

	if len(args.AttributionSpec) > 0 {
		body["attribution_spec"] = args.AttributionSpec
	}

	if args.BidAdjustments != nil {
		body["bid_adjustments"] = args.BidAdjustments
	}

	if args.BidAmount > 0 {
		body["bid_amount"] = args.BidAmount
	}

	if args.BidConstraints != nil {
		body["bid_constraints"] = args.BidConstraints
	}

	if args.BidStrategy != "" {
		body["bid_strategy"] = args.BidStrategy
	}

	if args.BillingEvent != "" {
		body["billing_event"] = args.BillingEvent
	}

	if args.CampaignAttribution != nil {
		body["campaign_attribution"] = args.CampaignAttribution
	}

	if args.CampaignSpec != nil {
		body["campaign_spec"] = args.CampaignSpec
	}

	if len(args.CreativeSequence) > 0 {
		body["creative_sequence"] = args.CreativeSequence
	}

	if args.CreativeSequenceRepetitionPattern != "" {
		body["creative_sequence_repetition_pattern"] = args.CreativeSequenceRepetitionPattern
	}

	if args.DailyBudget > 0 {
		body["daily_budget"] = args.DailyBudget
	}

	if args.DailyImps > 0 {
		body["daily_imps"] = args.DailyImps
	}

	if args.DailyMinSpendTarget > 0 {
		body["daily_min_spend_target"] = args.DailyMinSpendTarget
	}

	if args.DailySpendCap > 0 {
		body["daily_spend_cap"] = args.DailySpendCap
	}

	if args.DateFormat != "" {
		body["date_format"] = args.DateFormat
	}

	if args.DestinationType != "" {
		body["destination_type"] = args.DestinationType
	}

	if args.DsaBeneficiary != "" {
		body["dsa_beneficiary"] = args.DsaBeneficiary
	}

	if args.DsaPayor != "" {
		body["dsa_payor"] = args.DsaPayor
	}

	if args.EndTime != "" {
		body["end_time"] = args.EndTime
	}

	if len(args.ExecutionOptions) > 0 {
		body["execution_options"] = args.ExecutionOptions
	}

	if args.ExistingCustomerBudgetPercentage > 0 {
		body["existing_customer_budget_percentage"] = args.ExistingCustomerBudgetPercentage
	}

	if args.FullFunnelExplorationMode != "" {
		body["full_funnel_exploration_mode"] = args.FullFunnelExplorationMode
	}

	body["is_ba_skip_delayed_eligible"] = args.IsBaSkipDelayedEligible

	body["is_incremental_attribution_enabled"] = args.IsIncrementalAttributionEnabled

	body["is_sac_cfca_terms_certified"] = args.IsSacCfcaTermsCertified

	if args.LifetimeBudget > 0 {
		body["lifetime_budget"] = args.LifetimeBudget
	}

	if args.LifetimeImps > 0 {
		body["lifetime_imps"] = args.LifetimeImps
	}

	if args.LifetimeMinSpendTarget > 0 {
		body["lifetime_min_spend_target"] = args.LifetimeMinSpendTarget
	}

	if args.LifetimeSpendCap > 0 {
		body["lifetime_spend_cap"] = args.LifetimeSpendCap
	}

	if args.MaxBudgetSpendPercentage > 0 {
		body["max_budget_spend_percentage"] = args.MaxBudgetSpendPercentage
	}

	if args.MinBudgetSpendPercentage > 0 {
		body["min_budget_spend_percentage"] = args.MinBudgetSpendPercentage
	}

	if args.MultiOptimizationGoalWeight != "" {
		body["multi_optimization_goal_weight"] = args.MultiOptimizationGoalWeight
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.OptimizationGoal != "" {
		body["optimization_goal"] = args.OptimizationGoal
	}

	if args.OptimizationSubEvent != "" {
		body["optimization_sub_event"] = args.OptimizationSubEvent
	}

	if len(args.PacingType) > 0 {
		body["pacing_type"] = args.PacingType
	}

	if args.PromotedObject != nil {
		body["promoted_object"] = args.PromotedObject
	}

	if args.RbPredictionId != "" {
		body["rb_prediction_id"] = args.RbPredictionId
	}

	if len(args.RegionalRegulatedCategories) > 0 {
		body["regional_regulated_categories"] = args.RegionalRegulatedCategories
	}

	if args.RegionalRegulationIdentities != nil {
		body["regional_regulation_identities"] = args.RegionalRegulationIdentities
	}

	if args.RfPredictionId != "" {
		body["rf_prediction_id"] = args.RfPredictionId
	}

	if args.StartTime != "" {
		body["start_time"] = args.StartTime
	}

	if args.Status != "" {
		body["status"] = args.Status
	}

	if args.Targeting != nil {
		body["targeting"] = args.Targeting
	}

	if args.TimeBasedAdRotationIdBlocks != nil {
		body["time_based_ad_rotation_id_blocks"] = args.TimeBasedAdRotationIdBlocks
	}

	if args.TimeBasedAdRotationIntervals != nil {
		body["time_based_ad_rotation_intervals"] = args.TimeBasedAdRotationIntervals
	}

	if args.TimeStart != "" {
		body["time_start"] = args.TimeStart
	}

	if args.TimeStop != "" {
		body["time_stop"] = args.TimeStop
	}

	if args.TuneForCategory != "" {
		body["tune_for_category"] = args.TuneForCategory
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "")

	return ExecutePOSTRequest(ctx, url, body)

}

// RegisterAdSetTools registers all AdSet tools with the MCP server
func RegisterAdSetTools(s *server.MCPServer) error {

	// Register list_ad_set_activities
	s.AddTool(
		mcp.NewTool("list_ad_set_activities",
			mcp.WithDescription("List activities for this AdSet Returns AdActivity."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("AdSet ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithString("business_id",
				mcp.Description("business_id"),
			),
			mcp.WithString("category",
				mcp.Description("category (enum: adcampaignactivities_category_enum_param)"),
			),
			mcp.WithString("since",
				mcp.Description("since"),
			),
			mcp.WithNumber("uid",
				mcp.Description("uid"),
			),
			mcp.WithString("until",
				mcp.Description("until"),
			),
		),
		mcp.NewTypedToolHandler(ListAdSetActivitiesHandler),
	)

	// Register list_ad_set_ad_studies
	s.AddTool(
		mcp.NewTool("list_ad_set_ad_studies",
			mcp.WithDescription("List ad_studies for this AdSet Returns AdStudy."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("AdSet ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
		),
		mcp.NewTypedToolHandler(ListAdSetAdStudiesHandler),
	)

	// Register list_ad_set_adcreatives
	s.AddTool(
		mcp.NewTool("list_ad_set_adcreatives",
			mcp.WithDescription("List adcreatives for this AdSet Returns AdCreative."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("AdSet ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
		),
		mcp.NewTypedToolHandler(ListAdSetAdcreativesHandler),
	)

	// Register remove_adlabels_from_ad_set
	s.AddTool(
		mcp.NewTool("remove_adlabels_from_ad_set",
			mcp.WithDescription("Remove adlabels from this AdSet Required: adlabels"),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("AdSet ID"),
			),
			mcp.WithArray("adlabels",
				mcp.Required(),
				mcp.Description("adlabels"),
				mcp.Items(map[string]any{"type": "object"}),
			),
			mcp.WithArray("execution_options",
				mcp.Description("execution_options"),
				mcp.Items(map[string]any{"type": "string"}),
			),
		),
		mcp.NewTypedToolHandler(RemoveAdlabelsFromAdSetHandler),
	)

	// Register create_ad_set_adlabel
	s.AddTool(
		mcp.NewTool("create_ad_set_adlabel",
			mcp.WithDescription("Associate adlabels with this AdSet Returns AdSet. Required: adlabels"),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("AdSet ID"),
			),
			mcp.WithArray("adlabels",
				mcp.Required(),
				mcp.Description("adlabels"),
				mcp.Items(map[string]any{"type": "object"}),
			),
			mcp.WithArray("execution_options",
				mcp.Description("execution_options"),
				mcp.Items(map[string]any{"type": "string"}),
			),
		),
		mcp.NewTypedToolHandler(CreateAdSetAdlabelHandler),
	)

	// Register get_ad_set_adrules_governed
	s.AddTool(
		mcp.NewTool("get_ad_set_adrules_governed",
			mcp.WithDescription("Get adrules_governed data for this AdSet Returns AdRule."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("AdSet ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithBoolean("pass_evaluation",
				mcp.Description("pass_evaluation"),
			),
		),
		mcp.NewTypedToolHandler(GetAdSetAdrulesGovernedHandler),
	)

	// Register list_ad_set_ads
	s.AddTool(
		mcp.NewTool("list_ad_set_ads",
			mcp.WithDescription("List ads for this AdSet Returns Ad."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("AdSet ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithString("date_preset",
				mcp.Description("date_preset (enum: adcampaignads_date_preset_enum_param)"),
			),
			mcp.WithArray("effective_status",
				mcp.Description("effective_status"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithObject("time_range",
				mcp.Description("time_range"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithNumber("updated_since",
				mcp.Description("updated_since"),
			),
		),
		mcp.NewTypedToolHandler(ListAdSetAdsHandler),
	)

	// Register list_ad_set_asyncadrequests
	s.AddTool(
		mcp.NewTool("list_ad_set_asyncadrequests",
			mcp.WithDescription("List asyncadrequests for this AdSet Returns AdAsyncRequest."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("AdSet ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithArray("statuses",
				mcp.Description("statuses"),
				mcp.Items(map[string]any{"type": "string"}),
			),
		),
		mcp.NewTypedToolHandler(ListAdSetAsyncadrequestsHandler),
	)

	// Register create_ad_set_budget_schedule
	s.AddTool(
		mcp.NewTool("create_ad_set_budget_schedule",
			mcp.WithDescription("Create or update budget_schedules for this AdSet Returns HighDemandPeriod. Required: budget_value, budget_value_type (enum), time_end, time_start"),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("AdSet ID"),
			),
			mcp.WithNumber("budget_value",
				mcp.Required(),
				mcp.Description("budget_value"),
			),
			mcp.WithString("budget_value_type",
				mcp.Required(),
				mcp.Description("budget_value_type (enum: adcampaignbudget_schedules_budget_value_type_enum_param)"),
			),
			mcp.WithNumber("time_end",
				mcp.Required(),
				mcp.Description("time_end"),
			),
			mcp.WithNumber("time_start",
				mcp.Required(),
				mcp.Description("time_start"),
			),
		),
		mcp.NewTypedToolHandler(CreateAdSetBudgetScheduleHandler),
	)

	// Register list_ad_set_copies
	s.AddTool(
		mcp.NewTool("list_ad_set_copies",
			mcp.WithDescription("List copies for this AdSet Returns AdSet."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("AdSet ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithString("date_preset",
				mcp.Description("date_preset (enum: adcampaigncopies_date_preset_enum_param)"),
			),
			mcp.WithArray("effective_status",
				mcp.Description("effective_status"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithBoolean("is_completed",
				mcp.Description("is_completed"),
			),
			mcp.WithObject("time_range",
				mcp.Description("time_range"),
				mcp.AdditionalProperties(true),
			),
		),
		mcp.NewTypedToolHandler(ListAdSetCopiesHandler),
	)

	// Register create_ad_set_copie
	s.AddTool(
		mcp.NewTool("create_ad_set_copie",
			mcp.WithDescription("Create a copy of this AdSet Returns AdSet."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("AdSet ID"),
			),
			mcp.WithString("campaign_id",
				mcp.Description("campaign_id"),
			),
			mcp.WithBoolean("create_dco_adset",
				mcp.Description("create_dco_adset"),
			),
			mcp.WithBoolean("deep_copy",
				mcp.Description("deep_copy"),
			),
			mcp.WithString("end_time",
				mcp.Description("end_time"),
			),
			mcp.WithObject("rename_options",
				mcp.Description("rename_options"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithString("start_time",
				mcp.Description("start_time"),
			),
			mcp.WithString("status_option",
				mcp.Description("status_option (enum: adcampaigncopies_status_option_enum_param)"),
			),
		),
		mcp.NewTypedToolHandler(CreateAdSetCopieHandler),
	)

	// Register get_ad_set_delivery_estimate
	s.AddTool(
		mcp.NewTool("get_ad_set_delivery_estimate",
			mcp.WithDescription("Get delivery_estimate data for this AdSet Returns AdCampaignDeliveryEstimate."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("AdSet ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithString("optimization_goal",
				mcp.Description("optimization_goal (enum: adcampaigndelivery_estimate_optimization_goal_enum_param)"),
			),
			mcp.WithObject("promoted_object",
				mcp.Description("promoted_object"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithString("targeting_spec",
				mcp.Description("targeting_spec"),
			),
		),
		mcp.NewTypedToolHandler(GetAdSetDeliveryEstimateHandler),
	)

	// Register get_ad_set_insights
	s.AddTool(
		mcp.NewTool("get_ad_set_insights",
			mcp.WithDescription("List insights for this AdSet Returns AdsInsights."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("AdSet ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithArray("action_attribution_windows",
				mcp.Description("action_attribution_windows"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithArray("action_breakdowns",
				mcp.Description("action_breakdowns"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithString("action_report_time",
				mcp.Description("action_report_time (enum: adcampaigninsights_action_report_time_enum_param)"),
			),
			mcp.WithArray("breakdowns",
				mcp.Description("breakdowns"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithString("date_preset",
				mcp.Description("date_preset (enum: adcampaigninsights_date_preset_enum_param)"),
			),
			mcp.WithBoolean("default_summary",
				mcp.Description("default_summary"),
			),
			mcp.WithArray("export_columns",
				mcp.Description("export_columns"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithString("export_format",
				mcp.Description("export_format"),
			),
			mcp.WithString("export_name",
				mcp.Description("export_name"),
			),
			mcp.WithArray("filtering",
				mcp.Description("filtering"),
				mcp.Items(map[string]any{"type": "object"}),
			),
			mcp.WithString("level",
				mcp.Description("level (enum: adcampaigninsights_level_enum_param)"),
			),
			mcp.WithNumber("product_id_limit",
				mcp.Description("product_id_limit"),
			),
			mcp.WithArray("sort",
				mcp.Description("sort"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithArray("summary",
				mcp.Description("summary"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithArray("summary_action_breakdowns",
				mcp.Description("summary_action_breakdowns"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithString("time_increment",
				mcp.Description("time_increment"),
			),
			mcp.WithObject("time_range",
				mcp.Description("time_range"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithArray("time_ranges",
				mcp.Description("time_ranges"),
				mcp.Items(map[string]any{"type": "object"}),
			),
			mcp.WithBoolean("use_account_attribution_setting",
				mcp.Description("use_account_attribution_setting"),
			),
			mcp.WithBoolean("use_unified_attribution_setting",
				mcp.Description("use_unified_attribution_setting"),
			),
		),
		mcp.NewTypedToolHandler(GetAdSetInsightsHandler),
	)

	// Register create_ad_set_insights_report
	s.AddTool(
		mcp.NewTool("create_ad_set_insights_report",
			mcp.WithDescription("Generate an insights report for this AdSet Returns AdReportRun."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("AdSet ID"),
			),
			mcp.WithArray("action_attribution_windows",
				mcp.Description("action_attribution_windows"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithArray("action_breakdowns",
				mcp.Description("action_breakdowns"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithString("action_report_time",
				mcp.Description("action_report_time (enum: adcampaigninsights_action_report_time_enum_param)"),
			),
			mcp.WithArray("breakdowns",
				mcp.Description("breakdowns"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithString("date_preset",
				mcp.Description("date_preset (enum: adcampaigninsights_date_preset_enum_param)"),
			),
			mcp.WithBoolean("default_summary",
				mcp.Description("default_summary"),
			),
			mcp.WithArray("export_columns",
				mcp.Description("export_columns"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithString("export_format",
				mcp.Description("export_format"),
			),
			mcp.WithString("export_name",
				mcp.Description("export_name"),
			),
			mcp.WithArray("fields",
				mcp.Description("fields"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithArray("filtering",
				mcp.Description("filtering"),
				mcp.Items(map[string]any{"type": "object"}),
			),
			mcp.WithString("level",
				mcp.Description("level (enum: adcampaigninsights_level_enum_param)"),
			),
			mcp.WithNumber("limit",
				mcp.Description("limit"),
			),
			mcp.WithNumber("product_id_limit",
				mcp.Description("product_id_limit"),
			),
			mcp.WithArray("sort",
				mcp.Description("sort"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithArray("summary",
				mcp.Description("summary"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithArray("summary_action_breakdowns",
				mcp.Description("summary_action_breakdowns"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithString("time_increment",
				mcp.Description("time_increment"),
			),
			mcp.WithObject("time_range",
				mcp.Description("time_range"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithArray("time_ranges",
				mcp.Description("time_ranges"),
				mcp.Items(map[string]any{"type": "object"}),
			),
			mcp.WithBoolean("use_account_attribution_setting",
				mcp.Description("use_account_attribution_setting"),
			),
			mcp.WithBoolean("use_unified_attribution_setting",
				mcp.Description("use_unified_attribution_setting"),
			),
		),
		mcp.NewTypedToolHandler(CreateAdSetInsightsReportHandler),
	)

	// Register get_ad_set_message_delivery_estimate
	s.AddTool(
		mcp.NewTool("get_ad_set_message_delivery_estimate",
			mcp.WithDescription("Get message_delivery_estimate data for this AdSet Returns MessageDeliveryEstimate."),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithNumber("bid_amount",
				mcp.Description("bid_amount"),
			),
			mcp.WithNumber("daily_budget",
				mcp.Description("daily_budget"),
			),
			mcp.WithBoolean("is_direct_send_campaign",
				mcp.Description("is_direct_send_campaign"),
			),
			mcp.WithNumber("lifetime_budget",
				mcp.Description("lifetime_budget"),
			),
			mcp.WithNumber("lifetime_in_days",
				mcp.Description("lifetime_in_days"),
			),
			mcp.WithString("optimization_goal",
				mcp.Description("optimization_goal (enum: adcampaignmessage_delivery_estimate_optimization_goal_enum_param)"),
			),
			mcp.WithString("pacing_type",
				mcp.Description("pacing_type (enum: adcampaignmessage_delivery_estimate_pacing_type_enum_param)"),
			),
			mcp.WithObject("promoted_object",
				mcp.Description("promoted_object"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithString("targeting_spec",
				mcp.Description("targeting_spec"),
			),
		),
		mcp.NewTypedToolHandler(GetAdSetMessageDeliveryEstimateHandler),
	)

	// Register list_ad_set_targetingsentencelines
	s.AddTool(
		mcp.NewTool("list_ad_set_targetingsentencelines",
			mcp.WithDescription("List targetingsentencelines for this AdSet Returns TargetingSentenceLine."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("AdSet ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
		),
		mcp.NewTypedToolHandler(ListAdSetTargetingsentencelinesHandler),
	)

	// Register delete_ad_set
	s.AddTool(
		mcp.NewTool("delete_ad_set",
			mcp.WithDescription("Delete a AdSet"),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("AdSet ID"),
			),
		),
		mcp.NewTypedToolHandler(DeleteAdSetHandler),
	)

	// Register get_ad_set
	s.AddTool(
		mcp.NewTool("get_ad_set",
			mcp.WithDescription("Get details of a specific AdSet Returns AdSet."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("AdSet ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithObject("am_call_tags",
				mcp.Description("am_call_tags"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithString("date_preset",
				mcp.Description("date_preset (enum: adcampaign_date_preset)"),
			),
			mcp.WithBoolean("from_adtable",
				mcp.Description("from_adtable"),
			),
			mcp.WithObject("time_range",
				mcp.Description("time_range"),
				mcp.AdditionalProperties(true),
			),
		),
		mcp.NewTypedToolHandler(GetAdSetHandler),
	)

	// Register update_ad_set
	s.AddTool(
		mcp.NewTool("update_ad_set",
			mcp.WithDescription("Update a AdSet Returns AdSet."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("AdSet ID"),
			),
			mcp.WithString("account_id",
				mcp.Description("account_id"),
			),
			mcp.WithArray("adlabels",
				mcp.Description("adlabels"),
				mcp.Items(map[string]any{"type": "object"}),
			),
			mcp.WithArray("adset_schedule",
				mcp.Description("adset_schedule"),
				mcp.Items(map[string]any{"type": "object"}),
			),
			mcp.WithArray("attribution_spec",
				mcp.Description("attribution_spec"),
				mcp.Items(map[string]any{"type": "object"}),
			),
			mcp.WithObject("bid_adjustments",
				mcp.Description("bid_adjustments"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithNumber("bid_amount",
				mcp.Description("bid_amount"),
			),
			mcp.WithObject("bid_constraints",
				mcp.Description("bid_constraints"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithString("bid_strategy",
				mcp.Description("bid_strategy (enum: adcampaign_bid_strategy)"),
			),
			mcp.WithString("billing_event",
				mcp.Description("billing_event (enum: adcampaign_billing_event)"),
			),
			mcp.WithObject("campaign_attribution",
				mcp.Description("campaign_attribution"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithObject("campaign_spec",
				mcp.Description("campaign_spec"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithArray("creative_sequence",
				mcp.Description("creative_sequence"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithString("creative_sequence_repetition_pattern",
				mcp.Description("creative_sequence_repetition_pattern (enum: adcampaign_creative_sequence_repetition_pattern)"),
			),
			mcp.WithNumber("daily_budget",
				mcp.Description("daily_budget"),
			),
			mcp.WithNumber("daily_imps",
				mcp.Description("daily_imps"),
			),
			mcp.WithNumber("daily_min_spend_target",
				mcp.Description("daily_min_spend_target"),
			),
			mcp.WithNumber("daily_spend_cap",
				mcp.Description("daily_spend_cap"),
			),
			mcp.WithString("date_format",
				mcp.Description("date_format"),
			),
			mcp.WithString("destination_type",
				mcp.Description("destination_type (enum: adcampaign_destination_type)"),
			),
			mcp.WithString("dsa_beneficiary",
				mcp.Description("dsa_beneficiary"),
			),
			mcp.WithString("dsa_payor",
				mcp.Description("dsa_payor"),
			),
			mcp.WithString("end_time",
				mcp.Description("end_time"),
			),
			mcp.WithArray("execution_options",
				mcp.Description("execution_options"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("existing_customer_budget_percentage",
				mcp.Description("existing_customer_budget_percentage"),
			),
			mcp.WithString("full_funnel_exploration_mode",
				mcp.Description("full_funnel_exploration_mode (enum: adcampaign_full_funnel_exploration_mode)"),
			),
			mcp.WithBoolean("is_ba_skip_delayed_eligible",
				mcp.Description("is_ba_skip_delayed_eligible"),
			),
			mcp.WithBoolean("is_incremental_attribution_enabled",
				mcp.Description("is_incremental_attribution_enabled"),
			),
			mcp.WithBoolean("is_sac_cfca_terms_certified",
				mcp.Description("is_sac_cfca_terms_certified"),
			),
			mcp.WithNumber("lifetime_budget",
				mcp.Description("lifetime_budget"),
			),
			mcp.WithNumber("lifetime_imps",
				mcp.Description("lifetime_imps"),
			),
			mcp.WithNumber("lifetime_min_spend_target",
				mcp.Description("lifetime_min_spend_target"),
			),
			mcp.WithNumber("lifetime_spend_cap",
				mcp.Description("lifetime_spend_cap"),
			),
			mcp.WithNumber("max_budget_spend_percentage",
				mcp.Description("max_budget_spend_percentage"),
			),
			mcp.WithNumber("min_budget_spend_percentage",
				mcp.Description("min_budget_spend_percentage"),
			),
			mcp.WithString("multi_optimization_goal_weight",
				mcp.Description("multi_optimization_goal_weight (enum: adcampaign_multi_optimization_goal_weight)"),
			),
			mcp.WithString("name",
				mcp.Description("name"),
			),
			mcp.WithString("optimization_goal",
				mcp.Description("optimization_goal (enum: adcampaign_optimization_goal)"),
			),
			mcp.WithString("optimization_sub_event",
				mcp.Description("optimization_sub_event (enum: adcampaign_optimization_sub_event)"),
			),
			mcp.WithArray("pacing_type",
				mcp.Description("pacing_type"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithObject("promoted_object",
				mcp.Description("promoted_object"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithString("rb_prediction_id",
				mcp.Description("rb_prediction_id"),
			),
			mcp.WithArray("regional_regulated_categories",
				mcp.Description("regional_regulated_categories"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithObject("regional_regulation_identities",
				mcp.Description("regional_regulation_identities"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithString("rf_prediction_id",
				mcp.Description("rf_prediction_id"),
			),
			mcp.WithString("start_time",
				mcp.Description("start_time"),
			),
			mcp.WithString("status",
				mcp.Description("status (enum: adcampaign_status)"),
			),
			mcp.WithString("targeting",
				mcp.Description("targeting"),
			),
			mcp.WithArray("time_based_ad_rotation_id_blocks",
				mcp.Description("time_based_ad_rotation_id_blocks"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithArray("time_based_ad_rotation_intervals",
				mcp.Description("time_based_ad_rotation_intervals"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithString("time_start",
				mcp.Description("time_start"),
			),
			mcp.WithString("time_stop",
				mcp.Description("time_stop"),
			),
			mcp.WithString("tune_for_category",
				mcp.Description("tune_for_category (enum: adcampaign_tune_for_category)"),
			),
		),
		mcp.NewTypedToolHandler(UpdateAdSetHandler),
	)

	return nil
}

// AdSet tools: 19 endpoints
