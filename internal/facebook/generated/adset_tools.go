// Code generated by codegen. DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"reflect"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// list_ad_set_activitiesArgs defines the typed arguments for list_ad_set_activities
type list_ad_set_activitiesArgs struct {
	ID         string   `json:"id" jsonschema:"required,description=AdSet ID,pattern=^[0-9]+$"`
	Fields     []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit      int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After      string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before     string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	BusinessId string   `json:"business_id,omitempty" jsonschema:"description=ID of the Business,pattern=^[0-9]+$"`
	Category   string   `json:"category,omitempty" jsonschema:"description=Category"`
	Since      string   `json:"since,omitempty" jsonschema:"description=Since,format=date-time"`
	Uid        int      `json:"uid,omitempty" jsonschema:"description=Uid"`
	Until      string   `json:"until,omitempty" jsonschema:"description=Until,format=date-time"`
}

// list_ad_set_ad_studiesArgs defines the typed arguments for list_ad_set_ad_studies
type list_ad_set_ad_studiesArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdSet ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// list_ad_set_adcreativesArgs defines the typed arguments for list_ad_set_adcreatives
type list_ad_set_adcreativesArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdSet ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// remove_adlabels_from_ad_setArgs defines the typed arguments for remove_adlabels_from_ad_set
type remove_adlabels_from_ad_setArgs struct {
	ID               string     `json:"id" jsonschema:"required,description=AdSet ID,pattern=^[0-9]+$"`
	Adlabels         []*AdLabel `json:"adlabels" jsonschema:"description=Adlabels,required"`
	ExecutionOptions []string   `json:"execution_options,omitempty" jsonschema:"description=Execution Options"`
}

// create_ad_set_adlabelArgs defines the typed arguments for create_ad_set_adlabel
type create_ad_set_adlabelArgs struct {
	ID               string     `json:"id" jsonschema:"required,description=AdSet ID,pattern=^[0-9]+$"`
	Adlabels         []*AdLabel `json:"adlabels" jsonschema:"description=Adlabels,required"`
	ExecutionOptions []string   `json:"execution_options,omitempty" jsonschema:"description=Execution Options"`
}

// get_ad_set_adrules_governedArgs defines the typed arguments for get_ad_set_adrules_governed
type get_ad_set_adrules_governedArgs struct {
	ID             string   `json:"id" jsonschema:"required,description=AdSet ID,pattern=^[0-9]+$"`
	Fields         []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit          int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After          string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before         string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	PassEvaluation bool     `json:"pass_evaluation,omitempty" jsonschema:"description=Pass Evaluation"`
}

// list_ad_set_adsArgs defines the typed arguments for list_ad_set_ads
type list_ad_set_adsArgs struct {
	ID              string                 `json:"id" jsonschema:"required,description=AdSet ID,pattern=^[0-9]+$"`
	Fields          []string               `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit           int                    `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After           string                 `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before          string                 `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	DatePreset      string                 `json:"date_preset,omitempty" jsonschema:"description=Date Preset"`
	EffectiveStatus []string               `json:"effective_status,omitempty" jsonschema:"description=Effective Status"`
	TimeRange       map[string]interface{} `json:"time_range,omitempty" jsonschema:"description=Time Range"`
	UpdatedSince    int                    `json:"updated_since,omitempty" jsonschema:"description=When last updated"`
}

// list_ad_set_asyncadrequestsArgs defines the typed arguments for list_ad_set_asyncadrequests
type list_ad_set_asyncadrequestsArgs struct {
	ID       string   `json:"id" jsonschema:"required,description=AdSet ID,pattern=^[0-9]+$"`
	Fields   []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit    int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After    string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before   string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Statuses []string `json:"statuses,omitempty" jsonschema:"description=Statuses"`
}

// create_ad_set_budget_scheduleArgs defines the typed arguments for create_ad_set_budget_schedule
type create_ad_set_budget_scheduleArgs struct {
	ID              string `json:"id" jsonschema:"required,description=AdSet ID,pattern=^[0-9]+$"`
	BudgetValue     int    `json:"budget_value" jsonschema:"description=Budget Value,required,minimum=1"`
	BudgetValueType string `json:"budget_value_type" jsonschema:"description=Budget Value Type,required"`
	TimeEnd         int    `json:"time_end" jsonschema:"description=Time End,required"`
	TimeStart       int    `json:"time_start" jsonschema:"description=Time Start,required"`
}

// list_ad_set_copiesArgs defines the typed arguments for list_ad_set_copies
type list_ad_set_copiesArgs struct {
	ID              string                 `json:"id" jsonschema:"required,description=AdSet ID,pattern=^[0-9]+$"`
	Fields          []string               `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit           int                    `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After           string                 `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before          string                 `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	DatePreset      string                 `json:"date_preset,omitempty" jsonschema:"description=Date Preset"`
	EffectiveStatus []string               `json:"effective_status,omitempty" jsonschema:"description=Effective Status"`
	IsCompleted     bool                   `json:"is_completed,omitempty" jsonschema:"description=Is Completed"`
	TimeRange       map[string]interface{} `json:"time_range,omitempty" jsonschema:"description=Time Range"`
}

// create_ad_set_copieArgs defines the typed arguments for create_ad_set_copie
type create_ad_set_copieArgs struct {
	ID             string                 `json:"id" jsonschema:"required,description=AdSet ID,pattern=^[0-9]+$"`
	CampaignId     string                 `json:"campaign_id,omitempty" jsonschema:"description=ID of the Campaign,pattern=^[0-9]+$"`
	CreateDcoAdset bool                   `json:"create_dco_adset,omitempty" jsonschema:"description=Create Dco Adset"`
	DeepCopy       bool                   `json:"deep_copy,omitempty" jsonschema:"description=Deep Copy"`
	EndTime        string                 `json:"end_time,omitempty" jsonschema:"description=End Time,format=date-time"`
	RenameOptions  map[string]interface{} `json:"rename_options,omitempty" jsonschema:"description=Rename Options"`
	StartTime      string                 `json:"start_time,omitempty" jsonschema:"description=Start Time,format=date-time"`
	StatusOption   string                 `json:"status_option,omitempty" jsonschema:"description=Status Option"`
}

// get_ad_set_delivery_estimateArgs defines the typed arguments for get_ad_set_delivery_estimate
type get_ad_set_delivery_estimateArgs struct {
	ID               string            `json:"id" jsonschema:"required,description=AdSet ID,pattern=^[0-9]+$"`
	Fields           []string          `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit            int               `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After            string            `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before           string            `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	OptimizationGoal string            `json:"optimization_goal,omitempty" jsonschema:"description=Optimization Goal"`
	PromotedObject   *AdPromotedObject `json:"promoted_object,omitempty" jsonschema:"description=Promoted Object"`
	TargetingSpec    *Targeting        `json:"targeting_spec,omitempty" jsonschema:"description=Targeting Spec"`
}

// get_ad_set_insightsArgs defines the typed arguments for get_ad_set_insights
type get_ad_set_insightsArgs struct {
	ID                           string                   `json:"id" jsonschema:"required,description=AdSet ID,pattern=^[0-9]+$"`
	Fields                       []string                 `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit                        int                      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After                        string                   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before                       string                   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	ActionAttributionWindows     []string                 `json:"action_attribution_windows,omitempty" jsonschema:"description=Action Attribution Windows"`
	ActionBreakdowns             []string                 `json:"action_breakdowns,omitempty" jsonschema:"description=Action Breakdowns"`
	ActionReportTime             string                   `json:"action_report_time,omitempty" jsonschema:"description=Action Report Time"`
	Breakdowns                   []string                 `json:"breakdowns,omitempty" jsonschema:"description=Breakdowns"`
	DatePreset                   string                   `json:"date_preset,omitempty" jsonschema:"description=Date Preset"`
	DefaultSummary               bool                     `json:"default_summary,omitempty" jsonschema:"description=Default Summary"`
	ExportColumns                []string                 `json:"export_columns,omitempty" jsonschema:"description=Export Columns"`
	ExportFormat                 string                   `json:"export_format,omitempty" jsonschema:"description=Export Format"`
	ExportName                   string                   `json:"export_name,omitempty" jsonschema:"description=Export Name"`
	Filtering                    []map[string]interface{} `json:"filtering,omitempty" jsonschema:"description=Filtering"`
	Level                        string                   `json:"level,omitempty" jsonschema:"description=Level"`
	ProductIdLimit               int                      `json:"product_id_limit,omitempty" jsonschema:"description=Product ID Limit,pattern=^[0-9]+$"`
	Sort                         []string                 `json:"sort,omitempty" jsonschema:"description=Sort"`
	Summary                      []string                 `json:"summary,omitempty" jsonschema:"description=Summary"`
	SummaryActionBreakdowns      []string                 `json:"summary_action_breakdowns,omitempty" jsonschema:"description=Summary Action Breakdowns"`
	TimeIncrement                string                   `json:"time_increment,omitempty" jsonschema:"description=Time Increment"`
	TimeRange                    map[string]interface{}   `json:"time_range,omitempty" jsonschema:"description=Time Range"`
	TimeRanges                   []map[string]interface{} `json:"time_ranges,omitempty" jsonschema:"description=Time Ranges"`
	UseAccountAttributionSetting bool                     `json:"use_account_attribution_setting,omitempty" jsonschema:"description=Use Account Attribution Setting"`
	UseUnifiedAttributionSetting bool                     `json:"use_unified_attribution_setting,omitempty" jsonschema:"description=Use Unified Attribution Setting"`
}

// create_ad_set_insights_reportArgs defines the typed arguments for create_ad_set_insights_report
type create_ad_set_insights_reportArgs struct {
	ID                           string                   `json:"id" jsonschema:"required,description=AdSet ID,pattern=^[0-9]+$"`
	ActionAttributionWindows     []string                 `json:"action_attribution_windows,omitempty" jsonschema:"description=Action Attribution Windows"`
	ActionBreakdowns             []string                 `json:"action_breakdowns,omitempty" jsonschema:"description=Action Breakdowns"`
	ActionReportTime             string                   `json:"action_report_time,omitempty" jsonschema:"description=Action Report Time"`
	Breakdowns                   []string                 `json:"breakdowns,omitempty" jsonschema:"description=Breakdowns"`
	DatePreset                   string                   `json:"date_preset,omitempty" jsonschema:"description=Date Preset"`
	DefaultSummary               bool                     `json:"default_summary,omitempty" jsonschema:"description=Default Summary"`
	ExportColumns                []string                 `json:"export_columns,omitempty" jsonschema:"description=Export Columns"`
	ExportFormat                 string                   `json:"export_format,omitempty" jsonschema:"description=Export Format"`
	ExportName                   string                   `json:"export_name,omitempty" jsonschema:"description=Export Name"`
	Fields                       []string                 `json:"fields,omitempty" jsonschema:"description=Fields"`
	Filtering                    []map[string]interface{} `json:"filtering,omitempty" jsonschema:"description=Filtering"`
	Level                        string                   `json:"level,omitempty" jsonschema:"description=Level"`
	Limit                        int                      `json:"limit,omitempty" jsonschema:"description=Limit"`
	ProductIdLimit               int                      `json:"product_id_limit,omitempty" jsonschema:"description=Product ID Limit,pattern=^[0-9]+$"`
	Sort                         []string                 `json:"sort,omitempty" jsonschema:"description=Sort"`
	Summary                      []string                 `json:"summary,omitempty" jsonschema:"description=Summary"`
	SummaryActionBreakdowns      []string                 `json:"summary_action_breakdowns,omitempty" jsonschema:"description=Summary Action Breakdowns"`
	TimeIncrement                string                   `json:"time_increment,omitempty" jsonschema:"description=Time Increment"`
	TimeRange                    map[string]interface{}   `json:"time_range,omitempty" jsonschema:"description=Time Range"`
	TimeRanges                   []map[string]interface{} `json:"time_ranges,omitempty" jsonschema:"description=Time Ranges"`
	UseAccountAttributionSetting bool                     `json:"use_account_attribution_setting,omitempty" jsonschema:"description=Use Account Attribution Setting"`
	UseUnifiedAttributionSetting bool                     `json:"use_unified_attribution_setting,omitempty" jsonschema:"description=Use Unified Attribution Setting"`
}

// get_ad_set_message_delivery_estimateArgs defines the typed arguments for get_ad_set_message_delivery_estimate
type get_ad_set_message_delivery_estimateArgs struct {
	Fields               []string          `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit                int               `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After                string            `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before               string            `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	BidAmount            int               `json:"bid_amount,omitempty" jsonschema:"description=Bid Amount,minimum=1"`
	DailyBudget          int               `json:"daily_budget,omitempty" jsonschema:"description=Daily Budget,minimum=1"`
	IsDirectSendCampaign bool              `json:"is_direct_send_campaign,omitempty" jsonschema:"description=Is Direct Send Campaign"`
	LifetimeBudget       int               `json:"lifetime_budget,omitempty" jsonschema:"description=Lifetime Budget,minimum=1"`
	LifetimeInDays       int               `json:"lifetime_in_days,omitempty" jsonschema:"description=Lifetime In Days"`
	OptimizationGoal     string            `json:"optimization_goal,omitempty" jsonschema:"description=Optimization Goal"`
	PacingType           string            `json:"pacing_type,omitempty" jsonschema:"description=Pacing Type"`
	PromotedObject       *AdPromotedObject `json:"promoted_object,omitempty" jsonschema:"description=Promoted Object"`
	TargetingSpec        *Targeting        `json:"targeting_spec,omitempty" jsonschema:"description=Targeting Spec"`
}

// list_ad_set_targetingsentencelinesArgs defines the typed arguments for list_ad_set_targetingsentencelines
type list_ad_set_targetingsentencelinesArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdSet ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// delete_ad_setArgs defines the typed arguments for delete_ad_set
type delete_ad_setArgs struct {
	ID string `json:"id" jsonschema:"required,description=AdSet ID,pattern=^[0-9]+$"`
}

// get_ad_setArgs defines the typed arguments for get_ad_set
type get_ad_setArgs struct {
	ID          string                 `json:"id" jsonschema:"required,description=AdSet ID,pattern=^[0-9]+$"`
	Fields      []string               `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit       int                    `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After       string                 `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before      string                 `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AmCallTags  map[string]interface{} `json:"am_call_tags,omitempty" jsonschema:"description=Am Call Tags"`
	DatePreset  string                 `json:"date_preset,omitempty" jsonschema:"description=Date Preset"`
	FromAdtable bool                   `json:"from_adtable,omitempty" jsonschema:"description=From Adtable"`
	TimeRange   map[string]interface{} `json:"time_range,omitempty" jsonschema:"description=Time Range"`
}

// update_ad_setArgs defines the typed arguments for update_ad_set
type update_ad_setArgs struct {
	ID                                string                   `json:"id" jsonschema:"required,description=AdSet ID,pattern=^[0-9]+$"`
	AccountId                         string                   `json:"account_id,omitempty" jsonschema:"description=ID of the Account,pattern=^[0-9]+$"`
	Adlabels                          []*AdLabel               `json:"adlabels,omitempty" jsonschema:"description=Adlabels"`
	AdsetSchedule                     []map[string]interface{} `json:"adset_schedule,omitempty" jsonschema:"description=Adset Schedule"`
	AttributionSpec                   []map[string]interface{} `json:"attribution_spec,omitempty" jsonschema:"description=Attribution Spec"`
	BidAdjustments                    map[string]interface{}   `json:"bid_adjustments,omitempty" jsonschema:"description=Bid Adjustments"`
	BidAmount                         int                      `json:"bid_amount,omitempty" jsonschema:"description=Bid Amount,minimum=1"`
	BidConstraints                    map[string]interface{}   `json:"bid_constraints,omitempty" jsonschema:"description=Bid Constraints"`
	BidStrategy                       string                   `json:"bid_strategy,omitempty" jsonschema:"description=Bid Strategy"`
	BillingEvent                      string                   `json:"billing_event,omitempty" jsonschema:"description=Billing Event"`
	CampaignAttribution               map[string]interface{}   `json:"campaign_attribution,omitempty" jsonschema:"description=Campaign Attribution"`
	CampaignSpec                      map[string]interface{}   `json:"campaign_spec,omitempty" jsonschema:"description=Campaign Spec"`
	CreativeSequence                  []string                 `json:"creative_sequence,omitempty" jsonschema:"description=Creative Sequence"`
	CreativeSequenceRepetitionPattern string                   `json:"creative_sequence_repetition_pattern,omitempty" jsonschema:"description=Creative Sequence Repetition Pattern"`
	DailyBudget                       int                      `json:"daily_budget,omitempty" jsonschema:"description=Daily Budget,minimum=1"`
	DailyImps                         int                      `json:"daily_imps,omitempty" jsonschema:"description=Daily Imps"`
	DailyMinSpendTarget               int                      `json:"daily_min_spend_target,omitempty" jsonschema:"description=Daily Min Spend Target"`
	DailySpendCap                     int                      `json:"daily_spend_cap,omitempty" jsonschema:"description=Daily Spend Cap"`
	DateFormat                        string                   `json:"date_format,omitempty" jsonschema:"description=Date Format"`
	DestinationType                   string                   `json:"destination_type,omitempty" jsonschema:"description=Destination Type"`
	DsaBeneficiary                    string                   `json:"dsa_beneficiary,omitempty" jsonschema:"description=Dsa Beneficiary"`
	DsaPayor                          string                   `json:"dsa_payor,omitempty" jsonschema:"description=Dsa Payor"`
	EndTime                           string                   `json:"end_time,omitempty" jsonschema:"description=End Time,format=date-time"`
	ExecutionOptions                  []string                 `json:"execution_options,omitempty" jsonschema:"description=Execution Options"`
	ExistingCustomerBudgetPercentage  int                      `json:"existing_customer_budget_percentage,omitempty" jsonschema:"description=Existing Customer Budget Percentage,minimum=13,maximum=100"`
	FullFunnelExplorationMode         string                   `json:"full_funnel_exploration_mode,omitempty" jsonschema:"description=Full Funnel Exploration Mode"`
	IsBaSkipDelayedEligible           bool                     `json:"is_ba_skip_delayed_eligible,omitempty" jsonschema:"description=Is Ba Skip Delayed Eligible"`
	IsIncrementalAttributionEnabled   bool                     `json:"is_incremental_attribution_enabled,omitempty" jsonschema:"description=Is Incremental Attribution Enabled"`
	IsSacCfcaTermsCertified           bool                     `json:"is_sac_cfca_terms_certified,omitempty" jsonschema:"description=Is Sac Cfca Terms Certified"`
	LifetimeBudget                    int                      `json:"lifetime_budget,omitempty" jsonschema:"description=Lifetime Budget,minimum=1"`
	LifetimeImps                      int                      `json:"lifetime_imps,omitempty" jsonschema:"description=Lifetime Imps"`
	LifetimeMinSpendTarget            int                      `json:"lifetime_min_spend_target,omitempty" jsonschema:"description=Lifetime Min Spend Target"`
	LifetimeSpendCap                  int                      `json:"lifetime_spend_cap,omitempty" jsonschema:"description=Lifetime Spend Cap"`
	MaxBudgetSpendPercentage          int                      `json:"max_budget_spend_percentage,omitempty" jsonschema:"description=Max Budget Spend Percentage,minimum=13,maximum=100"`
	MinBudgetSpendPercentage          int                      `json:"min_budget_spend_percentage,omitempty" jsonschema:"description=Min Budget Spend Percentage,minimum=13,maximum=100"`
	MultiOptimizationGoalWeight       string                   `json:"multi_optimization_goal_weight,omitempty" jsonschema:"description=Multi Optimization Goal Weight"`
	Name                              string                   `json:"name,omitempty" jsonschema:"description=Name"`
	OptimizationGoal                  string                   `json:"optimization_goal,omitempty" jsonschema:"description=Optimization Goal"`
	OptimizationSubEvent              string                   `json:"optimization_sub_event,omitempty" jsonschema:"description=Optimization Sub Event"`
	PacingType                        []string                 `json:"pacing_type,omitempty" jsonschema:"description=Pacing Type"`
	PromotedObject                    *AdPromotedObject        `json:"promoted_object,omitempty" jsonschema:"description=Promoted Object"`
	RbPredictionId                    string                   `json:"rb_prediction_id,omitempty" jsonschema:"description=ID of the Rb Prediction,pattern=^[0-9]+$"`
	RegionalRegulatedCategories       []string                 `json:"regional_regulated_categories,omitempty" jsonschema:"description=Regional Regulated Categories"`
	RegionalRegulationIdentities      map[string]interface{}   `json:"regional_regulation_identities,omitempty" jsonschema:"description=Regional Regulation Identities,pattern=^[0-9]+$"`
	RfPredictionId                    string                   `json:"rf_prediction_id,omitempty" jsonschema:"description=ID of the Rf Prediction,pattern=^[0-9]+$"`
	StartTime                         string                   `json:"start_time,omitempty" jsonschema:"description=Start Time,format=date-time"`
	Status                            string                   `json:"status,omitempty" jsonschema:"description=Status,enum=ACTIVE,enum=PAUSED,enum=DELETED,enum=ARCHIVED"`
	Targeting                         *Targeting               `json:"targeting,omitempty" jsonschema:"description=Targeting"`
	TimeBasedAdRotationIdBlocks       []interface{}            `json:"time_based_ad_rotation_id_blocks,omitempty" jsonschema:"description=Time Based Ad Rotation ID Blocks,pattern=^[0-9]+$"`
	TimeBasedAdRotationIntervals      []interface{}            `json:"time_based_ad_rotation_intervals,omitempty" jsonschema:"description=Time Based Ad Rotation Intervals"`
	TimeStart                         string                   `json:"time_start,omitempty" jsonschema:"description=Time Start,format=date-time"`
	TimeStop                          string                   `json:"time_stop,omitempty" jsonschema:"description=Time Stop,format=date-time"`
	TuneForCategory                   string                   `json:"tune_for_category,omitempty" jsonschema:"description=Tune For Category"`
}

var (
	list_ad_set_activitiesSchema = generateSchemaForType(reflect.TypeOf(list_ad_set_activitiesArgs{}))

	list_ad_set_ad_studiesSchema = generateSchemaForType(reflect.TypeOf(list_ad_set_ad_studiesArgs{}))

	list_ad_set_adcreativesSchema = generateSchemaForType(reflect.TypeOf(list_ad_set_adcreativesArgs{}))

	remove_adlabels_from_ad_setSchema = generateSchemaForType(reflect.TypeOf(remove_adlabels_from_ad_setArgs{}))

	create_ad_set_adlabelSchema = generateSchemaForType(reflect.TypeOf(create_ad_set_adlabelArgs{}))

	get_ad_set_adrules_governedSchema = generateSchemaForType(reflect.TypeOf(get_ad_set_adrules_governedArgs{}))

	list_ad_set_adsSchema = generateSchemaForType(reflect.TypeOf(list_ad_set_adsArgs{}))

	list_ad_set_asyncadrequestsSchema = generateSchemaForType(reflect.TypeOf(list_ad_set_asyncadrequestsArgs{}))

	create_ad_set_budget_scheduleSchema = generateSchemaForType(reflect.TypeOf(create_ad_set_budget_scheduleArgs{}))

	list_ad_set_copiesSchema = generateSchemaForType(reflect.TypeOf(list_ad_set_copiesArgs{}))

	create_ad_set_copieSchema = generateSchemaForType(reflect.TypeOf(create_ad_set_copieArgs{}))

	get_ad_set_delivery_estimateSchema = generateSchemaForType(reflect.TypeOf(get_ad_set_delivery_estimateArgs{}))

	get_ad_set_insightsSchema = generateSchemaForType(reflect.TypeOf(get_ad_set_insightsArgs{}))

	create_ad_set_insights_reportSchema = generateSchemaForType(reflect.TypeOf(create_ad_set_insights_reportArgs{}))

	get_ad_set_message_delivery_estimateSchema = generateSchemaForType(reflect.TypeOf(get_ad_set_message_delivery_estimateArgs{}))

	list_ad_set_targetingsentencelinesSchema = generateSchemaForType(reflect.TypeOf(list_ad_set_targetingsentencelinesArgs{}))

	delete_ad_setSchema = generateSchemaForType(reflect.TypeOf(delete_ad_setArgs{}))

	get_ad_setSchema = generateSchemaForType(reflect.TypeOf(get_ad_setArgs{}))

	update_ad_setSchema = generateSchemaForType(reflect.TypeOf(update_ad_setArgs{}))
)

// ListAdSetActivitiesHandler handles list_ad_set_activities with typed arguments
func ListAdSetActivitiesHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_set_activitiesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdSet")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.BusinessId != "" {
		query.Set("business_id", args.BusinessId)
	}

	if args.Category != "" {
		query.Set("category", args.Category)
	}

	if args.Since != "" {
		query.Set("since", args.Since)
	}

	if args.Uid > 0 {
		query.Set("uid", fmt.Sprintf("%d", args.Uid))
	}

	if args.Until != "" {
		query.Set("until", args.Until)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "activities")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdSetAdStudiesHandler handles list_ad_set_ad_studies with typed arguments
func ListAdSetAdStudiesHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_set_ad_studiesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdSet")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ad_studies")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdSetAdcreativesHandler handles list_ad_set_adcreatives with typed arguments
func ListAdSetAdcreativesHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_set_adcreativesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdSet")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "adcreatives")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// RemoveAdlabelsFromAdSetHandler handles remove_adlabels_from_ad_set with typed arguments
func RemoveAdlabelsFromAdSetHandler(ctx context.Context, request mcp.CallToolRequest, args remove_adlabels_from_ad_setArgs) (*mcp.CallToolResult, error) {

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	url := buildGraphURL(args.ID, "adlabels")
	return ExecuteDELETERequest(ctx, url)

}

// CreateAdSetAdlabelHandler handles create_ad_set_adlabel with typed arguments
func CreateAdSetAdlabelHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_set_adlabelArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.Adlabels) > 0 {
		body["adlabels"] = args.Adlabels
	}

	if len(args.ExecutionOptions) > 0 {
		body["execution_options"] = args.ExecutionOptions
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "adlabels")

	return ExecutePOSTRequest(ctx, url, body)

}

// GetAdSetAdrulesGovernedHandler handles get_ad_set_adrules_governed with typed arguments
func GetAdSetAdrulesGovernedHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_set_adrules_governedArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdSet")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.PassEvaluation {
		query.Set("pass_evaluation", "true")
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "adrules_governed")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdSetAdsHandler handles list_ad_set_ads with typed arguments
func ListAdSetAdsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_set_adsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdSet")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.DatePreset != "" {
		query.Set("date_preset", args.DatePreset)
	}

	if len(args.EffectiveStatus) > 0 {
		query.Set("effective_status", strings.Join(args.EffectiveStatus, ","))
	}

	// Handle TimeRange map parameter
	for k, v := range args.TimeRange {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	if args.UpdatedSince > 0 {
		query.Set("updated_since", fmt.Sprintf("%d", args.UpdatedSince))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ads")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdSetAsyncadrequestsHandler handles list_ad_set_asyncadrequests with typed arguments
func ListAdSetAsyncadrequestsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_set_asyncadrequestsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdSet")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if len(args.Statuses) > 0 {
		query.Set("statuses", strings.Join(args.Statuses, ","))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "asyncadrequests")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdSetBudgetScheduleHandler handles create_ad_set_budget_schedule with typed arguments
func CreateAdSetBudgetScheduleHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_set_budget_scheduleArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.BudgetValue > 0 {
		body["budget_value"] = args.BudgetValue
	}

	if args.BudgetValueType != "" {
		body["budget_value_type"] = args.BudgetValueType
	}

	if args.TimeEnd > 0 {
		body["time_end"] = args.TimeEnd
	}

	if args.TimeStart > 0 {
		body["time_start"] = args.TimeStart
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "budget_schedules")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdSetCopiesHandler handles list_ad_set_copies with typed arguments
func ListAdSetCopiesHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_set_copiesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdSet")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.DatePreset != "" {
		query.Set("date_preset", args.DatePreset)
	}

	if len(args.EffectiveStatus) > 0 {
		query.Set("effective_status", strings.Join(args.EffectiveStatus, ","))
	}

	if args.IsCompleted {
		query.Set("is_completed", "true")
	}

	// Handle TimeRange map parameter
	for k, v := range args.TimeRange {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "copies")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdSetCopieHandler handles create_ad_set_copie with typed arguments
func CreateAdSetCopieHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_set_copieArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.CampaignId != "" {
		body["campaign_id"] = args.CampaignId
	}

	body["create_dco_adset"] = args.CreateDcoAdset

	body["deep_copy"] = args.DeepCopy

	if args.EndTime != "" {
		body["end_time"] = args.EndTime
	}

	if args.RenameOptions != nil {
		body["rename_options"] = args.RenameOptions
	}

	if args.StartTime != "" {
		body["start_time"] = args.StartTime
	}

	if args.StatusOption != "" {
		body["status_option"] = args.StatusOption
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "copies")

	return ExecutePOSTRequest(ctx, url, body)

}

// GetAdSetDeliveryEstimateHandler handles get_ad_set_delivery_estimate with typed arguments
func GetAdSetDeliveryEstimateHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_set_delivery_estimateArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdSet")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.OptimizationGoal != "" {
		query.Set("optimization_goal", args.OptimizationGoal)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "delivery_estimate")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// GetAdSetInsightsHandler handles get_ad_set_insights with typed arguments
func GetAdSetInsightsHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_set_insightsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdSet")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if len(args.ActionAttributionWindows) > 0 {
		query.Set("action_attribution_windows", strings.Join(args.ActionAttributionWindows, ","))
	}

	if len(args.ActionBreakdowns) > 0 {
		query.Set("action_breakdowns", strings.Join(args.ActionBreakdowns, ","))
	}

	if args.ActionReportTime != "" {
		query.Set("action_report_time", args.ActionReportTime)
	}

	if len(args.Breakdowns) > 0 {
		query.Set("breakdowns", strings.Join(args.Breakdowns, ","))
	}

	if args.DatePreset != "" {
		query.Set("date_preset", args.DatePreset)
	}

	if args.DefaultSummary {
		query.Set("default_summary", "true")
	}

	if len(args.ExportColumns) > 0 {
		query.Set("export_columns", strings.Join(args.ExportColumns, ","))
	}

	if args.ExportFormat != "" {
		query.Set("export_format", args.ExportFormat)
	}

	if args.ExportName != "" {
		query.Set("export_name", args.ExportName)
	}

	if args.Level != "" {
		query.Set("level", args.Level)
	}

	if args.ProductIdLimit > 0 {
		query.Set("product_id_limit", fmt.Sprintf("%d", args.ProductIdLimit))
	}

	if len(args.Sort) > 0 {
		query.Set("sort", strings.Join(args.Sort, ","))
	}

	if len(args.Summary) > 0 {
		query.Set("summary", strings.Join(args.Summary, ","))
	}

	if len(args.SummaryActionBreakdowns) > 0 {
		query.Set("summary_action_breakdowns", strings.Join(args.SummaryActionBreakdowns, ","))
	}

	if args.TimeIncrement != "" {
		query.Set("time_increment", args.TimeIncrement)
	}

	// Handle TimeRange map parameter
	for k, v := range args.TimeRange {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	if args.UseAccountAttributionSetting {
		query.Set("use_account_attribution_setting", "true")
	}

	if args.UseUnifiedAttributionSetting {
		query.Set("use_unified_attribution_setting", "true")
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "insights")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdSetInsightsReportHandler handles create_ad_set_insights_report with typed arguments
func CreateAdSetInsightsReportHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_set_insights_reportArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.ActionAttributionWindows) > 0 {
		body["action_attribution_windows"] = args.ActionAttributionWindows
	}

	if len(args.ActionBreakdowns) > 0 {
		body["action_breakdowns"] = args.ActionBreakdowns
	}

	if args.ActionReportTime != "" {
		body["action_report_time"] = args.ActionReportTime
	}

	if len(args.Breakdowns) > 0 {
		body["breakdowns"] = args.Breakdowns
	}

	if args.DatePreset != "" {
		body["date_preset"] = args.DatePreset
	}

	body["default_summary"] = args.DefaultSummary

	if len(args.ExportColumns) > 0 {
		body["export_columns"] = args.ExportColumns
	}

	if args.ExportFormat != "" {
		body["export_format"] = args.ExportFormat
	}

	if args.ExportName != "" {
		body["export_name"] = args.ExportName
	}

	if len(args.Fields) > 0 {
		body["fields"] = args.Fields
	}

	if len(args.Filtering) > 0 {
		body["filtering"] = args.Filtering
	}

	if args.Level != "" {
		body["level"] = args.Level
	}

	if args.Limit > 0 {
		body["limit"] = args.Limit
	}

	if args.ProductIdLimit > 0 {
		body["product_id_limit"] = args.ProductIdLimit
	}

	if len(args.Sort) > 0 {
		body["sort"] = args.Sort
	}

	if len(args.Summary) > 0 {
		body["summary"] = args.Summary
	}

	if len(args.SummaryActionBreakdowns) > 0 {
		body["summary_action_breakdowns"] = args.SummaryActionBreakdowns
	}

	if args.TimeIncrement != "" {
		body["time_increment"] = args.TimeIncrement
	}

	if args.TimeRange != nil {
		body["time_range"] = args.TimeRange
	}

	if len(args.TimeRanges) > 0 {
		body["time_ranges"] = args.TimeRanges
	}

	body["use_account_attribution_setting"] = args.UseAccountAttributionSetting

	body["use_unified_attribution_setting"] = args.UseUnifiedAttributionSetting

	// Build URL and execute
	url := buildGraphURL(args.ID, "insights")

	return ExecutePOSTRequest(ctx, url, body)

}

// GetAdSetMessageDeliveryEstimateHandler handles get_ad_set_message_delivery_estimate with typed arguments
func GetAdSetMessageDeliveryEstimateHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_set_message_delivery_estimateArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdSet")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.BidAmount > 0 {
		query.Set("bid_amount", fmt.Sprintf("%d", args.BidAmount))
	}

	if args.DailyBudget > 0 {
		query.Set("daily_budget", fmt.Sprintf("%d", args.DailyBudget))
	}

	if args.IsDirectSendCampaign {
		query.Set("is_direct_send_campaign", "true")
	}

	if args.LifetimeBudget > 0 {
		query.Set("lifetime_budget", fmt.Sprintf("%d", args.LifetimeBudget))
	}

	if args.LifetimeInDays > 0 {
		query.Set("lifetime_in_days", fmt.Sprintf("%d", args.LifetimeInDays))
	}

	if args.OptimizationGoal != "" {
		query.Set("optimization_goal", args.OptimizationGoal)
	}

	if args.PacingType != "" {
		query.Set("pacing_type", args.PacingType)
	}

	// Build URL and execute
	baseURL := buildGraphURL("", "message_delivery_estimate")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdSetTargetingsentencelinesHandler handles list_ad_set_targetingsentencelines with typed arguments
func ListAdSetTargetingsentencelinesHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_set_targetingsentencelinesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdSet")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "targetingsentencelines")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// DeleteAdSetHandler handles delete_ad_set with typed arguments
func DeleteAdSetHandler(ctx context.Context, request mcp.CallToolRequest, args delete_ad_setArgs) (*mcp.CallToolResult, error) {

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	url := buildGraphURL(args.ID, "")
	return ExecuteDELETERequest(ctx, url)

}

// GetAdSetHandler handles get_ad_set with typed arguments
func GetAdSetHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_setArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdSet")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Handle AmCallTags map parameter
	for k, v := range args.AmCallTags {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	if args.DatePreset != "" {
		query.Set("date_preset", args.DatePreset)
	}

	if args.FromAdtable {
		query.Set("from_adtable", "true")
	}

	// Handle TimeRange map parameter
	for k, v := range args.TimeRange {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UpdateAdSetHandler handles update_ad_set with typed arguments
func UpdateAdSetHandler(ctx context.Context, request mcp.CallToolRequest, args update_ad_setArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.AccountId != "" {
		body["account_id"] = args.AccountId
	}

	if len(args.Adlabels) > 0 {
		body["adlabels"] = args.Adlabels
	}

	if len(args.AdsetSchedule) > 0 {
		body["adset_schedule"] = args.AdsetSchedule
	}

	if len(args.AttributionSpec) > 0 {
		body["attribution_spec"] = args.AttributionSpec
	}

	if args.BidAdjustments != nil {
		body["bid_adjustments"] = args.BidAdjustments
	}

	if args.BidAmount > 0 {
		body["bid_amount"] = args.BidAmount
	}

	if args.BidConstraints != nil {
		body["bid_constraints"] = args.BidConstraints
	}

	if args.BidStrategy != "" {
		body["bid_strategy"] = args.BidStrategy
	}

	if args.BillingEvent != "" {
		body["billing_event"] = args.BillingEvent
	}

	if args.CampaignAttribution != nil {
		body["campaign_attribution"] = args.CampaignAttribution
	}

	if args.CampaignSpec != nil {
		body["campaign_spec"] = args.CampaignSpec
	}

	if len(args.CreativeSequence) > 0 {
		body["creative_sequence"] = args.CreativeSequence
	}

	if args.CreativeSequenceRepetitionPattern != "" {
		body["creative_sequence_repetition_pattern"] = args.CreativeSequenceRepetitionPattern
	}

	if args.DailyBudget > 0 {
		body["daily_budget"] = args.DailyBudget
	}

	if args.DailyImps > 0 {
		body["daily_imps"] = args.DailyImps
	}

	if args.DailyMinSpendTarget > 0 {
		body["daily_min_spend_target"] = args.DailyMinSpendTarget
	}

	if args.DailySpendCap > 0 {
		body["daily_spend_cap"] = args.DailySpendCap
	}

	if args.DateFormat != "" {
		body["date_format"] = args.DateFormat
	}

	if args.DestinationType != "" {
		body["destination_type"] = args.DestinationType
	}

	if args.DsaBeneficiary != "" {
		body["dsa_beneficiary"] = args.DsaBeneficiary
	}

	if args.DsaPayor != "" {
		body["dsa_payor"] = args.DsaPayor
	}

	if args.EndTime != "" {
		body["end_time"] = args.EndTime
	}

	if len(args.ExecutionOptions) > 0 {
		body["execution_options"] = args.ExecutionOptions
	}

	if args.ExistingCustomerBudgetPercentage > 0 {
		body["existing_customer_budget_percentage"] = args.ExistingCustomerBudgetPercentage
	}

	if args.FullFunnelExplorationMode != "" {
		body["full_funnel_exploration_mode"] = args.FullFunnelExplorationMode
	}

	body["is_ba_skip_delayed_eligible"] = args.IsBaSkipDelayedEligible

	body["is_incremental_attribution_enabled"] = args.IsIncrementalAttributionEnabled

	body["is_sac_cfca_terms_certified"] = args.IsSacCfcaTermsCertified

	if args.LifetimeBudget > 0 {
		body["lifetime_budget"] = args.LifetimeBudget
	}

	if args.LifetimeImps > 0 {
		body["lifetime_imps"] = args.LifetimeImps
	}

	if args.LifetimeMinSpendTarget > 0 {
		body["lifetime_min_spend_target"] = args.LifetimeMinSpendTarget
	}

	if args.LifetimeSpendCap > 0 {
		body["lifetime_spend_cap"] = args.LifetimeSpendCap
	}

	if args.MaxBudgetSpendPercentage > 0 {
		body["max_budget_spend_percentage"] = args.MaxBudgetSpendPercentage
	}

	if args.MinBudgetSpendPercentage > 0 {
		body["min_budget_spend_percentage"] = args.MinBudgetSpendPercentage
	}

	if args.MultiOptimizationGoalWeight != "" {
		body["multi_optimization_goal_weight"] = args.MultiOptimizationGoalWeight
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.OptimizationGoal != "" {
		body["optimization_goal"] = args.OptimizationGoal
	}

	if args.OptimizationSubEvent != "" {
		body["optimization_sub_event"] = args.OptimizationSubEvent
	}

	if len(args.PacingType) > 0 {
		body["pacing_type"] = args.PacingType
	}

	if args.PromotedObject != nil {
		body["promoted_object"] = args.PromotedObject
	}

	if args.RbPredictionId != "" {
		body["rb_prediction_id"] = args.RbPredictionId
	}

	if len(args.RegionalRegulatedCategories) > 0 {
		body["regional_regulated_categories"] = args.RegionalRegulatedCategories
	}

	if args.RegionalRegulationIdentities != nil {
		body["regional_regulation_identities"] = args.RegionalRegulationIdentities
	}

	if args.RfPredictionId != "" {
		body["rf_prediction_id"] = args.RfPredictionId
	}

	if args.StartTime != "" {
		body["start_time"] = args.StartTime
	}

	if args.Status != "" {
		body["status"] = args.Status
	}

	if args.Targeting != nil {
		body["targeting"] = args.Targeting
	}

	if args.TimeBasedAdRotationIdBlocks != nil {
		body["time_based_ad_rotation_id_blocks"] = args.TimeBasedAdRotationIdBlocks
	}

	if args.TimeBasedAdRotationIntervals != nil {
		body["time_based_ad_rotation_intervals"] = args.TimeBasedAdRotationIntervals
	}

	if args.TimeStart != "" {
		body["time_start"] = args.TimeStart
	}

	if args.TimeStop != "" {
		body["time_stop"] = args.TimeStop
	}

	if args.TuneForCategory != "" {
		body["tune_for_category"] = args.TuneForCategory
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "")

	return ExecutePOSTRequest(ctx, url, body)

}

// generateSchemaForType is implemented in tools_common.go to avoid redeclaration

// RegisterAdSetTools registers all AdSet tools with the MCP server
func RegisterAdSetTools(s *server.MCPServer) error {

	// Register list_ad_set_activities using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_set_activities", "List activities for this AdSet Returns AdActivity.", list_ad_set_activitiesSchema),
		mcp.NewTypedToolHandler(ListAdSetActivitiesHandler),
	)

	// Register list_ad_set_ad_studies using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_set_ad_studies", "List ad_studies for this AdSet Returns AdStudy.", list_ad_set_ad_studiesSchema),
		mcp.NewTypedToolHandler(ListAdSetAdStudiesHandler),
	)

	// Register list_ad_set_adcreatives using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_set_adcreatives", "List adcreatives for this AdSet Returns AdCreative.", list_ad_set_adcreativesSchema),
		mcp.NewTypedToolHandler(ListAdSetAdcreativesHandler),
	)

	// Register remove_adlabels_from_ad_set using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("remove_adlabels_from_ad_set", "Remove adlabels from this AdSet Required: adlabels", remove_adlabels_from_ad_setSchema),
		mcp.NewTypedToolHandler(RemoveAdlabelsFromAdSetHandler),
	)

	// Register create_ad_set_adlabel using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_set_adlabel", "Associate adlabels with this AdSet Returns AdSet. Required: adlabels", create_ad_set_adlabelSchema),
		mcp.NewTypedToolHandler(CreateAdSetAdlabelHandler),
	)

	// Register get_ad_set_adrules_governed using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_ad_set_adrules_governed", "Get adrules_governed data for this AdSet Returns AdRule.", get_ad_set_adrules_governedSchema),
		mcp.NewTypedToolHandler(GetAdSetAdrulesGovernedHandler),
	)

	// Register list_ad_set_ads using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_set_ads", "List ads for this AdSet Returns Ad.", list_ad_set_adsSchema),
		mcp.NewTypedToolHandler(ListAdSetAdsHandler),
	)

	// Register list_ad_set_asyncadrequests using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_set_asyncadrequests", "List asyncadrequests for this AdSet Returns AdAsyncRequest.", list_ad_set_asyncadrequestsSchema),
		mcp.NewTypedToolHandler(ListAdSetAsyncadrequestsHandler),
	)

	// Register create_ad_set_budget_schedule using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_set_budget_schedule", "Create or update budget_schedules for this AdSet Returns HighDemandPeriod. Required: budget_value, budget_value_type (enum), time_end, time_start", create_ad_set_budget_scheduleSchema),
		mcp.NewTypedToolHandler(CreateAdSetBudgetScheduleHandler),
	)

	// Register list_ad_set_copies using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_set_copies", "List copies for this AdSet Returns AdSet.", list_ad_set_copiesSchema),
		mcp.NewTypedToolHandler(ListAdSetCopiesHandler),
	)

	// Register create_ad_set_copie using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_set_copie", "Create a copy of this AdSet Returns AdSet.", create_ad_set_copieSchema),
		mcp.NewTypedToolHandler(CreateAdSetCopieHandler),
	)

	// Register get_ad_set_delivery_estimate using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_ad_set_delivery_estimate", "Get delivery_estimate data for this AdSet Returns AdCampaignDeliveryEstimate.", get_ad_set_delivery_estimateSchema),
		mcp.NewTypedToolHandler(GetAdSetDeliveryEstimateHandler),
	)

	// Register get_ad_set_insights using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_ad_set_insights", "List insights for this AdSet Returns AdsInsights.", get_ad_set_insightsSchema),
		mcp.NewTypedToolHandler(GetAdSetInsightsHandler),
	)

	// Register create_ad_set_insights_report using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_set_insights_report", "Generate an insights report for this AdSet Returns AdReportRun.", create_ad_set_insights_reportSchema),
		mcp.NewTypedToolHandler(CreateAdSetInsightsReportHandler),
	)

	// Register get_ad_set_message_delivery_estimate using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_ad_set_message_delivery_estimate", "Get message_delivery_estimate data for this AdSet Returns MessageDeliveryEstimate.", get_ad_set_message_delivery_estimateSchema),
		mcp.NewTypedToolHandler(GetAdSetMessageDeliveryEstimateHandler),
	)

	// Register list_ad_set_targetingsentencelines using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_set_targetingsentencelines", "List targetingsentencelines for this AdSet Returns TargetingSentenceLine.", list_ad_set_targetingsentencelinesSchema),
		mcp.NewTypedToolHandler(ListAdSetTargetingsentencelinesHandler),
	)

	// Register delete_ad_set using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("delete_ad_set", "Delete a AdSet", delete_ad_setSchema),
		mcp.NewTypedToolHandler(DeleteAdSetHandler),
	)

	// Register get_ad_set using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_ad_set", "Get details of a specific AdSet Returns AdSet.", get_ad_setSchema),
		mcp.NewTypedToolHandler(GetAdSetHandler),
	)

	// Register update_ad_set using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("update_ad_set", "Update a AdSet Returns AdSet.", update_ad_setSchema),
		mcp.NewTypedToolHandler(UpdateAdSetHandler),
	)

	return nil
}

// AdSet tools: 19 endpoints
