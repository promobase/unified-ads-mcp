// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_set_create_adlabelArgs defines the typed arguments for ad_set_create_adlabel
type ad_set_create_adlabelArgs struct {
	ID               string            `json:"id" jsonschema:"required,description=AdSet ID,pattern=^[0-9]+$"`
	Adlabels         []*common.AdLabel `json:"adlabels" jsonschema:"description=Adlabels,required"`
	ExecutionOptions []string          `json:"execution_options,omitempty" jsonschema:"description=Execution Options"`
}

// RegisterAdSetCreateAdlabelHandler registers the ad_set_create_adlabel tool
func RegisterAdSetCreateAdlabelHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_set_create_adlabel",
		"Associate adlabels with this AdSet Returns AdSet. Required: adlabels",
		json.RawMessage(`{"additionalProperties":false,"properties":{"adlabels":{"description":"Adlabels","items":{"additionalProperties":true,"type":"object"},"type":"array"},"execution_options":{"description":"Execution Options","items":{"type":"string"},"type":"array"},"id":{"description":"AdSet ID","pattern":"^[0-9]+$","type":"string"}},"required":["id","adlabels"],"type":"object"}`),
	)

	s.AddTool(tool, AdSetCreateAdlabelHandler)
	return nil
}

// AdSetCreateAdlabelHandler handles the ad_set_create_adlabel tool
func AdSetCreateAdlabelHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_set_create_adlabelArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/adlabels", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if len(args.Adlabels) > 0 {
		body["adlabels"] = args.Adlabels
	}
	if len(args.ExecutionOptions) > 0 {
		body["execution_options"] = args.ExecutionOptions
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
