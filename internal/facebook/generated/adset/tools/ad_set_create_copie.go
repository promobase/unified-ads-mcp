// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_set_create_copieArgs defines the typed arguments for ad_set_create_copie
type ad_set_create_copieArgs struct {
	ID             string                 `json:"id" jsonschema:"required,description=AdSet ID,pattern=^[0-9]+$"`
	CampaignId     string                 `json:"campaign_id,omitempty" jsonschema:"description=ID of the Campaign,pattern=^[0-9]+$"`
	CreateDcoAdset bool                   `json:"create_dco_adset,omitempty" jsonschema:"description=Create Dco Adset"`
	DeepCopy       bool                   `json:"deep_copy,omitempty" jsonschema:"description=Deep Copy"`
	EndTime        string                 `json:"end_time,omitempty" jsonschema:"description=End Time,format=date-time"`
	RenameOptions  map[string]interface{} `json:"rename_options,omitempty" jsonschema:"description=Rename Options"`
	StartTime      string                 `json:"start_time,omitempty" jsonschema:"description=Start Time,format=date-time"`
	StatusOption   string                 `json:"status_option,omitempty" jsonschema:"description=Status Option"`
}

// RegisterAdSetCreateCopieHandler registers the ad_set_create_copie tool
func RegisterAdSetCreateCopieHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_set_create_copie",
		"Create a copy of this AdSet Returns AdSet.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"campaign_id":{"description":"ID of the Campaign","pattern":"^[0-9]+$","type":"string"},"create_dco_adset":{"description":"Create Dco Adset","type":"boolean"},"deep_copy":{"description":"Deep Copy","type":"boolean"},"end_time":{"description":"End Time","type":"string"},"id":{"description":"AdSet ID","pattern":"^[0-9]+$","type":"string"},"rename_options":{"additionalProperties":true,"description":"Rename Options","type":"object"},"start_time":{"description":"Start Time","type":"string"},"status_option":{"description":"Status Option (enum: adcampaigncopies_status_option_enum_param)","enum":["ACTIVE","INHERITED_FROM_SOURCE","PAUSED"],"type":"string"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, AdSetCreateCopieHandler)
	return nil
}

// AdSetCreateCopieHandler handles the ad_set_create_copie tool
func AdSetCreateCopieHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_set_create_copieArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/copies", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if args.CampaignId != "" {
		body["campaign_id"] = args.CampaignId
	}
	body["create_dco_adset"] = args.CreateDcoAdset
	body["deep_copy"] = args.DeepCopy
	if args.EndTime != "" {
		body["end_time"] = args.EndTime
	}
	body["rename_options"] = args.RenameOptions
	if args.StartTime != "" {
		body["start_time"] = args.StartTime
	}
	if args.StatusOption != "" {
		body["status_option"] = args.StatusOption
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
