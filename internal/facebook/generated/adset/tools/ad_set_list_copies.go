// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_set_list_copiesArgs defines the typed arguments for ad_set_list_copies
type ad_set_list_copiesArgs struct {
	ID              string                 `json:"id" jsonschema:"required,description=AdSet ID,pattern=^[0-9]+$"`
	Fields          []string               `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit           int                    `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After           string                 `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before          string                 `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	DatePreset      string                 `json:"date_preset,omitempty" jsonschema:"description=Date Preset"`
	EffectiveStatus []string               `json:"effective_status,omitempty" jsonschema:"description=Effective Status"`
	IsCompleted     bool                   `json:"is_completed,omitempty" jsonschema:"description=Is Completed"`
	TimeRange       map[string]interface{} `json:"time_range,omitempty" jsonschema:"description=Time Range"`
}

// RegisterAdSetListCopiesHandler registers the ad_set_list_copies tool
func RegisterAdSetListCopiesHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_set_list_copies",
		"List copies for this AdSet Returns AdSet.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"date_preset":{"description":"Date Preset (enum: adcampaigncopies_date_preset_enum_param)","enum":["data_maximum","last_14d","last_28d","last_30d","last_3d","last_7d","last_90d","last_month","last_quarter","last_week_mon_sun","last_week_sun_sat","last_year","maximum","this_month","this_quarter","this_week_mon_today","this_week_sun_today","this_year","today","yesterday"],"type":"string"},"effective_status":{"description":"Effective Status","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdSet ID","pattern":"^[0-9]+$","type":"string"},"is_completed":{"description":"Is Completed","type":"boolean"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"time_range":{"description":"Time Range","type":"string"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, AdSetListCopiesHandler)
	return nil
}

// AdSetListCopiesHandler handles the ad_set_list_copies tool
func AdSetListCopiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_set_list_copiesArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/copies", args.ID)
	// Prepare query parameters
	params := make(map[string]string)
	// ID is part of path, not query params
	if len(args.Fields) > 0 {
		params["fields"] = strings.Join(args.Fields, ",")
	}
	if args.Limit > 0 {
		params["limit"] = fmt.Sprintf("%d", args.Limit)
	}
	if args.After != "" {
		params["after"] = args.After
	}
	if args.Before != "" {
		params["before"] = args.Before
	}
	if args.DatePreset != "" {
		params["date_preset"] = args.DatePreset
	}
	if len(args.EffectiveStatus) > 0 {
		params["effective_status"] = strings.Join(args.EffectiveStatus, ",")
	}
	params["is_completed"] = fmt.Sprintf("%v", args.IsCompleted)
	// TODO: Handle map[string]interface{} for TimeRange

	result, err := common.MakeGraphAPIRequest(ctx, "GET", endpoint, params, nil)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
