// Code generated by Facebook Business API codegen. DO NOT EDIT.

package adset

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolAdset_delete_adlabels returns the MCP tool definition for adset_delete_adlabels
func ToolAdset_delete_adlabels() mcp.Tool {

	// Params object accepts: adlabels (list<Object>), execution_options (list<adcampaignadlabels_execution_options_enum_param>)
	return mcp.NewTool("adset_delete_adlabels",
		mcp.WithDescription("DELETE adlabels for AdSet"),
		mcp.WithString("ad_set_id",
			mcp.Required(),
			mcp.Description("Facebook Ad Set ID"),
		),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"adlabels": map[string]any{
					"type":        "array",
					"description": "adlabels parameter",
					"required":    true,
					"items":       map[string]any{"type": "object"},
				},
				"execution_options": map[string]any{
					"type":        "array",
					"description": "execution_options parameter",
					"enum":        []string{"validate_only"},
					"items":       map[string]any{"type": "string"},
				},
			}),
			mcp.Description("Parameters object containing: adlabels (array<object>) [required], execution_options (array<enum>) [validate_only]"),
		),
	)
}

// HandleAdset_delete_adlabels handles the adset_delete_adlabels tool with context-based auth
func HandleAdset_delete_adlabels(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: ad_set_id
	if err := utils.ParseRequiredString(request, "ad_set_id", args); err != nil {
		return mcp.NewToolResultError(err.Error()), nil
	}

	// Required: params
	// Parse required params object and expand into args
	val, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(val), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the API method
	result, err := Adset_delete_adlabels(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adset_delete_adlabels: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Adset_delete_adlabels performs DELETE adlabels for AdSet
func Adset_delete_adlabels(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for adset_delete_adlabels")
	}

	baseURL = fmt.Sprintf("%s/%s/adlabels", FacebookGraphAPIBaseURL, adSetId)

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{
		"ad_set_id",
	}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("DELETE", baseURL, urlParams)
}
