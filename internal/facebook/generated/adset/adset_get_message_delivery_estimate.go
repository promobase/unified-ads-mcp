// Code generated by Facebook Business API codegen. DO NOT EDIT.

package adset

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/shared"
)

// ToolAdset_get_message_delivery_estimate returns the MCP tool definition for adset_get_message_delivery_estimate
func ToolAdset_get_message_delivery_estimate() mcp.Tool {
	// Available fields for MessageDeliveryEstimate: estimate_cost, estimate_cost_lower_bound, estimate_cost_upper_bound, estimate_coverage_lower_bound, estimate_coverage_upper_bound, estimate_delivery, estimate_delivery_lower_bound, estimate_delivery_upper_bound, estimate_status
	// Params object accepts: bid_amount (unsigned int), daily_budget (unsigned int), is_direct_send_campaign (bool), lifetime_budget (unsigned int), lifetime_in_days (unsigned int), optimization_goal (adcampaignmessage_delivery_estimate_optimization_goal_enum_param), pacing_type (adcampaignmessage_delivery_estimate_pacing_type_enum_param), promoted_object (Object), targeting_spec (Targeting)
	return mcp.NewTool("adset_get_message_delivery_estimate",
		mcp.WithDescription("GET message_delivery_estimate for AdSet"),
		mcp.WithString("ad_set_id",
			mcp.Required(),
			mcp.Description("Facebook Ad Set ID"),
		),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"bid_amount": map[string]any{
					"type": "integer",
					"description": "bid_amount parameter",
				},
				"daily_budget": map[string]any{
					"type": "integer",
					"description": "daily_budget parameter",
				},
				"is_direct_send_campaign": map[string]any{
					"type": "boolean",
					"description": "is_direct_send_campaign parameter",
				},
				"lifetime_budget": map[string]any{
					"type": "integer",
					"description": "lifetime_budget parameter",
				},
				"lifetime_in_days": map[string]any{
					"type": "integer",
					"description": "lifetime_in_days parameter",
				},
				"optimization_goal": map[string]any{
					"type": "string",
					"description": "optimization_goal parameter",
					"enum": []string{ "ADVERTISER_SILOED_VALUE", "AD_RECALL_LIFT", "APP_INSTALLS", "APP_INSTALLS_AND_OFFSITE_CONVERSIONS", "CONVERSATIONS", "DERIVED_EVENTS", "ENGAGED_USERS", "EVENT_RESPONSES", "IMPRESSIONS", "IN_APP_VALUE", "LANDING_PAGE_VIEWS", "LEAD_GENERATION", "LINK_CLICKS", "MEANINGFUL_CALL_ATTEMPT", "MESSAGING_APPOINTMENT_CONVERSION", "MESSAGING_PURCHASE_CONVERSION", "NONE", "OFFSITE_CONVERSIONS", "PAGE_LIKES", "POST_ENGAGEMENT", "PROFILE_AND_PAGE_ENGAGEMENT", "PROFILE_VISIT", "QUALITY_CALL", "QUALITY_LEAD", "REACH", "REMINDERS_SET", "SUBSCRIBERS", "THRUPLAY", "VALUE", "VISIT_INSTAGRAM_PROFILE" },
				},
				"pacing_type": map[string]any{
					"type": "string",
					"description": "pacing_type parameter",
					"enum": []string{ "DAY_PARTING", "DISABLED", "NO_PACING", "PROBABILISTIC_PACING", "PROBABILISTIC_PACING_V2", "STANDARD" },
				},
				"promoted_object": map[string]any{
					"type": "object",
					"description": "promoted_object parameter",
				},
				"targeting_spec": map[string]any{
					"type": "string",
					"description": "targeting_spec parameter",
				},
			}),
			mcp.Description("Parameters object containing: bid_amount (integer), daily_budget (integer), is_direct_send_campaign (boolean), lifetime_budget (integer), lifetime_in_days (integer), optimization_goal (enum) [ADVERTISER_SILOED_VALUE, AD_RECALL_LIFT, APP_INSTALLS, APP_INSTALLS_AND_OFFSITE_CONVERSIONS, CONVERSATIONS, ...], pacing_type (enum) [DAY_PARTING, DISABLED, NO_PACING, PROBABILISTIC_PACING, PROBABILISTIC_PACING_V2, ...], promoted_object (object), targeting_spec (Targeting)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for MessageDeliveryEstimate objects. Available fields: estimate_cost, estimate_cost_lower_bound, estimate_cost_upper_bound, estimate_coverage_lower_bound, estimate_coverage_upper_bound, estimate_delivery, estimate_delivery_lower_bound, estimate_delivery_upper_bound, estimate_status"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleAdset_get_message_delivery_estimate handles the adset_get_message_delivery_estimate tool with context-based auth
func HandleAdset_get_message_delivery_estimate(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: ad_set_id
	ad_set_id, err := request.RequireString("ad_set_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter ad_set_id: %v", err)), nil
	}
	args["ad_set_id"] = ad_set_id

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the API method
	result, err := Adset_get_message_delivery_estimate(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adset_get_message_delivery_estimate: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Adset_get_message_delivery_estimate performs GET message_delivery_estimate for AdSet
func Adset_get_message_delivery_estimate(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for adset_get_message_delivery_estimate")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%smessage_delivery_estimate", adSetId)
	
	urlParams := url.Values{}
	urlParams.Set("access_token", accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}