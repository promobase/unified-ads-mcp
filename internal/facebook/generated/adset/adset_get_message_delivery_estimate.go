// Code generated by Facebook Business API codegen. DO NOT EDIT.

package adset

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolAdset_get_message_delivery_estimate returns the MCP tool definition for adset_get_message_delivery_estimate
func ToolAdset_get_message_delivery_estimate() mcp.Tool {
	// Available fields for MessageDeliveryEstimate: estimate_cost, estimate_cost_lower_bound, estimate_cost_upper_bound, estimate_coverage_lower_bound, estimate_coverage_upper_bound, estimate_delivery, estimate_delivery_lower_bound, estimate_delivery_upper_bound, estimate_status
	// Params object accepts: bid_amount (unsigned int), daily_budget (unsigned int), is_direct_send_campaign (bool), lifetime_budget (unsigned int), lifetime_in_days (unsigned int), optimization_goal (adcampaignmessage_delivery_estimate_optimization_goal_enum_param), pacing_type (adcampaignmessage_delivery_estimate_pacing_type_enum_param), promoted_object (Object), targeting_spec (Targeting)
	return mcp.NewTool("adset_get_message_delivery_estimate",
		mcp.WithDescription("GET message_delivery_estimate for AdSet"),
		mcp.WithString("ad_set_id",
			mcp.Required(),
			mcp.Description("Facebook Ad Set ID"),
		),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"bid_amount": map[string]any{
					"type":        "integer",
					"description": "bid_amount parameter",
				},
				"daily_budget": map[string]any{
					"type":        "integer",
					"description": "daily_budget parameter",
				},
				"is_direct_send_campaign": map[string]any{
					"type":        "boolean",
					"description": "is_direct_send_campaign parameter",
				},
				"lifetime_budget": map[string]any{
					"type":        "integer",
					"description": "lifetime_budget parameter",
				},
				"lifetime_in_days": map[string]any{
					"type":        "integer",
					"description": "lifetime_in_days parameter",
				},
				"optimization_goal": map[string]any{
					"type":        "string",
					"description": "optimization_goal parameter",
					"enum":        []string{"ADVERTISER_SILOED_VALUE", "AD_RECALL_LIFT", "APP_INSTALLS", "APP_INSTALLS_AND_OFFSITE_CONVERSIONS", "CONVERSATIONS", "DERIVED_EVENTS", "ENGAGED_USERS", "EVENT_RESPONSES", "IMPRESSIONS", "IN_APP_VALUE", "LANDING_PAGE_VIEWS", "LEAD_GENERATION", "LINK_CLICKS", "MEANINGFUL_CALL_ATTEMPT", "MESSAGING_APPOINTMENT_CONVERSION", "MESSAGING_PURCHASE_CONVERSION", "NONE", "OFFSITE_CONVERSIONS", "PAGE_LIKES", "POST_ENGAGEMENT", "PROFILE_AND_PAGE_ENGAGEMENT", "PROFILE_VISIT", "QUALITY_CALL", "QUALITY_LEAD", "REACH", "REMINDERS_SET", "SUBSCRIBERS", "THRUPLAY", "VALUE", "VISIT_INSTAGRAM_PROFILE"},
				},
				"pacing_type": map[string]any{
					"type":        "string",
					"description": "pacing_type parameter",
					"enum":        []string{"DAY_PARTING", "DISABLED", "NO_PACING", "PROBABILISTIC_PACING", "PROBABILISTIC_PACING_V2", "STANDARD"},
				},
				"promoted_object": map[string]any{
					"type":        "object",
					"description": "promoted_object parameter",
				},
				"targeting_spec": map[string]any{
					"type":        "string",
					"description": "targeting_spec parameter",
				},
			}),
			mcp.Description("Parameters object containing: bid_amount (integer), daily_budget (integer), is_direct_send_campaign (boolean), lifetime_budget (integer), lifetime_in_days (integer), optimization_goal (enum) [ADVERTISER_SILOED_VALUE, AD_RECALL_LIFT, APP_INSTALLS, APP_INSTALLS_AND_OFFSITE_CONVERSIONS, CONVERSATIONS, ...], pacing_type (enum) [DAY_PARTING, DISABLED, NO_PACING, PROBABILISTIC_PACING, PROBABILISTIC_PACING_V2, ...], promoted_object (object), targeting_spec (Targeting)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for MessageDeliveryEstimate objects. Available fields: estimate_cost, estimate_cost_lower_bound, estimate_cost_upper_bound, estimate_coverage_lower_bound, estimate_coverage_upper_bound, estimate_delivery, estimate_delivery_lower_bound, estimate_delivery_upper_bound, estimate_status"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleAdset_get_message_delivery_estimate handles the adset_get_message_delivery_estimate tool with context-based auth
func HandleAdset_get_message_delivery_estimate(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: ad_set_id
	if err := utils.ParseRequiredString(request, "ad_set_id", args); err != nil {
		return mcp.NewToolResultError(err.Error()), nil
	}

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Optional: fields
	utils.ParseFieldsArray(request, args)

	// Optional: limit
	utils.ParseOptionalInt(request, "limit", args)

	// Optional: after
	utils.ParseOptionalString(request, "after", args)

	// Optional: before
	utils.ParseOptionalString(request, "before", args)

	// Call the API method
	result, err := Adset_get_message_delivery_estimate(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adset_get_message_delivery_estimate: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Adset_get_message_delivery_estimate performs GET message_delivery_estimate for AdSet
func Adset_get_message_delivery_estimate(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for adset_get_message_delivery_estimate")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%smessage_delivery_estimate", adSetId)

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{
		"ad_set_id",
	}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("GET", baseURL, urlParams)
}
