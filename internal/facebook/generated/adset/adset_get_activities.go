// Code generated by Facebook Business API codegen. DO NOT EDIT.

package adset

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolAdset_get_activities returns the MCP tool definition for adset_get_activities
func ToolAdset_get_activities() mcp.Tool {
	// Available fields for AdActivity: actor_id, actor_name, application_id, application_name, date_time_in_timezone, event_time, event_type, extra_data, object_id, object_name, object_type, translated_event_type
	// Params object accepts: after (string), business_id (string), category (adcampaignactivities_category_enum_param), limit (int), since (datetime), uid (int), until (datetime)
	return mcp.NewTool("adset_get_activities",
		mcp.WithDescription("GET activities for AdSet"),
		mcp.WithString("ad_set_id",
			mcp.Required(),
			mcp.Description("Facebook Ad Set ID"),
		),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"after": map[string]any{
					"type":        "string",
					"description": "after parameter",
				},
				"business_id": map[string]any{
					"type":        "string",
					"description": "business_id parameter",
				},
				"category": map[string]any{
					"type":        "string",
					"description": "category parameter",
					"enum":        []string{"ACCOUNT", "AD", "AD_KEYWORDS", "AD_SET", "AUDIENCE", "BID", "BUDGET", "CAMPAIGN", "DATE", "STATUS", "TARGETING"},
				},
				"limit": map[string]any{
					"type":        "integer",
					"description": "limit parameter",
				},
				"since": map[string]any{
					"type":        "string",
					"description": "since parameter",
				},
				"uid": map[string]any{
					"type":        "integer",
					"description": "uid parameter",
				},
				"until": map[string]any{
					"type":        "string",
					"description": "until parameter",
				},
			}),
			mcp.Description("Parameters object containing: after (string), business_id (string), category (enum) [ACCOUNT, AD, AD_KEYWORDS, AD_SET, AUDIENCE, ...], limit (integer), since (datetime), uid (integer), until (datetime)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for AdActivity objects. Available fields: actor_id, actor_name, application_id, application_name, date_time_in_timezone, event_time, event_type, extra_data, object_id, object_name, object_type, translated_event_type"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleAdset_get_activities handles the adset_get_activities tool with context-based auth
func HandleAdset_get_activities(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: ad_set_id
	if err := utils.ParseRequiredString(request, "ad_set_id", args); err != nil {
		return mcp.NewToolResultError(err.Error()), nil
	}

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Optional: fields
	utils.ParseFieldsArray(request, args)

	// Optional: limit
	utils.ParseOptionalInt(request, "limit", args)

	// Optional: after
	utils.ParseOptionalString(request, "after", args)

	// Optional: before
	utils.ParseOptionalString(request, "before", args)

	// Call the API method
	result, err := Adset_get_activities(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adset_get_activities: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Adset_get_activities performs GET activities for AdSet
func Adset_get_activities(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for adset_get_activities")
	}
	baseURL = fmt.Sprintf("%s/%sactivities", FacebookGraphAPIBaseURL, adSetId)

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{
		"ad_set_id",
	}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("GET", baseURL, urlParams)
}
