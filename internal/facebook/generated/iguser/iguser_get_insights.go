// Code generated by Facebook Business API codegen. DO NOT EDIT.

package iguser

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/shared"
)

// ToolIguser_get_insights returns the MCP tool definition for iguser_get_insights
func ToolIguser_get_insights() mcp.Tool {
	// Available fields for InstagramInsightsResult: description, id, name, period, title, total_value, values
	// Params object accepts: breakdown (list<shadowiguserinsights_breakdown_enum_param>), metric (list<shadowiguserinsights_metric_enum_param>), metric_type (shadowiguserinsights_metric_type_enum_param), period (list<shadowiguserinsights_period_enum_param>), since (datetime), timeframe (shadowiguserinsights_timeframe_enum_param), until (datetime)
	return mcp.NewTool("iguser_get_insights",
		mcp.WithDescription("GET insights for IGUser"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"breakdown": map[string]any{
					"type":        "array",
					"description": "breakdown parameter",
					"enum":        []string{"age", "city", "contact_button_type", "country", "follow_type", "gender", "media_product_type"},
					"items":       map[string]any{"type": "string"},
				},
				"metric": map[string]any{
					"type":        "array",
					"description": "metric parameter",
					"required":    true,
					"enum":        []string{"accounts_engaged", "comments", "content_views", "engaged_audience_demographics", "follower_count", "follower_demographics", "follows_and_unfollows", "impressions", "likes", "online_followers", "profile_links_taps", "profile_views", "quotes", "reach", "reached_audience_demographics", "replies", "reposts", "saves", "shares", "threads_follower_demographics", "threads_followers", "threads_likes", "threads_replies", "threads_views", "total_interactions", "views", "website_clicks"},
					"items":       map[string]any{"type": "string"},
				},
				"metric_type": map[string]any{
					"type":        "string",
					"description": "metric_type parameter",
					"enum":        []string{"default", "time_series", "total_value"},
				},
				"period": map[string]any{
					"type":        "array",
					"description": "period parameter",
					"required":    true,
					"enum":        []string{"day", "days_28", "lifetime", "month", "total_over_range", "week"},
					"items":       map[string]any{"type": "string"},
				},
				"since": map[string]any{
					"type":        "string",
					"description": "since parameter",
				},
				"timeframe": map[string]any{
					"type":        "string",
					"description": "timeframe parameter",
					"enum":        []string{"last_14_days", "last_30_days", "last_90_days", "prev_month", "this_month", "this_week"},
				},
				"until": map[string]any{
					"type":        "string",
					"description": "until parameter",
				},
			}),
			mcp.Description("Parameters object containing: breakdown (array<enum>) [age, city, contact_button_type, country, follow_type, ...], metric (array<enum>) [accounts_engaged, comments, content_views, engaged_audience_demographics, follower_count, ...] [required], metric_type (enum) [default, time_series, total_value], period (array<enum>) [day, days_28, lifetime, month, total_over_range, ...] [required], since (datetime), timeframe (enum) [last_14_days, last_30_days, last_90_days, prev_month, this_month, ...], until (datetime)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for InstagramInsightsResult objects. Available fields: description, id, name, period, title, total_value, values"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleIguser_get_insights handles the iguser_get_insights tool with context-based auth
func HandleIguser_get_insights(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the API method
	result, err := Iguser_get_insights(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute iguser_get_insights: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Iguser_get_insights performs GET insights for IGUser
func Iguser_get_insights(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/insights")

	urlParams := url.Values{}
	urlParams.Set("access_token", accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("params", fmt.Sprintf("%v", val))

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fields", fmt.Sprintf("%v", val))

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("limit", fmt.Sprintf("%v", val))

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("after", fmt.Sprintf("%v", val))

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("before", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
