// Code generated by Facebook Business API codegen. DO NOT EDIT.

package iguser

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolIguser_get_branded_content_advertisable_medias returns the MCP tool definition for iguser_get_branded_content_advertisable_medias
func ToolIguser_get_branded_content_advertisable_medias() mcp.Tool {
	// Available fields for BrandedContentShadowIGMediaID: eligibility_errors, has_permission_for_partnership_ad, id, owner_id, permalink, recommended_campaign_objectives
	// Params object accepts: ad_code (string), creator_username (string), only_fetch_allowlisted (bool), only_fetch_recommended_content (bool), permalinks (list<string>)
	return mcp.NewTool("iguser_get_branded_content_advertisable_medias",
		mcp.WithDescription("GET branded_content_advertisable_medias for IGUser"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"ad_code": map[string]any{
					"type":        "string",
					"description": "ad_code parameter",
				},
				"creator_username": map[string]any{
					"type":        "string",
					"description": "creator_username parameter",
				},
				"only_fetch_allowlisted": map[string]any{
					"type":        "boolean",
					"description": "only_fetch_allowlisted parameter",
				},
				"only_fetch_recommended_content": map[string]any{
					"type":        "boolean",
					"description": "only_fetch_recommended_content parameter",
				},
				"permalinks": map[string]any{
					"type":        "array",
					"description": "permalinks parameter",
					"items":       map[string]any{"type": "string"},
				},
			}),
			mcp.Description("Parameters object containing: ad_code (string), creator_username (string), only_fetch_allowlisted (boolean), only_fetch_recommended_content (boolean), permalinks (array<string>)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for BrandedContentShadowIGMediaID objects. Available fields: eligibility_errors, has_permission_for_partnership_ad, id, owner_id, permalink, recommended_campaign_objectives"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleIguser_get_branded_content_advertisable_medias handles the iguser_get_branded_content_advertisable_medias tool with context-based auth
func HandleIguser_get_branded_content_advertisable_medias(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Optional: fields
	utils.ParseFieldsArray(request, args)

	// Optional: limit
	utils.ParseOptionalInt(request, "limit", args)

	// Optional: after
	utils.ParseOptionalString(request, "after", args)

	// Optional: before
	utils.ParseOptionalString(request, "before", args)

	// Call the API method
	result, err := Iguser_get_branded_content_advertisable_medias(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute iguser_get_branded_content_advertisable_medias: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Iguser_get_branded_content_advertisable_medias performs GET branded_content_advertisable_medias for IGUser
func Iguser_get_branded_content_advertisable_medias(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/branded_content_advertisable_medias")

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("GET", baseURL, urlParams)
}
