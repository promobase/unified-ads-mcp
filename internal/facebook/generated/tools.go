// Code generated by codegen. DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

const (
	graphAPIVersion = "v23.0"
	graphAPIHost    = "https://graph.facebook.com"
)

// getAccessToken retrieves the Facebook access token from environment
func getAccessToken() string {
	return os.Getenv("FACEBOOK_ACCESS_TOKEN")
}

// buildGraphURL constructs the Facebook Graph API URL
func buildGraphURL(objectID, endpoint string) string {
	if objectID != "" {
		return fmt.Sprintf("%s/%s/%s/%s", graphAPIHost, graphAPIVersion, objectID, endpoint)
	}
	return fmt.Sprintf("%s/%s/%s", graphAPIHost, graphAPIVersion, endpoint)
}

// makeGraphRequest performs an HTTP request to the Facebook Graph API
func makeGraphRequest(method, urlStr string, data map[string]interface{}) ([]byte, error) {
	client := &http.Client{}

	var req *http.Request
	var err error

	// Parse URL to add access token
	parsedURL, err := url.Parse(urlStr)
	if err != nil {
		return nil, fmt.Errorf("invalid URL: %w", err)
	}

	// Add access token to query params
	q := parsedURL.Query()
	q.Set("access_token", getAccessToken())
	parsedURL.RawQuery = q.Encode()

	// Create request based on method
	switch method {
	case "GET", "DELETE":
		req, err = http.NewRequest(method, parsedURL.String(), nil)
	case "POST", "PUT":
		jsonData, err := json.Marshal(data)
		if err != nil {
			return nil, fmt.Errorf("failed to marshal data: %w", err)
		}
		req, err = http.NewRequest(method, parsedURL.String(), bytes.NewBuffer(jsonData))
		if err == nil {
			req.Header.Set("Content-Type", "application/json")
		}
	default:
		return nil, fmt.Errorf("unsupported method: %s", method)
	}

	if err != nil {
		return nil, fmt.Errorf("failed to create request: %w", err)
	}

	// Execute request
	resp, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("request failed: %w", err)
	}
	defer resp.Body.Close()

	// Read response
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("failed to read response: %w", err)
	}

	// Check for errors
	if resp.StatusCode >= 400 {
		var fbError map[string]interface{}
		if err := json.Unmarshal(body, &fbError); err == nil {
			if errData, ok := fbError["error"].(map[string]interface{}); ok {
				return nil, fmt.Errorf("Facebook API error: %v - %v",
					errData["type"], errData["message"])
			}
		}
		return nil, fmt.Errorf("HTTP %d: %s", resp.StatusCode, string(body))
	}

	return body, nil
}

// ALMAdAccountInfo_GET_Handler handles ALMAdAccountInfo_GET_
func ALMAdAccountInfo_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ALMEndAdvertiserInfo_GET_Handler handles ALMEndAdvertiserInfo_GET_
func ALMEndAdvertiserInfo_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ALMEvent_GET_Handler handles ALMEvent_GET_
func ALMEvent_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AREffect_GET_Handler handles AREffect_GET_
func AREffect_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Ad_GET_adcreativesHandler handles Ad_GET_adcreatives
func Ad_GET_adcreativesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adcreatives")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Ad_POST_adlabelsHandler handles Ad_POST_adlabels
func Ad_POST_adlabelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "adlabels")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Ad_GET_adrules_governedHandler handles Ad_GET_adrules_governed
func Ad_GET_adrules_governedHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adrules_governed")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Ad_GET_copiesHandler handles Ad_GET_copies
func Ad_GET_copiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "copies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Ad_POST_copiesHandler handles Ad_POST_copies
func Ad_POST_copiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "copies")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Ad_GET_insightsHandler handles Ad_GET_insights
func Ad_GET_insightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "insights")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Ad_POST_insightsHandler handles Ad_POST_insights
func Ad_POST_insightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "insights")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Ad_GET_leadsHandler handles Ad_GET_leads
func Ad_GET_leadsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "leads")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Ad_GET_previewsHandler handles Ad_GET_previews
func Ad_GET_previewsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "previews")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Ad_GET_targetingsentencelinesHandler handles Ad_GET_targetingsentencelines
func Ad_GET_targetingsentencelinesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "targetingsentencelines")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Ad_DELETE_Handler handles Ad_DELETE_
func Ad_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Ad_GET_Handler handles Ad_GET_
func Ad_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Ad_POST_Handler handles Ad_POST_
func Ad_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_account_controlsHandler handles AdAccount_GET_account_controls
func AdAccount_GET_account_controlsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "account_controls")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_account_controlsHandler handles AdAccount_POST_account_controls
func AdAccount_POST_account_controlsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "account_controls")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_activitiesHandler handles AdAccount_GET_activities
func AdAccount_GET_activitiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "activities")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_ad_place_page_setsHandler handles AdAccount_GET_ad_place_page_sets
func AdAccount_GET_ad_place_page_setsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ad_place_page_sets")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_ad_place_page_setsHandler handles AdAccount_POST_ad_place_page_sets
func AdAccount_POST_ad_place_page_setsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "ad_place_page_sets")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_ad_place_page_sets_asyncHandler handles AdAccount_POST_ad_place_page_sets_async
func AdAccount_POST_ad_place_page_sets_asyncHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "ad_place_page_sets_async")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_ad_saved_keywordsHandler handles AdAccount_GET_ad_saved_keywords
func AdAccount_GET_ad_saved_keywordsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ad_saved_keywords")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_ad_studiesHandler handles AdAccount_GET_ad_studies
func AdAccount_GET_ad_studiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ad_studies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_adcloudplayablesHandler handles AdAccount_GET_adcloudplayables
func AdAccount_GET_adcloudplayablesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adcloudplayables")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_adcreativesHandler handles AdAccount_GET_adcreatives
func AdAccount_GET_adcreativesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adcreatives")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_adcreativesHandler handles AdAccount_POST_adcreatives
func AdAccount_POST_adcreativesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "adcreatives")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_adcreativesbylabelsHandler handles AdAccount_GET_adcreativesbylabels
func AdAccount_GET_adcreativesbylabelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adcreativesbylabels")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_DELETE_adimagesHandler handles AdAccount_DELETE_adimages
func AdAccount_DELETE_adimagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adimages")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_adimagesHandler handles AdAccount_GET_adimages
func AdAccount_GET_adimagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adimages")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_adimagesHandler handles AdAccount_POST_adimages
func AdAccount_POST_adimagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "adimages")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_adlabelsHandler handles AdAccount_GET_adlabels
func AdAccount_GET_adlabelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adlabels")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_adlabelsHandler handles AdAccount_POST_adlabels
func AdAccount_POST_adlabelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "adlabels")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_adplayablesHandler handles AdAccount_GET_adplayables
func AdAccount_GET_adplayablesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adplayables")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_adplayablesHandler handles AdAccount_POST_adplayables
func AdAccount_POST_adplayablesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "adplayables")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_adrules_historyHandler handles AdAccount_GET_adrules_history
func AdAccount_GET_adrules_historyHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adrules_history")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_adrules_libraryHandler handles AdAccount_GET_adrules_library
func AdAccount_GET_adrules_libraryHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adrules_library")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_adrules_libraryHandler handles AdAccount_POST_adrules_library
func AdAccount_POST_adrules_libraryHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "adrules_library")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_adsHandler handles AdAccount_GET_ads
func AdAccount_GET_adsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ads")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_adsHandler handles AdAccount_POST_ads
func AdAccount_POST_adsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "ads")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_ads_reporting_mmm_reportsHandler handles AdAccount_GET_ads_reporting_mmm_reports
func AdAccount_GET_ads_reporting_mmm_reportsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ads_reporting_mmm_reports")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_ads_reporting_mmm_schedulersHandler handles AdAccount_GET_ads_reporting_mmm_schedulers
func AdAccount_GET_ads_reporting_mmm_schedulersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ads_reporting_mmm_schedulers")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_ads_volumeHandler handles AdAccount_GET_ads_volume
func AdAccount_GET_ads_volumeHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ads_volume")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_adsbylabelsHandler handles AdAccount_GET_adsbylabels
func AdAccount_GET_adsbylabelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adsbylabels")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_adsetsHandler handles AdAccount_GET_adsets
func AdAccount_GET_adsetsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adsets")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_adsetsHandler handles AdAccount_POST_adsets
func AdAccount_POST_adsetsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "adsets")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_adsetsbylabelsHandler handles AdAccount_GET_adsetsbylabels
func AdAccount_GET_adsetsbylabelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adsetsbylabels")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_adspixelsHandler handles AdAccount_GET_adspixels
func AdAccount_GET_adspixelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adspixels")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_adspixelsHandler handles AdAccount_POST_adspixels
func AdAccount_POST_adspixelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "adspixels")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_advertisable_applicationsHandler handles AdAccount_GET_advertisable_applications
func AdAccount_GET_advertisable_applicationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "advertisable_applications")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_DELETE_advideosHandler handles AdAccount_DELETE_advideos
func AdAccount_DELETE_advideosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "advideos")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_advideosHandler handles AdAccount_GET_advideos
func AdAccount_GET_advideosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "advideos")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_advideosHandler handles AdAccount_POST_advideos
func AdAccount_POST_advideosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "advideos")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_affectedadsetsHandler handles AdAccount_GET_affectedadsets
func AdAccount_GET_affectedadsetsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "affectedadsets")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_DELETE_agenciesHandler handles AdAccount_DELETE_agencies
func AdAccount_DELETE_agenciesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "agencies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_agenciesHandler handles AdAccount_GET_agencies
func AdAccount_GET_agenciesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "agencies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_agenciesHandler handles AdAccount_POST_agencies
func AdAccount_POST_agenciesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "agencies")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_applicationsHandler handles AdAccount_GET_applications
func AdAccount_GET_applicationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "applications")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_DELETE_assigned_usersHandler handles AdAccount_DELETE_assigned_users
func AdAccount_DELETE_assigned_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_users")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_assigned_usersHandler handles AdAccount_GET_assigned_users
func AdAccount_GET_assigned_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_users")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_assigned_usersHandler handles AdAccount_POST_assigned_users
func AdAccount_POST_assigned_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "assigned_users")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_async_batch_requestsHandler handles AdAccount_POST_async_batch_requests
func AdAccount_POST_async_batch_requestsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "async_batch_requests")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_async_requestsHandler handles AdAccount_GET_async_requests
func AdAccount_GET_async_requestsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "async_requests")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_asyncadcreativesHandler handles AdAccount_GET_asyncadcreatives
func AdAccount_GET_asyncadcreativesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "asyncadcreatives")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_asyncadcreativesHandler handles AdAccount_POST_asyncadcreatives
func AdAccount_POST_asyncadcreativesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "asyncadcreatives")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_asyncadrequestsetsHandler handles AdAccount_GET_asyncadrequestsets
func AdAccount_GET_asyncadrequestsetsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "asyncadrequestsets")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_asyncadrequestsetsHandler handles AdAccount_POST_asyncadrequestsets
func AdAccount_POST_asyncadrequestsetsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "asyncadrequestsets")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_audience_funnelHandler handles AdAccount_GET_audience_funnel
func AdAccount_GET_audience_funnelHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "audience_funnel")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_block_list_draftsHandler handles AdAccount_POST_block_list_drafts
func AdAccount_POST_block_list_draftsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "block_list_drafts")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_brand_safety_content_filter_levelsHandler handles AdAccount_POST_brand_safety_content_filter_levels
func AdAccount_POST_brand_safety_content_filter_levelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "brand_safety_content_filter_levels")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_broadtargetingcategoriesHandler handles AdAccount_GET_broadtargetingcategories
func AdAccount_GET_broadtargetingcategoriesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "broadtargetingcategories")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_businessprojectsHandler handles AdAccount_GET_businessprojects
func AdAccount_GET_businessprojectsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "businessprojects")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_DELETE_campaignsHandler handles AdAccount_DELETE_campaigns
func AdAccount_DELETE_campaignsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "campaigns")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_campaignsHandler handles AdAccount_GET_campaigns
func AdAccount_GET_campaignsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "campaigns")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_campaignsHandler handles AdAccount_POST_campaigns
func AdAccount_POST_campaignsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "campaigns")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_campaignsbylabelsHandler handles AdAccount_GET_campaignsbylabels
func AdAccount_GET_campaignsbylabelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "campaignsbylabels")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_connected_instagram_accountsHandler handles AdAccount_GET_connected_instagram_accounts
func AdAccount_GET_connected_instagram_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "connected_instagram_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_connected_instagram_accounts_with_iabpHandler handles AdAccount_GET_connected_instagram_accounts_with_iabp
func AdAccount_GET_connected_instagram_accounts_with_iabpHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "connected_instagram_accounts_with_iabp")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_conversion_goalsHandler handles AdAccount_GET_conversion_goals
func AdAccount_GET_conversion_goalsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "conversion_goals")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_customaudiencesHandler handles AdAccount_GET_customaudiences
func AdAccount_GET_customaudiencesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "customaudiences")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_customaudiencesHandler handles AdAccount_POST_customaudiences
func AdAccount_POST_customaudiencesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "customaudiences")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_customaudiencestosHandler handles AdAccount_GET_customaudiencestos
func AdAccount_GET_customaudiencestosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "customaudiencestos")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_customaudiencestosHandler handles AdAccount_POST_customaudiencestos
func AdAccount_POST_customaudiencestosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "customaudiencestos")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_customconversionsHandler handles AdAccount_GET_customconversions
func AdAccount_GET_customconversionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "customconversions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_customconversionsHandler handles AdAccount_POST_customconversions
func AdAccount_POST_customconversionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "customconversions")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_delivery_estimateHandler handles AdAccount_GET_delivery_estimate
func AdAccount_GET_delivery_estimateHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "delivery_estimate")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_deprecatedtargetingadsetsHandler handles AdAccount_GET_deprecatedtargetingadsets
func AdAccount_GET_deprecatedtargetingadsetsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "deprecatedtargetingadsets")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_dsa_recommendationsHandler handles AdAccount_GET_dsa_recommendations
func AdAccount_GET_dsa_recommendationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "dsa_recommendations")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_generatepreviewsHandler handles AdAccount_GET_generatepreviews
func AdAccount_GET_generatepreviewsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "generatepreviews")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_impacting_ad_studiesHandler handles AdAccount_GET_impacting_ad_studies
func AdAccount_GET_impacting_ad_studiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "impacting_ad_studies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_insightsHandler handles AdAccount_GET_insights
func AdAccount_GET_insightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "insights")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_insightsHandler handles AdAccount_POST_insights
func AdAccount_POST_insightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "insights")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_instagram_accountsHandler handles AdAccount_GET_instagram_accounts
func AdAccount_GET_instagram_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "instagram_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_ios_fourteen_campaign_limitsHandler handles AdAccount_GET_ios_fourteen_campaign_limits
func AdAccount_GET_ios_fourteen_campaign_limitsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ios_fourteen_campaign_limits")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_matched_search_applicationsHandler handles AdAccount_GET_matched_search_applications
func AdAccount_GET_matched_search_applicationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "matched_search_applications")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_max_bidHandler handles AdAccount_GET_max_bid
func AdAccount_GET_max_bidHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "max_bid")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_mcmeconversionsHandler handles AdAccount_GET_mcmeconversions
func AdAccount_GET_mcmeconversionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "mcmeconversions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_minimum_budgetsHandler handles AdAccount_GET_minimum_budgets
func AdAccount_GET_minimum_budgetsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "minimum_budgets")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_onbehalf_requestsHandler handles AdAccount_GET_onbehalf_requests
func AdAccount_GET_onbehalf_requestsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "onbehalf_requests")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_product_audiencesHandler handles AdAccount_POST_product_audiences
func AdAccount_POST_product_audiencesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "product_audiences")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_promote_pagesHandler handles AdAccount_GET_promote_pages
func AdAccount_GET_promote_pagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "promote_pages")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_publisher_block_listsHandler handles AdAccount_GET_publisher_block_lists
func AdAccount_GET_publisher_block_listsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "publisher_block_lists")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_publisher_block_listsHandler handles AdAccount_POST_publisher_block_lists
func AdAccount_POST_publisher_block_listsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "publisher_block_lists")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_reachestimateHandler handles AdAccount_GET_reachestimate
func AdAccount_GET_reachestimateHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "reachestimate")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_reachfrequencypredictionsHandler handles AdAccount_GET_reachfrequencypredictions
func AdAccount_GET_reachfrequencypredictionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "reachfrequencypredictions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_reachfrequencypredictionsHandler handles AdAccount_POST_reachfrequencypredictions
func AdAccount_POST_reachfrequencypredictionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "reachfrequencypredictions")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_recommendationsHandler handles AdAccount_GET_recommendations
func AdAccount_GET_recommendationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "recommendations")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_recommendationsHandler handles AdAccount_POST_recommendations
func AdAccount_POST_recommendationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "recommendations")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_saved_audiencesHandler handles AdAccount_GET_saved_audiences
func AdAccount_GET_saved_audiencesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "saved_audiences")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_DELETE_subscribed_appsHandler handles AdAccount_DELETE_subscribed_apps
func AdAccount_DELETE_subscribed_appsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "subscribed_apps")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_subscribed_appsHandler handles AdAccount_GET_subscribed_apps
func AdAccount_GET_subscribed_appsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "subscribed_apps")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_subscribed_appsHandler handles AdAccount_POST_subscribed_apps
func AdAccount_POST_subscribed_appsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "subscribed_apps")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_targetingbrowseHandler handles AdAccount_GET_targetingbrowse
func AdAccount_GET_targetingbrowseHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "targetingbrowse")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_targetingsearchHandler handles AdAccount_GET_targetingsearch
func AdAccount_GET_targetingsearchHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "targetingsearch")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_targetingsentencelinesHandler handles AdAccount_GET_targetingsentencelines
func AdAccount_GET_targetingsentencelinesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "targetingsentencelines")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_targetingsuggestionsHandler handles AdAccount_GET_targetingsuggestions
func AdAccount_GET_targetingsuggestionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "targetingsuggestions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_targetingvalidationHandler handles AdAccount_GET_targetingvalidation
func AdAccount_GET_targetingvalidationHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "targetingvalidation")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_trackingHandler handles AdAccount_GET_tracking
func AdAccount_GET_trackingHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "tracking")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_trackingHandler handles AdAccount_POST_tracking
func AdAccount_POST_trackingHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "tracking")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_usersHandler handles AdAccount_GET_users
func AdAccount_GET_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "users")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_DELETE_usersofanyaudienceHandler handles AdAccount_DELETE_usersofanyaudience
func AdAccount_DELETE_usersofanyaudienceHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "usersofanyaudience")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_value_rule_setHandler handles AdAccount_GET_value_rule_set
func AdAccount_GET_value_rule_setHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "value_rule_set")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_value_rule_setHandler handles AdAccount_POST_value_rule_set
func AdAccount_POST_value_rule_setHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "value_rule_set")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_video_adsHandler handles AdAccount_GET_video_ads
func AdAccount_GET_video_adsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "video_ads")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_video_adsHandler handles AdAccount_POST_video_ads
func AdAccount_POST_video_adsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "video_ads")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_GET_Handler handles AdAccount_GET_
func AdAccount_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccount_POST_Handler handles AdAccount_POST_
func AdAccount_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccountAgencyFeeConfig_GET_Handler handles AdAccountAgencyFeeConfig_GET_
func AdAccountAgencyFeeConfig_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccountCreationRequest_GET_adaccountsHandler handles AdAccountCreationRequest_GET_adaccounts
func AdAccountCreationRequest_GET_adaccountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adaccounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccountCreationRequest_GET_Handler handles AdAccountCreationRequest_GET_
func AdAccountCreationRequest_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAccountUserSettings_GET_Handler handles AdAccountUserSettings_GET_
func AdAccountUserSettings_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAsyncRequest_DELETE_Handler handles AdAsyncRequest_DELETE_
func AdAsyncRequest_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAsyncRequest_GET_Handler handles AdAsyncRequest_GET_
func AdAsyncRequest_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAsyncRequestSet_GET_requestsHandler handles AdAsyncRequestSet_GET_requests
func AdAsyncRequestSet_GET_requestsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "requests")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAsyncRequestSet_DELETE_Handler handles AdAsyncRequestSet_DELETE_
func AdAsyncRequestSet_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAsyncRequestSet_GET_Handler handles AdAsyncRequestSet_GET_
func AdAsyncRequestSet_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdAsyncRequestSet_POST_Handler handles AdAsyncRequestSet_POST_
func AdAsyncRequestSet_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdColumnSizes_GET_Handler handles AdColumnSizes_GET_
func AdColumnSizes_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdCreationPackageConfig_GET_Handler handles AdCreationPackageConfig_GET_
func AdCreationPackageConfig_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdCreative_POST_adlabelsHandler handles AdCreative_POST_adlabels
func AdCreative_POST_adlabelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "adlabels")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdCreative_GET_creative_insightsHandler handles AdCreative_GET_creative_insights
func AdCreative_GET_creative_insightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "creative_insights")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdCreative_GET_previewsHandler handles AdCreative_GET_previews
func AdCreative_GET_previewsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "previews")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdCreative_DELETE_Handler handles AdCreative_DELETE_
func AdCreative_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdCreative_GET_Handler handles AdCreative_GET_
func AdCreative_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdCreative_POST_Handler handles AdCreative_POST_
func AdCreative_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdCustomDerivedMetrics_GET_Handler handles AdCustomDerivedMetrics_GET_
func AdCustomDerivedMetrics_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdDraft_GET_Handler handles AdDraft_GET_
func AdDraft_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdExportPreset_GET_Handler handles AdExportPreset_GET_
func AdExportPreset_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdImage_GET_Handler handles AdImage_GET_
func AdImage_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdLabel_GET_adcreativesHandler handles AdLabel_GET_adcreatives
func AdLabel_GET_adcreativesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adcreatives")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdLabel_GET_adsHandler handles AdLabel_GET_ads
func AdLabel_GET_adsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ads")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdLabel_GET_adsetsHandler handles AdLabel_GET_adsets
func AdLabel_GET_adsetsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adsets")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdLabel_GET_campaignsHandler handles AdLabel_GET_campaigns
func AdLabel_GET_campaignsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "campaigns")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdLabel_DELETE_Handler handles AdLabel_DELETE_
func AdLabel_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdLabel_GET_Handler handles AdLabel_GET_
func AdLabel_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdLabel_POST_Handler handles AdLabel_POST_
func AdLabel_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdLightAdgroup_GET_Handler handles AdLightAdgroup_GET_
func AdLightAdgroup_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdLightCampaign_GET_Handler handles AdLightCampaign_GET_
func AdLightCampaign_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdLightCampaignGroup_GET_Handler handles AdLightCampaignGroup_GET_
func AdLightCampaignGroup_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdMonetizationProperty_GET_adnetworkanalyticsHandler handles AdMonetizationProperty_GET_adnetworkanalytics
func AdMonetizationProperty_GET_adnetworkanalyticsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adnetworkanalytics")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdMonetizationProperty_POST_adnetworkanalyticsHandler handles AdMonetizationProperty_POST_adnetworkanalytics
func AdMonetizationProperty_POST_adnetworkanalyticsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "adnetworkanalytics")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdMonetizationProperty_GET_adnetworkanalytics_resultsHandler handles AdMonetizationProperty_GET_adnetworkanalytics_results
func AdMonetizationProperty_GET_adnetworkanalytics_resultsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adnetworkanalytics_results")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdMonetizationProperty_GET_Handler handles AdMonetizationProperty_GET_
func AdMonetizationProperty_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdPlacePageSet_GET_Handler handles AdPlacePageSet_GET_
func AdPlacePageSet_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdPlacement_GET_Handler handles AdPlacement_GET_
func AdPlacement_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdProposal_GET_Handler handles AdProposal_GET_
func AdProposal_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdReportRun_GET_insightsHandler handles AdReportRun_GET_insights
func AdReportRun_GET_insightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "insights")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdReportRun_GET_Handler handles AdReportRun_GET_
func AdReportRun_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdRule_POST_executeHandler handles AdRule_POST_execute
func AdRule_POST_executeHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "execute")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdRule_GET_historyHandler handles AdRule_GET_history
func AdRule_GET_historyHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "history")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdRule_POST_previewHandler handles AdRule_POST_preview
func AdRule_POST_previewHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "preview")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdRule_DELETE_Handler handles AdRule_DELETE_
func AdRule_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdRule_GET_Handler handles AdRule_GET_
func AdRule_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdRule_POST_Handler handles AdRule_POST_
func AdRule_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdRuleEvaluationSpec_GET_Handler handles AdRuleEvaluationSpec_GET_
func AdRuleEvaluationSpec_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdRuleExecutionSpec_GET_Handler handles AdRuleExecutionSpec_GET_
func AdRuleExecutionSpec_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdSavedKeywords_GET_Handler handles AdSavedKeywords_GET_
func AdSavedKeywords_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdSavedLocation_GET_Handler handles AdSavedLocation_GET_
func AdSavedLocation_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdSavedReport_GET_Handler handles AdSavedReport_GET_
func AdSavedReport_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdSet_GET_activitiesHandler handles AdSet_GET_activities
func AdSet_GET_activitiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "activities")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdSet_GET_ad_studiesHandler handles AdSet_GET_ad_studies
func AdSet_GET_ad_studiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ad_studies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdSet_GET_adcreativesHandler handles AdSet_GET_adcreatives
func AdSet_GET_adcreativesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adcreatives")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdSet_DELETE_adlabelsHandler handles AdSet_DELETE_adlabels
func AdSet_DELETE_adlabelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adlabels")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdSet_POST_adlabelsHandler handles AdSet_POST_adlabels
func AdSet_POST_adlabelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "adlabels")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdSet_GET_adrules_governedHandler handles AdSet_GET_adrules_governed
func AdSet_GET_adrules_governedHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adrules_governed")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdSet_GET_adsHandler handles AdSet_GET_ads
func AdSet_GET_adsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ads")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdSet_GET_asyncadrequestsHandler handles AdSet_GET_asyncadrequests
func AdSet_GET_asyncadrequestsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "asyncadrequests")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdSet_POST_budget_schedulesHandler handles AdSet_POST_budget_schedules
func AdSet_POST_budget_schedulesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "budget_schedules")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdSet_GET_copiesHandler handles AdSet_GET_copies
func AdSet_GET_copiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "copies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdSet_POST_copiesHandler handles AdSet_POST_copies
func AdSet_POST_copiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "copies")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdSet_GET_delivery_estimateHandler handles AdSet_GET_delivery_estimate
func AdSet_GET_delivery_estimateHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "delivery_estimate")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdSet_GET_insightsHandler handles AdSet_GET_insights
func AdSet_GET_insightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "insights")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdSet_POST_insightsHandler handles AdSet_POST_insights
func AdSet_POST_insightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "insights")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdSet_GET_message_delivery_estimateHandler handles AdSet_GET_message_delivery_estimate
func AdSet_GET_message_delivery_estimateHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "message_delivery_estimate")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdSet_GET_targetingsentencelinesHandler handles AdSet_GET_targetingsentencelines
func AdSet_GET_targetingsentencelinesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "targetingsentencelines")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdSet_DELETE_Handler handles AdSet_DELETE_
func AdSet_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdSet_GET_Handler handles AdSet_GET_
func AdSet_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdSet_POST_Handler handles AdSet_POST_
func AdSet_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdStudy_GET_cellsHandler handles AdStudy_GET_cells
func AdStudy_GET_cellsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "cells")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdStudy_POST_checkpointHandler handles AdStudy_POST_checkpoint
func AdStudy_POST_checkpointHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "checkpoint")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdStudy_GET_instancesHandler handles AdStudy_GET_instances
func AdStudy_GET_instancesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "instances")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdStudy_POST_instancesHandler handles AdStudy_POST_instances
func AdStudy_POST_instancesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "instances")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdStudy_GET_objectivesHandler handles AdStudy_GET_objectives
func AdStudy_GET_objectivesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "objectives")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdStudy_DELETE_Handler handles AdStudy_DELETE_
func AdStudy_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdStudy_GET_Handler handles AdStudy_GET_
func AdStudy_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdStudy_POST_Handler handles AdStudy_POST_
func AdStudy_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdStudyCell_GET_adaccountsHandler handles AdStudyCell_GET_adaccounts
func AdStudyCell_GET_adaccountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adaccounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdStudyCell_GET_adsetsHandler handles AdStudyCell_GET_adsets
func AdStudyCell_GET_adsetsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adsets")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdStudyCell_GET_campaignsHandler handles AdStudyCell_GET_campaigns
func AdStudyCell_GET_campaignsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "campaigns")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdStudyCell_GET_Handler handles AdStudyCell_GET_
func AdStudyCell_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdStudyCell_POST_Handler handles AdStudyCell_POST_
func AdStudyCell_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdStudyObjective_GET_adspixelsHandler handles AdStudyObjective_GET_adspixels
func AdStudyObjective_GET_adspixelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adspixels")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdStudyObjective_GET_applicationsHandler handles AdStudyObjective_GET_applications
func AdStudyObjective_GET_applicationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "applications")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdStudyObjective_GET_brand_requestsHandler handles AdStudyObjective_GET_brand_requests
func AdStudyObjective_GET_brand_requestsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "brand_requests")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdStudyObjective_GET_customconversionsHandler handles AdStudyObjective_GET_customconversions
func AdStudyObjective_GET_customconversionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "customconversions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdStudyObjective_GET_offline_conversion_data_setsHandler handles AdStudyObjective_GET_offline_conversion_data_sets
func AdStudyObjective_GET_offline_conversion_data_setsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "offline_conversion_data_sets")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdStudyObjective_GET_partner_private_studiesHandler handles AdStudyObjective_GET_partner_private_studies
func AdStudyObjective_GET_partner_private_studiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "partner_private_studies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdStudyObjective_GET_partnerstudiesHandler handles AdStudyObjective_GET_partnerstudies
func AdStudyObjective_GET_partnerstudiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "partnerstudies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdStudyObjective_GET_Handler handles AdStudyObjective_GET_
func AdStudyObjective_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdStudyObjective_POST_Handler handles AdStudyObjective_POST_
func AdStudyObjective_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdTopline_GET_Handler handles AdTopline_GET_
func AdTopline_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdToplineDetail_GET_Handler handles AdToplineDetail_GET_
func AdToplineDetail_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdVideo_GET_boost_ads_listHandler handles AdVideo_GET_boost_ads_list
func AdVideo_GET_boost_ads_listHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "boost_ads_list")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdVideo_GET_captionsHandler handles AdVideo_GET_captions
func AdVideo_GET_captionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "captions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdVideo_POST_captionsHandler handles AdVideo_POST_captions
func AdVideo_POST_captionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "captions")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdVideo_GET_collaboratorsHandler handles AdVideo_GET_collaborators
func AdVideo_GET_collaboratorsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "collaborators")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdVideo_POST_collaboratorsHandler handles AdVideo_POST_collaborators
func AdVideo_POST_collaboratorsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "collaborators")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdVideo_GET_commentsHandler handles AdVideo_GET_comments
func AdVideo_GET_commentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "comments")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdVideo_POST_commentsHandler handles AdVideo_POST_comments
func AdVideo_POST_commentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "comments")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdVideo_GET_crosspost_shared_pagesHandler handles AdVideo_GET_crosspost_shared_pages
func AdVideo_GET_crosspost_shared_pagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "crosspost_shared_pages")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdVideo_POST_gaming_clip_createHandler handles AdVideo_POST_gaming_clip_create
func AdVideo_POST_gaming_clip_createHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "gaming_clip_create")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdVideo_GET_likesHandler handles AdVideo_GET_likes
func AdVideo_GET_likesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "likes")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdVideo_POST_likesHandler handles AdVideo_POST_likes
func AdVideo_POST_likesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "likes")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdVideo_GET_poll_settingsHandler handles AdVideo_GET_poll_settings
func AdVideo_GET_poll_settingsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "poll_settings")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdVideo_GET_pollsHandler handles AdVideo_GET_polls
func AdVideo_GET_pollsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "polls")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdVideo_POST_pollsHandler handles AdVideo_POST_polls
func AdVideo_POST_pollsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "polls")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdVideo_GET_sponsor_tagsHandler handles AdVideo_GET_sponsor_tags
func AdVideo_GET_sponsor_tagsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "sponsor_tags")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdVideo_GET_tagsHandler handles AdVideo_GET_tags
func AdVideo_GET_tagsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "tags")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdVideo_GET_thumbnailsHandler handles AdVideo_GET_thumbnails
func AdVideo_GET_thumbnailsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "thumbnails")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdVideo_POST_thumbnailsHandler handles AdVideo_POST_thumbnails
func AdVideo_POST_thumbnailsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "thumbnails")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdVideo_GET_video_insightsHandler handles AdVideo_GET_video_insights
func AdVideo_GET_video_insightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "video_insights")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdVideo_DELETE_Handler handles AdVideo_DELETE_
func AdVideo_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdVideo_GET_Handler handles AdVideo_GET_
func AdVideo_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdVideo_POST_Handler handles AdVideo_POST_
func AdVideo_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdgroupFacebookFeedback_GET_commentsHandler handles AdgroupFacebookFeedback_GET_comments
func AdgroupFacebookFeedback_GET_commentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "comments")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsConversionGoal_GET_conversion_eventsHandler handles AdsConversionGoal_GET_conversion_events
func AdsConversionGoal_GET_conversion_eventsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "conversion_events")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsConversionGoal_GET_Handler handles AdsConversionGoal_GET_
func AdsConversionGoal_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsCreationSavedState_GET_Handler handles AdsCreationSavedState_GET_
func AdsCreationSavedState_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsMcmeConversion_GET_Handler handles AdsMcmeConversion_GET_
func AdsMcmeConversion_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsNamingTemplate_GET_Handler handles AdsNamingTemplate_GET_
func AdsNamingTemplate_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsPivotRules_GET_Handler handles AdsPivotRules_GET_
func AdsPivotRules_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsPixel_GET_adaccountsHandler handles AdsPixel_GET_adaccounts
func AdsPixel_GET_adaccountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adaccounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsPixel_DELETE_agenciesHandler handles AdsPixel_DELETE_agencies
func AdsPixel_DELETE_agenciesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "agencies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsPixel_GET_agenciesHandler handles AdsPixel_GET_agencies
func AdsPixel_GET_agenciesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "agencies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsPixel_POST_agenciesHandler handles AdsPixel_POST_agencies
func AdsPixel_POST_agenciesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "agencies")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsPixel_POST_ahp_configsHandler handles AdsPixel_POST_ahp_configs
func AdsPixel_POST_ahp_configsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "ahp_configs")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsPixel_GET_assigned_usersHandler handles AdsPixel_GET_assigned_users
func AdsPixel_GET_assigned_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_users")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsPixel_POST_assigned_usersHandler handles AdsPixel_POST_assigned_users
func AdsPixel_POST_assigned_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "assigned_users")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsPixel_GET_da_checksHandler handles AdsPixel_GET_da_checks
func AdsPixel_GET_da_checksHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "da_checks")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsPixel_POST_eventsHandler handles AdsPixel_POST_events
func AdsPixel_POST_eventsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "events")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsPixel_GET_offline_event_uploadsHandler handles AdsPixel_GET_offline_event_uploads
func AdsPixel_GET_offline_event_uploadsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "offline_event_uploads")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsPixel_GET_openbridge_configurationsHandler handles AdsPixel_GET_openbridge_configurations
func AdsPixel_GET_openbridge_configurationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "openbridge_configurations")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsPixel_POST_shadowtraffichelperHandler handles AdsPixel_POST_shadowtraffichelper
func AdsPixel_POST_shadowtraffichelperHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "shadowtraffichelper")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsPixel_DELETE_shared_accountsHandler handles AdsPixel_DELETE_shared_accounts
func AdsPixel_DELETE_shared_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "shared_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsPixel_GET_shared_accountsHandler handles AdsPixel_GET_shared_accounts
func AdsPixel_GET_shared_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "shared_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsPixel_POST_shared_accountsHandler handles AdsPixel_POST_shared_accounts
func AdsPixel_POST_shared_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "shared_accounts")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsPixel_GET_shared_agenciesHandler handles AdsPixel_GET_shared_agencies
func AdsPixel_GET_shared_agenciesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "shared_agencies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsPixel_GET_statsHandler handles AdsPixel_GET_stats
func AdsPixel_GET_statsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "stats")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsPixel_GET_Handler handles AdsPixel_GET_
func AdsPixel_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsPixel_POST_Handler handles AdsPixel_POST_
func AdsPixel_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsPixelCapabilityOverride_GET_Handler handles AdsPixelCapabilityOverride_GET_
func AdsPixelCapabilityOverride_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsQuickViews_GET_Handler handles AdsQuickViews_GET_
func AdsQuickViews_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsReportBuilderExportCore_GET_Handler handles AdsReportBuilderExportCore_GET_
func AdsReportBuilderExportCore_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsReportBuilderMMMReport_GET_Handler handles AdsReportBuilderMMMReport_GET_
func AdsReportBuilderMMMReport_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsReportBuilderMMMReportScheduler_GET_Handler handles AdsReportBuilderMMMReportScheduler_GET_
func AdsReportBuilderMMMReportScheduler_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsReportBuilderSavedReport_GET_Handler handles AdsReportBuilderSavedReport_GET_
func AdsReportBuilderSavedReport_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsStartYourDayWidget_GET_Handler handles AdsStartYourDayWidget_GET_
func AdsStartYourDayWidget_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsUserSettings_GET_Handler handles AdsUserSettings_GET_
func AdsUserSettings_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsValueAdjustmentRuleCollection_POST_delete_rule_setHandler handles AdsValueAdjustmentRuleCollection_POST_delete_rule_set
func AdsValueAdjustmentRuleCollection_POST_delete_rule_setHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "delete_rule_set")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsValueAdjustmentRuleCollection_GET_rulesHandler handles AdsValueAdjustmentRuleCollection_GET_rules
func AdsValueAdjustmentRuleCollection_GET_rulesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "rules")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsValueAdjustmentRuleCollection_GET_Handler handles AdsValueAdjustmentRuleCollection_GET_
func AdsValueAdjustmentRuleCollection_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdsValueAdjustmentRuleCollection_POST_Handler handles AdsValueAdjustmentRuleCollection_POST_
func AdsValueAdjustmentRuleCollection_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdvAInstance_GET_Handler handles AdvAInstance_GET_
func AdvAInstance_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Album_GET_commentsHandler handles Album_GET_comments
func Album_GET_commentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "comments")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Album_POST_commentsHandler handles Album_POST_comments
func Album_POST_commentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "comments")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Album_GET_likesHandler handles Album_GET_likes
func Album_GET_likesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "likes")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Album_POST_likesHandler handles Album_POST_likes
func Album_POST_likesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "likes")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Album_GET_photosHandler handles Album_GET_photos
func Album_GET_photosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "photos")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Album_POST_photosHandler handles Album_POST_photos
func Album_POST_photosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "photos")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Album_GET_pictureHandler handles Album_GET_picture
func Album_GET_pictureHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "picture")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Album_GET_Handler handles Album_GET_
func Album_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AnalyticsSegment_GET_Handler handles AnalyticsSegment_GET_
func AnalyticsSegment_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AnalyticsUserConfig_GET_Handler handles AnalyticsUserConfig_GET_
func AnalyticsUserConfig_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AppEventConfig_GET_Handler handles AppEventConfig_GET_
func AppEventConfig_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AppLinks_GET_Handler handles AppLinks_GET_
func AppLinks_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AppRequest_DELETE_Handler handles AppRequest_DELETE_
func AppRequest_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AppRequest_GET_Handler handles AppRequest_GET_
func AppRequest_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_DELETE_accountsHandler handles Application_DELETE_accounts
func Application_DELETE_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_accountsHandler handles Application_GET_accounts
func Application_GET_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_POST_accountsHandler handles Application_POST_accounts
func Application_POST_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "accounts")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_POST_activitiesHandler handles Application_POST_activities
func Application_POST_activitiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "activities")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_ad_placement_groupsHandler handles Application_GET_ad_placement_groups
func Application_GET_ad_placement_groupsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ad_placement_groups")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_adnetwork_placementsHandler handles Application_GET_adnetwork_placements
func Application_GET_adnetwork_placementsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adnetwork_placements")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_adnetworkanalyticsHandler handles Application_GET_adnetworkanalytics
func Application_GET_adnetworkanalyticsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adnetworkanalytics")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_POST_adnetworkanalyticsHandler handles Application_POST_adnetworkanalytics
func Application_POST_adnetworkanalyticsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "adnetworkanalytics")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_adnetworkanalytics_resultsHandler handles Application_GET_adnetworkanalytics_results
func Application_GET_adnetworkanalytics_resultsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adnetworkanalytics_results")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_aem_attributionHandler handles Application_GET_aem_attribution
func Application_GET_aem_attributionHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "aem_attribution")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_aem_conversion_configsHandler handles Application_GET_aem_conversion_configs
func Application_GET_aem_conversion_configsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "aem_conversion_configs")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_aem_conversion_filterHandler handles Application_GET_aem_conversion_filter
func Application_GET_aem_conversion_filterHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "aem_conversion_filter")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_POST_aem_conversionsHandler handles Application_POST_aem_conversions
func Application_POST_aem_conversionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "aem_conversions")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_POST_aem_skan_readinessHandler handles Application_POST_aem_skan_readiness
func Application_POST_aem_skan_readinessHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "aem_skan_readiness")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_agenciesHandler handles Application_GET_agencies
func Application_GET_agenciesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "agencies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_POST_aggregate_revenueHandler handles Application_POST_aggregate_revenue
func Application_POST_aggregate_revenueHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "aggregate_revenue")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_android_dialog_configsHandler handles Application_GET_android_dialog_configs
func Application_GET_android_dialog_configsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "android_dialog_configs")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_app_capi_settingsHandler handles Application_GET_app_capi_settings
func Application_GET_app_capi_settingsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "app_capi_settings")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_app_event_typesHandler handles Application_GET_app_event_types
func Application_GET_app_event_typesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "app_event_types")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_POST_app_indexingHandler handles Application_POST_app_indexing
func Application_POST_app_indexingHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "app_indexing")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_POST_app_indexing_sessionHandler handles Application_POST_app_indexing_session
func Application_POST_app_indexing_sessionHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "app_indexing_session")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_app_installed_groupsHandler handles Application_GET_app_installed_groups
func Application_GET_app_installed_groupsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "app_installed_groups")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_POST_app_push_device_tokenHandler handles Application_POST_app_push_device_token
func Application_POST_app_push_device_tokenHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "app_push_device_token")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_appassetsHandler handles Application_GET_appassets
func Application_GET_appassetsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "appassets")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_POST_assetsHandler handles Application_POST_assets
func Application_POST_assetsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "assets")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_authorized_adaccountsHandler handles Application_GET_authorized_adaccounts
func Application_GET_authorized_adaccountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "authorized_adaccounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_button_auto_detection_device_selectionHandler handles Application_GET_button_auto_detection_device_selection
func Application_GET_button_auto_detection_device_selectionHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "button_auto_detection_device_selection")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_cloudbridge_settingsHandler handles Application_GET_cloudbridge_settings
func Application_GET_cloudbridge_settingsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "cloudbridge_settings")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_POST_codeless_event_mappingsHandler handles Application_POST_codeless_event_mappings
func Application_POST_codeless_event_mappingsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "codeless_event_mappings")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_connected_client_businessesHandler handles Application_GET_connected_client_businesses
func Application_GET_connected_client_businessesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "connected_client_businesses")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_da_checksHandler handles Application_GET_da_checks
func Application_GET_da_checksHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "da_checks")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_POST_domain_reportsHandler handles Application_POST_domain_reports
func Application_POST_domain_reportsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "domain_reports")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_iap_purchasesHandler handles Application_GET_iap_purchases
func Application_GET_iap_purchasesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "iap_purchases")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_ios_dialog_configsHandler handles Application_GET_ios_dialog_configs
func Application_GET_ios_dialog_configsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ios_dialog_configs")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_linked_datasetHandler handles Application_GET_linked_dataset
func Application_GET_linked_datasetHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "linked_dataset")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_message_templatesHandler handles Application_GET_message_templates
func Application_GET_message_templatesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "message_templates")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_POST_mmp_auditingHandler handles Application_POST_mmp_auditing
func Application_POST_mmp_auditingHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "mmp_auditing")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_mobile_sdk_gkHandler handles Application_GET_mobile_sdk_gk
func Application_GET_mobile_sdk_gkHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "mobile_sdk_gk")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_monetized_digital_store_objectsHandler handles Application_GET_monetized_digital_store_objects
func Application_GET_monetized_digital_store_objectsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "monetized_digital_store_objects")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_POST_monetized_digital_store_objectsHandler handles Application_POST_monetized_digital_store_objects
func Application_POST_monetized_digital_store_objectsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "monetized_digital_store_objects")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_object_typesHandler handles Application_GET_object_types
func Application_GET_object_typesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "object_types")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_objectsHandler handles Application_GET_objects
func Application_GET_objectsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "objects")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_POST_occludespopupsHandler handles Application_POST_occludespopups
func Application_POST_occludespopupsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "occludespopups")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_permissionsHandler handles Application_GET_permissions
func Application_GET_permissionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "permissions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_productsHandler handles Application_GET_products
func Application_GET_productsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "products")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_purchasesHandler handles Application_GET_purchases
func Application_GET_purchasesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "purchases")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_rolesHandler handles Application_GET_roles
func Application_GET_rolesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "roles")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_server_domain_infosHandler handles Application_GET_server_domain_infos
func Application_GET_server_domain_infosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "server_domain_infos")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_sgw_dataset_statusHandler handles Application_GET_sgw_dataset_status
func Application_GET_sgw_dataset_statusHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "sgw_dataset_status")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_sgw_install_deferral_linkHandler handles Application_GET_sgw_install_deferral_link
func Application_GET_sgw_install_deferral_linkHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "sgw_install_deferral_link")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_subscribed_domainsHandler handles Application_GET_subscribed_domains
func Application_GET_subscribed_domainsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "subscribed_domains")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_POST_subscribed_domainsHandler handles Application_POST_subscribed_domains
func Application_POST_subscribed_domainsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "subscribed_domains")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_subscribed_domains_phishingHandler handles Application_GET_subscribed_domains_phishing
func Application_GET_subscribed_domains_phishingHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "subscribed_domains_phishing")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_POST_subscribed_domains_phishingHandler handles Application_POST_subscribed_domains_phishing
func Application_POST_subscribed_domains_phishingHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "subscribed_domains_phishing")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_DELETE_subscriptionsHandler handles Application_DELETE_subscriptions
func Application_DELETE_subscriptionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "subscriptions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_subscriptionsHandler handles Application_GET_subscriptions
func Application_GET_subscriptionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "subscriptions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_POST_subscriptionsHandler handles Application_POST_subscriptions
func Application_POST_subscriptionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "subscriptions")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_POST_uploadsHandler handles Application_POST_uploads
func Application_POST_uploadsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "uploads")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_POST_whatsapp_business_solutionHandler handles Application_POST_whatsapp_business_solution
func Application_POST_whatsapp_business_solutionHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "whatsapp_business_solution")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_whatsapp_business_solutionsHandler handles Application_GET_whatsapp_business_solutions
func Application_GET_whatsapp_business_solutionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "whatsapp_business_solutions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_GET_Handler handles Application_GET_
func Application_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Application_POST_Handler handles Application_POST_
func Application_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ArAdsDataContainer_GET_Handler handles ArAdsDataContainer_GET_
func ArAdsDataContainer_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AsyncSession_GET_Handler handles AsyncSession_GET_
func AsyncSession_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AudioAsset_GET_Handler handles AudioAsset_GET_
func AudioAsset_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AudioCopyright_GET_update_recordsHandler handles AudioCopyright_GET_update_records
func AudioCopyright_GET_update_recordsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "update_records")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AudioCopyright_GET_Handler handles AudioCopyright_GET_
func AudioCopyright_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AudioIsrc_GET_Handler handles AudioIsrc_GET_
func AudioIsrc_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AudioRelease_GET_Handler handles AudioRelease_GET_
func AudioRelease_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AudioSubLabel_GET_Handler handles AudioSubLabel_GET_
func AudioSubLabel_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AutomotiveModel_GET_channels_to_integrity_statusHandler handles AutomotiveModel_GET_channels_to_integrity_status
func AutomotiveModel_GET_channels_to_integrity_statusHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "channels_to_integrity_status")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AutomotiveModel_GET_override_detailsHandler handles AutomotiveModel_GET_override_details
func AutomotiveModel_GET_override_detailsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "override_details")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AutomotiveModel_GET_videos_metadataHandler handles AutomotiveModel_GET_videos_metadata
func AutomotiveModel_GET_videos_metadataHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "videos_metadata")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AutomotiveModel_GET_Handler handles AutomotiveModel_GET_
func AutomotiveModel_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Avatar_GET_modelsHandler handles Avatar_GET_models
func Avatar_GET_modelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "models")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Avatar_GET_Handler handles Avatar_GET_
func Avatar_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AvatarProfilePicture_GET_Handler handles AvatarProfilePicture_GET_
func AvatarProfilePicture_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BCPCampaign_GET_Handler handles BCPCampaign_GET_
func BCPCampaign_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BidSchedule_GET_Handler handles BidSchedule_GET_
func BidSchedule_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BizInboxOffsiteEmailAccount_GET_assigned_usersHandler handles BizInboxOffsiteEmailAccount_GET_assigned_users
func BizInboxOffsiteEmailAccount_GET_assigned_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_users")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BizInboxOffsiteEmailAccount_GET_Handler handles BizInboxOffsiteEmailAccount_GET_
func BizInboxOffsiteEmailAccount_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BlindPig_GET_Handler handles BlindPig_GET_
func BlindPig_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BrandRequest_GET_Handler handles BrandRequest_GET_
func BrandRequest_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BrandSafetyDownloadable_GET_Handler handles BrandSafetyDownloadable_GET_
func BrandSafetyDownloadable_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_access_tokenHandler handles Business_POST_access_token
func Business_POST_access_tokenHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "access_token")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_ad_account_infosHandler handles Business_GET_ad_account_infos
func Business_GET_ad_account_infosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ad_account_infos")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_DELETE_ad_accountsHandler handles Business_DELETE_ad_accounts
func Business_DELETE_ad_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ad_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_ad_review_requestsHandler handles Business_POST_ad_review_requests
func Business_POST_ad_review_requestsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "ad_review_requests")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_ad_studiesHandler handles Business_GET_ad_studies
func Business_GET_ad_studiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ad_studies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_ad_studiesHandler handles Business_POST_ad_studies
func Business_POST_ad_studiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "ad_studies")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_adaccountHandler handles Business_POST_adaccount
func Business_POST_adaccountHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "adaccount")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_add_phone_numbersHandler handles Business_POST_add_phone_numbers
func Business_POST_add_phone_numbersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "add_phone_numbers")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_adnetwork_applicationsHandler handles Business_POST_adnetwork_applications
func Business_POST_adnetwork_applicationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "adnetwork_applications")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_adnetworkanalyticsHandler handles Business_GET_adnetworkanalytics
func Business_GET_adnetworkanalyticsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adnetworkanalytics")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_adnetworkanalyticsHandler handles Business_POST_adnetworkanalytics
func Business_POST_adnetworkanalyticsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "adnetworkanalytics")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_adnetworkanalytics_resultsHandler handles Business_GET_adnetworkanalytics_results
func Business_GET_adnetworkanalytics_resultsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adnetworkanalytics_results")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_ads_datasetHandler handles Business_GET_ads_dataset
func Business_GET_ads_datasetHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ads_dataset")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_ads_datasetHandler handles Business_POST_ads_dataset
func Business_POST_ads_datasetHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "ads_dataset")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_ads_reporting_mmm_reportsHandler handles Business_GET_ads_reporting_mmm_reports
func Business_GET_ads_reporting_mmm_reportsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ads_reporting_mmm_reports")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_ads_reporting_mmm_schedulersHandler handles Business_GET_ads_reporting_mmm_schedulers
func Business_GET_ads_reporting_mmm_schedulersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ads_reporting_mmm_schedulers")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_adspixelsHandler handles Business_GET_adspixels
func Business_GET_adspixelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adspixels")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_adspixelsHandler handles Business_POST_adspixels
func Business_POST_adspixelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "adspixels")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_DELETE_agenciesHandler handles Business_DELETE_agencies
func Business_DELETE_agenciesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "agencies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_agenciesHandler handles Business_GET_agencies
func Business_GET_agenciesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "agencies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_an_placementsHandler handles Business_GET_an_placements
func Business_GET_an_placementsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "an_placements")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_block_list_draftsHandler handles Business_POST_block_list_drafts
func Business_POST_block_list_draftsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "block_list_drafts")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_bm_review_requestsHandler handles Business_POST_bm_review_requests
func Business_POST_bm_review_requestsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "bm_review_requests")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_business_asset_groupsHandler handles Business_GET_business_asset_groups
func Business_GET_business_asset_groupsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "business_asset_groups")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_business_invoicesHandler handles Business_GET_business_invoices
func Business_GET_business_invoicesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "business_invoices")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_business_usersHandler handles Business_GET_business_users
func Business_GET_business_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "business_users")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_business_usersHandler handles Business_POST_business_users
func Business_POST_business_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "business_users")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_businessprojectsHandler handles Business_GET_businessprojects
func Business_GET_businessprojectsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "businessprojects")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_claim_custom_conversionsHandler handles Business_POST_claim_custom_conversions
func Business_POST_claim_custom_conversionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "claim_custom_conversions")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_client_ad_accountsHandler handles Business_GET_client_ad_accounts
func Business_GET_client_ad_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "client_ad_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_client_appsHandler handles Business_GET_client_apps
func Business_GET_client_appsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "client_apps")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_client_appsHandler handles Business_POST_client_apps
func Business_POST_client_appsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "client_apps")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_client_offsite_signal_container_business_objectsHandler handles Business_GET_client_offsite_signal_container_business_objects
func Business_GET_client_offsite_signal_container_business_objectsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "client_offsite_signal_container_business_objects")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_client_pagesHandler handles Business_GET_client_pages
func Business_GET_client_pagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "client_pages")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_client_pagesHandler handles Business_POST_client_pages
func Business_POST_client_pagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "client_pages")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_client_pixelsHandler handles Business_GET_client_pixels
func Business_GET_client_pixelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "client_pixels")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_client_product_catalogsHandler handles Business_GET_client_product_catalogs
func Business_GET_client_product_catalogsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "client_product_catalogs")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_client_whatsapp_business_accountsHandler handles Business_GET_client_whatsapp_business_accounts
func Business_GET_client_whatsapp_business_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "client_whatsapp_business_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_DELETE_clientsHandler handles Business_DELETE_clients
func Business_DELETE_clientsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "clients")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_clientsHandler handles Business_GET_clients
func Business_GET_clientsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "clients")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_collaborative_ads_collaboration_requestsHandler handles Business_GET_collaborative_ads_collaboration_requests
func Business_GET_collaborative_ads_collaboration_requestsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "collaborative_ads_collaboration_requests")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_collaborative_ads_collaboration_requestsHandler handles Business_POST_collaborative_ads_collaboration_requests
func Business_POST_collaborative_ads_collaboration_requestsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "collaborative_ads_collaboration_requests")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_collaborative_ads_suggested_partnersHandler handles Business_GET_collaborative_ads_suggested_partners
func Business_GET_collaborative_ads_suggested_partnersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "collaborative_ads_suggested_partners")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_commerce_merchant_settingsHandler handles Business_GET_commerce_merchant_settings
func Business_GET_commerce_merchant_settingsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "commerce_merchant_settings")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_cpas_business_setup_configHandler handles Business_GET_cpas_business_setup_config
func Business_GET_cpas_business_setup_configHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "cpas_business_setup_config")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_cpas_business_setup_configHandler handles Business_POST_cpas_business_setup_config
func Business_POST_cpas_business_setup_configHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "cpas_business_setup_config")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_cpas_merchant_configHandler handles Business_GET_cpas_merchant_config
func Business_GET_cpas_merchant_configHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "cpas_merchant_config")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_creative_foldersHandler handles Business_POST_creative_folders
func Business_POST_creative_foldersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "creative_folders")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_creditcardsHandler handles Business_GET_creditcards
func Business_GET_creditcardsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "creditcards")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_customconversionsHandler handles Business_POST_customconversions
func Business_POST_customconversionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "customconversions")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_event_source_groupsHandler handles Business_GET_event_source_groups
func Business_GET_event_source_groupsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "event_source_groups")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_event_source_groupsHandler handles Business_POST_event_source_groups
func Business_POST_event_source_groupsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "event_source_groups")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_extendedcreditapplicationsHandler handles Business_GET_extendedcreditapplications
func Business_GET_extendedcreditapplicationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "extendedcreditapplications")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_extendedcreditsHandler handles Business_GET_extendedcredits
func Business_GET_extendedcreditsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "extendedcredits")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_imagesHandler handles Business_POST_images
func Business_POST_imagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "images")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_initiated_audience_sharing_requestsHandler handles Business_GET_initiated_audience_sharing_requests
func Business_GET_initiated_audience_sharing_requestsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "initiated_audience_sharing_requests")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_DELETE_instagram_accountsHandler handles Business_DELETE_instagram_accounts
func Business_DELETE_instagram_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "instagram_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_instagram_accountsHandler handles Business_GET_instagram_accounts
func Business_GET_instagram_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "instagram_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_instagram_business_accountsHandler handles Business_GET_instagram_business_accounts
func Business_GET_instagram_business_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "instagram_business_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_DELETE_managed_businessesHandler handles Business_DELETE_managed_businesses
func Business_DELETE_managed_businessesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "managed_businesses")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_managed_businessesHandler handles Business_POST_managed_businesses
func Business_POST_managed_businessesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "managed_businesses")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_managed_partner_ads_funding_source_detailsHandler handles Business_GET_managed_partner_ads_funding_source_details
func Business_GET_managed_partner_ads_funding_source_detailsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "managed_partner_ads_funding_source_details")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_managed_partner_business_setupHandler handles Business_POST_managed_partner_business_setup
func Business_POST_managed_partner_business_setupHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "managed_partner_business_setup")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_DELETE_managed_partner_businessesHandler handles Business_DELETE_managed_partner_businesses
func Business_DELETE_managed_partner_businessesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "managed_partner_businesses")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_managed_partner_businessesHandler handles Business_POST_managed_partner_businesses
func Business_POST_managed_partner_businessesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "managed_partner_businesses")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_onboard_partners_to_mm_liteHandler handles Business_POST_onboard_partners_to_mm_lite
func Business_POST_onboard_partners_to_mm_liteHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "onboard_partners_to_mm_lite")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_openbridge_configurationsHandler handles Business_GET_openbridge_configurations
func Business_GET_openbridge_configurationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "openbridge_configurations")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_openbridge_configurationsHandler handles Business_POST_openbridge_configurations
func Business_POST_openbridge_configurationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "openbridge_configurations")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_owned_ad_accountsHandler handles Business_GET_owned_ad_accounts
func Business_GET_owned_ad_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "owned_ad_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_owned_ad_accountsHandler handles Business_POST_owned_ad_accounts
func Business_POST_owned_ad_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "owned_ad_accounts")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_owned_appsHandler handles Business_GET_owned_apps
func Business_GET_owned_appsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "owned_apps")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_owned_appsHandler handles Business_POST_owned_apps
func Business_POST_owned_appsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "owned_apps")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_DELETE_owned_businessesHandler handles Business_DELETE_owned_businesses
func Business_DELETE_owned_businessesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "owned_businesses")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_owned_businessesHandler handles Business_GET_owned_businesses
func Business_GET_owned_businessesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "owned_businesses")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_owned_businessesHandler handles Business_POST_owned_businesses
func Business_POST_owned_businessesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "owned_businesses")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_owned_instagram_accountsHandler handles Business_GET_owned_instagram_accounts
func Business_GET_owned_instagram_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "owned_instagram_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_owned_offsite_signal_container_business_objectsHandler handles Business_GET_owned_offsite_signal_container_business_objects
func Business_GET_owned_offsite_signal_container_business_objectsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "owned_offsite_signal_container_business_objects")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_owned_pagesHandler handles Business_GET_owned_pages
func Business_GET_owned_pagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "owned_pages")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_owned_pagesHandler handles Business_POST_owned_pages
func Business_POST_owned_pagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "owned_pages")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_owned_pixelsHandler handles Business_GET_owned_pixels
func Business_GET_owned_pixelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "owned_pixels")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_owned_product_catalogsHandler handles Business_GET_owned_product_catalogs
func Business_GET_owned_product_catalogsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "owned_product_catalogs")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_owned_product_catalogsHandler handles Business_POST_owned_product_catalogs
func Business_POST_owned_product_catalogsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "owned_product_catalogs")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_owned_whatsapp_business_accountsHandler handles Business_GET_owned_whatsapp_business_accounts
func Business_GET_owned_whatsapp_business_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "owned_whatsapp_business_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_DELETE_pagesHandler handles Business_DELETE_pages
func Business_DELETE_pagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "pages")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_partner_account_linkingHandler handles Business_GET_partner_account_linking
func Business_GET_partner_account_linkingHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "partner_account_linking")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_partner_premium_optionsHandler handles Business_POST_partner_premium_options
func Business_POST_partner_premium_optionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "partner_premium_options")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_passback_attribution_metadata_configsHandler handles Business_GET_passback_attribution_metadata_configs
func Business_GET_passback_attribution_metadata_configsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "passback_attribution_metadata_configs")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_pending_client_ad_accountsHandler handles Business_GET_pending_client_ad_accounts
func Business_GET_pending_client_ad_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "pending_client_ad_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_pending_client_appsHandler handles Business_GET_pending_client_apps
func Business_GET_pending_client_appsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "pending_client_apps")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_pending_client_pagesHandler handles Business_GET_pending_client_pages
func Business_GET_pending_client_pagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "pending_client_pages")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_pending_owned_ad_accountsHandler handles Business_GET_pending_owned_ad_accounts
func Business_GET_pending_owned_ad_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "pending_owned_ad_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_pending_owned_pagesHandler handles Business_GET_pending_owned_pages
func Business_GET_pending_owned_pagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "pending_owned_pages")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_pending_shared_offsite_signal_container_business_objectsHandler handles Business_GET_pending_shared_offsite_signal_container_business_objects
func Business_GET_pending_shared_offsite_signal_container_business_objectsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "pending_shared_offsite_signal_container_business_objects")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_pending_usersHandler handles Business_GET_pending_users
func Business_GET_pending_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "pending_users")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_pictureHandler handles Business_GET_picture
func Business_GET_pictureHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "picture")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_pixel_tosHandler handles Business_POST_pixel_tos
func Business_POST_pixel_tosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "pixel_tos")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_preverified_numbersHandler handles Business_GET_preverified_numbers
func Business_GET_preverified_numbersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "preverified_numbers")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_received_audience_sharing_requestsHandler handles Business_GET_received_audience_sharing_requests
func Business_GET_received_audience_sharing_requestsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "received_audience_sharing_requests")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_reseller_guidancesHandler handles Business_GET_reseller_guidances
func Business_GET_reseller_guidancesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "reseller_guidances")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_self_certified_whatsapp_business_submissionsHandler handles Business_GET_self_certified_whatsapp_business_submissions
func Business_GET_self_certified_whatsapp_business_submissionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "self_certified_whatsapp_business_submissions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_self_certify_whatsapp_businessHandler handles Business_POST_self_certify_whatsapp_business
func Business_POST_self_certify_whatsapp_businessHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "self_certify_whatsapp_business")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_setup_managed_partner_adaccountsHandler handles Business_POST_setup_managed_partner_adaccounts
func Business_POST_setup_managed_partner_adaccountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "setup_managed_partner_adaccounts")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_DELETE_share_preverified_numbersHandler handles Business_DELETE_share_preverified_numbers
func Business_DELETE_share_preverified_numbersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "share_preverified_numbers")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_share_preverified_numbersHandler handles Business_POST_share_preverified_numbers
func Business_POST_share_preverified_numbersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "share_preverified_numbers")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_system_user_access_tokensHandler handles Business_POST_system_user_access_tokens
func Business_POST_system_user_access_tokensHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "system_user_access_tokens")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_system_usersHandler handles Business_GET_system_users
func Business_GET_system_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "system_users")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_system_usersHandler handles Business_POST_system_users
func Business_POST_system_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "system_users")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_third_party_measurement_report_datasetHandler handles Business_GET_third_party_measurement_report_dataset
func Business_GET_third_party_measurement_report_datasetHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "third_party_measurement_report_dataset")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_videosHandler handles Business_POST_videos
func Business_POST_videosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "videos")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_GET_Handler handles Business_GET_
func Business_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Business_POST_Handler handles Business_POST_
func Business_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAgreement_GET_Handler handles BusinessAgreement_GET_
func BusinessAgreement_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAgreement_POST_Handler handles BusinessAgreement_POST_
func BusinessAgreement_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_DELETE_assigned_usersHandler handles BusinessAssetGroup_DELETE_assigned_users
func BusinessAssetGroup_DELETE_assigned_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_users")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_GET_assigned_usersHandler handles BusinessAssetGroup_GET_assigned_users
func BusinessAssetGroup_GET_assigned_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_users")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_POST_assigned_usersHandler handles BusinessAssetGroup_POST_assigned_users
func BusinessAssetGroup_POST_assigned_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "assigned_users")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_DELETE_contained_adaccountsHandler handles BusinessAssetGroup_DELETE_contained_adaccounts
func BusinessAssetGroup_DELETE_contained_adaccountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "contained_adaccounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_GET_contained_adaccountsHandler handles BusinessAssetGroup_GET_contained_adaccounts
func BusinessAssetGroup_GET_contained_adaccountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "contained_adaccounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_POST_contained_adaccountsHandler handles BusinessAssetGroup_POST_contained_adaccounts
func BusinessAssetGroup_POST_contained_adaccountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "contained_adaccounts")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_DELETE_contained_applicationsHandler handles BusinessAssetGroup_DELETE_contained_applications
func BusinessAssetGroup_DELETE_contained_applicationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "contained_applications")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_GET_contained_applicationsHandler handles BusinessAssetGroup_GET_contained_applications
func BusinessAssetGroup_GET_contained_applicationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "contained_applications")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_POST_contained_applicationsHandler handles BusinessAssetGroup_POST_contained_applications
func BusinessAssetGroup_POST_contained_applicationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "contained_applications")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_DELETE_contained_custom_conversionsHandler handles BusinessAssetGroup_DELETE_contained_custom_conversions
func BusinessAssetGroup_DELETE_contained_custom_conversionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "contained_custom_conversions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_GET_contained_custom_conversionsHandler handles BusinessAssetGroup_GET_contained_custom_conversions
func BusinessAssetGroup_GET_contained_custom_conversionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "contained_custom_conversions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_POST_contained_custom_conversionsHandler handles BusinessAssetGroup_POST_contained_custom_conversions
func BusinessAssetGroup_POST_contained_custom_conversionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "contained_custom_conversions")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_DELETE_contained_instagram_accountsHandler handles BusinessAssetGroup_DELETE_contained_instagram_accounts
func BusinessAssetGroup_DELETE_contained_instagram_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "contained_instagram_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_GET_contained_instagram_accountsHandler handles BusinessAssetGroup_GET_contained_instagram_accounts
func BusinessAssetGroup_GET_contained_instagram_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "contained_instagram_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_POST_contained_instagram_accountsHandler handles BusinessAssetGroup_POST_contained_instagram_accounts
func BusinessAssetGroup_POST_contained_instagram_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "contained_instagram_accounts")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_DELETE_contained_pagesHandler handles BusinessAssetGroup_DELETE_contained_pages
func BusinessAssetGroup_DELETE_contained_pagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "contained_pages")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_GET_contained_pagesHandler handles BusinessAssetGroup_GET_contained_pages
func BusinessAssetGroup_GET_contained_pagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "contained_pages")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_POST_contained_pagesHandler handles BusinessAssetGroup_POST_contained_pages
func BusinessAssetGroup_POST_contained_pagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "contained_pages")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_DELETE_contained_pixelsHandler handles BusinessAssetGroup_DELETE_contained_pixels
func BusinessAssetGroup_DELETE_contained_pixelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "contained_pixels")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_GET_contained_pixelsHandler handles BusinessAssetGroup_GET_contained_pixels
func BusinessAssetGroup_GET_contained_pixelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "contained_pixels")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_POST_contained_pixelsHandler handles BusinessAssetGroup_POST_contained_pixels
func BusinessAssetGroup_POST_contained_pixelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "contained_pixels")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_DELETE_contained_product_catalogsHandler handles BusinessAssetGroup_DELETE_contained_product_catalogs
func BusinessAssetGroup_DELETE_contained_product_catalogsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "contained_product_catalogs")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_GET_contained_product_catalogsHandler handles BusinessAssetGroup_GET_contained_product_catalogs
func BusinessAssetGroup_GET_contained_product_catalogsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "contained_product_catalogs")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_POST_contained_product_catalogsHandler handles BusinessAssetGroup_POST_contained_product_catalogs
func BusinessAssetGroup_POST_contained_product_catalogsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "contained_product_catalogs")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_GET_Handler handles BusinessAssetGroup_GET_
func BusinessAssetGroup_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetGroup_POST_Handler handles BusinessAssetGroup_POST_
func BusinessAssetGroup_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetSharingAgreement_GET_Handler handles BusinessAssetSharingAgreement_GET_
func BusinessAssetSharingAgreement_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessAssetSharingAgreement_POST_Handler handles BusinessAssetSharingAgreement_POST_
func BusinessAssetSharingAgreement_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessCreativeFolder_GET_Handler handles BusinessCreativeFolder_GET_
func BusinessCreativeFolder_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessFranchiseConfig_GET_Handler handles BusinessFranchiseConfig_GET_
func BusinessFranchiseConfig_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessImage_GET_Handler handles BusinessImage_GET_
func BusinessImage_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessObjectTransferOwnershipAgreement_GET_Handler handles BusinessObjectTransferOwnershipAgreement_GET_
func BusinessObjectTransferOwnershipAgreement_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessOwnedObjectOnBehalfOfRequest_GET_Handler handles BusinessOwnedObjectOnBehalfOfRequest_GET_
func BusinessOwnedObjectOnBehalfOfRequest_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessProject_GET_Handler handles BusinessProject_GET_
func BusinessProject_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessRequest_GET_Handler handles BusinessRequest_GET_
func BusinessRequest_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessRoleRequest_DELETE_Handler handles BusinessRoleRequest_DELETE_
func BusinessRoleRequest_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessRoleRequest_GET_Handler handles BusinessRoleRequest_GET_
func BusinessRoleRequest_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessRoleRequest_POST_Handler handles BusinessRoleRequest_POST_
func BusinessRoleRequest_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessTag_GET_Handler handles BusinessTag_GET_
func BusinessTag_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessUser_GET_assigned_ad_accountsHandler handles BusinessUser_GET_assigned_ad_accounts
func BusinessUser_GET_assigned_ad_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_ad_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessUser_GET_assigned_business_asset_groupsHandler handles BusinessUser_GET_assigned_business_asset_groups
func BusinessUser_GET_assigned_business_asset_groupsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_business_asset_groups")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessUser_GET_assigned_pagesHandler handles BusinessUser_GET_assigned_pages
func BusinessUser_GET_assigned_pagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_pages")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessUser_GET_assigned_product_catalogsHandler handles BusinessUser_GET_assigned_product_catalogs
func BusinessUser_GET_assigned_product_catalogsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_product_catalogs")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessUser_DELETE_Handler handles BusinessUser_DELETE_
func BusinessUser_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessUser_GET_Handler handles BusinessUser_GET_
func BusinessUser_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessUser_POST_Handler handles BusinessUser_POST_
func BusinessUser_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// BusinessVideo_GET_Handler handles BusinessVideo_GET_
func BusinessVideo_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CPASAdCreationTemplate_GET_Handler handles CPASAdCreationTemplate_GET_
func CPASAdCreationTemplate_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CPASAdvertiserPartnershipRecommendation_GET_Handler handles CPASAdvertiserPartnershipRecommendation_GET_
func CPASAdvertiserPartnershipRecommendation_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CPASBusinessSetupConfig_GET_ad_accountsHandler handles CPASBusinessSetupConfig_GET_ad_accounts
func CPASBusinessSetupConfig_GET_ad_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ad_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CPASBusinessSetupConfig_GET_Handler handles CPASBusinessSetupConfig_GET_
func CPASBusinessSetupConfig_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CPASCollaborationRequest_GET_Handler handles CPASCollaborationRequest_GET_
func CPASCollaborationRequest_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CPASLsbImageBank_GET_backup_imagesHandler handles CPASLsbImageBank_GET_backup_images
func CPASLsbImageBank_GET_backup_imagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "backup_images")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CPASLsbImageBank_GET_Handler handles CPASLsbImageBank_GET_
func CPASLsbImageBank_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CPASLsbImageBank_POST_Handler handles CPASLsbImageBank_POST_
func CPASLsbImageBank_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CPASMerchantConfig_GET_Handler handles CPASMerchantConfig_GET_
func CPASMerchantConfig_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CPASParentCatalogSettings_GET_Handler handles CPASParentCatalogSettings_GET_
func CPASParentCatalogSettings_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CRMAddress_GET_Handler handles CRMAddress_GET_
func CRMAddress_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CTXPartnerAppWelcomeMessageFlow_GET_Handler handles CTXPartnerAppWelcomeMessageFlow_GET_
func CTXPartnerAppWelcomeMessageFlow_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CalibratorExistingRule_GET_Handler handles CalibratorExistingRule_GET_
func CalibratorExistingRule_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CallAdsPhoneData_GET_Handler handles CallAdsPhoneData_GET_
func CallAdsPhoneData_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Campaign_GET_ad_studiesHandler handles Campaign_GET_ad_studies
func Campaign_GET_ad_studiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ad_studies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Campaign_POST_adlabelsHandler handles Campaign_POST_adlabels
func Campaign_POST_adlabelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "adlabels")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Campaign_GET_adrules_governedHandler handles Campaign_GET_adrules_governed
func Campaign_GET_adrules_governedHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adrules_governed")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Campaign_GET_adsHandler handles Campaign_GET_ads
func Campaign_GET_adsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ads")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Campaign_GET_adsetsHandler handles Campaign_GET_adsets
func Campaign_GET_adsetsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adsets")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Campaign_POST_budget_schedulesHandler handles Campaign_POST_budget_schedules
func Campaign_POST_budget_schedulesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "budget_schedules")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Campaign_GET_copiesHandler handles Campaign_GET_copies
func Campaign_GET_copiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "copies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Campaign_POST_copiesHandler handles Campaign_POST_copies
func Campaign_POST_copiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "copies")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Campaign_GET_insightsHandler handles Campaign_GET_insights
func Campaign_GET_insightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "insights")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Campaign_POST_insightsHandler handles Campaign_POST_insights
func Campaign_POST_insightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "insights")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Campaign_DELETE_Handler handles Campaign_DELETE_
func Campaign_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Campaign_GET_Handler handles Campaign_GET_
func Campaign_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Campaign_POST_Handler handles Campaign_POST_
func Campaign_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Canvas_GET_previewHandler handles Canvas_GET_preview
func Canvas_GET_previewHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "preview")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Canvas_GET_previewsHandler handles Canvas_GET_previews
func Canvas_GET_previewsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "previews")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Canvas_GET_Handler handles Canvas_GET_
func Canvas_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Canvas_POST_Handler handles Canvas_POST_
func Canvas_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CanvasDynamicSetting_GET_Handler handles CanvasDynamicSetting_GET_
func CanvasDynamicSetting_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CanvasTemplate_GET_Handler handles CanvasTemplate_GET_
func CanvasTemplate_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CatalogContentVersionConfig_GET_Handler handles CatalogContentVersionConfig_GET_
func CatalogContentVersionConfig_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CatalogItemOverride_GET_Handler handles CatalogItemOverride_GET_
func CatalogItemOverride_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CatalogSmartPixelSettings_GET_Handler handles CatalogSmartPixelSettings_GET_
func CatalogSmartPixelSettings_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CatalogWebsiteOnboardingSettings_GET_Handler handles CatalogWebsiteOnboardingSettings_GET_
func CatalogWebsiteOnboardingSettings_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CatalogWebsiteSettings_GET_Handler handles CatalogWebsiteSettings_GET_
func CatalogWebsiteSettings_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ChinaBusinessOnboardingVettingRequest_GET_Handler handles ChinaBusinessOnboardingVettingRequest_GET_
func ChinaBusinessOnboardingVettingRequest_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CloudGame_GET_Handler handles CloudGame_GET_
func CloudGame_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CollaborativeAdsShareSettings_GET_Handler handles CollaborativeAdsShareSettings_GET_
func CollaborativeAdsShareSettings_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Comment_GET_commentsHandler handles Comment_GET_comments
func Comment_GET_commentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "comments")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Comment_POST_commentsHandler handles Comment_POST_comments
func Comment_POST_commentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "comments")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Comment_DELETE_likesHandler handles Comment_DELETE_likes
func Comment_DELETE_likesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "likes")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Comment_GET_likesHandler handles Comment_GET_likes
func Comment_GET_likesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "likes")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Comment_POST_likesHandler handles Comment_POST_likes
func Comment_POST_likesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "likes")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Comment_GET_reactionsHandler handles Comment_GET_reactions
func Comment_GET_reactionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "reactions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Comment_DELETE_Handler handles Comment_DELETE_
func Comment_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Comment_GET_Handler handles Comment_GET_
func Comment_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Comment_POST_Handler handles Comment_POST_
func Comment_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceMerchantSettings_POST_acknowledge_ordersHandler handles CommerceMerchantSettings_POST_acknowledge_orders
func CommerceMerchantSettings_POST_acknowledge_ordersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "acknowledge_orders")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceMerchantSettings_GET_commerce_ordersHandler handles CommerceMerchantSettings_GET_commerce_orders
func CommerceMerchantSettings_GET_commerce_ordersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "commerce_orders")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceMerchantSettings_GET_commerce_payoutsHandler handles CommerceMerchantSettings_GET_commerce_payouts
func CommerceMerchantSettings_GET_commerce_payoutsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "commerce_payouts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceMerchantSettings_GET_commerce_transactionsHandler handles CommerceMerchantSettings_GET_commerce_transactions
func CommerceMerchantSettings_GET_commerce_transactionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "commerce_transactions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceMerchantSettings_GET_order_management_appsHandler handles CommerceMerchantSettings_GET_order_management_apps
func CommerceMerchantSettings_GET_order_management_appsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "order_management_apps")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceMerchantSettings_POST_order_management_appsHandler handles CommerceMerchantSettings_POST_order_management_apps
func CommerceMerchantSettings_POST_order_management_appsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "order_management_apps")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceMerchantSettings_GET_product_catalogsHandler handles CommerceMerchantSettings_GET_product_catalogs
func CommerceMerchantSettings_GET_product_catalogsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "product_catalogs")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceMerchantSettings_GET_returnsHandler handles CommerceMerchantSettings_GET_returns
func CommerceMerchantSettings_GET_returnsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "returns")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceMerchantSettings_GET_setup_statusHandler handles CommerceMerchantSettings_GET_setup_status
func CommerceMerchantSettings_GET_setup_statusHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "setup_status")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceMerchantSettings_GET_shipping_profilesHandler handles CommerceMerchantSettings_GET_shipping_profiles
func CommerceMerchantSettings_GET_shipping_profilesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "shipping_profiles")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceMerchantSettings_POST_shipping_profilesHandler handles CommerceMerchantSettings_POST_shipping_profiles
func CommerceMerchantSettings_POST_shipping_profilesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "shipping_profiles")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceMerchantSettings_GET_shopsHandler handles CommerceMerchantSettings_GET_shops
func CommerceMerchantSettings_GET_shopsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "shops")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceMerchantSettings_GET_tax_settingsHandler handles CommerceMerchantSettings_GET_tax_settings
func CommerceMerchantSettings_GET_tax_settingsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "tax_settings")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceMerchantSettings_GET_Handler handles CommerceMerchantSettings_GET_
func CommerceMerchantSettings_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceOrder_POST_acknowledge_orderHandler handles CommerceOrder_POST_acknowledge_order
func CommerceOrder_POST_acknowledge_orderHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "acknowledge_order")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceOrder_GET_cancellationsHandler handles CommerceOrder_GET_cancellations
func CommerceOrder_GET_cancellationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "cancellations")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceOrder_POST_cancellationsHandler handles CommerceOrder_POST_cancellations
func CommerceOrder_POST_cancellationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "cancellations")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceOrder_POST_item_updatesHandler handles CommerceOrder_POST_item_updates
func CommerceOrder_POST_item_updatesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "item_updates")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceOrder_GET_itemsHandler handles CommerceOrder_GET_items
func CommerceOrder_GET_itemsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "items")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceOrder_GET_paymentsHandler handles CommerceOrder_GET_payments
func CommerceOrder_GET_paymentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "payments")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceOrder_GET_promotion_detailsHandler handles CommerceOrder_GET_promotion_details
func CommerceOrder_GET_promotion_detailsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "promotion_details")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceOrder_GET_promotionsHandler handles CommerceOrder_GET_promotions
func CommerceOrder_GET_promotionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "promotions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceOrder_GET_refundsHandler handles CommerceOrder_GET_refunds
func CommerceOrder_GET_refundsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "refunds")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceOrder_POST_refundsHandler handles CommerceOrder_POST_refunds
func CommerceOrder_POST_refundsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "refunds")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceOrder_GET_returnsHandler handles CommerceOrder_GET_returns
func CommerceOrder_GET_returnsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "returns")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceOrder_POST_returnsHandler handles CommerceOrder_POST_returns
func CommerceOrder_POST_returnsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "returns")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceOrder_GET_shipmentsHandler handles CommerceOrder_GET_shipments
func CommerceOrder_GET_shipmentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "shipments")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceOrder_POST_shipmentsHandler handles CommerceOrder_POST_shipments
func CommerceOrder_POST_shipmentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "shipments")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceOrder_POST_update_shipmentHandler handles CommerceOrder_POST_update_shipment
func CommerceOrder_POST_update_shipmentHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "update_shipment")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceOrder_GET_Handler handles CommerceOrder_GET_
func CommerceOrder_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceOrderTransactionDetail_GET_itemsHandler handles CommerceOrderTransactionDetail_GET_items
func CommerceOrderTransactionDetail_GET_itemsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "items")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CommerceOrderTransactionDetail_GET_tax_detailsHandler handles CommerceOrderTransactionDetail_GET_tax_details
func CommerceOrderTransactionDetail_GET_tax_detailsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "tax_details")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ContentBlockList_GET_applied_ad_accountsHandler handles ContentBlockList_GET_applied_ad_accounts
func ContentBlockList_GET_applied_ad_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "applied_ad_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ContentBlockList_GET_facebook_contentHandler handles ContentBlockList_GET_facebook_content
func ContentBlockList_GET_facebook_contentHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "facebook_content")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ContentBlockList_GET_instagram_contentHandler handles ContentBlockList_GET_instagram_content
func ContentBlockList_GET_instagram_contentHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "instagram_content")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ContentBlockList_GET_Handler handles ContentBlockList_GET_
func ContentBlockList_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CopyrightMediaMisuse_GET_Handler handles CopyrightMediaMisuse_GET_
func CopyrightMediaMisuse_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CopyrightOwnershipTransfer_GET_Handler handles CopyrightOwnershipTransfer_GET_
func CopyrightOwnershipTransfer_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CreatorAssetCreative_GET_Handler handles CreatorAssetCreative_GET_
func CreatorAssetCreative_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CreditCard_GET_Handler handles CreditCard_GET_
func CreditCard_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CustomAudience_DELETE_adaccountsHandler handles CustomAudience_DELETE_adaccounts
func CustomAudience_DELETE_adaccountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adaccounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CustomAudience_GET_adaccountsHandler handles CustomAudience_GET_adaccounts
func CustomAudience_GET_adaccountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adaccounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CustomAudience_POST_adaccountsHandler handles CustomAudience_POST_adaccounts
func CustomAudience_POST_adaccountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "adaccounts")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CustomAudience_GET_adsHandler handles CustomAudience_GET_ads
func CustomAudience_GET_adsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ads")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CustomAudience_GET_healthHandler handles CustomAudience_GET_health
func CustomAudience_GET_healthHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "health")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CustomAudience_GET_saltsHandler handles CustomAudience_GET_salts
func CustomAudience_GET_saltsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "salts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CustomAudience_POST_saltsHandler handles CustomAudience_POST_salts
func CustomAudience_POST_saltsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "salts")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CustomAudience_GET_sessionsHandler handles CustomAudience_GET_sessions
func CustomAudience_GET_sessionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "sessions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CustomAudience_GET_shared_account_infoHandler handles CustomAudience_GET_shared_account_info
func CustomAudience_GET_shared_account_infoHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "shared_account_info")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CustomAudience_DELETE_usersHandler handles CustomAudience_DELETE_users
func CustomAudience_DELETE_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "users")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CustomAudience_POST_usersHandler handles CustomAudience_POST_users
func CustomAudience_POST_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "users")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CustomAudience_POST_usersreplaceHandler handles CustomAudience_POST_usersreplace
func CustomAudience_POST_usersreplaceHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "usersreplace")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CustomAudience_DELETE_Handler handles CustomAudience_DELETE_
func CustomAudience_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CustomAudience_GET_Handler handles CustomAudience_GET_
func CustomAudience_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CustomAudience_POST_Handler handles CustomAudience_POST_
func CustomAudience_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CustomConversion_GET_statsHandler handles CustomConversion_GET_stats
func CustomConversion_GET_statsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "stats")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CustomConversion_DELETE_Handler handles CustomConversion_DELETE_
func CustomConversion_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CustomConversion_GET_Handler handles CustomConversion_GET_
func CustomConversion_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CustomConversion_POST_Handler handles CustomConversion_POST_
func CustomConversion_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Destination_GET_channels_to_integrity_statusHandler handles Destination_GET_channels_to_integrity_status
func Destination_GET_channels_to_integrity_statusHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "channels_to_integrity_status")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Destination_GET_override_detailsHandler handles Destination_GET_override_details
func Destination_GET_override_detailsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "override_details")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Destination_GET_videos_metadataHandler handles Destination_GET_videos_metadata
func Destination_GET_videos_metadataHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "videos_metadata")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Destination_GET_Handler handles Destination_GET_
func Destination_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// DynamicARMetadata_GET_Handler handles DynamicARMetadata_GET_
func DynamicARMetadata_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// DynamicContentSet_GET_Handler handles DynamicContentSet_GET_
func DynamicContentSet_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// DynamicItemDisplayBundle_GET_Handler handles DynamicItemDisplayBundle_GET_
func DynamicItemDisplayBundle_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// DynamicItemDisplayBundleFolder_GET_Handler handles DynamicItemDisplayBundleFolder_GET_
func DynamicItemDisplayBundleFolder_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// DynamicPriceConfigByDate_GET_Handler handles DynamicPriceConfigByDate_GET_
func DynamicPriceConfigByDate_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// DynamicVideoMetadata_GET_Handler handles DynamicVideoMetadata_GET_
func DynamicVideoMetadata_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// EducationExperience_GET_Handler handles EducationExperience_GET_
func EducationExperience_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Event_GET_commentsHandler handles Event_GET_comments
func Event_GET_commentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "comments")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Event_GET_feedHandler handles Event_GET_feed
func Event_GET_feedHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "feed")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Event_GET_live_videosHandler handles Event_GET_live_videos
func Event_GET_live_videosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "live_videos")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Event_POST_live_videosHandler handles Event_POST_live_videos
func Event_POST_live_videosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "live_videos")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Event_GET_photosHandler handles Event_GET_photos
func Event_GET_photosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "photos")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Event_GET_pictureHandler handles Event_GET_picture
func Event_GET_pictureHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "picture")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Event_GET_postsHandler handles Event_GET_posts
func Event_GET_postsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "posts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Event_GET_rolesHandler handles Event_GET_roles
func Event_GET_rolesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "roles")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Event_GET_ticket_tiersHandler handles Event_GET_ticket_tiers
func Event_GET_ticket_tiersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ticket_tiers")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Event_GET_videosHandler handles Event_GET_videos
func Event_GET_videosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "videos")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Event_GET_Handler handles Event_GET_
func Event_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// EventExternalTicketInfo_GET_Handler handles EventExternalTicketInfo_GET_
func EventExternalTicketInfo_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// EventRegistrationSetting_GET_Handler handles EventRegistrationSetting_GET_
func EventRegistrationSetting_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// EventSourceGroup_GET_shared_accountsHandler handles EventSourceGroup_GET_shared_accounts
func EventSourceGroup_GET_shared_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "shared_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// EventSourceGroup_POST_shared_accountsHandler handles EventSourceGroup_POST_shared_accounts
func EventSourceGroup_POST_shared_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "shared_accounts")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// EventSourceGroup_GET_Handler handles EventSourceGroup_GET_
func EventSourceGroup_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// EventSourceGroup_POST_Handler handles EventSourceGroup_POST_
func EventSourceGroup_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// EventTicketSetting_GET_Handler handles EventTicketSetting_GET_
func EventTicketSetting_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// EventTicketTier_GET_Handler handles EventTicketTier_GET_
func EventTicketTier_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// EventTour_GET_Handler handles EventTour_GET_
func EventTour_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ExtendedCredit_GET_extended_credit_invoice_groupsHandler handles ExtendedCredit_GET_extended_credit_invoice_groups
func ExtendedCredit_GET_extended_credit_invoice_groupsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "extended_credit_invoice_groups")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ExtendedCredit_POST_extended_credit_invoice_groupsHandler handles ExtendedCredit_POST_extended_credit_invoice_groups
func ExtendedCredit_POST_extended_credit_invoice_groupsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "extended_credit_invoice_groups")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ExtendedCredit_GET_owning_credit_allocation_configsHandler handles ExtendedCredit_GET_owning_credit_allocation_configs
func ExtendedCredit_GET_owning_credit_allocation_configsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "owning_credit_allocation_configs")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ExtendedCredit_POST_owning_credit_allocation_configsHandler handles ExtendedCredit_POST_owning_credit_allocation_configs
func ExtendedCredit_POST_owning_credit_allocation_configsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "owning_credit_allocation_configs")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ExtendedCredit_POST_whatsapp_credit_attachHandler handles ExtendedCredit_POST_whatsapp_credit_attach
func ExtendedCredit_POST_whatsapp_credit_attachHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "whatsapp_credit_attach")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ExtendedCredit_POST_whatsapp_credit_sharingHandler handles ExtendedCredit_POST_whatsapp_credit_sharing
func ExtendedCredit_POST_whatsapp_credit_sharingHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "whatsapp_credit_sharing")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ExtendedCredit_POST_whatsapp_credit_sharing_and_attachHandler handles ExtendedCredit_POST_whatsapp_credit_sharing_and_attach
func ExtendedCredit_POST_whatsapp_credit_sharing_and_attachHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "whatsapp_credit_sharing_and_attach")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ExtendedCredit_GET_Handler handles ExtendedCredit_GET_
func ExtendedCredit_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ExtendedCreditAllocationConfig_DELETE_Handler handles ExtendedCreditAllocationConfig_DELETE_
func ExtendedCreditAllocationConfig_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ExtendedCreditAllocationConfig_GET_Handler handles ExtendedCreditAllocationConfig_GET_
func ExtendedCreditAllocationConfig_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ExtendedCreditAllocationConfig_POST_Handler handles ExtendedCreditAllocationConfig_POST_
func ExtendedCreditAllocationConfig_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ExtendedCreditApplication_GET_Handler handles ExtendedCreditApplication_GET_
func ExtendedCreditApplication_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ExtendedCreditInvoiceGroup_DELETE_ad_accountsHandler handles ExtendedCreditInvoiceGroup_DELETE_ad_accounts
func ExtendedCreditInvoiceGroup_DELETE_ad_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ad_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ExtendedCreditInvoiceGroup_GET_ad_accountsHandler handles ExtendedCreditInvoiceGroup_GET_ad_accounts
func ExtendedCreditInvoiceGroup_GET_ad_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ad_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ExtendedCreditInvoiceGroup_POST_ad_accountsHandler handles ExtendedCreditInvoiceGroup_POST_ad_accounts
func ExtendedCreditInvoiceGroup_POST_ad_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "ad_accounts")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ExtendedCreditInvoiceGroup_DELETE_Handler handles ExtendedCreditInvoiceGroup_DELETE_
func ExtendedCreditInvoiceGroup_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ExtendedCreditInvoiceGroup_GET_Handler handles ExtendedCreditInvoiceGroup_GET_
func ExtendedCreditInvoiceGroup_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ExtendedCreditInvoiceGroup_POST_Handler handles ExtendedCreditInvoiceGroup_POST_
func ExtendedCreditInvoiceGroup_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ExternalMerchantSettings_GET_Handler handles ExternalMerchantSettings_GET_
func ExternalMerchantSettings_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// FAMEKumo_GET_Handler handles FAMEKumo_GET_
func FAMEKumo_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// FBImageCopyrightMatch_GET_Handler handles FBImageCopyrightMatch_GET_
func FBImageCopyrightMatch_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// FantasyGame_GET_Handler handles FantasyGame_GET_
func FantasyGame_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// FavoriteCatalog_GET_Handler handles FavoriteCatalog_GET_
func FavoriteCatalog_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Flight_GET_channels_to_integrity_statusHandler handles Flight_GET_channels_to_integrity_status
func Flight_GET_channels_to_integrity_statusHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "channels_to_integrity_status")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Flight_GET_override_detailsHandler handles Flight_GET_override_details
func Flight_GET_override_detailsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "override_details")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Flight_GET_videos_metadataHandler handles Flight_GET_videos_metadata
func Flight_GET_videos_metadataHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "videos_metadata")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Flight_GET_Handler handles Flight_GET_
func Flight_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Flight_POST_Handler handles Flight_POST_
func Flight_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// FranchiseProgram_GET_Handler handles FranchiseProgram_GET_
func FranchiseProgram_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// FranchiseProgramMember_GET_Handler handles FranchiseProgramMember_GET_
func FranchiseProgramMember_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// FundraiserPersonToCharity_GET_donationsHandler handles FundraiserPersonToCharity_GET_donations
func FundraiserPersonToCharity_GET_donationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "donations")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// FundraiserPersonToCharity_POST_end_fundraiserHandler handles FundraiserPersonToCharity_POST_end_fundraiser
func FundraiserPersonToCharity_POST_end_fundraiserHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "end_fundraiser")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// FundraiserPersonToCharity_GET_external_donationsHandler handles FundraiserPersonToCharity_GET_external_donations
func FundraiserPersonToCharity_GET_external_donationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "external_donations")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// FundraiserPersonToCharity_POST_external_donationsHandler handles FundraiserPersonToCharity_POST_external_donations
func FundraiserPersonToCharity_POST_external_donationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "external_donations")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// FundraiserPersonToCharity_GET_Handler handles FundraiserPersonToCharity_GET_
func FundraiserPersonToCharity_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// FundraiserPersonToCharity_POST_Handler handles FundraiserPersonToCharity_POST_
func FundraiserPersonToCharity_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// GeoGatingPolicy_GET_Handler handles GeoGatingPolicy_GET_
func GeoGatingPolicy_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Group_DELETE_adminsHandler handles Group_DELETE_admins
func Group_DELETE_adminsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "admins")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Group_POST_adminsHandler handles Group_POST_admins
func Group_POST_adminsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "admins")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Group_GET_albumsHandler handles Group_GET_albums
func Group_GET_albumsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "albums")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Group_GET_docsHandler handles Group_GET_docs
func Group_GET_docsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "docs")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Group_GET_eventsHandler handles Group_GET_events
func Group_GET_eventsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "events")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Group_GET_feedHandler handles Group_GET_feed
func Group_GET_feedHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "feed")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Group_POST_feedHandler handles Group_POST_feed
func Group_POST_feedHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "feed")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Group_GET_filesHandler handles Group_GET_files
func Group_GET_filesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "files")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Group_GET_groupsHandler handles Group_GET_groups
func Group_GET_groupsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "groups")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Group_POST_groupsHandler handles Group_POST_groups
func Group_POST_groupsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "groups")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Group_GET_live_videosHandler handles Group_GET_live_videos
func Group_GET_live_videosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "live_videos")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Group_POST_live_videosHandler handles Group_POST_live_videos
func Group_POST_live_videosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "live_videos")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Group_DELETE_membersHandler handles Group_DELETE_members
func Group_DELETE_membersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "members")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Group_POST_membersHandler handles Group_POST_members
func Group_POST_membersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "members")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Group_GET_opted_in_membersHandler handles Group_GET_opted_in_members
func Group_GET_opted_in_membersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "opted_in_members")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Group_POST_photosHandler handles Group_POST_photos
func Group_POST_photosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "photos")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Group_GET_pictureHandler handles Group_GET_picture
func Group_GET_pictureHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "picture")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Group_GET_videosHandler handles Group_GET_videos
func Group_GET_videosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "videos")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Group_POST_videosHandler handles Group_POST_videos
func Group_POST_videosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "videos")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Group_GET_Handler handles Group_GET_
func Group_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Group_POST_Handler handles Group_POST_
func Group_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// HighDemandPeriod_DELETE_Handler handles HighDemandPeriod_DELETE_
func HighDemandPeriod_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// HighDemandPeriod_GET_Handler handles HighDemandPeriod_GET_
func HighDemandPeriod_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// HighDemandPeriod_POST_Handler handles HighDemandPeriod_POST_
func HighDemandPeriod_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// HomeListing_GET_channels_to_integrity_statusHandler handles HomeListing_GET_channels_to_integrity_status
func HomeListing_GET_channels_to_integrity_statusHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "channels_to_integrity_status")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// HomeListing_GET_override_detailsHandler handles HomeListing_GET_override_details
func HomeListing_GET_override_detailsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "override_details")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// HomeListing_GET_videos_metadataHandler handles HomeListing_GET_videos_metadata
func HomeListing_GET_videos_metadataHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "videos_metadata")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// HomeListing_DELETE_Handler handles HomeListing_DELETE_
func HomeListing_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// HomeListing_GET_Handler handles HomeListing_GET_
func HomeListing_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// HomeListing_POST_Handler handles HomeListing_POST_
func HomeListing_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Hotel_GET_channels_to_integrity_statusHandler handles Hotel_GET_channels_to_integrity_status
func Hotel_GET_channels_to_integrity_statusHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "channels_to_integrity_status")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Hotel_GET_hotel_roomsHandler handles Hotel_GET_hotel_rooms
func Hotel_GET_hotel_roomsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "hotel_rooms")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Hotel_GET_override_detailsHandler handles Hotel_GET_override_details
func Hotel_GET_override_detailsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "override_details")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Hotel_GET_videos_metadataHandler handles Hotel_GET_videos_metadata
func Hotel_GET_videos_metadataHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "videos_metadata")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Hotel_DELETE_Handler handles Hotel_DELETE_
func Hotel_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Hotel_GET_Handler handles Hotel_GET_
func Hotel_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Hotel_POST_Handler handles Hotel_POST_
func Hotel_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// HotelRoom_GET_pricing_variablesHandler handles HotelRoom_GET_pricing_variables
func HotelRoom_GET_pricing_variablesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "pricing_variables")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// HotelRoom_GET_Handler handles HotelRoom_GET_
func HotelRoom_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Hours_GET_Handler handles Hours_GET_
func Hours_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGAccessTokenForIGOnlyAPI_GET_Handler handles IGAccessTokenForIGOnlyAPI_GET_
func IGAccessTokenForIGOnlyAPI_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGBCAdsPermission_GET_Handler handles IGBCAdsPermission_GET_
func IGBCAdsPermission_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGBoostMediaAd_GET_Handler handles IGBoostMediaAd_GET_
func IGBoostMediaAd_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGComment_GET_repliesHandler handles IGComment_GET_replies
func IGComment_GET_repliesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "replies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGComment_POST_repliesHandler handles IGComment_POST_replies
func IGComment_POST_repliesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "replies")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGComment_DELETE_Handler handles IGComment_DELETE_
func IGComment_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGComment_GET_Handler handles IGComment_GET_
func IGComment_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGComment_POST_Handler handles IGComment_POST_
func IGComment_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGMedia_GET_boost_ads_listHandler handles IGMedia_GET_boost_ads_list
func IGMedia_GET_boost_ads_listHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "boost_ads_list")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGMedia_GET_branded_content_partner_promoteHandler handles IGMedia_GET_branded_content_partner_promote
func IGMedia_GET_branded_content_partner_promoteHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "branded_content_partner_promote")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGMedia_POST_branded_content_partner_promoteHandler handles IGMedia_POST_branded_content_partner_promote
func IGMedia_POST_branded_content_partner_promoteHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "branded_content_partner_promote")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGMedia_GET_childrenHandler handles IGMedia_GET_children
func IGMedia_GET_childrenHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "children")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGMedia_GET_collaboratorsHandler handles IGMedia_GET_collaborators
func IGMedia_GET_collaboratorsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "collaborators")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGMedia_GET_commentsHandler handles IGMedia_GET_comments
func IGMedia_GET_commentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "comments")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGMedia_POST_commentsHandler handles IGMedia_POST_comments
func IGMedia_POST_commentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "comments")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGMedia_GET_insightsHandler handles IGMedia_GET_insights
func IGMedia_GET_insightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "insights")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGMedia_DELETE_partnership_ad_codeHandler handles IGMedia_DELETE_partnership_ad_code
func IGMedia_DELETE_partnership_ad_codeHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "partnership_ad_code")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGMedia_POST_partnership_ad_codeHandler handles IGMedia_POST_partnership_ad_code
func IGMedia_POST_partnership_ad_codeHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "partnership_ad_code")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGMedia_GET_product_tagsHandler handles IGMedia_GET_product_tags
func IGMedia_GET_product_tagsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "product_tags")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGMedia_POST_product_tagsHandler handles IGMedia_POST_product_tags
func IGMedia_POST_product_tagsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "product_tags")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGMedia_GET_Handler handles IGMedia_GET_
func IGMedia_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGMedia_POST_Handler handles IGMedia_POST_
func IGMedia_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGMediaBoostEligibilityInfo_GET_Handler handles IGMediaBoostEligibilityInfo_GET_
func IGMediaBoostEligibilityInfo_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGMediaForIGOnlyAPI_GET_childrenHandler handles IGMediaForIGOnlyAPI_GET_children
func IGMediaForIGOnlyAPI_GET_childrenHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "children")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGMediaForIGOnlyAPI_GET_commentsHandler handles IGMediaForIGOnlyAPI_GET_comments
func IGMediaForIGOnlyAPI_GET_commentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "comments")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGMediaForIGOnlyAPI_POST_commentsHandler handles IGMediaForIGOnlyAPI_POST_comments
func IGMediaForIGOnlyAPI_POST_commentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "comments")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGMediaForIGOnlyAPI_GET_insightsHandler handles IGMediaForIGOnlyAPI_GET_insights
func IGMediaForIGOnlyAPI_GET_insightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "insights")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGMediaForIGOnlyAPI_GET_Handler handles IGMediaForIGOnlyAPI_GET_
func IGMediaForIGOnlyAPI_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGMediaForIGOnlyAPI_POST_Handler handles IGMediaForIGOnlyAPI_POST_
func IGMediaForIGOnlyAPI_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGRefreshAccessTokenForIGOnlyAPI_GET_Handler handles IGRefreshAccessTokenForIGOnlyAPI_GET_
func IGRefreshAccessTokenForIGOnlyAPI_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUpcomingEvent_GET_Handler handles IGUpcomingEvent_GET_
func IGUpcomingEvent_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUpcomingEvent_POST_Handler handles IGUpcomingEvent_POST_
func IGUpcomingEvent_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_GET_agenciesHandler handles IGUser_GET_agencies
func IGUser_GET_agenciesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "agencies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_GET_authorized_adaccountsHandler handles IGUser_GET_authorized_adaccounts
func IGUser_GET_authorized_adaccountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "authorized_adaccounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_POST_authorized_adaccountsHandler handles IGUser_POST_authorized_adaccounts
func IGUser_POST_authorized_adaccountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "authorized_adaccounts")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_GET_available_catalogsHandler handles IGUser_GET_available_catalogs
func IGUser_GET_available_catalogsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "available_catalogs")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_GET_branded_content_ad_permissionsHandler handles IGUser_GET_branded_content_ad_permissions
func IGUser_GET_branded_content_ad_permissionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "branded_content_ad_permissions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_POST_branded_content_ad_permissionsHandler handles IGUser_POST_branded_content_ad_permissions
func IGUser_POST_branded_content_ad_permissionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "branded_content_ad_permissions")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_GET_branded_content_advertisable_mediasHandler handles IGUser_GET_branded_content_advertisable_medias
func IGUser_GET_branded_content_advertisable_mediasHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "branded_content_advertisable_medias")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_DELETE_branded_content_tag_approvalHandler handles IGUser_DELETE_branded_content_tag_approval
func IGUser_DELETE_branded_content_tag_approvalHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "branded_content_tag_approval")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_GET_branded_content_tag_approvalHandler handles IGUser_GET_branded_content_tag_approval
func IGUser_GET_branded_content_tag_approvalHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "branded_content_tag_approval")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_POST_branded_content_tag_approvalHandler handles IGUser_POST_branded_content_tag_approval
func IGUser_POST_branded_content_tag_approvalHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "branded_content_tag_approval")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_GET_catalog_product_searchHandler handles IGUser_GET_catalog_product_search
func IGUser_GET_catalog_product_searchHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "catalog_product_search")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_GET_connected_threads_userHandler handles IGUser_GET_connected_threads_user
func IGUser_GET_connected_threads_userHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "connected_threads_user")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_GET_content_publishing_limitHandler handles IGUser_GET_content_publishing_limit
func IGUser_GET_content_publishing_limitHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "content_publishing_limit")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_GET_datasetHandler handles IGUser_GET_dataset
func IGUser_GET_datasetHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "dataset")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_POST_datasetHandler handles IGUser_POST_dataset
func IGUser_POST_datasetHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "dataset")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_GET_insightsHandler handles IGUser_GET_insights
func IGUser_GET_insightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "insights")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_GET_instagram_backed_threads_userHandler handles IGUser_GET_instagram_backed_threads_user
func IGUser_GET_instagram_backed_threads_userHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "instagram_backed_threads_user")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_GET_live_mediaHandler handles IGUser_GET_live_media
func IGUser_GET_live_mediaHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "live_media")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_GET_mediaHandler handles IGUser_GET_media
func IGUser_GET_mediaHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "media")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_POST_mediaHandler handles IGUser_POST_media
func IGUser_POST_mediaHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "media")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_POST_media_publishHandler handles IGUser_POST_media_publish
func IGUser_POST_media_publishHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "media_publish")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_POST_mentionsHandler handles IGUser_POST_mentions
func IGUser_POST_mentionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "mentions")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_GET_notification_message_tokensHandler handles IGUser_GET_notification_message_tokens
func IGUser_GET_notification_message_tokensHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "notification_message_tokens")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_GET_product_appealHandler handles IGUser_GET_product_appeal
func IGUser_GET_product_appealHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "product_appeal")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_POST_product_appealHandler handles IGUser_POST_product_appeal
func IGUser_POST_product_appealHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "product_appeal")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_GET_recently_searched_hashtagsHandler handles IGUser_GET_recently_searched_hashtags
func IGUser_GET_recently_searched_hashtagsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "recently_searched_hashtags")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_GET_storiesHandler handles IGUser_GET_stories
func IGUser_GET_storiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "stories")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_GET_tagsHandler handles IGUser_GET_tags
func IGUser_GET_tagsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "tags")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_GET_upcoming_eventsHandler handles IGUser_GET_upcoming_events
func IGUser_GET_upcoming_eventsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "upcoming_events")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_POST_upcoming_eventsHandler handles IGUser_POST_upcoming_events
func IGUser_POST_upcoming_eventsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "upcoming_events")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_GET_welcome_message_flowsHandler handles IGUser_GET_welcome_message_flows
func IGUser_GET_welcome_message_flowsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "welcome_message_flows")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUser_GET_Handler handles IGUser_GET_
func IGUser_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserExportForCAM_GET_branded_content_mediaHandler handles IGUserExportForCAM_GET_branded_content_media
func IGUserExportForCAM_GET_branded_content_mediaHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "branded_content_media")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserExportForCAM_GET_insightsHandler handles IGUserExportForCAM_GET_insights
func IGUserExportForCAM_GET_insightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "insights")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserExportForCAM_GET_recent_mediaHandler handles IGUserExportForCAM_GET_recent_media
func IGUserExportForCAM_GET_recent_mediaHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "recent_media")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserExportForCAM_GET_Handler handles IGUserExportForCAM_GET_
func IGUserExportForCAM_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserForIGOnlyAPI_GET_business_messaging_feature_statusHandler handles IGUserForIGOnlyAPI_GET_business_messaging_feature_status
func IGUserForIGOnlyAPI_GET_business_messaging_feature_statusHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "business_messaging_feature_status")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserForIGOnlyAPI_GET_content_publishing_limitHandler handles IGUserForIGOnlyAPI_GET_content_publishing_limit
func IGUserForIGOnlyAPI_GET_content_publishing_limitHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "content_publishing_limit")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserForIGOnlyAPI_GET_conversationsHandler handles IGUserForIGOnlyAPI_GET_conversations
func IGUserForIGOnlyAPI_GET_conversationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "conversations")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserForIGOnlyAPI_GET_insightsHandler handles IGUserForIGOnlyAPI_GET_insights
func IGUserForIGOnlyAPI_GET_insightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "insights")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserForIGOnlyAPI_GET_live_mediaHandler handles IGUserForIGOnlyAPI_GET_live_media
func IGUserForIGOnlyAPI_GET_live_mediaHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "live_media")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserForIGOnlyAPI_GET_mediaHandler handles IGUserForIGOnlyAPI_GET_media
func IGUserForIGOnlyAPI_GET_mediaHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "media")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserForIGOnlyAPI_POST_mediaHandler handles IGUserForIGOnlyAPI_POST_media
func IGUserForIGOnlyAPI_POST_mediaHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "media")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserForIGOnlyAPI_POST_mediapublishHandler handles IGUserForIGOnlyAPI_POST_mediapublish
func IGUserForIGOnlyAPI_POST_mediapublishHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "mediapublish")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserForIGOnlyAPI_POST_mentionsHandler handles IGUserForIGOnlyAPI_POST_mentions
func IGUserForIGOnlyAPI_POST_mentionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "mentions")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserForIGOnlyAPI_POST_messageattachmentsHandler handles IGUserForIGOnlyAPI_POST_messageattachments
func IGUserForIGOnlyAPI_POST_messageattachmentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "messageattachments")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserForIGOnlyAPI_POST_messagesHandler handles IGUserForIGOnlyAPI_POST_messages
func IGUserForIGOnlyAPI_POST_messagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "messages")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserForIGOnlyAPI_DELETE_messenger_profileHandler handles IGUserForIGOnlyAPI_DELETE_messenger_profile
func IGUserForIGOnlyAPI_DELETE_messenger_profileHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "messenger_profile")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserForIGOnlyAPI_GET_messenger_profileHandler handles IGUserForIGOnlyAPI_GET_messenger_profile
func IGUserForIGOnlyAPI_GET_messenger_profileHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "messenger_profile")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserForIGOnlyAPI_POST_messenger_profileHandler handles IGUserForIGOnlyAPI_POST_messenger_profile
func IGUserForIGOnlyAPI_POST_messenger_profileHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "messenger_profile")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserForIGOnlyAPI_GET_storiesHandler handles IGUserForIGOnlyAPI_GET_stories
func IGUserForIGOnlyAPI_GET_storiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "stories")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserForIGOnlyAPI_DELETE_subscribed_appsHandler handles IGUserForIGOnlyAPI_DELETE_subscribed_apps
func IGUserForIGOnlyAPI_DELETE_subscribed_appsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "subscribed_apps")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserForIGOnlyAPI_GET_subscribed_appsHandler handles IGUserForIGOnlyAPI_GET_subscribed_apps
func IGUserForIGOnlyAPI_GET_subscribed_appsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "subscribed_apps")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserForIGOnlyAPI_POST_subscribed_appsHandler handles IGUserForIGOnlyAPI_POST_subscribed_apps
func IGUserForIGOnlyAPI_POST_subscribed_appsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "subscribed_apps")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserForIGOnlyAPI_GET_tagsHandler handles IGUserForIGOnlyAPI_GET_tags
func IGUserForIGOnlyAPI_GET_tagsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "tags")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserForIGOnlyAPI_DELETE_welcome_message_flowsHandler handles IGUserForIGOnlyAPI_DELETE_welcome_message_flows
func IGUserForIGOnlyAPI_DELETE_welcome_message_flowsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "welcome_message_flows")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserForIGOnlyAPI_GET_welcome_message_flowsHandler handles IGUserForIGOnlyAPI_GET_welcome_message_flows
func IGUserForIGOnlyAPI_GET_welcome_message_flowsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "welcome_message_flows")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserForIGOnlyAPI_POST_welcome_message_flowsHandler handles IGUserForIGOnlyAPI_POST_welcome_message_flows
func IGUserForIGOnlyAPI_POST_welcome_message_flowsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "welcome_message_flows")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// IGUserForIGOnlyAPI_GET_Handler handles IGUserForIGOnlyAPI_GET_
func IGUserForIGOnlyAPI_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ImageCopyright_GET_Handler handles ImageCopyright_GET_
func ImageCopyright_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ImageCopyright_POST_Handler handles ImageCopyright_POST_
func ImageCopyright_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ImageCopyrightDispute_GET_Handler handles ImageCopyrightDispute_GET_
func ImageCopyrightDispute_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ImageReferenceMatch_GET_Handler handles ImageReferenceMatch_GET_
func ImageReferenceMatch_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// InstagramBusinessAsset_GET_Handler handles InstagramBusinessAsset_GET_
func InstagramBusinessAsset_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// InstagramThread_GET_Handler handles InstagramThread_GET_
func InstagramThread_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// InstagramUser_GET_agenciesHandler handles InstagramUser_GET_agencies
func InstagramUser_GET_agenciesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "agencies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// InstagramUser_GET_ar_effectsHandler handles InstagramUser_GET_ar_effects
func InstagramUser_GET_ar_effectsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ar_effects")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// InstagramUser_GET_authorized_adaccountsHandler handles InstagramUser_GET_authorized_adaccounts
func InstagramUser_GET_authorized_adaccountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "authorized_adaccounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// InstagramUser_GET_upcoming_eventsHandler handles InstagramUser_GET_upcoming_events
func InstagramUser_GET_upcoming_eventsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "upcoming_events")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// InstagramUser_GET_Handler handles InstagramUser_GET_
func InstagramUser_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// JobOpening_GET_Handler handles JobOpening_GET_
func JobOpening_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Lead_DELETE_Handler handles Lead_DELETE_
func Lead_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Lead_GET_Handler handles Lead_GET_
func Lead_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LeadGenDataDraft_GET_Handler handles LeadGenDataDraft_GET_
func LeadGenDataDraft_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LeadGenDirectCRMIntegrationConfig_GET_Handler handles LeadGenDirectCRMIntegrationConfig_GET_
func LeadGenDirectCRMIntegrationConfig_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LeadgenForm_GET_leadsHandler handles LeadgenForm_GET_leads
func LeadgenForm_GET_leadsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "leads")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LeadgenForm_GET_test_leadsHandler handles LeadgenForm_GET_test_leads
func LeadgenForm_GET_test_leadsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "test_leads")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LeadgenForm_POST_test_leadsHandler handles LeadgenForm_POST_test_leads
func LeadgenForm_POST_test_leadsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "test_leads")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LeadgenForm_GET_Handler handles LeadgenForm_GET_
func LeadgenForm_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LeadgenForm_POST_Handler handles LeadgenForm_POST_
func LeadgenForm_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LifeEvent_GET_likesHandler handles LifeEvent_GET_likes
func LifeEvent_GET_likesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "likes")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LifeEvent_GET_Handler handles LifeEvent_GET_
func LifeEvent_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Link_POST_commentsHandler handles Link_POST_comments
func Link_POST_commentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "comments")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Link_GET_likesHandler handles Link_GET_likes
func Link_GET_likesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "likes")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Link_GET_Handler handles Link_GET_
func Link_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LiveVideo_GET_blocked_usersHandler handles LiveVideo_GET_blocked_users
func LiveVideo_GET_blocked_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "blocked_users")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LiveVideo_GET_commentsHandler handles LiveVideo_GET_comments
func LiveVideo_GET_commentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "comments")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LiveVideo_GET_crosspost_shared_pagesHandler handles LiveVideo_GET_crosspost_shared_pages
func LiveVideo_GET_crosspost_shared_pagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "crosspost_shared_pages")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LiveVideo_GET_crossposted_broadcastsHandler handles LiveVideo_GET_crossposted_broadcasts
func LiveVideo_GET_crossposted_broadcastsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "crossposted_broadcasts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LiveVideo_GET_errorsHandler handles LiveVideo_GET_errors
func LiveVideo_GET_errorsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "errors")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LiveVideo_POST_input_streamsHandler handles LiveVideo_POST_input_streams
func LiveVideo_POST_input_streamsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "input_streams")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LiveVideo_GET_pollsHandler handles LiveVideo_GET_polls
func LiveVideo_GET_pollsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "polls")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LiveVideo_POST_pollsHandler handles LiveVideo_POST_polls
func LiveVideo_POST_pollsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "polls")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LiveVideo_GET_reactionsHandler handles LiveVideo_GET_reactions
func LiveVideo_GET_reactionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "reactions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LiveVideo_DELETE_Handler handles LiveVideo_DELETE_
func LiveVideo_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LiveVideo_GET_Handler handles LiveVideo_GET_
func LiveVideo_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LiveVideo_POST_Handler handles LiveVideo_POST_
func LiveVideo_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LiveVideoAdCampaignConfig_GET_Handler handles LiveVideoAdCampaignConfig_GET_
func LiveVideoAdCampaignConfig_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LiveVideoError_GET_Handler handles LiveVideoError_GET_
func LiveVideoError_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LiveVideoInputStream_GET_Handler handles LiveVideoInputStream_GET_
func LiveVideoInputStream_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LocalServiceBusiness_GET_channels_to_integrity_statusHandler handles LocalServiceBusiness_GET_channels_to_integrity_status
func LocalServiceBusiness_GET_channels_to_integrity_statusHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "channels_to_integrity_status")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LocalServiceBusiness_GET_override_detailsHandler handles LocalServiceBusiness_GET_override_details
func LocalServiceBusiness_GET_override_detailsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "override_details")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// LocalServiceBusiness_GET_Handler handles LocalServiceBusiness_GET_
func LocalServiceBusiness_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// MailingAddress_GET_Handler handles MailingAddress_GET_
func MailingAddress_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ManagementSiteLink_GET_Handler handles ManagementSiteLink_GET_
func ManagementSiteLink_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// MeasurementReport_GET_Handler handles MeasurementReport_GET_
func MeasurementReport_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// MediaCopyrightAttribution_GET_Handler handles MediaCopyrightAttribution_GET_
func MediaCopyrightAttribution_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// MediaCopyrightUpdateRecord_GET_Handler handles MediaCopyrightUpdateRecord_GET_
func MediaCopyrightUpdateRecord_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// MediaFingerprint_GET_Handler handles MediaFingerprint_GET_
func MediaFingerprint_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// MediaFingerprint_POST_Handler handles MediaFingerprint_POST_
func MediaFingerprint_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// MediaTitle_GET_channels_to_integrity_statusHandler handles MediaTitle_GET_channels_to_integrity_status
func MediaTitle_GET_channels_to_integrity_statusHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "channels_to_integrity_status")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// MediaTitle_GET_override_detailsHandler handles MediaTitle_GET_override_details
func MediaTitle_GET_override_detailsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "override_details")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// MediaTitle_GET_videos_metadataHandler handles MediaTitle_GET_videos_metadata
func MediaTitle_GET_videos_metadataHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "videos_metadata")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// MediaTitle_DELETE_Handler handles MediaTitle_DELETE_
func MediaTitle_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// MediaTitle_GET_Handler handles MediaTitle_GET_
func MediaTitle_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// MediaTitle_POST_Handler handles MediaTitle_POST_
func MediaTitle_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// MessengerAdsPartialAutomatedStepList_GET_stepsHandler handles MessengerAdsPartialAutomatedStepList_GET_steps
func MessengerAdsPartialAutomatedStepList_GET_stepsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "steps")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// MessengerAdsPartialAutomatedStepList_GET_Handler handles MessengerAdsPartialAutomatedStepList_GET_
func MessengerAdsPartialAutomatedStepList_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// MessengerBusinessTemplate_GET_Handler handles MessengerBusinessTemplate_GET_
func MessengerBusinessTemplate_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// MessengerBusinessTemplate_POST_Handler handles MessengerBusinessTemplate_POST_
func MessengerBusinessTemplate_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// MusicVideoCopyright_GET_Handler handles MusicVideoCopyright_GET_
func MusicVideoCopyright_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// MusicWorkCopyright_GET_Handler handles MusicWorkCopyright_GET_
func MusicWorkCopyright_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OfflineConversionDataSet_GET_adaccountsHandler handles OfflineConversionDataSet_GET_adaccounts
func OfflineConversionDataSet_GET_adaccountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adaccounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OfflineConversionDataSet_GET_agenciesHandler handles OfflineConversionDataSet_GET_agencies
func OfflineConversionDataSet_GET_agenciesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "agencies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OfflineConversionDataSet_GET_audiencesHandler handles OfflineConversionDataSet_GET_audiences
func OfflineConversionDataSet_GET_audiencesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "audiences")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OfflineConversionDataSet_GET_customconversionsHandler handles OfflineConversionDataSet_GET_customconversions
func OfflineConversionDataSet_GET_customconversionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "customconversions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OfflineConversionDataSet_GET_server_events_permitted_businessHandler handles OfflineConversionDataSet_GET_server_events_permitted_business
func OfflineConversionDataSet_GET_server_events_permitted_businessHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "server_events_permitted_business")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OfflineConversionDataSet_GET_shared_accountsHandler handles OfflineConversionDataSet_GET_shared_accounts
func OfflineConversionDataSet_GET_shared_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "shared_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OfflineConversionDataSet_GET_shared_agenciesHandler handles OfflineConversionDataSet_GET_shared_agencies
func OfflineConversionDataSet_GET_shared_agenciesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "shared_agencies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OfflineConversionDataSet_GET_statsHandler handles OfflineConversionDataSet_GET_stats
func OfflineConversionDataSet_GET_statsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "stats")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OfflineConversionDataSet_GET_uploadsHandler handles OfflineConversionDataSet_GET_uploads
func OfflineConversionDataSet_GET_uploadsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "uploads")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OfflineConversionDataSet_GET_Handler handles OfflineConversionDataSet_GET_
func OfflineConversionDataSet_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OfflineConversionDataSetUpload_GET_progressHandler handles OfflineConversionDataSetUpload_GET_progress
func OfflineConversionDataSetUpload_GET_progressHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "progress")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OfflineConversionDataSetUpload_GET_pull_sessionsHandler handles OfflineConversionDataSetUpload_GET_pull_sessions
func OfflineConversionDataSetUpload_GET_pull_sessionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "pull_sessions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OfflineConversionDataSetUpload_GET_Handler handles OfflineConversionDataSetUpload_GET_
func OfflineConversionDataSetUpload_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OfflineProductItem_GET_channels_to_integrity_statusHandler handles OfflineProductItem_GET_channels_to_integrity_status
func OfflineProductItem_GET_channels_to_integrity_statusHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "channels_to_integrity_status")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OfflineProductItem_GET_override_detailsHandler handles OfflineProductItem_GET_override_details
func OfflineProductItem_GET_override_detailsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "override_details")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OfflineProductItem_GET_Handler handles OfflineProductItem_GET_
func OfflineProductItem_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OfflineTermsOfService_GET_Handler handles OfflineTermsOfService_GET_
func OfflineTermsOfService_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OffsitePixel_GET_Handler handles OffsitePixel_GET_
func OffsitePixel_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OffsiteSignalContainerBusinessObject_GET_linked_applicationHandler handles OffsiteSignalContainerBusinessObject_GET_linked_application
func OffsiteSignalContainerBusinessObject_GET_linked_applicationHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "linked_application")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OffsiteSignalContainerBusinessObject_GET_linked_pageHandler handles OffsiteSignalContainerBusinessObject_GET_linked_page
func OffsiteSignalContainerBusinessObject_GET_linked_pageHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "linked_page")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OffsiteSignalContainerBusinessObject_GET_Handler handles OffsiteSignalContainerBusinessObject_GET_
func OffsiteSignalContainerBusinessObject_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OmegaCustomerTrx_GET_campaignsHandler handles OmegaCustomerTrx_GET_campaigns
func OmegaCustomerTrx_GET_campaignsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "campaigns")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OmegaCustomerTrx_GET_Handler handles OmegaCustomerTrx_GET_
func OmegaCustomerTrx_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OpenBridgeConfiguration_DELETE_Handler handles OpenBridgeConfiguration_DELETE_
func OpenBridgeConfiguration_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OpenBridgeConfiguration_GET_Handler handles OpenBridgeConfiguration_GET_
func OpenBridgeConfiguration_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OpenBridgeConfiguration_POST_Handler handles OpenBridgeConfiguration_POST_
func OpenBridgeConfiguration_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OpenGraphContext_GET_Handler handles OpenGraphContext_GET_
func OpenGraphContext_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Organization_GET_Handler handles Organization_GET_
func Organization_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// OwnedDomain_GET_Handler handles OwnedDomain_GET_
func OwnedDomain_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_ab_testsHandler handles Page_GET_ab_tests
func Page_GET_ab_testsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ab_tests")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_ab_testsHandler handles Page_POST_ab_tests
func Page_POST_ab_testsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "ab_tests")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_acknowledge_ordersHandler handles Page_POST_acknowledge_orders
func Page_POST_acknowledge_ordersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "acknowledge_orders")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_ads_postsHandler handles Page_GET_ads_posts
func Page_GET_ads_postsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ads_posts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_DELETE_agenciesHandler handles Page_DELETE_agencies
func Page_DELETE_agenciesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "agencies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_agenciesHandler handles Page_GET_agencies
func Page_GET_agenciesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "agencies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_agenciesHandler handles Page_POST_agencies
func Page_POST_agenciesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "agencies")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_albumsHandler handles Page_GET_albums
func Page_GET_albumsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "albums")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_ar_experienceHandler handles Page_GET_ar_experience
func Page_GET_ar_experienceHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ar_experience")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_DELETE_assigned_usersHandler handles Page_DELETE_assigned_users
func Page_DELETE_assigned_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_users")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_assigned_usersHandler handles Page_GET_assigned_users
func Page_GET_assigned_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_users")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_assigned_usersHandler handles Page_POST_assigned_users
func Page_POST_assigned_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "assigned_users")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_DELETE_blockedHandler handles Page_DELETE_blocked
func Page_DELETE_blockedHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "blocked")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_blockedHandler handles Page_GET_blocked
func Page_GET_blockedHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "blocked")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_blockedHandler handles Page_POST_blocked
func Page_POST_blockedHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "blocked")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_business_dataHandler handles Page_POST_business_data
func Page_POST_business_dataHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "business_data")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_businessprojectsHandler handles Page_GET_businessprojects
func Page_GET_businessprojectsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "businessprojects")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_call_to_actionsHandler handles Page_GET_call_to_actions
func Page_GET_call_to_actionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "call_to_actions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_callsHandler handles Page_POST_calls
func Page_POST_callsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "calls")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_canvas_elementsHandler handles Page_GET_canvas_elements
func Page_GET_canvas_elementsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "canvas_elements")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_canvas_elementsHandler handles Page_POST_canvas_elements
func Page_POST_canvas_elementsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "canvas_elements")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_canvasesHandler handles Page_GET_canvases
func Page_GET_canvasesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "canvases")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_canvasesHandler handles Page_POST_canvases
func Page_POST_canvasesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "canvases")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_chat_pluginHandler handles Page_GET_chat_plugin
func Page_GET_chat_pluginHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "chat_plugin")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_commerce_merchant_settingsHandler handles Page_GET_commerce_merchant_settings
func Page_GET_commerce_merchant_settingsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "commerce_merchant_settings")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_commerce_ordersHandler handles Page_GET_commerce_orders
func Page_GET_commerce_ordersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "commerce_orders")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_commerce_payoutsHandler handles Page_GET_commerce_payouts
func Page_GET_commerce_payoutsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "commerce_payouts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_commerce_transactionsHandler handles Page_GET_commerce_transactions
func Page_GET_commerce_transactionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "commerce_transactions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_conversationsHandler handles Page_GET_conversations
func Page_GET_conversationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "conversations")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_copyright_manual_claimsHandler handles Page_POST_copyright_manual_claims
func Page_POST_copyright_manual_claimsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "copyright_manual_claims")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_crosspost_whitelisted_pagesHandler handles Page_GET_crosspost_whitelisted_pages
func Page_GET_crosspost_whitelisted_pagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "crosspost_whitelisted_pages")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_ctx_optimization_eligibilityHandler handles Page_GET_ctx_optimization_eligibility
func Page_GET_ctx_optimization_eligibilityHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ctx_optimization_eligibility")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_custom_labelsHandler handles Page_GET_custom_labels
func Page_GET_custom_labelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "custom_labels")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_custom_labelsHandler handles Page_POST_custom_labels
func Page_POST_custom_labelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "custom_labels")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_DELETE_custom_user_settingsHandler handles Page_DELETE_custom_user_settings
func Page_DELETE_custom_user_settingsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "custom_user_settings")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_custom_user_settingsHandler handles Page_GET_custom_user_settings
func Page_GET_custom_user_settingsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "custom_user_settings")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_custom_user_settingsHandler handles Page_POST_custom_user_settings
func Page_POST_custom_user_settingsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "custom_user_settings")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_datasetHandler handles Page_GET_dataset
func Page_GET_datasetHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "dataset")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_datasetHandler handles Page_POST_dataset
func Page_POST_datasetHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "dataset")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_eventsHandler handles Page_GET_events
func Page_GET_eventsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "events")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_extend_thread_controlHandler handles Page_POST_extend_thread_control
func Page_POST_extend_thread_controlHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "extend_thread_control")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_fantasy_gamesHandler handles Page_GET_fantasy_games
func Page_GET_fantasy_gamesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "fantasy_games")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_feedHandler handles Page_GET_feed
func Page_GET_feedHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "feed")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_feedHandler handles Page_POST_feed
func Page_POST_feedHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "feed")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_global_brand_childrenHandler handles Page_GET_global_brand_children
func Page_GET_global_brand_childrenHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "global_brand_children")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_image_copyrightsHandler handles Page_GET_image_copyrights
func Page_GET_image_copyrightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "image_copyrights")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_image_copyrightsHandler handles Page_POST_image_copyrights
func Page_POST_image_copyrightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "image_copyrights")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_indexed_videosHandler handles Page_GET_indexed_videos
func Page_GET_indexed_videosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "indexed_videos")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_insightsHandler handles Page_GET_insights
func Page_GET_insightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "insights")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_instagram_accountsHandler handles Page_GET_instagram_accounts
func Page_GET_instagram_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "instagram_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_leadgen_formsHandler handles Page_GET_leadgen_forms
func Page_GET_leadgen_formsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "leadgen_forms")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_leadgen_formsHandler handles Page_POST_leadgen_forms
func Page_POST_leadgen_formsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "leadgen_forms")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_likesHandler handles Page_GET_likes
func Page_GET_likesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "likes")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_live_videosHandler handles Page_GET_live_videos
func Page_GET_live_videosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "live_videos")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_live_videosHandler handles Page_POST_live_videos
func Page_POST_live_videosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "live_videos")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_DELETE_locationsHandler handles Page_DELETE_locations
func Page_DELETE_locationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "locations")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_locationsHandler handles Page_GET_locations
func Page_GET_locationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "locations")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_locationsHandler handles Page_POST_locations
func Page_POST_locationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "locations")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_media_fingerprintsHandler handles Page_GET_media_fingerprints
func Page_GET_media_fingerprintsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "media_fingerprints")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_media_fingerprintsHandler handles Page_POST_media_fingerprints
func Page_POST_media_fingerprintsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "media_fingerprints")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_message_attachmentsHandler handles Page_POST_message_attachments
func Page_POST_message_attachmentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "message_attachments")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_DELETE_message_templatesHandler handles Page_DELETE_message_templates
func Page_DELETE_message_templatesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "message_templates")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_message_templatesHandler handles Page_GET_message_templates
func Page_GET_message_templatesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "message_templates")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_message_templatesHandler handles Page_POST_message_templates
func Page_POST_message_templatesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "message_templates")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_messagesHandler handles Page_POST_messages
func Page_POST_messagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "messages")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_messaging_feature_reviewHandler handles Page_GET_messaging_feature_review
func Page_GET_messaging_feature_reviewHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "messaging_feature_review")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_messenger_call_settingsHandler handles Page_GET_messenger_call_settings
func Page_GET_messenger_call_settingsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "messenger_call_settings")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_messenger_call_settingsHandler handles Page_POST_messenger_call_settings
func Page_POST_messenger_call_settingsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "messenger_call_settings")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_messenger_lead_formsHandler handles Page_GET_messenger_lead_forms
func Page_GET_messenger_lead_formsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "messenger_lead_forms")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_messenger_lead_formsHandler handles Page_POST_messenger_lead_forms
func Page_POST_messenger_lead_formsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "messenger_lead_forms")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_DELETE_messenger_profileHandler handles Page_DELETE_messenger_profile
func Page_DELETE_messenger_profileHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "messenger_profile")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_messenger_profileHandler handles Page_GET_messenger_profile
func Page_GET_messenger_profileHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "messenger_profile")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_messenger_profileHandler handles Page_POST_messenger_profile
func Page_POST_messenger_profileHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "messenger_profile")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_moderate_conversationsHandler handles Page_POST_moderate_conversations
func Page_POST_moderate_conversationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "moderate_conversations")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_nlp_configsHandler handles Page_POST_nlp_configs
func Page_POST_nlp_configsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "nlp_configs")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_notification_message_tokensHandler handles Page_GET_notification_message_tokens
func Page_GET_notification_message_tokensHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "notification_message_tokens")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_notification_messages_dev_supportHandler handles Page_POST_notification_messages_dev_support
func Page_POST_notification_messages_dev_supportHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "notification_messages_dev_support")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_page_backed_instagram_accountsHandler handles Page_GET_page_backed_instagram_accounts
func Page_GET_page_backed_instagram_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "page_backed_instagram_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_page_backed_instagram_accountsHandler handles Page_POST_page_backed_instagram_accounts
func Page_POST_page_backed_instagram_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "page_backed_instagram_accounts")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_page_whatsapp_number_verificationHandler handles Page_POST_page_whatsapp_number_verification
func Page_POST_page_whatsapp_number_verificationHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "page_whatsapp_number_verification")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_pass_thread_controlHandler handles Page_POST_pass_thread_control
func Page_POST_pass_thread_controlHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "pass_thread_control")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_personasHandler handles Page_GET_personas
func Page_GET_personasHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "personas")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_personasHandler handles Page_POST_personas
func Page_POST_personasHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "personas")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_photo_storiesHandler handles Page_POST_photo_stories
func Page_POST_photo_storiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "photo_stories")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_photosHandler handles Page_GET_photos
func Page_GET_photosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "photos")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_photosHandler handles Page_POST_photos
func Page_POST_photosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "photos")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_pictureHandler handles Page_GET_picture
func Page_GET_pictureHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "picture")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_pictureHandler handles Page_POST_picture
func Page_POST_pictureHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "picture")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_postsHandler handles Page_GET_posts
func Page_GET_postsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "posts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_product_catalogsHandler handles Page_GET_product_catalogs
func Page_GET_product_catalogsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "product_catalogs")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_published_postsHandler handles Page_GET_published_posts
func Page_GET_published_postsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "published_posts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_release_thread_controlHandler handles Page_POST_release_thread_control
func Page_POST_release_thread_controlHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "release_thread_control")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_request_thread_controlHandler handles Page_POST_request_thread_control
func Page_POST_request_thread_controlHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "request_thread_control")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_rolesHandler handles Page_GET_roles
func Page_GET_rolesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "roles")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_rtb_dynamic_postsHandler handles Page_GET_rtb_dynamic_posts
func Page_GET_rtb_dynamic_postsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "rtb_dynamic_posts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_scheduled_postsHandler handles Page_GET_scheduled_posts
func Page_GET_scheduled_postsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "scheduled_posts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_secondary_receiversHandler handles Page_GET_secondary_receivers
func Page_GET_secondary_receiversHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "secondary_receivers")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_settingsHandler handles Page_GET_settings
func Page_GET_settingsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "settings")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_settingsHandler handles Page_POST_settings
func Page_POST_settingsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "settings")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_shop_setup_statusHandler handles Page_GET_shop_setup_status
func Page_GET_shop_setup_statusHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "shop_setup_status")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_store_locationsHandler handles Page_GET_store_locations
func Page_GET_store_locationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "store_locations")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_storiesHandler handles Page_GET_stories
func Page_GET_storiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "stories")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_DELETE_subscribed_appsHandler handles Page_DELETE_subscribed_apps
func Page_DELETE_subscribed_appsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "subscribed_apps")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_subscribed_appsHandler handles Page_GET_subscribed_apps
func Page_GET_subscribed_appsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "subscribed_apps")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_subscribed_appsHandler handles Page_POST_subscribed_apps
func Page_POST_subscribed_appsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "subscribed_apps")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_tabsHandler handles Page_GET_tabs
func Page_GET_tabsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "tabs")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_taggedHandler handles Page_GET_tagged
func Page_GET_taggedHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "tagged")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_take_thread_controlHandler handles Page_POST_take_thread_control
func Page_POST_take_thread_controlHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "take_thread_control")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_thread_ownerHandler handles Page_GET_thread_owner
func Page_GET_thread_ownerHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "thread_owner")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_threadsHandler handles Page_GET_threads
func Page_GET_threadsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "threads")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_unlink_accountsHandler handles Page_POST_unlink_accounts
func Page_POST_unlink_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "unlink_accounts")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_video_copyright_rulesHandler handles Page_GET_video_copyright_rules
func Page_GET_video_copyright_rulesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "video_copyright_rules")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_video_copyright_rulesHandler handles Page_POST_video_copyright_rules
func Page_POST_video_copyright_rulesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "video_copyright_rules")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_video_copyrightsHandler handles Page_POST_video_copyrights
func Page_POST_video_copyrightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "video_copyrights")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_video_listsHandler handles Page_GET_video_lists
func Page_GET_video_listsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "video_lists")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_video_reelsHandler handles Page_GET_video_reels
func Page_GET_video_reelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "video_reels")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_video_reelsHandler handles Page_POST_video_reels
func Page_POST_video_reelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "video_reels")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_video_storiesHandler handles Page_POST_video_stories
func Page_POST_video_storiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "video_stories")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_videosHandler handles Page_GET_videos
func Page_GET_videosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "videos")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_videosHandler handles Page_POST_videos
func Page_POST_videosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "videos")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_visitor_postsHandler handles Page_GET_visitor_posts
func Page_GET_visitor_postsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "visitor_posts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_DELETE_welcome_message_flowsHandler handles Page_DELETE_welcome_message_flows
func Page_DELETE_welcome_message_flowsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "welcome_message_flows")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_welcome_message_flowsHandler handles Page_GET_welcome_message_flows
func Page_GET_welcome_message_flowsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "welcome_message_flows")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_welcome_message_flowsHandler handles Page_POST_welcome_message_flows
func Page_POST_welcome_message_flowsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "welcome_message_flows")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_GET_Handler handles Page_GET_
func Page_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Page_POST_Handler handles Page_POST_
func Page_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PageBroadcast_GET_Handler handles PageBroadcast_GET_
func PageBroadcast_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PageCallToAction_DELETE_Handler handles PageCallToAction_DELETE_
func PageCallToAction_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PageCallToAction_GET_Handler handles PageCallToAction_GET_
func PageCallToAction_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PageCallToAction_POST_Handler handles PageCallToAction_POST_
func PageCallToAction_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PageInsightsAsyncExportRun_GET_Handler handles PageInsightsAsyncExportRun_GET_
func PageInsightsAsyncExportRun_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PageLeadsAccessConfig_GET_Handler handles PageLeadsAccessConfig_GET_
func PageLeadsAccessConfig_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PagePost_GET_attachmentsHandler handles PagePost_GET_attachments
func PagePost_GET_attachmentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "attachments")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PagePost_GET_commentsHandler handles PagePost_GET_comments
func PagePost_GET_commentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "comments")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PagePost_POST_commentsHandler handles PagePost_POST_comments
func PagePost_POST_commentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "comments")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PagePost_GET_dynamic_postsHandler handles PagePost_GET_dynamic_posts
func PagePost_GET_dynamic_postsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "dynamic_posts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PagePost_GET_insightsHandler handles PagePost_GET_insights
func PagePost_GET_insightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "insights")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PagePost_DELETE_likesHandler handles PagePost_DELETE_likes
func PagePost_DELETE_likesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "likes")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PagePost_GET_likesHandler handles PagePost_GET_likes
func PagePost_GET_likesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "likes")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PagePost_POST_likesHandler handles PagePost_POST_likes
func PagePost_POST_likesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "likes")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PagePost_GET_reactionsHandler handles PagePost_GET_reactions
func PagePost_GET_reactionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "reactions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PagePost_GET_sharedpostsHandler handles PagePost_GET_sharedposts
func PagePost_GET_sharedpostsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "sharedposts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PagePost_GET_sponsor_tagsHandler handles PagePost_GET_sponsor_tags
func PagePost_GET_sponsor_tagsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "sponsor_tags")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PagePost_GET_toHandler handles PagePost_GET_to
func PagePost_GET_toHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "to")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PagePost_DELETE_Handler handles PagePost_DELETE_
func PagePost_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PagePost_GET_Handler handles PagePost_GET_
func PagePost_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PagePost_POST_Handler handles PagePost_POST_
func PagePost_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PagePostExperiment_GET_video_insightsHandler handles PagePostExperiment_GET_video_insights
func PagePostExperiment_GET_video_insightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "video_insights")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PagePostExperiment_DELETE_Handler handles PagePostExperiment_DELETE_
func PagePostExperiment_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PagePostExperiment_GET_Handler handles PagePostExperiment_GET_
func PagePostExperiment_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PageUpcomingChange_GET_Handler handles PageUpcomingChange_GET_
func PageUpcomingChange_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PageUserMessageThreadLabel_DELETE_labelHandler handles PageUserMessageThreadLabel_DELETE_label
func PageUserMessageThreadLabel_DELETE_labelHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "label")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PageUserMessageThreadLabel_POST_labelHandler handles PageUserMessageThreadLabel_POST_label
func PageUserMessageThreadLabel_POST_labelHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "label")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PageUserMessageThreadLabel_DELETE_Handler handles PageUserMessageThreadLabel_DELETE_
func PageUserMessageThreadLabel_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PageUserMessageThreadLabel_GET_Handler handles PageUserMessageThreadLabel_GET_
func PageUserMessageThreadLabel_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PartnerAccountLinking_GET_Handler handles PartnerAccountLinking_GET_
func PartnerAccountLinking_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PartnerIntegrationLinked_GET_Handler handles PartnerIntegrationLinked_GET_
func PartnerIntegrationLinked_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PartnerStudy_GET_Handler handles PartnerStudy_GET_
func PartnerStudy_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PaymentEnginePayment_POST_disputeHandler handles PaymentEnginePayment_POST_dispute
func PaymentEnginePayment_POST_disputeHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "dispute")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PaymentEnginePayment_POST_refundsHandler handles PaymentEnginePayment_POST_refunds
func PaymentEnginePayment_POST_refundsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "refunds")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PaymentEnginePayment_GET_Handler handles PaymentEnginePayment_GET_
func PaymentEnginePayment_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PaymentSubscription_GET_Handler handles PaymentSubscription_GET_
func PaymentSubscription_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Persona_DELETE_Handler handles Persona_DELETE_
func Persona_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Persona_GET_Handler handles Persona_GET_
func Persona_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PersonalAdsPersona_GET_Handler handles PersonalAdsPersona_GET_
func PersonalAdsPersona_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Photo_GET_commentsHandler handles Photo_GET_comments
func Photo_GET_commentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "comments")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Photo_POST_commentsHandler handles Photo_POST_comments
func Photo_POST_commentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "comments")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Photo_GET_insightsHandler handles Photo_GET_insights
func Photo_GET_insightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "insights")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Photo_GET_likesHandler handles Photo_GET_likes
func Photo_GET_likesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "likes")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Photo_POST_likesHandler handles Photo_POST_likes
func Photo_POST_likesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "likes")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Photo_GET_sponsor_tagsHandler handles Photo_GET_sponsor_tags
func Photo_GET_sponsor_tagsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "sponsor_tags")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Photo_DELETE_Handler handles Photo_DELETE_
func Photo_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Photo_GET_Handler handles Photo_GET_
func Photo_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Place_GET_Handler handles Place_GET_
func Place_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PlaceTag_GET_Handler handles PlaceTag_GET_
func PlaceTag_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PlaceTopic_GET_Handler handles PlaceTopic_GET_
func PlaceTopic_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PlayableContent_GET_Handler handles PlayableContent_GET_
func PlayableContent_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Post_GET_attachmentsHandler handles Post_GET_attachments
func Post_GET_attachmentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "attachments")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Post_GET_commentsHandler handles Post_GET_comments
func Post_GET_commentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "comments")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Post_POST_commentsHandler handles Post_POST_comments
func Post_POST_commentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "comments")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Post_GET_dynamic_postsHandler handles Post_GET_dynamic_posts
func Post_GET_dynamic_postsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "dynamic_posts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Post_GET_insightsHandler handles Post_GET_insights
func Post_GET_insightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "insights")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Post_DELETE_likesHandler handles Post_DELETE_likes
func Post_DELETE_likesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "likes")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Post_POST_likesHandler handles Post_POST_likes
func Post_POST_likesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "likes")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Post_GET_reactionsHandler handles Post_GET_reactions
func Post_GET_reactionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "reactions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Post_GET_sharedpostsHandler handles Post_GET_sharedposts
func Post_GET_sharedpostsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "sharedposts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Post_GET_sponsor_tagsHandler handles Post_GET_sponsor_tags
func Post_GET_sponsor_tagsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "sponsor_tags")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Post_GET_toHandler handles Post_GET_to
func Post_GET_toHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "to")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Post_DELETE_Handler handles Post_DELETE_
func Post_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Post_GET_Handler handles Post_GET_
func Post_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Post_POST_Handler handles Post_POST_
func Post_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PrivateLiftStudyInstance_GET_Handler handles PrivateLiftStudyInstance_GET_
func PrivateLiftStudyInstance_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PrivateLiftStudyInstance_POST_Handler handles PrivateLiftStudyInstance_POST_
func PrivateLiftStudyInstance_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_DELETE_agenciesHandler handles ProductCatalog_DELETE_agencies
func ProductCatalog_DELETE_agenciesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "agencies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_agenciesHandler handles ProductCatalog_GET_agencies
func ProductCatalog_GET_agenciesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "agencies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_POST_agenciesHandler handles ProductCatalog_POST_agencies
func ProductCatalog_POST_agenciesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "agencies")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_DELETE_assigned_usersHandler handles ProductCatalog_DELETE_assigned_users
func ProductCatalog_DELETE_assigned_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_users")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_assigned_usersHandler handles ProductCatalog_GET_assigned_users
func ProductCatalog_GET_assigned_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_users")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_POST_assigned_usersHandler handles ProductCatalog_POST_assigned_users
func ProductCatalog_POST_assigned_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "assigned_users")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_automotive_modelsHandler handles ProductCatalog_GET_automotive_models
func ProductCatalog_GET_automotive_modelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "automotive_models")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_POST_batchHandler handles ProductCatalog_POST_batch
func ProductCatalog_POST_batchHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "batch")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_POST_catalog_storeHandler handles ProductCatalog_POST_catalog_store
func ProductCatalog_POST_catalog_storeHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "catalog_store")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_categoriesHandler handles ProductCatalog_GET_categories
func ProductCatalog_GET_categoriesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "categories")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_POST_categoriesHandler handles ProductCatalog_POST_categories
func ProductCatalog_POST_categoriesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "categories")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_check_batch_request_statusHandler handles ProductCatalog_GET_check_batch_request_status
func ProductCatalog_GET_check_batch_request_statusHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "check_batch_request_status")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_check_marketplace_partner_sellers_statusHandler handles ProductCatalog_GET_check_marketplace_partner_sellers_status
func ProductCatalog_GET_check_marketplace_partner_sellers_statusHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "check_marketplace_partner_sellers_status")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_collaborative_ads_lsb_image_bankHandler handles ProductCatalog_GET_collaborative_ads_lsb_image_bank
func ProductCatalog_GET_collaborative_ads_lsb_image_bankHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "collaborative_ads_lsb_image_bank")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_collaborative_ads_share_settingsHandler handles ProductCatalog_GET_collaborative_ads_share_settings
func ProductCatalog_GET_collaborative_ads_share_settingsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "collaborative_ads_share_settings")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_POST_cpas_lsb_image_bankHandler handles ProductCatalog_POST_cpas_lsb_image_bank
func ProductCatalog_POST_cpas_lsb_image_bankHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "cpas_lsb_image_bank")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_creator_asset_creativesHandler handles ProductCatalog_GET_creator_asset_creatives
func ProductCatalog_GET_creator_asset_creativesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "creator_asset_creatives")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_data_sourcesHandler handles ProductCatalog_GET_data_sources
func ProductCatalog_GET_data_sourcesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "data_sources")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_destinationsHandler handles ProductCatalog_GET_destinations
func ProductCatalog_GET_destinationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "destinations")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_diagnosticsHandler handles ProductCatalog_GET_diagnostics
func ProductCatalog_GET_diagnosticsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "diagnostics")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_event_statsHandler handles ProductCatalog_GET_event_stats
func ProductCatalog_GET_event_statsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "event_stats")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_DELETE_external_event_sourcesHandler handles ProductCatalog_DELETE_external_event_sources
func ProductCatalog_DELETE_external_event_sourcesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "external_event_sources")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_external_event_sourcesHandler handles ProductCatalog_GET_external_event_sources
func ProductCatalog_GET_external_event_sourcesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "external_event_sources")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_POST_external_event_sourcesHandler handles ProductCatalog_POST_external_event_sources
func ProductCatalog_POST_external_event_sourcesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "external_event_sources")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_flightsHandler handles ProductCatalog_GET_flights
func ProductCatalog_GET_flightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "flights")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_POST_geolocated_items_batchHandler handles ProductCatalog_POST_geolocated_items_batch
func ProductCatalog_POST_geolocated_items_batchHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "geolocated_items_batch")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_home_listingsHandler handles ProductCatalog_GET_home_listings
func ProductCatalog_GET_home_listingsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "home_listings")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_POST_home_listingsHandler handles ProductCatalog_POST_home_listings
func ProductCatalog_POST_home_listingsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "home_listings")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_hotel_rooms_batchHandler handles ProductCatalog_GET_hotel_rooms_batch
func ProductCatalog_GET_hotel_rooms_batchHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "hotel_rooms_batch")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_POST_hotel_rooms_batchHandler handles ProductCatalog_POST_hotel_rooms_batch
func ProductCatalog_POST_hotel_rooms_batchHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "hotel_rooms_batch")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_hotelsHandler handles ProductCatalog_GET_hotels
func ProductCatalog_GET_hotelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "hotels")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_POST_hotelsHandler handles ProductCatalog_POST_hotels
func ProductCatalog_POST_hotelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "hotels")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_POST_items_batchHandler handles ProductCatalog_POST_items_batch
func ProductCatalog_POST_items_batchHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "items_batch")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_POST_localized_items_batchHandler handles ProductCatalog_POST_localized_items_batch
func ProductCatalog_POST_localized_items_batchHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "localized_items_batch")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_POST_marketplace_partner_sellers_detailsHandler handles ProductCatalog_POST_marketplace_partner_sellers_details
func ProductCatalog_POST_marketplace_partner_sellers_detailsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "marketplace_partner_sellers_details")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_POST_marketplace_partner_signalsHandler handles ProductCatalog_POST_marketplace_partner_signals
func ProductCatalog_POST_marketplace_partner_signalsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "marketplace_partner_signals")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_pricing_variables_batchHandler handles ProductCatalog_GET_pricing_variables_batch
func ProductCatalog_GET_pricing_variables_batchHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "pricing_variables_batch")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_POST_pricing_variables_batchHandler handles ProductCatalog_POST_pricing_variables_batch
func ProductCatalog_POST_pricing_variables_batchHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "pricing_variables_batch")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_product_feedsHandler handles ProductCatalog_GET_product_feeds
func ProductCatalog_GET_product_feedsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "product_feeds")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_POST_product_feedsHandler handles ProductCatalog_POST_product_feeds
func ProductCatalog_POST_product_feedsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "product_feeds")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_product_groupsHandler handles ProductCatalog_GET_product_groups
func ProductCatalog_GET_product_groupsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "product_groups")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_POST_product_groupsHandler handles ProductCatalog_POST_product_groups
func ProductCatalog_POST_product_groupsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "product_groups")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_product_setsHandler handles ProductCatalog_GET_product_sets
func ProductCatalog_GET_product_setsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "product_sets")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_POST_product_setsHandler handles ProductCatalog_POST_product_sets
func ProductCatalog_POST_product_setsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "product_sets")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_product_sets_batchHandler handles ProductCatalog_GET_product_sets_batch
func ProductCatalog_GET_product_sets_batchHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "product_sets_batch")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_productsHandler handles ProductCatalog_GET_products
func ProductCatalog_GET_productsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "products")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_POST_productsHandler handles ProductCatalog_POST_products
func ProductCatalog_POST_productsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "products")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_POST_update_generated_image_configHandler handles ProductCatalog_POST_update_generated_image_config
func ProductCatalog_POST_update_generated_image_configHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "update_generated_image_config")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_vehicle_offersHandler handles ProductCatalog_GET_vehicle_offers
func ProductCatalog_GET_vehicle_offersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "vehicle_offers")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_vehiclesHandler handles ProductCatalog_GET_vehicles
func ProductCatalog_GET_vehiclesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "vehicles")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_POST_vehiclesHandler handles ProductCatalog_POST_vehicles
func ProductCatalog_POST_vehiclesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "vehicles")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_version_configsHandler handles ProductCatalog_GET_version_configs
func ProductCatalog_GET_version_configsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "version_configs")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_POST_version_items_batchHandler handles ProductCatalog_POST_version_items_batch
func ProductCatalog_POST_version_items_batchHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "version_items_batch")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_DELETE_Handler handles ProductCatalog_DELETE_
func ProductCatalog_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_GET_Handler handles ProductCatalog_GET_
func ProductCatalog_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalog_POST_Handler handles ProductCatalog_POST_
func ProductCatalog_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductCatalogLocalizationSettings_GET_Handler handles ProductCatalogLocalizationSettings_GET_
func ProductCatalogLocalizationSettings_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductDeliveryPreference_GET_Handler handles ProductDeliveryPreference_GET_
func ProductDeliveryPreference_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeed_GET_automotive_modelsHandler handles ProductFeed_GET_automotive_models
func ProductFeed_GET_automotive_modelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "automotive_models")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeed_GET_destinationsHandler handles ProductFeed_GET_destinations
func ProductFeed_GET_destinationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "destinations")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeed_GET_flightsHandler handles ProductFeed_GET_flights
func ProductFeed_GET_flightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "flights")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeed_GET_home_listingsHandler handles ProductFeed_GET_home_listings
func ProductFeed_GET_home_listingsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "home_listings")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeed_GET_hotelsHandler handles ProductFeed_GET_hotels
func ProductFeed_GET_hotelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "hotels")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeed_GET_media_titlesHandler handles ProductFeed_GET_media_titles
func ProductFeed_GET_media_titlesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "media_titles")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeed_GET_productsHandler handles ProductFeed_GET_products
func ProductFeed_GET_productsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "products")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeed_GET_rulesHandler handles ProductFeed_GET_rules
func ProductFeed_GET_rulesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "rules")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeed_POST_rulesHandler handles ProductFeed_POST_rules
func ProductFeed_POST_rulesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "rules")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeed_POST_supplementary_feed_assocsHandler handles ProductFeed_POST_supplementary_feed_assocs
func ProductFeed_POST_supplementary_feed_assocsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "supplementary_feed_assocs")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeed_GET_upload_schedulesHandler handles ProductFeed_GET_upload_schedules
func ProductFeed_GET_upload_schedulesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "upload_schedules")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeed_POST_upload_schedulesHandler handles ProductFeed_POST_upload_schedules
func ProductFeed_POST_upload_schedulesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "upload_schedules")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeed_GET_uploadsHandler handles ProductFeed_GET_uploads
func ProductFeed_GET_uploadsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "uploads")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeed_POST_uploadsHandler handles ProductFeed_POST_uploads
func ProductFeed_POST_uploadsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "uploads")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeed_GET_vehicle_offersHandler handles ProductFeed_GET_vehicle_offers
func ProductFeed_GET_vehicle_offersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "vehicle_offers")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeed_GET_vehiclesHandler handles ProductFeed_GET_vehicles
func ProductFeed_GET_vehiclesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "vehicles")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeed_DELETE_Handler handles ProductFeed_DELETE_
func ProductFeed_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeed_GET_Handler handles ProductFeed_GET_
func ProductFeed_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeed_POST_Handler handles ProductFeed_POST_
func ProductFeed_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeedRule_DELETE_Handler handles ProductFeedRule_DELETE_
func ProductFeedRule_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeedRule_GET_Handler handles ProductFeedRule_GET_
func ProductFeedRule_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeedRule_POST_Handler handles ProductFeedRule_POST_
func ProductFeedRule_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeedSchedule_GET_Handler handles ProductFeedSchedule_GET_
func ProductFeedSchedule_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeedUpload_POST_error_reportHandler handles ProductFeedUpload_POST_error_report
func ProductFeedUpload_POST_error_reportHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "error_report")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeedUpload_GET_errorsHandler handles ProductFeedUpload_GET_errors
func ProductFeedUpload_GET_errorsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "errors")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeedUpload_GET_Handler handles ProductFeedUpload_GET_
func ProductFeedUpload_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeedUploadError_GET_samplesHandler handles ProductFeedUploadError_GET_samples
func ProductFeedUploadError_GET_samplesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "samples")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeedUploadError_GET_suggested_rulesHandler handles ProductFeedUploadError_GET_suggested_rules
func ProductFeedUploadError_GET_suggested_rulesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "suggested_rules")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeedUploadError_GET_Handler handles ProductFeedUploadError_GET_
func ProductFeedUploadError_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductFeedUploadErrorSample_GET_Handler handles ProductFeedUploadErrorSample_GET_
func ProductFeedUploadErrorSample_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductGroup_GET_productsHandler handles ProductGroup_GET_products
func ProductGroup_GET_productsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "products")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductGroup_POST_productsHandler handles ProductGroup_POST_products
func ProductGroup_POST_productsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "products")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductGroup_DELETE_Handler handles ProductGroup_DELETE_
func ProductGroup_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductGroup_GET_Handler handles ProductGroup_GET_
func ProductGroup_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductGroup_POST_Handler handles ProductGroup_POST_
func ProductGroup_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductImage_GET_Handler handles ProductImage_GET_
func ProductImage_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductItem_GET_channels_to_integrity_statusHandler handles ProductItem_GET_channels_to_integrity_status
func ProductItem_GET_channels_to_integrity_statusHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "channels_to_integrity_status")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductItem_GET_override_detailsHandler handles ProductItem_GET_override_details
func ProductItem_GET_override_detailsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "override_details")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductItem_GET_product_setsHandler handles ProductItem_GET_product_sets
func ProductItem_GET_product_setsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "product_sets")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductItem_GET_videos_metadataHandler handles ProductItem_GET_videos_metadata
func ProductItem_GET_videos_metadataHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "videos_metadata")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductItem_DELETE_Handler handles ProductItem_DELETE_
func ProductItem_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductItem_GET_Handler handles ProductItem_GET_
func ProductItem_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductItem_POST_Handler handles ProductItem_POST_
func ProductItem_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductItemLocalInfo_GET_Handler handles ProductItemLocalInfo_GET_
func ProductItemLocalInfo_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductItemOffer_GET_Handler handles ProductItemOffer_GET_
func ProductItemOffer_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductSet_GET_automotive_modelsHandler handles ProductSet_GET_automotive_models
func ProductSet_GET_automotive_modelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "automotive_models")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductSet_GET_destinationsHandler handles ProductSet_GET_destinations
func ProductSet_GET_destinationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "destinations")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductSet_GET_flightsHandler handles ProductSet_GET_flights
func ProductSet_GET_flightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "flights")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductSet_GET_home_listingsHandler handles ProductSet_GET_home_listings
func ProductSet_GET_home_listingsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "home_listings")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductSet_GET_hotelsHandler handles ProductSet_GET_hotels
func ProductSet_GET_hotelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "hotels")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductSet_GET_media_titlesHandler handles ProductSet_GET_media_titles
func ProductSet_GET_media_titlesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "media_titles")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductSet_GET_productsHandler handles ProductSet_GET_products
func ProductSet_GET_productsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "products")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductSet_GET_vehicle_offersHandler handles ProductSet_GET_vehicle_offers
func ProductSet_GET_vehicle_offersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "vehicle_offers")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductSet_GET_vehiclesHandler handles ProductSet_GET_vehicles
func ProductSet_GET_vehiclesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "vehicles")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductSet_DELETE_Handler handles ProductSet_DELETE_
func ProductSet_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductSet_GET_Handler handles ProductSet_GET_
func ProductSet_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductSet_POST_Handler handles ProductSet_POST_
func ProductSet_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ProductSetUsage_GET_Handler handles ProductSetUsage_GET_
func ProductSetUsage_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Profile_GET_pictureHandler handles Profile_GET_picture
func Profile_GET_pictureHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "picture")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Profile_GET_Handler handles Profile_GET_
func Profile_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PublisherBlockList_POST_append_publisher_urlsHandler handles PublisherBlockList_POST_append_publisher_urls
func PublisherBlockList_POST_append_publisher_urlsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "append_publisher_urls")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PublisherBlockList_GET_paged_web_publishersHandler handles PublisherBlockList_GET_paged_web_publishers
func PublisherBlockList_GET_paged_web_publishersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "paged_web_publishers")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PublisherBlockList_DELETE_Handler handles PublisherBlockList_DELETE_
func PublisherBlockList_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PublisherBlockList_GET_Handler handles PublisherBlockList_GET_
func PublisherBlockList_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PublisherBlockList_POST_Handler handles PublisherBlockList_POST_
func PublisherBlockList_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// PublisherWhiteList_GET_Handler handles PublisherWhiteList_GET_
func PublisherWhiteList_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// RTBDynamicPost_GET_commentsHandler handles RTBDynamicPost_GET_comments
func RTBDynamicPost_GET_commentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "comments")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// RTBDynamicPost_GET_likesHandler handles RTBDynamicPost_GET_likes
func RTBDynamicPost_GET_likesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "likes")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// RTBDynamicPost_GET_Handler handles RTBDynamicPost_GET_
func RTBDynamicPost_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ReachFrequencyPrediction_GET_Handler handles ReachFrequencyPrediction_GET_
func ReachFrequencyPrediction_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ResearchPollStudy_GET_Handler handles ResearchPollStudy_GET_
func ResearchPollStudy_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// RightsManagerDataExport_GET_Handler handles RightsManagerDataExport_GET_
func RightsManagerDataExport_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Robot_GET_Handler handles Robot_GET_
func Robot_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// SavedAudience_GET_Handler handles SavedAudience_GET_
func SavedAudience_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// SavedMessageResponse_GET_Handler handles SavedMessageResponse_GET_
func SavedMessageResponse_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ShadowIGHashtag_GET_recent_mediaHandler handles ShadowIGHashtag_GET_recent_media
func ShadowIGHashtag_GET_recent_mediaHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "recent_media")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ShadowIGHashtag_GET_top_mediaHandler handles ShadowIGHashtag_GET_top_media
func ShadowIGHashtag_GET_top_mediaHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "top_media")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ShadowIGHashtag_GET_Handler handles ShadowIGHashtag_GET_
func ShadowIGHashtag_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ShadowIGMediaBuilder_GET_Handler handles ShadowIGMediaBuilder_GET_
func ShadowIGMediaBuilder_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Shop_GET_Handler handles Shop_GET_
func Shop_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// SignalsIWLExtractor_GET_Handler handles SignalsIWLExtractor_GET_
func SignalsIWLExtractor_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// SiteLink_GET_Handler handles SiteLink_GET_
func SiteLink_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// SlicedEventSourceGroup_GET_Handler handles SlicedEventSourceGroup_GET_
func SlicedEventSourceGroup_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Status_POST_likesHandler handles Status_POST_likes
func Status_POST_likesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "likes")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Status_GET_Handler handles Status_GET_
func Status_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// StoreCatalogSettings_DELETE_Handler handles StoreCatalogSettings_DELETE_
func StoreCatalogSettings_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// StoreCatalogSettings_GET_Handler handles StoreCatalogSettings_GET_
func StoreCatalogSettings_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// StoreLocation_GET_Handler handles StoreLocation_GET_
func StoreLocation_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Stories_GET_insightsHandler handles Stories_GET_insights
func Stories_GET_insightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "insights")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Stories_GET_Handler handles Stories_GET_
func Stories_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// SystemUser_GET_assigned_ad_accountsHandler handles SystemUser_GET_assigned_ad_accounts
func SystemUser_GET_assigned_ad_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_ad_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// SystemUser_GET_assigned_business_asset_groupsHandler handles SystemUser_GET_assigned_business_asset_groups
func SystemUser_GET_assigned_business_asset_groupsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_business_asset_groups")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// SystemUser_GET_assigned_pagesHandler handles SystemUser_GET_assigned_pages
func SystemUser_GET_assigned_pagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_pages")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// SystemUser_GET_assigned_product_catalogsHandler handles SystemUser_GET_assigned_product_catalogs
func SystemUser_GET_assigned_product_catalogsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_product_catalogs")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// SystemUser_GET_Handler handles SystemUser_GET_
func SystemUser_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ThirdPartyMeasurementReportDataset_GET_Handler handles ThirdPartyMeasurementReportDataset_GET_
func ThirdPartyMeasurementReportDataset_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ThirdPartyPartnerLiftRequest_GET_Handler handles ThirdPartyPartnerLiftRequest_GET_
func ThirdPartyPartnerLiftRequest_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ThirdPartyPartnerPanelRequest_GET_Handler handles ThirdPartyPartnerPanelRequest_GET_
func ThirdPartyPartnerPanelRequest_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ThirdPartyPartnerPanelScheduled_GET_Handler handles ThirdPartyPartnerPanelScheduled_GET_
func ThirdPartyPartnerPanelScheduled_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ThirdPartyPartnerViewabilityRequest_GET_Handler handles ThirdPartyPartnerViewabilityRequest_GET_
func ThirdPartyPartnerViewabilityRequest_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// TransactableItem_GET_channels_to_integrity_statusHandler handles TransactableItem_GET_channels_to_integrity_status
func TransactableItem_GET_channels_to_integrity_statusHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "channels_to_integrity_status")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// TransactableItem_GET_override_detailsHandler handles TransactableItem_GET_override_details
func TransactableItem_GET_override_detailsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "override_details")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// TransactableItem_GET_Handler handles TransactableItem_GET_
func TransactableItem_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// URL_GET_Handler handles URL_GET_
func URL_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// URL_POST_Handler handles URL_POST_
func URL_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// UnifiedThread_GET_messagesHandler handles UnifiedThread_GET_messages
func UnifiedThread_GET_messagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "messages")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// UnifiedThread_GET_Handler handles UnifiedThread_GET_
func UnifiedThread_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_DELETE_access_tokensHandler handles User_DELETE_access_tokens
func User_DELETE_access_tokensHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "access_tokens")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_POST_access_tokensHandler handles User_POST_access_tokens
func User_POST_access_tokensHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "access_tokens")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_accountsHandler handles User_GET_accounts
func User_GET_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_POST_accountsHandler handles User_POST_accounts
func User_POST_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "accounts")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_ad_studiesHandler handles User_GET_ad_studies
func User_GET_ad_studiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ad_studies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_POST_ad_studiesHandler handles User_POST_ad_studies
func User_POST_ad_studiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "ad_studies")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_adaccountsHandler handles User_GET_adaccounts
func User_GET_adaccountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adaccounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_albumsHandler handles User_GET_albums
func User_GET_albumsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "albums")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_POST_applicationsHandler handles User_POST_applications
func User_POST_applicationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "applications")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_apprequestformerrecipientsHandler handles User_GET_apprequestformerrecipients
func User_GET_apprequestformerrecipientsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "apprequestformerrecipients")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_apprequestsHandler handles User_GET_apprequests
func User_GET_apprequestsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "apprequests")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_assigned_ad_accountsHandler handles User_GET_assigned_ad_accounts
func User_GET_assigned_ad_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_ad_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_assigned_applicationsHandler handles User_GET_assigned_applications
func User_GET_assigned_applicationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_applications")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_assigned_business_asset_groupsHandler handles User_GET_assigned_business_asset_groups
func User_GET_assigned_business_asset_groupsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_business_asset_groups")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_assigned_pagesHandler handles User_GET_assigned_pages
func User_GET_assigned_pagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_pages")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_assigned_product_catalogsHandler handles User_GET_assigned_product_catalogs
func User_GET_assigned_product_catalogsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_product_catalogs")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_avatarsHandler handles User_GET_avatars
func User_GET_avatarsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "avatars")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_business_usersHandler handles User_GET_business_users
func User_GET_business_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "business_users")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_DELETE_businessesHandler handles User_DELETE_businesses
func User_DELETE_businessesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "businesses")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_businessesHandler handles User_GET_businesses
func User_GET_businessesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "businesses")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_POST_businessesHandler handles User_POST_businesses
func User_POST_businessesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "businesses")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_conversationsHandler handles User_GET_conversations
func User_GET_conversationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "conversations")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_custom_labelsHandler handles User_GET_custom_labels
func User_GET_custom_labelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "custom_labels")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_eventsHandler handles User_GET_events
func User_GET_eventsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "events")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_feedHandler handles User_GET_feed
func User_GET_feedHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "feed")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_POST_feedHandler handles User_POST_feed
func User_POST_feedHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "feed")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_friendsHandler handles User_GET_friends
func User_GET_friendsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "friends")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_fundraisersHandler handles User_GET_fundraisers
func User_GET_fundraisersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "fundraisers")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_POST_fundraisersHandler handles User_POST_fundraisers
func User_POST_fundraisersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "fundraisers")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_groupsHandler handles User_GET_groups
func User_GET_groupsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "groups")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_ids_for_appsHandler handles User_GET_ids_for_apps
func User_GET_ids_for_appsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ids_for_apps")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_ids_for_businessHandler handles User_GET_ids_for_business
func User_GET_ids_for_businessHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ids_for_business")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_ids_for_pagesHandler handles User_GET_ids_for_pages
func User_GET_ids_for_pagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ids_for_pages")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_likesHandler handles User_GET_likes
func User_GET_likesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "likes")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_live_videosHandler handles User_GET_live_videos
func User_GET_live_videosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "live_videos")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_POST_live_videosHandler handles User_POST_live_videos
func User_POST_live_videosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "live_videos")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_POST_messenger_desktop_performance_tracesHandler handles User_POST_messenger_desktop_performance_traces
func User_POST_messenger_desktop_performance_tracesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "messenger_desktop_performance_traces")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_POST_messenger_kids_accounts_unread_badgeHandler handles User_POST_messenger_kids_accounts_unread_badge
func User_POST_messenger_kids_accounts_unread_badgeHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "messenger_kids_accounts_unread_badge")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_musicHandler handles User_GET_music
func User_GET_musicHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "music")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_POST_notificationsHandler handles User_POST_notifications
func User_POST_notificationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "notifications")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_payment_transactionsHandler handles User_GET_payment_transactions
func User_GET_payment_transactionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "payment_transactions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_DELETE_permissionsHandler handles User_DELETE_permissions
func User_DELETE_permissionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "permissions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_permissionsHandler handles User_GET_permissions
func User_GET_permissionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "permissions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_personal_ad_accountsHandler handles User_GET_personal_ad_accounts
func User_GET_personal_ad_accountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "personal_ad_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_photosHandler handles User_GET_photos
func User_GET_photosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "photos")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_POST_photosHandler handles User_POST_photos
func User_POST_photosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "photos")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_pictureHandler handles User_GET_picture
func User_GET_pictureHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "picture")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_postsHandler handles User_GET_posts
func User_GET_postsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "posts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_rich_media_documentsHandler handles User_GET_rich_media_documents
func User_GET_rich_media_documentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "rich_media_documents")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_POST_staging_resourcesHandler handles User_POST_staging_resources
func User_POST_staging_resourcesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "staging_resources")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_videosHandler handles User_GET_videos
func User_GET_videosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "videos")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_POST_videosHandler handles User_POST_videos
func User_POST_videosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "videos")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_DELETE_Handler handles User_DELETE_
func User_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_GET_Handler handles User_GET_
func User_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// User_POST_Handler handles User_POST_
func User_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// UserContext_GET_Handler handles UserContext_GET_
func UserContext_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// UserPageOneTimeOptInTokenSettings_GET_Handler handles UserPageOneTimeOptInTokenSettings_GET_
func UserPageOneTimeOptInTokenSettings_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Vehicle_GET_channels_to_integrity_statusHandler handles Vehicle_GET_channels_to_integrity_status
func Vehicle_GET_channels_to_integrity_statusHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "channels_to_integrity_status")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Vehicle_GET_override_detailsHandler handles Vehicle_GET_override_details
func Vehicle_GET_override_detailsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "override_details")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Vehicle_GET_videos_metadataHandler handles Vehicle_GET_videos_metadata
func Vehicle_GET_videos_metadataHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "videos_metadata")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Vehicle_GET_Handler handles Vehicle_GET_
func Vehicle_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// Vehicle_POST_Handler handles Vehicle_POST_
func Vehicle_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// VehicleOffer_GET_channels_to_integrity_statusHandler handles VehicleOffer_GET_channels_to_integrity_status
func VehicleOffer_GET_channels_to_integrity_statusHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "channels_to_integrity_status")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// VehicleOffer_GET_override_detailsHandler handles VehicleOffer_GET_override_details
func VehicleOffer_GET_override_detailsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "override_details")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// VehicleOffer_GET_videos_metadataHandler handles VehicleOffer_GET_videos_metadata
func VehicleOffer_GET_videos_metadataHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "videos_metadata")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// VehicleOffer_GET_Handler handles VehicleOffer_GET_
func VehicleOffer_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// VideoCopyright_GET_update_recordsHandler handles VideoCopyright_GET_update_records
func VideoCopyright_GET_update_recordsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "update_records")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// VideoCopyright_GET_Handler handles VideoCopyright_GET_
func VideoCopyright_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// VideoCopyright_POST_Handler handles VideoCopyright_POST_
func VideoCopyright_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// VideoCopyrightMatch_GET_Handler handles VideoCopyrightMatch_GET_
func VideoCopyrightMatch_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// VideoCopyrightRule_GET_Handler handles VideoCopyrightRule_GET_
func VideoCopyrightRule_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// VideoList_GET_videosHandler handles VideoList_GET_videos
func VideoList_GET_videosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "videos")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// VideoList_GET_Handler handles VideoList_GET_
func VideoList_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// VideoPoll_GET_poll_optionsHandler handles VideoPoll_GET_poll_options
func VideoPoll_GET_poll_optionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "poll_options")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// VideoPoll_GET_Handler handles VideoPoll_GET_
func VideoPoll_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// VideoPoll_POST_Handler handles VideoPoll_POST_
func VideoPoll_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// VideoTextQuestion_GET_Handler handles VideoTextQuestion_GET_
func VideoTextQuestion_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WearableDevicePublicKey_GET_Handler handles WearableDevicePublicKey_GET_
func WearableDevicePublicKey_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WebsiteCreativeAssetSource_GET_Handler handles WebsiteCreativeAssetSource_GET_
func WebsiteCreativeAssetSource_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WebsiteCreativeAssetSuggestions_GET_Handler handles WebsiteCreativeAssetSuggestions_GET_
func WebsiteCreativeAssetSuggestions_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WebsiteCreativeInfo_GET_Handler handles WebsiteCreativeInfo_GET_
func WebsiteCreativeInfo_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_GET_activitiesHandler handles WhatsAppBusinessAccount_GET_activities
func WhatsAppBusinessAccount_GET_activitiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "activities")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_DELETE_assigned_usersHandler handles WhatsAppBusinessAccount_DELETE_assigned_users
func WhatsAppBusinessAccount_DELETE_assigned_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_users")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_GET_assigned_usersHandler handles WhatsAppBusinessAccount_GET_assigned_users
func WhatsAppBusinessAccount_GET_assigned_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_users")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_POST_assigned_usersHandler handles WhatsAppBusinessAccount_POST_assigned_users
func WhatsAppBusinessAccount_POST_assigned_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "assigned_users")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_GET_audiencesHandler handles WhatsAppBusinessAccount_GET_audiences
func WhatsAppBusinessAccount_GET_audiencesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "audiences")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_GET_call_analyticsHandler handles WhatsAppBusinessAccount_GET_call_analytics
func WhatsAppBusinessAccount_GET_call_analyticsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "call_analytics")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_GET_conversation_analyticsHandler handles WhatsAppBusinessAccount_GET_conversation_analytics
func WhatsAppBusinessAccount_GET_conversation_analyticsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "conversation_analytics")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_GET_datasetHandler handles WhatsAppBusinessAccount_GET_dataset
func WhatsAppBusinessAccount_GET_datasetHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "dataset")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_POST_datasetHandler handles WhatsAppBusinessAccount_POST_dataset
func WhatsAppBusinessAccount_POST_datasetHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "dataset")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_GET_flowsHandler handles WhatsAppBusinessAccount_GET_flows
func WhatsAppBusinessAccount_GET_flowsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "flows")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_POST_flowsHandler handles WhatsAppBusinessAccount_POST_flows
func WhatsAppBusinessAccount_POST_flowsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "flows")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_POST_generate_payment_configuration_oauth_linkHandler handles WhatsAppBusinessAccount_POST_generate_payment_configuration_oauth_link
func WhatsAppBusinessAccount_POST_generate_payment_configuration_oauth_linkHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "generate_payment_configuration_oauth_link")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_GET_message_campaignsHandler handles WhatsAppBusinessAccount_GET_message_campaigns
func WhatsAppBusinessAccount_GET_message_campaignsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "message_campaigns")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_GET_message_template_previewsHandler handles WhatsAppBusinessAccount_GET_message_template_previews
func WhatsAppBusinessAccount_GET_message_template_previewsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "message_template_previews")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_DELETE_message_templatesHandler handles WhatsAppBusinessAccount_DELETE_message_templates
func WhatsAppBusinessAccount_DELETE_message_templatesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "message_templates")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_GET_message_templatesHandler handles WhatsAppBusinessAccount_GET_message_templates
func WhatsAppBusinessAccount_GET_message_templatesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "message_templates")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_POST_message_templatesHandler handles WhatsAppBusinessAccount_POST_message_templates
func WhatsAppBusinessAccount_POST_message_templatesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "message_templates")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_POST_migrate_flowsHandler handles WhatsAppBusinessAccount_POST_migrate_flows
func WhatsAppBusinessAccount_POST_migrate_flowsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "migrate_flows")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_POST_migrate_message_templatesHandler handles WhatsAppBusinessAccount_POST_migrate_message_templates
func WhatsAppBusinessAccount_POST_migrate_message_templatesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "migrate_message_templates")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_DELETE_payment_configurationHandler handles WhatsAppBusinessAccount_DELETE_payment_configuration
func WhatsAppBusinessAccount_DELETE_payment_configurationHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "payment_configuration")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_GET_payment_configurationHandler handles WhatsAppBusinessAccount_GET_payment_configuration
func WhatsAppBusinessAccount_GET_payment_configurationHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "payment_configuration")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_POST_payment_configurationHandler handles WhatsAppBusinessAccount_POST_payment_configuration
func WhatsAppBusinessAccount_POST_payment_configurationHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "payment_configuration")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_GET_payment_configurationsHandler handles WhatsAppBusinessAccount_GET_payment_configurations
func WhatsAppBusinessAccount_GET_payment_configurationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "payment_configurations")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_GET_phone_numbersHandler handles WhatsAppBusinessAccount_GET_phone_numbers
func WhatsAppBusinessAccount_GET_phone_numbersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "phone_numbers")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_POST_phone_numbersHandler handles WhatsAppBusinessAccount_POST_phone_numbers
func WhatsAppBusinessAccount_POST_phone_numbersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "phone_numbers")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_GET_pricing_analyticsHandler handles WhatsAppBusinessAccount_GET_pricing_analytics
func WhatsAppBusinessAccount_GET_pricing_analyticsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "pricing_analytics")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_DELETE_product_catalogsHandler handles WhatsAppBusinessAccount_DELETE_product_catalogs
func WhatsAppBusinessAccount_DELETE_product_catalogsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "product_catalogs")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_GET_product_catalogsHandler handles WhatsAppBusinessAccount_GET_product_catalogs
func WhatsAppBusinessAccount_GET_product_catalogsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "product_catalogs")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_POST_product_catalogsHandler handles WhatsAppBusinessAccount_POST_product_catalogs
func WhatsAppBusinessAccount_POST_product_catalogsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "product_catalogs")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_GET_schedulesHandler handles WhatsAppBusinessAccount_GET_schedules
func WhatsAppBusinessAccount_GET_schedulesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "schedules")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_POST_set_obo_mobility_intentHandler handles WhatsAppBusinessAccount_POST_set_obo_mobility_intent
func WhatsAppBusinessAccount_POST_set_obo_mobility_intentHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "set_obo_mobility_intent")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_POST_set_solution_migration_intentHandler handles WhatsAppBusinessAccount_POST_set_solution_migration_intent
func WhatsAppBusinessAccount_POST_set_solution_migration_intentHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "set_solution_migration_intent")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_GET_solutionsHandler handles WhatsAppBusinessAccount_GET_solutions
func WhatsAppBusinessAccount_GET_solutionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "solutions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_DELETE_subscribed_appsHandler handles WhatsAppBusinessAccount_DELETE_subscribed_apps
func WhatsAppBusinessAccount_DELETE_subscribed_appsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "subscribed_apps")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_GET_subscribed_appsHandler handles WhatsAppBusinessAccount_GET_subscribed_apps
func WhatsAppBusinessAccount_GET_subscribed_appsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "subscribed_apps")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_POST_subscribed_appsHandler handles WhatsAppBusinessAccount_POST_subscribed_apps
func WhatsAppBusinessAccount_POST_subscribed_appsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "subscribed_apps")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_GET_template_analyticsHandler handles WhatsAppBusinessAccount_GET_template_analytics
func WhatsAppBusinessAccount_GET_template_analyticsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "template_analytics")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_GET_template_group_analyticsHandler handles WhatsAppBusinessAccount_GET_template_group_analytics
func WhatsAppBusinessAccount_GET_template_group_analyticsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "template_group_analytics")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_GET_template_groupsHandler handles WhatsAppBusinessAccount_GET_template_groups
func WhatsAppBusinessAccount_GET_template_groupsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "template_groups")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_POST_template_groupsHandler handles WhatsAppBusinessAccount_POST_template_groups
func WhatsAppBusinessAccount_POST_template_groupsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "template_groups")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_GET_template_performance_metricsHandler handles WhatsAppBusinessAccount_GET_template_performance_metrics
func WhatsAppBusinessAccount_GET_template_performance_metricsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "template_performance_metrics")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_POST_upsert_message_templatesHandler handles WhatsAppBusinessAccount_POST_upsert_message_templates
func WhatsAppBusinessAccount_POST_upsert_message_templatesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "upsert_message_templates")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_GET_welcome_message_sequencesHandler handles WhatsAppBusinessAccount_GET_welcome_message_sequences
func WhatsAppBusinessAccount_GET_welcome_message_sequencesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "welcome_message_sequences")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_GET_Handler handles WhatsAppBusinessAccount_GET_
func WhatsAppBusinessAccount_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessAccount_POST_Handler handles WhatsAppBusinessAccount_POST_
func WhatsAppBusinessAccount_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessPreVerifiedPhoneNumber_GET_partnersHandler handles WhatsAppBusinessPreVerifiedPhoneNumber_GET_partners
func WhatsAppBusinessPreVerifiedPhoneNumber_GET_partnersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "partners")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessPreVerifiedPhoneNumber_POST_request_codeHandler handles WhatsAppBusinessPreVerifiedPhoneNumber_POST_request_code
func WhatsAppBusinessPreVerifiedPhoneNumber_POST_request_codeHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "request_code")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessPreVerifiedPhoneNumber_POST_verify_codeHandler handles WhatsAppBusinessPreVerifiedPhoneNumber_POST_verify_code
func WhatsAppBusinessPreVerifiedPhoneNumber_POST_verify_codeHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "verify_code")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessPreVerifiedPhoneNumber_DELETE_Handler handles WhatsAppBusinessPreVerifiedPhoneNumber_DELETE_
func WhatsAppBusinessPreVerifiedPhoneNumber_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessPreVerifiedPhoneNumber_GET_Handler handles WhatsAppBusinessPreVerifiedPhoneNumber_GET_
func WhatsAppBusinessPreVerifiedPhoneNumber_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessProfile_GET_Handler handles WhatsAppBusinessProfile_GET_
func WhatsAppBusinessProfile_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhatsAppBusinessProfile_POST_Handler handles WhatsAppBusinessProfile_POST_
func WhatsAppBusinessProfile_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WhitehatFBDLRun_GET_Handler handles WhitehatFBDLRun_GET_
func WhitehatFBDLRun_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WifiInformation_GET_Handler handles WifiInformation_GET_
func WifiInformation_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WithAsset3D_GET_Handler handles WithAsset3D_GET_
func WithAsset3D_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WoodhengePurchasedPAYGReceipt_GET_Handler handles WoodhengePurchasedPAYGReceipt_GET_
func WoodhengePurchasedPAYGReceipt_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WoodhengeSupporter_GET_Handler handles WoodhengeSupporter_GET_
func WoodhengeSupporter_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WorkExperience_GET_Handler handles WorkExperience_GET_
func WorkExperience_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WorkSkill_GET_usersHandler handles WorkSkill_GET_users
func WorkSkill_GET_usersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "users")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// WorkSkill_GET_Handler handles WorkSkill_GET_
func WorkSkill_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return nil, fmt.Errorf("id is required")
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return nil, err
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// RegisterTools registers all generated tools with the MCP server
func RegisterTools(s *server.MCPServer) error {

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ALMAdAccountInfo_GET_",
			"GET  for ALMAdAccountInfo. Returns ALMAdAccountInfo",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ALMAdAccountInfo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ALMAdAccountInfo_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ALMEndAdvertiserInfo_GET_",
			"GET  for ALMEndAdvertiserInfo. Returns ALMEndAdvertiserInfo",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ALMEndAdvertiserInfo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ALMEndAdvertiserInfo_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ALMEvent_GET_",
			"GET  for ALMEvent. Returns ALMEvent",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ALMEvent ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ALMEvent_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AREffect_GET_",
			"GET  for AREffect. Returns AREffect",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AREffect ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AREffect_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Ad_GET_adcreatives",
			"GET adcreatives for Ad. Returns AdCreative",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Ad_GET_adcreativesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Ad_POST_adlabels",
			"POST adlabels for Ad. Returns Ad. Parameters: adlabels (list<Object>) [required], execution_options (list<adgroupadlabels_execution_options_enum_param>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"adlabels":{"description":"adlabels","items":{"additionalProperties":true,"type":"object"},"type":"array"},"execution_options":{"description":"execution_options","items":{"type":"string"},"type":"array"}},"required":["adlabels"],"type":"object"}`),
		),
		Ad_POST_adlabelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Ad_GET_adrules_governed",
			"GET adrules_governed for Ad. Returns AdRule. Parameters: pass_evaluation (bool)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"pass_evaluation":{"description":"pass_evaluation","type":"boolean"}},"type":"object"}`),
		),
		Ad_GET_adrules_governedHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Ad_GET_copies",
			"GET copies for Ad. Returns Ad. Parameters: date_preset (adgroupcopies_date_preset_enum_param), effective_status (list<string>), time_range (map), updated_since (int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"date_preset":{"description":"date_preset (enum: adgroupcopies_date_preset_enum_param)","type":"string"},"effective_status":{"description":"effective_status","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Ad ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"time_range":{"description":"time_range","type":"string"},"updated_since":{"description":"updated_since","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Ad_GET_copiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Ad_POST_copies",
			"POST copies for Ad. Returns Ad. Parameters: adset_id (string), creative_parameters (AdCreative), rename_options (Object), status_option (adgroupcopies_status_option_enum_param)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"adset_id":{"description":"adset_id","type":"string"},"creative_parameters":{"description":"creative_parameters","type":"string"},"id":{"description":"Ad ID","type":"string"},"rename_options":{"additionalProperties":true,"description":"rename_options","type":"object"},"status_option":{"description":"status_option (enum: adgroupcopies_status_option_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Ad_POST_copiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Ad_GET_insights",
			"GET insights for Ad. Returns AdsInsights. Parameters: action_attribution_windows (list<adgroupinsights_action_attribution_windows_enum_param>), action_breakdowns (list<adgroupinsights_action_breakdowns_enum_param>), action_report_time (adgroupinsights_action_report_time_enum_param), breakdowns (list<adgroupinsights_breakdowns_enum_param>), date_preset (adgroupinsights_date_preset_enum_param), default_summary (bool), export_columns (list<string>), export_format (string), export_name (string), fields (list<string>), filtering (list<Object>), level (adgroupinsights_level_enum_param), limit (int), product_id_limit (int), sort (list<string>), summary (list<string>), summary_action_breakdowns (list<adgroupinsights_summary_action_breakdowns_enum_param>), time_increment (string), time_range (map), time_ranges (list<map>), use_account_attribution_setting (bool), use_unified_attribution_setting (bool)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"action_attribution_windows":{"description":"action_attribution_windows","items":{"type":"string"},"type":"array"},"action_breakdowns":{"description":"action_breakdowns","items":{"type":"string"},"type":"array"},"action_report_time":{"description":"action_report_time (enum: adgroupinsights_action_report_time_enum_param)","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"breakdowns":{"description":"breakdowns","items":{"type":"string"},"type":"array"},"date_preset":{"description":"date_preset (enum: adgroupinsights_date_preset_enum_param)","type":"string"},"default_summary":{"description":"default_summary","type":"boolean"},"export_columns":{"description":"export_columns","items":{"type":"string"},"type":"array"},"export_format":{"description":"export_format","type":"string"},"export_name":{"description":"export_name","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filtering":{"description":"filtering","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"Ad ID","type":"string"},"level":{"description":"level (enum: adgroupinsights_level_enum_param)","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"product_id_limit":{"description":"product_id_limit","type":"integer"},"sort":{"description":"sort","items":{"type":"string"},"type":"array"},"summary":{"description":"summary","items":{"type":"string"},"type":"array"},"summary_action_breakdowns":{"description":"summary_action_breakdowns","items":{"type":"string"},"type":"array"},"time_increment":{"description":"time_increment","type":"string"},"time_range":{"description":"time_range","type":"string"},"time_ranges":{"description":"time_ranges","items":{"additionalProperties":true,"type":"object"},"type":"array"},"use_account_attribution_setting":{"description":"use_account_attribution_setting","type":"boolean"},"use_unified_attribution_setting":{"description":"use_unified_attribution_setting","type":"boolean"}},"required":["id"],"type":"object"}`),
		),
		Ad_GET_insightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Ad_POST_insights",
			"POST insights for Ad. Returns AdReportRun. Parameters: action_attribution_windows (list<adgroupinsights_action_attribution_windows_enum_param>), action_breakdowns (list<adgroupinsights_action_breakdowns_enum_param>), action_report_time (adgroupinsights_action_report_time_enum_param), breakdowns (list<adgroupinsights_breakdowns_enum_param>), date_preset (adgroupinsights_date_preset_enum_param), default_summary (bool), export_columns (list<string>), export_format (string), export_name (string), fields (list<string>), filtering (list<Object>), level (adgroupinsights_level_enum_param), limit (int), product_id_limit (int), sort (list<string>), summary (list<string>), summary_action_breakdowns (list<adgroupinsights_summary_action_breakdowns_enum_param>), time_increment (string), time_range (map), time_ranges (list<map>), use_account_attribution_setting (bool), use_unified_attribution_setting (bool)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"action_attribution_windows":{"description":"action_attribution_windows","items":{"type":"string"},"type":"array"},"action_breakdowns":{"description":"action_breakdowns","items":{"type":"string"},"type":"array"},"action_report_time":{"description":"action_report_time (enum: adgroupinsights_action_report_time_enum_param)","type":"string"},"breakdowns":{"description":"breakdowns","items":{"type":"string"},"type":"array"},"date_preset":{"description":"date_preset (enum: adgroupinsights_date_preset_enum_param)","type":"string"},"default_summary":{"description":"default_summary","type":"boolean"},"export_columns":{"description":"export_columns","items":{"type":"string"},"type":"array"},"export_format":{"description":"export_format","type":"string"},"export_name":{"description":"export_name","type":"string"},"fields":{"description":"fields","items":{"type":"string"},"type":"array"},"filtering":{"description":"filtering","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"Ad ID","type":"string"},"level":{"description":"level (enum: adgroupinsights_level_enum_param)","type":"string"},"limit":{"description":"limit","type":"integer"},"product_id_limit":{"description":"product_id_limit","type":"integer"},"sort":{"description":"sort","items":{"type":"string"},"type":"array"},"summary":{"description":"summary","items":{"type":"string"},"type":"array"},"summary_action_breakdowns":{"description":"summary_action_breakdowns","items":{"type":"string"},"type":"array"},"time_increment":{"description":"time_increment","type":"string"},"time_range":{"description":"time_range","type":"string"},"time_ranges":{"description":"time_ranges","items":{"additionalProperties":true,"type":"object"},"type":"array"},"use_account_attribution_setting":{"description":"use_account_attribution_setting","type":"boolean"},"use_unified_attribution_setting":{"description":"use_unified_attribution_setting","type":"boolean"}},"required":["id"],"type":"object"}`),
		),
		Ad_POST_insightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Ad_GET_leads",
			"GET leads for Ad. Returns Lead",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Ad_GET_leadsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Ad_GET_previews",
			"GET previews for Ad. Returns AdPreview. Parameters: ad_format (adgrouppreviews_ad_format_enum_param) [required], creative_feature (adgrouppreviews_creative_feature_enum_param), dynamic_asset_label (string), dynamic_creative_spec (Object), dynamic_customization (Object), end_date (datetime), height (unsigned int), locale (string), place_page_id (int), post (Object), product_item_ids (list<string>), render_type (adgrouppreviews_render_type_enum_param), start_date (datetime), width (unsigned int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"ad_format":{"description":"ad_format (enum: adgrouppreviews_ad_format_enum_param)","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"creative_feature":{"description":"creative_feature (enum: adgrouppreviews_creative_feature_enum_param)","type":"string"},"dynamic_asset_label":{"description":"dynamic_asset_label","type":"string"},"dynamic_creative_spec":{"additionalProperties":true,"description":"dynamic_creative_spec","type":"object"},"dynamic_customization":{"additionalProperties":true,"description":"dynamic_customization","type":"object"},"end_date":{"description":"end_date","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"height":{"description":"height","type":"integer"},"id":{"description":"Ad ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"locale":{"description":"locale","type":"string"},"place_page_id":{"description":"place_page_id","type":"integer"},"post":{"additionalProperties":true,"description":"post","type":"object"},"product_item_ids":{"description":"product_item_ids","items":{"type":"string"},"type":"array"},"render_type":{"description":"render_type (enum: adgrouppreviews_render_type_enum_param)","type":"string"},"start_date":{"description":"start_date","type":"string"},"width":{"description":"width","type":"integer"}},"required":["id","ad_format"],"type":"object"}`),
		),
		Ad_GET_previewsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Ad_GET_targetingsentencelines",
			"GET targetingsentencelines for Ad. Returns TargetingSentenceLine",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Ad ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Ad_GET_targetingsentencelinesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Ad_DELETE_",
			"DELETE  for Ad. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Ad ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Ad_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Ad_GET_",
			"GET  for Ad. Returns Ad. Parameters: am_call_tags (map), date_preset (adgroup_date_preset), from_adtable (bool), review_feedback_breakdown (bool), time_range (map)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"am_call_tags":{"description":"am_call_tags","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"date_preset":{"description":"date_preset (enum: adgroup_date_preset)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"from_adtable":{"description":"from_adtable","type":"boolean"},"id":{"description":"Ad ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"review_feedback_breakdown":{"description":"review_feedback_breakdown","type":"boolean"},"time_range":{"description":"time_range","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Ad_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Ad_POST_",
			"POST  for Ad. Returns Ad. Parameters: ad_schedule_end_time (datetime), ad_schedule_start_time (datetime), adlabels (list<Object>), adset_spec (AdSet), audience_id (string), bid_amount (int), conversion_domain (string), creative (AdCreative), creative_asset_groups_spec (Object), display_sequence (unsigned int), draft_adgroup_id (string), engagement_audience (bool), execution_options (list<adgroup_execution_options>), include_demolink_hashes (bool), name (string), priority (unsigned int), status (adgroup_status), tracking_specs (Object)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"ad_schedule_end_time":{"description":"ad_schedule_end_time","type":"string"},"ad_schedule_start_time":{"description":"ad_schedule_start_time","type":"string"},"adlabels":{"description":"adlabels","items":{"additionalProperties":true,"type":"object"},"type":"array"},"adset_spec":{"description":"adset_spec","type":"string"},"audience_id":{"description":"audience_id","type":"string"},"bid_amount":{"description":"bid_amount","type":"integer"},"conversion_domain":{"description":"conversion_domain","type":"string"},"creative":{"description":"creative","type":"string"},"creative_asset_groups_spec":{"additionalProperties":true,"description":"creative_asset_groups_spec","type":"object"},"display_sequence":{"description":"display_sequence","type":"integer"},"draft_adgroup_id":{"description":"draft_adgroup_id","type":"string"},"engagement_audience":{"description":"engagement_audience","type":"boolean"},"execution_options":{"description":"execution_options","items":{"type":"string"},"type":"array"},"id":{"description":"Ad ID","type":"string"},"include_demolink_hashes":{"description":"include_demolink_hashes","type":"boolean"},"name":{"description":"name","type":"string"},"priority":{"description":"priority","type":"integer"},"status":{"description":"status (enum: adgroup_status)","type":"string"},"tracking_specs":{"additionalProperties":true,"description":"tracking_specs","type":"object"}},"required":["id"],"type":"object"}`),
		),
		Ad_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_account_controls",
			"GET account_controls for AdAccount. Returns AdAccountBusinessConstraints",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_account_controlsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_account_controls",
			"POST account_controls for AdAccount. Returns AdAccountBusinessConstraints. Parameters: audience_controls (Object) [required], placement_controls (Object)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"audience_controls":{"additionalProperties":true,"description":"audience_controls","type":"object"},"id":{"description":"AdAccount ID","type":"string"},"placement_controls":{"additionalProperties":true,"description":"placement_controls","type":"object"}},"required":["id","audience_controls"],"type":"object"}`),
		),
		AdAccount_POST_account_controlsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_activities",
			"GET activities for AdAccount. Returns AdActivity. Parameters: add_children (bool), after (string), business_id (string), category (adaccountactivities_category_enum_param), data_source (adaccountactivities_data_source_enum_param), extra_oids (list<string>), limit (int), oid (string), since (datetime), uid (int), until (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"add_children":{"description":"add_children","type":"boolean"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business_id":{"description":"business_id","type":"string"},"category":{"description":"category (enum: adaccountactivities_category_enum_param)","type":"string"},"data_source":{"description":"data_source (enum: adaccountactivities_data_source_enum_param)","type":"string"},"extra_oids":{"description":"extra_oids","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"oid":{"description":"oid","type":"string"},"since":{"description":"since","type":"string"},"uid":{"description":"uid","type":"integer"},"until":{"description":"until","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_activitiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_ad_place_page_sets",
			"GET ad_place_page_sets for AdAccount. Returns AdPlacePageSet",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_ad_place_page_setsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_ad_place_page_sets",
			"POST ad_place_page_sets for AdAccount. Returns AdPlacePageSet. Parameters: location_types (list<adaccountad_place_page_sets_location_types_enum_param>), name (string) [required], parent_page (string) [required], targeted_area_type (adaccountad_place_page_sets_targeted_area_type_enum_param)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"AdAccount ID","type":"string"},"location_types":{"description":"location_types","items":{"type":"string"},"type":"array"},"name":{"description":"name","type":"string"},"parent_page":{"description":"parent_page","type":"string"},"targeted_area_type":{"description":"targeted_area_type (enum: adaccountad_place_page_sets_targeted_area_type_enum_param)","type":"string"}},"required":["id","name","parent_page"],"type":"object"}`),
		),
		AdAccount_POST_ad_place_page_setsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_ad_place_page_sets_async",
			"POST ad_place_page_sets_async for AdAccount. Returns AdPlacePageSet. Parameters: location_types (list<adaccountad_place_page_sets_async_location_types_enum_param>), name (string) [required], parent_page (string) [required], targeted_area_type (adaccountad_place_page_sets_async_targeted_area_type_enum_param)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"AdAccount ID","type":"string"},"location_types":{"description":"location_types","items":{"type":"string"},"type":"array"},"name":{"description":"name","type":"string"},"parent_page":{"description":"parent_page","type":"string"},"targeted_area_type":{"description":"targeted_area_type (enum: adaccountad_place_page_sets_async_targeted_area_type_enum_param)","type":"string"}},"required":["id","name","parent_page"],"type":"object"}`),
		),
		AdAccount_POST_ad_place_page_sets_asyncHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_ad_saved_keywords",
			"GET ad_saved_keywords for AdAccount. Returns AdSavedKeywords. Parameters: fields (list<string>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_ad_saved_keywordsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_ad_studies",
			"GET ad_studies for AdAccount. Returns AdStudy",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_ad_studiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_adcloudplayables",
			"GET adcloudplayables for AdAccount. Returns CloudGame",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_adcloudplayablesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_adcreatives",
			"GET adcreatives for AdAccount. Returns AdCreative",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_adcreativesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_adcreatives",
			"POST adcreatives for AdAccount. Returns AdCreative. Parameters: actor_id (unsigned int), ad_disclaimer_spec (map), adlabels (list<Object>), applink_treatment (adaccountadcreatives_applink_treatment_enum_param), asset_feed_spec (Object), authorization_category (adaccountadcreatives_authorization_category_enum_param), body (string), branded_content (map), branded_content_sponsor_page_id (string), bundle_folder_id (string), call_to_action (Object), categorization_criteria (adaccountadcreatives_categorization_criteria_enum_param), category_media_source (adaccountadcreatives_category_media_source_enum_param), contextual_multi_ads (map), creative_sourcing_spec (map), degrees_of_freedom_spec (map), destination_set_id (string), dynamic_ad_voice (adaccountadcreatives_dynamic_ad_voice_enum_param), enable_launch_instant_app (bool), facebook_branded_content (map), image_crops (map), image_file (string), image_hash (string), image_url (string), instagram_branded_content (map), instagram_permalink_url (string), instagram_user_id (string), interactive_components_spec (map), is_dco_internal (bool), link_og_id (string), link_url (string), name (string), object_id (unsigned int), object_story_id (string), object_story_spec (AdCreativeObjectStorySpec), object_type (string), object_url (string), omnichannel_link_spec (map), page_welcome_message (string), place_page_set_id (string), platform_customizations (Object), playable_asset_id (string), portrait_customizations (map), product_set_id (string), recommender_settings (map), regional_regulation_disclaimer_spec (map), source_instagram_media_id (string), template_url (string), template_url_spec (string), thumbnail_url (string), title (string), url_tags (string), use_page_actor_override (bool)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"actor_id":{"description":"actor_id","type":"integer"},"ad_disclaimer_spec":{"description":"ad_disclaimer_spec","type":"string"},"adlabels":{"description":"adlabels","items":{"additionalProperties":true,"type":"object"},"type":"array"},"applink_treatment":{"description":"applink_treatment (enum: adaccountadcreatives_applink_treatment_enum_param)","type":"string"},"asset_feed_spec":{"additionalProperties":true,"description":"asset_feed_spec","type":"object"},"authorization_category":{"description":"authorization_category (enum: adaccountadcreatives_authorization_category_enum_param)","type":"string"},"body":{"description":"body","type":"string"},"branded_content":{"description":"branded_content","type":"string"},"branded_content_sponsor_page_id":{"description":"branded_content_sponsor_page_id","type":"string"},"bundle_folder_id":{"description":"bundle_folder_id","type":"string"},"call_to_action":{"additionalProperties":true,"description":"call_to_action","type":"object"},"categorization_criteria":{"description":"categorization_criteria (enum: adaccountadcreatives_categorization_criteria_enum_param)","type":"string"},"category_media_source":{"description":"category_media_source (enum: adaccountadcreatives_category_media_source_enum_param)","type":"string"},"contextual_multi_ads":{"description":"contextual_multi_ads","type":"string"},"creative_sourcing_spec":{"description":"creative_sourcing_spec","type":"string"},"degrees_of_freedom_spec":{"description":"degrees_of_freedom_spec","type":"string"},"destination_set_id":{"description":"destination_set_id","type":"string"},"dynamic_ad_voice":{"description":"dynamic_ad_voice (enum: adaccountadcreatives_dynamic_ad_voice_enum_param)","type":"string"},"enable_launch_instant_app":{"description":"enable_launch_instant_app","type":"boolean"},"facebook_branded_content":{"description":"facebook_branded_content","type":"string"},"id":{"description":"AdAccount ID","type":"string"},"image_crops":{"description":"image_crops","type":"string"},"image_file":{"description":"image_file","type":"string"},"image_hash":{"description":"image_hash","type":"string"},"image_url":{"description":"image_url","type":"string"},"instagram_branded_content":{"description":"instagram_branded_content","type":"string"},"instagram_permalink_url":{"description":"instagram_permalink_url","type":"string"},"instagram_user_id":{"description":"instagram_user_id","type":"string"},"interactive_components_spec":{"description":"interactive_components_spec","type":"string"},"is_dco_internal":{"description":"is_dco_internal","type":"boolean"},"link_og_id":{"description":"link_og_id","type":"string"},"link_url":{"description":"link_url","type":"string"},"name":{"description":"name","type":"string"},"object_id":{"description":"object_id","type":"integer"},"object_story_id":{"description":"object_story_id","type":"string"},"object_story_spec":{"description":"object_story_spec","type":"string"},"object_type":{"description":"object_type","type":"string"},"object_url":{"description":"object_url","type":"string"},"omnichannel_link_spec":{"description":"omnichannel_link_spec","type":"string"},"page_welcome_message":{"description":"page_welcome_message","type":"string"},"place_page_set_id":{"description":"place_page_set_id","type":"string"},"platform_customizations":{"additionalProperties":true,"description":"platform_customizations","type":"object"},"playable_asset_id":{"description":"playable_asset_id","type":"string"},"portrait_customizations":{"description":"portrait_customizations","type":"string"},"product_set_id":{"description":"product_set_id","type":"string"},"recommender_settings":{"description":"recommender_settings","type":"string"},"regional_regulation_disclaimer_spec":{"description":"regional_regulation_disclaimer_spec","type":"string"},"source_instagram_media_id":{"description":"source_instagram_media_id","type":"string"},"template_url":{"description":"template_url","type":"string"},"template_url_spec":{"description":"template_url_spec","type":"string"},"thumbnail_url":{"description":"thumbnail_url","type":"string"},"title":{"description":"title","type":"string"},"url_tags":{"description":"url_tags","type":"string"},"use_page_actor_override":{"description":"use_page_actor_override","type":"boolean"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_POST_adcreativesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_adcreativesbylabels",
			"GET adcreativesbylabels for AdAccount. Returns AdCreative. Parameters: ad_label_ids (list<string>) [required], operator (adaccountadcreativesbylabels_operator_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"ad_label_ids":{"description":"ad_label_ids","items":{"type":"string"},"type":"array"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"operator":{"description":"operator (enum: adaccountadcreativesbylabels_operator_enum_param)","type":"string"}},"required":["id","ad_label_ids"],"type":"object"}`),
		),
		AdAccount_GET_adcreativesbylabelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_DELETE_adimages",
			"DELETE adimages for AdAccount. Returns Object. Parameters: hash (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"hash":{"description":"hash","type":"string"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","hash"],"type":"object"}`),
		),
		AdAccount_DELETE_adimagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_adimages",
			"GET adimages for AdAccount. Returns AdImage. Parameters: biz_tag_id (unsigned int), business_id (string), hashes (list<string>), minheight (unsigned int), minwidth (unsigned int), name (string), selected_hashes (list<string>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"biz_tag_id":{"description":"biz_tag_id","type":"integer"},"business_id":{"description":"business_id","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"hashes":{"description":"hashes","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"minheight":{"description":"minheight","type":"integer"},"minwidth":{"description":"minwidth","type":"integer"},"name":{"description":"name","type":"string"},"selected_hashes":{"description":"selected_hashes","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_adimagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_adimages",
			"POST adimages for AdAccount. Returns Object. Parameters: bytes (string), copy_from (Object)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"bytes":{"description":"bytes","type":"string"},"copy_from":{"additionalProperties":true,"description":"copy_from","type":"object"},"id":{"description":"AdAccount ID","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_POST_adimagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_adlabels",
			"GET adlabels for AdAccount. Returns AdLabel",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_adlabelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_adlabels",
			"POST adlabels for AdAccount. Returns AdLabel. Parameters: name (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"AdAccount ID","type":"string"},"name":{"description":"name","type":"string"}},"required":["id","name"],"type":"object"}`),
		),
		AdAccount_POST_adlabelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_adplayables",
			"GET adplayables for AdAccount. Returns PlayableContent",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_adplayablesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_adplayables",
			"POST adplayables for AdAccount. Returns PlayableContent. Parameters: app_id (string), name (string) [required], session_id (string), source (file), source_url (string), source_zip (file)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"app_id":{"description":"app_id","type":"string"},"id":{"description":"AdAccount ID","type":"string"},"name":{"description":"name","type":"string"},"session_id":{"description":"session_id","type":"string"},"source":{"description":"source","type":"string"},"source_url":{"description":"source_url","type":"string"},"source_zip":{"description":"source_zip","type":"string"}},"required":["id","name"],"type":"object"}`),
		),
		AdAccount_POST_adplayablesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_adrules_history",
			"GET adrules_history for AdAccount. Returns AdAccountAdRulesHistory. Parameters: action (adaccountadrules_history_action_enum_param), evaluation_type (adaccountadrules_history_evaluation_type_enum_param), hide_no_changes (bool), object_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"action":{"description":"action (enum: adaccountadrules_history_action_enum_param)","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"evaluation_type":{"description":"evaluation_type (enum: adaccountadrules_history_evaluation_type_enum_param)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"hide_no_changes":{"description":"hide_no_changes","type":"boolean"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"object_id":{"description":"object_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_adrules_historyHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_adrules_library",
			"GET adrules_library for AdAccount. Returns AdRule",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_adrules_libraryHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_adrules_library",
			"POST adrules_library for AdAccount. Returns AdRule. Parameters: account_id (string), evaluation_spec (Object) [required], execution_spec (Object) [required], name (string) [required], schedule_spec (Object), status (adaccountadrules_library_status_enum_param), ui_creation_source (adaccountadrules_library_ui_creation_source_enum_param)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"account_id":{"description":"account_id","type":"string"},"evaluation_spec":{"additionalProperties":true,"description":"evaluation_spec","type":"object"},"execution_spec":{"additionalProperties":true,"description":"execution_spec","type":"object"},"id":{"description":"AdAccount ID","type":"string"},"name":{"description":"name","type":"string"},"schedule_spec":{"additionalProperties":true,"description":"schedule_spec","type":"object"},"status":{"description":"status (enum: adaccountadrules_library_status_enum_param)","type":"string"},"ui_creation_source":{"description":"ui_creation_source (enum: adaccountadrules_library_ui_creation_source_enum_param)","type":"string"}},"required":["id","evaluation_spec","execution_spec","name"],"type":"object"}`),
		),
		AdAccount_POST_adrules_libraryHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_ads",
			"GET ads for AdAccount. Returns Ad. Parameters: date_preset (adaccountads_date_preset_enum_param), effective_status (list<string>), time_range (map), updated_since (int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"date_preset":{"description":"date_preset (enum: adaccountads_date_preset_enum_param)","type":"string"},"effective_status":{"description":"effective_status","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"time_range":{"description":"time_range","type":"string"},"updated_since":{"description":"updated_since","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_adsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_ads",
			"POST ads for AdAccount. Returns Ad. Parameters: ad_schedule_end_time (datetime), ad_schedule_start_time (datetime), adlabels (list<Object>), adset_id (unsigned int), adset_spec (AdSet), audience_id (string), bid_amount (int), conversion_domain (string), creative (AdCreative) [required], creative_asset_groups_spec (Object), date_format (string), display_sequence (unsigned int), draft_adgroup_id (string), engagement_audience (bool), execution_options (list<adaccountads_execution_options_enum_param>), include_demolink_hashes (bool), name (string) [required], priority (unsigned int), source_ad_id (string), status (adaccountads_status_enum_param), tracking_specs (Object)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"ad_schedule_end_time":{"description":"ad_schedule_end_time","type":"string"},"ad_schedule_start_time":{"description":"ad_schedule_start_time","type":"string"},"adlabels":{"description":"adlabels","items":{"additionalProperties":true,"type":"object"},"type":"array"},"adset_id":{"description":"adset_id","type":"integer"},"adset_spec":{"description":"adset_spec","type":"string"},"audience_id":{"description":"audience_id","type":"string"},"bid_amount":{"description":"bid_amount","type":"integer"},"conversion_domain":{"description":"conversion_domain","type":"string"},"creative":{"description":"creative","type":"string"},"creative_asset_groups_spec":{"additionalProperties":true,"description":"creative_asset_groups_spec","type":"object"},"date_format":{"description":"date_format","type":"string"},"display_sequence":{"description":"display_sequence","type":"integer"},"draft_adgroup_id":{"description":"draft_adgroup_id","type":"string"},"engagement_audience":{"description":"engagement_audience","type":"boolean"},"execution_options":{"description":"execution_options","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"include_demolink_hashes":{"description":"include_demolink_hashes","type":"boolean"},"name":{"description":"name","type":"string"},"priority":{"description":"priority","type":"integer"},"source_ad_id":{"description":"source_ad_id","type":"string"},"status":{"description":"status (enum: adaccountads_status_enum_param)","type":"string"},"tracking_specs":{"additionalProperties":true,"description":"tracking_specs","type":"object"}},"required":["id","creative","name"],"type":"object"}`),
		),
		AdAccount_POST_adsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_ads_reporting_mmm_reports",
			"GET ads_reporting_mmm_reports for AdAccount. Returns AdsReportBuilderMMMReport. Parameters: filtering (list<map>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filtering":{"description":"filtering","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_ads_reporting_mmm_reportsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_ads_reporting_mmm_schedulers",
			"GET ads_reporting_mmm_schedulers for AdAccount. Returns AdsReportBuilderMMMReportScheduler",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_ads_reporting_mmm_schedulersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_ads_volume",
			"GET ads_volume for AdAccount. Returns AdAccountAdVolume. Parameters: page_id (string), recommendation_type (adaccountads_volume_recommendation_type_enum_param), show_breakdown_by_actor (bool)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"page_id":{"description":"page_id","type":"string"},"recommendation_type":{"description":"recommendation_type (enum: adaccountads_volume_recommendation_type_enum_param)","type":"string"},"show_breakdown_by_actor":{"description":"show_breakdown_by_actor","type":"boolean"}},"type":"object"}`),
		),
		AdAccount_GET_ads_volumeHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_adsbylabels",
			"GET adsbylabels for AdAccount. Returns Ad. Parameters: ad_label_ids (list<string>) [required], operator (adaccountadsbylabels_operator_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"ad_label_ids":{"description":"ad_label_ids","items":{"type":"string"},"type":"array"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"operator":{"description":"operator (enum: adaccountadsbylabels_operator_enum_param)","type":"string"}},"required":["id","ad_label_ids"],"type":"object"}`),
		),
		AdAccount_GET_adsbylabelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_adsets",
			"GET adsets for AdAccount. Returns AdSet. Parameters: date_preset (adaccountadsets_date_preset_enum_param), effective_status (list<adaccountadsets_effective_status_enum_param>), is_completed (bool), time_range (map), updated_since (int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"date_preset":{"description":"date_preset (enum: adaccountadsets_date_preset_enum_param)","type":"string"},"effective_status":{"description":"effective_status","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"is_completed":{"description":"is_completed","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"time_range":{"description":"time_range","type":"string"},"updated_since":{"description":"updated_since","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_adsetsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_adsets",
			"POST adsets for AdAccount. Returns AdSet. Parameters: adlabels (list<Object>), adset_schedule (list<Object>), attribution_spec (list<map>), bid_adjustments (Object), bid_amount (int), bid_constraints (map<string, Object>), bid_strategy (adaccountadsets_bid_strategy_enum_param), billing_event (adaccountadsets_billing_event_enum_param), budget_source (adaccountadsets_budget_source_enum_param), budget_split_set_id (string), campaign_attribution (Object), campaign_id (string), campaign_spec (Object), creative_sequence (list<string>), creative_sequence_repetition_pattern (adaccountadsets_creative_sequence_repetition_pattern_enum_param), daily_budget (unsigned int), daily_imps (unsigned int), daily_min_spend_target (unsigned int), daily_spend_cap (unsigned int), date_format (string), destination_type (adaccountadsets_destination_type_enum_param), dsa_beneficiary (string), dsa_payor (string), end_time (datetime), execution_options (list<adaccountadsets_execution_options_enum_param>), existing_customer_budget_percentage (unsigned int), frequency_control_specs (list<Object>), full_funnel_exploration_mode (adaccountadsets_full_funnel_exploration_mode_enum_param), is_ba_skip_delayed_eligible (bool), is_dynamic_creative (bool), is_incremental_attribution_enabled (bool), is_sac_cfca_terms_certified (bool), lifetime_budget (unsigned int), lifetime_imps (unsigned int), lifetime_min_spend_target (unsigned int), lifetime_spend_cap (unsigned int), line_number (unsigned int), max_budget_spend_percentage (unsigned int), min_budget_spend_percentage (unsigned int), multi_optimization_goal_weight (adaccountadsets_multi_optimization_goal_weight_enum_param), name (string) [required], optimization_goal (adaccountadsets_optimization_goal_enum_param), optimization_sub_event (adaccountadsets_optimization_sub_event_enum_param), pacing_type (list<string>), promoted_object (Object), rb_prediction_id (string), regional_regulated_categories (list<adaccountadsets_regional_regulated_categories_enum_param>), regional_regulation_identities (map), rf_prediction_id (string), source_adset_id (string), start_time (datetime), status (adaccountadsets_status_enum_param), targeting (Targeting), time_based_ad_rotation_id_blocks (list<list<unsigned int>>), time_based_ad_rotation_intervals (list<unsigned int>), time_start (datetime), time_stop (datetime), topline_id (string), tune_for_category (adaccountadsets_tune_for_category_enum_param)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"adlabels":{"description":"adlabels","items":{"additionalProperties":true,"type":"object"},"type":"array"},"adset_schedule":{"description":"adset_schedule","items":{"additionalProperties":true,"type":"object"},"type":"array"},"attribution_spec":{"description":"attribution_spec","items":{"additionalProperties":true,"type":"object"},"type":"array"},"bid_adjustments":{"additionalProperties":true,"description":"bid_adjustments","type":"object"},"bid_amount":{"description":"bid_amount","type":"integer"},"bid_constraints":{"additionalProperties":true,"description":"bid_constraints","type":"object"},"bid_strategy":{"description":"bid_strategy (enum: adaccountadsets_bid_strategy_enum_param)","type":"string"},"billing_event":{"description":"billing_event (enum: adaccountadsets_billing_event_enum_param)","type":"string"},"budget_source":{"description":"budget_source (enum: adaccountadsets_budget_source_enum_param)","type":"string"},"budget_split_set_id":{"description":"budget_split_set_id","type":"string"},"campaign_attribution":{"additionalProperties":true,"description":"campaign_attribution","type":"object"},"campaign_id":{"description":"campaign_id","type":"string"},"campaign_spec":{"additionalProperties":true,"description":"campaign_spec","type":"object"},"creative_sequence":{"description":"creative_sequence","items":{"type":"string"},"type":"array"},"creative_sequence_repetition_pattern":{"description":"creative_sequence_repetition_pattern (enum: adaccountadsets_creative_sequence_repetition_pattern_enum_param)","type":"string"},"daily_budget":{"description":"daily_budget","type":"integer"},"daily_imps":{"description":"daily_imps","type":"integer"},"daily_min_spend_target":{"description":"daily_min_spend_target","type":"integer"},"daily_spend_cap":{"description":"daily_spend_cap","type":"integer"},"date_format":{"description":"date_format","type":"string"},"destination_type":{"description":"destination_type (enum: adaccountadsets_destination_type_enum_param)","type":"string"},"dsa_beneficiary":{"description":"dsa_beneficiary","type":"string"},"dsa_payor":{"description":"dsa_payor","type":"string"},"end_time":{"description":"end_time","type":"string"},"execution_options":{"description":"execution_options","items":{"type":"string"},"type":"array"},"existing_customer_budget_percentage":{"description":"existing_customer_budget_percentage","type":"integer"},"frequency_control_specs":{"description":"frequency_control_specs","items":{"additionalProperties":true,"type":"object"},"type":"array"},"full_funnel_exploration_mode":{"description":"full_funnel_exploration_mode (enum: adaccountadsets_full_funnel_exploration_mode_enum_param)","type":"string"},"id":{"description":"AdAccount ID","type":"string"},"is_ba_skip_delayed_eligible":{"description":"is_ba_skip_delayed_eligible","type":"boolean"},"is_dynamic_creative":{"description":"is_dynamic_creative","type":"boolean"},"is_incremental_attribution_enabled":{"description":"is_incremental_attribution_enabled","type":"boolean"},"is_sac_cfca_terms_certified":{"description":"is_sac_cfca_terms_certified","type":"boolean"},"lifetime_budget":{"description":"lifetime_budget","type":"integer"},"lifetime_imps":{"description":"lifetime_imps","type":"integer"},"lifetime_min_spend_target":{"description":"lifetime_min_spend_target","type":"integer"},"lifetime_spend_cap":{"description":"lifetime_spend_cap","type":"integer"},"line_number":{"description":"line_number","type":"integer"},"max_budget_spend_percentage":{"description":"max_budget_spend_percentage","type":"integer"},"min_budget_spend_percentage":{"description":"min_budget_spend_percentage","type":"integer"},"multi_optimization_goal_weight":{"description":"multi_optimization_goal_weight (enum: adaccountadsets_multi_optimization_goal_weight_enum_param)","type":"string"},"name":{"description":"name","type":"string"},"optimization_goal":{"description":"optimization_goal (enum: adaccountadsets_optimization_goal_enum_param)","type":"string"},"optimization_sub_event":{"description":"optimization_sub_event (enum: adaccountadsets_optimization_sub_event_enum_param)","type":"string"},"pacing_type":{"description":"pacing_type","items":{"type":"string"},"type":"array"},"promoted_object":{"additionalProperties":true,"description":"promoted_object","type":"object"},"rb_prediction_id":{"description":"rb_prediction_id","type":"string"},"regional_regulated_categories":{"description":"regional_regulated_categories","items":{"type":"string"},"type":"array"},"regional_regulation_identities":{"description":"regional_regulation_identities","type":"string"},"rf_prediction_id":{"description":"rf_prediction_id","type":"string"},"source_adset_id":{"description":"source_adset_id","type":"string"},"start_time":{"description":"start_time","type":"string"},"status":{"description":"status (enum: adaccountadsets_status_enum_param)","type":"string"},"targeting":{"description":"targeting","type":"string"},"time_based_ad_rotation_id_blocks":{"description":"time_based_ad_rotation_id_blocks","items":{"type":"string"},"type":"array"},"time_based_ad_rotation_intervals":{"description":"time_based_ad_rotation_intervals","items":{"type":"integer"},"type":"array"},"time_start":{"description":"time_start","type":"string"},"time_stop":{"description":"time_stop","type":"string"},"topline_id":{"description":"topline_id","type":"string"},"tune_for_category":{"description":"tune_for_category (enum: adaccountadsets_tune_for_category_enum_param)","type":"string"}},"required":["id","name"],"type":"object"}`),
		),
		AdAccount_POST_adsetsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_adsetsbylabels",
			"GET adsetsbylabels for AdAccount. Returns AdSet. Parameters: ad_label_ids (list<string>) [required], operator (adaccountadsetsbylabels_operator_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"ad_label_ids":{"description":"ad_label_ids","items":{"type":"string"},"type":"array"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"operator":{"description":"operator (enum: adaccountadsetsbylabels_operator_enum_param)","type":"string"}},"required":["id","ad_label_ids"],"type":"object"}`),
		),
		AdAccount_GET_adsetsbylabelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_adspixels",
			"GET adspixels for AdAccount. Returns AdsPixel. Parameters: sort_by (adaccountadspixels_sort_by_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"sort_by":{"description":"sort_by (enum: adaccountadspixels_sort_by_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_adspixelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_adspixels",
			"POST adspixels for AdAccount. Returns AdsPixel. Parameters: name (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"AdAccount ID","type":"string"},"name":{"description":"name","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_POST_adspixelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_advertisable_applications",
			"GET advertisable_applications for AdAccount. Returns Application. Parameters: app_id (string), business_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"app_id":{"description":"app_id","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business_id":{"description":"business_id","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_advertisable_applicationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_DELETE_advideos",
			"DELETE advideos for AdAccount. Returns Object. Parameters: video_id (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"video_id":{"description":"video_id","type":"string"}},"required":["id","video_id"],"type":"object"}`),
		),
		AdAccount_DELETE_advideosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_advideos",
			"GET advideos for AdAccount. Returns AdVideo. Parameters: max_aspect_ratio (float), maxheight (unsigned int), maxlength (unsigned int), maxwidth (unsigned int), min_aspect_ratio (float), minheight (unsigned int), minlength (unsigned int), minwidth (unsigned int), title (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"max_aspect_ratio":{"description":"max_aspect_ratio","type":"number"},"maxheight":{"description":"maxheight","type":"integer"},"maxlength":{"description":"maxlength","type":"integer"},"maxwidth":{"description":"maxwidth","type":"integer"},"min_aspect_ratio":{"description":"min_aspect_ratio","type":"number"},"minheight":{"description":"minheight","type":"integer"},"minlength":{"description":"minlength","type":"integer"},"minwidth":{"description":"minwidth","type":"integer"},"title":{"description":"title","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_advideosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_advideos",
			"POST advideos for AdAccount. Returns AdVideo. Parameters: application_id (string), asked_fun_fact_prompt_id (unsigned int), audio_story_wave_animation_handle (string), chunk_session_id (string), composer_entry_picker (string), composer_entry_point (string), composer_entry_time (unsigned int), composer_session_events_log (string), composer_session_id (string), composer_source_surface (string), composer_type (string), container_type (adaccountadvideos_container_type_enum_param), content_category (adaccountadvideos_content_category_enum_param), creative_tools (string), description (string), embeddable (bool), end_offset (unsigned int), fbuploader_video_file_chunk (string), file_size (unsigned int), file_url (string), fisheye_video_cropped (bool), formatting (adaccountadvideos_formatting_enum_param), fov (unsigned int), front_z_rotation (float), fun_fact_prompt_id (string), fun_fact_toastee_id (unsigned int), guide (list<list<unsigned int>>), guide_enabled (bool), initial_heading (unsigned int), initial_pitch (unsigned int), instant_game_entry_point_data (string), is_boost_intended (bool), is_group_linking_post (bool), is_partnership_ad (bool), is_voice_clip (bool), location_source_id (string), name (string), og_action_type_id (string), og_icon_id (string), og_object_id (string), og_phrase (string), og_suggestion_mechanism (string), original_fov (unsigned int), original_projection_type (adaccountadvideos_original_projection_type_enum_param), partnership_ad_ad_code (string), publish_event_id (unsigned int), referenced_sticker_id (string), replace_video_id (string), slideshow_spec (map), source (string), source_instagram_media_id (string), spherical (bool), start_offset (unsigned int), swap_mode (adaccountadvideos_swap_mode_enum_param), text_format_metadata (string), thumb (file), time_since_original_post (unsigned int), title (string), transcode_setting_properties (string), unpublished_content_type (adaccountadvideos_unpublished_content_type_enum_param), upload_phase (adaccountadvideos_upload_phase_enum_param), upload_session_id (string), upload_setting_properties (string), video_file_chunk (string), video_id_original (string), video_start_time_ms (unsigned int), waterfall_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"application_id":{"description":"application_id","type":"string"},"asked_fun_fact_prompt_id":{"description":"asked_fun_fact_prompt_id","type":"integer"},"audio_story_wave_animation_handle":{"description":"audio_story_wave_animation_handle","type":"string"},"chunk_session_id":{"description":"chunk_session_id","type":"string"},"composer_entry_picker":{"description":"composer_entry_picker","type":"string"},"composer_entry_point":{"description":"composer_entry_point","type":"string"},"composer_entry_time":{"description":"composer_entry_time","type":"integer"},"composer_session_events_log":{"description":"composer_session_events_log","type":"string"},"composer_session_id":{"description":"composer_session_id","type":"string"},"composer_source_surface":{"description":"composer_source_surface","type":"string"},"composer_type":{"description":"composer_type","type":"string"},"container_type":{"description":"container_type (enum: adaccountadvideos_container_type_enum_param)","type":"string"},"content_category":{"description":"content_category (enum: adaccountadvideos_content_category_enum_param)","type":"string"},"creative_tools":{"description":"creative_tools","type":"string"},"description":{"description":"description","type":"string"},"embeddable":{"description":"embeddable","type":"boolean"},"end_offset":{"description":"end_offset","type":"integer"},"fbuploader_video_file_chunk":{"description":"fbuploader_video_file_chunk","type":"string"},"file_size":{"description":"file_size","type":"integer"},"file_url":{"description":"file_url","type":"string"},"fisheye_video_cropped":{"description":"fisheye_video_cropped","type":"boolean"},"formatting":{"description":"formatting (enum: adaccountadvideos_formatting_enum_param)","type":"string"},"fov":{"description":"fov","type":"integer"},"front_z_rotation":{"description":"front_z_rotation","type":"number"},"fun_fact_prompt_id":{"description":"fun_fact_prompt_id","type":"string"},"fun_fact_toastee_id":{"description":"fun_fact_toastee_id","type":"integer"},"guide":{"description":"guide","items":{"type":"string"},"type":"array"},"guide_enabled":{"description":"guide_enabled","type":"boolean"},"id":{"description":"AdAccount ID","type":"string"},"initial_heading":{"description":"initial_heading","type":"integer"},"initial_pitch":{"description":"initial_pitch","type":"integer"},"instant_game_entry_point_data":{"description":"instant_game_entry_point_data","type":"string"},"is_boost_intended":{"description":"is_boost_intended","type":"boolean"},"is_group_linking_post":{"description":"is_group_linking_post","type":"boolean"},"is_partnership_ad":{"description":"is_partnership_ad","type":"boolean"},"is_voice_clip":{"description":"is_voice_clip","type":"boolean"},"location_source_id":{"description":"location_source_id","type":"string"},"name":{"description":"name","type":"string"},"og_action_type_id":{"description":"og_action_type_id","type":"string"},"og_icon_id":{"description":"og_icon_id","type":"string"},"og_object_id":{"description":"og_object_id","type":"string"},"og_phrase":{"description":"og_phrase","type":"string"},"og_suggestion_mechanism":{"description":"og_suggestion_mechanism","type":"string"},"original_fov":{"description":"original_fov","type":"integer"},"original_projection_type":{"description":"original_projection_type (enum: adaccountadvideos_original_projection_type_enum_param)","type":"string"},"partnership_ad_ad_code":{"description":"partnership_ad_ad_code","type":"string"},"publish_event_id":{"description":"publish_event_id","type":"integer"},"referenced_sticker_id":{"description":"referenced_sticker_id","type":"string"},"replace_video_id":{"description":"replace_video_id","type":"string"},"slideshow_spec":{"description":"slideshow_spec","type":"string"},"source":{"description":"source","type":"string"},"source_instagram_media_id":{"description":"source_instagram_media_id","type":"string"},"spherical":{"description":"spherical","type":"boolean"},"start_offset":{"description":"start_offset","type":"integer"},"swap_mode":{"description":"swap_mode (enum: adaccountadvideos_swap_mode_enum_param)","type":"string"},"text_format_metadata":{"description":"text_format_metadata","type":"string"},"thumb":{"description":"thumb","type":"string"},"time_since_original_post":{"description":"time_since_original_post","type":"integer"},"title":{"description":"title","type":"string"},"transcode_setting_properties":{"description":"transcode_setting_properties","type":"string"},"unpublished_content_type":{"description":"unpublished_content_type (enum: adaccountadvideos_unpublished_content_type_enum_param)","type":"string"},"upload_phase":{"description":"upload_phase (enum: adaccountadvideos_upload_phase_enum_param)","type":"string"},"upload_session_id":{"description":"upload_session_id","type":"string"},"upload_setting_properties":{"description":"upload_setting_properties","type":"string"},"video_file_chunk":{"description":"video_file_chunk","type":"string"},"video_id_original":{"description":"video_id_original","type":"string"},"video_start_time_ms":{"description":"video_start_time_ms","type":"integer"},"waterfall_id":{"description":"waterfall_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_POST_advideosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_affectedadsets",
			"GET affectedadsets for AdAccount. Returns AdSet",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_affectedadsetsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_DELETE_agencies",
			"DELETE agencies for AdAccount. Returns Object. Parameters: business (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business":{"description":"business","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","business"],"type":"object"}`),
		),
		AdAccount_DELETE_agenciesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_agencies",
			"GET agencies for AdAccount. Returns Business",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_agenciesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_agencies",
			"POST agencies for AdAccount. Returns AdAccount. Parameters: business (string) [required], permitted_tasks (list<adaccountagencies_permitted_tasks_enum_param>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"business":{"description":"business","type":"string"},"id":{"description":"AdAccount ID","type":"string"},"permitted_tasks":{"description":"permitted_tasks","items":{"type":"string"},"type":"array"}},"required":["id","business"],"type":"object"}`),
		),
		AdAccount_POST_agenciesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_applications",
			"GET applications for AdAccount. Returns Application",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_applicationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_DELETE_assigned_users",
			"DELETE assigned_users for AdAccount. Returns Object. Parameters: user (int) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"user":{"description":"user","type":"integer"}},"required":["id","user"],"type":"object"}`),
		),
		AdAccount_DELETE_assigned_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_assigned_users",
			"GET assigned_users for AdAccount. Returns AssignedUser. Parameters: business (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business":{"description":"business","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","business"],"type":"object"}`),
		),
		AdAccount_GET_assigned_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_assigned_users",
			"POST assigned_users for AdAccount. Returns AdAccount. Parameters: tasks (list<adaccountassigned_users_tasks_enum_param>), user (int) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"AdAccount ID","type":"string"},"tasks":{"description":"tasks","items":{"type":"string"},"type":"array"},"user":{"description":"user","type":"integer"}},"required":["id","user"],"type":"object"}`),
		),
		AdAccount_POST_assigned_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_async_batch_requests",
			"POST async_batch_requests for AdAccount. Returns Campaign. Parameters: adbatch (list<Object>) [required], name (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"adbatch":{"description":"adbatch","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"name":{"description":"name","type":"string"}},"required":["id","adbatch","name"],"type":"object"}`),
		),
		AdAccount_POST_async_batch_requestsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_async_requests",
			"GET async_requests for AdAccount. Returns AsyncRequest. Parameters: status (adaccountasync_requests_status_enum_param), type (adaccountasync_requests_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"status":{"description":"status (enum: adaccountasync_requests_status_enum_param)","type":"string"},"type":{"description":"type (enum: adaccountasync_requests_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_async_requestsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_asyncadcreatives",
			"GET asyncadcreatives for AdAccount. Returns AdAsyncRequestSet. Parameters: is_completed (bool)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"is_completed":{"description":"is_completed","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_asyncadcreativesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_asyncadcreatives",
			"POST asyncadcreatives for AdAccount. Returns AdAsyncRequestSet. Parameters: creative_spec (AdCreative) [required], name (string) [required], notification_mode (adaccountasyncadcreatives_notification_mode_enum_param), notification_uri (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"creative_spec":{"description":"creative_spec","type":"string"},"id":{"description":"AdAccount ID","type":"string"},"name":{"description":"name","type":"string"},"notification_mode":{"description":"notification_mode (enum: adaccountasyncadcreatives_notification_mode_enum_param)","type":"string"},"notification_uri":{"description":"notification_uri","type":"string"}},"required":["id","creative_spec","name"],"type":"object"}`),
		),
		AdAccount_POST_asyncadcreativesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_asyncadrequestsets",
			"GET asyncadrequestsets for AdAccount. Returns AdAsyncRequestSet. Parameters: is_completed (bool)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"is_completed":{"description":"is_completed","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_asyncadrequestsetsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_asyncadrequestsets",
			"POST asyncadrequestsets for AdAccount. Returns AdAsyncRequestSet. Parameters: ad_specs (list<map>) [required], name (string) [required], notification_mode (adaccountasyncadrequestsets_notification_mode_enum_param), notification_uri (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"ad_specs":{"description":"ad_specs","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"name":{"description":"name","type":"string"},"notification_mode":{"description":"notification_mode (enum: adaccountasyncadrequestsets_notification_mode_enum_param)","type":"string"},"notification_uri":{"description":"notification_uri","type":"string"}},"required":["id","ad_specs","name"],"type":"object"}`),
		),
		AdAccount_POST_asyncadrequestsetsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_audience_funnel",
			"GET audience_funnel for AdAccount. Returns AudienceFunnel",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_audience_funnelHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_block_list_drafts",
			"POST block_list_drafts for AdAccount. Returns AdAccount. Parameters: publisher_urls_file (file) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"AdAccount ID","type":"string"},"publisher_urls_file":{"description":"publisher_urls_file","type":"string"}},"required":["id","publisher_urls_file"],"type":"object"}`),
		),
		AdAccount_POST_block_list_draftsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_brand_safety_content_filter_levels",
			"POST brand_safety_content_filter_levels for AdAccount. Returns AdAccount. Parameters: brand_safety_content_filter_levels (list<adaccountbrand_safety_content_filter_levels_brand_safety_content_filter_levels_enum_param>) [required], business_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"brand_safety_content_filter_levels":{"description":"brand_safety_content_filter_levels","items":{"type":"string"},"type":"array"},"business_id":{"description":"business_id","type":"string"},"id":{"description":"AdAccount ID","type":"string"}},"required":["id","brand_safety_content_filter_levels"],"type":"object"}`),
		),
		AdAccount_POST_brand_safety_content_filter_levelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_broadtargetingcategories",
			"GET broadtargetingcategories for AdAccount. Returns BroadTargetingCategories. Parameters: custom_categories_only (bool)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"custom_categories_only":{"description":"custom_categories_only","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_broadtargetingcategoriesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_businessprojects",
			"GET businessprojects for AdAccount. Returns BusinessProject. Parameters: business (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business":{"description":"business","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_businessprojectsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_DELETE_campaigns",
			"DELETE campaigns for AdAccount. Returns Object. Parameters: before_date (datetime), delete_offset (unsigned int), delete_strategy (adaccountcampaigns_delete_strategy_enum_param) [required], object_count (int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"before_date":{"description":"before_date","type":"string"},"delete_offset":{"description":"delete_offset","type":"integer"},"delete_strategy":{"description":"delete_strategy (enum: adaccountcampaigns_delete_strategy_enum_param)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"object_count":{"description":"object_count","type":"integer"}},"required":["id","delete_strategy"],"type":"object"}`),
		),
		AdAccount_DELETE_campaignsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_campaigns",
			"GET campaigns for AdAccount. Returns Campaign. Parameters: date_preset (adaccountcampaigns_date_preset_enum_param), effective_status (list<adaccountcampaigns_effective_status_enum_param>), is_completed (bool), time_range (map)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"date_preset":{"description":"date_preset (enum: adaccountcampaigns_date_preset_enum_param)","type":"string"},"effective_status":{"description":"effective_status","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"is_completed":{"description":"is_completed","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"time_range":{"description":"time_range","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_campaignsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_campaigns",
			"POST campaigns for AdAccount. Returns Campaign. Parameters: adlabels (list<Object>), bid_strategy (adaccountcampaigns_bid_strategy_enum_param), buying_type (string), daily_budget (unsigned int), execution_options (list<adaccountcampaigns_execution_options_enum_param>), is_skadnetwork_attribution (bool), iterative_split_test_configs (list<Object>), lifetime_budget (unsigned int), name (string), objective (adaccountcampaigns_objective_enum_param), pacing_type (list<string>), promoted_object (Object), smart_promotion_type (adaccountcampaigns_smart_promotion_type_enum_param), source_campaign_id (string), special_ad_categories (list<adaccountcampaigns_special_ad_categories_enum_param>) [required], special_ad_category_country (list<adaccountcampaigns_special_ad_category_country_enum_param>), spend_cap (unsigned int), start_time (datetime), status (adaccountcampaigns_status_enum_param), stop_time (datetime), topline_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"adlabels":{"description":"adlabels","items":{"additionalProperties":true,"type":"object"},"type":"array"},"bid_strategy":{"description":"bid_strategy (enum: adaccountcampaigns_bid_strategy_enum_param)","type":"string"},"buying_type":{"description":"buying_type","type":"string"},"daily_budget":{"description":"daily_budget","type":"integer"},"execution_options":{"description":"execution_options","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"is_skadnetwork_attribution":{"description":"is_skadnetwork_attribution","type":"boolean"},"iterative_split_test_configs":{"description":"iterative_split_test_configs","items":{"additionalProperties":true,"type":"object"},"type":"array"},"lifetime_budget":{"description":"lifetime_budget","type":"integer"},"name":{"description":"name","type":"string"},"objective":{"description":"objective (enum: adaccountcampaigns_objective_enum_param)","type":"string"},"pacing_type":{"description":"pacing_type","items":{"type":"string"},"type":"array"},"promoted_object":{"additionalProperties":true,"description":"promoted_object","type":"object"},"smart_promotion_type":{"description":"smart_promotion_type (enum: adaccountcampaigns_smart_promotion_type_enum_param)","type":"string"},"source_campaign_id":{"description":"source_campaign_id","type":"string"},"special_ad_categories":{"description":"special_ad_categories","items":{"type":"string"},"type":"array"},"special_ad_category_country":{"description":"special_ad_category_country","items":{"type":"string"},"type":"array"},"spend_cap":{"description":"spend_cap","type":"integer"},"start_time":{"description":"start_time","type":"string"},"status":{"description":"status (enum: adaccountcampaigns_status_enum_param)","type":"string"},"stop_time":{"description":"stop_time","type":"string"},"topline_id":{"description":"topline_id","type":"string"}},"required":["id","special_ad_categories"],"type":"object"}`),
		),
		AdAccount_POST_campaignsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_campaignsbylabels",
			"GET campaignsbylabels for AdAccount. Returns Campaign. Parameters: ad_label_ids (list<string>) [required], operator (adaccountcampaignsbylabels_operator_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"ad_label_ids":{"description":"ad_label_ids","items":{"type":"string"},"type":"array"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"operator":{"description":"operator (enum: adaccountcampaignsbylabels_operator_enum_param)","type":"string"}},"required":["id","ad_label_ids"],"type":"object"}`),
		),
		AdAccount_GET_campaignsbylabelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_connected_instagram_accounts",
			"GET connected_instagram_accounts for AdAccount. Returns IGUser",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_connected_instagram_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_connected_instagram_accounts_with_iabp",
			"GET connected_instagram_accounts_with_iabp for AdAccount. Returns IGUser. Parameters: business_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business_id":{"description":"business_id","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_connected_instagram_accounts_with_iabpHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_conversion_goals",
			"GET conversion_goals for AdAccount. Returns AdsConversionGoal",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_conversion_goalsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_customaudiences",
			"GET customaudiences for AdAccount. Returns CustomAudience. Parameters: business_id (string), fetch_primary_audience (bool), fields (list<string>), filtering (list<Object>), pixel_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business_id":{"description":"business_id","type":"string"},"fetch_primary_audience":{"description":"fetch_primary_audience","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filtering":{"description":"filtering","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"pixel_id":{"description":"pixel_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_customaudiencesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_customaudiences",
			"POST customaudiences for AdAccount. Returns CustomAudience. Parameters: allowed_domains (list<string>), associated_audience_id (unsigned int), claim_objective (adaccountcustomaudiences_claim_objective_enum_param), content_type (adaccountcustomaudiences_content_type_enum_param), countries (string), creation_params (map), customer_file_source (adaccountcustomaudiences_customer_file_source_enum_param), dataset_id (string), description (string), enable_fetch_or_create (bool), event_source_group (string), event_sources (list<map>), exclusions (list<Object>), facebook_page_id (string), inclusions (list<Object>), is_snapshot (bool), is_value_based (bool), list_of_accounts (list<unsigned int>), lookalike_spec (string), marketing_message_channels (Object), name (string), opt_out_link (string), origin_audience_id (string), parent_audience_id (unsigned int), partner_reference_key (string), pixel_id (string), prefill (bool), product_set_id (string), regulated_audience_spec (string), retention_days (unsigned int), rev_share_policy_id (unsigned int), rule (string), rule_aggregation (string), subscription_info (list<adaccountcustomaudiences_subscription_info_enum_param>), subtype (adaccountcustomaudiences_subtype_enum_param), use_for_products (list<adaccountcustomaudiences_use_for_products_enum_param>), use_in_campaigns (bool), video_group_ids (list<string>), whats_app_business_phone_number_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"allowed_domains":{"description":"allowed_domains","items":{"type":"string"},"type":"array"},"associated_audience_id":{"description":"associated_audience_id","type":"integer"},"claim_objective":{"description":"claim_objective (enum: adaccountcustomaudiences_claim_objective_enum_param)","type":"string"},"content_type":{"description":"content_type (enum: adaccountcustomaudiences_content_type_enum_param)","type":"string"},"countries":{"description":"countries","type":"string"},"creation_params":{"description":"creation_params","type":"string"},"customer_file_source":{"description":"customer_file_source (enum: adaccountcustomaudiences_customer_file_source_enum_param)","type":"string"},"dataset_id":{"description":"dataset_id","type":"string"},"description":{"description":"description","type":"string"},"enable_fetch_or_create":{"description":"enable_fetch_or_create","type":"boolean"},"event_source_group":{"description":"event_source_group","type":"string"},"event_sources":{"description":"event_sources","items":{"additionalProperties":true,"type":"object"},"type":"array"},"exclusions":{"description":"exclusions","items":{"additionalProperties":true,"type":"object"},"type":"array"},"facebook_page_id":{"description":"facebook_page_id","type":"string"},"id":{"description":"AdAccount ID","type":"string"},"inclusions":{"description":"inclusions","items":{"additionalProperties":true,"type":"object"},"type":"array"},"is_snapshot":{"description":"is_snapshot","type":"boolean"},"is_value_based":{"description":"is_value_based","type":"boolean"},"list_of_accounts":{"description":"list_of_accounts","items":{"type":"integer"},"type":"array"},"lookalike_spec":{"description":"lookalike_spec","type":"string"},"marketing_message_channels":{"additionalProperties":true,"description":"marketing_message_channels","type":"object"},"name":{"description":"name","type":"string"},"opt_out_link":{"description":"opt_out_link","type":"string"},"origin_audience_id":{"description":"origin_audience_id","type":"string"},"parent_audience_id":{"description":"parent_audience_id","type":"integer"},"partner_reference_key":{"description":"partner_reference_key","type":"string"},"pixel_id":{"description":"pixel_id","type":"string"},"prefill":{"description":"prefill","type":"boolean"},"product_set_id":{"description":"product_set_id","type":"string"},"regulated_audience_spec":{"description":"regulated_audience_spec","type":"string"},"retention_days":{"description":"retention_days","type":"integer"},"rev_share_policy_id":{"description":"rev_share_policy_id","type":"integer"},"rule":{"description":"rule","type":"string"},"rule_aggregation":{"description":"rule_aggregation","type":"string"},"subscription_info":{"description":"subscription_info","items":{"type":"string"},"type":"array"},"subtype":{"description":"subtype (enum: adaccountcustomaudiences_subtype_enum_param)","type":"string"},"use_for_products":{"description":"use_for_products","items":{"type":"string"},"type":"array"},"use_in_campaigns":{"description":"use_in_campaigns","type":"boolean"},"video_group_ids":{"description":"video_group_ids","items":{"type":"string"},"type":"array"},"whats_app_business_phone_number_id":{"description":"whats_app_business_phone_number_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_POST_customaudiencesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_customaudiencestos",
			"GET customaudiencestos for AdAccount. Returns CustomAudiencesTOS",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_customaudiencestosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_customaudiencestos",
			"POST customaudiencestos for AdAccount. Returns AdAccount. Parameters: business_id (string), tos_id (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"business_id":{"description":"business_id","type":"string"},"id":{"description":"AdAccount ID","type":"string"},"tos_id":{"description":"tos_id","type":"string"}},"required":["id","tos_id"],"type":"object"}`),
		),
		AdAccount_POST_customaudiencestosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_customconversions",
			"GET customconversions for AdAccount. Returns CustomConversion",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_customconversionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_customconversions",
			"POST customconversions for AdAccount. Returns CustomConversion. Parameters: action_source_type (adaccountcustomconversions_action_source_type_enum_param), advanced_rule (string), custom_event_type (adaccountcustomconversions_custom_event_type_enum_param), default_conversion_value (float), description (string), event_source_id (string), name (string) [required], rule (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"action_source_type":{"description":"action_source_type (enum: adaccountcustomconversions_action_source_type_enum_param)","type":"string"},"advanced_rule":{"description":"advanced_rule","type":"string"},"custom_event_type":{"description":"custom_event_type (enum: adaccountcustomconversions_custom_event_type_enum_param)","type":"string"},"default_conversion_value":{"description":"default_conversion_value","type":"number"},"description":{"description":"description","type":"string"},"event_source_id":{"description":"event_source_id","type":"string"},"id":{"description":"AdAccount ID","type":"string"},"name":{"description":"name","type":"string"},"rule":{"description":"rule","type":"string"}},"required":["id","name"],"type":"object"}`),
		),
		AdAccount_POST_customconversionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_delivery_estimate",
			"GET delivery_estimate for AdAccount. Returns AdAccountDeliveryEstimate. Parameters: optimization_goal (adaccountdelivery_estimate_optimization_goal_enum_param) [required], promoted_object (Object), targeting_spec (Targeting) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"optimization_goal":{"description":"optimization_goal (enum: adaccountdelivery_estimate_optimization_goal_enum_param)","type":"string"},"promoted_object":{"additionalProperties":true,"description":"promoted_object","type":"object"},"targeting_spec":{"description":"targeting_spec","type":"string"}},"required":["id","optimization_goal","targeting_spec"],"type":"object"}`),
		),
		AdAccount_GET_delivery_estimateHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_deprecatedtargetingadsets",
			"GET deprecatedtargetingadsets for AdAccount. Returns AdSet. Parameters: type (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_deprecatedtargetingadsetsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_dsa_recommendations",
			"GET dsa_recommendations for AdAccount. Returns AdAccountDsaRecommendations",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		AdAccount_GET_dsa_recommendationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_generatepreviews",
			"GET generatepreviews for AdAccount. Returns AdPreview. Parameters: ad_format (adaccountgeneratepreviews_ad_format_enum_param) [required], creative (AdCreative) [required], creative_feature (adaccountgeneratepreviews_creative_feature_enum_param), dynamic_asset_label (string), dynamic_creative_spec (Object), dynamic_customization (Object), end_date (datetime), height (unsigned int), locale (string), place_page_id (int), post (Object), product_item_ids (list<string>), render_type (adaccountgeneratepreviews_render_type_enum_param), start_date (datetime), width (unsigned int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"ad_format":{"description":"ad_format (enum: adaccountgeneratepreviews_ad_format_enum_param)","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"creative":{"description":"creative","type":"string"},"creative_feature":{"description":"creative_feature (enum: adaccountgeneratepreviews_creative_feature_enum_param)","type":"string"},"dynamic_asset_label":{"description":"dynamic_asset_label","type":"string"},"dynamic_creative_spec":{"additionalProperties":true,"description":"dynamic_creative_spec","type":"object"},"dynamic_customization":{"additionalProperties":true,"description":"dynamic_customization","type":"object"},"end_date":{"description":"end_date","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"height":{"description":"height","type":"integer"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"locale":{"description":"locale","type":"string"},"place_page_id":{"description":"place_page_id","type":"integer"},"post":{"additionalProperties":true,"description":"post","type":"object"},"product_item_ids":{"description":"product_item_ids","items":{"type":"string"},"type":"array"},"render_type":{"description":"render_type (enum: adaccountgeneratepreviews_render_type_enum_param)","type":"string"},"start_date":{"description":"start_date","type":"string"},"width":{"description":"width","type":"integer"}},"required":["id","ad_format","creative"],"type":"object"}`),
		),
		AdAccount_GET_generatepreviewsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_impacting_ad_studies",
			"GET impacting_ad_studies for AdAccount. Returns AdStudy",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_impacting_ad_studiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_insights",
			"GET insights for AdAccount. Returns AdsInsights. Parameters: action_attribution_windows (list<adaccountinsights_action_attribution_windows_enum_param>), action_breakdowns (list<adaccountinsights_action_breakdowns_enum_param>), action_report_time (adaccountinsights_action_report_time_enum_param), breakdowns (list<adaccountinsights_breakdowns_enum_param>), date_preset (adaccountinsights_date_preset_enum_param), default_summary (bool), export_columns (list<string>), export_format (string), export_name (string), fields (list<string>), filtering (list<Object>), level (adaccountinsights_level_enum_param), limit (int), product_id_limit (int), sort (list<string>), summary (list<string>), summary_action_breakdowns (list<adaccountinsights_summary_action_breakdowns_enum_param>), time_increment (string), time_range (map), time_ranges (list<map>), use_account_attribution_setting (bool), use_unified_attribution_setting (bool)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"action_attribution_windows":{"description":"action_attribution_windows","items":{"type":"string"},"type":"array"},"action_breakdowns":{"description":"action_breakdowns","items":{"type":"string"},"type":"array"},"action_report_time":{"description":"action_report_time (enum: adaccountinsights_action_report_time_enum_param)","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"breakdowns":{"description":"breakdowns","items":{"type":"string"},"type":"array"},"date_preset":{"description":"date_preset (enum: adaccountinsights_date_preset_enum_param)","type":"string"},"default_summary":{"description":"default_summary","type":"boolean"},"export_columns":{"description":"export_columns","items":{"type":"string"},"type":"array"},"export_format":{"description":"export_format","type":"string"},"export_name":{"description":"export_name","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filtering":{"description":"filtering","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"level":{"description":"level (enum: adaccountinsights_level_enum_param)","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"product_id_limit":{"description":"product_id_limit","type":"integer"},"sort":{"description":"sort","items":{"type":"string"},"type":"array"},"summary":{"description":"summary","items":{"type":"string"},"type":"array"},"summary_action_breakdowns":{"description":"summary_action_breakdowns","items":{"type":"string"},"type":"array"},"time_increment":{"description":"time_increment","type":"string"},"time_range":{"description":"time_range","type":"string"},"time_ranges":{"description":"time_ranges","items":{"additionalProperties":true,"type":"object"},"type":"array"},"use_account_attribution_setting":{"description":"use_account_attribution_setting","type":"boolean"},"use_unified_attribution_setting":{"description":"use_unified_attribution_setting","type":"boolean"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_insightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_insights",
			"POST insights for AdAccount. Returns AdReportRun. Parameters: action_attribution_windows (list<adaccountinsights_action_attribution_windows_enum_param>), action_breakdowns (list<adaccountinsights_action_breakdowns_enum_param>), action_report_time (adaccountinsights_action_report_time_enum_param), breakdowns (list<adaccountinsights_breakdowns_enum_param>), date_preset (adaccountinsights_date_preset_enum_param), default_summary (bool), export_columns (list<string>), export_format (string), export_name (string), fields (list<string>), filtering (list<Object>), level (adaccountinsights_level_enum_param), limit (int), product_id_limit (int), sort (list<string>), summary (list<string>), summary_action_breakdowns (list<adaccountinsights_summary_action_breakdowns_enum_param>), time_increment (string), time_range (map), time_ranges (list<map>), use_account_attribution_setting (bool), use_unified_attribution_setting (bool)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"action_attribution_windows":{"description":"action_attribution_windows","items":{"type":"string"},"type":"array"},"action_breakdowns":{"description":"action_breakdowns","items":{"type":"string"},"type":"array"},"action_report_time":{"description":"action_report_time (enum: adaccountinsights_action_report_time_enum_param)","type":"string"},"breakdowns":{"description":"breakdowns","items":{"type":"string"},"type":"array"},"date_preset":{"description":"date_preset (enum: adaccountinsights_date_preset_enum_param)","type":"string"},"default_summary":{"description":"default_summary","type":"boolean"},"export_columns":{"description":"export_columns","items":{"type":"string"},"type":"array"},"export_format":{"description":"export_format","type":"string"},"export_name":{"description":"export_name","type":"string"},"fields":{"description":"fields","items":{"type":"string"},"type":"array"},"filtering":{"description":"filtering","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"level":{"description":"level (enum: adaccountinsights_level_enum_param)","type":"string"},"limit":{"description":"limit","type":"integer"},"product_id_limit":{"description":"product_id_limit","type":"integer"},"sort":{"description":"sort","items":{"type":"string"},"type":"array"},"summary":{"description":"summary","items":{"type":"string"},"type":"array"},"summary_action_breakdowns":{"description":"summary_action_breakdowns","items":{"type":"string"},"type":"array"},"time_increment":{"description":"time_increment","type":"string"},"time_range":{"description":"time_range","type":"string"},"time_ranges":{"description":"time_ranges","items":{"additionalProperties":true,"type":"object"},"type":"array"},"use_account_attribution_setting":{"description":"use_account_attribution_setting","type":"boolean"},"use_unified_attribution_setting":{"description":"use_unified_attribution_setting","type":"boolean"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_POST_insightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_instagram_accounts",
			"GET instagram_accounts for AdAccount. Returns IGUser",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_instagram_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_ios_fourteen_campaign_limits",
			"GET ios_fourteen_campaign_limits for AdAccount. Returns AdAccountIosFourteenCampaignLimits. Parameters: app_id (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"app_id":{"description":"app_id","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","app_id"],"type":"object"}`),
		),
		AdAccount_GET_ios_fourteen_campaign_limitsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_matched_search_applications",
			"GET matched_search_applications for AdAccount. Returns AdAccountMatchedSearchApplicationsEdgeData. Parameters: allow_incomplete_app (bool), app_store (adaccountmatched_search_applications_app_store_enum_param) [required], app_store_country (string), business_id (string), is_skadnetwork_search (bool), only_apps_with_permission (bool), query_term (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"allow_incomplete_app":{"description":"allow_incomplete_app","type":"boolean"},"app_store":{"description":"app_store (enum: adaccountmatched_search_applications_app_store_enum_param)","type":"string"},"app_store_country":{"description":"app_store_country","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business_id":{"description":"business_id","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"is_skadnetwork_search":{"description":"is_skadnetwork_search","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"only_apps_with_permission":{"description":"only_apps_with_permission","type":"boolean"},"query_term":{"description":"query_term","type":"string"}},"required":["app_store","query_term"],"type":"object"}`),
		),
		AdAccount_GET_matched_search_applicationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_max_bid",
			"GET max_bid for AdAccount. Returns AdAccountMaxBid",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_max_bidHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_mcmeconversions",
			"GET mcmeconversions for AdAccount. Returns AdsMcmeConversion",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		AdAccount_GET_mcmeconversionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_minimum_budgets",
			"GET minimum_budgets for AdAccount. Returns MinimumBudget. Parameters: bid_amount (int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bid_amount":{"description":"bid_amount","type":"integer"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_minimum_budgetsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_onbehalf_requests",
			"GET onbehalf_requests for AdAccount. Returns BusinessOwnedObjectOnBehalfOfRequest. Parameters: status (adaccountonbehalf_requests_status_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"status":{"description":"status (enum: adaccountonbehalf_requests_status_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_onbehalf_requestsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_product_audiences",
			"POST product_audiences for AdAccount. Returns AdAccount. Parameters: allowed_domains (list<string>), associated_audience_id (unsigned int), claim_objective (adaccountproduct_audiences_claim_objective_enum_param), content_type (adaccountproduct_audiences_content_type_enum_param), creation_params (map), description (string), enable_fetch_or_create (bool), event_source_group (string), event_sources (list<map>), exclusions (list<Object>), inclusions (list<Object>), is_snapshot (bool), is_value_based (bool), name (string) [required], opt_out_link (string), parent_audience_id (unsigned int), product_set_id (string) [required], rev_share_policy_id (unsigned int), subtype (adaccountproduct_audiences_subtype_enum_param)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"allowed_domains":{"description":"allowed_domains","items":{"type":"string"},"type":"array"},"associated_audience_id":{"description":"associated_audience_id","type":"integer"},"claim_objective":{"description":"claim_objective (enum: adaccountproduct_audiences_claim_objective_enum_param)","type":"string"},"content_type":{"description":"content_type (enum: adaccountproduct_audiences_content_type_enum_param)","type":"string"},"creation_params":{"description":"creation_params","type":"string"},"description":{"description":"description","type":"string"},"enable_fetch_or_create":{"description":"enable_fetch_or_create","type":"boolean"},"event_source_group":{"description":"event_source_group","type":"string"},"event_sources":{"description":"event_sources","items":{"additionalProperties":true,"type":"object"},"type":"array"},"exclusions":{"description":"exclusions","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"inclusions":{"description":"inclusions","items":{"additionalProperties":true,"type":"object"},"type":"array"},"is_snapshot":{"description":"is_snapshot","type":"boolean"},"is_value_based":{"description":"is_value_based","type":"boolean"},"name":{"description":"name","type":"string"},"opt_out_link":{"description":"opt_out_link","type":"string"},"parent_audience_id":{"description":"parent_audience_id","type":"integer"},"product_set_id":{"description":"product_set_id","type":"string"},"rev_share_policy_id":{"description":"rev_share_policy_id","type":"integer"},"subtype":{"description":"subtype (enum: adaccountproduct_audiences_subtype_enum_param)","type":"string"}},"required":["id","name","product_set_id"],"type":"object"}`),
		),
		AdAccount_POST_product_audiencesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_promote_pages",
			"GET promote_pages for AdAccount. Returns Page",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_promote_pagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_publisher_block_lists",
			"GET publisher_block_lists for AdAccount. Returns PublisherBlockList",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_publisher_block_listsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_publisher_block_lists",
			"POST publisher_block_lists for AdAccount. Returns PublisherBlockList. Parameters: name (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"AdAccount ID","type":"string"},"name":{"description":"name","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_POST_publisher_block_listsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_reachestimate",
			"GET reachestimate for AdAccount. Returns AdAccountReachEstimate. Parameters: adgroup_ids (list<string>), caller_id (string), concepts (string), creative_action_spec (string), is_debug (bool), object_store_url (string), targeting_spec (Targeting) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"adgroup_ids":{"description":"adgroup_ids","items":{"type":"string"},"type":"array"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"caller_id":{"description":"caller_id","type":"string"},"concepts":{"description":"concepts","type":"string"},"creative_action_spec":{"description":"creative_action_spec","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"is_debug":{"description":"is_debug","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"object_store_url":{"description":"object_store_url","type":"string"},"targeting_spec":{"description":"targeting_spec","type":"string"}},"required":["id","targeting_spec"],"type":"object"}`),
		),
		AdAccount_GET_reachestimateHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_reachfrequencypredictions",
			"GET reachfrequencypredictions for AdAccount. Returns ReachFrequencyPrediction",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_reachfrequencypredictionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_reachfrequencypredictions",
			"POST reachfrequencypredictions for AdAccount. Returns ReachFrequencyPrediction. Parameters: action (adaccountreachfrequencypredictions_action_enum_param), ad_formats (list<map>), auction_entry_option_index (unsigned int), budget (unsigned int), buying_type (adaccountreachfrequencypredictions_buying_type_enum_param), campaign_group_id (string), day_parting_schedule (list<Object>), deal_id (string), destination_id (unsigned int), destination_ids (list<string>), end_time (unsigned int), exceptions (bool), existing_campaign_id (string), expiration_time (unsigned int), frequency_cap (unsigned int), grp_buying (bool), impression (unsigned int), instream_packages (list<adaccountreachfrequencypredictions_instream_packages_enum_param>), interval_frequency_cap_reset_period (unsigned int), is_balanced_frequency (bool), is_bonus_media (bool), is_conversion_goal (bool), is_full_view (bool), is_higher_average_frequency (bool), is_reach_and_frequency_io_buying (bool), is_reserved_buying (bool), num_curve_points (unsigned int), objective (string), optimization_goal (string), prediction_mode (unsigned int), reach (unsigned int), rf_prediction_id (string), rf_prediction_id_to_release (string), rf_prediction_id_to_share (string), start_time (unsigned int), stop_time (unsigned int), story_event_type (unsigned int), target_cpm (unsigned int), target_frequency (unsigned int), target_frequency_reset_period (unsigned int), target_spec (Targeting), video_view_length_constraint (unsigned int)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"action":{"description":"action (enum: adaccountreachfrequencypredictions_action_enum_param)","type":"string"},"ad_formats":{"description":"ad_formats","items":{"additionalProperties":true,"type":"object"},"type":"array"},"auction_entry_option_index":{"description":"auction_entry_option_index","type":"integer"},"budget":{"description":"budget","type":"integer"},"buying_type":{"description":"buying_type (enum: adaccountreachfrequencypredictions_buying_type_enum_param)","type":"string"},"campaign_group_id":{"description":"campaign_group_id","type":"string"},"day_parting_schedule":{"description":"day_parting_schedule","items":{"additionalProperties":true,"type":"object"},"type":"array"},"deal_id":{"description":"deal_id","type":"string"},"destination_id":{"description":"destination_id","type":"integer"},"destination_ids":{"description":"destination_ids","items":{"type":"string"},"type":"array"},"end_time":{"description":"end_time","type":"integer"},"exceptions":{"description":"exceptions","type":"boolean"},"existing_campaign_id":{"description":"existing_campaign_id","type":"string"},"expiration_time":{"description":"expiration_time","type":"integer"},"frequency_cap":{"description":"frequency_cap","type":"integer"},"grp_buying":{"description":"grp_buying","type":"boolean"},"id":{"description":"AdAccount ID","type":"string"},"impression":{"description":"impression","type":"integer"},"instream_packages":{"description":"instream_packages","items":{"type":"string"},"type":"array"},"interval_frequency_cap_reset_period":{"description":"interval_frequency_cap_reset_period","type":"integer"},"is_balanced_frequency":{"description":"is_balanced_frequency","type":"boolean"},"is_bonus_media":{"description":"is_bonus_media","type":"boolean"},"is_conversion_goal":{"description":"is_conversion_goal","type":"boolean"},"is_full_view":{"description":"is_full_view","type":"boolean"},"is_higher_average_frequency":{"description":"is_higher_average_frequency","type":"boolean"},"is_reach_and_frequency_io_buying":{"description":"is_reach_and_frequency_io_buying","type":"boolean"},"is_reserved_buying":{"description":"is_reserved_buying","type":"boolean"},"num_curve_points":{"description":"num_curve_points","type":"integer"},"objective":{"description":"objective","type":"string"},"optimization_goal":{"description":"optimization_goal","type":"string"},"prediction_mode":{"description":"prediction_mode","type":"integer"},"reach":{"description":"reach","type":"integer"},"rf_prediction_id":{"description":"rf_prediction_id","type":"string"},"rf_prediction_id_to_release":{"description":"rf_prediction_id_to_release","type":"string"},"rf_prediction_id_to_share":{"description":"rf_prediction_id_to_share","type":"string"},"start_time":{"description":"start_time","type":"integer"},"stop_time":{"description":"stop_time","type":"integer"},"story_event_type":{"description":"story_event_type","type":"integer"},"target_cpm":{"description":"target_cpm","type":"integer"},"target_frequency":{"description":"target_frequency","type":"integer"},"target_frequency_reset_period":{"description":"target_frequency_reset_period","type":"integer"},"target_spec":{"description":"target_spec","type":"string"},"video_view_length_constraint":{"description":"video_view_length_constraint","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_POST_reachfrequencypredictionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_recommendations",
			"GET recommendations for AdAccount. Returns AdAccountRecommendations",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		AdAccount_GET_recommendationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_recommendations",
			"POST recommendations for AdAccount. Returns AdAccountRecommendations. Parameters: asc_fragmentation_parameters (map), autoflow_parameters (map), fragmentation_parameters (map), music_parameters (map), recommendation_signature (string) [required], scale_good_campaign_parameters (map)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"asc_fragmentation_parameters":{"description":"asc_fragmentation_parameters","type":"string"},"autoflow_parameters":{"description":"autoflow_parameters","type":"string"},"fragmentation_parameters":{"description":"fragmentation_parameters","type":"string"},"music_parameters":{"description":"music_parameters","type":"string"},"recommendation_signature":{"description":"recommendation_signature","type":"string"},"scale_good_campaign_parameters":{"description":"scale_good_campaign_parameters","type":"string"}},"required":["recommendation_signature"],"type":"object"}`),
		),
		AdAccount_POST_recommendationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_saved_audiences",
			"GET saved_audiences for AdAccount. Returns SavedAudience. Parameters: business_id (string), fields (list<string>), filtering (list<Object>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business_id":{"description":"business_id","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filtering":{"description":"filtering","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_saved_audiencesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_DELETE_subscribed_apps",
			"DELETE subscribed_apps for AdAccount. Returns Object. Parameters: app_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"app_id":{"description":"app_id","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_DELETE_subscribed_appsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_subscribed_apps",
			"GET subscribed_apps for AdAccount. Returns AdAccountSubscribedApps",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_subscribed_appsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_subscribed_apps",
			"POST subscribed_apps for AdAccount. Returns AdAccountSubscribedApps. Parameters: app_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"app_id":{"description":"app_id","type":"string"},"id":{"description":"AdAccount ID","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_POST_subscribed_appsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_targetingbrowse",
			"GET targetingbrowse for AdAccount. Returns AdAccountTargetingUnified. Parameters: excluded_category (string), include_nodes (bool), is_exclusion (bool), limit_type (adaccounttargetingbrowse_limit_type_enum_param), regulated_categories (list<adaccounttargetingbrowse_regulated_categories_enum_param>), regulated_countries (list<adaccounttargetingbrowse_regulated_countries_enum_param>), whitelisted_types (list<adaccounttargetingbrowse_whitelisted_types_enum_param>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"excluded_category":{"description":"excluded_category","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"include_nodes":{"description":"include_nodes","type":"boolean"},"is_exclusion":{"description":"is_exclusion","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"limit_type":{"description":"limit_type (enum: adaccounttargetingbrowse_limit_type_enum_param)","type":"string"},"regulated_categories":{"description":"regulated_categories","items":{"type":"string"},"type":"array"},"regulated_countries":{"description":"regulated_countries","items":{"type":"string"},"type":"array"},"whitelisted_types":{"description":"whitelisted_types","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_targetingbrowseHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_targetingsearch",
			"GET targetingsearch for AdAccount. Returns AdAccountTargetingUnified. Parameters: allow_only_fat_head_interests (bool), app_store (adaccounttargetingsearch_app_store_enum_param), countries (list<string>), is_account_level_brand_safety_exclusion (bool), is_account_level_employer_exclusion (bool), is_exclusion (bool), limit_type (adaccounttargetingsearch_limit_type_enum_param), objective (adaccounttargetingsearch_objective_enum_param), promoted_object (Object), q (string) [required], regulated_categories (list<adaccounttargetingsearch_regulated_categories_enum_param>), regulated_countries (list<adaccounttargetingsearch_regulated_countries_enum_param>), session_id (unsigned int), targeting_list (list<Object>), whitelisted_types (list<adaccounttargetingsearch_whitelisted_types_enum_param>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"allow_only_fat_head_interests":{"description":"allow_only_fat_head_interests","type":"boolean"},"app_store":{"description":"app_store (enum: adaccounttargetingsearch_app_store_enum_param)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"countries":{"description":"countries","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"is_account_level_brand_safety_exclusion":{"description":"is_account_level_brand_safety_exclusion","type":"boolean"},"is_account_level_employer_exclusion":{"description":"is_account_level_employer_exclusion","type":"boolean"},"is_exclusion":{"description":"is_exclusion","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"limit_type":{"description":"limit_type (enum: adaccounttargetingsearch_limit_type_enum_param)","type":"string"},"objective":{"description":"objective (enum: adaccounttargetingsearch_objective_enum_param)","type":"string"},"promoted_object":{"additionalProperties":true,"description":"promoted_object","type":"object"},"q":{"description":"q","type":"string"},"regulated_categories":{"description":"regulated_categories","items":{"type":"string"},"type":"array"},"regulated_countries":{"description":"regulated_countries","items":{"type":"string"},"type":"array"},"session_id":{"description":"session_id","type":"integer"},"targeting_list":{"description":"targeting_list","items":{"additionalProperties":true,"type":"object"},"type":"array"},"whitelisted_types":{"description":"whitelisted_types","items":{"type":"string"},"type":"array"}},"required":["q"],"type":"object"}`),
		),
		AdAccount_GET_targetingsearchHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_targetingsentencelines",
			"GET targetingsentencelines for AdAccount. Returns TargetingSentenceLine. Parameters: discard_ages (bool), discard_placements (bool), hide_targeting_spec_from_return (bool), targeting_spec (Targeting) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"discard_ages":{"description":"discard_ages","type":"boolean"},"discard_placements":{"description":"discard_placements","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"hide_targeting_spec_from_return":{"description":"hide_targeting_spec_from_return","type":"boolean"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"targeting_spec":{"description":"targeting_spec","type":"string"}},"required":["id","targeting_spec"],"type":"object"}`),
		),
		AdAccount_GET_targetingsentencelinesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_targetingsuggestions",
			"GET targetingsuggestions for AdAccount. Returns AdAccountTargetingUnified. Parameters: app_store (adaccounttargetingsuggestions_app_store_enum_param), countries (list<string>), limit_type (adaccounttargetingsuggestions_limit_type_enum_param), mode (adaccounttargetingsuggestions_mode_enum_param), objective (adaccounttargetingsuggestions_objective_enum_param), objects (Object), regulated_categories (list<adaccounttargetingsuggestions_regulated_categories_enum_param>), regulated_countries (list<adaccounttargetingsuggestions_regulated_countries_enum_param>), session_id (unsigned int), targeting_list (list<Object>), whitelisted_types (list<adaccounttargetingsuggestions_whitelisted_types_enum_param>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"app_store":{"description":"app_store (enum: adaccounttargetingsuggestions_app_store_enum_param)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"countries":{"description":"countries","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"limit_type":{"description":"limit_type (enum: adaccounttargetingsuggestions_limit_type_enum_param)","type":"string"},"mode":{"description":"mode (enum: adaccounttargetingsuggestions_mode_enum_param)","type":"string"},"objective":{"description":"objective (enum: adaccounttargetingsuggestions_objective_enum_param)","type":"string"},"objects":{"additionalProperties":true,"description":"objects","type":"object"},"regulated_categories":{"description":"regulated_categories","items":{"type":"string"},"type":"array"},"regulated_countries":{"description":"regulated_countries","items":{"type":"string"},"type":"array"},"session_id":{"description":"session_id","type":"integer"},"targeting_list":{"description":"targeting_list","items":{"additionalProperties":true,"type":"object"},"type":"array"},"whitelisted_types":{"description":"whitelisted_types","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_targetingsuggestionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_targetingvalidation",
			"GET targetingvalidation for AdAccount. Returns AdAccountTargetingUnified. Parameters: id_list (list<unsigned int>), is_exclusion (bool), name_list (list<string>), targeting_list (list<Object>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"id_list":{"description":"id_list","items":{"type":"integer"},"type":"array"},"is_exclusion":{"description":"is_exclusion","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"name_list":{"description":"name_list","items":{"type":"string"},"type":"array"},"targeting_list":{"description":"targeting_list","items":{"additionalProperties":true,"type":"object"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_targetingvalidationHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_tracking",
			"GET tracking for AdAccount. Returns AdAccountTrackingData",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_trackingHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_tracking",
			"POST tracking for AdAccount. Returns AdAccount. Parameters: tracking_specs (Object) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"AdAccount ID","type":"string"},"tracking_specs":{"additionalProperties":true,"description":"tracking_specs","type":"object"}},"required":["id","tracking_specs"],"type":"object"}`),
		),
		AdAccount_POST_trackingHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_users",
			"GET users for AdAccount. Returns AdAccountUser",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_DELETE_usersofanyaudience",
			"DELETE usersofanyaudience for AdAccount. Returns Object. Parameters: namespace (string), payload (Object), session (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"namespace":{"description":"namespace","type":"string"},"payload":{"additionalProperties":true,"description":"payload","type":"object"},"session":{"additionalProperties":true,"description":"session","type":"object"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_DELETE_usersofanyaudienceHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_value_rule_set",
			"GET value_rule_set for AdAccount. Returns AdsValueAdjustmentRuleCollection. Parameters: product_type (adaccountvalue_rule_set_product_type_enum_param), status (adaccountvalue_rule_set_status_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"product_type":{"description":"product_type (enum: adaccountvalue_rule_set_product_type_enum_param)","type":"string"},"status":{"description":"status (enum: adaccountvalue_rule_set_status_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_value_rule_setHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_value_rule_set",
			"POST value_rule_set for AdAccount. Returns AdsValueAdjustmentRuleCollection. Parameters: name (string) [required], product_type (adaccountvalue_rule_set_product_type_enum_param), rules (list<map>) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"AdAccount ID","type":"string"},"name":{"description":"name","type":"string"},"product_type":{"description":"product_type (enum: adaccountvalue_rule_set_product_type_enum_param)","type":"string"},"rules":{"description":"rules","items":{"additionalProperties":true,"type":"object"},"type":"array"}},"required":["id","name","rules"],"type":"object"}`),
		),
		AdAccount_POST_value_rule_setHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_video_ads",
			"GET video_ads for AdAccount. Returns AdVideo. Parameters: since (datetime), until (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"since":{"description":"since","type":"string"},"until":{"description":"until","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_video_adsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_video_ads",
			"POST video_ads for AdAccount. Returns AdVideo. Parameters: description (string), privacy (string), title (string), upload_phase (adaccountvideo_ads_upload_phase_enum_param) [required], video_id (string), video_state (adaccountvideo_ads_video_state_enum_param)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"description":{"description":"description","type":"string"},"id":{"description":"AdAccount ID","type":"string"},"privacy":{"description":"privacy","type":"string"},"title":{"description":"title","type":"string"},"upload_phase":{"description":"upload_phase (enum: adaccountvideo_ads_upload_phase_enum_param)","type":"string"},"video_id":{"description":"video_id","type":"string"},"video_state":{"description":"video_state (enum: adaccountvideo_ads_video_state_enum_param)","type":"string"}},"required":["id","upload_phase"],"type":"object"}`),
		),
		AdAccount_POST_video_adsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_GET_",
			"GET  for AdAccount. Returns AdAccount",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccount_POST_",
			"POST  for AdAccount. Returns AdAccount. Parameters: agency_client_declaration (map), attribution_spec (list<Object>), business_info (map), currency (adaccount_currency), custom_audience_info (map), default_dsa_beneficiary (string), default_dsa_payor (string), end_advertiser (string), existing_customers (list<string>), is_ba_skip_delayed_eligible (bool), is_notifications_enabled (bool), media_agency (string), name (string), partner (string), spend_cap (float), spend_cap_action (string), timezone_id (unsigned int), tos_accepted (map)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"agency_client_declaration":{"description":"agency_client_declaration","type":"string"},"attribution_spec":{"description":"attribution_spec","items":{"additionalProperties":true,"type":"object"},"type":"array"},"business_info":{"description":"business_info","type":"string"},"currency":{"description":"currency (enum: adaccount_currency)","type":"string"},"custom_audience_info":{"description":"custom_audience_info","type":"string"},"default_dsa_beneficiary":{"description":"default_dsa_beneficiary","type":"string"},"default_dsa_payor":{"description":"default_dsa_payor","type":"string"},"end_advertiser":{"description":"end_advertiser","type":"string"},"existing_customers":{"description":"existing_customers","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","type":"string"},"is_ba_skip_delayed_eligible":{"description":"is_ba_skip_delayed_eligible","type":"boolean"},"is_notifications_enabled":{"description":"is_notifications_enabled","type":"boolean"},"media_agency":{"description":"media_agency","type":"string"},"name":{"description":"name","type":"string"},"partner":{"description":"partner","type":"string"},"spend_cap":{"description":"spend_cap","type":"number"},"spend_cap_action":{"description":"spend_cap_action","type":"string"},"timezone_id":{"description":"timezone_id","type":"integer"},"tos_accepted":{"description":"tos_accepted","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdAccount_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccountAgencyFeeConfig_GET_",
			"GET  for AdAccountAgencyFeeConfig. Returns AdAccountAgencyFeeConfig",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccountAgencyFeeConfig ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccountAgencyFeeConfig_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccountCreationRequest_GET_adaccounts",
			"GET adaccounts for AdAccountCreationRequest. Returns AdAccount",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccountCreationRequest ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccountCreationRequest_GET_adaccountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccountCreationRequest_GET_",
			"GET  for AdAccountCreationRequest. Returns AdAccountCreationRequest",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccountCreationRequest ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccountCreationRequest_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAccountUserSettings_GET_",
			"GET  for AdAccountUserSettings. Returns AdAccountUserSettings",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccountUserSettings ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAccountUserSettings_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAsyncRequest_DELETE_",
			"DELETE  for AdAsyncRequest. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAsyncRequest ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAsyncRequest_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAsyncRequest_GET_",
			"GET  for AdAsyncRequest. Returns AdAsyncRequest",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAsyncRequest ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAsyncRequest_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAsyncRequestSet_GET_requests",
			"GET requests for AdAsyncRequestSet. Returns AdAsyncRequest. Parameters: statuses (list<adasyncrequestsetrequests_statuses_enum_param>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAsyncRequestSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"statuses":{"description":"statuses","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		AdAsyncRequestSet_GET_requestsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAsyncRequestSet_DELETE_",
			"DELETE  for AdAsyncRequestSet. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAsyncRequestSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAsyncRequestSet_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAsyncRequestSet_GET_",
			"GET  for AdAsyncRequestSet. Returns AdAsyncRequestSet",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAsyncRequestSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdAsyncRequestSet_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdAsyncRequestSet_POST_",
			"POST  for AdAsyncRequestSet. Returns AdAsyncRequestSet. Parameters: name (string), notification_mode (adasyncrequestset_notification_mode), notification_uri (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"AdAsyncRequestSet ID","type":"string"},"name":{"description":"name","type":"string"},"notification_mode":{"description":"notification_mode (enum: adasyncrequestset_notification_mode)","type":"string"},"notification_uri":{"description":"notification_uri","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdAsyncRequestSet_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdColumnSizes_GET_",
			"GET  for AdColumnSizes. Returns AdColumnSizes",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdColumnSizes ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdColumnSizes_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdCreationPackageConfig_GET_",
			"GET  for AdCreationPackageConfig. Returns AdCreationPackageConfig",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdCreationPackageConfig ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdCreationPackageConfig_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdCreative_POST_adlabels",
			"POST adlabels for AdCreative. Returns AdCreative. Parameters: adlabels (list<Object>) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"adlabels":{"description":"adlabels","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"AdCreative ID","type":"string"}},"required":["id","adlabels"],"type":"object"}`),
		),
		AdCreative_POST_adlabelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdCreative_GET_creative_insights",
			"GET creative_insights for AdCreative. Returns AdCreativeInsights",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdCreative ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdCreative_GET_creative_insightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdCreative_GET_previews",
			"GET previews for AdCreative. Returns AdPreview. Parameters: ad_format (adcreativepreviews_ad_format_enum_param) [required], creative_feature (adcreativepreviews_creative_feature_enum_param), dynamic_asset_label (string), dynamic_creative_spec (Object), dynamic_customization (Object), end_date (datetime), height (unsigned int), locale (string), place_page_id (int), post (Object), product_item_ids (list<string>), render_type (adcreativepreviews_render_type_enum_param), start_date (datetime), width (unsigned int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"ad_format":{"description":"ad_format (enum: adcreativepreviews_ad_format_enum_param)","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"creative_feature":{"description":"creative_feature (enum: adcreativepreviews_creative_feature_enum_param)","type":"string"},"dynamic_asset_label":{"description":"dynamic_asset_label","type":"string"},"dynamic_creative_spec":{"additionalProperties":true,"description":"dynamic_creative_spec","type":"object"},"dynamic_customization":{"additionalProperties":true,"description":"dynamic_customization","type":"object"},"end_date":{"description":"end_date","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"height":{"description":"height","type":"integer"},"id":{"description":"AdCreative ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"locale":{"description":"locale","type":"string"},"place_page_id":{"description":"place_page_id","type":"integer"},"post":{"additionalProperties":true,"description":"post","type":"object"},"product_item_ids":{"description":"product_item_ids","items":{"type":"string"},"type":"array"},"render_type":{"description":"render_type (enum: adcreativepreviews_render_type_enum_param)","type":"string"},"start_date":{"description":"start_date","type":"string"},"width":{"description":"width","type":"integer"}},"required":["id","ad_format"],"type":"object"}`),
		),
		AdCreative_GET_previewsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdCreative_DELETE_",
			"DELETE  for AdCreative. Returns Object. Parameters: account_id (string), adlabels (list<Object>), name (string), status (adcreative_status)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"account_id":{"description":"account_id","type":"string"},"adlabels":{"description":"adlabels","items":{"additionalProperties":true,"type":"object"},"type":"array"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdCreative ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"name":{"description":"name","type":"string"},"status":{"description":"status (enum: adcreative_status)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdCreative_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdCreative_GET_",
			"GET  for AdCreative. Returns AdCreative. Parameters: thumbnail_height (unsigned int), thumbnail_width (unsigned int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdCreative ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"thumbnail_height":{"description":"thumbnail_height","type":"integer"},"thumbnail_width":{"description":"thumbnail_width","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdCreative_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdCreative_POST_",
			"POST  for AdCreative. Returns AdCreative. Parameters: account_id (string), adlabels (list<Object>), name (string), status (adcreative_status)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"account_id":{"description":"account_id","type":"string"},"adlabels":{"description":"adlabels","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"AdCreative ID","type":"string"},"name":{"description":"name","type":"string"},"status":{"description":"status (enum: adcreative_status)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdCreative_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdCustomDerivedMetrics_GET_",
			"GET  for AdCustomDerivedMetrics. Returns AdCustomDerivedMetrics",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdCustomDerivedMetrics ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdCustomDerivedMetrics_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdDraft_GET_",
			"GET  for AdDraft. Returns AdDraft",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdDraft ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdDraft_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdExportPreset_GET_",
			"GET  for AdExportPreset. Returns AdExportPreset",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdExportPreset ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdExportPreset_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdImage_GET_",
			"GET  for AdImage. Returns AdImage",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdImage ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdImage_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdLabel_GET_adcreatives",
			"GET adcreatives for AdLabel. Returns AdCreative",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdLabel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdLabel_GET_adcreativesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdLabel_GET_ads",
			"GET ads for AdLabel. Returns Ad",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdLabel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdLabel_GET_adsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdLabel_GET_adsets",
			"GET adsets for AdLabel. Returns AdSet",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdLabel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdLabel_GET_adsetsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdLabel_GET_campaigns",
			"GET campaigns for AdLabel. Returns Campaign",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdLabel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdLabel_GET_campaignsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdLabel_DELETE_",
			"DELETE  for AdLabel. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdLabel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdLabel_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdLabel_GET_",
			"GET  for AdLabel. Returns AdLabel",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdLabel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdLabel_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdLabel_POST_",
			"POST  for AdLabel. Returns AdLabel. Parameters: name (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"AdLabel ID","type":"string"},"name":{"description":"name","type":"string"}},"required":["id","name"],"type":"object"}`),
		),
		AdLabel_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdLightAdgroup_GET_",
			"GET  for AdLightAdgroup. Returns AdLightAdgroup",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdLightAdgroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdLightAdgroup_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdLightCampaign_GET_",
			"GET  for AdLightCampaign. Returns AdLightCampaign",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdLightCampaign ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdLightCampaign_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdLightCampaignGroup_GET_",
			"GET  for AdLightCampaignGroup. Returns AdLightCampaignGroup",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdLightCampaignGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdLightCampaignGroup_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdMonetizationProperty_GET_adnetworkanalytics",
			"GET adnetworkanalytics for AdMonetizationProperty. Returns AdNetworkAnalyticsSyncQueryResult. Parameters: aggregation_period (admonetizationpropertyadnetworkanalytics_aggregation_period_enum_param), breakdowns (list<admonetizationpropertyadnetworkanalytics_breakdowns_enum_param>), filters (list<map>), limit (unsigned int), metrics (list<admonetizationpropertyadnetworkanalytics_metrics_enum_param>) [required], ordering_column (admonetizationpropertyadnetworkanalytics_ordering_column_enum_param), ordering_type (admonetizationpropertyadnetworkanalytics_ordering_type_enum_param), should_include_until (bool), since (datetime), until (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"aggregation_period":{"description":"aggregation_period (enum: admonetizationpropertyadnetworkanalytics_aggregation_period_enum_param)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"breakdowns":{"description":"breakdowns","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filters":{"description":"filters","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"AdMonetizationProperty ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"metrics":{"description":"metrics","items":{"type":"string"},"type":"array"},"ordering_column":{"description":"ordering_column (enum: admonetizationpropertyadnetworkanalytics_ordering_column_enum_param)","type":"string"},"ordering_type":{"description":"ordering_type (enum: admonetizationpropertyadnetworkanalytics_ordering_type_enum_param)","type":"string"},"should_include_until":{"description":"should_include_until","type":"boolean"},"since":{"description":"since","type":"string"},"until":{"description":"until","type":"string"}},"required":["id","metrics"],"type":"object"}`),
		),
		AdMonetizationProperty_GET_adnetworkanalyticsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdMonetizationProperty_POST_adnetworkanalytics",
			"POST adnetworkanalytics for AdMonetizationProperty. Returns AdMonetizationProperty. Parameters: aggregation_period (admonetizationpropertyadnetworkanalytics_aggregation_period_enum_param), breakdowns (list<admonetizationpropertyadnetworkanalytics_breakdowns_enum_param>), filters (list<Object>), limit (int), metrics (list<admonetizationpropertyadnetworkanalytics_metrics_enum_param>) [required], ordering_column (admonetizationpropertyadnetworkanalytics_ordering_column_enum_param), ordering_type (admonetizationpropertyadnetworkanalytics_ordering_type_enum_param), since (datetime), until (datetime)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"aggregation_period":{"description":"aggregation_period (enum: admonetizationpropertyadnetworkanalytics_aggregation_period_enum_param)","type":"string"},"breakdowns":{"description":"breakdowns","items":{"type":"string"},"type":"array"},"filters":{"description":"filters","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"AdMonetizationProperty ID","type":"string"},"limit":{"description":"limit","type":"integer"},"metrics":{"description":"metrics","items":{"type":"string"},"type":"array"},"ordering_column":{"description":"ordering_column (enum: admonetizationpropertyadnetworkanalytics_ordering_column_enum_param)","type":"string"},"ordering_type":{"description":"ordering_type (enum: admonetizationpropertyadnetworkanalytics_ordering_type_enum_param)","type":"string"},"since":{"description":"since","type":"string"},"until":{"description":"until","type":"string"}},"required":["id","metrics"],"type":"object"}`),
		),
		AdMonetizationProperty_POST_adnetworkanalyticsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdMonetizationProperty_GET_adnetworkanalytics_results",
			"GET adnetworkanalytics_results for AdMonetizationProperty. Returns AdNetworkAnalyticsAsyncQueryResult. Parameters: query_ids (list<string>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdMonetizationProperty ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"query_ids":{"description":"query_ids","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		AdMonetizationProperty_GET_adnetworkanalytics_resultsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdMonetizationProperty_GET_",
			"GET  for AdMonetizationProperty. Returns AdMonetizationProperty",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdMonetizationProperty ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdMonetizationProperty_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdPlacePageSet_GET_",
			"GET  for AdPlacePageSet. Returns AdPlacePageSet",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdPlacePageSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdPlacePageSet_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdPlacement_GET_",
			"GET  for AdPlacement. Returns AdPlacement",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdPlacement ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdPlacement_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdProposal_GET_",
			"GET  for AdProposal. Returns AdProposal",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdProposal ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdProposal_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdReportRun_GET_insights",
			"GET insights for AdReportRun. Returns AdsInsights",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdReportRun ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdReportRun_GET_insightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdReportRun_GET_",
			"GET  for AdReportRun. Returns AdReportRun",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdReportRun ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdReportRun_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdRule_POST_execute",
			"POST execute for AdRule. Returns Object",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"AdRule ID","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdRule_POST_executeHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdRule_GET_history",
			"GET history for AdRule. Returns AdRuleHistory. Parameters: action (adrulehistory_action_enum_param), hide_no_changes (bool), object_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"action":{"description":"action (enum: adrulehistory_action_enum_param)","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"hide_no_changes":{"description":"hide_no_changes","type":"boolean"},"id":{"description":"AdRule ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"object_id":{"description":"object_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdRule_GET_historyHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdRule_POST_preview",
			"POST preview for AdRule. Returns AdRule",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"AdRule ID","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdRule_POST_previewHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdRule_DELETE_",
			"DELETE  for AdRule. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdRule ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdRule_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdRule_GET_",
			"GET  for AdRule. Returns AdRule",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdRule ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdRule_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdRule_POST_",
			"POST  for AdRule. Returns AdRule. Parameters: evaluation_spec (Object), execution_spec (Object), name (string), schedule_spec (Object), status (adrule_status)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"evaluation_spec":{"additionalProperties":true,"description":"evaluation_spec","type":"object"},"execution_spec":{"additionalProperties":true,"description":"execution_spec","type":"object"},"id":{"description":"AdRule ID","type":"string"},"name":{"description":"name","type":"string"},"schedule_spec":{"additionalProperties":true,"description":"schedule_spec","type":"object"},"status":{"description":"status (enum: adrule_status)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdRule_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdRuleEvaluationSpec_GET_",
			"GET  for AdRuleEvaluationSpec. Returns AdRuleEvaluationSpec",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdRuleEvaluationSpec ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdRuleEvaluationSpec_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdRuleExecutionSpec_GET_",
			"GET  for AdRuleExecutionSpec. Returns AdRuleExecutionSpec",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdRuleExecutionSpec ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdRuleExecutionSpec_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdSavedKeywords_GET_",
			"GET  for AdSavedKeywords. Returns AdSavedKeywords",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdSavedKeywords ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdSavedKeywords_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdSavedLocation_GET_",
			"GET  for AdSavedLocation. Returns AdSavedLocation",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdSavedLocation ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdSavedLocation_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdSavedReport_GET_",
			"GET  for AdSavedReport. Returns AdSavedReport",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdSavedReport ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdSavedReport_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdSet_GET_activities",
			"GET activities for AdSet. Returns AdActivity. Parameters: after (string), business_id (string), category (adcampaignactivities_category_enum_param), limit (int), since (datetime), uid (int), until (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business_id":{"description":"business_id","type":"string"},"category":{"description":"category (enum: adcampaignactivities_category_enum_param)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"since":{"description":"since","type":"string"},"uid":{"description":"uid","type":"integer"},"until":{"description":"until","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdSet_GET_activitiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdSet_GET_ad_studies",
			"GET ad_studies for AdSet. Returns AdStudy",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdSet_GET_ad_studiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdSet_GET_adcreatives",
			"GET adcreatives for AdSet. Returns AdCreative",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdSet_GET_adcreativesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdSet_DELETE_adlabels",
			"DELETE adlabels for AdSet. Returns Object. Parameters: adlabels (list<Object>) [required], execution_options (list<adcampaignadlabels_execution_options_enum_param>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"adlabels":{"description":"adlabels","items":{"additionalProperties":true,"type":"object"},"type":"array"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"execution_options":{"description":"execution_options","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","adlabels"],"type":"object"}`),
		),
		AdSet_DELETE_adlabelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdSet_POST_adlabels",
			"POST adlabels for AdSet. Returns AdSet. Parameters: adlabels (list<Object>) [required], execution_options (list<adcampaignadlabels_execution_options_enum_param>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"adlabels":{"description":"adlabels","items":{"additionalProperties":true,"type":"object"},"type":"array"},"execution_options":{"description":"execution_options","items":{"type":"string"},"type":"array"},"id":{"description":"AdSet ID","type":"string"}},"required":["id","adlabels"],"type":"object"}`),
		),
		AdSet_POST_adlabelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdSet_GET_adrules_governed",
			"GET adrules_governed for AdSet. Returns AdRule. Parameters: pass_evaluation (bool)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"pass_evaluation":{"description":"pass_evaluation","type":"boolean"}},"required":["id"],"type":"object"}`),
		),
		AdSet_GET_adrules_governedHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdSet_GET_ads",
			"GET ads for AdSet. Returns Ad. Parameters: date_preset (adcampaignads_date_preset_enum_param), effective_status (list<string>), time_range (map), updated_since (int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"date_preset":{"description":"date_preset (enum: adcampaignads_date_preset_enum_param)","type":"string"},"effective_status":{"description":"effective_status","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"time_range":{"description":"time_range","type":"string"},"updated_since":{"description":"updated_since","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdSet_GET_adsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdSet_GET_asyncadrequests",
			"GET asyncadrequests for AdSet. Returns AdAsyncRequest. Parameters: statuses (list<adcampaignasyncadrequests_statuses_enum_param>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"statuses":{"description":"statuses","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		AdSet_GET_asyncadrequestsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdSet_POST_budget_schedules",
			"POST budget_schedules for AdSet. Returns HighDemandPeriod. Parameters: budget_value (unsigned int) [required], budget_value_type (adcampaignbudget_schedules_budget_value_type_enum_param) [required], time_end (unsigned int) [required], time_start (unsigned int) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"budget_value":{"description":"budget_value","type":"integer"},"budget_value_type":{"description":"budget_value_type (enum: adcampaignbudget_schedules_budget_value_type_enum_param)","type":"string"},"id":{"description":"AdSet ID","type":"string"},"time_end":{"description":"time_end","type":"integer"},"time_start":{"description":"time_start","type":"integer"}},"required":["id","budget_value","budget_value_type","time_end","time_start"],"type":"object"}`),
		),
		AdSet_POST_budget_schedulesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdSet_GET_copies",
			"GET copies for AdSet. Returns AdSet. Parameters: date_preset (adcampaigncopies_date_preset_enum_param), effective_status (list<adcampaigncopies_effective_status_enum_param>), is_completed (bool), time_range (map)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"date_preset":{"description":"date_preset (enum: adcampaigncopies_date_preset_enum_param)","type":"string"},"effective_status":{"description":"effective_status","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdSet ID","type":"string"},"is_completed":{"description":"is_completed","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"time_range":{"description":"time_range","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdSet_GET_copiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdSet_POST_copies",
			"POST copies for AdSet. Returns AdSet. Parameters: campaign_id (string), create_dco_adset (bool), deep_copy (bool), end_time (datetime), rename_options (Object), start_time (datetime), status_option (adcampaigncopies_status_option_enum_param)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"campaign_id":{"description":"campaign_id","type":"string"},"create_dco_adset":{"description":"create_dco_adset","type":"boolean"},"deep_copy":{"description":"deep_copy","type":"boolean"},"end_time":{"description":"end_time","type":"string"},"id":{"description":"AdSet ID","type":"string"},"rename_options":{"additionalProperties":true,"description":"rename_options","type":"object"},"start_time":{"description":"start_time","type":"string"},"status_option":{"description":"status_option (enum: adcampaigncopies_status_option_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdSet_POST_copiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdSet_GET_delivery_estimate",
			"GET delivery_estimate for AdSet. Returns AdCampaignDeliveryEstimate. Parameters: optimization_goal (adcampaigndelivery_estimate_optimization_goal_enum_param), promoted_object (Object), targeting_spec (Targeting)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"optimization_goal":{"description":"optimization_goal (enum: adcampaigndelivery_estimate_optimization_goal_enum_param)","type":"string"},"promoted_object":{"additionalProperties":true,"description":"promoted_object","type":"object"},"targeting_spec":{"description":"targeting_spec","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdSet_GET_delivery_estimateHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdSet_GET_insights",
			"GET insights for AdSet. Returns AdsInsights. Parameters: action_attribution_windows (list<adcampaigninsights_action_attribution_windows_enum_param>), action_breakdowns (list<adcampaigninsights_action_breakdowns_enum_param>), action_report_time (adcampaigninsights_action_report_time_enum_param), breakdowns (list<adcampaigninsights_breakdowns_enum_param>), date_preset (adcampaigninsights_date_preset_enum_param), default_summary (bool), export_columns (list<string>), export_format (string), export_name (string), fields (list<string>), filtering (list<Object>), level (adcampaigninsights_level_enum_param), limit (int), product_id_limit (int), sort (list<string>), summary (list<string>), summary_action_breakdowns (list<adcampaigninsights_summary_action_breakdowns_enum_param>), time_increment (string), time_range (map), time_ranges (list<map>), use_account_attribution_setting (bool), use_unified_attribution_setting (bool)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"action_attribution_windows":{"description":"action_attribution_windows","items":{"type":"string"},"type":"array"},"action_breakdowns":{"description":"action_breakdowns","items":{"type":"string"},"type":"array"},"action_report_time":{"description":"action_report_time (enum: adcampaigninsights_action_report_time_enum_param)","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"breakdowns":{"description":"breakdowns","items":{"type":"string"},"type":"array"},"date_preset":{"description":"date_preset (enum: adcampaigninsights_date_preset_enum_param)","type":"string"},"default_summary":{"description":"default_summary","type":"boolean"},"export_columns":{"description":"export_columns","items":{"type":"string"},"type":"array"},"export_format":{"description":"export_format","type":"string"},"export_name":{"description":"export_name","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filtering":{"description":"filtering","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"AdSet ID","type":"string"},"level":{"description":"level (enum: adcampaigninsights_level_enum_param)","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"product_id_limit":{"description":"product_id_limit","type":"integer"},"sort":{"description":"sort","items":{"type":"string"},"type":"array"},"summary":{"description":"summary","items":{"type":"string"},"type":"array"},"summary_action_breakdowns":{"description":"summary_action_breakdowns","items":{"type":"string"},"type":"array"},"time_increment":{"description":"time_increment","type":"string"},"time_range":{"description":"time_range","type":"string"},"time_ranges":{"description":"time_ranges","items":{"additionalProperties":true,"type":"object"},"type":"array"},"use_account_attribution_setting":{"description":"use_account_attribution_setting","type":"boolean"},"use_unified_attribution_setting":{"description":"use_unified_attribution_setting","type":"boolean"}},"required":["id"],"type":"object"}`),
		),
		AdSet_GET_insightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdSet_POST_insights",
			"POST insights for AdSet. Returns AdReportRun. Parameters: action_attribution_windows (list<adcampaigninsights_action_attribution_windows_enum_param>), action_breakdowns (list<adcampaigninsights_action_breakdowns_enum_param>), action_report_time (adcampaigninsights_action_report_time_enum_param), breakdowns (list<adcampaigninsights_breakdowns_enum_param>), date_preset (adcampaigninsights_date_preset_enum_param), default_summary (bool), export_columns (list<string>), export_format (string), export_name (string), fields (list<string>), filtering (list<Object>), level (adcampaigninsights_level_enum_param), limit (int), product_id_limit (int), sort (list<string>), summary (list<string>), summary_action_breakdowns (list<adcampaigninsights_summary_action_breakdowns_enum_param>), time_increment (string), time_range (map), time_ranges (list<map>), use_account_attribution_setting (bool), use_unified_attribution_setting (bool)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"action_attribution_windows":{"description":"action_attribution_windows","items":{"type":"string"},"type":"array"},"action_breakdowns":{"description":"action_breakdowns","items":{"type":"string"},"type":"array"},"action_report_time":{"description":"action_report_time (enum: adcampaigninsights_action_report_time_enum_param)","type":"string"},"breakdowns":{"description":"breakdowns","items":{"type":"string"},"type":"array"},"date_preset":{"description":"date_preset (enum: adcampaigninsights_date_preset_enum_param)","type":"string"},"default_summary":{"description":"default_summary","type":"boolean"},"export_columns":{"description":"export_columns","items":{"type":"string"},"type":"array"},"export_format":{"description":"export_format","type":"string"},"export_name":{"description":"export_name","type":"string"},"fields":{"description":"fields","items":{"type":"string"},"type":"array"},"filtering":{"description":"filtering","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"AdSet ID","type":"string"},"level":{"description":"level (enum: adcampaigninsights_level_enum_param)","type":"string"},"limit":{"description":"limit","type":"integer"},"product_id_limit":{"description":"product_id_limit","type":"integer"},"sort":{"description":"sort","items":{"type":"string"},"type":"array"},"summary":{"description":"summary","items":{"type":"string"},"type":"array"},"summary_action_breakdowns":{"description":"summary_action_breakdowns","items":{"type":"string"},"type":"array"},"time_increment":{"description":"time_increment","type":"string"},"time_range":{"description":"time_range","type":"string"},"time_ranges":{"description":"time_ranges","items":{"additionalProperties":true,"type":"object"},"type":"array"},"use_account_attribution_setting":{"description":"use_account_attribution_setting","type":"boolean"},"use_unified_attribution_setting":{"description":"use_unified_attribution_setting","type":"boolean"}},"required":["id"],"type":"object"}`),
		),
		AdSet_POST_insightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdSet_GET_message_delivery_estimate",
			"GET message_delivery_estimate for AdSet. Returns MessageDeliveryEstimate. Parameters: bid_amount (unsigned int), daily_budget (unsigned int), is_direct_send_campaign (bool), lifetime_budget (unsigned int), lifetime_in_days (unsigned int), optimization_goal (adcampaignmessage_delivery_estimate_optimization_goal_enum_param), pacing_type (adcampaignmessage_delivery_estimate_pacing_type_enum_param), promoted_object (Object), targeting_spec (Targeting)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bid_amount":{"description":"bid_amount","type":"integer"},"daily_budget":{"description":"daily_budget","type":"integer"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"is_direct_send_campaign":{"description":"is_direct_send_campaign","type":"boolean"},"lifetime_budget":{"description":"lifetime_budget","type":"integer"},"lifetime_in_days":{"description":"lifetime_in_days","type":"integer"},"limit":{"description":"Maximum number of results","type":"integer"},"optimization_goal":{"description":"optimization_goal (enum: adcampaignmessage_delivery_estimate_optimization_goal_enum_param)","type":"string"},"pacing_type":{"description":"pacing_type (enum: adcampaignmessage_delivery_estimate_pacing_type_enum_param)","type":"string"},"promoted_object":{"additionalProperties":true,"description":"promoted_object","type":"object"},"targeting_spec":{"description":"targeting_spec","type":"string"}},"type":"object"}`),
		),
		AdSet_GET_message_delivery_estimateHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdSet_GET_targetingsentencelines",
			"GET targetingsentencelines for AdSet. Returns TargetingSentenceLine",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdSet_GET_targetingsentencelinesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdSet_DELETE_",
			"DELETE  for AdSet. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdSet_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdSet_GET_",
			"GET  for AdSet. Returns AdSet. Parameters: am_call_tags (map), date_preset (adcampaign_date_preset), from_adtable (bool), time_range (map)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"am_call_tags":{"description":"am_call_tags","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"date_preset":{"description":"date_preset (enum: adcampaign_date_preset)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"from_adtable":{"description":"from_adtable","type":"boolean"},"id":{"description":"AdSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"time_range":{"description":"time_range","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdSet_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdSet_POST_",
			"POST  for AdSet. Returns AdSet. Parameters: account_id (string), adlabels (list<Object>), adset_schedule (list<Object>), attribution_spec (list<map>), bid_adjustments (Object), bid_amount (int), bid_constraints (map<string, Object>), bid_strategy (adcampaign_bid_strategy), billing_event (adcampaign_billing_event), campaign_attribution (Object), campaign_spec (Object), creative_sequence (list<string>), creative_sequence_repetition_pattern (adcampaign_creative_sequence_repetition_pattern), daily_budget (unsigned int), daily_imps (unsigned int), daily_min_spend_target (unsigned int), daily_spend_cap (unsigned int), date_format (string), destination_type (adcampaign_destination_type), dsa_beneficiary (string), dsa_payor (string), end_time (datetime), execution_options (list<adcampaign_execution_options>), existing_customer_budget_percentage (unsigned int), full_funnel_exploration_mode (adcampaign_full_funnel_exploration_mode), is_ba_skip_delayed_eligible (bool), is_incremental_attribution_enabled (bool), is_sac_cfca_terms_certified (bool), lifetime_budget (unsigned int), lifetime_imps (unsigned int), lifetime_min_spend_target (unsigned int), lifetime_spend_cap (unsigned int), max_budget_spend_percentage (unsigned int), min_budget_spend_percentage (unsigned int), multi_optimization_goal_weight (adcampaign_multi_optimization_goal_weight), name (string), optimization_goal (adcampaign_optimization_goal), optimization_sub_event (adcampaign_optimization_sub_event), pacing_type (list<string>), promoted_object (Object), rb_prediction_id (string), regional_regulated_categories (list<adcampaign_regional_regulated_categories>), regional_regulation_identities (map), rf_prediction_id (string), start_time (datetime), status (adcampaign_status), targeting (Targeting), time_based_ad_rotation_id_blocks (list<list<unsigned int>>), time_based_ad_rotation_intervals (list<unsigned int>), time_start (datetime), time_stop (datetime), tune_for_category (adcampaign_tune_for_category)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"account_id":{"description":"account_id","type":"string"},"adlabels":{"description":"adlabels","items":{"additionalProperties":true,"type":"object"},"type":"array"},"adset_schedule":{"description":"adset_schedule","items":{"additionalProperties":true,"type":"object"},"type":"array"},"attribution_spec":{"description":"attribution_spec","items":{"additionalProperties":true,"type":"object"},"type":"array"},"bid_adjustments":{"additionalProperties":true,"description":"bid_adjustments","type":"object"},"bid_amount":{"description":"bid_amount","type":"integer"},"bid_constraints":{"additionalProperties":true,"description":"bid_constraints","type":"object"},"bid_strategy":{"description":"bid_strategy (enum: adcampaign_bid_strategy)","type":"string"},"billing_event":{"description":"billing_event (enum: adcampaign_billing_event)","type":"string"},"campaign_attribution":{"additionalProperties":true,"description":"campaign_attribution","type":"object"},"campaign_spec":{"additionalProperties":true,"description":"campaign_spec","type":"object"},"creative_sequence":{"description":"creative_sequence","items":{"type":"string"},"type":"array"},"creative_sequence_repetition_pattern":{"description":"creative_sequence_repetition_pattern (enum: adcampaign_creative_sequence_repetition_pattern)","type":"string"},"daily_budget":{"description":"daily_budget","type":"integer"},"daily_imps":{"description":"daily_imps","type":"integer"},"daily_min_spend_target":{"description":"daily_min_spend_target","type":"integer"},"daily_spend_cap":{"description":"daily_spend_cap","type":"integer"},"date_format":{"description":"date_format","type":"string"},"destination_type":{"description":"destination_type (enum: adcampaign_destination_type)","type":"string"},"dsa_beneficiary":{"description":"dsa_beneficiary","type":"string"},"dsa_payor":{"description":"dsa_payor","type":"string"},"end_time":{"description":"end_time","type":"string"},"execution_options":{"description":"execution_options","items":{"type":"string"},"type":"array"},"existing_customer_budget_percentage":{"description":"existing_customer_budget_percentage","type":"integer"},"full_funnel_exploration_mode":{"description":"full_funnel_exploration_mode (enum: adcampaign_full_funnel_exploration_mode)","type":"string"},"id":{"description":"AdSet ID","type":"string"},"is_ba_skip_delayed_eligible":{"description":"is_ba_skip_delayed_eligible","type":"boolean"},"is_incremental_attribution_enabled":{"description":"is_incremental_attribution_enabled","type":"boolean"},"is_sac_cfca_terms_certified":{"description":"is_sac_cfca_terms_certified","type":"boolean"},"lifetime_budget":{"description":"lifetime_budget","type":"integer"},"lifetime_imps":{"description":"lifetime_imps","type":"integer"},"lifetime_min_spend_target":{"description":"lifetime_min_spend_target","type":"integer"},"lifetime_spend_cap":{"description":"lifetime_spend_cap","type":"integer"},"max_budget_spend_percentage":{"description":"max_budget_spend_percentage","type":"integer"},"min_budget_spend_percentage":{"description":"min_budget_spend_percentage","type":"integer"},"multi_optimization_goal_weight":{"description":"multi_optimization_goal_weight (enum: adcampaign_multi_optimization_goal_weight)","type":"string"},"name":{"description":"name","type":"string"},"optimization_goal":{"description":"optimization_goal (enum: adcampaign_optimization_goal)","type":"string"},"optimization_sub_event":{"description":"optimization_sub_event (enum: adcampaign_optimization_sub_event)","type":"string"},"pacing_type":{"description":"pacing_type","items":{"type":"string"},"type":"array"},"promoted_object":{"additionalProperties":true,"description":"promoted_object","type":"object"},"rb_prediction_id":{"description":"rb_prediction_id","type":"string"},"regional_regulated_categories":{"description":"regional_regulated_categories","items":{"type":"string"},"type":"array"},"regional_regulation_identities":{"description":"regional_regulation_identities","type":"string"},"rf_prediction_id":{"description":"rf_prediction_id","type":"string"},"start_time":{"description":"start_time","type":"string"},"status":{"description":"status (enum: adcampaign_status)","type":"string"},"targeting":{"description":"targeting","type":"string"},"time_based_ad_rotation_id_blocks":{"description":"time_based_ad_rotation_id_blocks","items":{"type":"string"},"type":"array"},"time_based_ad_rotation_intervals":{"description":"time_based_ad_rotation_intervals","items":{"type":"integer"},"type":"array"},"time_start":{"description":"time_start","type":"string"},"time_stop":{"description":"time_stop","type":"string"},"tune_for_category":{"description":"tune_for_category (enum: adcampaign_tune_for_category)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdSet_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdStudy_GET_cells",
			"GET cells for AdStudy. Returns AdStudyCell",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdStudy ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdStudy_GET_cellsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdStudy_POST_checkpoint",
			"POST checkpoint for AdStudy. Returns AdStudy. Parameters: checkpoint_data (string) [required], checkpoint_name (string) [required], component (string) [required], instance_id (string), run_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"checkpoint_data":{"description":"checkpoint_data","type":"string"},"checkpoint_name":{"description":"checkpoint_name","type":"string"},"component":{"description":"component","type":"string"},"id":{"description":"AdStudy ID","type":"string"},"instance_id":{"description":"instance_id","type":"string"},"run_id":{"description":"run_id","type":"string"}},"required":["id","checkpoint_data","checkpoint_name","component"],"type":"object"}`),
		),
		AdStudy_POST_checkpointHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdStudy_GET_instances",
			"GET instances for AdStudy. Returns PrivateLiftStudyInstance",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdStudy ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdStudy_GET_instancesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdStudy_POST_instances",
			"POST instances for AdStudy. Returns PrivateLiftStudyInstance. Parameters: breakdown_key (map) [required], run_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"breakdown_key":{"description":"breakdown_key","type":"string"},"id":{"description":"AdStudy ID","type":"string"},"run_id":{"description":"run_id","type":"string"}},"required":["id","breakdown_key"],"type":"object"}`),
		),
		AdStudy_POST_instancesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdStudy_GET_objectives",
			"GET objectives for AdStudy. Returns AdStudyObjective",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdStudy ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdStudy_GET_objectivesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdStudy_DELETE_",
			"DELETE  for AdStudy. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdStudy ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdStudy_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdStudy_GET_",
			"GET  for AdStudy. Returns AdStudy",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdStudy ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdStudy_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdStudy_POST_",
			"POST  for AdStudy. Returns AdStudy. Parameters: cells (list<Object>), client_business (string), confidence_level (float), cooldown_start_time (int), description (string), end_time (int), name (string), objectives (list<Object>), observation_end_time (int), start_time (int), type (adstudy_type), viewers (list<int>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"cells":{"description":"cells","items":{"additionalProperties":true,"type":"object"},"type":"array"},"client_business":{"description":"client_business","type":"string"},"confidence_level":{"description":"confidence_level","type":"number"},"cooldown_start_time":{"description":"cooldown_start_time","type":"integer"},"description":{"description":"description","type":"string"},"end_time":{"description":"end_time","type":"integer"},"id":{"description":"AdStudy ID","type":"string"},"name":{"description":"name","type":"string"},"objectives":{"description":"objectives","items":{"additionalProperties":true,"type":"object"},"type":"array"},"observation_end_time":{"description":"observation_end_time","type":"integer"},"start_time":{"description":"start_time","type":"integer"},"type":{"description":"type (enum: adstudy_type)","type":"string"},"viewers":{"description":"viewers","items":{"type":"integer"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		AdStudy_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdStudyCell_GET_adaccounts",
			"GET adaccounts for AdStudyCell. Returns AdAccount",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdStudyCell ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdStudyCell_GET_adaccountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdStudyCell_GET_adsets",
			"GET adsets for AdStudyCell. Returns AdSet",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdStudyCell ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdStudyCell_GET_adsetsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdStudyCell_GET_campaigns",
			"GET campaigns for AdStudyCell. Returns Campaign",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdStudyCell ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdStudyCell_GET_campaignsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdStudyCell_GET_",
			"GET  for AdStudyCell. Returns AdStudyCell",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdStudyCell ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdStudyCell_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdStudyCell_POST_",
			"POST  for AdStudyCell. Returns AdStudyCell. Parameters: adaccounts (list<unsigned int>), adsets (list<string>), campaigns (list<string>), creation_template (adstudycell_creation_template), description (string), name (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"adaccounts":{"description":"adaccounts","items":{"type":"integer"},"type":"array"},"adsets":{"description":"adsets","items":{"type":"string"},"type":"array"},"campaigns":{"description":"campaigns","items":{"type":"string"},"type":"array"},"creation_template":{"description":"creation_template (enum: adstudycell_creation_template)","type":"string"},"description":{"description":"description","type":"string"},"id":{"description":"AdStudyCell ID","type":"string"},"name":{"description":"name","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdStudyCell_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdStudyObjective_GET_adspixels",
			"GET adspixels for AdStudyObjective. Returns AdsPixel",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdStudyObjective ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdStudyObjective_GET_adspixelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdStudyObjective_GET_applications",
			"GET applications for AdStudyObjective. Returns Application",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdStudyObjective ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdStudyObjective_GET_applicationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdStudyObjective_GET_brand_requests",
			"GET brand_requests for AdStudyObjective. Returns BrandRequest",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdStudyObjective ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdStudyObjective_GET_brand_requestsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdStudyObjective_GET_customconversions",
			"GET customconversions for AdStudyObjective. Returns CustomConversion",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdStudyObjective ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdStudyObjective_GET_customconversionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdStudyObjective_GET_offline_conversion_data_sets",
			"GET offline_conversion_data_sets for AdStudyObjective. Returns OfflineConversionDataSet",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdStudyObjective ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdStudyObjective_GET_offline_conversion_data_setsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdStudyObjective_GET_partner_private_studies",
			"GET partner_private_studies for AdStudyObjective. Returns Business",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdStudyObjective ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdStudyObjective_GET_partner_private_studiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdStudyObjective_GET_partnerstudies",
			"GET partnerstudies for AdStudyObjective. Returns PartnerStudy",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdStudyObjective ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdStudyObjective_GET_partnerstudiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdStudyObjective_GET_",
			"GET  for AdStudyObjective. Returns AdStudyObjective. Parameters: breakdowns (list<adstudyobjective_breakdowns>), ds (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"breakdowns":{"description":"breakdowns","items":{"type":"string"},"type":"array"},"ds":{"description":"ds","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdStudyObjective ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdStudyObjective_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdStudyObjective_POST_",
			"POST  for AdStudyObjective. Returns AdStudyObjective. Parameters: adspixels (list<Object>), applications (list<Object>), customconversions (list<Object>), is_primary (bool), name (string), offline_conversion_data_sets (list<Object>), offsite_datasets (list<Object>), product_catalogs (list<Object>), product_sets (list<Object>), type (adstudyobjective_type)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"adspixels":{"description":"adspixels","items":{"additionalProperties":true,"type":"object"},"type":"array"},"applications":{"description":"applications","items":{"additionalProperties":true,"type":"object"},"type":"array"},"customconversions":{"description":"customconversions","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"AdStudyObjective ID","type":"string"},"is_primary":{"description":"is_primary","type":"boolean"},"name":{"description":"name","type":"string"},"offline_conversion_data_sets":{"description":"offline_conversion_data_sets","items":{"additionalProperties":true,"type":"object"},"type":"array"},"offsite_datasets":{"description":"offsite_datasets","items":{"additionalProperties":true,"type":"object"},"type":"array"},"product_catalogs":{"description":"product_catalogs","items":{"additionalProperties":true,"type":"object"},"type":"array"},"product_sets":{"description":"product_sets","items":{"additionalProperties":true,"type":"object"},"type":"array"},"type":{"description":"type (enum: adstudyobjective_type)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdStudyObjective_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdTopline_GET_",
			"GET  for AdTopline. Returns AdTopline",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdTopline ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdTopline_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdToplineDetail_GET_",
			"GET  for AdToplineDetail. Returns AdToplineDetail",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdToplineDetail ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdToplineDetail_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdVideo_GET_boost_ads_list",
			"GET boost_ads_list for AdVideo. Returns VideoBoostMediaAd",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdVideo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdVideo_GET_boost_ads_listHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdVideo_GET_captions",
			"GET captions for AdVideo. Returns VideoCaption",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdVideo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdVideo_GET_captionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdVideo_POST_captions",
			"POST captions for AdVideo. Returns AdVideo. Parameters: captions_file (file), default_locale (string), locales_to_delete (list<string>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"captions_file":{"description":"captions_file","type":"string"},"default_locale":{"description":"default_locale","type":"string"},"id":{"description":"AdVideo ID","type":"string"},"locales_to_delete":{"description":"locales_to_delete","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		AdVideo_POST_captionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdVideo_GET_collaborators",
			"GET collaborators for AdVideo. Returns VideoCollaborators",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdVideo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdVideo_GET_collaboratorsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdVideo_POST_collaborators",
			"POST collaborators for AdVideo. Returns AdVideo. Parameters: target_id (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"AdVideo ID","type":"string"},"target_id":{"description":"target_id","type":"string"}},"required":["id","target_id"],"type":"object"}`),
		),
		AdVideo_POST_collaboratorsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdVideo_GET_comments",
			"GET comments for AdVideo. Returns Comment. Parameters: filter (videocomments_filter_enum_param), live_filter (videocomments_live_filter_enum_param), order (videocomments_order_enum_param), since (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"description":"filter (enum: videocomments_filter_enum_param)","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"live_filter":{"description":"live_filter (enum: videocomments_live_filter_enum_param)","type":"string"},"order":{"description":"order (enum: videocomments_order_enum_param)","type":"string"},"since":{"description":"since","type":"string"}},"type":"object"}`),
		),
		AdVideo_GET_commentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdVideo_POST_comments",
			"POST comments for AdVideo. Returns Comment. Parameters: attachment_id (string), attachment_share_url (string), attachment_url (string), comment_privacy_value (videocomments_comment_privacy_value_enum_param), facepile_mentioned_ids (list<string>), feedback_source (string), is_offline (bool), message (string), nectar_module (string), object_id (string), parent_comment_id (Object), text (string), tracking (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"attachment_id":{"description":"attachment_id","type":"string"},"attachment_share_url":{"description":"attachment_share_url","type":"string"},"attachment_url":{"description":"attachment_url","type":"string"},"comment_privacy_value":{"description":"comment_privacy_value (enum: videocomments_comment_privacy_value_enum_param)","type":"string"},"facepile_mentioned_ids":{"description":"facepile_mentioned_ids","items":{"type":"string"},"type":"array"},"feedback_source":{"description":"feedback_source","type":"string"},"is_offline":{"description":"is_offline","type":"boolean"},"message":{"description":"message","type":"string"},"nectar_module":{"description":"nectar_module","type":"string"},"object_id":{"description":"object_id","type":"string"},"parent_comment_id":{"additionalProperties":true,"description":"parent_comment_id","type":"object"},"text":{"description":"text","type":"string"},"tracking":{"description":"tracking","type":"string"}},"type":"object"}`),
		),
		AdVideo_POST_commentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdVideo_GET_crosspost_shared_pages",
			"GET crosspost_shared_pages for AdVideo. Returns Page",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdVideo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdVideo_GET_crosspost_shared_pagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdVideo_POST_gaming_clip_create",
			"POST gaming_clip_create for AdVideo. Returns AdVideo. Parameters: duration_seconds (float)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"duration_seconds":{"description":"duration_seconds","type":"number"},"id":{"description":"AdVideo ID","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdVideo_POST_gaming_clip_createHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdVideo_GET_likes",
			"GET likes for AdVideo. Returns Profile",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdVideo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdVideo_GET_likesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdVideo_POST_likes",
			"POST likes for AdVideo. Returns AdVideo. Parameters: feedback_source (string), nectar_module (string), notify (bool), tracking (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"feedback_source":{"description":"feedback_source","type":"string"},"id":{"description":"AdVideo ID","type":"string"},"nectar_module":{"description":"nectar_module","type":"string"},"notify":{"description":"notify","type":"boolean"},"tracking":{"description":"tracking","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdVideo_POST_likesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdVideo_GET_poll_settings",
			"GET poll_settings for AdVideo. Returns PollSettings",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdVideo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdVideo_GET_poll_settingsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdVideo_GET_polls",
			"GET polls for AdVideo. Returns VideoPoll",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdVideo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdVideo_GET_pollsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdVideo_POST_polls",
			"POST polls for AdVideo. Returns VideoPoll. Parameters: close_after_voting (bool), correct_option (unsigned int), default_open (bool), options (list<string>) [required], question (string) [required], show_gradient (bool), show_results (bool)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"close_after_voting":{"description":"close_after_voting","type":"boolean"},"correct_option":{"description":"correct_option","type":"integer"},"default_open":{"description":"default_open","type":"boolean"},"id":{"description":"AdVideo ID","type":"string"},"options":{"description":"options","items":{"type":"string"},"type":"array"},"question":{"description":"question","type":"string"},"show_gradient":{"description":"show_gradient","type":"boolean"},"show_results":{"description":"show_results","type":"boolean"}},"required":["id","options","question"],"type":"object"}`),
		),
		AdVideo_POST_pollsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdVideo_GET_sponsor_tags",
			"GET sponsor_tags for AdVideo. Returns Page",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdVideo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdVideo_GET_sponsor_tagsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdVideo_GET_tags",
			"GET tags for AdVideo. Returns TaggableSubject",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdVideo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdVideo_GET_tagsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdVideo_GET_thumbnails",
			"GET thumbnails for AdVideo. Returns VideoThumbnail",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdVideo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdVideo_GET_thumbnailsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdVideo_POST_thumbnails",
			"POST thumbnails for AdVideo. Returns AdVideo. Parameters: is_preferred (bool), source (file) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"AdVideo ID","type":"string"},"is_preferred":{"description":"is_preferred","type":"boolean"},"source":{"description":"source","type":"string"}},"required":["id","source"],"type":"object"}`),
		),
		AdVideo_POST_thumbnailsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdVideo_GET_video_insights",
			"GET video_insights for AdVideo. Returns InsightsResult. Parameters: metric (list<Object>), period (videovideo_insights_period_enum_param), since (datetime), until (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdVideo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"metric":{"description":"metric","items":{"additionalProperties":true,"type":"object"},"type":"array"},"period":{"description":"period (enum: videovideo_insights_period_enum_param)","type":"string"},"since":{"description":"since","type":"string"},"until":{"description":"until","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdVideo_GET_video_insightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdVideo_DELETE_",
			"DELETE  for AdVideo. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdVideo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdVideo_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdVideo_GET_",
			"GET  for AdVideo. Returns AdVideo",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdVideo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdVideo_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdVideo_POST_",
			"POST  for AdVideo. Returns AdVideo. Parameters: ad_breaks (list), allow_bm_crossposting (bool), allow_crossposting_for_pages (list<Object>), backdated_time (datetime), backdated_time_granularity (video_backdated_time_granularity), call_to_action (Object), content_category (video_content_category), content_tags (list<string>), custom_labels (list<string>), description (string), direct_share_status (unsigned int), embeddable (bool), expiration (Object), expire_now (bool), increment_play_count (bool), name (string), preferred_thumbnail_id (string), privacy (string), publish_to_news_feed (bool), publish_to_videos_tab (bool), published (bool), scheduled_publish_time (unsigned int), social_actions (bool), sponsor_id (string), sponsor_relationship (unsigned int), tags (list<string>), target (string), universal_video_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"ad_breaks":{"description":"ad_breaks","type":"string"},"allow_bm_crossposting":{"description":"allow_bm_crossposting","type":"boolean"},"allow_crossposting_for_pages":{"description":"allow_crossposting_for_pages","items":{"additionalProperties":true,"type":"object"},"type":"array"},"backdated_time":{"description":"backdated_time","type":"string"},"backdated_time_granularity":{"description":"backdated_time_granularity (enum: video_backdated_time_granularity)","type":"string"},"call_to_action":{"additionalProperties":true,"description":"call_to_action","type":"object"},"content_category":{"description":"content_category (enum: video_content_category)","type":"string"},"content_tags":{"description":"content_tags","items":{"type":"string"},"type":"array"},"custom_labels":{"description":"custom_labels","items":{"type":"string"},"type":"array"},"description":{"description":"description","type":"string"},"direct_share_status":{"description":"direct_share_status","type":"integer"},"embeddable":{"description":"embeddable","type":"boolean"},"expiration":{"additionalProperties":true,"description":"expiration","type":"object"},"expire_now":{"description":"expire_now","type":"boolean"},"id":{"description":"AdVideo ID","type":"string"},"increment_play_count":{"description":"increment_play_count","type":"boolean"},"name":{"description":"name","type":"string"},"preferred_thumbnail_id":{"description":"preferred_thumbnail_id","type":"string"},"privacy":{"description":"privacy","type":"string"},"publish_to_news_feed":{"description":"publish_to_news_feed","type":"boolean"},"publish_to_videos_tab":{"description":"publish_to_videos_tab","type":"boolean"},"published":{"description":"published","type":"boolean"},"scheduled_publish_time":{"description":"scheduled_publish_time","type":"integer"},"social_actions":{"description":"social_actions","type":"boolean"},"sponsor_id":{"description":"sponsor_id","type":"string"},"sponsor_relationship":{"description":"sponsor_relationship","type":"integer"},"tags":{"description":"tags","items":{"type":"string"},"type":"array"},"target":{"description":"target","type":"string"},"universal_video_id":{"description":"universal_video_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdVideo_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdgroupFacebookFeedback_GET_comments",
			"GET comments for AdgroupFacebookFeedback. Returns Comment. Parameters: order (adgroupfacebookfeedbackcomments_order_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"order":{"description":"order (enum: adgroupfacebookfeedbackcomments_order_enum_param)","type":"string"}},"type":"object"}`),
		),
		AdgroupFacebookFeedback_GET_commentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsConversionGoal_GET_conversion_events",
			"GET conversion_events for AdsConversionGoal. Returns AdsSingleChannelConversionEvent",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsConversionGoal ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdsConversionGoal_GET_conversion_eventsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsConversionGoal_GET_",
			"GET  for AdsConversionGoal. Returns AdsConversionGoal",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsConversionGoal ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdsConversionGoal_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsCreationSavedState_GET_",
			"GET  for AdsCreationSavedState. Returns AdsCreationSavedState",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsCreationSavedState ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdsCreationSavedState_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsMcmeConversion_GET_",
			"GET  for AdsMcmeConversion. Returns AdsMcmeConversion",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsMcmeConversion ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdsMcmeConversion_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsNamingTemplate_GET_",
			"GET  for AdsNamingTemplate. Returns AdsNamingTemplate",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsNamingTemplate ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdsNamingTemplate_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsPivotRules_GET_",
			"GET  for AdsPivotRules. Returns AdsPivotRules",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsPivotRules ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdsPivotRules_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsPixel_GET_adaccounts",
			"GET adaccounts for AdsPixel. Returns AdAccount. Parameters: business (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business":{"description":"business","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsPixel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","business"],"type":"object"}`),
		),
		AdsPixel_GET_adaccountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsPixel_DELETE_agencies",
			"DELETE agencies for AdsPixel. Returns Object. Parameters: business (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business":{"description":"business","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsPixel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","business"],"type":"object"}`),
		),
		AdsPixel_DELETE_agenciesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsPixel_GET_agencies",
			"GET agencies for AdsPixel. Returns Business",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsPixel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdsPixel_GET_agenciesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsPixel_POST_agencies",
			"POST agencies for AdsPixel. Returns AdsPixel. Parameters: business (string) [required], permitted_tasks (list<adspixelagencies_permitted_tasks_enum_param>) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"business":{"description":"business","type":"string"},"id":{"description":"AdsPixel ID","type":"string"},"permitted_tasks":{"description":"permitted_tasks","items":{"type":"string"},"type":"array"}},"required":["id","business","permitted_tasks"],"type":"object"}`),
		),
		AdsPixel_POST_agenciesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsPixel_POST_ahp_configs",
			"POST ahp_configs for AdsPixel. Returns Object. Parameters: applink_autosetup (bool) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"applink_autosetup":{"description":"applink_autosetup","type":"boolean"},"id":{"description":"AdsPixel ID","type":"string"}},"required":["id","applink_autosetup"],"type":"object"}`),
		),
		AdsPixel_POST_ahp_configsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsPixel_GET_assigned_users",
			"GET assigned_users for AdsPixel. Returns AssignedUser. Parameters: business (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business":{"description":"business","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsPixel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","business"],"type":"object"}`),
		),
		AdsPixel_GET_assigned_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsPixel_POST_assigned_users",
			"POST assigned_users for AdsPixel. Returns AdsPixel. Parameters: tasks (list<adspixelassigned_users_tasks_enum_param>) [required], user (int) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"AdsPixel ID","type":"string"},"tasks":{"description":"tasks","items":{"type":"string"},"type":"array"},"user":{"description":"user","type":"integer"}},"required":["id","tasks","user"],"type":"object"}`),
		),
		AdsPixel_POST_assigned_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsPixel_GET_da_checks",
			"GET da_checks for AdsPixel. Returns DACheck. Parameters: checks (list<string>), connection_method (adspixelda_checks_connection_method_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"checks":{"description":"checks","items":{"type":"string"},"type":"array"},"connection_method":{"description":"connection_method (enum: adspixelda_checks_connection_method_enum_param)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsPixel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdsPixel_GET_da_checksHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsPixel_POST_events",
			"POST events for AdsPixel. Returns Object. Parameters: data (list<string>) [required], namespace_id (string), partner_agent (string), platforms (list<map>), progress (Object), test_event_code (string), trace (unsigned int), upload_id (string), upload_source (string), upload_tag (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"data":{"description":"data","items":{"type":"string"},"type":"array"},"id":{"description":"AdsPixel ID","type":"string"},"namespace_id":{"description":"namespace_id","type":"string"},"partner_agent":{"description":"partner_agent","type":"string"},"platforms":{"description":"platforms","items":{"additionalProperties":true,"type":"object"},"type":"array"},"progress":{"additionalProperties":true,"description":"progress","type":"object"},"test_event_code":{"description":"test_event_code","type":"string"},"trace":{"description":"trace","type":"integer"},"upload_id":{"description":"upload_id","type":"string"},"upload_source":{"description":"upload_source","type":"string"},"upload_tag":{"description":"upload_tag","type":"string"}},"required":["id","data"],"type":"object"}`),
		),
		AdsPixel_POST_eventsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsPixel_GET_offline_event_uploads",
			"GET offline_event_uploads for AdsPixel. Returns OfflineConversionDataSetUpload. Parameters: end_time (datetime), order (adspixeloffline_event_uploads_order_enum_param), sort_by (adspixeloffline_event_uploads_sort_by_enum_param), start_time (datetime), upload_tag (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"end_time":{"description":"end_time","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsPixel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"order":{"description":"order (enum: adspixeloffline_event_uploads_order_enum_param)","type":"string"},"sort_by":{"description":"sort_by (enum: adspixeloffline_event_uploads_sort_by_enum_param)","type":"string"},"start_time":{"description":"start_time","type":"string"},"upload_tag":{"description":"upload_tag","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdsPixel_GET_offline_event_uploadsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsPixel_GET_openbridge_configurations",
			"GET openbridge_configurations for AdsPixel. Returns OpenBridgeConfiguration",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsPixel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdsPixel_GET_openbridge_configurationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsPixel_POST_shadowtraffichelper",
			"POST shadowtraffichelper for AdsPixel. Returns Object",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"AdsPixel ID","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdsPixel_POST_shadowtraffichelperHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsPixel_DELETE_shared_accounts",
			"DELETE shared_accounts for AdsPixel. Returns Object. Parameters: account_id (string) [required], business (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"account_id":{"description":"account_id","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business":{"description":"business","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsPixel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","account_id","business"],"type":"object"}`),
		),
		AdsPixel_DELETE_shared_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsPixel_GET_shared_accounts",
			"GET shared_accounts for AdsPixel. Returns AdAccount. Parameters: business (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business":{"description":"business","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsPixel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","business"],"type":"object"}`),
		),
		AdsPixel_GET_shared_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsPixel_POST_shared_accounts",
			"POST shared_accounts for AdsPixel. Returns AdsPixel. Parameters: account_id (string) [required], business (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"account_id":{"description":"account_id","type":"string"},"business":{"description":"business","type":"string"},"id":{"description":"AdsPixel ID","type":"string"}},"required":["id","account_id","business"],"type":"object"}`),
		),
		AdsPixel_POST_shared_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsPixel_GET_shared_agencies",
			"GET shared_agencies for AdsPixel. Returns Business",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsPixel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdsPixel_GET_shared_agenciesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsPixel_GET_stats",
			"GET stats for AdsPixel. Returns AdsPixelStatsResult. Parameters: aggregation (adspixelstats_aggregation_enum_param), end_time (datetime), event (string), event_source (string), start_time (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"aggregation":{"description":"aggregation (enum: adspixelstats_aggregation_enum_param)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"end_time":{"description":"end_time","type":"string"},"event":{"description":"event","type":"string"},"event_source":{"description":"event_source","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsPixel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"start_time":{"description":"start_time","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdsPixel_GET_statsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsPixel_GET_",
			"GET  for AdsPixel. Returns AdsPixel",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsPixel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdsPixel_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsPixel_POST_",
			"POST  for AdsPixel. Returns AdsPixel. Parameters: automatic_matching_fields (list<adspixel_automatic_matching_fields>), data_use_setting (adspixel_data_use_setting), enable_automatic_matching (bool), first_party_cookie_status (adspixel_first_party_cookie_status), name (string), server_events_business_ids (list<string>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"automatic_matching_fields":{"description":"automatic_matching_fields","items":{"type":"string"},"type":"array"},"data_use_setting":{"description":"data_use_setting (enum: adspixel_data_use_setting)","type":"string"},"enable_automatic_matching":{"description":"enable_automatic_matching","type":"boolean"},"first_party_cookie_status":{"description":"first_party_cookie_status (enum: adspixel_first_party_cookie_status)","type":"string"},"id":{"description":"AdsPixel ID","type":"string"},"name":{"description":"name","type":"string"},"server_events_business_ids":{"description":"server_events_business_ids","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		AdsPixel_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsPixelCapabilityOverride_GET_",
			"GET  for AdsPixelCapabilityOverride. Returns AdsPixelCapabilityOverride",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsPixelCapabilityOverride ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdsPixelCapabilityOverride_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsQuickViews_GET_",
			"GET  for AdsQuickViews. Returns AdsQuickViews",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsQuickViews ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdsQuickViews_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsReportBuilderExportCore_GET_",
			"GET  for AdsReportBuilderExportCore. Returns AdsReportBuilderExportCore",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsReportBuilderExportCore ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdsReportBuilderExportCore_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsReportBuilderMMMReport_GET_",
			"GET  for AdsReportBuilderMMMReport. Returns AdsReportBuilderMMMReport",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsReportBuilderMMMReport ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdsReportBuilderMMMReport_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsReportBuilderMMMReportScheduler_GET_",
			"GET  for AdsReportBuilderMMMReportScheduler. Returns AdsReportBuilderMMMReportScheduler",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsReportBuilderMMMReportScheduler ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdsReportBuilderMMMReportScheduler_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsReportBuilderSavedReport_GET_",
			"GET  for AdsReportBuilderSavedReport. Returns AdsReportBuilderSavedReport",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsReportBuilderSavedReport ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdsReportBuilderSavedReport_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsStartYourDayWidget_GET_",
			"GET  for AdsStartYourDayWidget. Returns AdsStartYourDayWidget",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsStartYourDayWidget ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdsStartYourDayWidget_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsUserSettings_GET_",
			"GET  for AdsUserSettings. Returns AdsUserSettings",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsUserSettings ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdsUserSettings_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsValueAdjustmentRuleCollection_POST_delete_rule_set",
			"POST delete_rule_set for AdsValueAdjustmentRuleCollection. Returns AdsValueAdjustmentRuleCollection",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"AdsValueAdjustmentRuleCollection ID","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AdsValueAdjustmentRuleCollection_POST_delete_rule_setHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsValueAdjustmentRuleCollection_GET_rules",
			"GET rules for AdsValueAdjustmentRuleCollection. Returns AdsValueAdjustmentRulePersona",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsValueAdjustmentRuleCollection ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdsValueAdjustmentRuleCollection_GET_rulesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsValueAdjustmentRuleCollection_GET_",
			"GET  for AdsValueAdjustmentRuleCollection. Returns AdsValueAdjustmentRuleCollection",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdsValueAdjustmentRuleCollection ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdsValueAdjustmentRuleCollection_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdsValueAdjustmentRuleCollection_POST_",
			"POST  for AdsValueAdjustmentRuleCollection. Returns AdsValueAdjustmentRuleCollection. Parameters: is_default_setting (bool), name (string) [required], rules (list<map>) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"AdsValueAdjustmentRuleCollection ID","type":"string"},"is_default_setting":{"description":"is_default_setting","type":"boolean"},"name":{"description":"name","type":"string"},"rules":{"description":"rules","items":{"additionalProperties":true,"type":"object"},"type":"array"}},"required":["id","name","rules"],"type":"object"}`),
		),
		AdsValueAdjustmentRuleCollection_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdvAInstance_GET_",
			"GET  for AdvAInstance. Returns AdvAInstance",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdvAInstance ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AdvAInstance_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Album_GET_comments",
			"GET comments for Album. Returns Comment. Parameters: filter (albumcomments_filter_enum_param), live_filter (albumcomments_live_filter_enum_param), order (albumcomments_order_enum_param), since (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"description":"filter (enum: albumcomments_filter_enum_param)","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"live_filter":{"description":"live_filter (enum: albumcomments_live_filter_enum_param)","type":"string"},"order":{"description":"order (enum: albumcomments_order_enum_param)","type":"string"},"since":{"description":"since","type":"string"}},"type":"object"}`),
		),
		Album_GET_commentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Album_POST_comments",
			"POST comments for Album. Returns Comment. Parameters: attachment_id (string), attachment_share_url (string), attachment_url (string), comment_privacy_value (albumcomments_comment_privacy_value_enum_param), facepile_mentioned_ids (list<string>), feedback_source (string), is_offline (bool), message (string), nectar_module (string), object_id (string), parent_comment_id (Object), text (string), tracking (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"attachment_id":{"description":"attachment_id","type":"string"},"attachment_share_url":{"description":"attachment_share_url","type":"string"},"attachment_url":{"description":"attachment_url","type":"string"},"comment_privacy_value":{"description":"comment_privacy_value (enum: albumcomments_comment_privacy_value_enum_param)","type":"string"},"facepile_mentioned_ids":{"description":"facepile_mentioned_ids","items":{"type":"string"},"type":"array"},"feedback_source":{"description":"feedback_source","type":"string"},"is_offline":{"description":"is_offline","type":"boolean"},"message":{"description":"message","type":"string"},"nectar_module":{"description":"nectar_module","type":"string"},"object_id":{"description":"object_id","type":"string"},"parent_comment_id":{"additionalProperties":true,"description":"parent_comment_id","type":"object"},"text":{"description":"text","type":"string"},"tracking":{"description":"tracking","type":"string"}},"type":"object"}`),
		),
		Album_POST_commentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Album_GET_likes",
			"GET likes for Album. Returns Profile",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Album ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Album_GET_likesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Album_POST_likes",
			"POST likes for Album. Returns Album. Parameters: feedback_source (string), nectar_module (string), notify (bool), tracking (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"feedback_source":{"description":"feedback_source","type":"string"},"id":{"description":"Album ID","type":"string"},"nectar_module":{"description":"nectar_module","type":"string"},"notify":{"description":"notify","type":"boolean"},"tracking":{"description":"tracking","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Album_POST_likesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Album_GET_photos",
			"GET photos for Album. Returns Photo",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Album ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Album_GET_photosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Album_POST_photos",
			"POST photos for Album. Returns Photo. Parameters: aid (string), allow_spherical_photo (bool), alt_text_custom (string), android_key_hash (string), application_id (string), attempt (unsigned int), audience_exp (bool), backdated_time (datetime), backdated_time_granularity (albumphotos_backdated_time_granularity_enum_param), caption (string), composer_session_id (string), direct_share_status (unsigned int), feed_targeting (Object), filter_type (unsigned int), full_res_is_coming_later (bool), initial_view_heading_override_degrees (unsigned int), initial_view_pitch_override_degrees (unsigned int), initial_view_vertical_fov_override_degrees (unsigned int), ios_bundle_id (string), is_explicit_location (bool), is_explicit_place (bool), manual_privacy (bool), message (string), name (string), no_story (bool), offline_id (unsigned int), og_action_type_id (string), og_icon_id (string), og_object_id (string), og_phrase (string), og_set_profile_badge (bool), og_suggestion_mechanism (string), place (Object), privacy (string), profile_id (int), provenance_info (map), proxied_app_id (string), published (bool), qn (string), spherical_metadata (map), sponsor_id (string), sponsor_relationship (unsigned int), tags (list<Object>), target_id (int), targeting (Object), time_since_original_post (unsigned int), uid (int), unpublished_content_type (albumphotos_unpublished_content_type_enum_param), url (string), user_selected_tags (bool), vault_image_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"aid":{"description":"aid","type":"string"},"allow_spherical_photo":{"description":"allow_spherical_photo","type":"boolean"},"alt_text_custom":{"description":"alt_text_custom","type":"string"},"android_key_hash":{"description":"android_key_hash","type":"string"},"application_id":{"description":"application_id","type":"string"},"attempt":{"description":"attempt","type":"integer"},"audience_exp":{"description":"audience_exp","type":"boolean"},"backdated_time":{"description":"backdated_time","type":"string"},"backdated_time_granularity":{"description":"backdated_time_granularity (enum: albumphotos_backdated_time_granularity_enum_param)","type":"string"},"caption":{"description":"caption","type":"string"},"composer_session_id":{"description":"composer_session_id","type":"string"},"direct_share_status":{"description":"direct_share_status","type":"integer"},"feed_targeting":{"additionalProperties":true,"description":"feed_targeting","type":"object"},"filter_type":{"description":"filter_type","type":"integer"},"full_res_is_coming_later":{"description":"full_res_is_coming_later","type":"boolean"},"id":{"description":"Album ID","type":"string"},"initial_view_heading_override_degrees":{"description":"initial_view_heading_override_degrees","type":"integer"},"initial_view_pitch_override_degrees":{"description":"initial_view_pitch_override_degrees","type":"integer"},"initial_view_vertical_fov_override_degrees":{"description":"initial_view_vertical_fov_override_degrees","type":"integer"},"ios_bundle_id":{"description":"ios_bundle_id","type":"string"},"is_explicit_location":{"description":"is_explicit_location","type":"boolean"},"is_explicit_place":{"description":"is_explicit_place","type":"boolean"},"manual_privacy":{"description":"manual_privacy","type":"boolean"},"message":{"description":"message","type":"string"},"name":{"description":"name","type":"string"},"no_story":{"description":"no_story","type":"boolean"},"offline_id":{"description":"offline_id","type":"integer"},"og_action_type_id":{"description":"og_action_type_id","type":"string"},"og_icon_id":{"description":"og_icon_id","type":"string"},"og_object_id":{"description":"og_object_id","type":"string"},"og_phrase":{"description":"og_phrase","type":"string"},"og_set_profile_badge":{"description":"og_set_profile_badge","type":"boolean"},"og_suggestion_mechanism":{"description":"og_suggestion_mechanism","type":"string"},"place":{"additionalProperties":true,"description":"place","type":"object"},"privacy":{"description":"privacy","type":"string"},"profile_id":{"description":"profile_id","type":"integer"},"provenance_info":{"description":"provenance_info","type":"string"},"proxied_app_id":{"description":"proxied_app_id","type":"string"},"published":{"description":"published","type":"boolean"},"qn":{"description":"qn","type":"string"},"spherical_metadata":{"description":"spherical_metadata","type":"string"},"sponsor_id":{"description":"sponsor_id","type":"string"},"sponsor_relationship":{"description":"sponsor_relationship","type":"integer"},"tags":{"description":"tags","items":{"additionalProperties":true,"type":"object"},"type":"array"},"target_id":{"description":"target_id","type":"integer"},"targeting":{"additionalProperties":true,"description":"targeting","type":"object"},"time_since_original_post":{"description":"time_since_original_post","type":"integer"},"uid":{"description":"uid","type":"integer"},"unpublished_content_type":{"description":"unpublished_content_type (enum: albumphotos_unpublished_content_type_enum_param)","type":"string"},"url":{"description":"url","type":"string"},"user_selected_tags":{"description":"user_selected_tags","type":"boolean"},"vault_image_id":{"description":"vault_image_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Album_POST_photosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Album_GET_picture",
			"GET picture for Album. Returns ProfilePictureSource. Parameters: redirect (bool), type (albumpicture_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Album ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"redirect":{"description":"redirect","type":"boolean"},"type":{"description":"type (enum: albumpicture_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Album_GET_pictureHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Album_GET_",
			"GET  for Album. Returns Album",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Album ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Album_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AnalyticsSegment_GET_",
			"GET  for AnalyticsSegment. Returns AnalyticsSegment. Parameters: async_task_id (string), end_date (int), start_date (int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"async_task_id":{"description":"async_task_id","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"end_date":{"description":"end_date","type":"integer"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AnalyticsSegment ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"start_date":{"description":"start_date","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AnalyticsSegment_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AnalyticsUserConfig_GET_",
			"GET  for AnalyticsUserConfig. Returns AnalyticsUserConfig",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AnalyticsUserConfig ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AnalyticsUserConfig_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AppEventConfig_GET_",
			"GET  for AppEventConfig. Returns AppEventConfig. Parameters: event_name (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"event_name":{"description":"event_name","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AppEventConfig ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AppEventConfig_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AppLinks_GET_",
			"GET  for AppLinks. Returns AppLinks",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AppLinks ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AppLinks_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AppRequest_DELETE_",
			"DELETE  for AppRequest. Returns Object. Parameters: ids (list<string>) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AppRequest ID","type":"string"},"ids":{"description":"ids","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","ids"],"type":"object"}`),
		),
		AppRequest_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AppRequest_GET_",
			"GET  for AppRequest. Returns AppRequest",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AppRequest ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AppRequest_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_DELETE_accounts",
			"DELETE accounts for Application. Returns Object. Parameters: type (applicationaccounts_type_enum_param), uid (int) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: applicationaccounts_type_enum_param)","type":"string"},"uid":{"description":"uid","type":"integer"}},"required":["id","uid"],"type":"object"}`),
		),
		Application_DELETE_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_accounts",
			"GET accounts for Application. Returns TestAccount. Parameters: type (applicationaccounts_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: applicationaccounts_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_POST_accounts",
			"POST accounts for Application. Returns TestAccount. Parameters: installed (bool), minor (bool), name (string), owner_access_token (string), permissions (list<Permission>), type (applicationaccounts_type_enum_param), uid (int)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Application ID","type":"string"},"installed":{"description":"installed","type":"boolean"},"minor":{"description":"minor","type":"boolean"},"name":{"description":"name","type":"string"},"owner_access_token":{"description":"owner_access_token","type":"string"},"permissions":{"description":"permissions","items":{"type":"string"},"type":"array"},"type":{"description":"type (enum: applicationaccounts_type_enum_param)","type":"string"},"uid":{"description":"uid","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_POST_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_POST_activities",
			"POST activities for Application. Returns Object. Parameters: advertiser_id (string), advertiser_tracking_enabled (bool), anon_id (string), app_user_id (string), application_tracking_enabled (bool), attribution (string), attribution_referrer (string), attribution_sources (list<map>), auto_publish (bool), bundle_id (string), bundle_short_version (string), bundle_version (string), campaign_ids (string), click_id (string), consider_views (bool), custom_events (list<Object>), custom_events_file (file), data_processing_options (list<string>), data_processing_options_country (unsigned int), data_processing_options_state (unsigned int), device_token (string), event (applicationactivities_event_enum_param) [required], event_id (string), extinfo (Object), google_install_referrer (string), include_dwell_data (bool), include_video_data (bool), install_id (string), install_referrer (string), install_timestamp (unsigned int), installer_package (string), is_fb (bool), limited_data_use (bool), meta_install_referrer (string), migration_bundle (string), operational_parameters (list<map>), page_id (unsigned int), page_scoped_user_id (unsigned int), receipt_data (string), sdk_version (string), ud (map), url_schemes (list<string>), user_id (string), user_id_type (applicationactivities_user_id_type_enum_param), vendor_id (string), windows_attribution_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"advertiser_id":{"description":"advertiser_id","type":"string"},"advertiser_tracking_enabled":{"description":"advertiser_tracking_enabled","type":"boolean"},"anon_id":{"description":"anon_id","type":"string"},"app_user_id":{"description":"app_user_id","type":"string"},"application_tracking_enabled":{"description":"application_tracking_enabled","type":"boolean"},"attribution":{"description":"attribution","type":"string"},"attribution_referrer":{"description":"attribution_referrer","type":"string"},"attribution_sources":{"description":"attribution_sources","items":{"additionalProperties":true,"type":"object"},"type":"array"},"auto_publish":{"description":"auto_publish","type":"boolean"},"bundle_id":{"description":"bundle_id","type":"string"},"bundle_short_version":{"description":"bundle_short_version","type":"string"},"bundle_version":{"description":"bundle_version","type":"string"},"campaign_ids":{"description":"campaign_ids","type":"string"},"click_id":{"description":"click_id","type":"string"},"consider_views":{"description":"consider_views","type":"boolean"},"custom_events":{"description":"custom_events","items":{"additionalProperties":true,"type":"object"},"type":"array"},"custom_events_file":{"description":"custom_events_file","type":"string"},"data_processing_options":{"description":"data_processing_options","items":{"type":"string"},"type":"array"},"data_processing_options_country":{"description":"data_processing_options_country","type":"integer"},"data_processing_options_state":{"description":"data_processing_options_state","type":"integer"},"device_token":{"description":"device_token","type":"string"},"event":{"description":"event (enum: applicationactivities_event_enum_param)","type":"string"},"event_id":{"description":"event_id","type":"string"},"extinfo":{"additionalProperties":true,"description":"extinfo","type":"object"},"google_install_referrer":{"description":"google_install_referrer","type":"string"},"id":{"description":"Application ID","type":"string"},"include_dwell_data":{"description":"include_dwell_data","type":"boolean"},"include_video_data":{"description":"include_video_data","type":"boolean"},"install_id":{"description":"install_id","type":"string"},"install_referrer":{"description":"install_referrer","type":"string"},"install_timestamp":{"description":"install_timestamp","type":"integer"},"installer_package":{"description":"installer_package","type":"string"},"is_fb":{"description":"is_fb","type":"boolean"},"limited_data_use":{"description":"limited_data_use","type":"boolean"},"meta_install_referrer":{"description":"meta_install_referrer","type":"string"},"migration_bundle":{"description":"migration_bundle","type":"string"},"operational_parameters":{"description":"operational_parameters","items":{"additionalProperties":true,"type":"object"},"type":"array"},"page_id":{"description":"page_id","type":"integer"},"page_scoped_user_id":{"description":"page_scoped_user_id","type":"integer"},"receipt_data":{"description":"receipt_data","type":"string"},"sdk_version":{"description":"sdk_version","type":"string"},"ud":{"description":"ud","type":"string"},"url_schemes":{"description":"url_schemes","items":{"type":"string"},"type":"array"},"user_id":{"description":"user_id","type":"string"},"user_id_type":{"description":"user_id_type (enum: applicationactivities_user_id_type_enum_param)","type":"string"},"vendor_id":{"description":"vendor_id","type":"string"},"windows_attribution_id":{"description":"windows_attribution_id","type":"string"}},"required":["id","event"],"type":"object"}`),
		),
		Application_POST_activitiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_ad_placement_groups",
			"GET ad_placement_groups for Application. Returns AdPlacementGroup",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Application_GET_ad_placement_groupsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_adnetwork_placements",
			"GET adnetwork_placements for Application. Returns AdPlacement. Parameters: request_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"request_id":{"description":"request_id","type":"string"}},"type":"object"}`),
		),
		Application_GET_adnetwork_placementsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_adnetworkanalytics",
			"GET adnetworkanalytics for Application. Returns AdNetworkAnalyticsSyncQueryResult. Parameters: aggregation_period (applicationadnetworkanalytics_aggregation_period_enum_param), breakdowns (list<applicationadnetworkanalytics_breakdowns_enum_param>), filters (list<map>), limit (unsigned int), metrics (list<applicationadnetworkanalytics_metrics_enum_param>) [required], ordering_column (applicationadnetworkanalytics_ordering_column_enum_param), ordering_type (applicationadnetworkanalytics_ordering_type_enum_param), should_include_until (bool), since (datetime), until (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"aggregation_period":{"description":"aggregation_period (enum: applicationadnetworkanalytics_aggregation_period_enum_param)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"breakdowns":{"description":"breakdowns","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filters":{"description":"filters","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"metrics":{"description":"metrics","items":{"type":"string"},"type":"array"},"ordering_column":{"description":"ordering_column (enum: applicationadnetworkanalytics_ordering_column_enum_param)","type":"string"},"ordering_type":{"description":"ordering_type (enum: applicationadnetworkanalytics_ordering_type_enum_param)","type":"string"},"should_include_until":{"description":"should_include_until","type":"boolean"},"since":{"description":"since","type":"string"},"until":{"description":"until","type":"string"}},"required":["id","metrics"],"type":"object"}`),
		),
		Application_GET_adnetworkanalyticsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_POST_adnetworkanalytics",
			"POST adnetworkanalytics for Application. Returns Application. Parameters: aggregation_period (applicationadnetworkanalytics_aggregation_period_enum_param), breakdowns (list<applicationadnetworkanalytics_breakdowns_enum_param>), filters (list<Object>), limit (int), metrics (list<applicationadnetworkanalytics_metrics_enum_param>) [required], ordering_column (applicationadnetworkanalytics_ordering_column_enum_param), ordering_type (applicationadnetworkanalytics_ordering_type_enum_param), since (datetime), until (datetime)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"aggregation_period":{"description":"aggregation_period (enum: applicationadnetworkanalytics_aggregation_period_enum_param)","type":"string"},"breakdowns":{"description":"breakdowns","items":{"type":"string"},"type":"array"},"filters":{"description":"filters","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"limit","type":"integer"},"metrics":{"description":"metrics","items":{"type":"string"},"type":"array"},"ordering_column":{"description":"ordering_column (enum: applicationadnetworkanalytics_ordering_column_enum_param)","type":"string"},"ordering_type":{"description":"ordering_type (enum: applicationadnetworkanalytics_ordering_type_enum_param)","type":"string"},"since":{"description":"since","type":"string"},"until":{"description":"until","type":"string"}},"required":["id","metrics"],"type":"object"}`),
		),
		Application_POST_adnetworkanalyticsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_adnetworkanalytics_results",
			"GET adnetworkanalytics_results for Application. Returns AdNetworkAnalyticsAsyncQueryResult. Parameters: query_ids (list<string>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"query_ids":{"description":"query_ids","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_adnetworkanalytics_resultsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_aem_attribution",
			"GET aem_attribution for Application. Returns AEMAttribution. Parameters: advertiser_ids (list<string>), fb_content_data (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"advertiser_ids":{"description":"advertiser_ids","items":{"type":"string"},"type":"array"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fb_content_data":{"description":"fb_content_data","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_aem_attributionHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_aem_conversion_configs",
			"GET aem_conversion_configs for Application. Returns AEMConversionConfig. Parameters: advertiser_ids (list<string>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"advertiser_ids":{"description":"advertiser_ids","items":{"type":"string"},"type":"array"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_aem_conversion_configsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_aem_conversion_filter",
			"GET aem_conversion_filter for Application. Returns AEMConversionFilter. Parameters: catalog_id (string), fb_content_ids (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"catalog_id":{"description":"catalog_id","type":"string"},"fb_content_ids":{"description":"fb_content_ids","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_aem_conversion_filterHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_POST_aem_conversions",
			"POST aem_conversions for Application. Returns Object. Parameters: aem_conversions (list<map>) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"aem_conversions":{"description":"aem_conversions","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"Application ID","type":"string"}},"required":["id","aem_conversions"],"type":"object"}`),
		),
		Application_POST_aem_conversionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_POST_aem_skan_readiness",
			"POST aem_skan_readiness for Application. Returns Object. Parameters: app_id (int) [required], is_aem_ready (bool), is_app_aem_install_ready (bool), is_app_aem_ready (bool), is_skan_ready (bool), message (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"app_id":{"description":"app_id","type":"integer"},"id":{"description":"Application ID","type":"string"},"is_aem_ready":{"description":"is_aem_ready","type":"boolean"},"is_app_aem_install_ready":{"description":"is_app_aem_install_ready","type":"boolean"},"is_app_aem_ready":{"description":"is_app_aem_ready","type":"boolean"},"is_skan_ready":{"description":"is_skan_ready","type":"boolean"},"message":{"description":"message","type":"string"}},"required":["id","app_id"],"type":"object"}`),
		),
		Application_POST_aem_skan_readinessHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_agencies",
			"GET agencies for Application. Returns Business",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_agenciesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_POST_aggregate_revenue",
			"POST aggregate_revenue for Application. Returns Object. Parameters: ecpms (list<string>), query_ids (list<string>), request_id (string), sync_api (bool)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"ecpms":{"description":"ecpms","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"query_ids":{"description":"query_ids","items":{"type":"string"},"type":"array"},"request_id":{"description":"request_id","type":"string"},"sync_api":{"description":"sync_api","type":"boolean"}},"required":["id"],"type":"object"}`),
		),
		Application_POST_aggregate_revenueHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_android_dialog_configs",
			"GET android_dialog_configs for Application. Returns ApplicationDialogConfig",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_android_dialog_configsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_app_capi_settings",
			"GET app_capi_settings for Application. Returns ApplicationAppCapiSetting",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_app_capi_settingsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_app_event_types",
			"GET app_event_types for Application. Returns ApplicationAppEventTypes",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_app_event_typesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_POST_app_indexing",
			"POST app_indexing for Application. Returns Application. Parameters: app_version (string) [required], device_session_id (string), extra_info (string), platform (applicationapp_indexing_platform_enum_param) [required], request_type (applicationapp_indexing_request_type_enum_param), tree (map) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"app_version":{"description":"app_version","type":"string"},"device_session_id":{"description":"device_session_id","type":"string"},"extra_info":{"description":"extra_info","type":"string"},"id":{"description":"Application ID","type":"string"},"platform":{"description":"platform (enum: applicationapp_indexing_platform_enum_param)","type":"string"},"request_type":{"description":"request_type (enum: applicationapp_indexing_request_type_enum_param)","type":"string"},"tree":{"description":"tree","type":"string"}},"required":["id","app_version","platform","tree"],"type":"object"}`),
		),
		Application_POST_app_indexingHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_POST_app_indexing_session",
			"POST app_indexing_session for Application. Returns Application. Parameters: device_session_id (string) [required], extinfo (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"device_session_id":{"description":"device_session_id","type":"string"},"extinfo":{"description":"extinfo","type":"string"},"id":{"description":"Application ID","type":"string"}},"required":["id","device_session_id"],"type":"object"}`),
		),
		Application_POST_app_indexing_sessionHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_app_installed_groups",
			"GET app_installed_groups for Application. Returns Group. Parameters: group_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"group_id":{"description":"group_id","type":"string"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_app_installed_groupsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_POST_app_push_device_token",
			"POST app_push_device_token for Application. Returns Application. Parameters: device_id (string) [required], device_token (string) [required], platform (applicationapp_push_device_token_platform_enum_param)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"device_id":{"description":"device_id","type":"string"},"device_token":{"description":"device_token","type":"string"},"id":{"description":"Application ID","type":"string"},"platform":{"description":"platform (enum: applicationapp_push_device_token_platform_enum_param)","type":"string"}},"required":["id","device_id","device_token"],"type":"object"}`),
		),
		Application_POST_app_push_device_tokenHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_appassets",
			"GET appassets for Application. Returns CanvasAppAsset",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_appassetsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_POST_assets",
			"POST assets for Application. Returns Application. Parameters: asset (file) [required], comment (string), type (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"asset":{"description":"asset","type":"string"},"comment":{"description":"comment","type":"string"},"id":{"description":"Application ID","type":"string"},"type":{"description":"type","type":"string"}},"required":["id","asset","type"],"type":"object"}`),
		),
		Application_POST_assetsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_authorized_adaccounts",
			"GET authorized_adaccounts for Application. Returns AdAccount. Parameters: business (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business":{"description":"business","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_authorized_adaccountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_button_auto_detection_device_selection",
			"GET button_auto_detection_device_selection for Application. Returns ButtonAutoDetectionDeviceSelection. Parameters: device_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"device_id":{"description":"device_id","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_button_auto_detection_device_selectionHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_cloudbridge_settings",
			"GET cloudbridge_settings for Application. Returns CloudbridgeSetting",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_cloudbridge_settingsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_POST_codeless_event_mappings",
			"POST codeless_event_mappings for Application. Returns Application. Parameters: mappings (list<map>) [required], mutation_method (applicationcodeless_event_mappings_mutation_method_enum_param) [required], platform (applicationcodeless_event_mappings_platform_enum_param) [required], post_method (applicationcodeless_event_mappings_post_method_enum_param)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Application ID","type":"string"},"mappings":{"description":"mappings","items":{"additionalProperties":true,"type":"object"},"type":"array"},"mutation_method":{"description":"mutation_method (enum: applicationcodeless_event_mappings_mutation_method_enum_param)","type":"string"},"platform":{"description":"platform (enum: applicationcodeless_event_mappings_platform_enum_param)","type":"string"},"post_method":{"description":"post_method (enum: applicationcodeless_event_mappings_post_method_enum_param)","type":"string"}},"required":["id","mappings","mutation_method","platform"],"type":"object"}`),
		),
		Application_POST_codeless_event_mappingsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_connected_client_businesses",
			"GET connected_client_businesses for Application. Returns Business",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_connected_client_businessesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_da_checks",
			"GET da_checks for Application. Returns DACheck. Parameters: checks (list<string>), connection_method (applicationda_checks_connection_method_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"checks":{"description":"checks","items":{"type":"string"},"type":"array"},"connection_method":{"description":"connection_method (enum: applicationda_checks_connection_method_enum_param)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_da_checksHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_POST_domain_reports",
			"POST domain_reports for Application. Returns Object. Parameters: tracking_domains (list<string>) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Application ID","type":"string"},"tracking_domains":{"description":"tracking_domains","items":{"type":"string"},"type":"array"}},"required":["id","tracking_domains"],"type":"object"}`),
		),
		Application_POST_domain_reportsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_iap_purchases",
			"GET iap_purchases for Application. Returns DCPAppStoreOrder. Parameters: order_id (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"order_id":{"description":"order_id","type":"string"}},"required":["id","order_id"],"type":"object"}`),
		),
		Application_GET_iap_purchasesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_ios_dialog_configs",
			"GET ios_dialog_configs for Application. Returns ApplicationDialogConfig",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_ios_dialog_configsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_linked_dataset",
			"GET linked_dataset for Application. Returns AdsDataset",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_linked_datasetHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_message_templates",
			"GET message_templates for Application. Returns BusinessMessagingPartnerTemplate. Parameters: template_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"template_id":{"description":"template_id","type":"string"}},"type":"object"}`),
		),
		Application_GET_message_templatesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_POST_mmp_auditing",
			"POST mmp_auditing for Application. Returns Object. Parameters: advertiser_id (string), attribution (string), attribution_method (string), attribution_model (string), attribution_referrer (string), auditing_token (string), click_attr_window (unsigned int), custom_events (list<Object>), decline_reason (string), device_os (string), engagement_type (string), event (string) [required], event_id (string), event_reported_time (unsigned int), fb_ad_id (unsigned int), fb_adgroup_id (unsigned int), fb_click_time (unsigned int), fb_view_time (unsigned int), google_install_referrer (string), inactivity_window_hours (unsigned int), install_id (string), is_fb (bool) [required], meta_install_referrer (string), used_install_referrer (bool), view_attr_window (unsigned int)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"advertiser_id":{"description":"advertiser_id","type":"string"},"attribution":{"description":"attribution","type":"string"},"attribution_method":{"description":"attribution_method","type":"string"},"attribution_model":{"description":"attribution_model","type":"string"},"attribution_referrer":{"description":"attribution_referrer","type":"string"},"auditing_token":{"description":"auditing_token","type":"string"},"click_attr_window":{"description":"click_attr_window","type":"integer"},"custom_events":{"description":"custom_events","items":{"additionalProperties":true,"type":"object"},"type":"array"},"decline_reason":{"description":"decline_reason","type":"string"},"device_os":{"description":"device_os","type":"string"},"engagement_type":{"description":"engagement_type","type":"string"},"event":{"description":"event","type":"string"},"event_id":{"description":"event_id","type":"string"},"event_reported_time":{"description":"event_reported_time","type":"integer"},"fb_ad_id":{"description":"fb_ad_id","type":"integer"},"fb_adgroup_id":{"description":"fb_adgroup_id","type":"integer"},"fb_click_time":{"description":"fb_click_time","type":"integer"},"fb_view_time":{"description":"fb_view_time","type":"integer"},"google_install_referrer":{"description":"google_install_referrer","type":"string"},"id":{"description":"Application ID","type":"string"},"inactivity_window_hours":{"description":"inactivity_window_hours","type":"integer"},"install_id":{"description":"install_id","type":"string"},"is_fb":{"description":"is_fb","type":"boolean"},"meta_install_referrer":{"description":"meta_install_referrer","type":"string"},"used_install_referrer":{"description":"used_install_referrer","type":"boolean"},"view_attr_window":{"description":"view_attr_window","type":"integer"}},"required":["id","event","is_fb"],"type":"object"}`),
		),
		Application_POST_mmp_auditingHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_mobile_sdk_gk",
			"GET mobile_sdk_gk for Application. Returns MobileSdkGk. Parameters: device_id (string), extinfo (Object), os_version (string), platform (applicationmobile_sdk_gk_platform_enum_param) [required], sdk_version (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"device_id":{"description":"device_id","type":"string"},"extinfo":{"additionalProperties":true,"description":"extinfo","type":"object"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"os_version":{"description":"os_version","type":"string"},"platform":{"description":"platform (enum: applicationmobile_sdk_gk_platform_enum_param)","type":"string"},"sdk_version":{"description":"sdk_version","type":"string"}},"required":["id","platform","sdk_version"],"type":"object"}`),
		),
		Application_GET_mobile_sdk_gkHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_monetized_digital_store_objects",
			"GET monetized_digital_store_objects for Application. Returns MonetizedDigitalStoreObject",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_monetized_digital_store_objectsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_POST_monetized_digital_store_objects",
			"POST monetized_digital_store_objects for Application. Returns MonetizedDigitalStoreObject. Parameters: content_id (string) [required], store (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"content_id":{"description":"content_id","type":"string"},"id":{"description":"Application ID","type":"string"},"store":{"description":"store","type":"string"}},"required":["id","content_id","store"],"type":"object"}`),
		),
		Application_POST_monetized_digital_store_objectsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_object_types",
			"GET object_types for Application. Returns NullNode",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_object_typesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_objects",
			"GET objects for Application. Returns NullNode",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_objectsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_POST_occludespopups",
			"POST occludespopups for Application. Returns Object. Parameters: flash (bool), unity (bool)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"flash":{"description":"flash","type":"boolean"},"id":{"description":"Application ID","type":"string"},"unity":{"description":"unity","type":"boolean"}},"required":["id"],"type":"object"}`),
		),
		Application_POST_occludespopupsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_permissions",
			"GET permissions for Application. Returns ApplicationPermission. Parameters: android_key_hash (string), ios_bundle_id (string), permission (list<Permission>), proxied_app_id (int), status (list<applicationpermissions_status_enum_param>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"android_key_hash":{"description":"android_key_hash","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"ios_bundle_id":{"description":"ios_bundle_id","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"permission":{"description":"permission","items":{"type":"string"},"type":"array"},"proxied_app_id":{"description":"proxied_app_id","type":"integer"},"status":{"description":"status","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_permissionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_products",
			"GET products for Application. Returns GamesIAPProduct. Parameters: product_ids (list<string>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"product_ids":{"description":"product_ids","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_productsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_purchases",
			"GET purchases for Application. Returns GamesIAPOrder",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_purchasesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_roles",
			"GET roles for Application. Returns ApplicationRoles",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_rolesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_server_domain_infos",
			"GET server_domain_infos for Application. Returns ApplicationServerDomainInfos",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_server_domain_infosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_sgw_dataset_status",
			"GET sgw_dataset_status for Application. Returns ApplicationSgwDatasetStatus. Parameters: dataset_id (unsigned int) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"dataset_id":{"description":"dataset_id","type":"integer"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","dataset_id"],"type":"object"}`),
		),
		Application_GET_sgw_dataset_statusHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_sgw_install_deferral_link",
			"GET sgw_install_deferral_link for Application. Returns ApplicationSgwInstallDeferralLink. Parameters: client_ip (string), dataset_id (unsigned int) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"client_ip":{"description":"client_ip","type":"string"},"dataset_id":{"description":"dataset_id","type":"integer"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","dataset_id"],"type":"object"}`),
		),
		Application_GET_sgw_install_deferral_linkHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_subscribed_domains",
			"GET subscribed_domains for Application. Returns CTCertDomain",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_subscribed_domainsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_POST_subscribed_domains",
			"POST subscribed_domains for Application. Returns Application. Parameters: subscribe (list<string>), unsubscribe (list<string>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Application ID","type":"string"},"subscribe":{"description":"subscribe","items":{"type":"string"},"type":"array"},"unsubscribe":{"description":"unsubscribe","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		Application_POST_subscribed_domainsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_subscribed_domains_phishing",
			"GET subscribed_domains_phishing for Application. Returns CTCertDomain",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_subscribed_domains_phishingHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_POST_subscribed_domains_phishing",
			"POST subscribed_domains_phishing for Application. Returns Application. Parameters: subscribe (list<string>), unsubscribe (list<string>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Application ID","type":"string"},"subscribe":{"description":"subscribe","items":{"type":"string"},"type":"array"},"unsubscribe":{"description":"unsubscribe","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		Application_POST_subscribed_domains_phishingHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_DELETE_subscriptions",
			"DELETE subscriptions for Application. Returns Object. Parameters: fields (list<string>), object (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"object":{"description":"object","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Application_DELETE_subscriptionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_subscriptions",
			"GET subscriptions for Application. Returns ApplicationSubscriptions",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_subscriptionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_POST_subscriptions",
			"POST subscriptions for Application. Returns ApplicationSubscriptions. Parameters: callback_url (string), fields (list<string>), include_values (bool), object (string) [required], verify_token (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"callback_url":{"description":"callback_url","type":"string"},"fields":{"description":"fields","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"include_values":{"description":"include_values","type":"boolean"},"object":{"description":"object","type":"string"},"verify_token":{"description":"verify_token","type":"string"}},"required":["id","object"],"type":"object"}`),
		),
		Application_POST_subscriptionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_POST_uploads",
			"POST uploads for Application. Returns Object. Parameters: file_length (unsigned int), file_name (Object), file_type (Object), session_type (applicationuploads_session_type_enum_param)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"file_length":{"description":"file_length","type":"integer"},"file_name":{"additionalProperties":true,"description":"file_name","type":"object"},"file_type":{"additionalProperties":true,"description":"file_type","type":"object"},"id":{"description":"Application ID","type":"string"},"session_type":{"description":"session_type (enum: applicationuploads_session_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Application_POST_uploadsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_POST_whatsapp_business_solution",
			"POST whatsapp_business_solution for Application. Returns Application. Parameters: owner_permissions (list<applicationwhatsapp_business_solution_owner_permissions_enum_param>) [required], partner_app_id (string) [required], partner_permissions (list<applicationwhatsapp_business_solution_partner_permissions_enum_param>) [required], solution_name (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Application ID","type":"string"},"owner_permissions":{"description":"owner_permissions","items":{"type":"string"},"type":"array"},"partner_app_id":{"description":"partner_app_id","type":"string"},"partner_permissions":{"description":"partner_permissions","items":{"type":"string"},"type":"array"},"solution_name":{"description":"solution_name","type":"string"}},"required":["id","owner_permissions","partner_app_id","partner_permissions","solution_name"],"type":"object"}`),
		),
		Application_POST_whatsapp_business_solutionHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_whatsapp_business_solutions",
			"GET whatsapp_business_solutions for Application. Returns WhatsAppBusinessSolution. Parameters: role (applicationwhatsapp_business_solutions_role_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"role":{"description":"role (enum: applicationwhatsapp_business_solutions_role_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_whatsapp_business_solutionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_GET_",
			"GET  for Application. Returns Application. Parameters: advertiser_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"advertiser_id":{"description":"advertiser_id","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Application ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Application_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Application_POST_",
			"POST  for Application. Returns Application. Parameters: allow_cycle_app_secret (bool), an_platforms (list<application_an_platforms>), app_domains (list<string>), app_name (string), app_type (bool), auth_dialog_headline (string), auth_dialog_perms_explanation (string), auth_referral_enabled (bool), auth_referral_extended_perms (list<string>), auth_referral_friend_perms (list<string>), auth_referral_response_type (string), auth_referral_user_perms (list<string>), canvas_fluid_height (bool), canvas_fluid_width (bool), canvas_url (string), contact_email (string), deauth_callback_url (string), mobile_web_url (string), namespace (string), page_tab_default_name (string), privacy_policy_url (string), restrictions (string), secure_canvas_url (string), secure_page_tab_url (string), server_ip_whitelist (list<string>), terms_of_service_url (string), url_scheme_suffix (string), user_support_email (string), user_support_url (string), website_url (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"allow_cycle_app_secret":{"description":"allow_cycle_app_secret","type":"boolean"},"an_platforms":{"description":"an_platforms","items":{"type":"string"},"type":"array"},"app_domains":{"description":"app_domains","items":{"type":"string"},"type":"array"},"app_name":{"description":"app_name","type":"string"},"app_type":{"description":"app_type","type":"boolean"},"auth_dialog_headline":{"description":"auth_dialog_headline","type":"string"},"auth_dialog_perms_explanation":{"description":"auth_dialog_perms_explanation","type":"string"},"auth_referral_enabled":{"description":"auth_referral_enabled","type":"boolean"},"auth_referral_extended_perms":{"description":"auth_referral_extended_perms","items":{"type":"string"},"type":"array"},"auth_referral_friend_perms":{"description":"auth_referral_friend_perms","items":{"type":"string"},"type":"array"},"auth_referral_response_type":{"description":"auth_referral_response_type","type":"string"},"auth_referral_user_perms":{"description":"auth_referral_user_perms","items":{"type":"string"},"type":"array"},"canvas_fluid_height":{"description":"canvas_fluid_height","type":"boolean"},"canvas_fluid_width":{"description":"canvas_fluid_width","type":"boolean"},"canvas_url":{"description":"canvas_url","type":"string"},"contact_email":{"description":"contact_email","type":"string"},"deauth_callback_url":{"description":"deauth_callback_url","type":"string"},"id":{"description":"Application ID","type":"string"},"mobile_web_url":{"description":"mobile_web_url","type":"string"},"namespace":{"description":"namespace","type":"string"},"page_tab_default_name":{"description":"page_tab_default_name","type":"string"},"privacy_policy_url":{"description":"privacy_policy_url","type":"string"},"restrictions":{"description":"restrictions","type":"string"},"secure_canvas_url":{"description":"secure_canvas_url","type":"string"},"secure_page_tab_url":{"description":"secure_page_tab_url","type":"string"},"server_ip_whitelist":{"description":"server_ip_whitelist","items":{"type":"string"},"type":"array"},"terms_of_service_url":{"description":"terms_of_service_url","type":"string"},"url_scheme_suffix":{"description":"url_scheme_suffix","type":"string"},"user_support_email":{"description":"user_support_email","type":"string"},"user_support_url":{"description":"user_support_url","type":"string"},"website_url":{"description":"website_url","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Application_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ArAdsDataContainer_GET_",
			"GET  for ArAdsDataContainer. Returns ArAdsDataContainer",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ArAdsDataContainer ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ArAdsDataContainer_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AsyncSession_GET_",
			"GET  for AsyncSession. Returns AsyncSession",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AsyncSession ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AsyncSession_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AudioAsset_GET_",
			"GET  for AudioAsset. Returns AudioAsset",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AudioAsset ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AudioAsset_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AudioCopyright_GET_update_records",
			"GET update_records for AudioCopyright. Returns MediaCopyrightUpdateRecord",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AudioCopyright ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AudioCopyright_GET_update_recordsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AudioCopyright_GET_",
			"GET  for AudioCopyright. Returns AudioCopyright",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AudioCopyright ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AudioCopyright_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AudioIsrc_GET_",
			"GET  for AudioIsrc. Returns AudioIsrc",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AudioIsrc ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AudioIsrc_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AudioRelease_GET_",
			"GET  for AudioRelease. Returns AudioRelease",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AudioRelease ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AudioRelease_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AudioSubLabel_GET_",
			"GET  for AudioSubLabel. Returns AudioSubLabel",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AudioSubLabel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AudioSubLabel_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AutomotiveModel_GET_channels_to_integrity_status",
			"GET channels_to_integrity_status for AutomotiveModel. Returns CatalogItemChannelsToIntegrityStatus",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AutomotiveModel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AutomotiveModel_GET_channels_to_integrity_statusHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AutomotiveModel_GET_override_details",
			"GET override_details for AutomotiveModel. Returns OverrideDetails. Parameters: keys (list<string>), type (automotivemodeloverride_details_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AutomotiveModel ID","type":"string"},"keys":{"description":"keys","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: automotivemodeloverride_details_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		AutomotiveModel_GET_override_detailsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AutomotiveModel_GET_videos_metadata",
			"GET videos_metadata for AutomotiveModel. Returns DynamicVideoMetadata",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		AutomotiveModel_GET_videos_metadataHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AutomotiveModel_GET_",
			"GET  for AutomotiveModel. Returns AutomotiveModel",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AutomotiveModel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AutomotiveModel_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Avatar_GET_models",
			"GET models for Avatar. Returns AvatarModelObject. Parameters: client_name (string), client_version (string), config_id (string), force_generate (bool), platform (string), profile (string) [required], sdk_version (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"client_name":{"description":"client_name","type":"string"},"client_version":{"description":"client_version","type":"string"},"config_id":{"description":"config_id","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"force_generate":{"description":"force_generate","type":"boolean"},"id":{"description":"Avatar ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"platform":{"description":"platform","type":"string"},"profile":{"description":"profile","type":"string"},"sdk_version":{"description":"sdk_version","type":"string"}},"required":["id","profile"],"type":"object"}`),
		),
		Avatar_GET_modelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Avatar_GET_",
			"GET  for Avatar. Returns Avatar",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Avatar ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Avatar_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AvatarProfilePicture_GET_",
			"GET  for AvatarProfilePicture. Returns AvatarProfilePicture",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AvatarProfilePicture ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		AvatarProfilePicture_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BCPCampaign_GET_",
			"GET  for BCPCampaign. Returns BCPCampaign",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BCPCampaign ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BCPCampaign_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BidSchedule_GET_",
			"GET  for BidSchedule. Returns BidSchedule",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BidSchedule ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BidSchedule_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BizInboxOffsiteEmailAccount_GET_assigned_users",
			"GET assigned_users for BizInboxOffsiteEmailAccount. Returns AssignedUser",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BizInboxOffsiteEmailAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BizInboxOffsiteEmailAccount_GET_assigned_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BizInboxOffsiteEmailAccount_GET_",
			"GET  for BizInboxOffsiteEmailAccount. Returns BizInboxOffsiteEmailAccount",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BizInboxOffsiteEmailAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BizInboxOffsiteEmailAccount_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BlindPig_GET_",
			"GET  for BlindPig. Returns BlindPig",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BlindPig ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BlindPig_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BrandRequest_GET_",
			"GET  for BrandRequest. Returns BrandRequest",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BrandRequest ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BrandRequest_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BrandSafetyDownloadable_GET_",
			"GET  for BrandSafetyDownloadable. Returns BrandSafetyDownloadable",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BrandSafetyDownloadable ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BrandSafetyDownloadable_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_access_token",
			"POST access_token for Business. Returns Business. Parameters: app_id (string) [required], fbe_external_business_id (string), scope (list<Permission>) [required], system_user_name (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"app_id":{"description":"app_id","type":"string"},"fbe_external_business_id":{"description":"fbe_external_business_id","type":"string"},"id":{"description":"Business ID","type":"string"},"scope":{"description":"scope","items":{"type":"string"},"type":"array"},"system_user_name":{"description":"system_user_name","type":"string"}},"required":["id","app_id","scope"],"type":"object"}`),
		),
		Business_POST_access_tokenHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_ad_account_infos",
			"GET ad_account_infos for Business. Returns ALMAdAccountInfo. Parameters: ad_account_id (string), parent_advertiser_id (string), user_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"ad_account_id":{"description":"ad_account_id","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"parent_advertiser_id":{"description":"parent_advertiser_id","type":"string"},"user_id":{"description":"user_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_ad_account_infosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_DELETE_ad_accounts",
			"DELETE ad_accounts for Business. Returns Object. Parameters: adaccount_id (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"adaccount_id":{"description":"adaccount_id","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","adaccount_id"],"type":"object"}`),
		),
		Business_DELETE_ad_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_ad_review_requests",
			"POST ad_review_requests for Business. Returns Object. Parameters: ad_account_ids (list<string>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"ad_account_ids":{"description":"ad_account_ids","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Business_POST_ad_review_requestsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_ad_studies",
			"GET ad_studies for Business. Returns AdStudy",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_ad_studiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_ad_studies",
			"POST ad_studies for Business. Returns AdStudy. Parameters: cells (list<Object>) [required], client_business (string), confidence_level (float), cooldown_start_time (int), description (string), end_time (int) [required], name (string) [required], objectives (list<Object>), observation_end_time (int), start_time (int) [required], type (businessad_studies_type_enum_param), viewers (list<int>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"cells":{"description":"cells","items":{"additionalProperties":true,"type":"object"},"type":"array"},"client_business":{"description":"client_business","type":"string"},"confidence_level":{"description":"confidence_level","type":"number"},"cooldown_start_time":{"description":"cooldown_start_time","type":"integer"},"description":{"description":"description","type":"string"},"end_time":{"description":"end_time","type":"integer"},"id":{"description":"Business ID","type":"string"},"name":{"description":"name","type":"string"},"objectives":{"description":"objectives","items":{"additionalProperties":true,"type":"object"},"type":"array"},"observation_end_time":{"description":"observation_end_time","type":"integer"},"start_time":{"description":"start_time","type":"integer"},"type":{"description":"type (enum: businessad_studies_type_enum_param)","type":"string"},"viewers":{"description":"viewers","items":{"type":"integer"},"type":"array"}},"required":["id","cells","end_time","name","start_time"],"type":"object"}`),
		),
		Business_POST_ad_studiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_adaccount",
			"POST adaccount for Business. Returns AdAccount. Parameters: ad_account_created_from_bm_flag (bool), currency (string) [required], end_advertiser (Object) [required], funding_id (string), invoice (bool), invoice_group_id (string), invoicing_emails (list<string>), io (bool), media_agency (string) [required], name (string) [required], partner (string) [required], po_number (string), timezone_id (unsigned int) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"ad_account_created_from_bm_flag":{"description":"ad_account_created_from_bm_flag","type":"boolean"},"currency":{"description":"currency","type":"string"},"end_advertiser":{"additionalProperties":true,"description":"end_advertiser","type":"object"},"funding_id":{"description":"funding_id","type":"string"},"id":{"description":"Business ID","type":"string"},"invoice":{"description":"invoice","type":"boolean"},"invoice_group_id":{"description":"invoice_group_id","type":"string"},"invoicing_emails":{"description":"invoicing_emails","items":{"type":"string"},"type":"array"},"io":{"description":"io","type":"boolean"},"media_agency":{"description":"media_agency","type":"string"},"name":{"description":"name","type":"string"},"partner":{"description":"partner","type":"string"},"po_number":{"description":"po_number","type":"string"},"timezone_id":{"description":"timezone_id","type":"integer"}},"required":["id","currency","end_advertiser","media_agency","name","partner","timezone_id"],"type":"object"}`),
		),
		Business_POST_adaccountHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_add_phone_numbers",
			"POST add_phone_numbers for Business. Returns Business. Parameters: phone_number (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Business ID","type":"string"},"phone_number":{"description":"phone_number","type":"string"}},"required":["id","phone_number"],"type":"object"}`),
		),
		Business_POST_add_phone_numbersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_adnetwork_applications",
			"POST adnetwork_applications for Business. Returns Application. Parameters: name (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Business ID","type":"string"},"name":{"description":"name","type":"string"}},"required":["id","name"],"type":"object"}`),
		),
		Business_POST_adnetwork_applicationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_adnetworkanalytics",
			"GET adnetworkanalytics for Business. Returns AdNetworkAnalyticsSyncQueryResult. Parameters: aggregation_period (businessadnetworkanalytics_aggregation_period_enum_param), breakdowns (list<businessadnetworkanalytics_breakdowns_enum_param>), filters (list<map>), limit (unsigned int), metrics (list<businessadnetworkanalytics_metrics_enum_param>) [required], ordering_column (businessadnetworkanalytics_ordering_column_enum_param), ordering_type (businessadnetworkanalytics_ordering_type_enum_param), should_include_until (bool), since (datetime), until (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"aggregation_period":{"description":"aggregation_period (enum: businessadnetworkanalytics_aggregation_period_enum_param)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"breakdowns":{"description":"breakdowns","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filters":{"description":"filters","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"metrics":{"description":"metrics","items":{"type":"string"},"type":"array"},"ordering_column":{"description":"ordering_column (enum: businessadnetworkanalytics_ordering_column_enum_param)","type":"string"},"ordering_type":{"description":"ordering_type (enum: businessadnetworkanalytics_ordering_type_enum_param)","type":"string"},"should_include_until":{"description":"should_include_until","type":"boolean"},"since":{"description":"since","type":"string"},"until":{"description":"until","type":"string"}},"required":["id","metrics"],"type":"object"}`),
		),
		Business_GET_adnetworkanalyticsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_adnetworkanalytics",
			"POST adnetworkanalytics for Business. Returns Business. Parameters: aggregation_period (businessadnetworkanalytics_aggregation_period_enum_param), breakdowns (list<businessadnetworkanalytics_breakdowns_enum_param>), filters (list<Object>), limit (int), metrics (list<businessadnetworkanalytics_metrics_enum_param>) [required], ordering_column (businessadnetworkanalytics_ordering_column_enum_param), ordering_type (businessadnetworkanalytics_ordering_type_enum_param), since (datetime), until (datetime)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"aggregation_period":{"description":"aggregation_period (enum: businessadnetworkanalytics_aggregation_period_enum_param)","type":"string"},"breakdowns":{"description":"breakdowns","items":{"type":"string"},"type":"array"},"filters":{"description":"filters","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"limit","type":"integer"},"metrics":{"description":"metrics","items":{"type":"string"},"type":"array"},"ordering_column":{"description":"ordering_column (enum: businessadnetworkanalytics_ordering_column_enum_param)","type":"string"},"ordering_type":{"description":"ordering_type (enum: businessadnetworkanalytics_ordering_type_enum_param)","type":"string"},"since":{"description":"since","type":"string"},"until":{"description":"until","type":"string"}},"required":["id","metrics"],"type":"object"}`),
		),
		Business_POST_adnetworkanalyticsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_adnetworkanalytics_results",
			"GET adnetworkanalytics_results for Business. Returns AdNetworkAnalyticsAsyncQueryResult. Parameters: query_ids (list<string>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"query_ids":{"description":"query_ids","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_adnetworkanalytics_resultsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_ads_dataset",
			"GET ads_dataset for Business. Returns AdsDataset. Parameters: id_filter (string), name_filter (string), sort_by (businessads_dataset_sort_by_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"id_filter":{"description":"id_filter","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"name_filter":{"description":"name_filter","type":"string"},"sort_by":{"description":"sort_by (enum: businessads_dataset_sort_by_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_ads_datasetHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_ads_dataset",
			"POST ads_dataset for Business. Returns Business. Parameters: ad_account_id (string), app_id (string), is_crm (bool), name (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"ad_account_id":{"description":"ad_account_id","type":"string"},"app_id":{"description":"app_id","type":"string"},"id":{"description":"Business ID","type":"string"},"is_crm":{"description":"is_crm","type":"boolean"},"name":{"description":"name","type":"string"}},"required":["id","name"],"type":"object"}`),
		),
		Business_POST_ads_datasetHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_ads_reporting_mmm_reports",
			"GET ads_reporting_mmm_reports for Business. Returns AdsReportBuilderMMMReport. Parameters: filtering (list<map>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filtering":{"description":"filtering","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_ads_reporting_mmm_reportsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_ads_reporting_mmm_schedulers",
			"GET ads_reporting_mmm_schedulers for Business. Returns AdsReportBuilderMMMReportScheduler",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_ads_reporting_mmm_schedulersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_adspixels",
			"GET adspixels for Business. Returns AdsPixel. Parameters: id_filter (string), name_filter (string), sort_by (businessadspixels_sort_by_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"id_filter":{"description":"id_filter","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"name_filter":{"description":"name_filter","type":"string"},"sort_by":{"description":"sort_by (enum: businessadspixels_sort_by_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_adspixelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_adspixels",
			"POST adspixels for Business. Returns AdsPixel. Parameters: is_crm (bool), name (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Business ID","type":"string"},"is_crm":{"description":"is_crm","type":"boolean"},"name":{"description":"name","type":"string"}},"required":["id","name"],"type":"object"}`),
		),
		Business_POST_adspixelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_DELETE_agencies",
			"DELETE agencies for Business. Returns Object. Parameters: business (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business":{"description":"business","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","business"],"type":"object"}`),
		),
		Business_DELETE_agenciesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_agencies",
			"GET agencies for Business. Returns Business",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_agenciesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_an_placements",
			"GET an_placements for Business. Returns AdPlacement",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Business_GET_an_placementsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_block_list_drafts",
			"POST block_list_drafts for Business. Returns Business. Parameters: publisher_urls_file (file) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Business ID","type":"string"},"publisher_urls_file":{"description":"publisher_urls_file","type":"string"}},"required":["id","publisher_urls_file"],"type":"object"}`),
		),
		Business_POST_block_list_draftsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_bm_review_requests",
			"POST bm_review_requests for Business. Returns Object. Parameters: business_manager_ids (list<string>) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"business_manager_ids":{"description":"business_manager_ids","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"}},"required":["id","business_manager_ids"],"type":"object"}`),
		),
		Business_POST_bm_review_requestsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_business_asset_groups",
			"GET business_asset_groups for Business. Returns BusinessAssetGroup",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Business_GET_business_asset_groupsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_business_invoices",
			"GET business_invoices for Business. Returns OmegaCustomerTrx. Parameters: end_date (string), invoice_id (string), issue_end_date (string), issue_start_date (string), root_id (unsigned int), start_date (string), type (businessbusiness_invoices_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"end_date":{"description":"end_date","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"invoice_id":{"description":"invoice_id","type":"string"},"issue_end_date":{"description":"issue_end_date","type":"string"},"issue_start_date":{"description":"issue_start_date","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"root_id":{"description":"root_id","type":"integer"},"start_date":{"description":"start_date","type":"string"},"type":{"description":"type (enum: businessbusiness_invoices_type_enum_param)","type":"string"}},"type":"object"}`),
		),
		Business_GET_business_invoicesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_business_users",
			"GET business_users for Business. Returns BusinessUser",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Business_GET_business_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_business_users",
			"POST business_users for Business. Returns BusinessUser. Parameters: email (string) [required], invited_user_type (list<businessbusiness_users_invited_user_type_enum_param>), role (businessbusiness_users_role_enum_param), tasks (list<businessbusiness_users_tasks_enum_param>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"email":{"description":"email","type":"string"},"invited_user_type":{"description":"invited_user_type","items":{"type":"string"},"type":"array"},"role":{"description":"role (enum: businessbusiness_users_role_enum_param)","type":"string"},"tasks":{"description":"tasks","items":{"type":"string"},"type":"array"}},"required":["email"],"type":"object"}`),
		),
		Business_POST_business_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_businessprojects",
			"GET businessprojects for Business. Returns BusinessProject",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Business_GET_businessprojectsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_claim_custom_conversions",
			"POST claim_custom_conversions for Business. Returns CustomConversion. Parameters: custom_conversion_id (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"custom_conversion_id":{"description":"custom_conversion_id","type":"string"},"id":{"description":"Business ID","type":"string"}},"required":["id","custom_conversion_id"],"type":"object"}`),
		),
		Business_POST_claim_custom_conversionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_client_ad_accounts",
			"GET client_ad_accounts for Business. Returns AdAccount. Parameters: search_query (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"search_query":{"description":"search_query","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_client_ad_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_client_apps",
			"GET client_apps for Business. Returns Application",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_client_appsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_client_apps",
			"POST client_apps for Business. Returns Business. Parameters: app_id (Object) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"app_id":{"additionalProperties":true,"description":"app_id","type":"object"},"id":{"description":"Business ID","type":"string"}},"required":["id","app_id"],"type":"object"}`),
		),
		Business_POST_client_appsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_client_offsite_signal_container_business_objects",
			"GET client_offsite_signal_container_business_objects for Business. Returns OffsiteSignalContainerBusinessObject",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Business_GET_client_offsite_signal_container_business_objectsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_client_pages",
			"GET client_pages for Business. Returns Page",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_client_pagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_client_pages",
			"POST client_pages for Business. Returns Business. Parameters: page_id (int) [required], permitted_tasks (list<businessclient_pages_permitted_tasks_enum_param>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Business ID","type":"string"},"page_id":{"description":"page_id","type":"integer"},"permitted_tasks":{"description":"permitted_tasks","items":{"type":"string"},"type":"array"}},"required":["id","page_id"],"type":"object"}`),
		),
		Business_POST_client_pagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_client_pixels",
			"GET client_pixels for Business. Returns AdsPixel",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_client_pixelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_client_product_catalogs",
			"GET client_product_catalogs for Business. Returns ProductCatalog",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_client_product_catalogsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_client_whatsapp_business_accounts",
			"GET client_whatsapp_business_accounts for Business. Returns WhatsAppBusinessAccount",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Business_GET_client_whatsapp_business_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_DELETE_clients",
			"DELETE clients for Business. Returns Object. Parameters: business (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business":{"description":"business","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","business"],"type":"object"}`),
		),
		Business_DELETE_clientsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_clients",
			"GET clients for Business. Returns Business",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_clientsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_collaborative_ads_collaboration_requests",
			"GET collaborative_ads_collaboration_requests for Business. Returns CPASCollaborationRequest. Parameters: status (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"status":{"description":"status","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_collaborative_ads_collaboration_requestsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_collaborative_ads_collaboration_requests",
			"POST collaborative_ads_collaboration_requests for Business. Returns CPASCollaborationRequest. Parameters: brands (list<string>) [required], contact_email (string) [required], contact_first_name (string) [required], contact_last_name (string) [required], phone_number (string), receiver_business (string) [required], requester_agency_or_brand (businesscollaborative_ads_collaboration_requests_requester_agency_or_brand_enum_param) [required], sender_client_business (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"brands":{"description":"brands","items":{"type":"string"},"type":"array"},"contact_email":{"description":"contact_email","type":"string"},"contact_first_name":{"description":"contact_first_name","type":"string"},"contact_last_name":{"description":"contact_last_name","type":"string"},"id":{"description":"Business ID","type":"string"},"phone_number":{"description":"phone_number","type":"string"},"receiver_business":{"description":"receiver_business","type":"string"},"requester_agency_or_brand":{"description":"requester_agency_or_brand (enum: businesscollaborative_ads_collaboration_requests_requester_agency_or_brand_enum_param)","type":"string"},"sender_client_business":{"description":"sender_client_business","type":"string"}},"required":["id","brands","contact_email","contact_first_name","contact_last_name","receiver_business","requester_agency_or_brand"],"type":"object"}`),
		),
		Business_POST_collaborative_ads_collaboration_requestsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_collaborative_ads_suggested_partners",
			"GET collaborative_ads_suggested_partners for Business. Returns CPASAdvertiserPartnershipRecommendation",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_collaborative_ads_suggested_partnersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_commerce_merchant_settings",
			"GET commerce_merchant_settings for Business. Returns CommerceMerchantSettings",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Business_GET_commerce_merchant_settingsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_cpas_business_setup_config",
			"GET cpas_business_setup_config for Business. Returns CPASBusinessSetupConfig",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Business_GET_cpas_business_setup_configHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_cpas_business_setup_config",
			"POST cpas_business_setup_config for Business. Returns CPASBusinessSetupConfig. Parameters: accepted_collab_ads_tos (bool), ad_accounts (list<string>), business_capabilities_status (map), capabilities_compliance_status (map)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"accepted_collab_ads_tos":{"description":"accepted_collab_ads_tos","type":"boolean"},"ad_accounts":{"description":"ad_accounts","items":{"type":"string"},"type":"array"},"business_capabilities_status":{"description":"business_capabilities_status","type":"string"},"capabilities_compliance_status":{"description":"capabilities_compliance_status","type":"string"}},"type":"object"}`),
		),
		Business_POST_cpas_business_setup_configHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_cpas_merchant_config",
			"GET cpas_merchant_config for Business. Returns CPASMerchantConfig",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Business_GET_cpas_merchant_configHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_creative_folders",
			"POST creative_folders for Business. Returns BusinessCreativeFolder. Parameters: description (string), name (string) [required], parent_folder_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"description":{"description":"description","type":"string"},"id":{"description":"Business ID","type":"string"},"name":{"description":"name","type":"string"},"parent_folder_id":{"description":"parent_folder_id","type":"string"}},"required":["id","name"],"type":"object"}`),
		),
		Business_POST_creative_foldersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_creditcards",
			"GET creditcards for Business. Returns CreditCard",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_creditcardsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_customconversions",
			"POST customconversions for Business. Returns CustomConversion. Parameters: action_source_type (businesscustomconversions_action_source_type_enum_param), advanced_rule (string), custom_event_type (businesscustomconversions_custom_event_type_enum_param) [required], default_conversion_value (float), description (string), event_source_id (string), name (string) [required], rule (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"action_source_type":{"description":"action_source_type (enum: businesscustomconversions_action_source_type_enum_param)","type":"string"},"advanced_rule":{"description":"advanced_rule","type":"string"},"custom_event_type":{"description":"custom_event_type (enum: businesscustomconversions_custom_event_type_enum_param)","type":"string"},"default_conversion_value":{"description":"default_conversion_value","type":"number"},"description":{"description":"description","type":"string"},"event_source_id":{"description":"event_source_id","type":"string"},"id":{"description":"Business ID","type":"string"},"name":{"description":"name","type":"string"},"rule":{"description":"rule","type":"string"}},"required":["id","custom_event_type","name"],"type":"object"}`),
		),
		Business_POST_customconversionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_event_source_groups",
			"GET event_source_groups for Business. Returns EventSourceGroup",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_event_source_groupsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_event_source_groups",
			"POST event_source_groups for Business. Returns EventSourceGroup. Parameters: event_sources (list<string>) [required], name (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"event_sources":{"description":"event_sources","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"name":{"description":"name","type":"string"}},"required":["id","event_sources","name"],"type":"object"}`),
		),
		Business_POST_event_source_groupsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_extendedcreditapplications",
			"GET extendedcreditapplications for Business. Returns ExtendedCreditApplication. Parameters: only_show_pending (bool)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"only_show_pending":{"description":"only_show_pending","type":"boolean"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_extendedcreditapplicationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_extendedcredits",
			"GET extendedcredits for Business. Returns ExtendedCredit. Parameters: order_by_is_owned_credential (bool)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"order_by_is_owned_credential":{"description":"order_by_is_owned_credential","type":"boolean"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_extendedcreditsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_images",
			"POST images for Business. Returns BusinessImage. Parameters: ad_placements_validation_only (bool), bytes (string), creative_folder_id (string) [required], name (string), validation_ad_placements (list<businessimages_validation_ad_placements_enum_param>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"ad_placements_validation_only":{"description":"ad_placements_validation_only","type":"boolean"},"bytes":{"description":"bytes","type":"string"},"creative_folder_id":{"description":"creative_folder_id","type":"string"},"id":{"description":"Business ID","type":"string"},"name":{"description":"name","type":"string"},"validation_ad_placements":{"description":"validation_ad_placements","items":{"type":"string"},"type":"array"}},"required":["id","creative_folder_id"],"type":"object"}`),
		),
		Business_POST_imagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_initiated_audience_sharing_requests",
			"GET initiated_audience_sharing_requests for Business. Returns BusinessAssetSharingAgreement. Parameters: recipient_id (string), request_status (businessinitiated_audience_sharing_requests_request_status_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"recipient_id":{"description":"recipient_id","type":"string"},"request_status":{"description":"request_status (enum: businessinitiated_audience_sharing_requests_request_status_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_initiated_audience_sharing_requestsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_DELETE_instagram_accounts",
			"DELETE instagram_accounts for Business. Returns Object. Parameters: instagram_account (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"instagram_account":{"description":"instagram_account","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","instagram_account"],"type":"object"}`),
		),
		Business_DELETE_instagram_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_instagram_accounts",
			"GET instagram_accounts for Business. Returns IGUser",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_instagram_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_instagram_business_accounts",
			"GET instagram_business_accounts for Business. Returns IGUser",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Business_GET_instagram_business_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_DELETE_managed_businesses",
			"DELETE managed_businesses for Business. Returns Object. Parameters: existing_client_business_id (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"existing_client_business_id":{"description":"existing_client_business_id","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["existing_client_business_id"],"type":"object"}`),
		),
		Business_DELETE_managed_businessesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_managed_businesses",
			"POST managed_businesses for Business. Returns Business. Parameters: child_business_external_id (string), existing_client_business_id (string), name (string), sales_rep_email (string), survey_business_type (businessmanaged_businesses_survey_business_type_enum_param), survey_num_assets (unsigned int), survey_num_people (unsigned int), timezone_id (businessmanaged_businesses_timezone_id_enum_param), vertical (businessmanaged_businesses_vertical_enum_param)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"child_business_external_id":{"description":"child_business_external_id","type":"string"},"existing_client_business_id":{"description":"existing_client_business_id","type":"string"},"name":{"description":"name","type":"string"},"sales_rep_email":{"description":"sales_rep_email","type":"string"},"survey_business_type":{"description":"survey_business_type (enum: businessmanaged_businesses_survey_business_type_enum_param)","type":"string"},"survey_num_assets":{"description":"survey_num_assets","type":"integer"},"survey_num_people":{"description":"survey_num_people","type":"integer"},"timezone_id":{"description":"timezone_id (enum: businessmanaged_businesses_timezone_id_enum_param)","type":"string"},"vertical":{"description":"vertical (enum: businessmanaged_businesses_vertical_enum_param)","type":"string"}},"type":"object"}`),
		),
		Business_POST_managed_businessesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_managed_partner_ads_funding_source_details",
			"GET managed_partner_ads_funding_source_details for Business. Returns FundingSourceDetailsCoupon. Parameters: year_quarter (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"year_quarter":{"description":"year_quarter","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_managed_partner_ads_funding_source_detailsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_managed_partner_business_setup",
			"POST managed_partner_business_setup for Business. Returns Business. Parameters: active_ad_account_id (string), active_page_id (int), partner_facebook_page_url (string), partner_registration_countries (list<string>), seller_email_address (string), seller_external_website_url (string), template (list<map>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"active_ad_account_id":{"description":"active_ad_account_id","type":"string"},"active_page_id":{"description":"active_page_id","type":"integer"},"partner_facebook_page_url":{"description":"partner_facebook_page_url","type":"string"},"partner_registration_countries":{"description":"partner_registration_countries","items":{"type":"string"},"type":"array"},"seller_email_address":{"description":"seller_email_address","type":"string"},"seller_external_website_url":{"description":"seller_external_website_url","type":"string"},"template":{"description":"template","items":{"additionalProperties":true,"type":"object"},"type":"array"}},"type":"object"}`),
		),
		Business_POST_managed_partner_business_setupHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_DELETE_managed_partner_businesses",
			"DELETE managed_partner_businesses for Business. Returns Object. Parameters: child_business_external_id (string), child_business_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"child_business_external_id":{"description":"child_business_external_id","type":"string"},"child_business_id":{"description":"child_business_id","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Business_DELETE_managed_partner_businessesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_managed_partner_businesses",
			"POST managed_partner_businesses for Business. Returns ManagedPartnerBusiness. Parameters: ad_account_currency (string), catalog_id (string) [required], child_business_external_id (string), credit_limit (unsigned int), line_of_credit_id (string), name (string) [required], no_ad_account (bool), page_name (string), page_profile_image_url (string), partition_type (businessmanaged_partner_businesses_partition_type_enum_param), partner_facebook_page_url (string), partner_registration_countries (list<string>), sales_rep_email (string), seller_external_website_url (string) [required], seller_targeting_countries (list<string>) [required], skip_partner_page_creation (bool), survey_business_type (businessmanaged_partner_businesses_survey_business_type_enum_param), survey_num_assets (unsigned int), survey_num_people (unsigned int), timezone_id (businessmanaged_partner_businesses_timezone_id_enum_param), vertical (businessmanaged_partner_businesses_vertical_enum_param) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"ad_account_currency":{"description":"ad_account_currency","type":"string"},"catalog_id":{"description":"catalog_id","type":"string"},"child_business_external_id":{"description":"child_business_external_id","type":"string"},"credit_limit":{"description":"credit_limit","type":"integer"},"line_of_credit_id":{"description":"line_of_credit_id","type":"string"},"name":{"description":"name","type":"string"},"no_ad_account":{"description":"no_ad_account","type":"boolean"},"page_name":{"description":"page_name","type":"string"},"page_profile_image_url":{"description":"page_profile_image_url","type":"string"},"partition_type":{"description":"partition_type (enum: businessmanaged_partner_businesses_partition_type_enum_param)","type":"string"},"partner_facebook_page_url":{"description":"partner_facebook_page_url","type":"string"},"partner_registration_countries":{"description":"partner_registration_countries","items":{"type":"string"},"type":"array"},"sales_rep_email":{"description":"sales_rep_email","type":"string"},"seller_external_website_url":{"description":"seller_external_website_url","type":"string"},"seller_targeting_countries":{"description":"seller_targeting_countries","items":{"type":"string"},"type":"array"},"skip_partner_page_creation":{"description":"skip_partner_page_creation","type":"boolean"},"survey_business_type":{"description":"survey_business_type (enum: businessmanaged_partner_businesses_survey_business_type_enum_param)","type":"string"},"survey_num_assets":{"description":"survey_num_assets","type":"integer"},"survey_num_people":{"description":"survey_num_people","type":"integer"},"timezone_id":{"description":"timezone_id (enum: businessmanaged_partner_businesses_timezone_id_enum_param)","type":"string"},"vertical":{"description":"vertical (enum: businessmanaged_partner_businesses_vertical_enum_param)","type":"string"}},"required":["catalog_id","name","seller_external_website_url","seller_targeting_countries","vertical"],"type":"object"}`),
		),
		Business_POST_managed_partner_businessesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_onboard_partners_to_mm_lite",
			"POST onboard_partners_to_mm_lite for Business. Returns Object. Parameters: solution_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Business ID","type":"string"},"solution_id":{"description":"solution_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Business_POST_onboard_partners_to_mm_liteHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_openbridge_configurations",
			"GET openbridge_configurations for Business. Returns OpenBridgeConfiguration",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_openbridge_configurationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_openbridge_configurations",
			"POST openbridge_configurations for Business. Returns OpenBridgeConfiguration. Parameters: active (bool), cloud_provider (string), cloud_region (string), destination_id (string), endpoint (string), fallback_domain (string), first_party_domain (string), host_business_id (unsigned int), instance_id (string), instance_version (string), is_sgw_instance (bool), is_sgw_pixel_from_meta_pixel (bool), partner_name (string), pixel_id (unsigned int) [required], sgw_account_id (string), sgw_instance_url (string), sgw_pixel_id (unsigned int)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"active":{"description":"active","type":"boolean"},"cloud_provider":{"description":"cloud_provider","type":"string"},"cloud_region":{"description":"cloud_region","type":"string"},"destination_id":{"description":"destination_id","type":"string"},"endpoint":{"description":"endpoint","type":"string"},"fallback_domain":{"description":"fallback_domain","type":"string"},"first_party_domain":{"description":"first_party_domain","type":"string"},"host_business_id":{"description":"host_business_id","type":"integer"},"id":{"description":"Business ID","type":"string"},"instance_id":{"description":"instance_id","type":"string"},"instance_version":{"description":"instance_version","type":"string"},"is_sgw_instance":{"description":"is_sgw_instance","type":"boolean"},"is_sgw_pixel_from_meta_pixel":{"description":"is_sgw_pixel_from_meta_pixel","type":"boolean"},"partner_name":{"description":"partner_name","type":"string"},"pixel_id":{"description":"pixel_id","type":"integer"},"sgw_account_id":{"description":"sgw_account_id","type":"string"},"sgw_instance_url":{"description":"sgw_instance_url","type":"string"},"sgw_pixel_id":{"description":"sgw_pixel_id","type":"integer"}},"required":["id","pixel_id"],"type":"object"}`),
		),
		Business_POST_openbridge_configurationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_owned_ad_accounts",
			"GET owned_ad_accounts for Business. Returns AdAccount. Parameters: search_query (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"search_query":{"description":"search_query","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_owned_ad_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_owned_ad_accounts",
			"POST owned_ad_accounts for Business. Returns Business. Parameters: adaccount_id (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"adaccount_id":{"description":"adaccount_id","type":"string"},"id":{"description":"Business ID","type":"string"}},"required":["id","adaccount_id"],"type":"object"}`),
		),
		Business_POST_owned_ad_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_owned_apps",
			"GET owned_apps for Business. Returns Application",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_owned_appsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_owned_apps",
			"POST owned_apps for Business. Returns Business. Parameters: app_id (Object) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"app_id":{"additionalProperties":true,"description":"app_id","type":"object"},"id":{"description":"Business ID","type":"string"}},"required":["id","app_id"],"type":"object"}`),
		),
		Business_POST_owned_appsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_DELETE_owned_businesses",
			"DELETE owned_businesses for Business. Returns Object. Parameters: client_id (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"client_id":{"description":"client_id","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["client_id"],"type":"object"}`),
		),
		Business_DELETE_owned_businessesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_owned_businesses",
			"GET owned_businesses for Business. Returns Business. Parameters: child_business_external_id (string), client_user_id (int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"child_business_external_id":{"description":"child_business_external_id","type":"string"},"client_user_id":{"description":"client_user_id","type":"integer"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Business_GET_owned_businessesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_owned_businesses",
			"POST owned_businesses for Business. Returns Business. Parameters: child_business_external_id (string), name (string) [required], page_permitted_tasks (list<businessowned_businesses_page_permitted_tasks_enum_param>), sales_rep_email (string), shared_page_id (string), should_generate_name (bool), survey_business_type (businessowned_businesses_survey_business_type_enum_param), survey_num_assets (unsigned int), survey_num_people (unsigned int), timezone_id (businessowned_businesses_timezone_id_enum_param), vertical (businessowned_businesses_vertical_enum_param) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"child_business_external_id":{"description":"child_business_external_id","type":"string"},"name":{"description":"name","type":"string"},"page_permitted_tasks":{"description":"page_permitted_tasks","items":{"type":"string"},"type":"array"},"sales_rep_email":{"description":"sales_rep_email","type":"string"},"shared_page_id":{"description":"shared_page_id","type":"string"},"should_generate_name":{"description":"should_generate_name","type":"boolean"},"survey_business_type":{"description":"survey_business_type (enum: businessowned_businesses_survey_business_type_enum_param)","type":"string"},"survey_num_assets":{"description":"survey_num_assets","type":"integer"},"survey_num_people":{"description":"survey_num_people","type":"integer"},"timezone_id":{"description":"timezone_id (enum: businessowned_businesses_timezone_id_enum_param)","type":"string"},"vertical":{"description":"vertical (enum: businessowned_businesses_vertical_enum_param)","type":"string"}},"required":["name","vertical"],"type":"object"}`),
		),
		Business_POST_owned_businessesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_owned_instagram_accounts",
			"GET owned_instagram_accounts for Business. Returns IGUser",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_owned_instagram_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_owned_offsite_signal_container_business_objects",
			"GET owned_offsite_signal_container_business_objects for Business. Returns OffsiteSignalContainerBusinessObject",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Business_GET_owned_offsite_signal_container_business_objectsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_owned_pages",
			"GET owned_pages for Business. Returns Page",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_owned_pagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_owned_pages",
			"POST owned_pages for Business. Returns Business. Parameters: code (string), entry_point (string), page_id (int) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"code":{"description":"code","type":"string"},"entry_point":{"description":"entry_point","type":"string"},"id":{"description":"Business ID","type":"string"},"page_id":{"description":"page_id","type":"integer"}},"required":["id","page_id"],"type":"object"}`),
		),
		Business_POST_owned_pagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_owned_pixels",
			"GET owned_pixels for Business. Returns AdsPixel",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_owned_pixelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_owned_product_catalogs",
			"GET owned_product_catalogs for Business. Returns ProductCatalog",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_owned_product_catalogsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_owned_product_catalogs",
			"POST owned_product_catalogs for Business. Returns ProductCatalog. Parameters: additional_vertical_option (businessowned_product_catalogs_additional_vertical_option_enum_param), business_metadata (map), catalog_segment_filter (Object), catalog_segment_product_set_id (string), da_display_settings (Object), destination_catalog_settings (map), flight_catalog_settings (map), name (string) [required], parent_catalog_id (string), partner_integration (map), store_catalog_settings (map), vertical (businessowned_product_catalogs_vertical_enum_param)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"additional_vertical_option":{"description":"additional_vertical_option (enum: businessowned_product_catalogs_additional_vertical_option_enum_param)","type":"string"},"business_metadata":{"description":"business_metadata","type":"string"},"catalog_segment_filter":{"additionalProperties":true,"description":"catalog_segment_filter","type":"object"},"catalog_segment_product_set_id":{"description":"catalog_segment_product_set_id","type":"string"},"da_display_settings":{"additionalProperties":true,"description":"da_display_settings","type":"object"},"destination_catalog_settings":{"description":"destination_catalog_settings","type":"string"},"flight_catalog_settings":{"description":"flight_catalog_settings","type":"string"},"id":{"description":"Business ID","type":"string"},"name":{"description":"name","type":"string"},"parent_catalog_id":{"description":"parent_catalog_id","type":"string"},"partner_integration":{"description":"partner_integration","type":"string"},"store_catalog_settings":{"description":"store_catalog_settings","type":"string"},"vertical":{"description":"vertical (enum: businessowned_product_catalogs_vertical_enum_param)","type":"string"}},"required":["id","name"],"type":"object"}`),
		),
		Business_POST_owned_product_catalogsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_owned_whatsapp_business_accounts",
			"GET owned_whatsapp_business_accounts for Business. Returns WhatsAppBusinessAccount",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Business_GET_owned_whatsapp_business_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_DELETE_pages",
			"DELETE pages for Business. Returns Object. Parameters: page_id (int) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"page_id":{"description":"page_id","type":"integer"}},"required":["id","page_id"],"type":"object"}`),
		),
		Business_DELETE_pagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_partner_account_linking",
			"GET partner_account_linking for Business. Returns PartnerAccountLinking",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_partner_account_linkingHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_partner_premium_options",
			"POST partner_premium_options for Business. Returns Object. Parameters: catalog_segment_id (string), enable_basket_insight (bool) [required], enable_extended_audience_retargeting (bool) [required], partner_business_id (string) [required], retailer_custom_audience_config (map) [required], vendor_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"catalog_segment_id":{"description":"catalog_segment_id","type":"string"},"enable_basket_insight":{"description":"enable_basket_insight","type":"boolean"},"enable_extended_audience_retargeting":{"description":"enable_extended_audience_retargeting","type":"boolean"},"id":{"description":"Business ID","type":"string"},"partner_business_id":{"description":"partner_business_id","type":"string"},"retailer_custom_audience_config":{"description":"retailer_custom_audience_config","type":"string"},"vendor_id":{"description":"vendor_id","type":"string"}},"required":["id","enable_basket_insight","enable_extended_audience_retargeting","partner_business_id","retailer_custom_audience_config"],"type":"object"}`),
		),
		Business_POST_partner_premium_optionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_passback_attribution_metadata_configs",
			"GET passback_attribution_metadata_configs for Business. Returns SignalsAttributionMetadataConfig",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Business_GET_passback_attribution_metadata_configsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_pending_client_ad_accounts",
			"GET pending_client_ad_accounts for Business. Returns BusinessAdAccountRequest",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_pending_client_ad_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_pending_client_apps",
			"GET pending_client_apps for Business. Returns BusinessApplicationRequest",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_pending_client_appsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_pending_client_pages",
			"GET pending_client_pages for Business. Returns BusinessPageRequest",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_pending_client_pagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_pending_owned_ad_accounts",
			"GET pending_owned_ad_accounts for Business. Returns BusinessAdAccountRequest",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_pending_owned_ad_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_pending_owned_pages",
			"GET pending_owned_pages for Business. Returns BusinessPageRequest",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_pending_owned_pagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_pending_shared_offsite_signal_container_business_objects",
			"GET pending_shared_offsite_signal_container_business_objects for Business. Returns OffsiteSignalContainerBusinessObject",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Business_GET_pending_shared_offsite_signal_container_business_objectsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_pending_users",
			"GET pending_users for Business. Returns BusinessRoleRequest. Parameters: email (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"email":{"description":"email","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_pending_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_picture",
			"GET picture for Business. Returns ProfilePictureSource. Parameters: height (int), redirect (bool), type (businesspicture_type_enum_param), width (int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"height":{"description":"height","type":"integer"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"redirect":{"description":"redirect","type":"boolean"},"type":{"description":"type (enum: businesspicture_type_enum_param)","type":"string"},"width":{"description":"width","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_pictureHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_pixel_tos",
			"POST pixel_tos for Business. Returns Object",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Business ID","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Business_POST_pixel_tosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_preverified_numbers",
			"GET preverified_numbers for Business. Returns WhatsAppBusinessPreVerifiedPhoneNumber. Parameters: code_verification_status (businesspreverified_numbers_code_verification_status_enum_param), phone_number (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"code_verification_status":{"description":"code_verification_status (enum: businesspreverified_numbers_code_verification_status_enum_param)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"phone_number":{"description":"phone_number","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_preverified_numbersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_received_audience_sharing_requests",
			"GET received_audience_sharing_requests for Business. Returns BusinessAssetSharingAgreement. Parameters: initiator_id (string), request_status (businessreceived_audience_sharing_requests_request_status_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"initiator_id":{"description":"initiator_id","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"request_status":{"description":"request_status (enum: businessreceived_audience_sharing_requests_request_status_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_received_audience_sharing_requestsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_reseller_guidances",
			"GET reseller_guidances for Business. Returns ResellerGuidance",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_reseller_guidancesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_self_certified_whatsapp_business_submissions",
			"GET self_certified_whatsapp_business_submissions for Business. Returns WhatsAppBusinessPartnerClientVerificationSubmission. Parameters: end_business_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"end_business_id":{"description":"end_business_id","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Business_GET_self_certified_whatsapp_business_submissionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_self_certify_whatsapp_business",
			"POST self_certify_whatsapp_business for Business. Returns Business. Parameters: average_monthly_revenue_spend_with_partner (map), business_documents (list<file>) [required], business_vertical (businessself_certify_whatsapp_business_business_vertical_enum_param), end_business_address (map), end_business_id (string) [required], end_business_legal_name (string), end_business_trade_names (list<string>), end_business_website (string), num_billing_cycles_with_partner (unsigned int)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"average_monthly_revenue_spend_with_partner":{"description":"average_monthly_revenue_spend_with_partner","type":"string"},"business_documents":{"description":"business_documents","items":{"type":"string"},"type":"array"},"business_vertical":{"description":"business_vertical (enum: businessself_certify_whatsapp_business_business_vertical_enum_param)","type":"string"},"end_business_address":{"description":"end_business_address","type":"string"},"end_business_id":{"description":"end_business_id","type":"string"},"end_business_legal_name":{"description":"end_business_legal_name","type":"string"},"end_business_trade_names":{"description":"end_business_trade_names","items":{"type":"string"},"type":"array"},"end_business_website":{"description":"end_business_website","type":"string"},"num_billing_cycles_with_partner":{"description":"num_billing_cycles_with_partner","type":"integer"}},"required":["business_documents","end_business_id"],"type":"object"}`),
		),
		Business_POST_self_certify_whatsapp_businessHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_setup_managed_partner_adaccounts",
			"POST setup_managed_partner_adaccounts for Business. Returns Business. Parameters: credit_line_id (string) [required], marketplace_business_id (string) [required], subvertical_v2 (businesssetup_managed_partner_adaccounts_subvertical_v2_enum_param) [required], vendor_id (string) [required], vertical_v2 (businesssetup_managed_partner_adaccounts_vertical_v2_enum_param) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"credit_line_id":{"description":"credit_line_id","type":"string"},"id":{"description":"Business ID","type":"string"},"marketplace_business_id":{"description":"marketplace_business_id","type":"string"},"subvertical_v2":{"description":"subvertical_v2 (enum: businesssetup_managed_partner_adaccounts_subvertical_v2_enum_param)","type":"string"},"vendor_id":{"description":"vendor_id","type":"string"},"vertical_v2":{"description":"vertical_v2 (enum: businesssetup_managed_partner_adaccounts_vertical_v2_enum_param)","type":"string"}},"required":["id","credit_line_id","marketplace_business_id","subvertical_v2","vendor_id","vertical_v2"],"type":"object"}`),
		),
		Business_POST_setup_managed_partner_adaccountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_DELETE_share_preverified_numbers",
			"DELETE share_preverified_numbers for Business. Returns Object. Parameters: partner_business_id (string) [required], preverified_id (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"partner_business_id":{"description":"partner_business_id","type":"string"},"preverified_id":{"description":"preverified_id","type":"string"}},"required":["id","partner_business_id","preverified_id"],"type":"object"}`),
		),
		Business_DELETE_share_preverified_numbersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_share_preverified_numbers",
			"POST share_preverified_numbers for Business. Returns Business. Parameters: partner_business_id (string) [required], preverified_id (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Business ID","type":"string"},"partner_business_id":{"description":"partner_business_id","type":"string"},"preverified_id":{"description":"preverified_id","type":"string"}},"required":["id","partner_business_id","preverified_id"],"type":"object"}`),
		),
		Business_POST_share_preverified_numbersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_system_user_access_tokens",
			"POST system_user_access_tokens for Business. Returns Business. Parameters: asset (list<unsigned int>), fetch_only (bool), scope (list<Permission>), set_token_expires_in_60_days (bool), system_user_id (unsigned int)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"asset":{"description":"asset","items":{"type":"integer"},"type":"array"},"fetch_only":{"description":"fetch_only","type":"boolean"},"id":{"description":"Business ID","type":"string"},"scope":{"description":"scope","items":{"type":"string"},"type":"array"},"set_token_expires_in_60_days":{"description":"set_token_expires_in_60_days","type":"boolean"},"system_user_id":{"description":"system_user_id","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_POST_system_user_access_tokensHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_system_users",
			"GET system_users for Business. Returns SystemUser",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_system_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_system_users",
			"POST system_users for Business. Returns SystemUser. Parameters: name (string) [required], role (businesssystem_users_role_enum_param), system_user_id (int)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Business ID","type":"string"},"name":{"description":"name","type":"string"},"role":{"description":"role (enum: businesssystem_users_role_enum_param)","type":"string"},"system_user_id":{"description":"system_user_id","type":"integer"}},"required":["id","name"],"type":"object"}`),
		),
		Business_POST_system_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_third_party_measurement_report_dataset",
			"GET third_party_measurement_report_dataset for Business. Returns ThirdPartyMeasurementReportDataset",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Business_GET_third_party_measurement_report_datasetHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_videos",
			"POST videos for Business. Returns AdVideo. Parameters: ad_placements_validation_only (bool), application_id (string), asked_fun_fact_prompt_id (unsigned int), audio_story_wave_animation_handle (string), chunk_session_id (string), composer_entry_picker (string), composer_entry_point (string), composer_entry_time (unsigned int), composer_session_events_log (string), composer_session_id (string), composer_source_surface (string), composer_type (string), container_type (businessvideos_container_type_enum_param), content_category (businessvideos_content_category_enum_param), creative_folder_id (string) [required], creative_tools (string), description (string), embeddable (bool), end_offset (unsigned int), fbuploader_video_file_chunk (string), file_size (unsigned int), file_url (string), fisheye_video_cropped (bool), formatting (businessvideos_formatting_enum_param), fov (unsigned int), front_z_rotation (float), fun_fact_prompt_id (string), fun_fact_toastee_id (unsigned int), guide (list<list<unsigned int>>), guide_enabled (bool), initial_heading (unsigned int), initial_pitch (unsigned int), instant_game_entry_point_data (string), is_boost_intended (bool), is_group_linking_post (bool), is_partnership_ad (bool), is_voice_clip (bool), location_source_id (string), og_action_type_id (string), og_icon_id (string), og_object_id (string), og_phrase (string), og_suggestion_mechanism (string), original_fov (unsigned int), original_projection_type (businessvideos_original_projection_type_enum_param), partnership_ad_ad_code (string), publish_event_id (unsigned int), referenced_sticker_id (string), replace_video_id (string), slideshow_spec (map), source (string), source_instagram_media_id (string), spherical (bool), start_offset (unsigned int), swap_mode (businessvideos_swap_mode_enum_param), text_format_metadata (string), thumb (file), time_since_original_post (unsigned int), title (string), transcode_setting_properties (string), unpublished_content_type (businessvideos_unpublished_content_type_enum_param), upload_phase (businessvideos_upload_phase_enum_param), upload_session_id (string), upload_setting_properties (string), validation_ad_placements (list<businessvideos_validation_ad_placements_enum_param>), video_file_chunk (string), video_id_original (string), video_start_time_ms (unsigned int), waterfall_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"ad_placements_validation_only":{"description":"ad_placements_validation_only","type":"boolean"},"application_id":{"description":"application_id","type":"string"},"asked_fun_fact_prompt_id":{"description":"asked_fun_fact_prompt_id","type":"integer"},"audio_story_wave_animation_handle":{"description":"audio_story_wave_animation_handle","type":"string"},"chunk_session_id":{"description":"chunk_session_id","type":"string"},"composer_entry_picker":{"description":"composer_entry_picker","type":"string"},"composer_entry_point":{"description":"composer_entry_point","type":"string"},"composer_entry_time":{"description":"composer_entry_time","type":"integer"},"composer_session_events_log":{"description":"composer_session_events_log","type":"string"},"composer_session_id":{"description":"composer_session_id","type":"string"},"composer_source_surface":{"description":"composer_source_surface","type":"string"},"composer_type":{"description":"composer_type","type":"string"},"container_type":{"description":"container_type (enum: businessvideos_container_type_enum_param)","type":"string"},"content_category":{"description":"content_category (enum: businessvideos_content_category_enum_param)","type":"string"},"creative_folder_id":{"description":"creative_folder_id","type":"string"},"creative_tools":{"description":"creative_tools","type":"string"},"description":{"description":"description","type":"string"},"embeddable":{"description":"embeddable","type":"boolean"},"end_offset":{"description":"end_offset","type":"integer"},"fbuploader_video_file_chunk":{"description":"fbuploader_video_file_chunk","type":"string"},"file_size":{"description":"file_size","type":"integer"},"file_url":{"description":"file_url","type":"string"},"fisheye_video_cropped":{"description":"fisheye_video_cropped","type":"boolean"},"formatting":{"description":"formatting (enum: businessvideos_formatting_enum_param)","type":"string"},"fov":{"description":"fov","type":"integer"},"front_z_rotation":{"description":"front_z_rotation","type":"number"},"fun_fact_prompt_id":{"description":"fun_fact_prompt_id","type":"string"},"fun_fact_toastee_id":{"description":"fun_fact_toastee_id","type":"integer"},"guide":{"description":"guide","items":{"type":"string"},"type":"array"},"guide_enabled":{"description":"guide_enabled","type":"boolean"},"id":{"description":"Business ID","type":"string"},"initial_heading":{"description":"initial_heading","type":"integer"},"initial_pitch":{"description":"initial_pitch","type":"integer"},"instant_game_entry_point_data":{"description":"instant_game_entry_point_data","type":"string"},"is_boost_intended":{"description":"is_boost_intended","type":"boolean"},"is_group_linking_post":{"description":"is_group_linking_post","type":"boolean"},"is_partnership_ad":{"description":"is_partnership_ad","type":"boolean"},"is_voice_clip":{"description":"is_voice_clip","type":"boolean"},"location_source_id":{"description":"location_source_id","type":"string"},"og_action_type_id":{"description":"og_action_type_id","type":"string"},"og_icon_id":{"description":"og_icon_id","type":"string"},"og_object_id":{"description":"og_object_id","type":"string"},"og_phrase":{"description":"og_phrase","type":"string"},"og_suggestion_mechanism":{"description":"og_suggestion_mechanism","type":"string"},"original_fov":{"description":"original_fov","type":"integer"},"original_projection_type":{"description":"original_projection_type (enum: businessvideos_original_projection_type_enum_param)","type":"string"},"partnership_ad_ad_code":{"description":"partnership_ad_ad_code","type":"string"},"publish_event_id":{"description":"publish_event_id","type":"integer"},"referenced_sticker_id":{"description":"referenced_sticker_id","type":"string"},"replace_video_id":{"description":"replace_video_id","type":"string"},"slideshow_spec":{"description":"slideshow_spec","type":"string"},"source":{"description":"source","type":"string"},"source_instagram_media_id":{"description":"source_instagram_media_id","type":"string"},"spherical":{"description":"spherical","type":"boolean"},"start_offset":{"description":"start_offset","type":"integer"},"swap_mode":{"description":"swap_mode (enum: businessvideos_swap_mode_enum_param)","type":"string"},"text_format_metadata":{"description":"text_format_metadata","type":"string"},"thumb":{"description":"thumb","type":"string"},"time_since_original_post":{"description":"time_since_original_post","type":"integer"},"title":{"description":"title","type":"string"},"transcode_setting_properties":{"description":"transcode_setting_properties","type":"string"},"unpublished_content_type":{"description":"unpublished_content_type (enum: businessvideos_unpublished_content_type_enum_param)","type":"string"},"upload_phase":{"description":"upload_phase (enum: businessvideos_upload_phase_enum_param)","type":"string"},"upload_session_id":{"description":"upload_session_id","type":"string"},"upload_setting_properties":{"description":"upload_setting_properties","type":"string"},"validation_ad_placements":{"description":"validation_ad_placements","items":{"type":"string"},"type":"array"},"video_file_chunk":{"description":"video_file_chunk","type":"string"},"video_id_original":{"description":"video_id_original","type":"string"},"video_start_time_ms":{"description":"video_start_time_ms","type":"integer"},"waterfall_id":{"description":"waterfall_id","type":"string"}},"required":["id","creative_folder_id"],"type":"object"}`),
		),
		Business_POST_videosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_GET_",
			"GET  for Business. Returns Business",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Business ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Business_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Business_POST_",
			"POST  for Business. Returns Business. Parameters: entry_point (string), name (string), primary_page (string), timezone_id (unsigned int), two_factor_type (business_two_factor_type), vertical (business_vertical)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"entry_point":{"description":"entry_point","type":"string"},"id":{"description":"Business ID","type":"string"},"name":{"description":"name","type":"string"},"primary_page":{"description":"primary_page","type":"string"},"timezone_id":{"description":"timezone_id","type":"integer"},"two_factor_type":{"description":"two_factor_type (enum: business_two_factor_type)","type":"string"},"vertical":{"description":"vertical (enum: business_vertical)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Business_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAgreement_GET_",
			"GET  for BusinessAgreement. Returns BusinessAgreement",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessAgreement ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessAgreement_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAgreement_POST_",
			"POST  for BusinessAgreement. Returns BusinessAgreement. Parameters: asset_id (unsigned int), request_status (businessagreement_request_status)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"asset_id":{"description":"asset_id","type":"integer"},"id":{"description":"BusinessAgreement ID","type":"string"},"request_status":{"description":"request_status (enum: businessagreement_request_status)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		BusinessAgreement_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_DELETE_assigned_users",
			"DELETE assigned_users for BusinessAssetGroup. Returns Object. Parameters: user (int) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessAssetGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"user":{"description":"user","type":"integer"}},"required":["id","user"],"type":"object"}`),
		),
		BusinessAssetGroup_DELETE_assigned_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_GET_assigned_users",
			"GET assigned_users for BusinessAssetGroup. Returns AssignedUser. Parameters: business (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business":{"description":"business","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessAssetGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","business"],"type":"object"}`),
		),
		BusinessAssetGroup_GET_assigned_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_POST_assigned_users",
			"POST assigned_users for BusinessAssetGroup. Returns BusinessAssetGroup. Parameters: adaccount_tasks (list<businessassetgroupassigned_users_adaccount_tasks_enum_param>), offline_conversion_data_set_tasks (list<businessassetgroupassigned_users_offline_conversion_data_set_tasks_enum_param>), page_tasks (list<businessassetgroupassigned_users_page_tasks_enum_param>), pixel_tasks (list<businessassetgroupassigned_users_pixel_tasks_enum_param>), user (int) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"adaccount_tasks":{"description":"adaccount_tasks","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessAssetGroup ID","type":"string"},"offline_conversion_data_set_tasks":{"description":"offline_conversion_data_set_tasks","items":{"type":"string"},"type":"array"},"page_tasks":{"description":"page_tasks","items":{"type":"string"},"type":"array"},"pixel_tasks":{"description":"pixel_tasks","items":{"type":"string"},"type":"array"},"user":{"description":"user","type":"integer"}},"required":["id","user"],"type":"object"}`),
		),
		BusinessAssetGroup_POST_assigned_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_DELETE_contained_adaccounts",
			"DELETE contained_adaccounts for BusinessAssetGroup. Returns Object. Parameters: asset_id (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"asset_id":{"description":"asset_id","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessAssetGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","asset_id"],"type":"object"}`),
		),
		BusinessAssetGroup_DELETE_contained_adaccountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_GET_contained_adaccounts",
			"GET contained_adaccounts for BusinessAssetGroup. Returns AdAccount",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessAssetGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessAssetGroup_GET_contained_adaccountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_POST_contained_adaccounts",
			"POST contained_adaccounts for BusinessAssetGroup. Returns BusinessAssetGroup. Parameters: asset_id (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"asset_id":{"description":"asset_id","type":"string"},"id":{"description":"BusinessAssetGroup ID","type":"string"}},"required":["id","asset_id"],"type":"object"}`),
		),
		BusinessAssetGroup_POST_contained_adaccountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_DELETE_contained_applications",
			"DELETE contained_applications for BusinessAssetGroup. Returns Object. Parameters: asset_id (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"asset_id":{"description":"asset_id","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessAssetGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","asset_id"],"type":"object"}`),
		),
		BusinessAssetGroup_DELETE_contained_applicationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_GET_contained_applications",
			"GET contained_applications for BusinessAssetGroup. Returns Application",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessAssetGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessAssetGroup_GET_contained_applicationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_POST_contained_applications",
			"POST contained_applications for BusinessAssetGroup. Returns BusinessAssetGroup. Parameters: asset_id (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"asset_id":{"description":"asset_id","type":"string"},"id":{"description":"BusinessAssetGroup ID","type":"string"}},"required":["id","asset_id"],"type":"object"}`),
		),
		BusinessAssetGroup_POST_contained_applicationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_DELETE_contained_custom_conversions",
			"DELETE contained_custom_conversions for BusinessAssetGroup. Returns Object. Parameters: asset_id (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"asset_id":{"description":"asset_id","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessAssetGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","asset_id"],"type":"object"}`),
		),
		BusinessAssetGroup_DELETE_contained_custom_conversionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_GET_contained_custom_conversions",
			"GET contained_custom_conversions for BusinessAssetGroup. Returns CustomConversion",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessAssetGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessAssetGroup_GET_contained_custom_conversionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_POST_contained_custom_conversions",
			"POST contained_custom_conversions for BusinessAssetGroup. Returns BusinessAssetGroup. Parameters: asset_id (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"asset_id":{"description":"asset_id","type":"string"},"id":{"description":"BusinessAssetGroup ID","type":"string"}},"required":["id","asset_id"],"type":"object"}`),
		),
		BusinessAssetGroup_POST_contained_custom_conversionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_DELETE_contained_instagram_accounts",
			"DELETE contained_instagram_accounts for BusinessAssetGroup. Returns Object. Parameters: asset_id (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"asset_id":{"description":"asset_id","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessAssetGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","asset_id"],"type":"object"}`),
		),
		BusinessAssetGroup_DELETE_contained_instagram_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_GET_contained_instagram_accounts",
			"GET contained_instagram_accounts for BusinessAssetGroup. Returns InstagramUser",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessAssetGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessAssetGroup_GET_contained_instagram_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_POST_contained_instagram_accounts",
			"POST contained_instagram_accounts for BusinessAssetGroup. Returns BusinessAssetGroup. Parameters: asset_id (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"asset_id":{"description":"asset_id","type":"string"},"id":{"description":"BusinessAssetGroup ID","type":"string"}},"required":["id","asset_id"],"type":"object"}`),
		),
		BusinessAssetGroup_POST_contained_instagram_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_DELETE_contained_pages",
			"DELETE contained_pages for BusinessAssetGroup. Returns Object. Parameters: asset_id (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"asset_id":{"description":"asset_id","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessAssetGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","asset_id"],"type":"object"}`),
		),
		BusinessAssetGroup_DELETE_contained_pagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_GET_contained_pages",
			"GET contained_pages for BusinessAssetGroup. Returns Page",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessAssetGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessAssetGroup_GET_contained_pagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_POST_contained_pages",
			"POST contained_pages for BusinessAssetGroup. Returns BusinessAssetGroup. Parameters: asset_id (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"asset_id":{"description":"asset_id","type":"string"},"id":{"description":"BusinessAssetGroup ID","type":"string"}},"required":["id","asset_id"],"type":"object"}`),
		),
		BusinessAssetGroup_POST_contained_pagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_DELETE_contained_pixels",
			"DELETE contained_pixels for BusinessAssetGroup. Returns Object. Parameters: asset_id (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"asset_id":{"description":"asset_id","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessAssetGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","asset_id"],"type":"object"}`),
		),
		BusinessAssetGroup_DELETE_contained_pixelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_GET_contained_pixels",
			"GET contained_pixels for BusinessAssetGroup. Returns AdsPixel",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessAssetGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessAssetGroup_GET_contained_pixelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_POST_contained_pixels",
			"POST contained_pixels for BusinessAssetGroup. Returns BusinessAssetGroup. Parameters: asset_id (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"asset_id":{"description":"asset_id","type":"string"},"id":{"description":"BusinessAssetGroup ID","type":"string"}},"required":["id","asset_id"],"type":"object"}`),
		),
		BusinessAssetGroup_POST_contained_pixelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_DELETE_contained_product_catalogs",
			"DELETE contained_product_catalogs for BusinessAssetGroup. Returns Object. Parameters: asset_id (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"asset_id":{"description":"asset_id","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessAssetGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","asset_id"],"type":"object"}`),
		),
		BusinessAssetGroup_DELETE_contained_product_catalogsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_GET_contained_product_catalogs",
			"GET contained_product_catalogs for BusinessAssetGroup. Returns ProductCatalog",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessAssetGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessAssetGroup_GET_contained_product_catalogsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_POST_contained_product_catalogs",
			"POST contained_product_catalogs for BusinessAssetGroup. Returns BusinessAssetGroup. Parameters: asset_id (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"asset_id":{"description":"asset_id","type":"string"},"id":{"description":"BusinessAssetGroup ID","type":"string"}},"required":["id","asset_id"],"type":"object"}`),
		),
		BusinessAssetGroup_POST_contained_product_catalogsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_GET_",
			"GET  for BusinessAssetGroup. Returns BusinessAssetGroup",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessAssetGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessAssetGroup_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetGroup_POST_",
			"POST  for BusinessAssetGroup. Returns BusinessAssetGroup. Parameters: name (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"BusinessAssetGroup ID","type":"string"},"name":{"description":"name","type":"string"}},"required":["id"],"type":"object"}`),
		),
		BusinessAssetGroup_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetSharingAgreement_GET_",
			"GET  for BusinessAssetSharingAgreement. Returns BusinessAssetSharingAgreement",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessAssetSharingAgreement ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessAssetSharingAgreement_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessAssetSharingAgreement_POST_",
			"POST  for BusinessAssetSharingAgreement. Returns BusinessAssetSharingAgreement. Parameters: request_response (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"BusinessAssetSharingAgreement ID","type":"string"},"request_response":{"description":"request_response","type":"string"}},"required":["id"],"type":"object"}`),
		),
		BusinessAssetSharingAgreement_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessCreativeFolder_GET_",
			"GET  for BusinessCreativeFolder. Returns BusinessCreativeFolder",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessCreativeFolder ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessCreativeFolder_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessFranchiseConfig_GET_",
			"GET  for BusinessFranchiseConfig. Returns BusinessFranchiseConfig",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessFranchiseConfig ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessFranchiseConfig_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessImage_GET_",
			"GET  for BusinessImage. Returns BusinessImage",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessImage ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessImage_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessObjectTransferOwnershipAgreement_GET_",
			"GET  for BusinessObjectTransferOwnershipAgreement. Returns BusinessObjectTransferOwnershipAgreement",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessObjectTransferOwnershipAgreement ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessObjectTransferOwnershipAgreement_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessOwnedObjectOnBehalfOfRequest_GET_",
			"GET  for BusinessOwnedObjectOnBehalfOfRequest. Returns BusinessOwnedObjectOnBehalfOfRequest",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessOwnedObjectOnBehalfOfRequest ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessOwnedObjectOnBehalfOfRequest_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessProject_GET_",
			"GET  for BusinessProject. Returns BusinessProject",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessProject ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessProject_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessRequest_GET_",
			"GET  for BusinessRequest. Returns BusinessRequest",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessRequest ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessRequest_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessRoleRequest_DELETE_",
			"DELETE  for BusinessRoleRequest. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessRoleRequest ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessRoleRequest_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessRoleRequest_GET_",
			"GET  for BusinessRoleRequest. Returns BusinessRoleRequest",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessRoleRequest ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessRoleRequest_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessRoleRequest_POST_",
			"POST  for BusinessRoleRequest. Returns BusinessRoleRequest. Parameters: role (businessrolerequest_role), tasks (list<businessrolerequest_tasks>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"BusinessRoleRequest ID","type":"string"},"role":{"description":"role (enum: businessrolerequest_role)","type":"string"},"tasks":{"description":"tasks","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		BusinessRoleRequest_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessTag_GET_",
			"GET  for BusinessTag. Returns BusinessTag",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessTag ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessTag_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessUser_GET_assigned_ad_accounts",
			"GET assigned_ad_accounts for BusinessUser. Returns AdAccount",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessUser_GET_assigned_ad_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessUser_GET_assigned_business_asset_groups",
			"GET assigned_business_asset_groups for BusinessUser. Returns BusinessAssetGroup. Parameters: contained_asset_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"contained_asset_id":{"description":"contained_asset_id","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessUser_GET_assigned_business_asset_groupsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessUser_GET_assigned_pages",
			"GET assigned_pages for BusinessUser. Returns Page. Parameters: pages (list<unsigned int>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"pages":{"description":"pages","items":{"type":"integer"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		BusinessUser_GET_assigned_pagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessUser_GET_assigned_product_catalogs",
			"GET assigned_product_catalogs for BusinessUser. Returns ProductCatalog",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessUser_GET_assigned_product_catalogsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessUser_DELETE_",
			"DELETE  for BusinessUser. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessUser_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessUser_GET_",
			"GET  for BusinessUser. Returns BusinessUser",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessUser_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessUser_POST_",
			"POST  for BusinessUser. Returns BusinessUser. Parameters: clear_pending_email (bool), email (string), first_name (string), last_name (string), pending_email (string), role (businessuser_role), skip_verification_email (bool), tasks (list<businessuser_tasks>), title (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"clear_pending_email":{"description":"clear_pending_email","type":"boolean"},"email":{"description":"email","type":"string"},"first_name":{"description":"first_name","type":"string"},"id":{"description":"BusinessUser ID","type":"string"},"last_name":{"description":"last_name","type":"string"},"pending_email":{"description":"pending_email","type":"string"},"role":{"description":"role (enum: businessuser_role)","type":"string"},"skip_verification_email":{"description":"skip_verification_email","type":"boolean"},"tasks":{"description":"tasks","items":{"type":"string"},"type":"array"},"title":{"description":"title","type":"string"}},"required":["id"],"type":"object"}`),
		),
		BusinessUser_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"BusinessVideo_GET_",
			"GET  for BusinessVideo. Returns BusinessVideo",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"BusinessVideo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		BusinessVideo_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CPASAdCreationTemplate_GET_",
			"GET  for CPASAdCreationTemplate. Returns CPASAdCreationTemplate",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CPASAdCreationTemplate ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CPASAdCreationTemplate_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CPASAdvertiserPartnershipRecommendation_GET_",
			"GET  for CPASAdvertiserPartnershipRecommendation. Returns CPASAdvertiserPartnershipRecommendation",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CPASAdvertiserPartnershipRecommendation ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CPASAdvertiserPartnershipRecommendation_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CPASBusinessSetupConfig_GET_ad_accounts",
			"GET ad_accounts for CPASBusinessSetupConfig. Returns AdAccount",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CPASBusinessSetupConfig ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CPASBusinessSetupConfig_GET_ad_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CPASBusinessSetupConfig_GET_",
			"GET  for CPASBusinessSetupConfig. Returns CPASBusinessSetupConfig",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CPASBusinessSetupConfig ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CPASBusinessSetupConfig_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CPASCollaborationRequest_GET_",
			"GET  for CPASCollaborationRequest. Returns CPASCollaborationRequest",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CPASCollaborationRequest ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CPASCollaborationRequest_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CPASLsbImageBank_GET_backup_images",
			"GET backup_images for CPASLsbImageBank. Returns ProductImage",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CPASLsbImageBank ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CPASLsbImageBank_GET_backup_imagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CPASLsbImageBank_GET_",
			"GET  for CPASLsbImageBank. Returns CPASLsbImageBank",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CPASLsbImageBank ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CPASLsbImageBank_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CPASLsbImageBank_POST_",
			"POST  for CPASLsbImageBank. Returns CPASLsbImageBank. Parameters: backup_image_urls (list<string>) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"backup_image_urls":{"description":"backup_image_urls","items":{"type":"string"},"type":"array"},"id":{"description":"CPASLsbImageBank ID","type":"string"}},"required":["id","backup_image_urls"],"type":"object"}`),
		),
		CPASLsbImageBank_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CPASMerchantConfig_GET_",
			"GET  for CPASMerchantConfig. Returns CPASMerchantConfig",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CPASMerchantConfig ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CPASMerchantConfig_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CPASParentCatalogSettings_GET_",
			"GET  for CPASParentCatalogSettings. Returns CPASParentCatalogSettings",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CPASParentCatalogSettings ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CPASParentCatalogSettings_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CRMAddress_GET_",
			"GET  for CRMAddress. Returns CRMAddress",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CRMAddress ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CRMAddress_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CTXPartnerAppWelcomeMessageFlow_GET_",
			"GET  for CTXPartnerAppWelcomeMessageFlow. Returns CTXPartnerAppWelcomeMessageFlow",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CTXPartnerAppWelcomeMessageFlow ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CTXPartnerAppWelcomeMessageFlow_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CalibratorExistingRule_GET_",
			"GET  for CalibratorExistingRule. Returns CalibratorExistingRule",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CalibratorExistingRule ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CalibratorExistingRule_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CallAdsPhoneData_GET_",
			"GET  for CallAdsPhoneData. Returns CallAdsPhoneData",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CallAdsPhoneData ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CallAdsPhoneData_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Campaign_GET_ad_studies",
			"GET ad_studies for Campaign. Returns AdStudy",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Campaign ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Campaign_GET_ad_studiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Campaign_POST_adlabels",
			"POST adlabels for Campaign. Returns Campaign. Parameters: adlabels (list<Object>) [required], execution_options (list<adcampaigngroupadlabels_execution_options_enum_param>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"adlabels":{"description":"adlabels","items":{"additionalProperties":true,"type":"object"},"type":"array"},"execution_options":{"description":"execution_options","items":{"type":"string"},"type":"array"},"id":{"description":"Campaign ID","type":"string"}},"required":["id","adlabels"],"type":"object"}`),
		),
		Campaign_POST_adlabelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Campaign_GET_adrules_governed",
			"GET adrules_governed for Campaign. Returns AdRule. Parameters: pass_evaluation (bool)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Campaign ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"pass_evaluation":{"description":"pass_evaluation","type":"boolean"}},"required":["id"],"type":"object"}`),
		),
		Campaign_GET_adrules_governedHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Campaign_GET_ads",
			"GET ads for Campaign. Returns Ad. Parameters: date_preset (adcampaigngroupads_date_preset_enum_param), effective_status (list<string>), time_range (map), updated_since (int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"date_preset":{"description":"date_preset (enum: adcampaigngroupads_date_preset_enum_param)","type":"string"},"effective_status":{"description":"effective_status","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Campaign ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"time_range":{"description":"time_range","type":"string"},"updated_since":{"description":"updated_since","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Campaign_GET_adsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Campaign_GET_adsets",
			"GET adsets for Campaign. Returns AdSet. Parameters: date_preset (adcampaigngroupadsets_date_preset_enum_param), effective_status (list<adcampaigngroupadsets_effective_status_enum_param>), is_completed (bool), time_range (map)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"date_preset":{"description":"date_preset (enum: adcampaigngroupadsets_date_preset_enum_param)","type":"string"},"effective_status":{"description":"effective_status","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Campaign ID","type":"string"},"is_completed":{"description":"is_completed","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"time_range":{"description":"time_range","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Campaign_GET_adsetsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Campaign_POST_budget_schedules",
			"POST budget_schedules for Campaign. Returns HighDemandPeriod. Parameters: budget_value (unsigned int) [required], budget_value_type (adcampaigngroupbudget_schedules_budget_value_type_enum_param) [required], time_end (unsigned int) [required], time_start (unsigned int) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"budget_value":{"description":"budget_value","type":"integer"},"budget_value_type":{"description":"budget_value_type (enum: adcampaigngroupbudget_schedules_budget_value_type_enum_param)","type":"string"},"id":{"description":"Campaign ID","type":"string"},"time_end":{"description":"time_end","type":"integer"},"time_start":{"description":"time_start","type":"integer"}},"required":["id","budget_value","budget_value_type","time_end","time_start"],"type":"object"}`),
		),
		Campaign_POST_budget_schedulesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Campaign_GET_copies",
			"GET copies for Campaign. Returns Campaign. Parameters: date_preset (adcampaigngroupcopies_date_preset_enum_param), effective_status (list<adcampaigngroupcopies_effective_status_enum_param>), is_completed (bool), time_range (map)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"date_preset":{"description":"date_preset (enum: adcampaigngroupcopies_date_preset_enum_param)","type":"string"},"effective_status":{"description":"effective_status","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Campaign ID","type":"string"},"is_completed":{"description":"is_completed","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"time_range":{"description":"time_range","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Campaign_GET_copiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Campaign_POST_copies",
			"POST copies for Campaign. Returns Campaign. Parameters: deep_copy (bool), end_time (datetime), rename_options (Object), start_time (datetime), status_option (adcampaigngroupcopies_status_option_enum_param)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"deep_copy":{"description":"deep_copy","type":"boolean"},"end_time":{"description":"end_time","type":"string"},"id":{"description":"Campaign ID","type":"string"},"rename_options":{"additionalProperties":true,"description":"rename_options","type":"object"},"start_time":{"description":"start_time","type":"string"},"status_option":{"description":"status_option (enum: adcampaigngroupcopies_status_option_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Campaign_POST_copiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Campaign_GET_insights",
			"GET insights for Campaign. Returns AdsInsights. Parameters: action_attribution_windows (list<adcampaigngroupinsights_action_attribution_windows_enum_param>), action_breakdowns (list<adcampaigngroupinsights_action_breakdowns_enum_param>), action_report_time (adcampaigngroupinsights_action_report_time_enum_param), breakdowns (list<adcampaigngroupinsights_breakdowns_enum_param>), date_preset (adcampaigngroupinsights_date_preset_enum_param), default_summary (bool), export_columns (list<string>), export_format (string), export_name (string), fields (list<string>), filtering (list<Object>), level (adcampaigngroupinsights_level_enum_param), limit (int), product_id_limit (int), sort (list<string>), summary (list<string>), summary_action_breakdowns (list<adcampaigngroupinsights_summary_action_breakdowns_enum_param>), time_increment (string), time_range (map), time_ranges (list<map>), use_account_attribution_setting (bool), use_unified_attribution_setting (bool)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"action_attribution_windows":{"description":"action_attribution_windows","items":{"type":"string"},"type":"array"},"action_breakdowns":{"description":"action_breakdowns","items":{"type":"string"},"type":"array"},"action_report_time":{"description":"action_report_time (enum: adcampaigngroupinsights_action_report_time_enum_param)","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"breakdowns":{"description":"breakdowns","items":{"type":"string"},"type":"array"},"date_preset":{"description":"date_preset (enum: adcampaigngroupinsights_date_preset_enum_param)","type":"string"},"default_summary":{"description":"default_summary","type":"boolean"},"export_columns":{"description":"export_columns","items":{"type":"string"},"type":"array"},"export_format":{"description":"export_format","type":"string"},"export_name":{"description":"export_name","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filtering":{"description":"filtering","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"Campaign ID","type":"string"},"level":{"description":"level (enum: adcampaigngroupinsights_level_enum_param)","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"product_id_limit":{"description":"product_id_limit","type":"integer"},"sort":{"description":"sort","items":{"type":"string"},"type":"array"},"summary":{"description":"summary","items":{"type":"string"},"type":"array"},"summary_action_breakdowns":{"description":"summary_action_breakdowns","items":{"type":"string"},"type":"array"},"time_increment":{"description":"time_increment","type":"string"},"time_range":{"description":"time_range","type":"string"},"time_ranges":{"description":"time_ranges","items":{"additionalProperties":true,"type":"object"},"type":"array"},"use_account_attribution_setting":{"description":"use_account_attribution_setting","type":"boolean"},"use_unified_attribution_setting":{"description":"use_unified_attribution_setting","type":"boolean"}},"required":["id"],"type":"object"}`),
		),
		Campaign_GET_insightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Campaign_POST_insights",
			"POST insights for Campaign. Returns AdReportRun. Parameters: action_attribution_windows (list<adcampaigngroupinsights_action_attribution_windows_enum_param>), action_breakdowns (list<adcampaigngroupinsights_action_breakdowns_enum_param>), action_report_time (adcampaigngroupinsights_action_report_time_enum_param), breakdowns (list<adcampaigngroupinsights_breakdowns_enum_param>), date_preset (adcampaigngroupinsights_date_preset_enum_param), default_summary (bool), export_columns (list<string>), export_format (string), export_name (string), fields (list<string>), filtering (list<Object>), level (adcampaigngroupinsights_level_enum_param), limit (int), product_id_limit (int), sort (list<string>), summary (list<string>), summary_action_breakdowns (list<adcampaigngroupinsights_summary_action_breakdowns_enum_param>), time_increment (string), time_range (map), time_ranges (list<map>), use_account_attribution_setting (bool), use_unified_attribution_setting (bool)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"action_attribution_windows":{"description":"action_attribution_windows","items":{"type":"string"},"type":"array"},"action_breakdowns":{"description":"action_breakdowns","items":{"type":"string"},"type":"array"},"action_report_time":{"description":"action_report_time (enum: adcampaigngroupinsights_action_report_time_enum_param)","type":"string"},"breakdowns":{"description":"breakdowns","items":{"type":"string"},"type":"array"},"date_preset":{"description":"date_preset (enum: adcampaigngroupinsights_date_preset_enum_param)","type":"string"},"default_summary":{"description":"default_summary","type":"boolean"},"export_columns":{"description":"export_columns","items":{"type":"string"},"type":"array"},"export_format":{"description":"export_format","type":"string"},"export_name":{"description":"export_name","type":"string"},"fields":{"description":"fields","items":{"type":"string"},"type":"array"},"filtering":{"description":"filtering","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"Campaign ID","type":"string"},"level":{"description":"level (enum: adcampaigngroupinsights_level_enum_param)","type":"string"},"limit":{"description":"limit","type":"integer"},"product_id_limit":{"description":"product_id_limit","type":"integer"},"sort":{"description":"sort","items":{"type":"string"},"type":"array"},"summary":{"description":"summary","items":{"type":"string"},"type":"array"},"summary_action_breakdowns":{"description":"summary_action_breakdowns","items":{"type":"string"},"type":"array"},"time_increment":{"description":"time_increment","type":"string"},"time_range":{"description":"time_range","type":"string"},"time_ranges":{"description":"time_ranges","items":{"additionalProperties":true,"type":"object"},"type":"array"},"use_account_attribution_setting":{"description":"use_account_attribution_setting","type":"boolean"},"use_unified_attribution_setting":{"description":"use_unified_attribution_setting","type":"boolean"}},"required":["id"],"type":"object"}`),
		),
		Campaign_POST_insightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Campaign_DELETE_",
			"DELETE  for Campaign. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Campaign ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Campaign_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Campaign_GET_",
			"GET  for Campaign. Returns Campaign. Parameters: am_call_tags (map), date_preset (adcampaigngroup_date_preset), from_adtable (bool), time_range (map)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"am_call_tags":{"description":"am_call_tags","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"date_preset":{"description":"date_preset (enum: adcampaigngroup_date_preset)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"from_adtable":{"description":"from_adtable","type":"boolean"},"id":{"description":"Campaign ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"time_range":{"description":"time_range","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Campaign_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Campaign_POST_",
			"POST  for Campaign. Returns Campaign. Parameters: adlabels (list<Object>), adset_bid_amounts (map), adset_budgets (list<map>), bid_strategy (adcampaigngroup_bid_strategy), budget_rebalance_flag (bool), daily_budget (unsigned int), execution_options (list<adcampaigngroup_execution_options>), is_skadnetwork_attribution (bool), iterative_split_test_configs (list<Object>), lifetime_budget (unsigned int), name (string), objective (adcampaigngroup_objective), pacing_type (list<string>), promoted_object (Object), smart_promotion_type (adcampaigngroup_smart_promotion_type), special_ad_categories (list<adcampaigngroup_special_ad_categories>), special_ad_category (adcampaigngroup_special_ad_category), special_ad_category_country (list<adcampaigngroup_special_ad_category_country>), spend_cap (unsigned int), start_time (datetime), status (adcampaigngroup_status), stop_time (datetime)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"adlabels":{"description":"adlabels","items":{"additionalProperties":true,"type":"object"},"type":"array"},"adset_bid_amounts":{"description":"adset_bid_amounts","type":"string"},"adset_budgets":{"description":"adset_budgets","items":{"additionalProperties":true,"type":"object"},"type":"array"},"bid_strategy":{"description":"bid_strategy (enum: adcampaigngroup_bid_strategy)","type":"string"},"budget_rebalance_flag":{"description":"budget_rebalance_flag","type":"boolean"},"daily_budget":{"description":"daily_budget","type":"integer"},"execution_options":{"description":"execution_options","items":{"type":"string"},"type":"array"},"id":{"description":"Campaign ID","type":"string"},"is_skadnetwork_attribution":{"description":"is_skadnetwork_attribution","type":"boolean"},"iterative_split_test_configs":{"description":"iterative_split_test_configs","items":{"additionalProperties":true,"type":"object"},"type":"array"},"lifetime_budget":{"description":"lifetime_budget","type":"integer"},"name":{"description":"name","type":"string"},"objective":{"description":"objective (enum: adcampaigngroup_objective)","type":"string"},"pacing_type":{"description":"pacing_type","items":{"type":"string"},"type":"array"},"promoted_object":{"additionalProperties":true,"description":"promoted_object","type":"object"},"smart_promotion_type":{"description":"smart_promotion_type (enum: adcampaigngroup_smart_promotion_type)","type":"string"},"special_ad_categories":{"description":"special_ad_categories","items":{"type":"string"},"type":"array"},"special_ad_category":{"description":"special_ad_category (enum: adcampaigngroup_special_ad_category)","type":"string"},"special_ad_category_country":{"description":"special_ad_category_country","items":{"type":"string"},"type":"array"},"spend_cap":{"description":"spend_cap","type":"integer"},"start_time":{"description":"start_time","type":"string"},"status":{"description":"status (enum: adcampaigngroup_status)","type":"string"},"stop_time":{"description":"stop_time","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Campaign_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Canvas_GET_preview",
			"GET preview for Canvas. Returns CanvasPreview",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Canvas ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Canvas_GET_previewHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Canvas_GET_previews",
			"GET previews for Canvas. Returns TextWithEntities. Parameters: user_ids (list<int>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Canvas ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"user_ids":{"description":"user_ids","items":{"type":"integer"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		Canvas_GET_previewsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Canvas_GET_",
			"GET  for Canvas. Returns Canvas",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Canvas ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Canvas_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Canvas_POST_",
			"POST  for Canvas. Returns Canvas. Parameters: background_color (string), body_element_ids (list<string>), enable_swipe_to_open (bool), is_hidden (bool), is_published (bool), name (string), source_template_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"background_color":{"description":"background_color","type":"string"},"body_element_ids":{"description":"body_element_ids","items":{"type":"string"},"type":"array"},"enable_swipe_to_open":{"description":"enable_swipe_to_open","type":"boolean"},"id":{"description":"Canvas ID","type":"string"},"is_hidden":{"description":"is_hidden","type":"boolean"},"is_published":{"description":"is_published","type":"boolean"},"name":{"description":"name","type":"string"},"source_template_id":{"description":"source_template_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Canvas_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CanvasDynamicSetting_GET_",
			"GET  for CanvasDynamicSetting. Returns CanvasDynamicSetting",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CanvasDynamicSetting ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CanvasDynamicSetting_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CanvasTemplate_GET_",
			"GET  for CanvasTemplate. Returns CanvasTemplate",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CanvasTemplate ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CanvasTemplate_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CatalogContentVersionConfig_GET_",
			"GET  for CatalogContentVersionConfig. Returns CatalogContentVersionConfig",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CatalogContentVersionConfig ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CatalogContentVersionConfig_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CatalogItemOverride_GET_",
			"GET  for CatalogItemOverride. Returns CatalogItemOverride",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CatalogItemOverride ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CatalogItemOverride_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CatalogSmartPixelSettings_GET_",
			"GET  for CatalogSmartPixelSettings. Returns CatalogSmartPixelSettings",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CatalogSmartPixelSettings ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CatalogSmartPixelSettings_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CatalogWebsiteOnboardingSettings_GET_",
			"GET  for CatalogWebsiteOnboardingSettings. Returns CatalogWebsiteOnboardingSettings",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CatalogWebsiteOnboardingSettings ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CatalogWebsiteOnboardingSettings_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CatalogWebsiteSettings_GET_",
			"GET  for CatalogWebsiteSettings. Returns CatalogWebsiteSettings",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CatalogWebsiteSettings ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CatalogWebsiteSettings_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ChinaBusinessOnboardingVettingRequest_GET_",
			"GET  for ChinaBusinessOnboardingVettingRequest. Returns ChinaBusinessOnboardingVettingRequest",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ChinaBusinessOnboardingVettingRequest ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ChinaBusinessOnboardingVettingRequest_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CloudGame_GET_",
			"GET  for CloudGame. Returns CloudGame",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CloudGame ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CloudGame_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CollaborativeAdsShareSettings_GET_",
			"GET  for CollaborativeAdsShareSettings. Returns CollaborativeAdsShareSettings",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CollaborativeAdsShareSettings ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CollaborativeAdsShareSettings_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Comment_GET_comments",
			"GET comments for Comment. Returns Comment. Parameters: filter (commentcomments_filter_enum_param), live_filter (commentcomments_live_filter_enum_param), order (commentcomments_order_enum_param), since (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"description":"filter (enum: commentcomments_filter_enum_param)","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"live_filter":{"description":"live_filter (enum: commentcomments_live_filter_enum_param)","type":"string"},"order":{"description":"order (enum: commentcomments_order_enum_param)","type":"string"},"since":{"description":"since","type":"string"}},"type":"object"}`),
		),
		Comment_GET_commentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Comment_POST_comments",
			"POST comments for Comment. Returns Comment. Parameters: attachment_id (string), attachment_share_url (string), attachment_url (string), comment_privacy_value (commentcomments_comment_privacy_value_enum_param), facepile_mentioned_ids (list<string>), feedback_source (string), is_offline (bool), message (string), nectar_module (string), object_id (string), parent_comment_id (Object), text (string), tracking (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"attachment_id":{"description":"attachment_id","type":"string"},"attachment_share_url":{"description":"attachment_share_url","type":"string"},"attachment_url":{"description":"attachment_url","type":"string"},"comment_privacy_value":{"description":"comment_privacy_value (enum: commentcomments_comment_privacy_value_enum_param)","type":"string"},"facepile_mentioned_ids":{"description":"facepile_mentioned_ids","items":{"type":"string"},"type":"array"},"feedback_source":{"description":"feedback_source","type":"string"},"is_offline":{"description":"is_offline","type":"boolean"},"message":{"description":"message","type":"string"},"nectar_module":{"description":"nectar_module","type":"string"},"object_id":{"description":"object_id","type":"string"},"parent_comment_id":{"additionalProperties":true,"description":"parent_comment_id","type":"object"},"text":{"description":"text","type":"string"},"tracking":{"description":"tracking","type":"string"}},"type":"object"}`),
		),
		Comment_POST_commentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Comment_DELETE_likes",
			"DELETE likes for Comment. Returns Object. Parameters: feedback_source (string), nectar_module (string), tracking (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"feedback_source":{"description":"feedback_source","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Comment ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"nectar_module":{"description":"nectar_module","type":"string"},"tracking":{"description":"tracking","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Comment_DELETE_likesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Comment_GET_likes",
			"GET likes for Comment. Returns Profile",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Comment ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Comment_GET_likesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Comment_POST_likes",
			"POST likes for Comment. Returns Comment. Parameters: feedback_source (string), nectar_module (string), tracking (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"feedback_source":{"description":"feedback_source","type":"string"},"id":{"description":"Comment ID","type":"string"},"nectar_module":{"description":"nectar_module","type":"string"},"tracking":{"description":"tracking","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Comment_POST_likesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Comment_GET_reactions",
			"GET reactions for Comment. Returns Profile. Parameters: type (commentreactions_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Comment ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: commentreactions_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Comment_GET_reactionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Comment_DELETE_",
			"DELETE  for Comment. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Comment ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Comment_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Comment_GET_",
			"GET  for Comment. Returns Comment",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Comment ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Comment_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Comment_POST_",
			"POST  for Comment. Returns Comment. Parameters: attachment_id (string), attachment_share_url (string), attachment_url (string), is_hidden (bool), message (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"attachment_id":{"description":"attachment_id","type":"string"},"attachment_share_url":{"description":"attachment_share_url","type":"string"},"attachment_url":{"description":"attachment_url","type":"string"},"id":{"description":"Comment ID","type":"string"},"is_hidden":{"description":"is_hidden","type":"boolean"},"message":{"description":"message","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Comment_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceMerchantSettings_POST_acknowledge_orders",
			"POST acknowledge_orders for CommerceMerchantSettings. Returns CommerceMerchantSettings. Parameters: idempotency_key (string) [required], orders (list<map>) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"CommerceMerchantSettings ID","type":"string"},"idempotency_key":{"description":"idempotency_key","type":"string"},"orders":{"description":"orders","items":{"additionalProperties":true,"type":"object"},"type":"array"}},"required":["id","idempotency_key","orders"],"type":"object"}`),
		),
		CommerceMerchantSettings_POST_acknowledge_ordersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceMerchantSettings_GET_commerce_orders",
			"GET commerce_orders for CommerceMerchantSettings. Returns CommerceOrder. Parameters: filters (list<commercemerchantsettingscommerce_orders_filters_enum_param>), state (list<commercemerchantsettingscommerce_orders_state_enum_param>), updated_after (datetime), updated_before (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filters":{"description":"filters","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"state":{"description":"state","items":{"type":"string"},"type":"array"},"updated_after":{"description":"updated_after","type":"string"},"updated_before":{"description":"updated_before","type":"string"}},"type":"object"}`),
		),
		CommerceMerchantSettings_GET_commerce_ordersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceMerchantSettings_GET_commerce_payouts",
			"GET commerce_payouts for CommerceMerchantSettings. Returns CommercePayout. Parameters: end_time (datetime), start_time (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"end_time":{"description":"end_time","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"start_time":{"description":"start_time","type":"string"}},"type":"object"}`),
		),
		CommerceMerchantSettings_GET_commerce_payoutsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceMerchantSettings_GET_commerce_transactions",
			"GET commerce_transactions for CommerceMerchantSettings. Returns CommerceOrderTransactionDetail. Parameters: end_time (datetime), payout_reference_id (string), start_time (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"end_time":{"description":"end_time","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"payout_reference_id":{"description":"payout_reference_id","type":"string"},"start_time":{"description":"start_time","type":"string"}},"type":"object"}`),
		),
		CommerceMerchantSettings_GET_commerce_transactionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceMerchantSettings_GET_order_management_apps",
			"GET order_management_apps for CommerceMerchantSettings. Returns Application",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		CommerceMerchantSettings_GET_order_management_appsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceMerchantSettings_POST_order_management_apps",
			"POST order_management_apps for CommerceMerchantSettings. Returns CommerceMerchantSettings",
			json.RawMessage(`{"additionalProperties":false,"properties":{},"type":"object"}`),
		),
		CommerceMerchantSettings_POST_order_management_appsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceMerchantSettings_GET_product_catalogs",
			"GET product_catalogs for CommerceMerchantSettings. Returns ProductCatalog",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CommerceMerchantSettings ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CommerceMerchantSettings_GET_product_catalogsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceMerchantSettings_GET_returns",
			"GET returns for CommerceMerchantSettings. Returns CommerceReturn. Parameters: end_time_created (datetime), merchant_return_id (string), start_time_created (datetime), statuses (list<commercemerchantsettingsreturns_statuses_enum_param>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"end_time_created":{"description":"end_time_created","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CommerceMerchantSettings ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"merchant_return_id":{"description":"merchant_return_id","type":"string"},"start_time_created":{"description":"start_time_created","type":"string"},"statuses":{"description":"statuses","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		CommerceMerchantSettings_GET_returnsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceMerchantSettings_GET_setup_status",
			"GET setup_status for CommerceMerchantSettings. Returns CommerceMerchantSettingsSetupStatus",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CommerceMerchantSettings ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CommerceMerchantSettings_GET_setup_statusHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceMerchantSettings_GET_shipping_profiles",
			"GET shipping_profiles for CommerceMerchantSettings. Returns FixedCostShippingProfile. Parameters: reference_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CommerceMerchantSettings ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"reference_id":{"description":"reference_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		CommerceMerchantSettings_GET_shipping_profilesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceMerchantSettings_POST_shipping_profiles",
			"POST shipping_profiles for CommerceMerchantSettings. Returns Object. Parameters: handling_time (map), is_default (bool), is_default_shipping_profile (bool), name (string) [required], reference_id (string), shipping_destinations (list<map>) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"handling_time":{"description":"handling_time","type":"string"},"id":{"description":"CommerceMerchantSettings ID","type":"string"},"is_default":{"description":"is_default","type":"boolean"},"is_default_shipping_profile":{"description":"is_default_shipping_profile","type":"boolean"},"name":{"description":"name","type":"string"},"reference_id":{"description":"reference_id","type":"string"},"shipping_destinations":{"description":"shipping_destinations","items":{"additionalProperties":true,"type":"object"},"type":"array"}},"required":["id","name","shipping_destinations"],"type":"object"}`),
		),
		CommerceMerchantSettings_POST_shipping_profilesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceMerchantSettings_GET_shops",
			"GET shops for CommerceMerchantSettings. Returns Shop",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CommerceMerchantSettings ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CommerceMerchantSettings_GET_shopsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceMerchantSettings_GET_tax_settings",
			"GET tax_settings for CommerceMerchantSettings. Returns CommerceMerchantTaxSettings",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CommerceMerchantSettings ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CommerceMerchantSettings_GET_tax_settingsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceMerchantSettings_GET_",
			"GET  for CommerceMerchantSettings. Returns CommerceMerchantSettings",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CommerceMerchantSettings ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CommerceMerchantSettings_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceOrder_POST_acknowledge_order",
			"POST acknowledge_order for CommerceOrder. Returns CommerceOrder. Parameters: idempotency_key (string) [required], merchant_order_reference (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"CommerceOrder ID","type":"string"},"idempotency_key":{"description":"idempotency_key","type":"string"},"merchant_order_reference":{"description":"merchant_order_reference","type":"string"}},"required":["id","idempotency_key"],"type":"object"}`),
		),
		CommerceOrder_POST_acknowledge_orderHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceOrder_GET_cancellations",
			"GET cancellations for CommerceOrder. Returns CommerceOrderCancellation",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CommerceOrder ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CommerceOrder_GET_cancellationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceOrder_POST_cancellations",
			"POST cancellations for CommerceOrder. Returns CommerceOrder. Parameters: cancel_reason (map), idempotency_key (string) [required], items (list<map>), restock_items (bool)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"cancel_reason":{"description":"cancel_reason","type":"string"},"id":{"description":"CommerceOrder ID","type":"string"},"idempotency_key":{"description":"idempotency_key","type":"string"},"items":{"description":"items","items":{"additionalProperties":true,"type":"object"},"type":"array"},"restock_items":{"description":"restock_items","type":"boolean"}},"required":["id","idempotency_key"],"type":"object"}`),
		),
		CommerceOrder_POST_cancellationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceOrder_POST_item_updates",
			"POST item_updates for CommerceOrder. Returns CommerceOrder. Parameters: items (list<map>) [required], merchant_order_reference (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"CommerceOrder ID","type":"string"},"items":{"description":"items","items":{"additionalProperties":true,"type":"object"},"type":"array"},"merchant_order_reference":{"description":"merchant_order_reference","type":"string"}},"required":["id","items","merchant_order_reference"],"type":"object"}`),
		),
		CommerceOrder_POST_item_updatesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceOrder_GET_items",
			"GET items for CommerceOrder. Returns CommerceOrderItem",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CommerceOrder ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CommerceOrder_GET_itemsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceOrder_GET_payments",
			"GET payments for CommerceOrder. Returns CommerceOrderPayment",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		CommerceOrder_GET_paymentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceOrder_GET_promotion_details",
			"GET promotion_details for CommerceOrder. Returns CommercePromotionDetail",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CommerceOrder ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CommerceOrder_GET_promotion_detailsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceOrder_GET_promotions",
			"GET promotions for CommerceOrder. Returns CommerceOrderReimbursement",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CommerceOrder ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CommerceOrder_GET_promotionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceOrder_GET_refunds",
			"GET refunds for CommerceOrder. Returns CommerceOrderRefund",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CommerceOrder ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CommerceOrder_GET_refundsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceOrder_POST_refunds",
			"POST refunds for CommerceOrder. Returns CommerceOrder. Parameters: adjustment_amount (map), deductions (list<map>), idempotency_key (string) [required], items (list<map>), reason_code (commerceorderrefunds_reason_code_enum_param) [required], reason_text (string), return_id (string), shipping (map)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"adjustment_amount":{"description":"adjustment_amount","type":"string"},"deductions":{"description":"deductions","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"CommerceOrder ID","type":"string"},"idempotency_key":{"description":"idempotency_key","type":"string"},"items":{"description":"items","items":{"additionalProperties":true,"type":"object"},"type":"array"},"reason_code":{"description":"reason_code (enum: commerceorderrefunds_reason_code_enum_param)","type":"string"},"reason_text":{"description":"reason_text","type":"string"},"return_id":{"description":"return_id","type":"string"},"shipping":{"description":"shipping","type":"string"}},"required":["id","idempotency_key","reason_code"],"type":"object"}`),
		),
		CommerceOrder_POST_refundsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceOrder_GET_returns",
			"GET returns for CommerceOrder. Returns CommerceReturn. Parameters: merchant_return_id (string), statuses (list<commerceorderreturns_statuses_enum_param>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CommerceOrder ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"merchant_return_id":{"description":"merchant_return_id","type":"string"},"statuses":{"description":"statuses","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		CommerceOrder_GET_returnsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceOrder_POST_returns",
			"POST returns for CommerceOrder. Returns CommerceOrder. Parameters: items (list<map>) [required], merchant_return_id (string), return_message (string), update (map)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"CommerceOrder ID","type":"string"},"items":{"description":"items","items":{"additionalProperties":true,"type":"object"},"type":"array"},"merchant_return_id":{"description":"merchant_return_id","type":"string"},"return_message":{"description":"return_message","type":"string"},"update":{"description":"update","type":"string"}},"required":["id","items"],"type":"object"}`),
		),
		CommerceOrder_POST_returnsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceOrder_GET_shipments",
			"GET shipments for CommerceOrder. Returns CommerceOrderShipment",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		CommerceOrder_GET_shipmentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceOrder_POST_shipments",
			"POST shipments for CommerceOrder. Returns CommerceOrder. Parameters: external_redemption_link (string), external_shipment_id (string), fulfillment (map), idempotency_key (string) [required], items (list<map>), merchant_order_reference (string), shipment_origin_postal_code (string), shipping_tax_details (map), should_use_default_fulfillment_location (bool), tracking_info (map)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"external_redemption_link":{"description":"external_redemption_link","type":"string"},"external_shipment_id":{"description":"external_shipment_id","type":"string"},"fulfillment":{"description":"fulfillment","type":"string"},"idempotency_key":{"description":"idempotency_key","type":"string"},"items":{"description":"items","items":{"additionalProperties":true,"type":"object"},"type":"array"},"merchant_order_reference":{"description":"merchant_order_reference","type":"string"},"shipment_origin_postal_code":{"description":"shipment_origin_postal_code","type":"string"},"shipping_tax_details":{"description":"shipping_tax_details","type":"string"},"should_use_default_fulfillment_location":{"description":"should_use_default_fulfillment_location","type":"boolean"},"tracking_info":{"description":"tracking_info","type":"string"}},"required":["idempotency_key"],"type":"object"}`),
		),
		CommerceOrder_POST_shipmentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceOrder_POST_update_shipment",
			"POST update_shipment for CommerceOrder. Returns CommerceOrder. Parameters: external_shipment_id (string), fulfillment_id (string), idempotency_key (string) [required], shipment_id (string), tracking_info (map) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"external_shipment_id":{"description":"external_shipment_id","type":"string"},"fulfillment_id":{"description":"fulfillment_id","type":"string"},"idempotency_key":{"description":"idempotency_key","type":"string"},"shipment_id":{"description":"shipment_id","type":"string"},"tracking_info":{"description":"tracking_info","type":"string"}},"required":["idempotency_key","tracking_info"],"type":"object"}`),
		),
		CommerceOrder_POST_update_shipmentHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceOrder_GET_",
			"GET  for CommerceOrder. Returns CommerceOrder",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CommerceOrder ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CommerceOrder_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceOrderTransactionDetail_GET_items",
			"GET items for CommerceOrderTransactionDetail. Returns CommerceOrderTransactionItemDetail",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CommerceOrderTransactionDetail ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CommerceOrderTransactionDetail_GET_itemsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CommerceOrderTransactionDetail_GET_tax_details",
			"GET tax_details for CommerceOrderTransactionDetail. Returns CommerceOrderTransactionDetailTaxDetail",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CommerceOrderTransactionDetail ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CommerceOrderTransactionDetail_GET_tax_detailsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ContentBlockList_GET_applied_ad_accounts",
			"GET applied_ad_accounts for ContentBlockList. Returns AdAccount",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ContentBlockList ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ContentBlockList_GET_applied_ad_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ContentBlockList_GET_facebook_content",
			"GET facebook_content for ContentBlockList. Returns Postish",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ContentBlockList ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ContentBlockList_GET_facebook_contentHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ContentBlockList_GET_instagram_content",
			"GET instagram_content for ContentBlockList. Returns IGMedia",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ContentBlockList ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ContentBlockList_GET_instagram_contentHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ContentBlockList_GET_",
			"GET  for ContentBlockList. Returns ContentBlockList",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ContentBlockList ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ContentBlockList_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CopyrightMediaMisuse_GET_",
			"GET  for CopyrightMediaMisuse. Returns CopyrightMediaMisuse",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CopyrightMediaMisuse ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CopyrightMediaMisuse_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CopyrightOwnershipTransfer_GET_",
			"GET  for CopyrightOwnershipTransfer. Returns CopyrightOwnershipTransfer",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CopyrightOwnershipTransfer ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CopyrightOwnershipTransfer_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CreatorAssetCreative_GET_",
			"GET  for CreatorAssetCreative. Returns CreatorAssetCreative",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CreatorAssetCreative ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CreatorAssetCreative_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CreditCard_GET_",
			"GET  for CreditCard. Returns CreditCard",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CreditCard ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CreditCard_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CustomAudience_DELETE_adaccounts",
			"DELETE adaccounts for CustomAudience. Returns Object. Parameters: adaccounts (list<string>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"adaccounts":{"description":"adaccounts","items":{"type":"string"},"type":"array"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CustomAudience ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CustomAudience_DELETE_adaccountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CustomAudience_GET_adaccounts",
			"GET adaccounts for CustomAudience. Returns CustomAudienceAdAccount. Parameters: permissions (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CustomAudience ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"permissions":{"description":"permissions","type":"string"}},"required":["id"],"type":"object"}`),
		),
		CustomAudience_GET_adaccountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CustomAudience_POST_adaccounts",
			"POST adaccounts for CustomAudience. Returns CustomAudience. Parameters: adaccounts (list<string>), permissions (string), relationship_type (list<string>), replace (bool)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"adaccounts":{"description":"adaccounts","items":{"type":"string"},"type":"array"},"id":{"description":"CustomAudience ID","type":"string"},"permissions":{"description":"permissions","type":"string"},"relationship_type":{"description":"relationship_type","items":{"type":"string"},"type":"array"},"replace":{"description":"replace","type":"boolean"}},"required":["id"],"type":"object"}`),
		),
		CustomAudience_POST_adaccountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CustomAudience_GET_ads",
			"GET ads for CustomAudience. Returns Ad. Parameters: effective_status (list<string>), status (list<string>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"effective_status":{"description":"effective_status","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CustomAudience ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"status":{"description":"status","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		CustomAudience_GET_adsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CustomAudience_GET_health",
			"GET health for CustomAudience. Returns CustomAudienceHealth. Parameters: calculated_date (string), processed_date (string), value_aggregation_duration (unsigned int), value_country (string), value_currency (string), value_version (unsigned int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"calculated_date":{"description":"calculated_date","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CustomAudience ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"processed_date":{"description":"processed_date","type":"string"},"value_aggregation_duration":{"description":"value_aggregation_duration","type":"integer"},"value_country":{"description":"value_country","type":"string"},"value_currency":{"description":"value_currency","type":"string"},"value_version":{"description":"value_version","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CustomAudience_GET_healthHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CustomAudience_GET_salts",
			"GET salts for CustomAudience. Returns CustomAudienceSalts. Parameters: params (list<string>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CustomAudience ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"params":{"description":"params","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		CustomAudience_GET_saltsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CustomAudience_POST_salts",
			"POST salts for CustomAudience. Returns CustomAudience. Parameters: salt (string) [required], valid_from (datetime) [required], valid_to (datetime) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"CustomAudience ID","type":"string"},"salt":{"description":"salt","type":"string"},"valid_from":{"description":"valid_from","type":"string"},"valid_to":{"description":"valid_to","type":"string"}},"required":["id","salt","valid_from","valid_to"],"type":"object"}`),
		),
		CustomAudience_POST_saltsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CustomAudience_GET_sessions",
			"GET sessions for CustomAudience. Returns CustomAudienceSession. Parameters: session_id (unsigned int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CustomAudience ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"session_id":{"description":"session_id","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CustomAudience_GET_sessionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CustomAudience_GET_shared_account_info",
			"GET shared_account_info for CustomAudience. Returns CustomAudiencesharedAccountInfo",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CustomAudience ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CustomAudience_GET_shared_account_infoHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CustomAudience_DELETE_users",
			"DELETE users for CustomAudience. Returns Object. Parameters: namespace (string), payload (Object), session (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CustomAudience ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"namespace":{"description":"namespace","type":"string"},"payload":{"additionalProperties":true,"description":"payload","type":"object"},"session":{"additionalProperties":true,"description":"session","type":"object"}},"required":["id"],"type":"object"}`),
		),
		CustomAudience_DELETE_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CustomAudience_POST_users",
			"POST users for CustomAudience. Returns CustomAudience. Parameters: namespace (string), payload (Object), session (Object)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"CustomAudience ID","type":"string"},"namespace":{"description":"namespace","type":"string"},"payload":{"additionalProperties":true,"description":"payload","type":"object"},"session":{"additionalProperties":true,"description":"session","type":"object"}},"required":["id"],"type":"object"}`),
		),
		CustomAudience_POST_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CustomAudience_POST_usersreplace",
			"POST usersreplace for CustomAudience. Returns CustomAudience. Parameters: namespace (string), payload (Object) [required], session (Object) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"CustomAudience ID","type":"string"},"namespace":{"description":"namespace","type":"string"},"payload":{"additionalProperties":true,"description":"payload","type":"object"},"session":{"additionalProperties":true,"description":"session","type":"object"}},"required":["id","payload","session"],"type":"object"}`),
		),
		CustomAudience_POST_usersreplaceHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CustomAudience_DELETE_",
			"DELETE  for CustomAudience. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CustomAudience ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CustomAudience_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CustomAudience_GET_",
			"GET  for CustomAudience. Returns CustomAudience. Parameters: ad_account_id (string), special_ad_categories (list<string>), special_ad_category_countries (list<string>), target_countries (list<string>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"ad_account_id":{"description":"ad_account_id","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CustomAudience ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"special_ad_categories":{"description":"special_ad_categories","items":{"type":"string"},"type":"array"},"special_ad_category_countries":{"description":"special_ad_category_countries","items":{"type":"string"},"type":"array"},"target_countries":{"description":"target_countries","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		CustomAudience_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CustomAudience_POST_",
			"POST  for CustomAudience. Returns CustomAudience. Parameters: allowed_domains (list<string>), claim_objective (customaudience_claim_objective), content_type (customaudience_content_type), countries (string), customer_file_source (customaudience_customer_file_source), description (string), enable_fetch_or_create (bool), event_source_group (string), event_sources (list<map>), exclusions (list<Object>), inclusions (list<Object>), lookalike_spec (string), name (string), opt_out_link (string), parent_audience_id (unsigned int), product_set_id (string), retention_days (unsigned int), rev_share_policy_id (unsigned int), rule (string), rule_aggregation (string), tags (list<string>), use_in_campaigns (bool)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"allowed_domains":{"description":"allowed_domains","items":{"type":"string"},"type":"array"},"claim_objective":{"description":"claim_objective (enum: customaudience_claim_objective)","type":"string"},"content_type":{"description":"content_type (enum: customaudience_content_type)","type":"string"},"countries":{"description":"countries","type":"string"},"customer_file_source":{"description":"customer_file_source (enum: customaudience_customer_file_source)","type":"string"},"description":{"description":"description","type":"string"},"enable_fetch_or_create":{"description":"enable_fetch_or_create","type":"boolean"},"event_source_group":{"description":"event_source_group","type":"string"},"event_sources":{"description":"event_sources","items":{"additionalProperties":true,"type":"object"},"type":"array"},"exclusions":{"description":"exclusions","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"CustomAudience ID","type":"string"},"inclusions":{"description":"inclusions","items":{"additionalProperties":true,"type":"object"},"type":"array"},"lookalike_spec":{"description":"lookalike_spec","type":"string"},"name":{"description":"name","type":"string"},"opt_out_link":{"description":"opt_out_link","type":"string"},"parent_audience_id":{"description":"parent_audience_id","type":"integer"},"product_set_id":{"description":"product_set_id","type":"string"},"retention_days":{"description":"retention_days","type":"integer"},"rev_share_policy_id":{"description":"rev_share_policy_id","type":"integer"},"rule":{"description":"rule","type":"string"},"rule_aggregation":{"description":"rule_aggregation","type":"string"},"tags":{"description":"tags","items":{"type":"string"},"type":"array"},"use_in_campaigns":{"description":"use_in_campaigns","type":"boolean"}},"required":["id"],"type":"object"}`),
		),
		CustomAudience_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CustomConversion_GET_stats",
			"GET stats for CustomConversion. Returns CustomConversionStatsResult. Parameters: aggregation (customconversionstats_aggregation_enum_param), end_time (datetime), start_time (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"aggregation":{"description":"aggregation (enum: customconversionstats_aggregation_enum_param)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"end_time":{"description":"end_time","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CustomConversion ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"start_time":{"description":"start_time","type":"string"}},"required":["id"],"type":"object"}`),
		),
		CustomConversion_GET_statsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CustomConversion_DELETE_",
			"DELETE  for CustomConversion. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CustomConversion ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CustomConversion_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CustomConversion_GET_",
			"GET  for CustomConversion. Returns CustomConversion",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CustomConversion ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		CustomConversion_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"CustomConversion_POST_",
			"POST  for CustomConversion. Returns CustomConversion. Parameters: default_conversion_value (float), description (string), name (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"default_conversion_value":{"description":"default_conversion_value","type":"number"},"description":{"description":"description","type":"string"},"id":{"description":"CustomConversion ID","type":"string"},"name":{"description":"name","type":"string"}},"required":["id"],"type":"object"}`),
		),
		CustomConversion_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Destination_GET_channels_to_integrity_status",
			"GET channels_to_integrity_status for Destination. Returns CatalogItemChannelsToIntegrityStatus",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Destination ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Destination_GET_channels_to_integrity_statusHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Destination_GET_override_details",
			"GET override_details for Destination. Returns OverrideDetails. Parameters: keys (list<string>), type (destinationoverride_details_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Destination ID","type":"string"},"keys":{"description":"keys","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: destinationoverride_details_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Destination_GET_override_detailsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Destination_GET_videos_metadata",
			"GET videos_metadata for Destination. Returns DynamicVideoMetadata",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Destination_GET_videos_metadataHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Destination_GET_",
			"GET  for Destination. Returns Destination",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Destination ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Destination_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"DynamicARMetadata_GET_",
			"GET  for DynamicARMetadata. Returns DynamicARMetadata",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"DynamicARMetadata ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		DynamicARMetadata_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"DynamicContentSet_GET_",
			"GET  for DynamicContentSet. Returns DynamicContentSet",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"DynamicContentSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		DynamicContentSet_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"DynamicItemDisplayBundle_GET_",
			"GET  for DynamicItemDisplayBundle. Returns DynamicItemDisplayBundle",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"DynamicItemDisplayBundle ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		DynamicItemDisplayBundle_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"DynamicItemDisplayBundleFolder_GET_",
			"GET  for DynamicItemDisplayBundleFolder. Returns DynamicItemDisplayBundleFolder",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"DynamicItemDisplayBundleFolder ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		DynamicItemDisplayBundleFolder_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"DynamicPriceConfigByDate_GET_",
			"GET  for DynamicPriceConfigByDate. Returns DynamicPriceConfigByDate",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"DynamicPriceConfigByDate ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		DynamicPriceConfigByDate_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"DynamicVideoMetadata_GET_",
			"GET  for DynamicVideoMetadata. Returns DynamicVideoMetadata",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"DynamicVideoMetadata ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		DynamicVideoMetadata_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"EducationExperience_GET_",
			"GET  for EducationExperience. Returns EducationExperience",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"EducationExperience ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		EducationExperience_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Event_GET_comments",
			"GET comments for Event. Returns NullNode",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Event_GET_commentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Event_GET_feed",
			"GET feed for Event. Returns NullNode",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Event ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Event_GET_feedHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Event_GET_live_videos",
			"GET live_videos for Event. Returns NullNode",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Event ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Event_GET_live_videosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Event_POST_live_videos",
			"POST live_videos for Event. Returns LiveVideo. Parameters: content_tags (list<string>), description (string), enable_backup_ingest (bool), encoding_settings (string), event_params (Object), fisheye_video_cropped (bool), front_z_rotation (float), is_audio_only (bool), is_spherical (bool), original_fov (unsigned int), privacy (string), projection (eventlive_videos_projection_enum_param), published (bool), schedule_custom_profile_image (file), spatial_audio_format (eventlive_videos_spatial_audio_format_enum_param), status (eventlive_videos_status_enum_param), stereoscopic_mode (eventlive_videos_stereoscopic_mode_enum_param), stop_on_delete_stream (bool), stream_type (eventlive_videos_stream_type_enum_param), title (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"content_tags":{"description":"content_tags","items":{"type":"string"},"type":"array"},"description":{"description":"description","type":"string"},"enable_backup_ingest":{"description":"enable_backup_ingest","type":"boolean"},"encoding_settings":{"description":"encoding_settings","type":"string"},"event_params":{"additionalProperties":true,"description":"event_params","type":"object"},"fisheye_video_cropped":{"description":"fisheye_video_cropped","type":"boolean"},"front_z_rotation":{"description":"front_z_rotation","type":"number"},"id":{"description":"Event ID","type":"string"},"is_audio_only":{"description":"is_audio_only","type":"boolean"},"is_spherical":{"description":"is_spherical","type":"boolean"},"original_fov":{"description":"original_fov","type":"integer"},"privacy":{"description":"privacy","type":"string"},"projection":{"description":"projection (enum: eventlive_videos_projection_enum_param)","type":"string"},"published":{"description":"published","type":"boolean"},"schedule_custom_profile_image":{"description":"schedule_custom_profile_image","type":"string"},"spatial_audio_format":{"description":"spatial_audio_format (enum: eventlive_videos_spatial_audio_format_enum_param)","type":"string"},"status":{"description":"status (enum: eventlive_videos_status_enum_param)","type":"string"},"stereoscopic_mode":{"description":"stereoscopic_mode (enum: eventlive_videos_stereoscopic_mode_enum_param)","type":"string"},"stop_on_delete_stream":{"description":"stop_on_delete_stream","type":"boolean"},"stream_type":{"description":"stream_type (enum: eventlive_videos_stream_type_enum_param)","type":"string"},"title":{"description":"title","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Event_POST_live_videosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Event_GET_photos",
			"GET photos for Event. Returns NullNode",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Event ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Event_GET_photosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Event_GET_picture",
			"GET picture for Event. Returns NullNode",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Event ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Event_GET_pictureHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Event_GET_posts",
			"GET posts for Event. Returns NullNode",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Event ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Event_GET_postsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Event_GET_roles",
			"GET roles for Event. Returns Profile",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Event ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Event_GET_rolesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Event_GET_ticket_tiers",
			"GET ticket_tiers for Event. Returns EventTicketTier",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Event ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Event_GET_ticket_tiersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Event_GET_videos",
			"GET videos for Event. Returns NullNode",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Event ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Event_GET_videosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Event_GET_",
			"GET  for Event. Returns Event",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Event ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Event_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"EventExternalTicketInfo_GET_",
			"GET  for EventExternalTicketInfo. Returns EventExternalTicketInfo",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"EventExternalTicketInfo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		EventExternalTicketInfo_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"EventRegistrationSetting_GET_",
			"GET  for EventRegistrationSetting. Returns EventRegistrationSetting",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"EventRegistrationSetting ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		EventRegistrationSetting_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"EventSourceGroup_GET_shared_accounts",
			"GET shared_accounts for EventSourceGroup. Returns AdAccount",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"EventSourceGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		EventSourceGroup_GET_shared_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"EventSourceGroup_POST_shared_accounts",
			"POST shared_accounts for EventSourceGroup. Returns EventSourceGroup. Parameters: accounts (list<string>) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"accounts":{"description":"accounts","items":{"type":"string"},"type":"array"},"id":{"description":"EventSourceGroup ID","type":"string"}},"required":["id","accounts"],"type":"object"}`),
		),
		EventSourceGroup_POST_shared_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"EventSourceGroup_GET_",
			"GET  for EventSourceGroup. Returns EventSourceGroup",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"EventSourceGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		EventSourceGroup_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"EventSourceGroup_POST_",
			"POST  for EventSourceGroup. Returns EventSourceGroup. Parameters: event_sources (list<string>) [required], name (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"event_sources":{"description":"event_sources","items":{"type":"string"},"type":"array"},"id":{"description":"EventSourceGroup ID","type":"string"},"name":{"description":"name","type":"string"}},"required":["id","event_sources","name"],"type":"object"}`),
		),
		EventSourceGroup_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"EventTicketSetting_GET_",
			"GET  for EventTicketSetting. Returns EventTicketSetting",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"EventTicketSetting ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		EventTicketSetting_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"EventTicketTier_GET_",
			"GET  for EventTicketTier. Returns EventTicketTier",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"EventTicketTier ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		EventTicketTier_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"EventTour_GET_",
			"GET  for EventTour. Returns EventTour",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"EventTour ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		EventTour_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ExtendedCredit_GET_extended_credit_invoice_groups",
			"GET extended_credit_invoice_groups for ExtendedCredit. Returns ExtendedCreditInvoiceGroup",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ExtendedCredit ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ExtendedCredit_GET_extended_credit_invoice_groupsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ExtendedCredit_POST_extended_credit_invoice_groups",
			"POST extended_credit_invoice_groups for ExtendedCredit. Returns ExtendedCreditInvoiceGroup. Parameters: emails (list<string>) [required], name (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"emails":{"description":"emails","items":{"type":"string"},"type":"array"},"id":{"description":"ExtendedCredit ID","type":"string"},"name":{"description":"name","type":"string"}},"required":["id","emails","name"],"type":"object"}`),
		),
		ExtendedCredit_POST_extended_credit_invoice_groupsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ExtendedCredit_GET_owning_credit_allocation_configs",
			"GET owning_credit_allocation_configs for ExtendedCredit. Returns ExtendedCreditAllocationConfig. Parameters: receiving_business_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ExtendedCredit ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"receiving_business_id":{"description":"receiving_business_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		ExtendedCredit_GET_owning_credit_allocation_configsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ExtendedCredit_POST_owning_credit_allocation_configs",
			"POST owning_credit_allocation_configs for ExtendedCredit. Returns ExtendedCreditAllocationConfig. Parameters: amount (Object), liability_type (extendedcreditowning_credit_allocation_configs_liability_type_enum_param), partition_type (extendedcreditowning_credit_allocation_configs_partition_type_enum_param), receiving_business_id (string) [required], send_bill_to (extendedcreditowning_credit_allocation_configs_send_bill_to_enum_param)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"amount":{"additionalProperties":true,"description":"amount","type":"object"},"id":{"description":"ExtendedCredit ID","type":"string"},"liability_type":{"description":"liability_type (enum: extendedcreditowning_credit_allocation_configs_liability_type_enum_param)","type":"string"},"partition_type":{"description":"partition_type (enum: extendedcreditowning_credit_allocation_configs_partition_type_enum_param)","type":"string"},"receiving_business_id":{"description":"receiving_business_id","type":"string"},"send_bill_to":{"description":"send_bill_to (enum: extendedcreditowning_credit_allocation_configs_send_bill_to_enum_param)","type":"string"}},"required":["id","receiving_business_id"],"type":"object"}`),
		),
		ExtendedCredit_POST_owning_credit_allocation_configsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ExtendedCredit_POST_whatsapp_credit_attach",
			"POST whatsapp_credit_attach for ExtendedCredit. Returns Object. Parameters: waba_currency (string) [required], waba_id (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"ExtendedCredit ID","type":"string"},"waba_currency":{"description":"waba_currency","type":"string"},"waba_id":{"description":"waba_id","type":"string"}},"required":["id","waba_currency","waba_id"],"type":"object"}`),
		),
		ExtendedCredit_POST_whatsapp_credit_attachHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ExtendedCredit_POST_whatsapp_credit_sharing",
			"POST whatsapp_credit_sharing for ExtendedCredit. Returns Object. Parameters: receiving_business_id (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"ExtendedCredit ID","type":"string"},"receiving_business_id":{"description":"receiving_business_id","type":"string"}},"required":["id","receiving_business_id"],"type":"object"}`),
		),
		ExtendedCredit_POST_whatsapp_credit_sharingHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ExtendedCredit_POST_whatsapp_credit_sharing_and_attach",
			"POST whatsapp_credit_sharing_and_attach for ExtendedCredit. Returns ExtendedCreditAllocationConfig. Parameters: waba_currency (string) [required], waba_id (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"ExtendedCredit ID","type":"string"},"waba_currency":{"description":"waba_currency","type":"string"},"waba_id":{"description":"waba_id","type":"string"}},"required":["id","waba_currency","waba_id"],"type":"object"}`),
		),
		ExtendedCredit_POST_whatsapp_credit_sharing_and_attachHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ExtendedCredit_GET_",
			"GET  for ExtendedCredit. Returns ExtendedCredit",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ExtendedCredit ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ExtendedCredit_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ExtendedCreditAllocationConfig_DELETE_",
			"DELETE  for ExtendedCreditAllocationConfig. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ExtendedCreditAllocationConfig ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ExtendedCreditAllocationConfig_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ExtendedCreditAllocationConfig_GET_",
			"GET  for ExtendedCreditAllocationConfig. Returns ExtendedCreditAllocationConfig",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ExtendedCreditAllocationConfig ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ExtendedCreditAllocationConfig_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ExtendedCreditAllocationConfig_POST_",
			"POST  for ExtendedCreditAllocationConfig. Returns ExtendedCreditAllocationConfig. Parameters: amount (Object)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"amount":{"additionalProperties":true,"description":"amount","type":"object"},"id":{"description":"ExtendedCreditAllocationConfig ID","type":"string"}},"required":["id"],"type":"object"}`),
		),
		ExtendedCreditAllocationConfig_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ExtendedCreditApplication_GET_",
			"GET  for ExtendedCreditApplication. Returns ExtendedCreditApplication",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ExtendedCreditApplication ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ExtendedCreditApplication_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ExtendedCreditInvoiceGroup_DELETE_ad_accounts",
			"DELETE ad_accounts for ExtendedCreditInvoiceGroup. Returns Object. Parameters: ad_account_id (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"ad_account_id":{"description":"ad_account_id","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ExtendedCreditInvoiceGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","ad_account_id"],"type":"object"}`),
		),
		ExtendedCreditInvoiceGroup_DELETE_ad_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ExtendedCreditInvoiceGroup_GET_ad_accounts",
			"GET ad_accounts for ExtendedCreditInvoiceGroup. Returns AdAccount",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ExtendedCreditInvoiceGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ExtendedCreditInvoiceGroup_GET_ad_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ExtendedCreditInvoiceGroup_POST_ad_accounts",
			"POST ad_accounts for ExtendedCreditInvoiceGroup. Returns AdAccount. Parameters: ad_account_id (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"ad_account_id":{"description":"ad_account_id","type":"string"},"id":{"description":"ExtendedCreditInvoiceGroup ID","type":"string"}},"required":["id","ad_account_id"],"type":"object"}`),
		),
		ExtendedCreditInvoiceGroup_POST_ad_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ExtendedCreditInvoiceGroup_DELETE_",
			"DELETE  for ExtendedCreditInvoiceGroup. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ExtendedCreditInvoiceGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ExtendedCreditInvoiceGroup_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ExtendedCreditInvoiceGroup_GET_",
			"GET  for ExtendedCreditInvoiceGroup. Returns ExtendedCreditInvoiceGroup",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ExtendedCreditInvoiceGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ExtendedCreditInvoiceGroup_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ExtendedCreditInvoiceGroup_POST_",
			"POST  for ExtendedCreditInvoiceGroup. Returns ExtendedCreditInvoiceGroup. Parameters: emails (list<string>), name (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"emails":{"description":"emails","items":{"type":"string"},"type":"array"},"id":{"description":"ExtendedCreditInvoiceGroup ID","type":"string"},"name":{"description":"name","type":"string"}},"required":["id"],"type":"object"}`),
		),
		ExtendedCreditInvoiceGroup_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ExternalMerchantSettings_GET_",
			"GET  for ExternalMerchantSettings. Returns ExternalMerchantSettings",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ExternalMerchantSettings ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ExternalMerchantSettings_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"FAMEKumo_GET_",
			"GET  for FAMEKumo. Returns FAMEKumo",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"FAMEKumo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		FAMEKumo_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"FBImageCopyrightMatch_GET_",
			"GET  for FBImageCopyrightMatch. Returns FBImageCopyrightMatch",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"FBImageCopyrightMatch ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		FBImageCopyrightMatch_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"FantasyGame_GET_",
			"GET  for FantasyGame. Returns FantasyGame",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"FantasyGame ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		FantasyGame_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"FavoriteCatalog_GET_",
			"GET  for FavoriteCatalog. Returns FavoriteCatalog",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"FavoriteCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		FavoriteCatalog_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Flight_GET_channels_to_integrity_status",
			"GET channels_to_integrity_status for Flight. Returns CatalogItemChannelsToIntegrityStatus",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Flight ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Flight_GET_channels_to_integrity_statusHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Flight_GET_override_details",
			"GET override_details for Flight. Returns OverrideDetails. Parameters: keys (list<string>), type (flightoverride_details_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Flight ID","type":"string"},"keys":{"description":"keys","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: flightoverride_details_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Flight_GET_override_detailsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Flight_GET_videos_metadata",
			"GET videos_metadata for Flight. Returns DynamicVideoMetadata",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Flight_GET_videos_metadataHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Flight_GET_",
			"GET  for Flight. Returns Flight",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Flight ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Flight_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Flight_POST_",
			"POST  for Flight. Returns Flight. Parameters: currency (string), description (string), destination_airport (string), destination_city (string), images (list<Object>), origin_airport (string), origin_city (string), price (unsigned int), url (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"currency":{"description":"currency","type":"string"},"description":{"description":"description","type":"string"},"destination_airport":{"description":"destination_airport","type":"string"},"destination_city":{"description":"destination_city","type":"string"},"id":{"description":"Flight ID","type":"string"},"images":{"description":"images","items":{"additionalProperties":true,"type":"object"},"type":"array"},"origin_airport":{"description":"origin_airport","type":"string"},"origin_city":{"description":"origin_city","type":"string"},"price":{"description":"price","type":"integer"},"url":{"description":"url","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Flight_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"FranchiseProgram_GET_",
			"GET  for FranchiseProgram. Returns FranchiseProgram",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"FranchiseProgram ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		FranchiseProgram_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"FranchiseProgramMember_GET_",
			"GET  for FranchiseProgramMember. Returns FranchiseProgramMember",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"FranchiseProgramMember ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		FranchiseProgramMember_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"FundraiserPersonToCharity_GET_donations",
			"GET donations for FundraiserPersonToCharity. Returns InternalDonationForApp",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"FundraiserPersonToCharity ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		FundraiserPersonToCharity_GET_donationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"FundraiserPersonToCharity_POST_end_fundraiser",
			"POST end_fundraiser for FundraiserPersonToCharity. Returns Object",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"FundraiserPersonToCharity ID","type":"string"}},"required":["id"],"type":"object"}`),
		),
		FundraiserPersonToCharity_POST_end_fundraiserHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"FundraiserPersonToCharity_GET_external_donations",
			"GET external_donations for FundraiserPersonToCharity. Returns ExternalAppDonation",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"FundraiserPersonToCharity ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		FundraiserPersonToCharity_GET_external_donationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"FundraiserPersonToCharity_POST_external_donations",
			"POST external_donations for FundraiserPersonToCharity. Returns ExternalAppDonation. Parameters: amount_received (unsigned int) [required], currency (string) [required], donation_id_hash (string) [required], donation_time (unsigned int) [required], donor_id_hash (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"amount_received":{"description":"amount_received","type":"integer"},"currency":{"description":"currency","type":"string"},"donation_id_hash":{"description":"donation_id_hash","type":"string"},"donation_time":{"description":"donation_time","type":"integer"},"donor_id_hash":{"description":"donor_id_hash","type":"string"},"id":{"description":"FundraiserPersonToCharity ID","type":"string"}},"required":["id","amount_received","currency","donation_id_hash","donation_time","donor_id_hash"],"type":"object"}`),
		),
		FundraiserPersonToCharity_POST_external_donationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"FundraiserPersonToCharity_GET_",
			"GET  for FundraiserPersonToCharity. Returns FundraiserPersonToCharity",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"FundraiserPersonToCharity ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		FundraiserPersonToCharity_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"FundraiserPersonToCharity_POST_",
			"POST  for FundraiserPersonToCharity. Returns FundraiserPersonToCharity. Parameters: description (string), end_time (datetime), external_event_name (string), external_event_start_time (datetime), external_event_uri (string), external_fundraiser_uri (string), external_id (string), goal_amount (unsigned int), name (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"description":{"description":"description","type":"string"},"end_time":{"description":"end_time","type":"string"},"external_event_name":{"description":"external_event_name","type":"string"},"external_event_start_time":{"description":"external_event_start_time","type":"string"},"external_event_uri":{"description":"external_event_uri","type":"string"},"external_fundraiser_uri":{"description":"external_fundraiser_uri","type":"string"},"external_id":{"description":"external_id","type":"string"},"goal_amount":{"description":"goal_amount","type":"integer"},"id":{"description":"FundraiserPersonToCharity ID","type":"string"},"name":{"description":"name","type":"string"}},"required":["id"],"type":"object"}`),
		),
		FundraiserPersonToCharity_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"GeoGatingPolicy_GET_",
			"GET  for GeoGatingPolicy. Returns GeoGatingPolicy",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"GeoGatingPolicy ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		GeoGatingPolicy_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Group_DELETE_admins",
			"DELETE admins for Group. Returns Object. Parameters: uid (int) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Group ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"uid":{"description":"uid","type":"integer"}},"required":["id","uid"],"type":"object"}`),
		),
		Group_DELETE_adminsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Group_POST_admins",
			"POST admins for Group. Returns Group. Parameters: uid (int) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Group ID","type":"string"},"uid":{"description":"uid","type":"integer"}},"required":["id","uid"],"type":"object"}`),
		),
		Group_POST_adminsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Group_GET_albums",
			"GET albums for Group. Returns Album",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Group ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Group_GET_albumsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Group_GET_docs",
			"GET docs for Group. Returns Doc",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Group ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Group_GET_docsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Group_GET_events",
			"GET events for Group. Returns Event",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Group ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Group_GET_eventsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Group_GET_feed",
			"GET feed for Group. Returns Post. Parameters: include_hidden (bool), q (string), show_expired (bool), since (datetime), until (datetime), with (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Group ID","type":"string"},"include_hidden":{"description":"include_hidden","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"q":{"description":"q","type":"string"},"show_expired":{"description":"show_expired","type":"boolean"},"since":{"description":"since","type":"string"},"until":{"description":"until","type":"string"},"with":{"description":"with","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Group_GET_feedHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Group_POST_feed",
			"POST feed for Group. Returns Post. Parameters: actions (Object), album_id (string), android_key_hash (string), application_id (string), asked_fun_fact_prompt_id (unsigned int), asset3d_id (string), associated_id (string), attach_place_suggestion (bool), attached_media (list<Object>), audience_exp (bool), backdated_time (datetime), backdated_time_granularity (groupfeed_backdated_time_granularity_enum_param), breaking_news (bool), breaking_news_expiration (unsigned int), call_to_action (Object), caption (string), child_attachments (list<Object>), client_mutation_id (string), composer_entry_picker (string), composer_entry_point (string), composer_entry_time (unsigned int), composer_session_events_log (string), composer_session_id (string), composer_source_surface (string), composer_type (string), connection_class (string), content_attachment (string), coordinates (Object), cta_link (string), cta_type (string), description (string), direct_share_status (unsigned int), expanded_height (unsigned int), expanded_width (unsigned int), feed_targeting (Object), formatting (groupfeed_formatting_enum_param), fun_fact_prompt_id (string), fun_fact_toastee_id (unsigned int), height (unsigned int), home_checkin_city_id (Object), image_crops (map), implicit_with_tags (list<int>), instant_game_entry_point_data (string), ios_bundle_id (string), is_backout_draft (bool), is_boost_intended (bool), is_explicit_location (bool), is_explicit_share (bool), is_group_linking_post (bool), is_photo_container (bool), link (string), location_source_id (string), manual_privacy (bool), message (string), multi_share_end_card (bool), multi_share_optimized (bool), name (string), nectar_module (string), object_attachment (string), og_action_type_id (string), og_hide_object_attachment (bool), og_icon_id (string), og_object_id (string), og_phrase (string), og_set_profile_badge (bool), og_suggestion_mechanism (string), page_recommendation (string), picture (string), place (Object), place_attachment_setting (groupfeed_place_attachment_setting_enum_param), place_list (string), place_list_data (list), post_surfaces_blacklist (list<groupfeed_post_surfaces_blacklist_enum_param>), posting_to_redspace (groupfeed_posting_to_redspace_enum_param), privacy (string), prompt_id (string), prompt_tracking_string (string), properties (Object), proxied_app_id (string), publish_event_id (unsigned int), published (bool), quote (string), ref (list<string>), referenceable_image_ids (list<string>), referral_id (string), scheduled_publish_time (datetime), source (string), sponsor_id (string), sponsor_relationship (unsigned int), suggested_place_id (Object), tags (list<int>), target_surface (groupfeed_target_surface_enum_param), targeting (Object), text_format_metadata (string), text_format_preset_id (string), text_only_place (string), thumbnail (file), time_since_original_post (unsigned int), title (string), tracking_info (string), unpublished_content_type (groupfeed_unpublished_content_type_enum_param), user_selected_tags (bool), video_start_time_ms (unsigned int), viewer_coordinates (Object), width (unsigned int)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"actions":{"additionalProperties":true,"description":"actions","type":"object"},"album_id":{"description":"album_id","type":"string"},"android_key_hash":{"description":"android_key_hash","type":"string"},"application_id":{"description":"application_id","type":"string"},"asked_fun_fact_prompt_id":{"description":"asked_fun_fact_prompt_id","type":"integer"},"asset3d_id":{"description":"asset3d_id","type":"string"},"associated_id":{"description":"associated_id","type":"string"},"attach_place_suggestion":{"description":"attach_place_suggestion","type":"boolean"},"attached_media":{"description":"attached_media","items":{"additionalProperties":true,"type":"object"},"type":"array"},"audience_exp":{"description":"audience_exp","type":"boolean"},"backdated_time":{"description":"backdated_time","type":"string"},"backdated_time_granularity":{"description":"backdated_time_granularity (enum: groupfeed_backdated_time_granularity_enum_param)","type":"string"},"breaking_news":{"description":"breaking_news","type":"boolean"},"breaking_news_expiration":{"description":"breaking_news_expiration","type":"integer"},"call_to_action":{"additionalProperties":true,"description":"call_to_action","type":"object"},"caption":{"description":"caption","type":"string"},"child_attachments":{"description":"child_attachments","items":{"additionalProperties":true,"type":"object"},"type":"array"},"client_mutation_id":{"description":"client_mutation_id","type":"string"},"composer_entry_picker":{"description":"composer_entry_picker","type":"string"},"composer_entry_point":{"description":"composer_entry_point","type":"string"},"composer_entry_time":{"description":"composer_entry_time","type":"integer"},"composer_session_events_log":{"description":"composer_session_events_log","type":"string"},"composer_session_id":{"description":"composer_session_id","type":"string"},"composer_source_surface":{"description":"composer_source_surface","type":"string"},"composer_type":{"description":"composer_type","type":"string"},"connection_class":{"description":"connection_class","type":"string"},"content_attachment":{"description":"content_attachment","type":"string"},"coordinates":{"additionalProperties":true,"description":"coordinates","type":"object"},"cta_link":{"description":"cta_link","type":"string"},"cta_type":{"description":"cta_type","type":"string"},"description":{"description":"description","type":"string"},"direct_share_status":{"description":"direct_share_status","type":"integer"},"expanded_height":{"description":"expanded_height","type":"integer"},"expanded_width":{"description":"expanded_width","type":"integer"},"feed_targeting":{"additionalProperties":true,"description":"feed_targeting","type":"object"},"formatting":{"description":"formatting (enum: groupfeed_formatting_enum_param)","type":"string"},"fun_fact_prompt_id":{"description":"fun_fact_prompt_id","type":"string"},"fun_fact_toastee_id":{"description":"fun_fact_toastee_id","type":"integer"},"height":{"description":"height","type":"integer"},"home_checkin_city_id":{"additionalProperties":true,"description":"home_checkin_city_id","type":"object"},"id":{"description":"Group ID","type":"string"},"image_crops":{"description":"image_crops","type":"string"},"implicit_with_tags":{"description":"implicit_with_tags","items":{"type":"integer"},"type":"array"},"instant_game_entry_point_data":{"description":"instant_game_entry_point_data","type":"string"},"ios_bundle_id":{"description":"ios_bundle_id","type":"string"},"is_backout_draft":{"description":"is_backout_draft","type":"boolean"},"is_boost_intended":{"description":"is_boost_intended","type":"boolean"},"is_explicit_location":{"description":"is_explicit_location","type":"boolean"},"is_explicit_share":{"description":"is_explicit_share","type":"boolean"},"is_group_linking_post":{"description":"is_group_linking_post","type":"boolean"},"is_photo_container":{"description":"is_photo_container","type":"boolean"},"link":{"description":"link","type":"string"},"location_source_id":{"description":"location_source_id","type":"string"},"manual_privacy":{"description":"manual_privacy","type":"boolean"},"message":{"description":"message","type":"string"},"multi_share_end_card":{"description":"multi_share_end_card","type":"boolean"},"multi_share_optimized":{"description":"multi_share_optimized","type":"boolean"},"name":{"description":"name","type":"string"},"nectar_module":{"description":"nectar_module","type":"string"},"object_attachment":{"description":"object_attachment","type":"string"},"og_action_type_id":{"description":"og_action_type_id","type":"string"},"og_hide_object_attachment":{"description":"og_hide_object_attachment","type":"boolean"},"og_icon_id":{"description":"og_icon_id","type":"string"},"og_object_id":{"description":"og_object_id","type":"string"},"og_phrase":{"description":"og_phrase","type":"string"},"og_set_profile_badge":{"description":"og_set_profile_badge","type":"boolean"},"og_suggestion_mechanism":{"description":"og_suggestion_mechanism","type":"string"},"page_recommendation":{"description":"page_recommendation","type":"string"},"picture":{"description":"picture","type":"string"},"place":{"additionalProperties":true,"description":"place","type":"object"},"place_attachment_setting":{"description":"place_attachment_setting (enum: groupfeed_place_attachment_setting_enum_param)","type":"string"},"place_list":{"description":"place_list","type":"string"},"place_list_data":{"description":"place_list_data","type":"string"},"post_surfaces_blacklist":{"description":"post_surfaces_blacklist","items":{"type":"string"},"type":"array"},"posting_to_redspace":{"description":"posting_to_redspace (enum: groupfeed_posting_to_redspace_enum_param)","type":"string"},"privacy":{"description":"privacy","type":"string"},"prompt_id":{"description":"prompt_id","type":"string"},"prompt_tracking_string":{"description":"prompt_tracking_string","type":"string"},"properties":{"additionalProperties":true,"description":"properties","type":"object"},"proxied_app_id":{"description":"proxied_app_id","type":"string"},"publish_event_id":{"description":"publish_event_id","type":"integer"},"published":{"description":"published","type":"boolean"},"quote":{"description":"quote","type":"string"},"ref":{"description":"ref","items":{"type":"string"},"type":"array"},"referenceable_image_ids":{"description":"referenceable_image_ids","items":{"type":"string"},"type":"array"},"referral_id":{"description":"referral_id","type":"string"},"scheduled_publish_time":{"description":"scheduled_publish_time","type":"string"},"source":{"description":"source","type":"string"},"sponsor_id":{"description":"sponsor_id","type":"string"},"sponsor_relationship":{"description":"sponsor_relationship","type":"integer"},"suggested_place_id":{"additionalProperties":true,"description":"suggested_place_id","type":"object"},"tags":{"description":"tags","items":{"type":"integer"},"type":"array"},"target_surface":{"description":"target_surface (enum: groupfeed_target_surface_enum_param)","type":"string"},"targeting":{"additionalProperties":true,"description":"targeting","type":"object"},"text_format_metadata":{"description":"text_format_metadata","type":"string"},"text_format_preset_id":{"description":"text_format_preset_id","type":"string"},"text_only_place":{"description":"text_only_place","type":"string"},"thumbnail":{"description":"thumbnail","type":"string"},"time_since_original_post":{"description":"time_since_original_post","type":"integer"},"title":{"description":"title","type":"string"},"tracking_info":{"description":"tracking_info","type":"string"},"unpublished_content_type":{"description":"unpublished_content_type (enum: groupfeed_unpublished_content_type_enum_param)","type":"string"},"user_selected_tags":{"description":"user_selected_tags","type":"boolean"},"video_start_time_ms":{"description":"video_start_time_ms","type":"integer"},"viewer_coordinates":{"additionalProperties":true,"description":"viewer_coordinates","type":"object"},"width":{"description":"width","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Group_POST_feedHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Group_GET_files",
			"GET files for Group. Returns GroupFile",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Group ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Group_GET_filesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Group_GET_groups",
			"GET groups for Group. Returns Group",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Group_GET_groupsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Group_POST_groups",
			"POST groups for Group. Returns Group. Parameters: admin (int), description (string), group_icon_id (string), group_type (groupgroups_group_type_enum_param), join_setting (groupgroups_join_setting_enum_param), name (string) [required], parent_id (string), post_permissions (groupgroups_post_permissions_enum_param), post_requires_admin_approval (bool), privacy (string), ref (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"admin":{"description":"admin","type":"integer"},"description":{"description":"description","type":"string"},"group_icon_id":{"description":"group_icon_id","type":"string"},"group_type":{"description":"group_type (enum: groupgroups_group_type_enum_param)","type":"string"},"join_setting":{"description":"join_setting (enum: groupgroups_join_setting_enum_param)","type":"string"},"name":{"description":"name","type":"string"},"parent_id":{"description":"parent_id","type":"string"},"post_permissions":{"description":"post_permissions (enum: groupgroups_post_permissions_enum_param)","type":"string"},"post_requires_admin_approval":{"description":"post_requires_admin_approval","type":"boolean"},"privacy":{"description":"privacy","type":"string"},"ref":{"description":"ref","type":"string"}},"required":["name"],"type":"object"}`),
		),
		Group_POST_groupsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Group_GET_live_videos",
			"GET live_videos for Group. Returns LiveVideo. Parameters: broadcast_status (list<grouplive_videos_broadcast_status_enum_param>), source (grouplive_videos_source_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"broadcast_status":{"description":"broadcast_status","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Group ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"source":{"description":"source (enum: grouplive_videos_source_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Group_GET_live_videosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Group_POST_live_videos",
			"POST live_videos for Group. Returns LiveVideo. Parameters: content_tags (list<string>), description (string), enable_backup_ingest (bool), encoding_settings (string), event_params (Object), fisheye_video_cropped (bool), front_z_rotation (float), is_audio_only (bool), is_spherical (bool), original_fov (unsigned int), privacy (string), projection (grouplive_videos_projection_enum_param), published (bool), schedule_custom_profile_image (file), spatial_audio_format (grouplive_videos_spatial_audio_format_enum_param), status (grouplive_videos_status_enum_param), stereoscopic_mode (grouplive_videos_stereoscopic_mode_enum_param), stop_on_delete_stream (bool), stream_type (grouplive_videos_stream_type_enum_param), title (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"content_tags":{"description":"content_tags","items":{"type":"string"},"type":"array"},"description":{"description":"description","type":"string"},"enable_backup_ingest":{"description":"enable_backup_ingest","type":"boolean"},"encoding_settings":{"description":"encoding_settings","type":"string"},"event_params":{"additionalProperties":true,"description":"event_params","type":"object"},"fisheye_video_cropped":{"description":"fisheye_video_cropped","type":"boolean"},"front_z_rotation":{"description":"front_z_rotation","type":"number"},"id":{"description":"Group ID","type":"string"},"is_audio_only":{"description":"is_audio_only","type":"boolean"},"is_spherical":{"description":"is_spherical","type":"boolean"},"original_fov":{"description":"original_fov","type":"integer"},"privacy":{"description":"privacy","type":"string"},"projection":{"description":"projection (enum: grouplive_videos_projection_enum_param)","type":"string"},"published":{"description":"published","type":"boolean"},"schedule_custom_profile_image":{"description":"schedule_custom_profile_image","type":"string"},"spatial_audio_format":{"description":"spatial_audio_format (enum: grouplive_videos_spatial_audio_format_enum_param)","type":"string"},"status":{"description":"status (enum: grouplive_videos_status_enum_param)","type":"string"},"stereoscopic_mode":{"description":"stereoscopic_mode (enum: grouplive_videos_stereoscopic_mode_enum_param)","type":"string"},"stop_on_delete_stream":{"description":"stop_on_delete_stream","type":"boolean"},"stream_type":{"description":"stream_type (enum: grouplive_videos_stream_type_enum_param)","type":"string"},"title":{"description":"title","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Group_POST_live_videosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Group_DELETE_members",
			"DELETE members for Group. Returns Object. Parameters: email (string), member (int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"email":{"description":"email","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"member":{"description":"member","type":"integer"}},"type":"object"}`),
		),
		Group_DELETE_membersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Group_POST_members",
			"POST members for Group. Returns Group. Parameters: email (string), from (int), member (int), rate (unsigned int), source (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"email":{"description":"email","type":"string"},"from":{"description":"from","type":"integer"},"member":{"description":"member","type":"integer"},"rate":{"description":"rate","type":"integer"},"source":{"description":"source","type":"string"}},"type":"object"}`),
		),
		Group_POST_membersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Group_GET_opted_in_members",
			"GET opted_in_members for Group. Returns User",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Group_GET_opted_in_membersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Group_POST_photos",
			"POST photos for Group. Returns Photo. Parameters: aid (string), allow_spherical_photo (bool), alt_text_custom (string), android_key_hash (string), application_id (string), attempt (unsigned int), audience_exp (bool), backdated_time (datetime), backdated_time_granularity (groupphotos_backdated_time_granularity_enum_param), caption (string), composer_session_id (string), direct_share_status (unsigned int), feed_targeting (Object), filter_type (unsigned int), full_res_is_coming_later (bool), initial_view_heading_override_degrees (unsigned int), initial_view_pitch_override_degrees (unsigned int), initial_view_vertical_fov_override_degrees (unsigned int), ios_bundle_id (string), is_explicit_location (bool), is_explicit_place (bool), manual_privacy (bool), message (string), name (string), no_story (bool), offline_id (unsigned int), og_action_type_id (string), og_icon_id (string), og_object_id (string), og_phrase (string), og_set_profile_badge (bool), og_suggestion_mechanism (string), place (Object), privacy (string), profile_id (int), provenance_info (map), proxied_app_id (string), published (bool), qn (string), spherical_metadata (map), sponsor_id (string), sponsor_relationship (unsigned int), tags (list<Object>), target_id (int), targeting (Object), time_since_original_post (unsigned int), uid (int), unpublished_content_type (groupphotos_unpublished_content_type_enum_param), url (string), user_selected_tags (bool), vault_image_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"aid":{"description":"aid","type":"string"},"allow_spherical_photo":{"description":"allow_spherical_photo","type":"boolean"},"alt_text_custom":{"description":"alt_text_custom","type":"string"},"android_key_hash":{"description":"android_key_hash","type":"string"},"application_id":{"description":"application_id","type":"string"},"attempt":{"description":"attempt","type":"integer"},"audience_exp":{"description":"audience_exp","type":"boolean"},"backdated_time":{"description":"backdated_time","type":"string"},"backdated_time_granularity":{"description":"backdated_time_granularity (enum: groupphotos_backdated_time_granularity_enum_param)","type":"string"},"caption":{"description":"caption","type":"string"},"composer_session_id":{"description":"composer_session_id","type":"string"},"direct_share_status":{"description":"direct_share_status","type":"integer"},"feed_targeting":{"additionalProperties":true,"description":"feed_targeting","type":"object"},"filter_type":{"description":"filter_type","type":"integer"},"full_res_is_coming_later":{"description":"full_res_is_coming_later","type":"boolean"},"id":{"description":"Group ID","type":"string"},"initial_view_heading_override_degrees":{"description":"initial_view_heading_override_degrees","type":"integer"},"initial_view_pitch_override_degrees":{"description":"initial_view_pitch_override_degrees","type":"integer"},"initial_view_vertical_fov_override_degrees":{"description":"initial_view_vertical_fov_override_degrees","type":"integer"},"ios_bundle_id":{"description":"ios_bundle_id","type":"string"},"is_explicit_location":{"description":"is_explicit_location","type":"boolean"},"is_explicit_place":{"description":"is_explicit_place","type":"boolean"},"manual_privacy":{"description":"manual_privacy","type":"boolean"},"message":{"description":"message","type":"string"},"name":{"description":"name","type":"string"},"no_story":{"description":"no_story","type":"boolean"},"offline_id":{"description":"offline_id","type":"integer"},"og_action_type_id":{"description":"og_action_type_id","type":"string"},"og_icon_id":{"description":"og_icon_id","type":"string"},"og_object_id":{"description":"og_object_id","type":"string"},"og_phrase":{"description":"og_phrase","type":"string"},"og_set_profile_badge":{"description":"og_set_profile_badge","type":"boolean"},"og_suggestion_mechanism":{"description":"og_suggestion_mechanism","type":"string"},"place":{"additionalProperties":true,"description":"place","type":"object"},"privacy":{"description":"privacy","type":"string"},"profile_id":{"description":"profile_id","type":"integer"},"provenance_info":{"description":"provenance_info","type":"string"},"proxied_app_id":{"description":"proxied_app_id","type":"string"},"published":{"description":"published","type":"boolean"},"qn":{"description":"qn","type":"string"},"spherical_metadata":{"description":"spherical_metadata","type":"string"},"sponsor_id":{"description":"sponsor_id","type":"string"},"sponsor_relationship":{"description":"sponsor_relationship","type":"integer"},"tags":{"description":"tags","items":{"additionalProperties":true,"type":"object"},"type":"array"},"target_id":{"description":"target_id","type":"integer"},"targeting":{"additionalProperties":true,"description":"targeting","type":"object"},"time_since_original_post":{"description":"time_since_original_post","type":"integer"},"uid":{"description":"uid","type":"integer"},"unpublished_content_type":{"description":"unpublished_content_type (enum: groupphotos_unpublished_content_type_enum_param)","type":"string"},"url":{"description":"url","type":"string"},"user_selected_tags":{"description":"user_selected_tags","type":"boolean"},"vault_image_id":{"description":"vault_image_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Group_POST_photosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Group_GET_picture",
			"GET picture for Group. Returns ProfilePictureSource. Parameters: height (int), redirect (bool), type (grouppicture_type_enum_param), width (int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"height":{"description":"height","type":"integer"},"id":{"description":"Group ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"redirect":{"description":"redirect","type":"boolean"},"type":{"description":"type (enum: grouppicture_type_enum_param)","type":"string"},"width":{"description":"width","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Group_GET_pictureHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Group_GET_videos",
			"GET videos for Group. Returns AdVideo. Parameters: type (groupvideos_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Group ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: groupvideos_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Group_GET_videosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Group_POST_videos",
			"POST videos for Group. Returns AdVideo. Parameters: application_id (string), asked_fun_fact_prompt_id (unsigned int), audio_story_wave_animation_handle (string), composer_entry_picker (string), composer_entry_point (string), composer_entry_time (unsigned int), composer_session_events_log (string), composer_session_id (string), composer_source_surface (string), composer_type (string), container_type (groupvideos_container_type_enum_param), content_category (groupvideos_content_category_enum_param), creative_tools (string), description (string), embeddable (bool), end_offset (unsigned int), fbuploader_video_file_chunk (string), file_size (unsigned int), file_url (string), fisheye_video_cropped (bool), formatting (groupvideos_formatting_enum_param), fov (unsigned int), front_z_rotation (float), fun_fact_prompt_id (string), fun_fact_toastee_id (unsigned int), guide (list<list<unsigned int>>), guide_enabled (bool), initial_heading (unsigned int), initial_pitch (unsigned int), instant_game_entry_point_data (string), is_boost_intended (bool), is_explicit_share (bool), is_group_linking_post (bool), is_partnership_ad (bool), is_voice_clip (bool), location_source_id (string), manual_privacy (bool), og_action_type_id (string), og_icon_id (string), og_object_id (string), og_phrase (string), og_suggestion_mechanism (string), original_fov (unsigned int), original_projection_type (groupvideos_original_projection_type_enum_param), partnership_ad_ad_code (string), publish_event_id (unsigned int), published (bool), referenced_sticker_id (string), replace_video_id (string), scheduled_publish_time (unsigned int), slideshow_spec (map), source (string), source_instagram_media_id (string), spherical (bool), start_offset (unsigned int), swap_mode (groupvideos_swap_mode_enum_param), text_format_metadata (string), thumb (file), time_since_original_post (unsigned int), title (string), transcode_setting_properties (string), unpublished_content_type (groupvideos_unpublished_content_type_enum_param), upload_phase (groupvideos_upload_phase_enum_param), upload_session_id (string), upload_setting_properties (string), video_file_chunk (string), video_id_original (string), video_start_time_ms (unsigned int), waterfall_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"application_id":{"description":"application_id","type":"string"},"asked_fun_fact_prompt_id":{"description":"asked_fun_fact_prompt_id","type":"integer"},"audio_story_wave_animation_handle":{"description":"audio_story_wave_animation_handle","type":"string"},"composer_entry_picker":{"description":"composer_entry_picker","type":"string"},"composer_entry_point":{"description":"composer_entry_point","type":"string"},"composer_entry_time":{"description":"composer_entry_time","type":"integer"},"composer_session_events_log":{"description":"composer_session_events_log","type":"string"},"composer_session_id":{"description":"composer_session_id","type":"string"},"composer_source_surface":{"description":"composer_source_surface","type":"string"},"composer_type":{"description":"composer_type","type":"string"},"container_type":{"description":"container_type (enum: groupvideos_container_type_enum_param)","type":"string"},"content_category":{"description":"content_category (enum: groupvideos_content_category_enum_param)","type":"string"},"creative_tools":{"description":"creative_tools","type":"string"},"description":{"description":"description","type":"string"},"embeddable":{"description":"embeddable","type":"boolean"},"end_offset":{"description":"end_offset","type":"integer"},"fbuploader_video_file_chunk":{"description":"fbuploader_video_file_chunk","type":"string"},"file_size":{"description":"file_size","type":"integer"},"file_url":{"description":"file_url","type":"string"},"fisheye_video_cropped":{"description":"fisheye_video_cropped","type":"boolean"},"formatting":{"description":"formatting (enum: groupvideos_formatting_enum_param)","type":"string"},"fov":{"description":"fov","type":"integer"},"front_z_rotation":{"description":"front_z_rotation","type":"number"},"fun_fact_prompt_id":{"description":"fun_fact_prompt_id","type":"string"},"fun_fact_toastee_id":{"description":"fun_fact_toastee_id","type":"integer"},"guide":{"description":"guide","items":{"type":"string"},"type":"array"},"guide_enabled":{"description":"guide_enabled","type":"boolean"},"id":{"description":"Group ID","type":"string"},"initial_heading":{"description":"initial_heading","type":"integer"},"initial_pitch":{"description":"initial_pitch","type":"integer"},"instant_game_entry_point_data":{"description":"instant_game_entry_point_data","type":"string"},"is_boost_intended":{"description":"is_boost_intended","type":"boolean"},"is_explicit_share":{"description":"is_explicit_share","type":"boolean"},"is_group_linking_post":{"description":"is_group_linking_post","type":"boolean"},"is_partnership_ad":{"description":"is_partnership_ad","type":"boolean"},"is_voice_clip":{"description":"is_voice_clip","type":"boolean"},"location_source_id":{"description":"location_source_id","type":"string"},"manual_privacy":{"description":"manual_privacy","type":"boolean"},"og_action_type_id":{"description":"og_action_type_id","type":"string"},"og_icon_id":{"description":"og_icon_id","type":"string"},"og_object_id":{"description":"og_object_id","type":"string"},"og_phrase":{"description":"og_phrase","type":"string"},"og_suggestion_mechanism":{"description":"og_suggestion_mechanism","type":"string"},"original_fov":{"description":"original_fov","type":"integer"},"original_projection_type":{"description":"original_projection_type (enum: groupvideos_original_projection_type_enum_param)","type":"string"},"partnership_ad_ad_code":{"description":"partnership_ad_ad_code","type":"string"},"publish_event_id":{"description":"publish_event_id","type":"integer"},"published":{"description":"published","type":"boolean"},"referenced_sticker_id":{"description":"referenced_sticker_id","type":"string"},"replace_video_id":{"description":"replace_video_id","type":"string"},"scheduled_publish_time":{"description":"scheduled_publish_time","type":"integer"},"slideshow_spec":{"description":"slideshow_spec","type":"string"},"source":{"description":"source","type":"string"},"source_instagram_media_id":{"description":"source_instagram_media_id","type":"string"},"spherical":{"description":"spherical","type":"boolean"},"start_offset":{"description":"start_offset","type":"integer"},"swap_mode":{"description":"swap_mode (enum: groupvideos_swap_mode_enum_param)","type":"string"},"text_format_metadata":{"description":"text_format_metadata","type":"string"},"thumb":{"description":"thumb","type":"string"},"time_since_original_post":{"description":"time_since_original_post","type":"integer"},"title":{"description":"title","type":"string"},"transcode_setting_properties":{"description":"transcode_setting_properties","type":"string"},"unpublished_content_type":{"description":"unpublished_content_type (enum: groupvideos_unpublished_content_type_enum_param)","type":"string"},"upload_phase":{"description":"upload_phase (enum: groupvideos_upload_phase_enum_param)","type":"string"},"upload_session_id":{"description":"upload_session_id","type":"string"},"upload_setting_properties":{"description":"upload_setting_properties","type":"string"},"video_file_chunk":{"description":"video_file_chunk","type":"string"},"video_id_original":{"description":"video_id_original","type":"string"},"video_start_time_ms":{"description":"video_start_time_ms","type":"integer"},"waterfall_id":{"description":"waterfall_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Group_POST_videosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Group_GET_",
			"GET  for Group. Returns Group. Parameters: icon_size (group_icon_size)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"icon_size":{"description":"icon_size (enum: group_icon_size)","type":"string"},"id":{"description":"Group ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Group_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Group_POST_",
			"POST  for Group. Returns Group. Parameters: cover (string), cover_url (string), description (string), focus_x (float), focus_y (float), group_icon (string), is_official_group (bool), join_setting (group_join_setting), name (string), no_feed_story (bool), offset_y (int), post_permissions (group_post_permissions), post_requires_admin_approval (bool), privacy (string), purpose (group_purpose), update_view_time (bool)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"cover":{"description":"cover","type":"string"},"cover_url":{"description":"cover_url","type":"string"},"description":{"description":"description","type":"string"},"focus_x":{"description":"focus_x","type":"number"},"focus_y":{"description":"focus_y","type":"number"},"group_icon":{"description":"group_icon","type":"string"},"id":{"description":"Group ID","type":"string"},"is_official_group":{"description":"is_official_group","type":"boolean"},"join_setting":{"description":"join_setting (enum: group_join_setting)","type":"string"},"name":{"description":"name","type":"string"},"no_feed_story":{"description":"no_feed_story","type":"boolean"},"offset_y":{"description":"offset_y","type":"integer"},"post_permissions":{"description":"post_permissions (enum: group_post_permissions)","type":"string"},"post_requires_admin_approval":{"description":"post_requires_admin_approval","type":"boolean"},"privacy":{"description":"privacy","type":"string"},"purpose":{"description":"purpose (enum: group_purpose)","type":"string"},"update_view_time":{"description":"update_view_time","type":"boolean"}},"required":["id"],"type":"object"}`),
		),
		Group_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"HighDemandPeriod_DELETE_",
			"DELETE  for HighDemandPeriod. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"HighDemandPeriod ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		HighDemandPeriod_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"HighDemandPeriod_GET_",
			"GET  for HighDemandPeriod. Returns HighDemandPeriod",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"HighDemandPeriod ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		HighDemandPeriod_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"HighDemandPeriod_POST_",
			"POST  for HighDemandPeriod. Returns HighDemandPeriod. Parameters: budget_value (unsigned int), budget_value_type (highdemandperiod_budget_value_type), time_end (unsigned int), time_start (unsigned int)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"budget_value":{"description":"budget_value","type":"integer"},"budget_value_type":{"description":"budget_value_type (enum: highdemandperiod_budget_value_type)","type":"string"},"id":{"description":"HighDemandPeriod ID","type":"string"},"time_end":{"description":"time_end","type":"integer"},"time_start":{"description":"time_start","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		HighDemandPeriod_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"HomeListing_GET_channels_to_integrity_status",
			"GET channels_to_integrity_status for HomeListing. Returns CatalogItemChannelsToIntegrityStatus",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"HomeListing ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		HomeListing_GET_channels_to_integrity_statusHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"HomeListing_GET_override_details",
			"GET override_details for HomeListing. Returns OverrideDetails. Parameters: keys (list<string>), type (homelistingoverride_details_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"HomeListing ID","type":"string"},"keys":{"description":"keys","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: homelistingoverride_details_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		HomeListing_GET_override_detailsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"HomeListing_GET_videos_metadata",
			"GET videos_metadata for HomeListing. Returns DynamicVideoMetadata",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		HomeListing_GET_videos_metadataHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"HomeListing_DELETE_",
			"DELETE  for HomeListing. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"HomeListing ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		HomeListing_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"HomeListing_GET_",
			"GET  for HomeListing. Returns HomeListing",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"HomeListing ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		HomeListing_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"HomeListing_POST_",
			"POST  for HomeListing. Returns HomeListing. Parameters: address (Object), availability (string), currency (string), description (string), images (list<Object>), listing_type (string), name (string), num_baths (float), num_beds (float), num_units (float), price (float), property_type (string), url (string), year_built (unsigned int)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"address":{"additionalProperties":true,"description":"address","type":"object"},"availability":{"description":"availability","type":"string"},"currency":{"description":"currency","type":"string"},"description":{"description":"description","type":"string"},"id":{"description":"HomeListing ID","type":"string"},"images":{"description":"images","items":{"additionalProperties":true,"type":"object"},"type":"array"},"listing_type":{"description":"listing_type","type":"string"},"name":{"description":"name","type":"string"},"num_baths":{"description":"num_baths","type":"number"},"num_beds":{"description":"num_beds","type":"number"},"num_units":{"description":"num_units","type":"number"},"price":{"description":"price","type":"number"},"property_type":{"description":"property_type","type":"string"},"url":{"description":"url","type":"string"},"year_built":{"description":"year_built","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		HomeListing_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Hotel_GET_channels_to_integrity_status",
			"GET channels_to_integrity_status for Hotel. Returns CatalogItemChannelsToIntegrityStatus",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Hotel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Hotel_GET_channels_to_integrity_statusHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Hotel_GET_hotel_rooms",
			"GET hotel_rooms for Hotel. Returns HotelRoom",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Hotel_GET_hotel_roomsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Hotel_GET_override_details",
			"GET override_details for Hotel. Returns OverrideDetails. Parameters: keys (list<string>), type (hoteloverride_details_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Hotel ID","type":"string"},"keys":{"description":"keys","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: hoteloverride_details_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Hotel_GET_override_detailsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Hotel_GET_videos_metadata",
			"GET videos_metadata for Hotel. Returns DynamicVideoMetadata",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Hotel_GET_videos_metadataHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Hotel_DELETE_",
			"DELETE  for Hotel. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Hotel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Hotel_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Hotel_GET_",
			"GET  for Hotel. Returns Hotel",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Hotel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Hotel_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Hotel_POST_",
			"POST  for Hotel. Returns Hotel. Parameters: address (Object), applinks (Object), base_price (unsigned int), brand (string), currency (string), description (string), guest_ratings (list<Object>), images (list<Object>), name (string), phone (string), star_rating (float), url (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"address":{"additionalProperties":true,"description":"address","type":"object"},"applinks":{"additionalProperties":true,"description":"applinks","type":"object"},"base_price":{"description":"base_price","type":"integer"},"brand":{"description":"brand","type":"string"},"currency":{"description":"currency","type":"string"},"description":{"description":"description","type":"string"},"guest_ratings":{"description":"guest_ratings","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"Hotel ID","type":"string"},"images":{"description":"images","items":{"additionalProperties":true,"type":"object"},"type":"array"},"name":{"description":"name","type":"string"},"phone":{"description":"phone","type":"string"},"star_rating":{"description":"star_rating","type":"number"},"url":{"description":"url","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Hotel_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"HotelRoom_GET_pricing_variables",
			"GET pricing_variables for HotelRoom. Returns DynamicPriceConfigByDate",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"HotelRoom ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		HotelRoom_GET_pricing_variablesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"HotelRoom_GET_",
			"GET  for HotelRoom. Returns HotelRoom",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"HotelRoom ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		HotelRoom_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Hours_GET_",
			"GET  for Hours. Returns Hours",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Hours ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Hours_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGAccessTokenForIGOnlyAPI_GET_",
			"GET  for IGAccessTokenForIGOnlyAPI. Returns AccessToken. Parameters: access_token (string) [required], client_secret (string) [required], grant_type (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"access_token":{"description":"access_token","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"client_secret":{"description":"client_secret","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"grant_type":{"description":"grant_type","type":"string"},"id":{"description":"IGAccessTokenForIGOnlyAPI ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","access_token","client_secret","grant_type"],"type":"object"}`),
		),
		IGAccessTokenForIGOnlyAPI_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGBCAdsPermission_GET_",
			"GET  for IGBCAdsPermission. Returns IGBCAdsPermission",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGBCAdsPermission ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGBCAdsPermission_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGBoostMediaAd_GET_",
			"GET  for IGBoostMediaAd. Returns IGBoostMediaAd",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGBoostMediaAd ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGBoostMediaAd_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGComment_GET_replies",
			"GET replies for IGComment. Returns IGComment",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGComment ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGComment_GET_repliesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGComment_POST_replies",
			"POST replies for IGComment. Returns IGComment. Parameters: message (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"IGComment ID","type":"string"},"message":{"description":"message","type":"string"}},"required":["id"],"type":"object"}`),
		),
		IGComment_POST_repliesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGComment_DELETE_",
			"DELETE  for IGComment. Returns Object. Parameters: ad_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"ad_id":{"description":"ad_id","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGComment ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGComment_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGComment_GET_",
			"GET  for IGComment. Returns IGComment",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGComment ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGComment_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGComment_POST_",
			"POST  for IGComment. Returns IGComment. Parameters: ad_id (string), hide (bool) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"ad_id":{"description":"ad_id","type":"string"},"hide":{"description":"hide","type":"boolean"},"id":{"description":"IGComment ID","type":"string"}},"required":["id","hide"],"type":"object"}`),
		),
		IGComment_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGMedia_GET_boost_ads_list",
			"GET boost_ads_list for IGMedia. Returns IGBoostMediaAd",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGMedia ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGMedia_GET_boost_ads_listHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGMedia_GET_branded_content_partner_promote",
			"GET branded_content_partner_promote for IGMedia. Returns BrandedContentShadowIGUserID",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGMedia ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGMedia_GET_branded_content_partner_promoteHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGMedia_POST_branded_content_partner_promote",
			"POST branded_content_partner_promote for IGMedia. Returns BrandedContentShadowIGUserID. Parameters: permission (bool) [required], sponsor_id (unsigned int) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"IGMedia ID","type":"string"},"permission":{"description":"permission","type":"boolean"},"sponsor_id":{"description":"sponsor_id","type":"integer"}},"required":["id","permission","sponsor_id"],"type":"object"}`),
		),
		IGMedia_POST_branded_content_partner_promoteHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGMedia_GET_children",
			"GET children for IGMedia. Returns IGMedia",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGMedia ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGMedia_GET_childrenHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGMedia_GET_collaborators",
			"GET collaborators for IGMedia. Returns ShadowIGMediaCollaborators",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGMedia ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGMedia_GET_collaboratorsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGMedia_GET_comments",
			"GET comments for IGMedia. Returns IGComment",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		IGMedia_GET_commentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGMedia_POST_comments",
			"POST comments for IGMedia. Returns IGComment. Parameters: ad_id (string), message (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"ad_id":{"description":"ad_id","type":"string"},"message":{"description":"message","type":"string"}},"type":"object"}`),
		),
		IGMedia_POST_commentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGMedia_GET_insights",
			"GET insights for IGMedia. Returns InstagramInsightsResult. Parameters: breakdown (list<shadowigmediainsights_breakdown_enum_param>), metric (list<shadowigmediainsights_metric_enum_param>) [required], period (list<shadowigmediainsights_period_enum_param>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"breakdown":{"description":"breakdown","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGMedia ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"metric":{"description":"metric","items":{"type":"string"},"type":"array"},"period":{"description":"period","items":{"type":"string"},"type":"array"}},"required":["id","metric"],"type":"object"}`),
		),
		IGMedia_GET_insightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGMedia_DELETE_partnership_ad_code",
			"DELETE partnership_ad_code for IGMedia. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGMedia ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGMedia_DELETE_partnership_ad_codeHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGMedia_POST_partnership_ad_code",
			"POST partnership_ad_code for IGMedia. Returns Object",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"IGMedia ID","type":"string"}},"required":["id"],"type":"object"}`),
		),
		IGMedia_POST_partnership_ad_codeHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGMedia_GET_product_tags",
			"GET product_tags for IGMedia. Returns ShadowIGMediaProductTags",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGMedia ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGMedia_GET_product_tagsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGMedia_POST_product_tags",
			"POST product_tags for IGMedia. Returns ShadowIGMediaProductTags. Parameters: child_index (unsigned int), updated_tags (list<map>) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"child_index":{"description":"child_index","type":"integer"},"id":{"description":"IGMedia ID","type":"string"},"updated_tags":{"description":"updated_tags","items":{"additionalProperties":true,"type":"object"},"type":"array"}},"required":["id","updated_tags"],"type":"object"}`),
		),
		IGMedia_POST_product_tagsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGMedia_GET_",
			"GET  for IGMedia. Returns IGMedia. Parameters: ad_account_id (unsigned int), boostable_media_callsite (shadowigmedia_boostable_media_callsite), business_id (string), primary_fb_page_id (string), primary_ig_user_id (string), secondary_fb_page_id (string), secondary_ig_user_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"ad_account_id":{"description":"ad_account_id","type":"integer"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"boostable_media_callsite":{"description":"boostable_media_callsite (enum: shadowigmedia_boostable_media_callsite)","type":"string"},"business_id":{"description":"business_id","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGMedia ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"primary_fb_page_id":{"description":"primary_fb_page_id","type":"string"},"primary_ig_user_id":{"description":"primary_ig_user_id","type":"string"},"secondary_fb_page_id":{"description":"secondary_fb_page_id","type":"string"},"secondary_ig_user_id":{"description":"secondary_ig_user_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		IGMedia_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGMedia_POST_",
			"POST  for IGMedia. Returns IGMedia. Parameters: comment_enabled (bool) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"comment_enabled":{"description":"comment_enabled","type":"boolean"},"id":{"description":"IGMedia ID","type":"string"}},"required":["id","comment_enabled"],"type":"object"}`),
		),
		IGMedia_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGMediaBoostEligibilityInfo_GET_",
			"GET  for IGMediaBoostEligibilityInfo. Returns IGMediaBoostEligibilityInfo",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGMediaBoostEligibilityInfo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGMediaBoostEligibilityInfo_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGMediaForIGOnlyAPI_GET_children",
			"GET children for IGMediaForIGOnlyAPI. Returns Media",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGMediaForIGOnlyAPI ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGMediaForIGOnlyAPI_GET_childrenHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGMediaForIGOnlyAPI_GET_comments",
			"GET comments for IGMediaForIGOnlyAPI. Returns Comment",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		IGMediaForIGOnlyAPI_GET_commentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGMediaForIGOnlyAPI_POST_comments",
			"POST comments for IGMediaForIGOnlyAPI. Returns IGGraphComment. Parameters: message (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"message":{"description":"message","type":"string"}},"type":"object"}`),
		),
		IGMediaForIGOnlyAPI_POST_commentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGMediaForIGOnlyAPI_GET_insights",
			"GET insights for IGMediaForIGOnlyAPI. Returns InsightsResult. Parameters: breakdown (list<mediainsights_breakdown_enum_param>), metric (list<mediainsights_metric_enum_param>) [required], period (list<mediainsights_period_enum_param>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"breakdown":{"description":"breakdown","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGMediaForIGOnlyAPI ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"metric":{"description":"metric","items":{"type":"string"},"type":"array"},"period":{"description":"period","items":{"type":"string"},"type":"array"}},"required":["id","metric"],"type":"object"}`),
		),
		IGMediaForIGOnlyAPI_GET_insightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGMediaForIGOnlyAPI_GET_",
			"GET  for IGMediaForIGOnlyAPI. Returns Media",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGMediaForIGOnlyAPI ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGMediaForIGOnlyAPI_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGMediaForIGOnlyAPI_POST_",
			"POST  for IGMediaForIGOnlyAPI. Returns IGGraphMedia. Parameters: comment_enabled (bool) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"comment_enabled":{"description":"comment_enabled","type":"boolean"},"id":{"description":"IGMediaForIGOnlyAPI ID","type":"string"}},"required":["id","comment_enabled"],"type":"object"}`),
		),
		IGMediaForIGOnlyAPI_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGRefreshAccessTokenForIGOnlyAPI_GET_",
			"GET  for IGRefreshAccessTokenForIGOnlyAPI. Returns RefreshAccessToken. Parameters: access_token (string) [required], grant_type (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"access_token":{"description":"access_token","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"grant_type":{"description":"grant_type","type":"string"},"id":{"description":"IGRefreshAccessTokenForIGOnlyAPI ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","access_token","grant_type"],"type":"object"}`),
		),
		IGRefreshAccessTokenForIGOnlyAPI_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUpcomingEvent_GET_",
			"GET  for IGUpcomingEvent. Returns IGUpcomingEvent",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUpcomingEvent ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGUpcomingEvent_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUpcomingEvent_POST_",
			"POST  for IGUpcomingEvent. Returns IGUpcomingEvent. Parameters: end_time (datetime), notification_subtypes (list<igupcomingevent_notification_subtypes>), notification_target_time (igupcomingevent_notification_target_time), start_time (datetime) [required], title (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"end_time":{"description":"end_time","type":"string"},"id":{"description":"IGUpcomingEvent ID","type":"string"},"notification_subtypes":{"description":"notification_subtypes","items":{"type":"string"},"type":"array"},"notification_target_time":{"description":"notification_target_time (enum: igupcomingevent_notification_target_time)","type":"string"},"start_time":{"description":"start_time","type":"string"},"title":{"description":"title","type":"string"}},"required":["id","start_time","title"],"type":"object"}`),
		),
		IGUpcomingEvent_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_GET_agencies",
			"GET agencies for IGUser. Returns Business",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGUser_GET_agenciesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_GET_authorized_adaccounts",
			"GET authorized_adaccounts for IGUser. Returns AdAccount. Parameters: business (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business":{"description":"business","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","business"],"type":"object"}`),
		),
		IGUser_GET_authorized_adaccountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_POST_authorized_adaccounts",
			"POST authorized_adaccounts for IGUser. Returns IGUser. Parameters: account_id (string) [required], business (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"account_id":{"description":"account_id","type":"string"},"business":{"description":"business","type":"string"},"id":{"description":"IGUser ID","type":"string"}},"required":["id","account_id","business"],"type":"object"}`),
		),
		IGUser_POST_authorized_adaccountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_GET_available_catalogs",
			"GET available_catalogs for IGUser. Returns UserAvailableCatalogs",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGUser_GET_available_catalogsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_GET_branded_content_ad_permissions",
			"GET branded_content_ad_permissions for IGUser. Returns IGBCAdsPermission",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGUser_GET_branded_content_ad_permissionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_POST_branded_content_ad_permissions",
			"POST branded_content_ad_permissions for IGUser. Returns IGBCAdsPermission. Parameters: creator_instagram_account (string), creator_instagram_username (string), revoke (bool)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"creator_instagram_account":{"description":"creator_instagram_account","type":"string"},"creator_instagram_username":{"description":"creator_instagram_username","type":"string"},"id":{"description":"IGUser ID","type":"string"},"revoke":{"description":"revoke","type":"boolean"}},"required":["id"],"type":"object"}`),
		),
		IGUser_POST_branded_content_ad_permissionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_GET_branded_content_advertisable_medias",
			"GET branded_content_advertisable_medias for IGUser. Returns BrandedContentShadowIGMediaID. Parameters: ad_code (string), creator_username (string), only_fetch_allowlisted (bool), only_fetch_recommended_content (bool), permalinks (list<string>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"ad_code":{"description":"ad_code","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"creator_username":{"description":"creator_username","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"only_fetch_allowlisted":{"description":"only_fetch_allowlisted","type":"boolean"},"only_fetch_recommended_content":{"description":"only_fetch_recommended_content","type":"boolean"},"permalinks":{"description":"permalinks","items":{"type":"string"},"type":"array"}},"type":"object"}`),
		),
		IGUser_GET_branded_content_advertisable_mediasHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_DELETE_branded_content_tag_approval",
			"DELETE branded_content_tag_approval for IGUser. Returns Object. Parameters: user_ids (list<unsigned int>) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"user_ids":{"description":"user_ids","items":{"type":"integer"},"type":"array"}},"required":["id","user_ids"],"type":"object"}`),
		),
		IGUser_DELETE_branded_content_tag_approvalHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_GET_branded_content_tag_approval",
			"GET branded_content_tag_approval for IGUser. Returns BrandedContentShadowIGUserID. Parameters: user_ids (list<unsigned int>) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"user_ids":{"description":"user_ids","items":{"type":"integer"},"type":"array"}},"required":["id","user_ids"],"type":"object"}`),
		),
		IGUser_GET_branded_content_tag_approvalHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_POST_branded_content_tag_approval",
			"POST branded_content_tag_approval for IGUser. Returns BrandedContentShadowIGUserID. Parameters: user_ids (list<unsigned int>) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"IGUser ID","type":"string"},"user_ids":{"description":"user_ids","items":{"type":"integer"},"type":"array"}},"required":["id","user_ids"],"type":"object"}`),
		),
		IGUser_POST_branded_content_tag_approvalHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_GET_catalog_product_search",
			"GET catalog_product_search for IGUser. Returns ShadowIGUserCatalogProductSearch. Parameters: catalog_id (string) [required], q (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"catalog_id":{"description":"catalog_id","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"q":{"description":"q","type":"string"}},"required":["catalog_id"],"type":"object"}`),
		),
		IGUser_GET_catalog_product_searchHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_GET_connected_threads_user",
			"GET connected_threads_user for IGUser. Returns ThreadsUser",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGUser_GET_connected_threads_userHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_GET_content_publishing_limit",
			"GET content_publishing_limit for IGUser. Returns ContentPublishingLimitResponse. Parameters: since (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"since":{"description":"since","type":"string"}},"required":["id"],"type":"object"}`),
		),
		IGUser_GET_content_publishing_limitHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_GET_dataset",
			"GET dataset for IGUser. Returns Dataset",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGUser_GET_datasetHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_POST_dataset",
			"POST dataset for IGUser. Returns Dataset. Parameters: dataset_name (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"dataset_name":{"description":"dataset_name","type":"string"},"id":{"description":"IGUser ID","type":"string"}},"required":["id"],"type":"object"}`),
		),
		IGUser_POST_datasetHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_GET_insights",
			"GET insights for IGUser. Returns InstagramInsightsResult. Parameters: breakdown (list<shadowiguserinsights_breakdown_enum_param>), metric (list<shadowiguserinsights_metric_enum_param>) [required], metric_type (shadowiguserinsights_metric_type_enum_param), period (list<shadowiguserinsights_period_enum_param>) [required], since (datetime), timeframe (shadowiguserinsights_timeframe_enum_param), until (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"breakdown":{"description":"breakdown","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"metric":{"description":"metric","items":{"type":"string"},"type":"array"},"metric_type":{"description":"metric_type (enum: shadowiguserinsights_metric_type_enum_param)","type":"string"},"period":{"description":"period","items":{"type":"string"},"type":"array"},"since":{"description":"since","type":"string"},"timeframe":{"description":"timeframe (enum: shadowiguserinsights_timeframe_enum_param)","type":"string"},"until":{"description":"until","type":"string"}},"required":["id","metric","period"],"type":"object"}`),
		),
		IGUser_GET_insightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_GET_instagram_backed_threads_user",
			"GET instagram_backed_threads_user for IGUser. Returns ThreadsUser",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGUser_GET_instagram_backed_threads_userHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_GET_live_media",
			"GET live_media for IGUser. Returns IGMedia. Parameters: since (datetime), until (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"since":{"description":"since","type":"string"},"until":{"description":"until","type":"string"}},"type":"object"}`),
		),
		IGUser_GET_live_mediaHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_GET_media",
			"GET media for IGUser. Returns IGMedia. Parameters: since (datetime), until (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"since":{"description":"since","type":"string"},"until":{"description":"until","type":"string"}},"type":"object"}`),
		),
		IGUser_GET_mediaHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_POST_media",
			"POST media for IGUser. Returns IGMedia. Parameters: alt_text (string), audio_name (string), caption (string), children (list<string>), collaborators (list<string>), cover_url (string), image_url (string), is_carousel_item (bool), location_id (string), media_type (string), product_tags (list<map>), share_to_feed (bool), thumb_offset (string), upload_type (string), user_tags (list<map>), video_url (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"alt_text":{"description":"alt_text","type":"string"},"audio_name":{"description":"audio_name","type":"string"},"caption":{"description":"caption","type":"string"},"children":{"description":"children","items":{"type":"string"},"type":"array"},"collaborators":{"description":"collaborators","items":{"type":"string"},"type":"array"},"cover_url":{"description":"cover_url","type":"string"},"image_url":{"description":"image_url","type":"string"},"is_carousel_item":{"description":"is_carousel_item","type":"boolean"},"location_id":{"description":"location_id","type":"string"},"media_type":{"description":"media_type","type":"string"},"product_tags":{"description":"product_tags","items":{"additionalProperties":true,"type":"object"},"type":"array"},"share_to_feed":{"description":"share_to_feed","type":"boolean"},"thumb_offset":{"description":"thumb_offset","type":"string"},"upload_type":{"description":"upload_type","type":"string"},"user_tags":{"description":"user_tags","items":{"additionalProperties":true,"type":"object"},"type":"array"},"video_url":{"description":"video_url","type":"string"}},"type":"object"}`),
		),
		IGUser_POST_mediaHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_POST_media_publish",
			"POST media_publish for IGUser. Returns IGMedia. Parameters: creation_id (unsigned int) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"creation_id":{"description":"creation_id","type":"integer"}},"required":["creation_id"],"type":"object"}`),
		),
		IGUser_POST_media_publishHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_POST_mentions",
			"POST mentions for IGUser. Returns Object. Parameters: comment_id (string), media_id (string) [required], message (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"comment_id":{"description":"comment_id","type":"string"},"media_id":{"description":"media_id","type":"string"},"message":{"description":"message","type":"string"}},"required":["media_id","message"],"type":"object"}`),
		),
		IGUser_POST_mentionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_GET_notification_message_tokens",
			"GET notification_message_tokens for IGUser. Returns UserPageOneTimeOptInTokenSettings",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		IGUser_GET_notification_message_tokensHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_GET_product_appeal",
			"GET product_appeal for IGUser. Returns IGShoppingProductAppeal. Parameters: product_id (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"product_id":{"description":"product_id","type":"string"}},"required":["id","product_id"],"type":"object"}`),
		),
		IGUser_GET_product_appealHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_POST_product_appeal",
			"POST product_appeal for IGUser. Returns IGShoppingProductAppeal. Parameters: appeal_reason (string) [required], product_id (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"appeal_reason":{"description":"appeal_reason","type":"string"},"id":{"description":"IGUser ID","type":"string"},"product_id":{"description":"product_id","type":"string"}},"required":["id","appeal_reason","product_id"],"type":"object"}`),
		),
		IGUser_POST_product_appealHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_GET_recently_searched_hashtags",
			"GET recently_searched_hashtags for IGUser. Returns ShadowIGHashtag",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		IGUser_GET_recently_searched_hashtagsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_GET_stories",
			"GET stories for IGUser. Returns IGMedia",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGUser_GET_storiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_GET_tags",
			"GET tags for IGUser. Returns IGMedia",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGUser_GET_tagsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_GET_upcoming_events",
			"GET upcoming_events for IGUser. Returns IGUpcomingEvent",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGUser_GET_upcoming_eventsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_POST_upcoming_events",
			"POST upcoming_events for IGUser. Returns Object. Parameters: end_time (datetime), notification_subtypes (list<shadowiguserupcoming_events_notification_subtypes_enum_param>), start_time (datetime) [required], title (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"end_time":{"description":"end_time","type":"string"},"id":{"description":"IGUser ID","type":"string"},"notification_subtypes":{"description":"notification_subtypes","items":{"type":"string"},"type":"array"},"start_time":{"description":"start_time","type":"string"},"title":{"description":"title","type":"string"}},"required":["id","start_time","title"],"type":"object"}`),
		),
		IGUser_POST_upcoming_eventsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_GET_welcome_message_flows",
			"GET welcome_message_flows for IGUser. Returns ShadowIGUserCTXPartnerAppWelcomeMessageFlow. Parameters: app_id (string), flow_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"app_id":{"description":"app_id","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"flow_id":{"description":"flow_id","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		IGUser_GET_welcome_message_flowsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUser_GET_",
			"GET  for IGUser. Returns IGUser. Parameters: adgroup_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"adgroup_id":{"description":"adgroup_id","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGUser_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserExportForCAM_GET_branded_content_media",
			"GET branded_content_media for IGUserExportForCAM. Returns IGMediaExportForCAM",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		IGUserExportForCAM_GET_branded_content_mediaHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserExportForCAM_GET_insights",
			"GET insights for IGUserExportForCAM. Returns IGUserExportForCAMInsightsResult. Parameters: breakdown (iguserexportforcaminsights_breakdown_enum_param), metrics (list<iguserexportforcaminsights_metrics_enum_param>), period (iguserexportforcaminsights_period_enum_param), time_range (iguserexportforcaminsights_time_range_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"breakdown":{"description":"breakdown (enum: iguserexportforcaminsights_breakdown_enum_param)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUserExportForCAM ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"metrics":{"description":"metrics","items":{"type":"string"},"type":"array"},"period":{"description":"period (enum: iguserexportforcaminsights_period_enum_param)","type":"string"},"time_range":{"description":"time_range (enum: iguserexportforcaminsights_time_range_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		IGUserExportForCAM_GET_insightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserExportForCAM_GET_recent_media",
			"GET recent_media for IGUserExportForCAM. Returns IGMediaExportForCAM",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		IGUserExportForCAM_GET_recent_mediaHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserExportForCAM_GET_",
			"GET  for IGUserExportForCAM. Returns IGUserExportForCAM",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUserExportForCAM ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGUserExportForCAM_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserForIGOnlyAPI_GET_business_messaging_feature_status",
			"GET business_messaging_feature_status for IGUserForIGOnlyAPI. Returns BusinessMessagingFeatureStatus. Parameters: feature (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"feature":{"description":"feature","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["feature"],"type":"object"}`),
		),
		IGUserForIGOnlyAPI_GET_business_messaging_feature_statusHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserForIGOnlyAPI_GET_content_publishing_limit",
			"GET content_publishing_limit for IGUserForIGOnlyAPI. Returns ContentPublishingLimitResponse. Parameters: since (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUserForIGOnlyAPI ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"since":{"description":"since","type":"string"}},"required":["id"],"type":"object"}`),
		),
		IGUserForIGOnlyAPI_GET_content_publishing_limitHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserForIGOnlyAPI_GET_conversations",
			"GET conversations for IGUserForIGOnlyAPI. Returns UnifiedThread. Parameters: folder (string), platform (userconversations_platform_enum_param), tags (list<string>), user_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"folder":{"description":"folder","type":"string"},"id":{"description":"IGUserForIGOnlyAPI ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"platform":{"description":"platform (enum: userconversations_platform_enum_param)","type":"string"},"tags":{"description":"tags","items":{"type":"string"},"type":"array"},"user_id":{"description":"user_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		IGUserForIGOnlyAPI_GET_conversationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserForIGOnlyAPI_GET_insights",
			"GET insights for IGUserForIGOnlyAPI. Returns InsightsResult. Parameters: breakdown (list<userinsights_breakdown_enum_param>), metric (list<userinsights_metric_enum_param>) [required], metric_type (userinsights_metric_type_enum_param), period (list<userinsights_period_enum_param>) [required], since (datetime), timeframe (userinsights_timeframe_enum_param), until (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"breakdown":{"description":"breakdown","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUserForIGOnlyAPI ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"metric":{"description":"metric","items":{"type":"string"},"type":"array"},"metric_type":{"description":"metric_type (enum: userinsights_metric_type_enum_param)","type":"string"},"period":{"description":"period","items":{"type":"string"},"type":"array"},"since":{"description":"since","type":"string"},"timeframe":{"description":"timeframe (enum: userinsights_timeframe_enum_param)","type":"string"},"until":{"description":"until","type":"string"}},"required":["id","metric","period"],"type":"object"}`),
		),
		IGUserForIGOnlyAPI_GET_insightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserForIGOnlyAPI_GET_live_media",
			"GET live_media for IGUserForIGOnlyAPI. Returns Media",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		IGUserForIGOnlyAPI_GET_live_mediaHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserForIGOnlyAPI_GET_media",
			"GET media for IGUserForIGOnlyAPI. Returns Media. Parameters: since (datetime), until (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"since":{"description":"since","type":"string"},"until":{"description":"until","type":"string"}},"type":"object"}`),
		),
		IGUserForIGOnlyAPI_GET_mediaHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserForIGOnlyAPI_POST_media",
			"POST media for IGUserForIGOnlyAPI. Returns IGGraphMedia. Parameters: alt_text (string), audio_name (string), caption (string), children (list<string>), collaborators (list<string>), cover_url (string), image_url (string), is_carousel_item (bool), location_id (string), media_type (string), product_tags (list<map>), share_to_feed (bool), thumb_offset (string), upload_type (string), user_tags (list<map>), video_url (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"alt_text":{"description":"alt_text","type":"string"},"audio_name":{"description":"audio_name","type":"string"},"caption":{"description":"caption","type":"string"},"children":{"description":"children","items":{"type":"string"},"type":"array"},"collaborators":{"description":"collaborators","items":{"type":"string"},"type":"array"},"cover_url":{"description":"cover_url","type":"string"},"image_url":{"description":"image_url","type":"string"},"is_carousel_item":{"description":"is_carousel_item","type":"boolean"},"location_id":{"description":"location_id","type":"string"},"media_type":{"description":"media_type","type":"string"},"product_tags":{"description":"product_tags","items":{"additionalProperties":true,"type":"object"},"type":"array"},"share_to_feed":{"description":"share_to_feed","type":"boolean"},"thumb_offset":{"description":"thumb_offset","type":"string"},"upload_type":{"description":"upload_type","type":"string"},"user_tags":{"description":"user_tags","items":{"additionalProperties":true,"type":"object"},"type":"array"},"video_url":{"description":"video_url","type":"string"}},"type":"object"}`),
		),
		IGUserForIGOnlyAPI_POST_mediaHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserForIGOnlyAPI_POST_mediapublish",
			"POST mediapublish for IGUserForIGOnlyAPI. Returns Object. Parameters: creation_id (unsigned int) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"creation_id":{"description":"creation_id","type":"integer"}},"required":["creation_id"],"type":"object"}`),
		),
		IGUserForIGOnlyAPI_POST_mediapublishHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserForIGOnlyAPI_POST_mentions",
			"POST mentions for IGUserForIGOnlyAPI. Returns Object. Parameters: comment_id (string), media_id (string) [required], message (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"comment_id":{"description":"comment_id","type":"string"},"media_id":{"description":"media_id","type":"string"},"message":{"description":"message","type":"string"}},"required":["media_id","message"],"type":"object"}`),
		),
		IGUserForIGOnlyAPI_POST_mentionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserForIGOnlyAPI_POST_messageattachments",
			"POST messageattachments for IGUserForIGOnlyAPI. Returns Object. Parameters: message (Object) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"message":{"additionalProperties":true,"description":"message","type":"object"}},"required":["message"],"type":"object"}`),
		),
		IGUserForIGOnlyAPI_POST_messageattachmentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserForIGOnlyAPI_POST_messages",
			"POST messages for IGUserForIGOnlyAPI. Returns Object. Parameters: message (Object), messaging_type (iggraphusermessages_messaging_type_enum_param), payload (string), recipient (Object), sender_action (iggraphusermessages_sender_action_enum_param), tag (Object), thread_control (Object)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"message":{"additionalProperties":true,"description":"message","type":"object"},"messaging_type":{"description":"messaging_type (enum: iggraphusermessages_messaging_type_enum_param)","type":"string"},"payload":{"description":"payload","type":"string"},"recipient":{"additionalProperties":true,"description":"recipient","type":"object"},"sender_action":{"description":"sender_action (enum: iggraphusermessages_sender_action_enum_param)","type":"string"},"tag":{"additionalProperties":true,"description":"tag","type":"object"},"thread_control":{"additionalProperties":true,"description":"thread_control","type":"object"}},"type":"object"}`),
		),
		IGUserForIGOnlyAPI_POST_messagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserForIGOnlyAPI_DELETE_messenger_profile",
			"DELETE messenger_profile for IGUserForIGOnlyAPI. Returns Object. Parameters: fields (list<iggraphusermessenger_profile_fields_enum_param>) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["fields"],"type":"object"}`),
		),
		IGUserForIGOnlyAPI_DELETE_messenger_profileHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserForIGOnlyAPI_GET_messenger_profile",
			"GET messenger_profile for IGUserForIGOnlyAPI. Returns UserProfile",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		IGUserForIGOnlyAPI_GET_messenger_profileHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserForIGOnlyAPI_POST_messenger_profile",
			"POST messenger_profile for IGUserForIGOnlyAPI. Returns IGGraphUser. Parameters: ice_breakers (list<map>), persistent_menu (list<Object>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"ice_breakers":{"description":"ice_breakers","items":{"additionalProperties":true,"type":"object"},"type":"array"},"persistent_menu":{"description":"persistent_menu","items":{"additionalProperties":true,"type":"object"},"type":"array"}},"type":"object"}`),
		),
		IGUserForIGOnlyAPI_POST_messenger_profileHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserForIGOnlyAPI_GET_stories",
			"GET stories for IGUserForIGOnlyAPI. Returns Media",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUserForIGOnlyAPI ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGUserForIGOnlyAPI_GET_storiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserForIGOnlyAPI_DELETE_subscribed_apps",
			"DELETE subscribed_apps for IGUserForIGOnlyAPI. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUserForIGOnlyAPI ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGUserForIGOnlyAPI_DELETE_subscribed_appsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserForIGOnlyAPI_GET_subscribed_apps",
			"GET subscribed_apps for IGUserForIGOnlyAPI. Returns UserSubscribedAppsData",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUserForIGOnlyAPI ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGUserForIGOnlyAPI_GET_subscribed_appsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserForIGOnlyAPI_POST_subscribed_apps",
			"POST subscribed_apps for IGUserForIGOnlyAPI. Returns IGGraphUser. Parameters: subscribed_fields (list<iggraphusersubscribed_apps_subscribed_fields_enum_param>) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"IGUserForIGOnlyAPI ID","type":"string"},"subscribed_fields":{"description":"subscribed_fields","items":{"type":"string"},"type":"array"}},"required":["id","subscribed_fields"],"type":"object"}`),
		),
		IGUserForIGOnlyAPI_POST_subscribed_appsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserForIGOnlyAPI_GET_tags",
			"GET tags for IGUserForIGOnlyAPI. Returns Media",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUserForIGOnlyAPI ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGUserForIGOnlyAPI_GET_tagsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserForIGOnlyAPI_DELETE_welcome_message_flows",
			"DELETE welcome_message_flows for IGUserForIGOnlyAPI. Returns Object. Parameters: flow_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"flow_id":{"description":"flow_id","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		IGUserForIGOnlyAPI_DELETE_welcome_message_flowsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserForIGOnlyAPI_GET_welcome_message_flows",
			"GET welcome_message_flows for IGUserForIGOnlyAPI. Returns CTXPartnerAppWelcomeMessageFlow. Parameters: app_id (string), flow_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"app_id":{"description":"app_id","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"flow_id":{"description":"flow_id","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		IGUserForIGOnlyAPI_GET_welcome_message_flowsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserForIGOnlyAPI_POST_welcome_message_flows",
			"POST welcome_message_flows for IGUserForIGOnlyAPI. Returns IGGraphCTXPartnerAppWelcomeMessageFlow. Parameters: eligible_platforms (list<iggraphuserwelcome_message_flows_eligible_platforms_enum_param>), flow_id (string), name (string), welcome_message_flow (list<Object>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"eligible_platforms":{"description":"eligible_platforms","items":{"type":"string"},"type":"array"},"flow_id":{"description":"flow_id","type":"string"},"name":{"description":"name","type":"string"},"welcome_message_flow":{"description":"welcome_message_flow","items":{"additionalProperties":true,"type":"object"},"type":"array"}},"type":"object"}`),
		),
		IGUserForIGOnlyAPI_POST_welcome_message_flowsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"IGUserForIGOnlyAPI_GET_",
			"GET  for IGUserForIGOnlyAPI. Returns User",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"IGUserForIGOnlyAPI ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		IGUserForIGOnlyAPI_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ImageCopyright_GET_",
			"GET  for ImageCopyright. Returns ImageCopyright",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ImageCopyright ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ImageCopyright_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ImageCopyright_POST_",
			"POST  for ImageCopyright. Returns ImageCopyright. Parameters: artist (string), creator (string), custom_id (string), description (string), geo_ownership (list<imagecopyright_geo_ownership>), original_content_creation_date (unsigned int), title (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"artist":{"description":"artist","type":"string"},"creator":{"description":"creator","type":"string"},"custom_id":{"description":"custom_id","type":"string"},"description":{"description":"description","type":"string"},"geo_ownership":{"description":"geo_ownership","items":{"type":"string"},"type":"array"},"id":{"description":"ImageCopyright ID","type":"string"},"original_content_creation_date":{"description":"original_content_creation_date","type":"integer"},"title":{"description":"title","type":"string"}},"required":["id"],"type":"object"}`),
		),
		ImageCopyright_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ImageCopyrightDispute_GET_",
			"GET  for ImageCopyrightDispute. Returns ImageCopyrightDispute",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ImageCopyrightDispute ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ImageCopyrightDispute_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ImageReferenceMatch_GET_",
			"GET  for ImageReferenceMatch. Returns ImageReferenceMatch",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ImageReferenceMatch ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ImageReferenceMatch_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"InstagramBusinessAsset_GET_",
			"GET  for InstagramBusinessAsset. Returns InstagramBusinessAsset",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"InstagramBusinessAsset ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		InstagramBusinessAsset_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"InstagramThread_GET_",
			"GET  for InstagramThread. Returns InstagramThread",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"InstagramThread ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		InstagramThread_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"InstagramUser_GET_agencies",
			"GET agencies for InstagramUser. Returns Business",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"InstagramUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		InstagramUser_GET_agenciesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"InstagramUser_GET_ar_effects",
			"GET ar_effects for InstagramUser. Returns AREffect",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"InstagramUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		InstagramUser_GET_ar_effectsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"InstagramUser_GET_authorized_adaccounts",
			"GET authorized_adaccounts for InstagramUser. Returns AdAccount. Parameters: business (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business":{"description":"business","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"InstagramUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","business"],"type":"object"}`),
		),
		InstagramUser_GET_authorized_adaccountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"InstagramUser_GET_upcoming_events",
			"GET upcoming_events for InstagramUser. Returns IGUpcomingEvent",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"InstagramUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		InstagramUser_GET_upcoming_eventsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"InstagramUser_GET_",
			"GET  for InstagramUser. Returns InstagramUser. Parameters: adgroup_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"adgroup_id":{"description":"adgroup_id","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"InstagramUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		InstagramUser_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"JobOpening_GET_",
			"GET  for JobOpening. Returns JobOpening",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"JobOpening ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		JobOpening_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Lead_DELETE_",
			"DELETE  for Lead. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Lead ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Lead_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Lead_GET_",
			"GET  for Lead. Returns Lead",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Lead ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Lead_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LeadGenDataDraft_GET_",
			"GET  for LeadGenDataDraft. Returns LeadGenDataDraft",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"LeadGenDataDraft ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		LeadGenDataDraft_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LeadGenDirectCRMIntegrationConfig_GET_",
			"GET  for LeadGenDirectCRMIntegrationConfig. Returns LeadGenDirectCRMIntegrationConfig",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"LeadGenDirectCRMIntegrationConfig ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		LeadGenDirectCRMIntegrationConfig_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LeadgenForm_GET_leads",
			"GET leads for LeadgenForm. Returns Lead",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"LeadgenForm ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		LeadgenForm_GET_leadsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LeadgenForm_GET_test_leads",
			"GET test_leads for LeadgenForm. Returns Lead",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"LeadgenForm ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		LeadgenForm_GET_test_leadsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LeadgenForm_POST_test_leads",
			"POST test_leads for LeadgenForm. Returns Lead. Parameters: custom_disclaimer_responses (list<Object>), field_data (list<Object>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"custom_disclaimer_responses":{"description":"custom_disclaimer_responses","items":{"additionalProperties":true,"type":"object"},"type":"array"},"field_data":{"description":"field_data","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"LeadgenForm ID","type":"string"}},"required":["id"],"type":"object"}`),
		),
		LeadgenForm_POST_test_leadsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LeadgenForm_GET_",
			"GET  for LeadgenForm. Returns LeadgenForm",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"LeadgenForm ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		LeadgenForm_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LeadgenForm_POST_",
			"POST  for LeadgenForm. Returns LeadgenForm. Parameters: status (leadgendata_status)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"LeadgenForm ID","type":"string"},"status":{"description":"status (enum: leadgendata_status)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		LeadgenForm_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LifeEvent_GET_likes",
			"GET likes for LifeEvent. Returns Profile",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"LifeEvent ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		LifeEvent_GET_likesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LifeEvent_GET_",
			"GET  for LifeEvent. Returns LifeEvent",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"LifeEvent ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		LifeEvent_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Link_POST_comments",
			"POST comments for Link. Returns Comment. Parameters: attachment_id (string), attachment_share_url (string), attachment_url (string), comment_privacy_value (linkcomments_comment_privacy_value_enum_param), facepile_mentioned_ids (list<string>), feedback_source (string), is_offline (bool), message (string), nectar_module (string), object_id (string), parent_comment_id (Object), text (string), tracking (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"attachment_id":{"description":"attachment_id","type":"string"},"attachment_share_url":{"description":"attachment_share_url","type":"string"},"attachment_url":{"description":"attachment_url","type":"string"},"comment_privacy_value":{"description":"comment_privacy_value (enum: linkcomments_comment_privacy_value_enum_param)","type":"string"},"facepile_mentioned_ids":{"description":"facepile_mentioned_ids","items":{"type":"string"},"type":"array"},"feedback_source":{"description":"feedback_source","type":"string"},"is_offline":{"description":"is_offline","type":"boolean"},"message":{"description":"message","type":"string"},"nectar_module":{"description":"nectar_module","type":"string"},"object_id":{"description":"object_id","type":"string"},"parent_comment_id":{"additionalProperties":true,"description":"parent_comment_id","type":"object"},"text":{"description":"text","type":"string"},"tracking":{"description":"tracking","type":"string"}},"type":"object"}`),
		),
		Link_POST_commentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Link_GET_likes",
			"GET likes for Link. Returns Profile",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Link ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Link_GET_likesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Link_GET_",
			"GET  for Link. Returns Link",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Link ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Link_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LiveVideo_GET_blocked_users",
			"GET blocked_users for LiveVideo. Returns User. Parameters: uid (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"LiveVideo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"uid":{"description":"uid","type":"string"}},"required":["id"],"type":"object"}`),
		),
		LiveVideo_GET_blocked_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LiveVideo_GET_comments",
			"GET comments for LiveVideo. Returns Comment. Parameters: filter (livevideocomments_filter_enum_param), live_filter (livevideocomments_live_filter_enum_param), order (livevideocomments_order_enum_param), since (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"description":"filter (enum: livevideocomments_filter_enum_param)","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"live_filter":{"description":"live_filter (enum: livevideocomments_live_filter_enum_param)","type":"string"},"order":{"description":"order (enum: livevideocomments_order_enum_param)","type":"string"},"since":{"description":"since","type":"string"}},"type":"object"}`),
		),
		LiveVideo_GET_commentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LiveVideo_GET_crosspost_shared_pages",
			"GET crosspost_shared_pages for LiveVideo. Returns Page",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"LiveVideo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		LiveVideo_GET_crosspost_shared_pagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LiveVideo_GET_crossposted_broadcasts",
			"GET crossposted_broadcasts for LiveVideo. Returns LiveVideo",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"LiveVideo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		LiveVideo_GET_crossposted_broadcastsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LiveVideo_GET_errors",
			"GET errors for LiveVideo. Returns LiveVideoError",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"LiveVideo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		LiveVideo_GET_errorsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LiveVideo_POST_input_streams",
			"POST input_streams for LiveVideo. Returns LiveVideoInputStream",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"LiveVideo ID","type":"string"}},"required":["id"],"type":"object"}`),
		),
		LiveVideo_POST_input_streamsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LiveVideo_GET_polls",
			"GET polls for LiveVideo. Returns VideoPoll",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"LiveVideo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		LiveVideo_GET_pollsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LiveVideo_POST_polls",
			"POST polls for LiveVideo. Returns VideoPoll. Parameters: close_after_voting (bool), correct_option (unsigned int), default_open (bool), options (list<string>) [required], question (string) [required], show_gradient (bool), show_results (bool)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"close_after_voting":{"description":"close_after_voting","type":"boolean"},"correct_option":{"description":"correct_option","type":"integer"},"default_open":{"description":"default_open","type":"boolean"},"id":{"description":"LiveVideo ID","type":"string"},"options":{"description":"options","items":{"type":"string"},"type":"array"},"question":{"description":"question","type":"string"},"show_gradient":{"description":"show_gradient","type":"boolean"},"show_results":{"description":"show_results","type":"boolean"}},"required":["id","options","question"],"type":"object"}`),
		),
		LiveVideo_POST_pollsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LiveVideo_GET_reactions",
			"GET reactions for LiveVideo. Returns Profile. Parameters: type (livevideoreactions_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"LiveVideo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: livevideoreactions_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		LiveVideo_GET_reactionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LiveVideo_DELETE_",
			"DELETE  for LiveVideo. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"LiveVideo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		LiveVideo_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LiveVideo_GET_",
			"GET  for LiveVideo. Returns LiveVideo. Parameters: target_token (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"LiveVideo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"target_token":{"description":"target_token","type":"string"}},"required":["id"],"type":"object"}`),
		),
		LiveVideo_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LiveVideo_POST_",
			"POST  for LiveVideo. Returns LiveVideo. Parameters: allow_bm_crossposting (bool), content_tags (list<string>), cross_share_to_group_ids (list<string>), crossposting_actions (list<map>), custom_labels (list<string>), description (string), direct_share_status (unsigned int), embeddable (bool), end_live_video (bool), event_params (Object), is_audio_only (bool), is_manual_mode (bool), live_comment_moderation_setting (list<livevideo_live_comment_moderation_setting>), master_ingest_stream_id (string), og_icon_id (string), og_phrase (string), persistent_stream_key_status (livevideo_persistent_stream_key_status), place (Object), planned_start_time (datetime), privacy (string), published (bool), schedule_custom_profile_image (file), schedule_feed_background_image (file), sponsor_id (string), sponsor_relationship (unsigned int), status (livevideo_status), stream_type (livevideo_stream_type), tags (list<int>), targeting (Object), title (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"allow_bm_crossposting":{"description":"allow_bm_crossposting","type":"boolean"},"content_tags":{"description":"content_tags","items":{"type":"string"},"type":"array"},"cross_share_to_group_ids":{"description":"cross_share_to_group_ids","items":{"type":"string"},"type":"array"},"crossposting_actions":{"description":"crossposting_actions","items":{"additionalProperties":true,"type":"object"},"type":"array"},"custom_labels":{"description":"custom_labels","items":{"type":"string"},"type":"array"},"description":{"description":"description","type":"string"},"direct_share_status":{"description":"direct_share_status","type":"integer"},"embeddable":{"description":"embeddable","type":"boolean"},"end_live_video":{"description":"end_live_video","type":"boolean"},"event_params":{"additionalProperties":true,"description":"event_params","type":"object"},"id":{"description":"LiveVideo ID","type":"string"},"is_audio_only":{"description":"is_audio_only","type":"boolean"},"is_manual_mode":{"description":"is_manual_mode","type":"boolean"},"live_comment_moderation_setting":{"description":"live_comment_moderation_setting","items":{"type":"string"},"type":"array"},"master_ingest_stream_id":{"description":"master_ingest_stream_id","type":"string"},"og_icon_id":{"description":"og_icon_id","type":"string"},"og_phrase":{"description":"og_phrase","type":"string"},"persistent_stream_key_status":{"description":"persistent_stream_key_status (enum: livevideo_persistent_stream_key_status)","type":"string"},"place":{"additionalProperties":true,"description":"place","type":"object"},"planned_start_time":{"description":"planned_start_time","type":"string"},"privacy":{"description":"privacy","type":"string"},"published":{"description":"published","type":"boolean"},"schedule_custom_profile_image":{"description":"schedule_custom_profile_image","type":"string"},"schedule_feed_background_image":{"description":"schedule_feed_background_image","type":"string"},"sponsor_id":{"description":"sponsor_id","type":"string"},"sponsor_relationship":{"description":"sponsor_relationship","type":"integer"},"status":{"description":"status (enum: livevideo_status)","type":"string"},"stream_type":{"description":"stream_type (enum: livevideo_stream_type)","type":"string"},"tags":{"description":"tags","items":{"type":"integer"},"type":"array"},"targeting":{"additionalProperties":true,"description":"targeting","type":"object"},"title":{"description":"title","type":"string"}},"required":["id"],"type":"object"}`),
		),
		LiveVideo_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LiveVideoAdCampaignConfig_GET_",
			"GET  for LiveVideoAdCampaignConfig. Returns LiveVideoAdCampaignConfig",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"LiveVideoAdCampaignConfig ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		LiveVideoAdCampaignConfig_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LiveVideoError_GET_",
			"GET  for LiveVideoError. Returns LiveVideoError",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"LiveVideoError ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		LiveVideoError_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LiveVideoInputStream_GET_",
			"GET  for LiveVideoInputStream. Returns LiveVideoInputStream. Parameters: target_token (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"LiveVideoInputStream ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"target_token":{"description":"target_token","type":"string"}},"required":["id"],"type":"object"}`),
		),
		LiveVideoInputStream_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LocalServiceBusiness_GET_channels_to_integrity_status",
			"GET channels_to_integrity_status for LocalServiceBusiness. Returns CatalogItemChannelsToIntegrityStatus",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"LocalServiceBusiness ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		LocalServiceBusiness_GET_channels_to_integrity_statusHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LocalServiceBusiness_GET_override_details",
			"GET override_details for LocalServiceBusiness. Returns OverrideDetails. Parameters: keys (list<string>), type (localservicebusinessoverride_details_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"LocalServiceBusiness ID","type":"string"},"keys":{"description":"keys","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: localservicebusinessoverride_details_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		LocalServiceBusiness_GET_override_detailsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"LocalServiceBusiness_GET_",
			"GET  for LocalServiceBusiness. Returns LocalServiceBusiness",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"LocalServiceBusiness ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		LocalServiceBusiness_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"MailingAddress_GET_",
			"GET  for MailingAddress. Returns MailingAddress",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"MailingAddress ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		MailingAddress_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ManagementSiteLink_GET_",
			"GET  for ManagementSiteLink. Returns ManagementSiteLink",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ManagementSiteLink ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ManagementSiteLink_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"MeasurementReport_GET_",
			"GET  for MeasurementReport. Returns MeasurementReport",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"MeasurementReport ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		MeasurementReport_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"MediaCopyrightAttribution_GET_",
			"GET  for MediaCopyrightAttribution. Returns MediaCopyrightAttribution",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"MediaCopyrightAttribution ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		MediaCopyrightAttribution_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"MediaCopyrightUpdateRecord_GET_",
			"GET  for MediaCopyrightUpdateRecord. Returns MediaCopyrightUpdateRecord",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"MediaCopyrightUpdateRecord ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		MediaCopyrightUpdateRecord_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"MediaFingerprint_GET_",
			"GET  for MediaFingerprint. Returns MediaFingerprint",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"MediaFingerprint ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		MediaFingerprint_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"MediaFingerprint_POST_",
			"POST  for MediaFingerprint. Returns MediaFingerprint. Parameters: metadata (list), source (file), title (string), universal_content_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"MediaFingerprint ID","type":"string"},"metadata":{"description":"metadata","type":"string"},"source":{"description":"source","type":"string"},"title":{"description":"title","type":"string"},"universal_content_id":{"description":"universal_content_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		MediaFingerprint_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"MediaTitle_GET_channels_to_integrity_status",
			"GET channels_to_integrity_status for MediaTitle. Returns CatalogItemChannelsToIntegrityStatus",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"MediaTitle ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		MediaTitle_GET_channels_to_integrity_statusHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"MediaTitle_GET_override_details",
			"GET override_details for MediaTitle. Returns OverrideDetails. Parameters: keys (list<string>), type (mediatitleoverride_details_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"MediaTitle ID","type":"string"},"keys":{"description":"keys","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: mediatitleoverride_details_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		MediaTitle_GET_override_detailsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"MediaTitle_GET_videos_metadata",
			"GET videos_metadata for MediaTitle. Returns DynamicVideoMetadata",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		MediaTitle_GET_videos_metadataHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"MediaTitle_DELETE_",
			"DELETE  for MediaTitle. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"MediaTitle ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		MediaTitle_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"MediaTitle_GET_",
			"GET  for MediaTitle. Returns MediaTitle",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"MediaTitle ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		MediaTitle_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"MediaTitle_POST_",
			"POST  for MediaTitle. Returns MediaTitle. Parameters: applinks (Object), content_category (mediatitle_content_category), currency (string), description (string), fb_page_id (string), genres (list<string>), images (list<Object>), kg_fb_id (string), price (unsigned int), title (string), title_display_name (string), url (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"applinks":{"additionalProperties":true,"description":"applinks","type":"object"},"content_category":{"description":"content_category (enum: mediatitle_content_category)","type":"string"},"currency":{"description":"currency","type":"string"},"description":{"description":"description","type":"string"},"fb_page_id":{"description":"fb_page_id","type":"string"},"genres":{"description":"genres","items":{"type":"string"},"type":"array"},"id":{"description":"MediaTitle ID","type":"string"},"images":{"description":"images","items":{"additionalProperties":true,"type":"object"},"type":"array"},"kg_fb_id":{"description":"kg_fb_id","type":"string"},"price":{"description":"price","type":"integer"},"title":{"description":"title","type":"string"},"title_display_name":{"description":"title_display_name","type":"string"},"url":{"description":"url","type":"string"}},"required":["id"],"type":"object"}`),
		),
		MediaTitle_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"MessengerAdsPartialAutomatedStepList_GET_steps",
			"GET steps for MessengerAdsPartialAutomatedStepList. Returns MessengerAdsPartialAutomatedStep",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"MessengerAdsPartialAutomatedStepList ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		MessengerAdsPartialAutomatedStepList_GET_stepsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"MessengerAdsPartialAutomatedStepList_GET_",
			"GET  for MessengerAdsPartialAutomatedStepList. Returns MessengerAdsPartialAutomatedStepList",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"MessengerAdsPartialAutomatedStepList ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		MessengerAdsPartialAutomatedStepList_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"MessengerBusinessTemplate_GET_",
			"GET  for MessengerBusinessTemplate. Returns MessengerBusinessTemplate",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"MessengerBusinessTemplate ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		MessengerBusinessTemplate_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"MessengerBusinessTemplate_POST_",
			"POST  for MessengerBusinessTemplate. Returns MessengerBusinessTemplate. Parameters: components (list<map>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"components":{"description":"components","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"MessengerBusinessTemplate ID","type":"string"}},"required":["id"],"type":"object"}`),
		),
		MessengerBusinessTemplate_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"MusicVideoCopyright_GET_",
			"GET  for MusicVideoCopyright. Returns MusicVideoCopyright",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"MusicVideoCopyright ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		MusicVideoCopyright_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"MusicWorkCopyright_GET_",
			"GET  for MusicWorkCopyright. Returns MusicWorkCopyright",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"MusicWorkCopyright ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		MusicWorkCopyright_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OfflineConversionDataSet_GET_adaccounts",
			"GET adaccounts for OfflineConversionDataSet. Returns AdAccount. Parameters: business (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business":{"description":"business","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OfflineConversionDataSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","business"],"type":"object"}`),
		),
		OfflineConversionDataSet_GET_adaccountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OfflineConversionDataSet_GET_agencies",
			"GET agencies for OfflineConversionDataSet. Returns Business",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OfflineConversionDataSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		OfflineConversionDataSet_GET_agenciesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OfflineConversionDataSet_GET_audiences",
			"GET audiences for OfflineConversionDataSet. Returns CustomAudience. Parameters: action_source (offlineconversiondatasetaudiences_action_source_enum_param), ad_account (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"action_source":{"description":"action_source (enum: offlineconversiondatasetaudiences_action_source_enum_param)","type":"string"},"ad_account":{"description":"ad_account","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OfflineConversionDataSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		OfflineConversionDataSet_GET_audiencesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OfflineConversionDataSet_GET_customconversions",
			"GET customconversions for OfflineConversionDataSet. Returns CustomConversion. Parameters: ad_account (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"ad_account":{"description":"ad_account","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OfflineConversionDataSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		OfflineConversionDataSet_GET_customconversionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OfflineConversionDataSet_GET_server_events_permitted_business",
			"GET server_events_permitted_business for OfflineConversionDataSet. Returns Business",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OfflineConversionDataSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		OfflineConversionDataSet_GET_server_events_permitted_businessHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OfflineConversionDataSet_GET_shared_accounts",
			"GET shared_accounts for OfflineConversionDataSet. Returns AdAccount. Parameters: action_source (offlineconversiondatasetshared_accounts_action_source_enum_param) [required], business (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"action_source":{"description":"action_source (enum: offlineconversiondatasetshared_accounts_action_source_enum_param)","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business":{"description":"business","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OfflineConversionDataSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","action_source","business"],"type":"object"}`),
		),
		OfflineConversionDataSet_GET_shared_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OfflineConversionDataSet_GET_shared_agencies",
			"GET shared_agencies for OfflineConversionDataSet. Returns Business. Parameters: action_source (offlineconversiondatasetshared_agencies_action_source_enum_param) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"action_source":{"description":"action_source (enum: offlineconversiondatasetshared_agencies_action_source_enum_param)","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OfflineConversionDataSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","action_source"],"type":"object"}`),
		),
		OfflineConversionDataSet_GET_shared_agenciesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OfflineConversionDataSet_GET_stats",
			"GET stats for OfflineConversionDataSet. Returns OfflineConversionDataSetStats. Parameters: aggr_time (offlineconversiondatasetstats_aggr_time_enum_param), end (int), granularity (offlineconversiondatasetstats_granularity_enum_param), skip_empty_values (bool), start (int), user_timezone_id (unsigned int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"aggr_time":{"description":"aggr_time (enum: offlineconversiondatasetstats_aggr_time_enum_param)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"end":{"description":"end","type":"integer"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"granularity":{"description":"granularity (enum: offlineconversiondatasetstats_granularity_enum_param)","type":"string"},"id":{"description":"OfflineConversionDataSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"skip_empty_values":{"description":"skip_empty_values","type":"boolean"},"start":{"description":"start","type":"integer"},"user_timezone_id":{"description":"user_timezone_id","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		OfflineConversionDataSet_GET_statsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OfflineConversionDataSet_GET_uploads",
			"GET uploads for OfflineConversionDataSet. Returns OfflineConversionDataSetUpload. Parameters: end_time (datetime), order (offlineconversiondatasetuploads_order_enum_param), sort_by (offlineconversiondatasetuploads_sort_by_enum_param), start_time (datetime), upload_tag (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"end_time":{"description":"end_time","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OfflineConversionDataSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"order":{"description":"order (enum: offlineconversiondatasetuploads_order_enum_param)","type":"string"},"sort_by":{"description":"sort_by (enum: offlineconversiondatasetuploads_sort_by_enum_param)","type":"string"},"start_time":{"description":"start_time","type":"string"},"upload_tag":{"description":"upload_tag","type":"string"}},"required":["id"],"type":"object"}`),
		),
		OfflineConversionDataSet_GET_uploadsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OfflineConversionDataSet_GET_",
			"GET  for OfflineConversionDataSet. Returns OfflineConversionDataSet",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OfflineConversionDataSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		OfflineConversionDataSet_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OfflineConversionDataSetUpload_GET_progress",
			"GET progress for OfflineConversionDataSetUpload. Returns SignalsUploadProgress",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OfflineConversionDataSetUpload ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		OfflineConversionDataSetUpload_GET_progressHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OfflineConversionDataSetUpload_GET_pull_sessions",
			"GET pull_sessions for OfflineConversionDataSetUpload. Returns PartnerIntegrationPullSession",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OfflineConversionDataSetUpload ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		OfflineConversionDataSetUpload_GET_pull_sessionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OfflineConversionDataSetUpload_GET_",
			"GET  for OfflineConversionDataSetUpload. Returns OfflineConversionDataSetUpload",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OfflineConversionDataSetUpload ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		OfflineConversionDataSetUpload_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OfflineProductItem_GET_channels_to_integrity_status",
			"GET channels_to_integrity_status for OfflineProductItem. Returns CatalogItemChannelsToIntegrityStatus",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OfflineProductItem ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		OfflineProductItem_GET_channels_to_integrity_statusHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OfflineProductItem_GET_override_details",
			"GET override_details for OfflineProductItem. Returns OverrideDetails. Parameters: keys (list<string>), type (offlineproductitemoverride_details_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OfflineProductItem ID","type":"string"},"keys":{"description":"keys","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: offlineproductitemoverride_details_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		OfflineProductItem_GET_override_detailsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OfflineProductItem_GET_",
			"GET  for OfflineProductItem. Returns OfflineProductItem",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OfflineProductItem ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		OfflineProductItem_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OfflineTermsOfService_GET_",
			"GET  for OfflineTermsOfService. Returns OfflineTermsOfService",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OfflineTermsOfService ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		OfflineTermsOfService_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OffsitePixel_GET_",
			"GET  for OffsitePixel. Returns OffsitePixel. Parameters: value (unsigned int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OffsitePixel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"value":{"description":"value","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		OffsitePixel_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OffsiteSignalContainerBusinessObject_GET_linked_application",
			"GET linked_application for OffsiteSignalContainerBusinessObject. Returns AdsDataset",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OffsiteSignalContainerBusinessObject ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		OffsiteSignalContainerBusinessObject_GET_linked_applicationHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OffsiteSignalContainerBusinessObject_GET_linked_page",
			"GET linked_page for OffsiteSignalContainerBusinessObject. Returns Page",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OffsiteSignalContainerBusinessObject ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		OffsiteSignalContainerBusinessObject_GET_linked_pageHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OffsiteSignalContainerBusinessObject_GET_",
			"GET  for OffsiteSignalContainerBusinessObject. Returns OffsiteSignalContainerBusinessObject",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OffsiteSignalContainerBusinessObject ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		OffsiteSignalContainerBusinessObject_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OmegaCustomerTrx_GET_campaigns",
			"GET campaigns for OmegaCustomerTrx. Returns InvoiceCampaign",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OmegaCustomerTrx ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		OmegaCustomerTrx_GET_campaignsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OmegaCustomerTrx_GET_",
			"GET  for OmegaCustomerTrx. Returns OmegaCustomerTrx",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OmegaCustomerTrx ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		OmegaCustomerTrx_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OpenBridgeConfiguration_DELETE_",
			"DELETE  for OpenBridgeConfiguration. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OpenBridgeConfiguration ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		OpenBridgeConfiguration_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OpenBridgeConfiguration_GET_",
			"GET  for OpenBridgeConfiguration. Returns OpenBridgeConfiguration",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OpenBridgeConfiguration ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		OpenBridgeConfiguration_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OpenBridgeConfiguration_POST_",
			"POST  for OpenBridgeConfiguration. Returns OpenBridgeConfiguration. Parameters: active (bool), cloud_provider (string), cloud_region (string), destination_id (string), endpoint (string), fallback_domain (string), first_party_domain (string), host_business_id (unsigned int), instance_id (string), instance_version (string), is_sgw_instance (bool), is_sgw_pixel_from_meta_pixel (bool), partner_name (string), sgw_account_id (string), sgw_instance_url (string), sgw_pixel_id (unsigned int)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"active":{"description":"active","type":"boolean"},"cloud_provider":{"description":"cloud_provider","type":"string"},"cloud_region":{"description":"cloud_region","type":"string"},"destination_id":{"description":"destination_id","type":"string"},"endpoint":{"description":"endpoint","type":"string"},"fallback_domain":{"description":"fallback_domain","type":"string"},"first_party_domain":{"description":"first_party_domain","type":"string"},"host_business_id":{"description":"host_business_id","type":"integer"},"id":{"description":"OpenBridgeConfiguration ID","type":"string"},"instance_id":{"description":"instance_id","type":"string"},"instance_version":{"description":"instance_version","type":"string"},"is_sgw_instance":{"description":"is_sgw_instance","type":"boolean"},"is_sgw_pixel_from_meta_pixel":{"description":"is_sgw_pixel_from_meta_pixel","type":"boolean"},"partner_name":{"description":"partner_name","type":"string"},"sgw_account_id":{"description":"sgw_account_id","type":"string"},"sgw_instance_url":{"description":"sgw_instance_url","type":"string"},"sgw_pixel_id":{"description":"sgw_pixel_id","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		OpenBridgeConfiguration_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OpenGraphContext_GET_",
			"GET  for OpenGraphContext. Returns OpenGraphContext",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OpenGraphContext ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		OpenGraphContext_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Organization_GET_",
			"GET  for Organization. Returns Organization",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Organization ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Organization_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"OwnedDomain_GET_",
			"GET  for OwnedDomain. Returns OwnedDomain",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"OwnedDomain ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		OwnedDomain_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_ab_tests",
			"GET ab_tests for Page. Returns PagePostExperiment",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_ab_testsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_ab_tests",
			"POST ab_tests for Page. Returns PagePostExperiment. Parameters: control_video_id (string) [required], description (string) [required], duration (unsigned int) [required], experiment_video_ids (list<string>) [required], name (string) [required], optimization_goal (pageab_tests_optimization_goal_enum_param) [required], scheduled_experiment_timestamp (unsigned int)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"control_video_id":{"description":"control_video_id","type":"string"},"description":{"description":"description","type":"string"},"duration":{"description":"duration","type":"integer"},"experiment_video_ids":{"description":"experiment_video_ids","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"name":{"description":"name","type":"string"},"optimization_goal":{"description":"optimization_goal (enum: pageab_tests_optimization_goal_enum_param)","type":"string"},"scheduled_experiment_timestamp":{"description":"scheduled_experiment_timestamp","type":"integer"}},"required":["id","control_video_id","description","duration","experiment_video_ids","name","optimization_goal"],"type":"object"}`),
		),
		Page_POST_ab_testsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_acknowledge_orders",
			"POST acknowledge_orders for Page. Returns Page. Parameters: idempotency_key (string) [required], orders (list<map>) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Page ID","type":"string"},"idempotency_key":{"description":"idempotency_key","type":"string"},"orders":{"description":"orders","items":{"additionalProperties":true,"type":"object"},"type":"array"}},"required":["id","idempotency_key","orders"],"type":"object"}`),
		),
		Page_POST_acknowledge_ordersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_ads_posts",
			"GET ads_posts for Page. Returns PagePost. Parameters: exclude_dynamic_ads (bool), include_inline_create (bool), since (datetime), until (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"exclude_dynamic_ads":{"description":"exclude_dynamic_ads","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"include_inline_create":{"description":"include_inline_create","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"since":{"description":"since","type":"string"},"until":{"description":"until","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_ads_postsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_DELETE_agencies",
			"DELETE agencies for Page. Returns Object. Parameters: business (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business":{"description":"business","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","business"],"type":"object"}`),
		),
		Page_DELETE_agenciesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_agencies",
			"GET agencies for Page. Returns Business",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_agenciesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_agencies",
			"POST agencies for Page. Returns Page. Parameters: business (string) [required], permitted_tasks (list<pageagencies_permitted_tasks_enum_param>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"business":{"description":"business","type":"string"},"id":{"description":"Page ID","type":"string"},"permitted_tasks":{"description":"permitted_tasks","items":{"type":"string"},"type":"array"}},"required":["id","business"],"type":"object"}`),
		),
		Page_POST_agenciesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_albums",
			"GET albums for Page. Returns Album",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_albumsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_ar_experience",
			"GET ar_experience for Page. Returns ArAdsDataContainer",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_ar_experienceHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_DELETE_assigned_users",
			"DELETE assigned_users for Page. Returns Object. Parameters: user (int) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"user":{"description":"user","type":"integer"}},"required":["id","user"],"type":"object"}`),
		),
		Page_DELETE_assigned_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_assigned_users",
			"GET assigned_users for Page. Returns AssignedUser. Parameters: business (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business":{"description":"business","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","business"],"type":"object"}`),
		),
		Page_GET_assigned_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_assigned_users",
			"POST assigned_users for Page. Returns Page. Parameters: tasks (list<pageassigned_users_tasks_enum_param>), user (int) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Page ID","type":"string"},"tasks":{"description":"tasks","items":{"type":"string"},"type":"array"},"user":{"description":"user","type":"integer"}},"required":["id","user"],"type":"object"}`),
		),
		Page_POST_assigned_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_DELETE_blocked",
			"DELETE blocked for Page. Returns Object. Parameters: asid (string), psid (int), uid (int), user (int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"asid":{"description":"asid","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"psid":{"description":"psid","type":"integer"},"uid":{"description":"uid","type":"integer"},"user":{"description":"user","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_DELETE_blockedHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_blocked",
			"GET blocked for Page. Returns Profile. Parameters: uid (int), user (int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"uid":{"description":"uid","type":"integer"},"user":{"description":"user","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_blockedHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_blocked",
			"POST blocked for Page. Returns Object. Parameters: asid (list<string>), psid (list<int>), uid (list<string>), user (list<string>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"asid":{"description":"asid","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"psid":{"description":"psid","items":{"type":"integer"},"type":"array"},"uid":{"description":"uid","items":{"type":"string"},"type":"array"},"user":{"description":"user","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		Page_POST_blockedHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_business_data",
			"POST business_data for Page. Returns Object. Parameters: data (list<string>) [required], partner_agent (string) [required], processing_type (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"data":{"description":"data","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"partner_agent":{"description":"partner_agent","type":"string"},"processing_type":{"description":"processing_type","type":"string"}},"required":["id","data","partner_agent"],"type":"object"}`),
		),
		Page_POST_business_dataHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_businessprojects",
			"GET businessprojects for Page. Returns BusinessProject. Parameters: business (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business":{"description":"business","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_businessprojectsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_call_to_actions",
			"GET call_to_actions for Page. Returns PageCallToAction",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_call_to_actionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_calls",
			"POST calls for Page. Returns Object. Parameters: action (pagecalls_action_enum_param) [required], call_id (string), platform (pagecalls_platform_enum_param), session (map), to (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"action":{"description":"action (enum: pagecalls_action_enum_param)","type":"string"},"call_id":{"description":"call_id","type":"string"},"id":{"description":"Page ID","type":"string"},"platform":{"description":"platform (enum: pagecalls_platform_enum_param)","type":"string"},"session":{"description":"session","type":"string"},"to":{"description":"to","type":"string"}},"required":["id","action"],"type":"object"}`),
		),
		Page_POST_callsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_canvas_elements",
			"GET canvas_elements for Page. Returns CanvasBodyElement",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Page_GET_canvas_elementsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_canvas_elements",
			"POST canvas_elements for Page. Returns CanvasBodyElement. Parameters: canvas_button (Object), canvas_carousel (Object), canvas_footer (Object), canvas_header (Object), canvas_lead_form (Object), canvas_photo (Object), canvas_product_list (Object), canvas_product_set (Object), canvas_store_locator (Object), canvas_template_video (Object), canvas_text (Object), canvas_video (Object)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"canvas_button":{"additionalProperties":true,"description":"canvas_button","type":"object"},"canvas_carousel":{"additionalProperties":true,"description":"canvas_carousel","type":"object"},"canvas_footer":{"additionalProperties":true,"description":"canvas_footer","type":"object"},"canvas_header":{"additionalProperties":true,"description":"canvas_header","type":"object"},"canvas_lead_form":{"additionalProperties":true,"description":"canvas_lead_form","type":"object"},"canvas_photo":{"additionalProperties":true,"description":"canvas_photo","type":"object"},"canvas_product_list":{"additionalProperties":true,"description":"canvas_product_list","type":"object"},"canvas_product_set":{"additionalProperties":true,"description":"canvas_product_set","type":"object"},"canvas_store_locator":{"additionalProperties":true,"description":"canvas_store_locator","type":"object"},"canvas_template_video":{"additionalProperties":true,"description":"canvas_template_video","type":"object"},"canvas_text":{"additionalProperties":true,"description":"canvas_text","type":"object"},"canvas_video":{"additionalProperties":true,"description":"canvas_video","type":"object"}},"type":"object"}`),
		),
		Page_POST_canvas_elementsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_canvases",
			"GET canvases for Page. Returns Canvas. Parameters: is_hidden (bool), is_published (bool)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"is_hidden":{"description":"is_hidden","type":"boolean"},"is_published":{"description":"is_published","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_canvasesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_canvases",
			"POST canvases for Page. Returns Canvas. Parameters: background_color (string), body_element_ids (list<string>), enable_swipe_to_open (bool), is_hidden (bool), is_published (bool), name (string), source_template_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"background_color":{"description":"background_color","type":"string"},"body_element_ids":{"description":"body_element_ids","items":{"type":"string"},"type":"array"},"enable_swipe_to_open":{"description":"enable_swipe_to_open","type":"boolean"},"id":{"description":"Page ID","type":"string"},"is_hidden":{"description":"is_hidden","type":"boolean"},"is_published":{"description":"is_published","type":"boolean"},"name":{"description":"name","type":"string"},"source_template_id":{"description":"source_template_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Page_POST_canvasesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_chat_plugin",
			"GET chat_plugin for Page. Returns ChatPlugin",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_chat_pluginHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_commerce_merchant_settings",
			"GET commerce_merchant_settings for Page. Returns CommerceMerchantSettings",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Page_GET_commerce_merchant_settingsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_commerce_orders",
			"GET commerce_orders for Page. Returns CommerceOrder. Parameters: filters (list<pagecommerce_orders_filters_enum_param>), state (list<pagecommerce_orders_state_enum_param>), updated_after (datetime), updated_before (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filters":{"description":"filters","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"state":{"description":"state","items":{"type":"string"},"type":"array"},"updated_after":{"description":"updated_after","type":"string"},"updated_before":{"description":"updated_before","type":"string"}},"type":"object"}`),
		),
		Page_GET_commerce_ordersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_commerce_payouts",
			"GET commerce_payouts for Page. Returns CommercePayout. Parameters: end_time (datetime), start_time (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"end_time":{"description":"end_time","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"start_time":{"description":"start_time","type":"string"}},"type":"object"}`),
		),
		Page_GET_commerce_payoutsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_commerce_transactions",
			"GET commerce_transactions for Page. Returns CommerceOrderTransactionDetail. Parameters: end_time (datetime), payout_reference_id (string), start_time (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"end_time":{"description":"end_time","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"payout_reference_id":{"description":"payout_reference_id","type":"string"},"start_time":{"description":"start_time","type":"string"}},"type":"object"}`),
		),
		Page_GET_commerce_transactionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_conversations",
			"GET conversations for Page. Returns UnifiedThread. Parameters: folder (string), platform (pageconversations_platform_enum_param), tags (list<string>), user_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"folder":{"description":"folder","type":"string"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"platform":{"description":"platform (enum: pageconversations_platform_enum_param)","type":"string"},"tags":{"description":"tags","items":{"type":"string"},"type":"array"},"user_id":{"description":"user_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_conversationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_copyright_manual_claims",
			"POST copyright_manual_claims for Page. Returns VideoCopyrightMatch. Parameters: action (pagecopyright_manual_claims_action_enum_param), action_reason (pagecopyright_manual_claims_action_reason_enum_param), countries (Object), match_content_type (pagecopyright_manual_claims_match_content_type_enum_param) [required], matched_asset_id (string) [required], reference_asset_id (string) [required], selected_segments (list<map>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"action":{"description":"action (enum: pagecopyright_manual_claims_action_enum_param)","type":"string"},"action_reason":{"description":"action_reason (enum: pagecopyright_manual_claims_action_reason_enum_param)","type":"string"},"countries":{"additionalProperties":true,"description":"countries","type":"object"},"id":{"description":"Page ID","type":"string"},"match_content_type":{"description":"match_content_type (enum: pagecopyright_manual_claims_match_content_type_enum_param)","type":"string"},"matched_asset_id":{"description":"matched_asset_id","type":"string"},"reference_asset_id":{"description":"reference_asset_id","type":"string"},"selected_segments":{"description":"selected_segments","items":{"additionalProperties":true,"type":"object"},"type":"array"}},"required":["id","match_content_type","matched_asset_id","reference_asset_id"],"type":"object"}`),
		),
		Page_POST_copyright_manual_claimsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_crosspost_whitelisted_pages",
			"GET crosspost_whitelisted_pages for Page. Returns Page",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Page_GET_crosspost_whitelisted_pagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_ctx_optimization_eligibility",
			"GET ctx_optimization_eligibility for Page. Returns CTXOptimizationEligibility",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_ctx_optimization_eligibilityHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_custom_labels",
			"GET custom_labels for Page. Returns PageUserMessageThreadLabel",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_custom_labelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_custom_labels",
			"POST custom_labels for Page. Returns PageUserMessageThreadLabel. Parameters: name (string), page_label_name (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Page ID","type":"string"},"name":{"description":"name","type":"string"},"page_label_name":{"description":"page_label_name","type":"string"}},"required":["id","page_label_name"],"type":"object"}`),
		),
		Page_POST_custom_labelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_DELETE_custom_user_settings",
			"DELETE custom_user_settings for Page. Returns Object. Parameters: params (list<pagecustom_user_settings_params_enum_param>) [required], psid (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"params":{"description":"params","items":{"type":"string"},"type":"array"},"psid":{"description":"psid","type":"string"}},"required":["id","params","psid"],"type":"object"}`),
		),
		Page_DELETE_custom_user_settingsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_custom_user_settings",
			"GET custom_user_settings for Page. Returns CustomUserSettings. Parameters: psid (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"psid":{"description":"psid","type":"string"}},"required":["id","psid"],"type":"object"}`),
		),
		Page_GET_custom_user_settingsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_custom_user_settings",
			"POST custom_user_settings for Page. Returns Page. Parameters: persistent_menu (list<Object>), psid (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Page ID","type":"string"},"persistent_menu":{"description":"persistent_menu","items":{"additionalProperties":true,"type":"object"},"type":"array"},"psid":{"description":"psid","type":"string"}},"required":["id","psid"],"type":"object"}`),
		),
		Page_POST_custom_user_settingsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_dataset",
			"GET dataset for Page. Returns Dataset",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_datasetHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_dataset",
			"POST dataset for Page. Returns Dataset. Parameters: dataset_name (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"dataset_name":{"description":"dataset_name","type":"string"},"id":{"description":"Page ID","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Page_POST_datasetHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_events",
			"GET events for Page. Returns Event. Parameters: event_state_filter (list<pageevents_event_state_filter_enum_param>), include_canceled (bool), time_filter (pageevents_time_filter_enum_param), type (pageevents_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"event_state_filter":{"description":"event_state_filter","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"include_canceled":{"description":"include_canceled","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"time_filter":{"description":"time_filter (enum: pageevents_time_filter_enum_param)","type":"string"},"type":{"description":"type (enum: pageevents_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_eventsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_extend_thread_control",
			"POST extend_thread_control for Page. Returns Page. Parameters: duration (unsigned int), recipient (Object) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"duration":{"description":"duration","type":"integer"},"id":{"description":"Page ID","type":"string"},"recipient":{"additionalProperties":true,"description":"recipient","type":"object"}},"required":["id","recipient"],"type":"object"}`),
		),
		Page_POST_extend_thread_controlHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_fantasy_games",
			"GET fantasy_games for Page. Returns FantasyGame",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Page_GET_fantasy_gamesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_feed",
			"GET feed for Page. Returns PagePost. Parameters: include_hidden (bool), limit (unsigned int), show_expired (bool), with (pagefeed_with_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"include_hidden":{"description":"include_hidden","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"show_expired":{"description":"show_expired","type":"boolean"},"with":{"description":"with (enum: pagefeed_with_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_feedHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_feed",
			"POST feed for Page. Returns Page. Parameters: actions (Object), album_id (string), android_key_hash (string), application_id (string), asked_fun_fact_prompt_id (unsigned int), asset3d_id (string), associated_id (string), attach_place_suggestion (bool), attached_media (list<Object>), audience_exp (bool), backdated_time (datetime), backdated_time_granularity (pagefeed_backdated_time_granularity_enum_param), breaking_news (bool), breaking_news_expiration (unsigned int), call_to_action (Object), caption (string), child_attachments (list<Object>), client_mutation_id (string), composer_entry_picker (string), composer_entry_point (string), composer_entry_time (unsigned int), composer_session_events_log (string), composer_session_id (string), composer_source_surface (string), composer_type (string), connection_class (string), content_attachment (string), coordinates (Object), cta_link (string), cta_type (string), description (string), direct_share_status (unsigned int), enforce_link_ownership (bool), expanded_height (unsigned int), expanded_width (unsigned int), feed_targeting (Object), formatting (pagefeed_formatting_enum_param), fun_fact_prompt_id (string), fun_fact_toastee_id (unsigned int), height (unsigned int), home_checkin_city_id (Object), image_crops (map), implicit_with_tags (list<int>), instant_game_entry_point_data (string), ios_bundle_id (string), is_backout_draft (bool), is_boost_intended (bool), is_explicit_location (bool), is_explicit_share (bool), is_group_linking_post (bool), is_photo_container (bool), link (string), location_source_id (string), manual_privacy (bool), message (string), multi_share_end_card (bool), multi_share_optimized (bool), name (string), nectar_module (string), object_attachment (string), og_action_type_id (string), og_hide_object_attachment (bool), og_icon_id (string), og_object_id (string), og_phrase (string), og_set_profile_badge (bool), og_suggestion_mechanism (string), page_recommendation (string), picture (string), place (Object), place_attachment_setting (pagefeed_place_attachment_setting_enum_param), place_list (string), place_list_data (list), post_surfaces_blacklist (list<pagefeed_post_surfaces_blacklist_enum_param>), posting_to_redspace (pagefeed_posting_to_redspace_enum_param), privacy (string), prompt_id (string), prompt_tracking_string (string), properties (Object), proxied_app_id (string), publish_event_id (unsigned int), published (bool), quote (string), ref (list<string>), referenceable_image_ids (list<string>), referral_id (string), scheduled_publish_time (datetime), source (string), sponsor_id (string), sponsor_relationship (unsigned int), suggested_place_id (Object), tags (list<int>), target_surface (pagefeed_target_surface_enum_param), targeting (Object), text_format_metadata (string), text_format_preset_id (string), text_only_place (string), thumbnail (file), time_since_original_post (unsigned int), title (string), tracking_info (string), unpublished_content_type (pagefeed_unpublished_content_type_enum_param), user_selected_tags (bool), video_start_time_ms (unsigned int), viewer_coordinates (Object), width (unsigned int)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"actions":{"additionalProperties":true,"description":"actions","type":"object"},"album_id":{"description":"album_id","type":"string"},"android_key_hash":{"description":"android_key_hash","type":"string"},"application_id":{"description":"application_id","type":"string"},"asked_fun_fact_prompt_id":{"description":"asked_fun_fact_prompt_id","type":"integer"},"asset3d_id":{"description":"asset3d_id","type":"string"},"associated_id":{"description":"associated_id","type":"string"},"attach_place_suggestion":{"description":"attach_place_suggestion","type":"boolean"},"attached_media":{"description":"attached_media","items":{"additionalProperties":true,"type":"object"},"type":"array"},"audience_exp":{"description":"audience_exp","type":"boolean"},"backdated_time":{"description":"backdated_time","type":"string"},"backdated_time_granularity":{"description":"backdated_time_granularity (enum: pagefeed_backdated_time_granularity_enum_param)","type":"string"},"breaking_news":{"description":"breaking_news","type":"boolean"},"breaking_news_expiration":{"description":"breaking_news_expiration","type":"integer"},"call_to_action":{"additionalProperties":true,"description":"call_to_action","type":"object"},"caption":{"description":"caption","type":"string"},"child_attachments":{"description":"child_attachments","items":{"additionalProperties":true,"type":"object"},"type":"array"},"client_mutation_id":{"description":"client_mutation_id","type":"string"},"composer_entry_picker":{"description":"composer_entry_picker","type":"string"},"composer_entry_point":{"description":"composer_entry_point","type":"string"},"composer_entry_time":{"description":"composer_entry_time","type":"integer"},"composer_session_events_log":{"description":"composer_session_events_log","type":"string"},"composer_session_id":{"description":"composer_session_id","type":"string"},"composer_source_surface":{"description":"composer_source_surface","type":"string"},"composer_type":{"description":"composer_type","type":"string"},"connection_class":{"description":"connection_class","type":"string"},"content_attachment":{"description":"content_attachment","type":"string"},"coordinates":{"additionalProperties":true,"description":"coordinates","type":"object"},"cta_link":{"description":"cta_link","type":"string"},"cta_type":{"description":"cta_type","type":"string"},"description":{"description":"description","type":"string"},"direct_share_status":{"description":"direct_share_status","type":"integer"},"enforce_link_ownership":{"description":"enforce_link_ownership","type":"boolean"},"expanded_height":{"description":"expanded_height","type":"integer"},"expanded_width":{"description":"expanded_width","type":"integer"},"feed_targeting":{"additionalProperties":true,"description":"feed_targeting","type":"object"},"formatting":{"description":"formatting (enum: pagefeed_formatting_enum_param)","type":"string"},"fun_fact_prompt_id":{"description":"fun_fact_prompt_id","type":"string"},"fun_fact_toastee_id":{"description":"fun_fact_toastee_id","type":"integer"},"height":{"description":"height","type":"integer"},"home_checkin_city_id":{"additionalProperties":true,"description":"home_checkin_city_id","type":"object"},"id":{"description":"Page ID","type":"string"},"image_crops":{"description":"image_crops","type":"string"},"implicit_with_tags":{"description":"implicit_with_tags","items":{"type":"integer"},"type":"array"},"instant_game_entry_point_data":{"description":"instant_game_entry_point_data","type":"string"},"ios_bundle_id":{"description":"ios_bundle_id","type":"string"},"is_backout_draft":{"description":"is_backout_draft","type":"boolean"},"is_boost_intended":{"description":"is_boost_intended","type":"boolean"},"is_explicit_location":{"description":"is_explicit_location","type":"boolean"},"is_explicit_share":{"description":"is_explicit_share","type":"boolean"},"is_group_linking_post":{"description":"is_group_linking_post","type":"boolean"},"is_photo_container":{"description":"is_photo_container","type":"boolean"},"link":{"description":"link","type":"string"},"location_source_id":{"description":"location_source_id","type":"string"},"manual_privacy":{"description":"manual_privacy","type":"boolean"},"message":{"description":"message","type":"string"},"multi_share_end_card":{"description":"multi_share_end_card","type":"boolean"},"multi_share_optimized":{"description":"multi_share_optimized","type":"boolean"},"name":{"description":"name","type":"string"},"nectar_module":{"description":"nectar_module","type":"string"},"object_attachment":{"description":"object_attachment","type":"string"},"og_action_type_id":{"description":"og_action_type_id","type":"string"},"og_hide_object_attachment":{"description":"og_hide_object_attachment","type":"boolean"},"og_icon_id":{"description":"og_icon_id","type":"string"},"og_object_id":{"description":"og_object_id","type":"string"},"og_phrase":{"description":"og_phrase","type":"string"},"og_set_profile_badge":{"description":"og_set_profile_badge","type":"boolean"},"og_suggestion_mechanism":{"description":"og_suggestion_mechanism","type":"string"},"page_recommendation":{"description":"page_recommendation","type":"string"},"picture":{"description":"picture","type":"string"},"place":{"additionalProperties":true,"description":"place","type":"object"},"place_attachment_setting":{"description":"place_attachment_setting (enum: pagefeed_place_attachment_setting_enum_param)","type":"string"},"place_list":{"description":"place_list","type":"string"},"place_list_data":{"description":"place_list_data","type":"string"},"post_surfaces_blacklist":{"description":"post_surfaces_blacklist","items":{"type":"string"},"type":"array"},"posting_to_redspace":{"description":"posting_to_redspace (enum: pagefeed_posting_to_redspace_enum_param)","type":"string"},"privacy":{"description":"privacy","type":"string"},"prompt_id":{"description":"prompt_id","type":"string"},"prompt_tracking_string":{"description":"prompt_tracking_string","type":"string"},"properties":{"additionalProperties":true,"description":"properties","type":"object"},"proxied_app_id":{"description":"proxied_app_id","type":"string"},"publish_event_id":{"description":"publish_event_id","type":"integer"},"published":{"description":"published","type":"boolean"},"quote":{"description":"quote","type":"string"},"ref":{"description":"ref","items":{"type":"string"},"type":"array"},"referenceable_image_ids":{"description":"referenceable_image_ids","items":{"type":"string"},"type":"array"},"referral_id":{"description":"referral_id","type":"string"},"scheduled_publish_time":{"description":"scheduled_publish_time","type":"string"},"source":{"description":"source","type":"string"},"sponsor_id":{"description":"sponsor_id","type":"string"},"sponsor_relationship":{"description":"sponsor_relationship","type":"integer"},"suggested_place_id":{"additionalProperties":true,"description":"suggested_place_id","type":"object"},"tags":{"description":"tags","items":{"type":"integer"},"type":"array"},"target_surface":{"description":"target_surface (enum: pagefeed_target_surface_enum_param)","type":"string"},"targeting":{"additionalProperties":true,"description":"targeting","type":"object"},"text_format_metadata":{"description":"text_format_metadata","type":"string"},"text_format_preset_id":{"description":"text_format_preset_id","type":"string"},"text_only_place":{"description":"text_only_place","type":"string"},"thumbnail":{"description":"thumbnail","type":"string"},"time_since_original_post":{"description":"time_since_original_post","type":"integer"},"title":{"description":"title","type":"string"},"tracking_info":{"description":"tracking_info","type":"string"},"unpublished_content_type":{"description":"unpublished_content_type (enum: pagefeed_unpublished_content_type_enum_param)","type":"string"},"user_selected_tags":{"description":"user_selected_tags","type":"boolean"},"video_start_time_ms":{"description":"video_start_time_ms","type":"integer"},"viewer_coordinates":{"additionalProperties":true,"description":"viewer_coordinates","type":"object"},"width":{"description":"width","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_POST_feedHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_global_brand_children",
			"GET global_brand_children for Page. Returns Page",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_global_brand_childrenHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_image_copyrights",
			"GET image_copyrights for Page. Returns ImageCopyright",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_image_copyrightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_image_copyrights",
			"POST image_copyrights for Page. Returns ImageCopyright. Parameters: artist (string), attribution_link (string), creator (string), custom_id (string), description (string), filename (string) [required], geo_ownership (list<pageimage_copyrights_geo_ownership_enum_param>) [required], original_content_creation_date (unsigned int), reference_photo (string) [required], title (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"artist":{"description":"artist","type":"string"},"attribution_link":{"description":"attribution_link","type":"string"},"creator":{"description":"creator","type":"string"},"custom_id":{"description":"custom_id","type":"string"},"description":{"description":"description","type":"string"},"filename":{"description":"filename","type":"string"},"geo_ownership":{"description":"geo_ownership","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"original_content_creation_date":{"description":"original_content_creation_date","type":"integer"},"reference_photo":{"description":"reference_photo","type":"string"},"title":{"description":"title","type":"string"}},"required":["id","filename","geo_ownership","reference_photo"],"type":"object"}`),
		),
		Page_POST_image_copyrightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_indexed_videos",
			"GET indexed_videos for Page. Returns AdVideo",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_indexed_videosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_insights",
			"GET insights for Page. Returns InsightsResult. Parameters: breakdown (list<Object>), date_preset (pageinsights_date_preset_enum_param), metric (list<Object>), period (pageinsights_period_enum_param), show_description_from_api_doc (bool), since (datetime), until (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"breakdown":{"description":"breakdown","items":{"additionalProperties":true,"type":"object"},"type":"array"},"date_preset":{"description":"date_preset (enum: pageinsights_date_preset_enum_param)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"metric":{"description":"metric","items":{"additionalProperties":true,"type":"object"},"type":"array"},"period":{"description":"period (enum: pageinsights_period_enum_param)","type":"string"},"show_description_from_api_doc":{"description":"show_description_from_api_doc","type":"boolean"},"since":{"description":"since","type":"string"},"until":{"description":"until","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_insightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_instagram_accounts",
			"GET instagram_accounts for Page. Returns IGUser",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_instagram_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_leadgen_forms",
			"GET leadgen_forms for Page. Returns LeadgenForm",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_leadgen_formsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_leadgen_forms",
			"POST leadgen_forms for Page. Returns LeadgenForm. Parameters: allow_organic_lead_retrieval (bool), block_display_for_non_targeted_viewer (bool), context_card (Object), cover_photo (file), custom_disclaimer (Object), follow_up_action_url (string), is_for_canvas (bool), is_optimized_for_quality (bool), locale (pageleadgen_forms_locale_enum_param), name (string) [required], privacy_policy (Object), question_page_custom_headline (string), questions (list<Object>) [required], thank_you_page (Object), tracking_parameters (map), upload_gated_file (file)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"allow_organic_lead_retrieval":{"description":"allow_organic_lead_retrieval","type":"boolean"},"block_display_for_non_targeted_viewer":{"description":"block_display_for_non_targeted_viewer","type":"boolean"},"context_card":{"additionalProperties":true,"description":"context_card","type":"object"},"cover_photo":{"description":"cover_photo","type":"string"},"custom_disclaimer":{"additionalProperties":true,"description":"custom_disclaimer","type":"object"},"follow_up_action_url":{"description":"follow_up_action_url","type":"string"},"id":{"description":"Page ID","type":"string"},"is_for_canvas":{"description":"is_for_canvas","type":"boolean"},"is_optimized_for_quality":{"description":"is_optimized_for_quality","type":"boolean"},"locale":{"description":"locale (enum: pageleadgen_forms_locale_enum_param)","type":"string"},"name":{"description":"name","type":"string"},"privacy_policy":{"additionalProperties":true,"description":"privacy_policy","type":"object"},"question_page_custom_headline":{"description":"question_page_custom_headline","type":"string"},"questions":{"description":"questions","items":{"additionalProperties":true,"type":"object"},"type":"array"},"thank_you_page":{"additionalProperties":true,"description":"thank_you_page","type":"object"},"tracking_parameters":{"description":"tracking_parameters","type":"string"},"upload_gated_file":{"description":"upload_gated_file","type":"string"}},"required":["id","name","questions"],"type":"object"}`),
		),
		Page_POST_leadgen_formsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_likes",
			"GET likes for Page. Returns Page. Parameters: target_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"target_id":{"description":"target_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_likesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_live_videos",
			"GET live_videos for Page. Returns LiveVideo. Parameters: broadcast_status (list<pagelive_videos_broadcast_status_enum_param>), source (pagelive_videos_source_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"broadcast_status":{"description":"broadcast_status","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"source":{"description":"source (enum: pagelive_videos_source_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_live_videosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_live_videos",
			"POST live_videos for Page. Returns LiveVideo. Parameters: content_tags (list<string>), crossposting_actions (list<map>), custom_labels (list<string>), description (string), enable_backup_ingest (bool), encoding_settings (string), event_params (Object), fisheye_video_cropped (bool), front_z_rotation (float), game_show (map), is_audio_only (bool), is_spherical (bool), original_fov (unsigned int), privacy (string), projection (pagelive_videos_projection_enum_param), published (bool), schedule_custom_profile_image (file), spatial_audio_format (pagelive_videos_spatial_audio_format_enum_param), status (pagelive_videos_status_enum_param), stereoscopic_mode (pagelive_videos_stereoscopic_mode_enum_param), stop_on_delete_stream (bool), stream_type (pagelive_videos_stream_type_enum_param), targeting (Object), title (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"content_tags":{"description":"content_tags","items":{"type":"string"},"type":"array"},"crossposting_actions":{"description":"crossposting_actions","items":{"additionalProperties":true,"type":"object"},"type":"array"},"custom_labels":{"description":"custom_labels","items":{"type":"string"},"type":"array"},"description":{"description":"description","type":"string"},"enable_backup_ingest":{"description":"enable_backup_ingest","type":"boolean"},"encoding_settings":{"description":"encoding_settings","type":"string"},"event_params":{"additionalProperties":true,"description":"event_params","type":"object"},"fisheye_video_cropped":{"description":"fisheye_video_cropped","type":"boolean"},"front_z_rotation":{"description":"front_z_rotation","type":"number"},"game_show":{"description":"game_show","type":"string"},"id":{"description":"Page ID","type":"string"},"is_audio_only":{"description":"is_audio_only","type":"boolean"},"is_spherical":{"description":"is_spherical","type":"boolean"},"original_fov":{"description":"original_fov","type":"integer"},"privacy":{"description":"privacy","type":"string"},"projection":{"description":"projection (enum: pagelive_videos_projection_enum_param)","type":"string"},"published":{"description":"published","type":"boolean"},"schedule_custom_profile_image":{"description":"schedule_custom_profile_image","type":"string"},"spatial_audio_format":{"description":"spatial_audio_format (enum: pagelive_videos_spatial_audio_format_enum_param)","type":"string"},"status":{"description":"status (enum: pagelive_videos_status_enum_param)","type":"string"},"stereoscopic_mode":{"description":"stereoscopic_mode (enum: pagelive_videos_stereoscopic_mode_enum_param)","type":"string"},"stop_on_delete_stream":{"description":"stop_on_delete_stream","type":"boolean"},"stream_type":{"description":"stream_type (enum: pagelive_videos_stream_type_enum_param)","type":"string"},"targeting":{"additionalProperties":true,"description":"targeting","type":"object"},"title":{"description":"title","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Page_POST_live_videosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_DELETE_locations",
			"DELETE locations for Page. Returns Object. Parameters: location_page_ids (list<string>) [required], store_numbers (list<unsigned int>) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"location_page_ids":{"description":"location_page_ids","items":{"type":"string"},"type":"array"},"store_numbers":{"description":"store_numbers","items":{"type":"integer"},"type":"array"}},"required":["id","location_page_ids","store_numbers"],"type":"object"}`),
		),
		Page_DELETE_locationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_locations",
			"GET locations for Page. Returns Page",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_locationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_locations",
			"POST locations for Page. Returns Page. Parameters: always_open (bool), delivery_and_pickup_option_info (list<string>), differently_open_offerings (map), hours (map), ignore_warnings (bool), location (Object), location_page_id (string), old_store_number (unsigned int), page_username (string), permanently_closed (bool), phone (string), pickup_options (list<pagelocations_pickup_options_enum_param>), place_topics (list<string>), price_range (string), store_code (string), store_location_descriptor (string), store_name (string), store_number (unsigned int) [required], temporary_status (pagelocations_temporary_status_enum_param), website (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"always_open":{"description":"always_open","type":"boolean"},"delivery_and_pickup_option_info":{"description":"delivery_and_pickup_option_info","items":{"type":"string"},"type":"array"},"differently_open_offerings":{"description":"differently_open_offerings","type":"string"},"hours":{"description":"hours","type":"string"},"id":{"description":"Page ID","type":"string"},"ignore_warnings":{"description":"ignore_warnings","type":"boolean"},"location":{"additionalProperties":true,"description":"location","type":"object"},"location_page_id":{"description":"location_page_id","type":"string"},"old_store_number":{"description":"old_store_number","type":"integer"},"page_username":{"description":"page_username","type":"string"},"permanently_closed":{"description":"permanently_closed","type":"boolean"},"phone":{"description":"phone","type":"string"},"pickup_options":{"description":"pickup_options","items":{"type":"string"},"type":"array"},"place_topics":{"description":"place_topics","items":{"type":"string"},"type":"array"},"price_range":{"description":"price_range","type":"string"},"store_code":{"description":"store_code","type":"string"},"store_location_descriptor":{"description":"store_location_descriptor","type":"string"},"store_name":{"description":"store_name","type":"string"},"store_number":{"description":"store_number","type":"integer"},"temporary_status":{"description":"temporary_status (enum: pagelocations_temporary_status_enum_param)","type":"string"},"website":{"description":"website","type":"string"}},"required":["id","store_number"],"type":"object"}`),
		),
		Page_POST_locationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_media_fingerprints",
			"GET media_fingerprints for Page. Returns MediaFingerprint. Parameters: universal_content_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"universal_content_id":{"description":"universal_content_id","type":"string"}},"type":"object"}`),
		),
		Page_GET_media_fingerprintsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_media_fingerprints",
			"POST media_fingerprints for Page. Returns MediaFingerprint. Parameters: fingerprint_content_type (pagemedia_fingerprints_fingerprint_content_type_enum_param) [required], metadata (list) [required], source (string) [required], title (string) [required], universal_content_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"fingerprint_content_type":{"description":"fingerprint_content_type (enum: pagemedia_fingerprints_fingerprint_content_type_enum_param)","type":"string"},"metadata":{"description":"metadata","type":"string"},"source":{"description":"source","type":"string"},"title":{"description":"title","type":"string"},"universal_content_id":{"description":"universal_content_id","type":"string"}},"required":["fingerprint_content_type","metadata","source","title"],"type":"object"}`),
		),
		Page_POST_media_fingerprintsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_message_attachments",
			"POST message_attachments for Page. Returns Object. Parameters: message (Object) [required], platform (pagemessage_attachments_platform_enum_param)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"message":{"additionalProperties":true,"description":"message","type":"object"},"platform":{"description":"platform (enum: pagemessage_attachments_platform_enum_param)","type":"string"}},"required":["message"],"type":"object"}`),
		),
		Page_POST_message_attachmentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_DELETE_message_templates",
			"DELETE message_templates for Page. Returns Object. Parameters: name (string) [required], template_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"name":{"description":"name","type":"string"},"template_id":{"description":"template_id","type":"string"}},"required":["name"],"type":"object"}`),
		),
		Page_DELETE_message_templatesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_message_templates",
			"GET message_templates for Page. Returns MessengerBusinessTemplate. Parameters: category (list<pagemessage_templates_category_enum_param>), content (string), language (list<string>), name (string), name_or_content (string), status (list<pagemessage_templates_status_enum_param>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"category":{"description":"category","items":{"type":"string"},"type":"array"},"content":{"description":"content","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"language":{"description":"language","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"name":{"description":"name","type":"string"},"name_or_content":{"description":"name_or_content","type":"string"},"status":{"description":"status","items":{"type":"string"},"type":"array"}},"type":"object"}`),
		),
		Page_GET_message_templatesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_message_templates",
			"POST message_templates for Page. Returns Page. Parameters: category (pagemessage_templates_category_enum_param) [required], components (list<map>), language (string) [required], library_template_button_inputs (list<map>), library_template_name (string), name (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"category":{"description":"category (enum: pagemessage_templates_category_enum_param)","type":"string"},"components":{"description":"components","items":{"additionalProperties":true,"type":"object"},"type":"array"},"language":{"description":"language","type":"string"},"library_template_button_inputs":{"description":"library_template_button_inputs","items":{"additionalProperties":true,"type":"object"},"type":"array"},"library_template_name":{"description":"library_template_name","type":"string"},"name":{"description":"name","type":"string"}},"required":["category","language","name"],"type":"object"}`),
		),
		Page_POST_message_templatesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_messages",
			"POST messages for Page. Returns Page. Parameters: message (Object), messaging_type (pagemessages_messaging_type_enum_param), notification_type (pagemessages_notification_type_enum_param), payload (string), persona_id (string), recipient (Object) [required], reply_to (string), sender_action (pagemessages_sender_action_enum_param), suggestion_action (pagemessages_suggestion_action_enum_param), tag (Object), thread_control (Object)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"message":{"additionalProperties":true,"description":"message","type":"object"},"messaging_type":{"description":"messaging_type (enum: pagemessages_messaging_type_enum_param)","type":"string"},"notification_type":{"description":"notification_type (enum: pagemessages_notification_type_enum_param)","type":"string"},"payload":{"description":"payload","type":"string"},"persona_id":{"description":"persona_id","type":"string"},"recipient":{"additionalProperties":true,"description":"recipient","type":"object"},"reply_to":{"description":"reply_to","type":"string"},"sender_action":{"description":"sender_action (enum: pagemessages_sender_action_enum_param)","type":"string"},"suggestion_action":{"description":"suggestion_action (enum: pagemessages_suggestion_action_enum_param)","type":"string"},"tag":{"additionalProperties":true,"description":"tag","type":"object"},"thread_control":{"additionalProperties":true,"description":"thread_control","type":"object"}},"required":["recipient"],"type":"object"}`),
		),
		Page_POST_messagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_messaging_feature_review",
			"GET messaging_feature_review for Page. Returns MessagingFeatureReview",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Page_GET_messaging_feature_reviewHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_messenger_call_settings",
			"GET messenger_call_settings for Page. Returns MessengerCallSettings",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Page_GET_messenger_call_settingsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_messenger_call_settings",
			"POST messenger_call_settings for Page. Returns Page. Parameters: audio_enabled (bool), call_hours (map), call_routing (map), icon_enabled (bool)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"audio_enabled":{"description":"audio_enabled","type":"boolean"},"call_hours":{"description":"call_hours","type":"string"},"call_routing":{"description":"call_routing","type":"string"},"icon_enabled":{"description":"icon_enabled","type":"boolean"}},"type":"object"}`),
		),
		Page_POST_messenger_call_settingsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_messenger_lead_forms",
			"GET messenger_lead_forms for Page. Returns MessengerAdsPartialAutomatedStepList",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Page_GET_messenger_lead_formsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_messenger_lead_forms",
			"POST messenger_lead_forms for Page. Returns Page. Parameters: account_id (unsigned int), block_send_api (bool), exit_keyphrases (string), handover_app_id (unsigned int), handover_summary (bool), privacy_url (string), reminder_text (string), step_list (list<map>) [required], stop_question_message (string), template_name (string), tracking_parameters (map)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"account_id":{"description":"account_id","type":"integer"},"block_send_api":{"description":"block_send_api","type":"boolean"},"exit_keyphrases":{"description":"exit_keyphrases","type":"string"},"handover_app_id":{"description":"handover_app_id","type":"integer"},"handover_summary":{"description":"handover_summary","type":"boolean"},"privacy_url":{"description":"privacy_url","type":"string"},"reminder_text":{"description":"reminder_text","type":"string"},"step_list":{"description":"step_list","items":{"additionalProperties":true,"type":"object"},"type":"array"},"stop_question_message":{"description":"stop_question_message","type":"string"},"template_name":{"description":"template_name","type":"string"},"tracking_parameters":{"description":"tracking_parameters","type":"string"}},"required":["step_list"],"type":"object"}`),
		),
		Page_POST_messenger_lead_formsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_DELETE_messenger_profile",
			"DELETE messenger_profile for Page. Returns Object. Parameters: fields (list<pagemessenger_profile_fields_enum_param>) [required], platform (pagemessenger_profile_platform_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"platform":{"description":"platform (enum: pagemessenger_profile_platform_enum_param)","type":"string"}},"required":["fields"],"type":"object"}`),
		),
		Page_DELETE_messenger_profileHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_messenger_profile",
			"GET messenger_profile for Page. Returns MessengerProfile. Parameters: platform (pagemessenger_profile_platform_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"platform":{"description":"platform (enum: pagemessenger_profile_platform_enum_param)","type":"string"}},"type":"object"}`),
		),
		Page_GET_messenger_profileHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_messenger_profile",
			"POST messenger_profile for Page. Returns Page. Parameters: account_linking_url (string), commands (list<Object>), description (list<Object>), get_started (Object), greeting (list<Object>), ice_breakers (list<map>), persistent_menu (list<Object>), platform (pagemessenger_profile_platform_enum_param), title (list<Object>), whitelisted_domains (list<string>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"account_linking_url":{"description":"account_linking_url","type":"string"},"commands":{"description":"commands","items":{"additionalProperties":true,"type":"object"},"type":"array"},"description":{"description":"description","items":{"additionalProperties":true,"type":"object"},"type":"array"},"get_started":{"additionalProperties":true,"description":"get_started","type":"object"},"greeting":{"description":"greeting","items":{"additionalProperties":true,"type":"object"},"type":"array"},"ice_breakers":{"description":"ice_breakers","items":{"additionalProperties":true,"type":"object"},"type":"array"},"persistent_menu":{"description":"persistent_menu","items":{"additionalProperties":true,"type":"object"},"type":"array"},"platform":{"description":"platform (enum: pagemessenger_profile_platform_enum_param)","type":"string"},"title":{"description":"title","items":{"additionalProperties":true,"type":"object"},"type":"array"},"whitelisted_domains":{"description":"whitelisted_domains","items":{"type":"string"},"type":"array"}},"type":"object"}`),
		),
		Page_POST_messenger_profileHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_moderate_conversations",
			"POST moderate_conversations for Page. Returns Page. Parameters: actions (list<pagemoderate_conversations_actions_enum_param>) [required], user_ids (list<map>) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"actions":{"description":"actions","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"user_ids":{"description":"user_ids","items":{"additionalProperties":true,"type":"object"},"type":"array"}},"required":["id","actions","user_ids"],"type":"object"}`),
		),
		Page_POST_moderate_conversationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_nlp_configs",
			"POST nlp_configs for Page. Returns Page. Parameters: api_version (Object), custom_token (string), model (pagenlp_configs_model_enum_param), n_best (unsigned int), nlp_enabled (bool), other_language_support (map), verbose (bool)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"api_version":{"additionalProperties":true,"description":"api_version","type":"object"},"custom_token":{"description":"custom_token","type":"string"},"id":{"description":"Page ID","type":"string"},"model":{"description":"model (enum: pagenlp_configs_model_enum_param)","type":"string"},"n_best":{"description":"n_best","type":"integer"},"nlp_enabled":{"description":"nlp_enabled","type":"boolean"},"other_language_support":{"description":"other_language_support","type":"string"},"verbose":{"description":"verbose","type":"boolean"}},"required":["id"],"type":"object"}`),
		),
		Page_POST_nlp_configsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_notification_message_tokens",
			"GET notification_message_tokens for Page. Returns UserPageOneTimeOptInTokenSettings",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Page_GET_notification_message_tokensHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_notification_messages_dev_support",
			"POST notification_messages_dev_support for Page. Returns Page. Parameters: developer_action (pagenotification_messages_dev_support_developer_action_enum_param) [required], recipient (Object) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"developer_action":{"description":"developer_action (enum: pagenotification_messages_dev_support_developer_action_enum_param)","type":"string"},"recipient":{"additionalProperties":true,"description":"recipient","type":"object"}},"required":["developer_action","recipient"],"type":"object"}`),
		),
		Page_POST_notification_messages_dev_supportHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_page_backed_instagram_accounts",
			"GET page_backed_instagram_accounts for Page. Returns IGUser",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Page_GET_page_backed_instagram_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_page_backed_instagram_accounts",
			"POST page_backed_instagram_accounts for Page. Returns IGUser",
			json.RawMessage(`{"additionalProperties":false,"properties":{},"type":"object"}`),
		),
		Page_POST_page_backed_instagram_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_page_whatsapp_number_verification",
			"POST page_whatsapp_number_verification for Page. Returns Page. Parameters: verification_code (string), whatsapp_number (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"verification_code":{"description":"verification_code","type":"string"},"whatsapp_number":{"description":"whatsapp_number","type":"string"}},"required":["whatsapp_number"],"type":"object"}`),
		),
		Page_POST_page_whatsapp_number_verificationHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_pass_thread_control",
			"POST pass_thread_control for Page. Returns Page. Parameters: metadata (string), recipient (Object) [required], target_app_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Page ID","type":"string"},"metadata":{"description":"metadata","type":"string"},"recipient":{"additionalProperties":true,"description":"recipient","type":"object"},"target_app_id":{"description":"target_app_id","type":"string"}},"required":["id","recipient"],"type":"object"}`),
		),
		Page_POST_pass_thread_controlHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_personas",
			"GET personas for Page. Returns Persona",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_personasHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_personas",
			"POST personas for Page. Returns Persona. Parameters: name (string) [required], profile_picture_url (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Page ID","type":"string"},"name":{"description":"name","type":"string"},"profile_picture_url":{"description":"profile_picture_url","type":"string"}},"required":["id","name","profile_picture_url"],"type":"object"}`),
		),
		Page_POST_personasHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_photo_stories",
			"POST photo_stories for Page. Returns Page. Parameters: photo_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Page ID","type":"string"},"photo_id":{"description":"photo_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Page_POST_photo_storiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_photos",
			"GET photos for Page. Returns Photo. Parameters: biz_tag_id (unsigned int), business_id (string), type (pagephotos_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"biz_tag_id":{"description":"biz_tag_id","type":"integer"},"business_id":{"description":"business_id","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: pagephotos_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_photosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_photos",
			"POST photos for Page. Returns Photo. Parameters: aid (string), allow_spherical_photo (bool), alt_text_custom (string), android_key_hash (string), application_id (string), attempt (unsigned int), audience_exp (bool), backdated_time (datetime), backdated_time_granularity (pagephotos_backdated_time_granularity_enum_param), caption (string), composer_session_id (string), direct_share_status (unsigned int), feed_targeting (Object), filter_type (unsigned int), full_res_is_coming_later (bool), initial_view_heading_override_degrees (unsigned int), initial_view_pitch_override_degrees (unsigned int), initial_view_vertical_fov_override_degrees (unsigned int), ios_bundle_id (string), is_explicit_location (bool), is_explicit_place (bool), location_source_id (string), manual_privacy (bool), message (string), name (string), nectar_module (string), no_story (bool), offline_id (unsigned int), og_action_type_id (string), og_icon_id (string), og_object_id (string), og_phrase (string), og_set_profile_badge (bool), og_suggestion_mechanism (string), parent_media_id (unsigned int), place (Object), privacy (string), profile_id (int), provenance_info (map), proxied_app_id (string), published (bool), qn (string), scheduled_publish_time (unsigned int), spherical_metadata (map), sponsor_id (string), sponsor_relationship (unsigned int), tags (list<Object>), target_id (int), targeting (Object), temporary (bool), time_since_original_post (unsigned int), uid (int), unpublished_content_type (pagephotos_unpublished_content_type_enum_param), url (string), user_selected_tags (bool), vault_image_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"aid":{"description":"aid","type":"string"},"allow_spherical_photo":{"description":"allow_spherical_photo","type":"boolean"},"alt_text_custom":{"description":"alt_text_custom","type":"string"},"android_key_hash":{"description":"android_key_hash","type":"string"},"application_id":{"description":"application_id","type":"string"},"attempt":{"description":"attempt","type":"integer"},"audience_exp":{"description":"audience_exp","type":"boolean"},"backdated_time":{"description":"backdated_time","type":"string"},"backdated_time_granularity":{"description":"backdated_time_granularity (enum: pagephotos_backdated_time_granularity_enum_param)","type":"string"},"caption":{"description":"caption","type":"string"},"composer_session_id":{"description":"composer_session_id","type":"string"},"direct_share_status":{"description":"direct_share_status","type":"integer"},"feed_targeting":{"additionalProperties":true,"description":"feed_targeting","type":"object"},"filter_type":{"description":"filter_type","type":"integer"},"full_res_is_coming_later":{"description":"full_res_is_coming_later","type":"boolean"},"id":{"description":"Page ID","type":"string"},"initial_view_heading_override_degrees":{"description":"initial_view_heading_override_degrees","type":"integer"},"initial_view_pitch_override_degrees":{"description":"initial_view_pitch_override_degrees","type":"integer"},"initial_view_vertical_fov_override_degrees":{"description":"initial_view_vertical_fov_override_degrees","type":"integer"},"ios_bundle_id":{"description":"ios_bundle_id","type":"string"},"is_explicit_location":{"description":"is_explicit_location","type":"boolean"},"is_explicit_place":{"description":"is_explicit_place","type":"boolean"},"location_source_id":{"description":"location_source_id","type":"string"},"manual_privacy":{"description":"manual_privacy","type":"boolean"},"message":{"description":"message","type":"string"},"name":{"description":"name","type":"string"},"nectar_module":{"description":"nectar_module","type":"string"},"no_story":{"description":"no_story","type":"boolean"},"offline_id":{"description":"offline_id","type":"integer"},"og_action_type_id":{"description":"og_action_type_id","type":"string"},"og_icon_id":{"description":"og_icon_id","type":"string"},"og_object_id":{"description":"og_object_id","type":"string"},"og_phrase":{"description":"og_phrase","type":"string"},"og_set_profile_badge":{"description":"og_set_profile_badge","type":"boolean"},"og_suggestion_mechanism":{"description":"og_suggestion_mechanism","type":"string"},"parent_media_id":{"description":"parent_media_id","type":"integer"},"place":{"additionalProperties":true,"description":"place","type":"object"},"privacy":{"description":"privacy","type":"string"},"profile_id":{"description":"profile_id","type":"integer"},"provenance_info":{"description":"provenance_info","type":"string"},"proxied_app_id":{"description":"proxied_app_id","type":"string"},"published":{"description":"published","type":"boolean"},"qn":{"description":"qn","type":"string"},"scheduled_publish_time":{"description":"scheduled_publish_time","type":"integer"},"spherical_metadata":{"description":"spherical_metadata","type":"string"},"sponsor_id":{"description":"sponsor_id","type":"string"},"sponsor_relationship":{"description":"sponsor_relationship","type":"integer"},"tags":{"description":"tags","items":{"additionalProperties":true,"type":"object"},"type":"array"},"target_id":{"description":"target_id","type":"integer"},"targeting":{"additionalProperties":true,"description":"targeting","type":"object"},"temporary":{"description":"temporary","type":"boolean"},"time_since_original_post":{"description":"time_since_original_post","type":"integer"},"uid":{"description":"uid","type":"integer"},"unpublished_content_type":{"description":"unpublished_content_type (enum: pagephotos_unpublished_content_type_enum_param)","type":"string"},"url":{"description":"url","type":"string"},"user_selected_tags":{"description":"user_selected_tags","type":"boolean"},"vault_image_id":{"description":"vault_image_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Page_POST_photosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_picture",
			"GET picture for Page. Returns ProfilePictureSource. Parameters: height (int), redirect (bool), type (pagepicture_type_enum_param), width (int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"height":{"description":"height","type":"integer"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"redirect":{"description":"redirect","type":"boolean"},"type":{"description":"type (enum: pagepicture_type_enum_param)","type":"string"},"width":{"description":"width","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_pictureHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_picture",
			"POST picture for Page. Returns ProfilePictureSource. Parameters: android_key_hash (string), burn_media_effect (bool), caption (string), composer_session_id (string), frame_entrypoint (string), has_umg (bool), height (unsigned int), ios_bundle_id (string), media_effect_ids (list<int>), media_effect_source_object_id (int), msqrd_mask_id (string), photo (string), picture (string), profile_pic_method (string), profile_pic_source (string), proxied_app_id (int), qn (string), reuse (bool), scaled_crop_rect (Object), set_profile_photo_shield (string), sticker_id (int), sticker_source_object_id (int), suppress_stories (bool), width (unsigned int), x (unsigned int), y (unsigned int)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"android_key_hash":{"description":"android_key_hash","type":"string"},"burn_media_effect":{"description":"burn_media_effect","type":"boolean"},"caption":{"description":"caption","type":"string"},"composer_session_id":{"description":"composer_session_id","type":"string"},"frame_entrypoint":{"description":"frame_entrypoint","type":"string"},"has_umg":{"description":"has_umg","type":"boolean"},"height":{"description":"height","type":"integer"},"id":{"description":"Page ID","type":"string"},"ios_bundle_id":{"description":"ios_bundle_id","type":"string"},"media_effect_ids":{"description":"media_effect_ids","items":{"type":"integer"},"type":"array"},"media_effect_source_object_id":{"description":"media_effect_source_object_id","type":"integer"},"msqrd_mask_id":{"description":"msqrd_mask_id","type":"string"},"photo":{"description":"photo","type":"string"},"picture":{"description":"picture","type":"string"},"profile_pic_method":{"description":"profile_pic_method","type":"string"},"profile_pic_source":{"description":"profile_pic_source","type":"string"},"proxied_app_id":{"description":"proxied_app_id","type":"integer"},"qn":{"description":"qn","type":"string"},"reuse":{"description":"reuse","type":"boolean"},"scaled_crop_rect":{"additionalProperties":true,"description":"scaled_crop_rect","type":"object"},"set_profile_photo_shield":{"description":"set_profile_photo_shield","type":"string"},"sticker_id":{"description":"sticker_id","type":"integer"},"sticker_source_object_id":{"description":"sticker_source_object_id","type":"integer"},"suppress_stories":{"description":"suppress_stories","type":"boolean"},"width":{"description":"width","type":"integer"},"x":{"description":"x","type":"integer"},"y":{"description":"y","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_POST_pictureHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_posts",
			"GET posts for Page. Returns PagePost. Parameters: include_hidden (bool), limit (unsigned int), q (string), show_expired (bool), with (pageposts_with_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"include_hidden":{"description":"include_hidden","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"q":{"description":"q","type":"string"},"show_expired":{"description":"show_expired","type":"boolean"},"with":{"description":"with (enum: pageposts_with_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_postsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_product_catalogs",
			"GET product_catalogs for Page. Returns ProductCatalog",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_product_catalogsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_published_posts",
			"GET published_posts for Page. Returns PagePost. Parameters: include_hidden (bool), limit (unsigned int), show_expired (bool), with (pagepublished_posts_with_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"include_hidden":{"description":"include_hidden","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"show_expired":{"description":"show_expired","type":"boolean"},"with":{"description":"with (enum: pagepublished_posts_with_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_published_postsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_release_thread_control",
			"POST release_thread_control for Page. Returns Page. Parameters: recipient (Object) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Page ID","type":"string"},"recipient":{"additionalProperties":true,"description":"recipient","type":"object"}},"required":["id","recipient"],"type":"object"}`),
		),
		Page_POST_release_thread_controlHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_request_thread_control",
			"POST request_thread_control for Page. Returns Page. Parameters: metadata (string), recipient (Object) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Page ID","type":"string"},"metadata":{"description":"metadata","type":"string"},"recipient":{"additionalProperties":true,"description":"recipient","type":"object"}},"required":["id","recipient"],"type":"object"}`),
		),
		Page_POST_request_thread_controlHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_roles",
			"GET roles for Page. Returns User. Parameters: include_deactivated (bool), uid (int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"include_deactivated":{"description":"include_deactivated","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"uid":{"description":"uid","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_rolesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_rtb_dynamic_posts",
			"GET rtb_dynamic_posts for Page. Returns RTBDynamicPost",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_rtb_dynamic_postsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_scheduled_posts",
			"GET scheduled_posts for Page. Returns PagePost",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_scheduled_postsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_secondary_receivers",
			"GET secondary_receivers for Page. Returns Application. Parameters: platform (pagesecondary_receivers_platform_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"platform":{"description":"platform (enum: pagesecondary_receivers_platform_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_secondary_receiversHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_settings",
			"GET settings for Page. Returns PageSettings",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_settingsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_settings",
			"POST settings for Page. Returns Page. Parameters: option (Object)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Page ID","type":"string"},"option":{"additionalProperties":true,"description":"option","type":"object"}},"required":["id"],"type":"object"}`),
		),
		Page_POST_settingsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_shop_setup_status",
			"GET shop_setup_status for Page. Returns CommerceMerchantSettingsSetupStatus",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_shop_setup_statusHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_store_locations",
			"GET store_locations for Page. Returns StoreLocation",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_store_locationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_stories",
			"GET stories for Page. Returns Stories. Parameters: since (datetime), status (list<pagestories_status_enum_param>), until (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"since":{"description":"since","type":"string"},"status":{"description":"status","items":{"type":"string"},"type":"array"},"until":{"description":"until","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_storiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_DELETE_subscribed_apps",
			"DELETE subscribed_apps for Page. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_DELETE_subscribed_appsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_subscribed_apps",
			"GET subscribed_apps for Page. Returns Application",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_subscribed_appsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_subscribed_apps",
			"POST subscribed_apps for Page. Returns Page. Parameters: subscribed_fields (list<pagesubscribed_apps_subscribed_fields_enum_param>) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Page ID","type":"string"},"subscribed_fields":{"description":"subscribed_fields","items":{"type":"string"},"type":"array"}},"required":["id","subscribed_fields"],"type":"object"}`),
		),
		Page_POST_subscribed_appsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_tabs",
			"GET tabs for Page. Returns Tab. Parameters: tab (list<string>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"tab":{"description":"tab","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_tabsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_tagged",
			"GET tagged for Page. Returns PagePost",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_taggedHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_take_thread_control",
			"POST take_thread_control for Page. Returns Page. Parameters: metadata (string), recipient (Object) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Page ID","type":"string"},"metadata":{"description":"metadata","type":"string"},"recipient":{"additionalProperties":true,"description":"recipient","type":"object"}},"required":["id","recipient"],"type":"object"}`),
		),
		Page_POST_take_thread_controlHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_thread_owner",
			"GET thread_owner for Page. Returns PageThreadOwner. Parameters: recipient (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"recipient":{"description":"recipient","type":"string"}},"required":["id","recipient"],"type":"object"}`),
		),
		Page_GET_thread_ownerHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_threads",
			"GET threads for Page. Returns UnifiedThread. Parameters: folder (string), platform (pagethreads_platform_enum_param), tags (list<string>), user_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"folder":{"description":"folder","type":"string"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"platform":{"description":"platform (enum: pagethreads_platform_enum_param)","type":"string"},"tags":{"description":"tags","items":{"type":"string"},"type":"array"},"user_id":{"description":"user_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_threadsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_unlink_accounts",
			"POST unlink_accounts for Page. Returns Page. Parameters: psid (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"Page ID","type":"string"},"psid":{"description":"psid","type":"string"}},"required":["id","psid"],"type":"object"}`),
		),
		Page_POST_unlink_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_video_copyright_rules",
			"GET video_copyright_rules for Page. Returns VideoCopyrightRule. Parameters: selected_rule_id (string), source (pagevideo_copyright_rules_source_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"selected_rule_id":{"description":"selected_rule_id","type":"string"},"source":{"description":"source (enum: pagevideo_copyright_rules_source_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_video_copyright_rulesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_video_copyright_rules",
			"POST video_copyright_rules for Page. Returns VideoCopyrightRule. Parameters: condition_groups (list<Object>) [required], name (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"condition_groups":{"description":"condition_groups","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"Page ID","type":"string"},"name":{"description":"name","type":"string"}},"required":["id","condition_groups","name"],"type":"object"}`),
		),
		Page_POST_video_copyright_rulesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_video_copyrights",
			"POST video_copyrights for Page. Returns VideoCopyright. Parameters: attribution_id (string), content_category (pagevideo_copyrights_content_category_enum_param), copyright_content_id (string) [required], excluded_ownership_countries (list<string>), excluded_ownership_segments (list<Object>), is_reference_disabled (bool), is_reference_video (bool), monitoring_type (pagevideo_copyrights_monitoring_type_enum_param), ownership_countries (list<string>), rule_id (string), tags (list<string>), whitelisted_ids (list<string>), whitelisted_ig_user_ids (list<string>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"attribution_id":{"description":"attribution_id","type":"string"},"content_category":{"description":"content_category (enum: pagevideo_copyrights_content_category_enum_param)","type":"string"},"copyright_content_id":{"description":"copyright_content_id","type":"string"},"excluded_ownership_countries":{"description":"excluded_ownership_countries","items":{"type":"string"},"type":"array"},"excluded_ownership_segments":{"description":"excluded_ownership_segments","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"Page ID","type":"string"},"is_reference_disabled":{"description":"is_reference_disabled","type":"boolean"},"is_reference_video":{"description":"is_reference_video","type":"boolean"},"monitoring_type":{"description":"monitoring_type (enum: pagevideo_copyrights_monitoring_type_enum_param)","type":"string"},"ownership_countries":{"description":"ownership_countries","items":{"type":"string"},"type":"array"},"rule_id":{"description":"rule_id","type":"string"},"tags":{"description":"tags","items":{"type":"string"},"type":"array"},"whitelisted_ids":{"description":"whitelisted_ids","items":{"type":"string"},"type":"array"},"whitelisted_ig_user_ids":{"description":"whitelisted_ig_user_ids","items":{"type":"string"},"type":"array"}},"required":["id","copyright_content_id"],"type":"object"}`),
		),
		Page_POST_video_copyrightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_video_lists",
			"GET video_lists for Page. Returns VideoList",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_video_listsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_video_reels",
			"GET video_reels for Page. Returns AdVideo. Parameters: since (datetime), until (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"since":{"description":"since","type":"string"},"until":{"description":"until","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_video_reelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_video_reels",
			"POST video_reels for Page. Returns AdVideo. Parameters: description (string), feed_targeting (Object), place (string), scheduled_publish_time (datetime), targeting (Object), title (string), upload_phase (pagevideo_reels_upload_phase_enum_param) [required], video_id (string), video_state (pagevideo_reels_video_state_enum_param)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"description":{"description":"description","type":"string"},"feed_targeting":{"additionalProperties":true,"description":"feed_targeting","type":"object"},"id":{"description":"Page ID","type":"string"},"place":{"description":"place","type":"string"},"scheduled_publish_time":{"description":"scheduled_publish_time","type":"string"},"targeting":{"additionalProperties":true,"description":"targeting","type":"object"},"title":{"description":"title","type":"string"},"upload_phase":{"description":"upload_phase (enum: pagevideo_reels_upload_phase_enum_param)","type":"string"},"video_id":{"description":"video_id","type":"string"},"video_state":{"description":"video_state (enum: pagevideo_reels_video_state_enum_param)","type":"string"}},"required":["id","upload_phase"],"type":"object"}`),
		),
		Page_POST_video_reelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_video_stories",
			"POST video_stories for Page. Returns Object. Parameters: description (string), feed_targeting (Object), place (string), scheduled_publish_time (datetime), targeting (Object), title (string), upload_phase (pagevideo_stories_upload_phase_enum_param) [required], video_id (string), video_state (pagevideo_stories_video_state_enum_param)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"description":{"description":"description","type":"string"},"feed_targeting":{"additionalProperties":true,"description":"feed_targeting","type":"object"},"id":{"description":"Page ID","type":"string"},"place":{"description":"place","type":"string"},"scheduled_publish_time":{"description":"scheduled_publish_time","type":"string"},"targeting":{"additionalProperties":true,"description":"targeting","type":"object"},"title":{"description":"title","type":"string"},"upload_phase":{"description":"upload_phase (enum: pagevideo_stories_upload_phase_enum_param)","type":"string"},"video_id":{"description":"video_id","type":"string"},"video_state":{"description":"video_state (enum: pagevideo_stories_video_state_enum_param)","type":"string"}},"required":["id","upload_phase"],"type":"object"}`),
		),
		Page_POST_video_storiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_videos",
			"GET videos for Page. Returns AdVideo. Parameters: type (pagevideos_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: pagevideos_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_videosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_videos",
			"POST videos for Page. Returns AdVideo. Parameters: ad_breaks (list), application_id (string), asked_fun_fact_prompt_id (unsigned int), audio_story_wave_animation_handle (string), backdated_post (list), call_to_action (Object), composer_entry_picker (string), composer_entry_point (string), composer_entry_time (unsigned int), composer_session_events_log (string), composer_session_id (string), composer_source_surface (string), composer_type (string), container_type (pagevideos_container_type_enum_param), content_category (pagevideos_content_category_enum_param), content_tags (list<string>), creative_tools (string), crossposted_video_id (string), custom_labels (list<string>), description (string), direct_share_status (unsigned int), embeddable (bool), end_offset (unsigned int), expiration (Object), fbuploader_video_file_chunk (string), feed_targeting (Object), file_size (unsigned int), file_url (string), fisheye_video_cropped (bool), formatting (pagevideos_formatting_enum_param), fov (unsigned int), front_z_rotation (float), fun_fact_prompt_id (string), fun_fact_toastee_id (unsigned int), guide (list<list<unsigned int>>), guide_enabled (bool), initial_heading (unsigned int), initial_pitch (unsigned int), instant_game_entry_point_data (string), is_boost_intended (bool), is_explicit_share (bool), is_group_linking_post (bool), is_partnership_ad (bool), is_voice_clip (bool), location_source_id (string), manual_privacy (bool), multilingual_data (list<Object>), no_story (bool), og_action_type_id (string), og_icon_id (string), og_object_id (string), og_phrase (string), og_suggestion_mechanism (string), original_fov (unsigned int), original_projection_type (pagevideos_original_projection_type_enum_param), partnership_ad_ad_code (string), publish_event_id (unsigned int), published (bool), reference_only (bool), referenced_sticker_id (string), replace_video_id (string), scheduled_publish_time (unsigned int), secret (bool), slideshow_spec (map), social_actions (bool), source (string), source_instagram_media_id (string), specified_dialect (string), spherical (bool), sponsor_id (string), sponsor_relationship (unsigned int), start_offset (unsigned int), swap_mode (pagevideos_swap_mode_enum_param), targeting (Object), text_format_metadata (string), thumb (file), time_since_original_post (unsigned int), title (string), transcode_setting_properties (string), universal_video_id (string), unpublished_content_type (pagevideos_unpublished_content_type_enum_param), upload_phase (pagevideos_upload_phase_enum_param), upload_session_id (string), upload_setting_properties (string), video_asset_id (string), video_file_chunk (string), video_id_original (string), video_start_time_ms (unsigned int), waterfall_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"ad_breaks":{"description":"ad_breaks","type":"string"},"application_id":{"description":"application_id","type":"string"},"asked_fun_fact_prompt_id":{"description":"asked_fun_fact_prompt_id","type":"integer"},"audio_story_wave_animation_handle":{"description":"audio_story_wave_animation_handle","type":"string"},"backdated_post":{"description":"backdated_post","type":"string"},"call_to_action":{"additionalProperties":true,"description":"call_to_action","type":"object"},"composer_entry_picker":{"description":"composer_entry_picker","type":"string"},"composer_entry_point":{"description":"composer_entry_point","type":"string"},"composer_entry_time":{"description":"composer_entry_time","type":"integer"},"composer_session_events_log":{"description":"composer_session_events_log","type":"string"},"composer_session_id":{"description":"composer_session_id","type":"string"},"composer_source_surface":{"description":"composer_source_surface","type":"string"},"composer_type":{"description":"composer_type","type":"string"},"container_type":{"description":"container_type (enum: pagevideos_container_type_enum_param)","type":"string"},"content_category":{"description":"content_category (enum: pagevideos_content_category_enum_param)","type":"string"},"content_tags":{"description":"content_tags","items":{"type":"string"},"type":"array"},"creative_tools":{"description":"creative_tools","type":"string"},"crossposted_video_id":{"description":"crossposted_video_id","type":"string"},"custom_labels":{"description":"custom_labels","items":{"type":"string"},"type":"array"},"description":{"description":"description","type":"string"},"direct_share_status":{"description":"direct_share_status","type":"integer"},"embeddable":{"description":"embeddable","type":"boolean"},"end_offset":{"description":"end_offset","type":"integer"},"expiration":{"additionalProperties":true,"description":"expiration","type":"object"},"fbuploader_video_file_chunk":{"description":"fbuploader_video_file_chunk","type":"string"},"feed_targeting":{"additionalProperties":true,"description":"feed_targeting","type":"object"},"file_size":{"description":"file_size","type":"integer"},"file_url":{"description":"file_url","type":"string"},"fisheye_video_cropped":{"description":"fisheye_video_cropped","type":"boolean"},"formatting":{"description":"formatting (enum: pagevideos_formatting_enum_param)","type":"string"},"fov":{"description":"fov","type":"integer"},"front_z_rotation":{"description":"front_z_rotation","type":"number"},"fun_fact_prompt_id":{"description":"fun_fact_prompt_id","type":"string"},"fun_fact_toastee_id":{"description":"fun_fact_toastee_id","type":"integer"},"guide":{"description":"guide","items":{"type":"string"},"type":"array"},"guide_enabled":{"description":"guide_enabled","type":"boolean"},"id":{"description":"Page ID","type":"string"},"initial_heading":{"description":"initial_heading","type":"integer"},"initial_pitch":{"description":"initial_pitch","type":"integer"},"instant_game_entry_point_data":{"description":"instant_game_entry_point_data","type":"string"},"is_boost_intended":{"description":"is_boost_intended","type":"boolean"},"is_explicit_share":{"description":"is_explicit_share","type":"boolean"},"is_group_linking_post":{"description":"is_group_linking_post","type":"boolean"},"is_partnership_ad":{"description":"is_partnership_ad","type":"boolean"},"is_voice_clip":{"description":"is_voice_clip","type":"boolean"},"location_source_id":{"description":"location_source_id","type":"string"},"manual_privacy":{"description":"manual_privacy","type":"boolean"},"multilingual_data":{"description":"multilingual_data","items":{"additionalProperties":true,"type":"object"},"type":"array"},"no_story":{"description":"no_story","type":"boolean"},"og_action_type_id":{"description":"og_action_type_id","type":"string"},"og_icon_id":{"description":"og_icon_id","type":"string"},"og_object_id":{"description":"og_object_id","type":"string"},"og_phrase":{"description":"og_phrase","type":"string"},"og_suggestion_mechanism":{"description":"og_suggestion_mechanism","type":"string"},"original_fov":{"description":"original_fov","type":"integer"},"original_projection_type":{"description":"original_projection_type (enum: pagevideos_original_projection_type_enum_param)","type":"string"},"partnership_ad_ad_code":{"description":"partnership_ad_ad_code","type":"string"},"publish_event_id":{"description":"publish_event_id","type":"integer"},"published":{"description":"published","type":"boolean"},"reference_only":{"description":"reference_only","type":"boolean"},"referenced_sticker_id":{"description":"referenced_sticker_id","type":"string"},"replace_video_id":{"description":"replace_video_id","type":"string"},"scheduled_publish_time":{"description":"scheduled_publish_time","type":"integer"},"secret":{"description":"secret","type":"boolean"},"slideshow_spec":{"description":"slideshow_spec","type":"string"},"social_actions":{"description":"social_actions","type":"boolean"},"source":{"description":"source","type":"string"},"source_instagram_media_id":{"description":"source_instagram_media_id","type":"string"},"specified_dialect":{"description":"specified_dialect","type":"string"},"spherical":{"description":"spherical","type":"boolean"},"sponsor_id":{"description":"sponsor_id","type":"string"},"sponsor_relationship":{"description":"sponsor_relationship","type":"integer"},"start_offset":{"description":"start_offset","type":"integer"},"swap_mode":{"description":"swap_mode (enum: pagevideos_swap_mode_enum_param)","type":"string"},"targeting":{"additionalProperties":true,"description":"targeting","type":"object"},"text_format_metadata":{"description":"text_format_metadata","type":"string"},"thumb":{"description":"thumb","type":"string"},"time_since_original_post":{"description":"time_since_original_post","type":"integer"},"title":{"description":"title","type":"string"},"transcode_setting_properties":{"description":"transcode_setting_properties","type":"string"},"universal_video_id":{"description":"universal_video_id","type":"string"},"unpublished_content_type":{"description":"unpublished_content_type (enum: pagevideos_unpublished_content_type_enum_param)","type":"string"},"upload_phase":{"description":"upload_phase (enum: pagevideos_upload_phase_enum_param)","type":"string"},"upload_session_id":{"description":"upload_session_id","type":"string"},"upload_setting_properties":{"description":"upload_setting_properties","type":"string"},"video_asset_id":{"description":"video_asset_id","type":"string"},"video_file_chunk":{"description":"video_file_chunk","type":"string"},"video_id_original":{"description":"video_id_original","type":"string"},"video_start_time_ms":{"description":"video_start_time_ms","type":"integer"},"waterfall_id":{"description":"waterfall_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Page_POST_videosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_visitor_posts",
			"GET visitor_posts for Page. Returns PagePost. Parameters: include_hidden (bool), limit (unsigned int), show_expired (bool), with (pagevisitor_posts_with_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"include_hidden":{"description":"include_hidden","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"show_expired":{"description":"show_expired","type":"boolean"},"with":{"description":"with (enum: pagevisitor_posts_with_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_visitor_postsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_DELETE_welcome_message_flows",
			"DELETE welcome_message_flows for Page. Returns Object. Parameters: flow_id (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"flow_id":{"description":"flow_id","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["flow_id"],"type":"object"}`),
		),
		Page_DELETE_welcome_message_flowsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_welcome_message_flows",
			"GET welcome_message_flows for Page. Returns CTXPartnerAppWelcomeMessageFlow. Parameters: app_id (string), flow_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"app_id":{"description":"app_id","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"flow_id":{"description":"flow_id","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Page_GET_welcome_message_flowsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_welcome_message_flows",
			"POST welcome_message_flows for Page. Returns Object. Parameters: eligible_platforms (list<pagewelcome_message_flows_eligible_platforms_enum_param>), flow_id (string), name (string), welcome_message_flow (list<Object>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"eligible_platforms":{"description":"eligible_platforms","items":{"type":"string"},"type":"array"},"flow_id":{"description":"flow_id","type":"string"},"name":{"description":"name","type":"string"},"welcome_message_flow":{"description":"welcome_message_flow","items":{"additionalProperties":true,"type":"object"},"type":"array"}},"type":"object"}`),
		),
		Page_POST_welcome_message_flowsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_GET_",
			"GET  for Page. Returns Page. Parameters: account_linking_token (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"account_linking_token":{"description":"account_linking_token","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Page ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Page_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Page_POST_",
			"POST  for Page. Returns Page. Parameters: about (string), accept_crossposting_handshake (list<map>), allow_spherical_photo (bool), attire (page_attire), begin_crossposting_handshake (list<map>), bio (string), category_list (list<string>), company_overview (string), contact_address (Object), cover (string), culinary_team (string), delivery_and_pickup_option_info (list<string>), description (string), differently_open_offerings (map), directed_by (string), displayed_message_response_time (string), emails (list<string>), focus_x (float), focus_y (float), food_styles (list<page_food_styles>), gen_ai_provenance_type (page_gen_ai_provenance_type), general_info (string), general_manager (string), genre (string), hours (map), ignore_coordinate_warnings (bool), impressum (string), is_always_open (bool), is_permanently_closed (bool), is_published (bool), is_webhooks_subscribed (bool), location (Object), menu (string), mission (string), no_feed_story (bool), no_notification (bool), offset_x (int), offset_y (int), parking (map), payment_options (map), phone (string), pickup_options (list<page_pickup_options>), plot_outline (string), price_range (string), public_transit (string), restaurant_services (map), restaurant_specialties (map), scrape (bool), service_details (string), spherical_metadata (map), start_info (Object), store_location_descriptor (string), temporary_status (page_temporary_status), website (string), zoom_scale_x (float), zoom_scale_y (float)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"about":{"description":"about","type":"string"},"accept_crossposting_handshake":{"description":"accept_crossposting_handshake","items":{"additionalProperties":true,"type":"object"},"type":"array"},"allow_spherical_photo":{"description":"allow_spherical_photo","type":"boolean"},"attire":{"description":"attire (enum: page_attire)","type":"string"},"begin_crossposting_handshake":{"description":"begin_crossposting_handshake","items":{"additionalProperties":true,"type":"object"},"type":"array"},"bio":{"description":"bio","type":"string"},"category_list":{"description":"category_list","items":{"type":"string"},"type":"array"},"company_overview":{"description":"company_overview","type":"string"},"contact_address":{"additionalProperties":true,"description":"contact_address","type":"object"},"cover":{"description":"cover","type":"string"},"culinary_team":{"description":"culinary_team","type":"string"},"delivery_and_pickup_option_info":{"description":"delivery_and_pickup_option_info","items":{"type":"string"},"type":"array"},"description":{"description":"description","type":"string"},"differently_open_offerings":{"description":"differently_open_offerings","type":"string"},"directed_by":{"description":"directed_by","type":"string"},"displayed_message_response_time":{"description":"displayed_message_response_time","type":"string"},"emails":{"description":"emails","items":{"type":"string"},"type":"array"},"focus_x":{"description":"focus_x","type":"number"},"focus_y":{"description":"focus_y","type":"number"},"food_styles":{"description":"food_styles","items":{"type":"string"},"type":"array"},"gen_ai_provenance_type":{"description":"gen_ai_provenance_type (enum: page_gen_ai_provenance_type)","type":"string"},"general_info":{"description":"general_info","type":"string"},"general_manager":{"description":"general_manager","type":"string"},"genre":{"description":"genre","type":"string"},"hours":{"description":"hours","type":"string"},"id":{"description":"Page ID","type":"string"},"ignore_coordinate_warnings":{"description":"ignore_coordinate_warnings","type":"boolean"},"impressum":{"description":"impressum","type":"string"},"is_always_open":{"description":"is_always_open","type":"boolean"},"is_permanently_closed":{"description":"is_permanently_closed","type":"boolean"},"is_published":{"description":"is_published","type":"boolean"},"is_webhooks_subscribed":{"description":"is_webhooks_subscribed","type":"boolean"},"location":{"additionalProperties":true,"description":"location","type":"object"},"menu":{"description":"menu","type":"string"},"mission":{"description":"mission","type":"string"},"no_feed_story":{"description":"no_feed_story","type":"boolean"},"no_notification":{"description":"no_notification","type":"boolean"},"offset_x":{"description":"offset_x","type":"integer"},"offset_y":{"description":"offset_y","type":"integer"},"parking":{"description":"parking","type":"string"},"payment_options":{"description":"payment_options","type":"string"},"phone":{"description":"phone","type":"string"},"pickup_options":{"description":"pickup_options","items":{"type":"string"},"type":"array"},"plot_outline":{"description":"plot_outline","type":"string"},"price_range":{"description":"price_range","type":"string"},"public_transit":{"description":"public_transit","type":"string"},"restaurant_services":{"description":"restaurant_services","type":"string"},"restaurant_specialties":{"description":"restaurant_specialties","type":"string"},"scrape":{"description":"scrape","type":"boolean"},"service_details":{"description":"service_details","type":"string"},"spherical_metadata":{"description":"spherical_metadata","type":"string"},"start_info":{"additionalProperties":true,"description":"start_info","type":"object"},"store_location_descriptor":{"description":"store_location_descriptor","type":"string"},"temporary_status":{"description":"temporary_status (enum: page_temporary_status)","type":"string"},"website":{"description":"website","type":"string"},"zoom_scale_x":{"description":"zoom_scale_x","type":"number"},"zoom_scale_y":{"description":"zoom_scale_y","type":"number"}},"required":["id"],"type":"object"}`),
		),
		Page_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PageBroadcast_GET_",
			"GET  for PageBroadcast. Returns PageBroadcast",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PageBroadcast ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PageBroadcast_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PageCallToAction_DELETE_",
			"DELETE  for PageCallToAction. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PageCallToAction ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PageCallToAction_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PageCallToAction_GET_",
			"GET  for PageCallToAction. Returns PageCallToAction",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PageCallToAction ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PageCallToAction_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PageCallToAction_POST_",
			"POST  for PageCallToAction. Returns PageCallToAction. Parameters: android_app_id (int), android_destination_type (pagecalltoaction_android_destination_type), android_package_name (string), android_url (string), email_address (string), intl_number_with_plus (string), iphone_app_id (int), iphone_destination_type (pagecalltoaction_iphone_destination_type), iphone_url (string), type (pagecalltoaction_type), web_destination_type (pagecalltoaction_web_destination_type), web_url (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"android_app_id":{"description":"android_app_id","type":"integer"},"android_destination_type":{"description":"android_destination_type (enum: pagecalltoaction_android_destination_type)","type":"string"},"android_package_name":{"description":"android_package_name","type":"string"},"android_url":{"description":"android_url","type":"string"},"email_address":{"description":"email_address","type":"string"},"id":{"description":"PageCallToAction ID","type":"string"},"intl_number_with_plus":{"description":"intl_number_with_plus","type":"string"},"iphone_app_id":{"description":"iphone_app_id","type":"integer"},"iphone_destination_type":{"description":"iphone_destination_type (enum: pagecalltoaction_iphone_destination_type)","type":"string"},"iphone_url":{"description":"iphone_url","type":"string"},"type":{"description":"type (enum: pagecalltoaction_type)","type":"string"},"web_destination_type":{"description":"web_destination_type (enum: pagecalltoaction_web_destination_type)","type":"string"},"web_url":{"description":"web_url","type":"string"}},"required":["id"],"type":"object"}`),
		),
		PageCallToAction_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PageInsightsAsyncExportRun_GET_",
			"GET  for PageInsightsAsyncExportRun. Returns PageInsightsAsyncExportRun",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PageInsightsAsyncExportRun ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PageInsightsAsyncExportRun_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PageLeadsAccessConfig_GET_",
			"GET  for PageLeadsAccessConfig. Returns PageLeadsAccessConfig",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PageLeadsAccessConfig ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PageLeadsAccessConfig_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PagePost_GET_attachments",
			"GET attachments for PagePost. Returns StoryAttachment",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		PagePost_GET_attachmentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PagePost_GET_comments",
			"GET comments for PagePost. Returns Comment. Parameters: filter (pagepostcomments_filter_enum_param), live_filter (pagepostcomments_live_filter_enum_param), order (pagepostcomments_order_enum_param), since (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"description":"filter (enum: pagepostcomments_filter_enum_param)","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"live_filter":{"description":"live_filter (enum: pagepostcomments_live_filter_enum_param)","type":"string"},"order":{"description":"order (enum: pagepostcomments_order_enum_param)","type":"string"},"since":{"description":"since","type":"string"}},"type":"object"}`),
		),
		PagePost_GET_commentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PagePost_POST_comments",
			"POST comments for PagePost. Returns Comment. Parameters: attachment_id (string), attachment_share_url (string), attachment_url (string), comment (string), comment_privacy_value (pagepostcomments_comment_privacy_value_enum_param), feedback_source (string), message (string), nectar_module (string), parent_comment_id (Object), post_id (string), tracking (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"attachment_id":{"description":"attachment_id","type":"string"},"attachment_share_url":{"description":"attachment_share_url","type":"string"},"attachment_url":{"description":"attachment_url","type":"string"},"comment":{"description":"comment","type":"string"},"comment_privacy_value":{"description":"comment_privacy_value (enum: pagepostcomments_comment_privacy_value_enum_param)","type":"string"},"feedback_source":{"description":"feedback_source","type":"string"},"message":{"description":"message","type":"string"},"nectar_module":{"description":"nectar_module","type":"string"},"parent_comment_id":{"additionalProperties":true,"description":"parent_comment_id","type":"object"},"post_id":{"description":"post_id","type":"string"},"tracking":{"description":"tracking","type":"string"}},"type":"object"}`),
		),
		PagePost_POST_commentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PagePost_GET_dynamic_posts",
			"GET dynamic_posts for PagePost. Returns RTBDynamicPost",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PagePost ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PagePost_GET_dynamic_postsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PagePost_GET_insights",
			"GET insights for PagePost. Returns InsightsResult. Parameters: date_preset (pagepostinsights_date_preset_enum_param), metric (list<Object>), period (pagepostinsights_period_enum_param), since (datetime), until (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"date_preset":{"description":"date_preset (enum: pagepostinsights_date_preset_enum_param)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PagePost ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"metric":{"description":"metric","items":{"additionalProperties":true,"type":"object"},"type":"array"},"period":{"description":"period (enum: pagepostinsights_period_enum_param)","type":"string"},"since":{"description":"since","type":"string"},"until":{"description":"until","type":"string"}},"required":["id"],"type":"object"}`),
		),
		PagePost_GET_insightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PagePost_DELETE_likes",
			"DELETE likes for PagePost. Returns Object. Parameters: nectar_module (string), tracking (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PagePost ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"nectar_module":{"description":"nectar_module","type":"string"},"tracking":{"description":"tracking","type":"string"}},"required":["id"],"type":"object"}`),
		),
		PagePost_DELETE_likesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PagePost_GET_likes",
			"GET likes for PagePost. Returns Profile",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PagePost ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PagePost_GET_likesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PagePost_POST_likes",
			"POST likes for PagePost. Returns PagePost. Parameters: feedback_source (string), nectar_module (string), tracking (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"feedback_source":{"description":"feedback_source","type":"string"},"id":{"description":"PagePost ID","type":"string"},"nectar_module":{"description":"nectar_module","type":"string"},"tracking":{"description":"tracking","type":"string"}},"required":["id"],"type":"object"}`),
		),
		PagePost_POST_likesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PagePost_GET_reactions",
			"GET reactions for PagePost. Returns Profile. Parameters: type (pagepostreactions_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PagePost ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: pagepostreactions_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		PagePost_GET_reactionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PagePost_GET_sharedposts",
			"GET sharedposts for PagePost. Returns Post",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PagePost ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PagePost_GET_sharedpostsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PagePost_GET_sponsor_tags",
			"GET sponsor_tags for PagePost. Returns Page",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PagePost ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PagePost_GET_sponsor_tagsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PagePost_GET_to",
			"GET to for PagePost. Returns Profile",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PagePost ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PagePost_GET_toHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PagePost_DELETE_",
			"DELETE  for PagePost. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PagePost ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PagePost_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PagePost_GET_",
			"GET  for PagePost. Returns PagePost. Parameters: primary_fb_page_id (string), primary_ig_user_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PagePost ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"primary_fb_page_id":{"description":"primary_fb_page_id","type":"string"},"primary_ig_user_id":{"description":"primary_ig_user_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		PagePost_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PagePost_POST_",
			"POST  for PagePost. Returns PagePost. Parameters: attached_media (list<Object>), backdated_time (datetime), backdated_time_granularity (pagepost_backdated_time_granularity), composer_session_id (string), direct_share_status (unsigned int), explicitly_added_mentionee_ids (list<unsigned int>), feed_story_visibility (pagepost_feed_story_visibility), is_explicit_location (bool), is_hidden (bool), is_pinned (bool), is_published (bool), message (string), og_action_type_id (string), og_hide_object_attachment (bool), og_icon_id (string), og_object_id (string), og_phrase (string), og_set_profile_badge (bool), og_suggestion_mechanism (string), place (Object), privacy (string), product_item (Object), scheduled_publish_time (unsigned int), should_sync_product_edit (bool), source_type (string), sponsor_id (string), sponsor_relationship (unsigned int), tags (list<int>), text_format_preset_id (string), timeline_visibility (pagepost_timeline_visibility), tracking (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"attached_media":{"description":"attached_media","items":{"additionalProperties":true,"type":"object"},"type":"array"},"backdated_time":{"description":"backdated_time","type":"string"},"backdated_time_granularity":{"description":"backdated_time_granularity (enum: pagepost_backdated_time_granularity)","type":"string"},"composer_session_id":{"description":"composer_session_id","type":"string"},"direct_share_status":{"description":"direct_share_status","type":"integer"},"explicitly_added_mentionee_ids":{"description":"explicitly_added_mentionee_ids","items":{"type":"integer"},"type":"array"},"feed_story_visibility":{"description":"feed_story_visibility (enum: pagepost_feed_story_visibility)","type":"string"},"id":{"description":"PagePost ID","type":"string"},"is_explicit_location":{"description":"is_explicit_location","type":"boolean"},"is_hidden":{"description":"is_hidden","type":"boolean"},"is_pinned":{"description":"is_pinned","type":"boolean"},"is_published":{"description":"is_published","type":"boolean"},"message":{"description":"message","type":"string"},"og_action_type_id":{"description":"og_action_type_id","type":"string"},"og_hide_object_attachment":{"description":"og_hide_object_attachment","type":"boolean"},"og_icon_id":{"description":"og_icon_id","type":"string"},"og_object_id":{"description":"og_object_id","type":"string"},"og_phrase":{"description":"og_phrase","type":"string"},"og_set_profile_badge":{"description":"og_set_profile_badge","type":"boolean"},"og_suggestion_mechanism":{"description":"og_suggestion_mechanism","type":"string"},"place":{"additionalProperties":true,"description":"place","type":"object"},"privacy":{"description":"privacy","type":"string"},"product_item":{"additionalProperties":true,"description":"product_item","type":"object"},"scheduled_publish_time":{"description":"scheduled_publish_time","type":"integer"},"should_sync_product_edit":{"description":"should_sync_product_edit","type":"boolean"},"source_type":{"description":"source_type","type":"string"},"sponsor_id":{"description":"sponsor_id","type":"string"},"sponsor_relationship":{"description":"sponsor_relationship","type":"integer"},"tags":{"description":"tags","items":{"type":"integer"},"type":"array"},"text_format_preset_id":{"description":"text_format_preset_id","type":"string"},"timeline_visibility":{"description":"timeline_visibility (enum: pagepost_timeline_visibility)","type":"string"},"tracking":{"description":"tracking","type":"string"}},"required":["id"],"type":"object"}`),
		),
		PagePost_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PagePostExperiment_GET_video_insights",
			"GET video_insights for PagePostExperiment. Returns PagePostExperimentVideoInsightsQueryResult",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PagePostExperiment ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PagePostExperiment_GET_video_insightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PagePostExperiment_DELETE_",
			"DELETE  for PagePostExperiment. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PagePostExperiment ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PagePostExperiment_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PagePostExperiment_GET_",
			"GET  for PagePostExperiment. Returns PagePostExperiment",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PagePostExperiment ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PagePostExperiment_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PageUpcomingChange_GET_",
			"GET  for PageUpcomingChange. Returns PageUpcomingChange",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PageUpcomingChange ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PageUpcomingChange_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PageUserMessageThreadLabel_DELETE_label",
			"DELETE label for PageUserMessageThreadLabel. Returns Object. Parameters: user (int) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PageUserMessageThreadLabel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"user":{"description":"user","type":"integer"}},"required":["id","user"],"type":"object"}`),
		),
		PageUserMessageThreadLabel_DELETE_labelHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PageUserMessageThreadLabel_POST_label",
			"POST label for PageUserMessageThreadLabel. Returns PageUserMessageThreadLabel. Parameters: user (int) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"PageUserMessageThreadLabel ID","type":"string"},"user":{"description":"user","type":"integer"}},"required":["id","user"],"type":"object"}`),
		),
		PageUserMessageThreadLabel_POST_labelHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PageUserMessageThreadLabel_DELETE_",
			"DELETE  for PageUserMessageThreadLabel. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PageUserMessageThreadLabel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PageUserMessageThreadLabel_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PageUserMessageThreadLabel_GET_",
			"GET  for PageUserMessageThreadLabel. Returns PageUserMessageThreadLabel",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PageUserMessageThreadLabel ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PageUserMessageThreadLabel_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PartnerAccountLinking_GET_",
			"GET  for PartnerAccountLinking. Returns PartnerAccountLinking",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PartnerAccountLinking ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PartnerAccountLinking_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PartnerIntegrationLinked_GET_",
			"GET  for PartnerIntegrationLinked. Returns PartnerIntegrationLinked",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PartnerIntegrationLinked ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PartnerIntegrationLinked_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PartnerStudy_GET_",
			"GET  for PartnerStudy. Returns PartnerStudy",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PartnerStudy ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PartnerStudy_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PaymentEnginePayment_POST_dispute",
			"POST dispute for PaymentEnginePayment. Returns PaymentEnginePayment. Parameters: reason (paymentenginepaymentdispute_reason_enum_param) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"PaymentEnginePayment ID","type":"string"},"reason":{"description":"reason (enum: paymentenginepaymentdispute_reason_enum_param)","type":"string"}},"required":["id","reason"],"type":"object"}`),
		),
		PaymentEnginePayment_POST_disputeHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PaymentEnginePayment_POST_refunds",
			"POST refunds for PaymentEnginePayment. Returns PaymentEnginePayment. Parameters: amount (float) [required], currency (string) [required], reason (paymentenginepaymentrefunds_reason_enum_param)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"amount":{"description":"amount","type":"number"},"currency":{"description":"currency","type":"string"},"id":{"description":"PaymentEnginePayment ID","type":"string"},"reason":{"description":"reason (enum: paymentenginepaymentrefunds_reason_enum_param)","type":"string"}},"required":["id","amount","currency"],"type":"object"}`),
		),
		PaymentEnginePayment_POST_refundsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PaymentEnginePayment_GET_",
			"GET  for PaymentEnginePayment. Returns PaymentEnginePayment",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PaymentEnginePayment ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PaymentEnginePayment_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PaymentSubscription_GET_",
			"GET  for PaymentSubscription. Returns PaymentSubscription",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PaymentSubscription ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PaymentSubscription_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Persona_DELETE_",
			"DELETE  for Persona. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Persona ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Persona_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Persona_GET_",
			"GET  for Persona. Returns Persona",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Persona ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Persona_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PersonalAdsPersona_GET_",
			"GET  for PersonalAdsPersona. Returns PersonalAdsPersona",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PersonalAdsPersona ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PersonalAdsPersona_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Photo_GET_comments",
			"GET comments for Photo. Returns Comment. Parameters: filter (photocomments_filter_enum_param), live_filter (photocomments_live_filter_enum_param), order (photocomments_order_enum_param), since (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"description":"filter (enum: photocomments_filter_enum_param)","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"live_filter":{"description":"live_filter (enum: photocomments_live_filter_enum_param)","type":"string"},"order":{"description":"order (enum: photocomments_order_enum_param)","type":"string"},"since":{"description":"since","type":"string"}},"type":"object"}`),
		),
		Photo_GET_commentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Photo_POST_comments",
			"POST comments for Photo. Returns Comment. Parameters: attachment_id (string), attachment_share_url (string), attachment_url (string), comment_privacy_value (photocomments_comment_privacy_value_enum_param), facepile_mentioned_ids (list<string>), feedback_source (string), is_offline (bool), message (string), nectar_module (string), object_id (string), parent_comment_id (Object), text (string), tracking (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"attachment_id":{"description":"attachment_id","type":"string"},"attachment_share_url":{"description":"attachment_share_url","type":"string"},"attachment_url":{"description":"attachment_url","type":"string"},"comment_privacy_value":{"description":"comment_privacy_value (enum: photocomments_comment_privacy_value_enum_param)","type":"string"},"facepile_mentioned_ids":{"description":"facepile_mentioned_ids","items":{"type":"string"},"type":"array"},"feedback_source":{"description":"feedback_source","type":"string"},"is_offline":{"description":"is_offline","type":"boolean"},"message":{"description":"message","type":"string"},"nectar_module":{"description":"nectar_module","type":"string"},"object_id":{"description":"object_id","type":"string"},"parent_comment_id":{"additionalProperties":true,"description":"parent_comment_id","type":"object"},"text":{"description":"text","type":"string"},"tracking":{"description":"tracking","type":"string"}},"type":"object"}`),
		),
		Photo_POST_commentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Photo_GET_insights",
			"GET insights for Photo. Returns InsightsResult. Parameters: date_preset (photoinsights_date_preset_enum_param), metric (list<Object>), period (photoinsights_period_enum_param), since (datetime), until (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"date_preset":{"description":"date_preset (enum: photoinsights_date_preset_enum_param)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Photo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"metric":{"description":"metric","items":{"additionalProperties":true,"type":"object"},"type":"array"},"period":{"description":"period (enum: photoinsights_period_enum_param)","type":"string"},"since":{"description":"since","type":"string"},"until":{"description":"until","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Photo_GET_insightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Photo_GET_likes",
			"GET likes for Photo. Returns Profile",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Photo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Photo_GET_likesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Photo_POST_likes",
			"POST likes for Photo. Returns Photo. Parameters: feedback_source (string), nectar_module (string), notify (bool), tracking (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"feedback_source":{"description":"feedback_source","type":"string"},"id":{"description":"Photo ID","type":"string"},"nectar_module":{"description":"nectar_module","type":"string"},"notify":{"description":"notify","type":"boolean"},"tracking":{"description":"tracking","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Photo_POST_likesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Photo_GET_sponsor_tags",
			"GET sponsor_tags for Photo. Returns Page",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Photo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Photo_GET_sponsor_tagsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Photo_DELETE_",
			"DELETE  for Photo. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Photo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Photo_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Photo_GET_",
			"GET  for Photo. Returns Photo",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Photo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Photo_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Place_GET_",
			"GET  for Place. Returns Place",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Place ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Place_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PlaceTag_GET_",
			"GET  for PlaceTag. Returns PlaceTag",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PlaceTag ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PlaceTag_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PlaceTopic_GET_",
			"GET  for PlaceTopic. Returns PlaceTopic. Parameters: icon_size (placetopic_icon_size)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"icon_size":{"description":"icon_size (enum: placetopic_icon_size)","type":"string"},"id":{"description":"PlaceTopic ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PlaceTopic_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PlayableContent_GET_",
			"GET  for PlayableContent. Returns PlayableContent",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PlayableContent ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PlayableContent_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Post_GET_attachments",
			"GET attachments for Post. Returns StoryAttachment",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Post_GET_attachmentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Post_GET_comments",
			"GET comments for Post. Returns Comment. Parameters: filter (postcomments_filter_enum_param), live_filter (postcomments_live_filter_enum_param), order (postcomments_order_enum_param), since (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"description":"filter (enum: postcomments_filter_enum_param)","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"live_filter":{"description":"live_filter (enum: postcomments_live_filter_enum_param)","type":"string"},"order":{"description":"order (enum: postcomments_order_enum_param)","type":"string"},"since":{"description":"since","type":"string"}},"type":"object"}`),
		),
		Post_GET_commentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Post_POST_comments",
			"POST comments for Post. Returns Comment. Parameters: attachment_id (string), attachment_share_url (string), attachment_url (string), comment (string), comment_privacy_value (postcomments_comment_privacy_value_enum_param), feedback_source (string), message (string), nectar_module (string), parent_comment_id (Object), post_id (string), tracking (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"attachment_id":{"description":"attachment_id","type":"string"},"attachment_share_url":{"description":"attachment_share_url","type":"string"},"attachment_url":{"description":"attachment_url","type":"string"},"comment":{"description":"comment","type":"string"},"comment_privacy_value":{"description":"comment_privacy_value (enum: postcomments_comment_privacy_value_enum_param)","type":"string"},"feedback_source":{"description":"feedback_source","type":"string"},"message":{"description":"message","type":"string"},"nectar_module":{"description":"nectar_module","type":"string"},"parent_comment_id":{"additionalProperties":true,"description":"parent_comment_id","type":"object"},"post_id":{"description":"post_id","type":"string"},"tracking":{"description":"tracking","type":"string"}},"type":"object"}`),
		),
		Post_POST_commentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Post_GET_dynamic_posts",
			"GET dynamic_posts for Post. Returns RTBDynamicPost",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Post_GET_dynamic_postsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Post_GET_insights",
			"GET insights for Post. Returns InsightsResult. Parameters: date_preset (postinsights_date_preset_enum_param), metric (list<Object>), period (postinsights_period_enum_param), since (datetime), until (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"date_preset":{"description":"date_preset (enum: postinsights_date_preset_enum_param)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Post ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"metric":{"description":"metric","items":{"additionalProperties":true,"type":"object"},"type":"array"},"period":{"description":"period (enum: postinsights_period_enum_param)","type":"string"},"since":{"description":"since","type":"string"},"until":{"description":"until","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Post_GET_insightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Post_DELETE_likes",
			"DELETE likes for Post. Returns Object. Parameters: nectar_module (string), tracking (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Post ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"nectar_module":{"description":"nectar_module","type":"string"},"tracking":{"description":"tracking","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Post_DELETE_likesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Post_POST_likes",
			"POST likes for Post. Returns Post. Parameters: feedback_source (string), nectar_module (string), tracking (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"feedback_source":{"description":"feedback_source","type":"string"},"id":{"description":"Post ID","type":"string"},"nectar_module":{"description":"nectar_module","type":"string"},"tracking":{"description":"tracking","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Post_POST_likesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Post_GET_reactions",
			"GET reactions for Post. Returns Profile. Parameters: type (postreactions_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Post ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: postreactions_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Post_GET_reactionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Post_GET_sharedposts",
			"GET sharedposts for Post. Returns Post",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Post_GET_sharedpostsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Post_GET_sponsor_tags",
			"GET sponsor_tags for Post. Returns Page",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Post ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Post_GET_sponsor_tagsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Post_GET_to",
			"GET to for Post. Returns Profile",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Post ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Post_GET_toHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Post_DELETE_",
			"DELETE  for Post. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Post ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Post_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Post_GET_",
			"GET  for Post. Returns Post. Parameters: primary_fb_page_id (string), primary_ig_user_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Post ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"primary_fb_page_id":{"description":"primary_fb_page_id","type":"string"},"primary_ig_user_id":{"description":"primary_ig_user_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Post_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Post_POST_",
			"POST  for Post. Returns Post. Parameters: attached_media (list<Object>), backdated_time (datetime), backdated_time_granularity (post_backdated_time_granularity), composer_session_id (string), direct_share_status (unsigned int), explicitly_added_mentionee_ids (list<unsigned int>), feed_story_visibility (post_feed_story_visibility), is_explicit_location (bool), is_hidden (bool), is_pinned (bool), is_published (bool), message (string), og_action_type_id (string), og_hide_object_attachment (bool), og_icon_id (string), og_object_id (string), og_phrase (string), og_set_profile_badge (bool), og_suggestion_mechanism (string), place (Object), privacy (string), product_item (Object), scheduled_publish_time (unsigned int), should_sync_product_edit (bool), source_type (string), sponsor_id (string), sponsor_relationship (unsigned int), tags (list<int>), text_format_preset_id (string), timeline_visibility (post_timeline_visibility), tracking (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"attached_media":{"description":"attached_media","items":{"additionalProperties":true,"type":"object"},"type":"array"},"backdated_time":{"description":"backdated_time","type":"string"},"backdated_time_granularity":{"description":"backdated_time_granularity (enum: post_backdated_time_granularity)","type":"string"},"composer_session_id":{"description":"composer_session_id","type":"string"},"direct_share_status":{"description":"direct_share_status","type":"integer"},"explicitly_added_mentionee_ids":{"description":"explicitly_added_mentionee_ids","items":{"type":"integer"},"type":"array"},"feed_story_visibility":{"description":"feed_story_visibility (enum: post_feed_story_visibility)","type":"string"},"id":{"description":"Post ID","type":"string"},"is_explicit_location":{"description":"is_explicit_location","type":"boolean"},"is_hidden":{"description":"is_hidden","type":"boolean"},"is_pinned":{"description":"is_pinned","type":"boolean"},"is_published":{"description":"is_published","type":"boolean"},"message":{"description":"message","type":"string"},"og_action_type_id":{"description":"og_action_type_id","type":"string"},"og_hide_object_attachment":{"description":"og_hide_object_attachment","type":"boolean"},"og_icon_id":{"description":"og_icon_id","type":"string"},"og_object_id":{"description":"og_object_id","type":"string"},"og_phrase":{"description":"og_phrase","type":"string"},"og_set_profile_badge":{"description":"og_set_profile_badge","type":"boolean"},"og_suggestion_mechanism":{"description":"og_suggestion_mechanism","type":"string"},"place":{"additionalProperties":true,"description":"place","type":"object"},"privacy":{"description":"privacy","type":"string"},"product_item":{"additionalProperties":true,"description":"product_item","type":"object"},"scheduled_publish_time":{"description":"scheduled_publish_time","type":"integer"},"should_sync_product_edit":{"description":"should_sync_product_edit","type":"boolean"},"source_type":{"description":"source_type","type":"string"},"sponsor_id":{"description":"sponsor_id","type":"string"},"sponsor_relationship":{"description":"sponsor_relationship","type":"integer"},"tags":{"description":"tags","items":{"type":"integer"},"type":"array"},"text_format_preset_id":{"description":"text_format_preset_id","type":"string"},"timeline_visibility":{"description":"timeline_visibility (enum: post_timeline_visibility)","type":"string"},"tracking":{"description":"tracking","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Post_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PrivateLiftStudyInstance_GET_",
			"GET  for PrivateLiftStudyInstance. Returns PrivateLiftStudyInstance",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PrivateLiftStudyInstance ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PrivateLiftStudyInstance_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PrivateLiftStudyInstance_POST_",
			"POST  for PrivateLiftStudyInstance. Returns PrivateLiftStudyInstance. Parameters: operation (privateliftstudyinstance_operation), run_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"PrivateLiftStudyInstance ID","type":"string"},"operation":{"description":"operation (enum: privateliftstudyinstance_operation)","type":"string"},"run_id":{"description":"run_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		PrivateLiftStudyInstance_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_DELETE_agencies",
			"DELETE agencies for ProductCatalog. Returns Object. Parameters: business (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business":{"description":"business","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","business"],"type":"object"}`),
		),
		ProductCatalog_DELETE_agenciesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_agencies",
			"GET agencies for ProductCatalog. Returns Business",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_GET_agenciesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_POST_agencies",
			"POST agencies for ProductCatalog. Returns ProductCatalog. Parameters: business (string) [required], permitted_roles (list<productcatalogagencies_permitted_roles_enum_param>), permitted_tasks (list<productcatalogagencies_permitted_tasks_enum_param>), skip_defaults (bool), utm_settings (map)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"business":{"description":"business","type":"string"},"id":{"description":"ProductCatalog ID","type":"string"},"permitted_roles":{"description":"permitted_roles","items":{"type":"string"},"type":"array"},"permitted_tasks":{"description":"permitted_tasks","items":{"type":"string"},"type":"array"},"skip_defaults":{"description":"skip_defaults","type":"boolean"},"utm_settings":{"description":"utm_settings","type":"string"}},"required":["id","business"],"type":"object"}`),
		),
		ProductCatalog_POST_agenciesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_DELETE_assigned_users",
			"DELETE assigned_users for ProductCatalog. Returns Object. Parameters: user (int) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"user":{"description":"user","type":"integer"}},"required":["id","user"],"type":"object"}`),
		),
		ProductCatalog_DELETE_assigned_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_assigned_users",
			"GET assigned_users for ProductCatalog. Returns AssignedUser. Parameters: business (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business":{"description":"business","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","business"],"type":"object"}`),
		),
		ProductCatalog_GET_assigned_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_POST_assigned_users",
			"POST assigned_users for ProductCatalog. Returns ProductCatalog. Parameters: tasks (list<productcatalogassigned_users_tasks_enum_param>) [required], user (int) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"ProductCatalog ID","type":"string"},"tasks":{"description":"tasks","items":{"type":"string"},"type":"array"},"user":{"description":"user","type":"integer"}},"required":["id","tasks","user"],"type":"object"}`),
		),
		ProductCatalog_POST_assigned_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_automotive_models",
			"GET automotive_models for ProductCatalog. Returns AutomotiveModel. Parameters: bulk_pagination (bool), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_GET_automotive_modelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_POST_batch",
			"POST batch for ProductCatalog. Returns ProductCatalog. Parameters: allow_upsert (bool), fbe_external_business_id (string), requests (list<map>) [required], version (unsigned int)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"allow_upsert":{"description":"allow_upsert","type":"boolean"},"fbe_external_business_id":{"description":"fbe_external_business_id","type":"string"},"id":{"description":"ProductCatalog ID","type":"string"},"requests":{"description":"requests","items":{"additionalProperties":true,"type":"object"},"type":"array"},"version":{"description":"version","type":"integer"}},"required":["id","requests"],"type":"object"}`),
		),
		ProductCatalog_POST_batchHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_POST_catalog_store",
			"POST catalog_store for ProductCatalog. Returns StoreCatalogSettings. Parameters: page (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"ProductCatalog ID","type":"string"},"page":{"description":"page","type":"string"}},"required":["id","page"],"type":"object"}`),
		),
		ProductCatalog_POST_catalog_storeHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_categories",
			"GET categories for ProductCatalog. Returns ProductCatalogCategory. Parameters: categorization_criteria (productcatalogcategories_categorization_criteria_enum_param) [required], filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"categorization_criteria":{"description":"categorization_criteria (enum: productcatalogcategories_categorization_criteria_enum_param)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","categorization_criteria"],"type":"object"}`),
		),
		ProductCatalog_GET_categoriesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_POST_categories",
			"POST categories for ProductCatalog. Returns ProductCatalogCategory. Parameters: data (list<map>) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"data":{"description":"data","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"ProductCatalog ID","type":"string"}},"required":["id","data"],"type":"object"}`),
		),
		ProductCatalog_POST_categoriesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_check_batch_request_status",
			"GET check_batch_request_status for ProductCatalog. Returns CheckBatchRequestStatus. Parameters: error_priority (productcatalogcheck_batch_request_status_error_priority_enum_param), handle (string) [required], load_ids_of_invalid_requests (bool)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"error_priority":{"description":"error_priority (enum: productcatalogcheck_batch_request_status_error_priority_enum_param)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"handle":{"description":"handle","type":"string"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"load_ids_of_invalid_requests":{"description":"load_ids_of_invalid_requests","type":"boolean"}},"required":["id","handle"],"type":"object"}`),
		),
		ProductCatalog_GET_check_batch_request_statusHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_check_marketplace_partner_sellers_status",
			"GET check_marketplace_partner_sellers_status for ProductCatalog. Returns ProductCatalogCheckMarketplacePartnerSellersStatus. Parameters: session_id (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"session_id":{"description":"session_id","type":"string"}},"required":["id","session_id"],"type":"object"}`),
		),
		ProductCatalog_GET_check_marketplace_partner_sellers_statusHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_collaborative_ads_lsb_image_bank",
			"GET collaborative_ads_lsb_image_bank for ProductCatalog. Returns CPASLsbImageBank",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_GET_collaborative_ads_lsb_image_bankHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_collaborative_ads_share_settings",
			"GET collaborative_ads_share_settings for ProductCatalog. Returns CollaborativeAdsShareSettings",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_GET_collaborative_ads_share_settingsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_POST_cpas_lsb_image_bank",
			"POST cpas_lsb_image_bank for ProductCatalog. Returns CPASLsbImageBank. Parameters: ad_group_id (unsigned int), agency_business_id (unsigned int), backup_image_urls (list<string>) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"ad_group_id":{"description":"ad_group_id","type":"integer"},"agency_business_id":{"description":"agency_business_id","type":"integer"},"backup_image_urls":{"description":"backup_image_urls","items":{"type":"string"},"type":"array"},"id":{"description":"ProductCatalog ID","type":"string"}},"required":["id","backup_image_urls"],"type":"object"}`),
		),
		ProductCatalog_POST_cpas_lsb_image_bankHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_creator_asset_creatives",
			"GET creator_asset_creatives for ProductCatalog. Returns CreatorAssetCreative. Parameters: moderation_status (productcatalogcreator_asset_creatives_moderation_status_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"moderation_status":{"description":"moderation_status (enum: productcatalogcreator_asset_creatives_moderation_status_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_GET_creator_asset_creativesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_data_sources",
			"GET data_sources for ProductCatalog. Returns ProductCatalogDataSource. Parameters: ingestion_source_type (productcatalogdata_sources_ingestion_source_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductCatalog ID","type":"string"},"ingestion_source_type":{"description":"ingestion_source_type (enum: productcatalogdata_sources_ingestion_source_type_enum_param)","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_GET_data_sourcesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_destinations",
			"GET destinations for ProductCatalog. Returns Destination. Parameters: bulk_pagination (bool), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_GET_destinationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_diagnostics",
			"GET diagnostics for ProductCatalog. Returns ProductCatalogDiagnosticGroup. Parameters: affected_channels (list<productcatalogdiagnostics_affected_channels_enum_param>), affected_entities (list<productcatalogdiagnostics_affected_entities_enum_param>), affected_features (list<productcatalogdiagnostics_affected_features_enum_param>), severities (list<productcatalogdiagnostics_severities_enum_param>), types (list<productcatalogdiagnostics_types_enum_param>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"affected_channels":{"description":"affected_channels","items":{"type":"string"},"type":"array"},"affected_entities":{"description":"affected_entities","items":{"type":"string"},"type":"array"},"affected_features":{"description":"affected_features","items":{"type":"string"},"type":"array"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"severities":{"description":"severities","items":{"type":"string"},"type":"array"},"types":{"description":"types","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_GET_diagnosticsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_event_stats",
			"GET event_stats for ProductCatalog. Returns ProductEventStat. Parameters: breakdowns (list<productcatalogevent_stats_breakdowns_enum_param>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"breakdowns":{"description":"breakdowns","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_GET_event_statsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_DELETE_external_event_sources",
			"DELETE external_event_sources for ProductCatalog. Returns Object. Parameters: external_event_sources (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"external_event_sources":{"additionalProperties":true,"description":"external_event_sources","type":"object"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_DELETE_external_event_sourcesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_external_event_sources",
			"GET external_event_sources for ProductCatalog. Returns ExternalEventSource",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_GET_external_event_sourcesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_POST_external_event_sources",
			"POST external_event_sources for ProductCatalog. Returns ProductCatalog. Parameters: external_event_sources (Object)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"external_event_sources":{"additionalProperties":true,"description":"external_event_sources","type":"object"},"id":{"description":"ProductCatalog ID","type":"string"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_POST_external_event_sourcesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_flights",
			"GET flights for ProductCatalog. Returns Flight. Parameters: bulk_pagination (bool), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_GET_flightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_POST_geolocated_items_batch",
			"POST geolocated_items_batch for ProductCatalog. Returns ProductCatalog. Parameters: allow_upsert (bool), item_type (string) [required], requests (map) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"allow_upsert":{"description":"allow_upsert","type":"boolean"},"id":{"description":"ProductCatalog ID","type":"string"},"item_type":{"description":"item_type","type":"string"},"requests":{"description":"requests","type":"string"}},"required":["id","item_type","requests"],"type":"object"}`),
		),
		ProductCatalog_POST_geolocated_items_batchHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_home_listings",
			"GET home_listings for ProductCatalog. Returns HomeListing. Parameters: bulk_pagination (bool), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		ProductCatalog_GET_home_listingsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_POST_home_listings",
			"POST home_listings for ProductCatalog. Returns HomeListing. Parameters: address (Object) [required], availability (string) [required], currency (string) [required], description (string), home_listing_id (string) [required], images (list<Object>) [required], listing_type (string), name (string) [required], num_baths (float), num_beds (float), num_units (float), price (float) [required], property_type (string), url (string) [required], year_built (unsigned int) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"address":{"additionalProperties":true,"description":"address","type":"object"},"availability":{"description":"availability","type":"string"},"currency":{"description":"currency","type":"string"},"description":{"description":"description","type":"string"},"home_listing_id":{"description":"home_listing_id","type":"string"},"images":{"description":"images","items":{"additionalProperties":true,"type":"object"},"type":"array"},"listing_type":{"description":"listing_type","type":"string"},"name":{"description":"name","type":"string"},"num_baths":{"description":"num_baths","type":"number"},"num_beds":{"description":"num_beds","type":"number"},"num_units":{"description":"num_units","type":"number"},"price":{"description":"price","type":"number"},"property_type":{"description":"property_type","type":"string"},"url":{"description":"url","type":"string"},"year_built":{"description":"year_built","type":"integer"}},"required":["address","availability","currency","home_listing_id","images","name","price","url","year_built"],"type":"object"}`),
		),
		ProductCatalog_POST_home_listingsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_hotel_rooms_batch",
			"GET hotel_rooms_batch for ProductCatalog. Returns ProductCatalogHotelRoomsBatch. Parameters: handle (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"handle":{"description":"handle","type":"string"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","handle"],"type":"object"}`),
		),
		ProductCatalog_GET_hotel_rooms_batchHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_POST_hotel_rooms_batch",
			"POST hotel_rooms_batch for ProductCatalog. Returns ProductCatalog. Parameters: file (file), password (string), standard (productcataloghotel_rooms_batch_standard_enum_param) [required], update_only (bool), url (string), username (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"file":{"description":"file","type":"string"},"id":{"description":"ProductCatalog ID","type":"string"},"password":{"description":"password","type":"string"},"standard":{"description":"standard (enum: productcataloghotel_rooms_batch_standard_enum_param)","type":"string"},"update_only":{"description":"update_only","type":"boolean"},"url":{"description":"url","type":"string"},"username":{"description":"username","type":"string"}},"required":["id","standard"],"type":"object"}`),
		),
		ProductCatalog_POST_hotel_rooms_batchHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_hotels",
			"GET hotels for ProductCatalog. Returns Hotel. Parameters: bulk_pagination (bool), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_GET_hotelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_POST_hotels",
			"POST hotels for ProductCatalog. Returns Hotel. Parameters: address (Object) [required], applinks (Object), base_price (unsigned int), brand (string), currency (string), description (string) [required], guest_ratings (list<Object>), hotel_id (string), images (list<Object>) [required], name (string) [required], phone (string), star_rating (float), url (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"address":{"additionalProperties":true,"description":"address","type":"object"},"applinks":{"additionalProperties":true,"description":"applinks","type":"object"},"base_price":{"description":"base_price","type":"integer"},"brand":{"description":"brand","type":"string"},"currency":{"description":"currency","type":"string"},"description":{"description":"description","type":"string"},"guest_ratings":{"description":"guest_ratings","items":{"additionalProperties":true,"type":"object"},"type":"array"},"hotel_id":{"description":"hotel_id","type":"string"},"id":{"description":"ProductCatalog ID","type":"string"},"images":{"description":"images","items":{"additionalProperties":true,"type":"object"},"type":"array"},"name":{"description":"name","type":"string"},"phone":{"description":"phone","type":"string"},"star_rating":{"description":"star_rating","type":"number"},"url":{"description":"url","type":"string"}},"required":["id","address","description","images","name","url"],"type":"object"}`),
		),
		ProductCatalog_POST_hotelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_POST_items_batch",
			"POST items_batch for ProductCatalog. Returns ProductCatalog. Parameters: allow_upsert (bool), item_sub_type (productcatalogitems_batch_item_sub_type_enum_param), item_type (string) [required], requests (map) [required], version (unsigned int)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"allow_upsert":{"description":"allow_upsert","type":"boolean"},"id":{"description":"ProductCatalog ID","type":"string"},"item_sub_type":{"description":"item_sub_type (enum: productcatalogitems_batch_item_sub_type_enum_param)","type":"string"},"item_type":{"description":"item_type","type":"string"},"requests":{"description":"requests","type":"string"},"version":{"description":"version","type":"integer"}},"required":["id","item_type","requests"],"type":"object"}`),
		),
		ProductCatalog_POST_items_batchHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_POST_localized_items_batch",
			"POST localized_items_batch for ProductCatalog. Returns ProductCatalog. Parameters: allow_upsert (bool), item_type (string) [required], requests (map) [required], version (unsigned int)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"allow_upsert":{"description":"allow_upsert","type":"boolean"},"id":{"description":"ProductCatalog ID","type":"string"},"item_type":{"description":"item_type","type":"string"},"requests":{"description":"requests","type":"string"},"version":{"description":"version","type":"integer"}},"required":["id","item_type","requests"],"type":"object"}`),
		),
		ProductCatalog_POST_localized_items_batchHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_POST_marketplace_partner_sellers_details",
			"POST marketplace_partner_sellers_details for ProductCatalog. Returns ProductCatalog. Parameters: requests (map) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"ProductCatalog ID","type":"string"},"requests":{"description":"requests","type":"string"}},"required":["id","requests"],"type":"object"}`),
		),
		ProductCatalog_POST_marketplace_partner_sellers_detailsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_POST_marketplace_partner_signals",
			"POST marketplace_partner_signals for ProductCatalog. Returns ProductCatalog. Parameters: event_name (productcatalogmarketplace_partner_signals_event_name_enum_param) [required], event_source_url (string), event_time (datetime) [required], order_data (map), user_data (map) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"event_name":{"description":"event_name (enum: productcatalogmarketplace_partner_signals_event_name_enum_param)","type":"string"},"event_source_url":{"description":"event_source_url","type":"string"},"event_time":{"description":"event_time","type":"string"},"id":{"description":"ProductCatalog ID","type":"string"},"order_data":{"description":"order_data","type":"string"},"user_data":{"description":"user_data","type":"string"}},"required":["id","event_name","event_time","user_data"],"type":"object"}`),
		),
		ProductCatalog_POST_marketplace_partner_signalsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_pricing_variables_batch",
			"GET pricing_variables_batch for ProductCatalog. Returns ProductCatalogPricingVariablesBatch. Parameters: handle (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"handle":{"description":"handle","type":"string"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","handle"],"type":"object"}`),
		),
		ProductCatalog_GET_pricing_variables_batchHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_POST_pricing_variables_batch",
			"POST pricing_variables_batch for ProductCatalog. Returns ProductCatalog. Parameters: file (file), password (string), standard (productcatalogpricing_variables_batch_standard_enum_param) [required], update_only (bool), url (string), username (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"file":{"description":"file","type":"string"},"id":{"description":"ProductCatalog ID","type":"string"},"password":{"description":"password","type":"string"},"standard":{"description":"standard (enum: productcatalogpricing_variables_batch_standard_enum_param)","type":"string"},"update_only":{"description":"update_only","type":"boolean"},"url":{"description":"url","type":"string"},"username":{"description":"username","type":"string"}},"required":["id","standard"],"type":"object"}`),
		),
		ProductCatalog_POST_pricing_variables_batchHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_product_feeds",
			"GET product_feeds for ProductCatalog. Returns ProductFeed",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_GET_product_feedsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_POST_product_feeds",
			"POST product_feeds for ProductCatalog. Returns ProductFeed. Parameters: country (string), default_currency (string), deletion_enabled (bool), delimiter (productcatalogproduct_feeds_delimiter_enum_param), encoding (productcatalogproduct_feeds_encoding_enum_param), feed_type (productcatalogproduct_feeds_feed_type_enum_param), file_name (string), ingestion_source_type (productcatalogproduct_feeds_ingestion_source_type_enum_param), item_sub_type (productcatalogproduct_feeds_item_sub_type_enum_param), migrated_from_feed_id (string), name (string), override_type (productcatalogproduct_feeds_override_type_enum_param), override_value (string), primary_feed_ids (list<string>), quoted_fields_mode (productcatalogproduct_feeds_quoted_fields_mode_enum_param), rules (list<string>), schedule (string), selected_override_fields (list<string>), update_schedule (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"country":{"description":"country","type":"string"},"default_currency":{"description":"default_currency","type":"string"},"deletion_enabled":{"description":"deletion_enabled","type":"boolean"},"delimiter":{"description":"delimiter (enum: productcatalogproduct_feeds_delimiter_enum_param)","type":"string"},"encoding":{"description":"encoding (enum: productcatalogproduct_feeds_encoding_enum_param)","type":"string"},"feed_type":{"description":"feed_type (enum: productcatalogproduct_feeds_feed_type_enum_param)","type":"string"},"file_name":{"description":"file_name","type":"string"},"id":{"description":"ProductCatalog ID","type":"string"},"ingestion_source_type":{"description":"ingestion_source_type (enum: productcatalogproduct_feeds_ingestion_source_type_enum_param)","type":"string"},"item_sub_type":{"description":"item_sub_type (enum: productcatalogproduct_feeds_item_sub_type_enum_param)","type":"string"},"migrated_from_feed_id":{"description":"migrated_from_feed_id","type":"string"},"name":{"description":"name","type":"string"},"override_type":{"description":"override_type (enum: productcatalogproduct_feeds_override_type_enum_param)","type":"string"},"override_value":{"description":"override_value","type":"string"},"primary_feed_ids":{"description":"primary_feed_ids","items":{"type":"string"},"type":"array"},"quoted_fields_mode":{"description":"quoted_fields_mode (enum: productcatalogproduct_feeds_quoted_fields_mode_enum_param)","type":"string"},"rules":{"description":"rules","items":{"type":"string"},"type":"array"},"schedule":{"description":"schedule","type":"string"},"selected_override_fields":{"description":"selected_override_fields","items":{"type":"string"},"type":"array"},"update_schedule":{"description":"update_schedule","type":"string"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_POST_product_feedsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_product_groups",
			"GET product_groups for ProductCatalog. Returns ProductGroup",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_GET_product_groupsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_POST_product_groups",
			"POST product_groups for ProductCatalog. Returns ProductGroup. Parameters: retailer_id (string), variants (list<Object>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"ProductCatalog ID","type":"string"},"retailer_id":{"description":"retailer_id","type":"string"},"variants":{"description":"variants","items":{"additionalProperties":true,"type":"object"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_POST_product_groupsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_product_sets",
			"GET product_sets for ProductCatalog. Returns ProductSet. Parameters: ancestor_id (string), has_children (bool), parent_id (string), retailer_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"ancestor_id":{"description":"ancestor_id","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"has_children":{"description":"has_children","type":"boolean"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"parent_id":{"description":"parent_id","type":"string"},"retailer_id":{"description":"retailer_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_GET_product_setsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_POST_product_sets",
			"POST product_sets for ProductCatalog. Returns ProductSet. Parameters: filter (Object), metadata (map), name (string) [required], ordering_info (list<unsigned int>), publish_to_shops (list<map>), retailer_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"filter":{"additionalProperties":true,"description":"filter","type":"object"},"id":{"description":"ProductCatalog ID","type":"string"},"metadata":{"description":"metadata","type":"string"},"name":{"description":"name","type":"string"},"ordering_info":{"description":"ordering_info","items":{"type":"integer"},"type":"array"},"publish_to_shops":{"description":"publish_to_shops","items":{"additionalProperties":true,"type":"object"},"type":"array"},"retailer_id":{"description":"retailer_id","type":"string"}},"required":["id","name"],"type":"object"}`),
		),
		ProductCatalog_POST_product_setsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_product_sets_batch",
			"GET product_sets_batch for ProductCatalog. Returns ProductCatalogProductSetsBatch. Parameters: handle (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"handle":{"description":"handle","type":"string"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","handle"],"type":"object"}`),
		),
		ProductCatalog_GET_product_sets_batchHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_products",
			"GET products for ProductCatalog. Returns ProductItem. Parameters: bulk_pagination (bool), error_priority (productcatalogproducts_error_priority_enum_param), error_type (productcatalogproducts_error_type_enum_param), filter (Object), return_only_approved_products (bool)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"error_priority":{"description":"error_priority (enum: productcatalogproducts_error_priority_enum_param)","type":"string"},"error_type":{"description":"error_type (enum: productcatalogproducts_error_type_enum_param)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"return_only_approved_products":{"description":"return_only_approved_products","type":"boolean"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_GET_productsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_POST_products",
			"POST products for ProductCatalog. Returns ProductItem. Parameters: additional_image_urls (list<string>), additional_variant_attributes (map), age_group (productcatalogproducts_age_group_enum_param), android_app_name (string), android_class (string), android_package (string), android_url (string), availability (productcatalogproducts_availability_enum_param), brand (string), category (string), category_specific_fields (map), checkout_url (string), color (string), commerce_tax_category (productcatalogproducts_commerce_tax_category_enum_param), condition (productcatalogproducts_condition_enum_param), currency (string) [required], custom_data (map), custom_label_0 (string), custom_label_1 (string), custom_label_2 (string), custom_label_3 (string), custom_label_4 (string), custom_number_0 (unsigned int), custom_number_1 (unsigned int), custom_number_2 (unsigned int), custom_number_3 (unsigned int), custom_number_4 (unsigned int), description (string), expiration_date (string), fb_product_category (string), gender (productcatalogproducts_gender_enum_param), gtin (string), image_url (string), importer_address (map), importer_name (string), inventory (unsigned int), ios_app_name (string), ios_app_store_id (unsigned int), ios_url (string), ipad_app_name (string), ipad_app_store_id (unsigned int), ipad_url (string), iphone_app_name (string), iphone_app_store_id (unsigned int), iphone_url (string), launch_date (string), manufacturer_info (string), manufacturer_part_number (string), marked_for_product_launch (productcatalogproducts_marked_for_product_launch_enum_param), material (string), mobile_link (string), name (string) [required], ordering_index (unsigned int), origin_country (productcatalogproducts_origin_country_enum_param), pattern (string), price (unsigned int) [required], product_priority_0 (float), product_priority_1 (float), product_priority_2 (float), product_priority_3 (float), product_priority_4 (float), product_type (string), quantity_to_sell_on_facebook (unsigned int), retailer_id (string), retailer_product_group_id (string), return_policy_days (unsigned int), sale_price (unsigned int), sale_price_end_date (datetime), sale_price_start_date (datetime), short_description (string), size (string), start_date (string), url (string), visibility (productcatalogproducts_visibility_enum_param), wa_compliance_category (productcatalogproducts_wa_compliance_category_enum_param), windows_phone_app_id (string), windows_phone_app_name (string), windows_phone_url (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"additional_image_urls":{"description":"additional_image_urls","items":{"type":"string"},"type":"array"},"additional_variant_attributes":{"description":"additional_variant_attributes","type":"string"},"age_group":{"description":"age_group (enum: productcatalogproducts_age_group_enum_param)","type":"string"},"android_app_name":{"description":"android_app_name","type":"string"},"android_class":{"description":"android_class","type":"string"},"android_package":{"description":"android_package","type":"string"},"android_url":{"description":"android_url","type":"string"},"availability":{"description":"availability (enum: productcatalogproducts_availability_enum_param)","type":"string"},"brand":{"description":"brand","type":"string"},"category":{"description":"category","type":"string"},"category_specific_fields":{"description":"category_specific_fields","type":"string"},"checkout_url":{"description":"checkout_url","type":"string"},"color":{"description":"color","type":"string"},"commerce_tax_category":{"description":"commerce_tax_category (enum: productcatalogproducts_commerce_tax_category_enum_param)","type":"string"},"condition":{"description":"condition (enum: productcatalogproducts_condition_enum_param)","type":"string"},"currency":{"description":"currency","type":"string"},"custom_data":{"description":"custom_data","type":"string"},"custom_label_0":{"description":"custom_label_0","type":"string"},"custom_label_1":{"description":"custom_label_1","type":"string"},"custom_label_2":{"description":"custom_label_2","type":"string"},"custom_label_3":{"description":"custom_label_3","type":"string"},"custom_label_4":{"description":"custom_label_4","type":"string"},"custom_number_0":{"description":"custom_number_0","type":"integer"},"custom_number_1":{"description":"custom_number_1","type":"integer"},"custom_number_2":{"description":"custom_number_2","type":"integer"},"custom_number_3":{"description":"custom_number_3","type":"integer"},"custom_number_4":{"description":"custom_number_4","type":"integer"},"description":{"description":"description","type":"string"},"expiration_date":{"description":"expiration_date","type":"string"},"fb_product_category":{"description":"fb_product_category","type":"string"},"gender":{"description":"gender (enum: productcatalogproducts_gender_enum_param)","type":"string"},"gtin":{"description":"gtin","type":"string"},"id":{"description":"ProductCatalog ID","type":"string"},"image_url":{"description":"image_url","type":"string"},"importer_address":{"description":"importer_address","type":"string"},"importer_name":{"description":"importer_name","type":"string"},"inventory":{"description":"inventory","type":"integer"},"ios_app_name":{"description":"ios_app_name","type":"string"},"ios_app_store_id":{"description":"ios_app_store_id","type":"integer"},"ios_url":{"description":"ios_url","type":"string"},"ipad_app_name":{"description":"ipad_app_name","type":"string"},"ipad_app_store_id":{"description":"ipad_app_store_id","type":"integer"},"ipad_url":{"description":"ipad_url","type":"string"},"iphone_app_name":{"description":"iphone_app_name","type":"string"},"iphone_app_store_id":{"description":"iphone_app_store_id","type":"integer"},"iphone_url":{"description":"iphone_url","type":"string"},"launch_date":{"description":"launch_date","type":"string"},"manufacturer_info":{"description":"manufacturer_info","type":"string"},"manufacturer_part_number":{"description":"manufacturer_part_number","type":"string"},"marked_for_product_launch":{"description":"marked_for_product_launch (enum: productcatalogproducts_marked_for_product_launch_enum_param)","type":"string"},"material":{"description":"material","type":"string"},"mobile_link":{"description":"mobile_link","type":"string"},"name":{"description":"name","type":"string"},"ordering_index":{"description":"ordering_index","type":"integer"},"origin_country":{"description":"origin_country (enum: productcatalogproducts_origin_country_enum_param)","type":"string"},"pattern":{"description":"pattern","type":"string"},"price":{"description":"price","type":"integer"},"product_priority_0":{"description":"product_priority_0","type":"number"},"product_priority_1":{"description":"product_priority_1","type":"number"},"product_priority_2":{"description":"product_priority_2","type":"number"},"product_priority_3":{"description":"product_priority_3","type":"number"},"product_priority_4":{"description":"product_priority_4","type":"number"},"product_type":{"description":"product_type","type":"string"},"quantity_to_sell_on_facebook":{"description":"quantity_to_sell_on_facebook","type":"integer"},"retailer_id":{"description":"retailer_id","type":"string"},"retailer_product_group_id":{"description":"retailer_product_group_id","type":"string"},"return_policy_days":{"description":"return_policy_days","type":"integer"},"sale_price":{"description":"sale_price","type":"integer"},"sale_price_end_date":{"description":"sale_price_end_date","type":"string"},"sale_price_start_date":{"description":"sale_price_start_date","type":"string"},"short_description":{"description":"short_description","type":"string"},"size":{"description":"size","type":"string"},"start_date":{"description":"start_date","type":"string"},"url":{"description":"url","type":"string"},"visibility":{"description":"visibility (enum: productcatalogproducts_visibility_enum_param)","type":"string"},"wa_compliance_category":{"description":"wa_compliance_category (enum: productcatalogproducts_wa_compliance_category_enum_param)","type":"string"},"windows_phone_app_id":{"description":"windows_phone_app_id","type":"string"},"windows_phone_app_name":{"description":"windows_phone_app_name","type":"string"},"windows_phone_url":{"description":"windows_phone_url","type":"string"}},"required":["id","currency","name","price"],"type":"object"}`),
		),
		ProductCatalog_POST_productsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_POST_update_generated_image_config",
			"POST update_generated_image_config for ProductCatalog. Returns ProductCatalog. Parameters: data (list<Object>) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"data":{"description":"data","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"ProductCatalog ID","type":"string"}},"required":["id","data"],"type":"object"}`),
		),
		ProductCatalog_POST_update_generated_image_configHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_vehicle_offers",
			"GET vehicle_offers for ProductCatalog. Returns VehicleOffer. Parameters: bulk_pagination (bool), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_GET_vehicle_offersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_vehicles",
			"GET vehicles for ProductCatalog. Returns Vehicle. Parameters: bulk_pagination (bool), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_GET_vehiclesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_POST_vehicles",
			"POST vehicles for ProductCatalog. Returns Vehicle. Parameters: address (map) [required], applinks (Object), availability (productcatalogvehicles_availability_enum_param), body_style (productcatalogvehicles_body_style_enum_param) [required], condition (productcatalogvehicles_condition_enum_param), currency (string) [required], date_first_on_lot (string), dealer_id (string), dealer_name (string), dealer_phone (string), description (string) [required], drivetrain (productcatalogvehicles_drivetrain_enum_param), exterior_color (string) [required], fb_page_id (string), fuel_type (productcatalogvehicles_fuel_type_enum_param), images (list<Object>) [required], interior_color (string), make (string) [required], mileage (map) [required], model (string) [required], price (unsigned int) [required], state_of_vehicle (productcatalogvehicles_state_of_vehicle_enum_param) [required], title (string) [required], transmission (productcatalogvehicles_transmission_enum_param), trim (string), url (string) [required], vehicle_id (string) [required], vehicle_type (productcatalogvehicles_vehicle_type_enum_param), vin (string) [required], year (unsigned int) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"address":{"description":"address","type":"string"},"applinks":{"additionalProperties":true,"description":"applinks","type":"object"},"availability":{"description":"availability (enum: productcatalogvehicles_availability_enum_param)","type":"string"},"body_style":{"description":"body_style (enum: productcatalogvehicles_body_style_enum_param)","type":"string"},"condition":{"description":"condition (enum: productcatalogvehicles_condition_enum_param)","type":"string"},"currency":{"description":"currency","type":"string"},"date_first_on_lot":{"description":"date_first_on_lot","type":"string"},"dealer_id":{"description":"dealer_id","type":"string"},"dealer_name":{"description":"dealer_name","type":"string"},"dealer_phone":{"description":"dealer_phone","type":"string"},"description":{"description":"description","type":"string"},"drivetrain":{"description":"drivetrain (enum: productcatalogvehicles_drivetrain_enum_param)","type":"string"},"exterior_color":{"description":"exterior_color","type":"string"},"fb_page_id":{"description":"fb_page_id","type":"string"},"fuel_type":{"description":"fuel_type (enum: productcatalogvehicles_fuel_type_enum_param)","type":"string"},"id":{"description":"ProductCatalog ID","type":"string"},"images":{"description":"images","items":{"additionalProperties":true,"type":"object"},"type":"array"},"interior_color":{"description":"interior_color","type":"string"},"make":{"description":"make","type":"string"},"mileage":{"description":"mileage","type":"string"},"model":{"description":"model","type":"string"},"price":{"description":"price","type":"integer"},"state_of_vehicle":{"description":"state_of_vehicle (enum: productcatalogvehicles_state_of_vehicle_enum_param)","type":"string"},"title":{"description":"title","type":"string"},"transmission":{"description":"transmission (enum: productcatalogvehicles_transmission_enum_param)","type":"string"},"trim":{"description":"trim","type":"string"},"url":{"description":"url","type":"string"},"vehicle_id":{"description":"vehicle_id","type":"string"},"vehicle_type":{"description":"vehicle_type (enum: productcatalogvehicles_vehicle_type_enum_param)","type":"string"},"vin":{"description":"vin","type":"string"},"year":{"description":"year","type":"integer"}},"required":["id","address","body_style","currency","description","exterior_color","images","make","mileage","model","price","state_of_vehicle","title","url","vehicle_id","vin","year"],"type":"object"}`),
		),
		ProductCatalog_POST_vehiclesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_version_configs",
			"GET version_configs for ProductCatalog. Returns CatalogContentVersionConfig",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_GET_version_configsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_POST_version_items_batch",
			"POST version_items_batch for ProductCatalog. Returns ProductCatalog. Parameters: allow_upsert (bool), item_type (string) [required], item_version (string) [required], requests (map) [required], version (unsigned int)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"allow_upsert":{"description":"allow_upsert","type":"boolean"},"id":{"description":"ProductCatalog ID","type":"string"},"item_type":{"description":"item_type","type":"string"},"item_version":{"description":"item_version","type":"string"},"requests":{"description":"requests","type":"string"},"version":{"description":"version","type":"integer"}},"required":["id","item_type","item_version","requests"],"type":"object"}`),
		),
		ProductCatalog_POST_version_items_batchHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_DELETE_",
			"DELETE  for ProductCatalog. Returns Object. Parameters: allow_delete_catalog_with_live_product_set (bool)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"allow_delete_catalog_with_live_product_set":{"description":"allow_delete_catalog_with_live_product_set","type":"boolean"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_GET_",
			"GET  for ProductCatalog. Returns ProductCatalog. Parameters: segment_use_cases (list<productcatalog_segment_use_cases>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductCatalog ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"segment_use_cases":{"description":"segment_use_cases","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalog_POST_",
			"POST  for ProductCatalog. Returns ProductCatalog. Parameters: additional_vertical_option (productcatalog_additional_vertical_option), da_display_settings (Object), default_image_url (string), destination_catalog_settings (map), fallback_image_url (string), flight_catalog_settings (map), name (string), partner_integration (map), store_catalog_settings (map)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"additional_vertical_option":{"description":"additional_vertical_option (enum: productcatalog_additional_vertical_option)","type":"string"},"da_display_settings":{"additionalProperties":true,"description":"da_display_settings","type":"object"},"default_image_url":{"description":"default_image_url","type":"string"},"destination_catalog_settings":{"description":"destination_catalog_settings","type":"string"},"fallback_image_url":{"description":"fallback_image_url","type":"string"},"flight_catalog_settings":{"description":"flight_catalog_settings","type":"string"},"id":{"description":"ProductCatalog ID","type":"string"},"name":{"description":"name","type":"string"},"partner_integration":{"description":"partner_integration","type":"string"},"store_catalog_settings":{"description":"store_catalog_settings","type":"string"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalog_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductCatalogLocalizationSettings_GET_",
			"GET  for ProductCatalogLocalizationSettings. Returns ProductCatalogLocalizationSettings",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductCatalogLocalizationSettings ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductCatalogLocalizationSettings_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductDeliveryPreference_GET_",
			"GET  for ProductDeliveryPreference. Returns ProductDeliveryPreference",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductDeliveryPreference ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductDeliveryPreference_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeed_GET_automotive_models",
			"GET automotive_models for ProductFeed. Returns AutomotiveModel. Parameters: bulk_pagination (bool), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"id":{"description":"ProductFeed ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductFeed_GET_automotive_modelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeed_GET_destinations",
			"GET destinations for ProductFeed. Returns Destination. Parameters: bulk_pagination (bool), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"id":{"description":"ProductFeed ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductFeed_GET_destinationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeed_GET_flights",
			"GET flights for ProductFeed. Returns Flight. Parameters: bulk_pagination (bool), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"id":{"description":"ProductFeed ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductFeed_GET_flightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeed_GET_home_listings",
			"GET home_listings for ProductFeed. Returns HomeListing. Parameters: bulk_pagination (bool), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		ProductFeed_GET_home_listingsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeed_GET_hotels",
			"GET hotels for ProductFeed. Returns Hotel. Parameters: bulk_pagination (bool), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"id":{"description":"ProductFeed ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductFeed_GET_hotelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeed_GET_media_titles",
			"GET media_titles for ProductFeed. Returns MediaTitle. Parameters: bulk_pagination (bool), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		ProductFeed_GET_media_titlesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeed_GET_products",
			"GET products for ProductFeed. Returns ProductItem. Parameters: bulk_pagination (bool), error_priority (productfeedproducts_error_priority_enum_param), error_type (productfeedproducts_error_type_enum_param), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"error_priority":{"description":"error_priority (enum: productfeedproducts_error_priority_enum_param)","type":"string"},"error_type":{"description":"error_type (enum: productfeedproducts_error_type_enum_param)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"id":{"description":"ProductFeed ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductFeed_GET_productsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeed_GET_rules",
			"GET rules for ProductFeed. Returns ProductFeedRule",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductFeed ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductFeed_GET_rulesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeed_POST_rules",
			"POST rules for ProductFeed. Returns ProductFeedRule. Parameters: attribute (string) [required], params (map), rule_type (productfeedrules_rule_type_enum_param) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"attribute":{"description":"attribute","type":"string"},"id":{"description":"ProductFeed ID","type":"string"},"params":{"description":"params","type":"string"},"rule_type":{"description":"rule_type (enum: productfeedrules_rule_type_enum_param)","type":"string"}},"required":["id","attribute","rule_type"],"type":"object"}`),
		),
		ProductFeed_POST_rulesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeed_POST_supplementary_feed_assocs",
			"POST supplementary_feed_assocs for ProductFeed. Returns Object. Parameters: assoc_data (list<map>) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"assoc_data":{"description":"assoc_data","items":{"additionalProperties":true,"type":"object"},"type":"array"}},"required":["assoc_data"],"type":"object"}`),
		),
		ProductFeed_POST_supplementary_feed_assocsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeed_GET_upload_schedules",
			"GET upload_schedules for ProductFeed. Returns ProductFeedSchedule",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductFeed ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductFeed_GET_upload_schedulesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeed_POST_upload_schedules",
			"POST upload_schedules for ProductFeed. Returns ProductFeed. Parameters: upload_schedule (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"ProductFeed ID","type":"string"},"upload_schedule":{"description":"upload_schedule","type":"string"}},"required":["id"],"type":"object"}`),
		),
		ProductFeed_POST_upload_schedulesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeed_GET_uploads",
			"GET uploads for ProductFeed. Returns ProductFeedUpload",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductFeed ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductFeed_GET_uploadsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeed_POST_uploads",
			"POST uploads for ProductFeed. Returns ProductFeedUpload. Parameters: fbe_external_business_id (string), file (file), password (string), update_only (bool), url (string), username (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"fbe_external_business_id":{"description":"fbe_external_business_id","type":"string"},"file":{"description":"file","type":"string"},"id":{"description":"ProductFeed ID","type":"string"},"password":{"description":"password","type":"string"},"update_only":{"description":"update_only","type":"boolean"},"url":{"description":"url","type":"string"},"username":{"description":"username","type":"string"}},"required":["id"],"type":"object"}`),
		),
		ProductFeed_POST_uploadsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeed_GET_vehicle_offers",
			"GET vehicle_offers for ProductFeed. Returns VehicleOffer. Parameters: bulk_pagination (bool), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"id":{"description":"ProductFeed ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductFeed_GET_vehicle_offersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeed_GET_vehicles",
			"GET vehicles for ProductFeed. Returns Vehicle. Parameters: bulk_pagination (bool), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"id":{"description":"ProductFeed ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductFeed_GET_vehiclesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeed_DELETE_",
			"DELETE  for ProductFeed. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductFeed ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductFeed_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeed_GET_",
			"GET  for ProductFeed. Returns ProductFeed",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductFeed ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductFeed_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeed_POST_",
			"POST  for ProductFeed. Returns ProductFeed. Parameters: default_currency (string), deletion_enabled (bool), delimiter (productfeed_delimiter), encoding (productfeed_encoding), migrated_from_feed_id (string), name (string), quoted_fields_mode (productfeed_quoted_fields_mode), schedule (string), update_schedule (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"default_currency":{"description":"default_currency","type":"string"},"deletion_enabled":{"description":"deletion_enabled","type":"boolean"},"delimiter":{"description":"delimiter (enum: productfeed_delimiter)","type":"string"},"encoding":{"description":"encoding (enum: productfeed_encoding)","type":"string"},"id":{"description":"ProductFeed ID","type":"string"},"migrated_from_feed_id":{"description":"migrated_from_feed_id","type":"string"},"name":{"description":"name","type":"string"},"quoted_fields_mode":{"description":"quoted_fields_mode (enum: productfeed_quoted_fields_mode)","type":"string"},"schedule":{"description":"schedule","type":"string"},"update_schedule":{"description":"update_schedule","type":"string"}},"required":["id"],"type":"object"}`),
		),
		ProductFeed_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeedRule_DELETE_",
			"DELETE  for ProductFeedRule. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductFeedRule ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductFeedRule_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeedRule_GET_",
			"GET  for ProductFeedRule. Returns ProductFeedRule",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductFeedRule ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductFeedRule_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeedRule_POST_",
			"POST  for ProductFeedRule. Returns ProductFeedRule. Parameters: params (map) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"ProductFeedRule ID","type":"string"},"params":{"description":"params","type":"string"}},"required":["id","params"],"type":"object"}`),
		),
		ProductFeedRule_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeedSchedule_GET_",
			"GET  for ProductFeedSchedule. Returns ProductFeedSchedule",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductFeedSchedule ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductFeedSchedule_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeedUpload_POST_error_report",
			"POST error_report for ProductFeedUpload. Returns ProductFeedUpload",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"ProductFeedUpload ID","type":"string"}},"required":["id"],"type":"object"}`),
		),
		ProductFeedUpload_POST_error_reportHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeedUpload_GET_errors",
			"GET errors for ProductFeedUpload. Returns ProductFeedUploadError. Parameters: error_priority (productfeeduploaderrors_error_priority_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"error_priority":{"description":"error_priority (enum: productfeeduploaderrors_error_priority_enum_param)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductFeedUpload ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductFeedUpload_GET_errorsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeedUpload_GET_",
			"GET  for ProductFeedUpload. Returns ProductFeedUpload",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductFeedUpload ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductFeedUpload_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeedUploadError_GET_samples",
			"GET samples for ProductFeedUploadError. Returns ProductFeedUploadErrorSample",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductFeedUploadError ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductFeedUploadError_GET_samplesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeedUploadError_GET_suggested_rules",
			"GET suggested_rules for ProductFeedUploadError. Returns ProductFeedRuleSuggestion",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductFeedUploadError ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductFeedUploadError_GET_suggested_rulesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeedUploadError_GET_",
			"GET  for ProductFeedUploadError. Returns ProductFeedUploadError",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductFeedUploadError ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductFeedUploadError_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductFeedUploadErrorSample_GET_",
			"GET  for ProductFeedUploadErrorSample. Returns ProductFeedUploadErrorSample",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductFeedUploadErrorSample ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductFeedUploadErrorSample_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductGroup_GET_products",
			"GET products for ProductGroup. Returns ProductItem",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductGroup_GET_productsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductGroup_POST_products",
			"POST products for ProductGroup. Returns ProductItem. Parameters: additional_image_urls (list<string>), additional_variant_attributes (map), age_group (productgroupproducts_age_group_enum_param), android_app_name (string), android_class (string), android_package (string), android_url (string), availability (productgroupproducts_availability_enum_param), brand (string), category (string), checkout_url (string), color (string), commerce_tax_category (productgroupproducts_commerce_tax_category_enum_param), condition (productgroupproducts_condition_enum_param), currency (string) [required], custom_data (map), custom_label_0 (string), custom_label_1 (string), custom_label_2 (string), custom_label_3 (string), custom_label_4 (string), custom_number_0 (unsigned int), custom_number_1 (unsigned int), custom_number_2 (unsigned int), custom_number_3 (unsigned int), custom_number_4 (unsigned int), description (string), expiration_date (string), fb_product_category (string), gender (productgroupproducts_gender_enum_param), gtin (string), image_url (string) [required], inventory (unsigned int), ios_app_name (string), ios_app_store_id (unsigned int), ios_url (string), ipad_app_name (string), ipad_app_store_id (unsigned int), ipad_url (string), iphone_app_name (string), iphone_app_store_id (unsigned int), iphone_url (string), launch_date (string), manufacturer_part_number (string), marked_for_product_launch (productgroupproducts_marked_for_product_launch_enum_param), material (string), mobile_link (string), name (string) [required], ordering_index (unsigned int), pattern (string), price (unsigned int) [required], product_priority_0 (float), product_priority_1 (float), product_priority_2 (float), product_priority_3 (float), product_priority_4 (float), product_type (string), quantity_to_sell_on_facebook (unsigned int), retailer_id (string) [required], return_policy_days (unsigned int), sale_price (unsigned int), sale_price_end_date (datetime), sale_price_start_date (datetime), short_description (string), size (string), start_date (string), url (string), visibility (productgroupproducts_visibility_enum_param), windows_phone_app_id (string), windows_phone_app_name (string), windows_phone_url (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"additional_image_urls":{"description":"additional_image_urls","items":{"type":"string"},"type":"array"},"additional_variant_attributes":{"description":"additional_variant_attributes","type":"string"},"age_group":{"description":"age_group (enum: productgroupproducts_age_group_enum_param)","type":"string"},"android_app_name":{"description":"android_app_name","type":"string"},"android_class":{"description":"android_class","type":"string"},"android_package":{"description":"android_package","type":"string"},"android_url":{"description":"android_url","type":"string"},"availability":{"description":"availability (enum: productgroupproducts_availability_enum_param)","type":"string"},"brand":{"description":"brand","type":"string"},"category":{"description":"category","type":"string"},"checkout_url":{"description":"checkout_url","type":"string"},"color":{"description":"color","type":"string"},"commerce_tax_category":{"description":"commerce_tax_category (enum: productgroupproducts_commerce_tax_category_enum_param)","type":"string"},"condition":{"description":"condition (enum: productgroupproducts_condition_enum_param)","type":"string"},"currency":{"description":"currency","type":"string"},"custom_data":{"description":"custom_data","type":"string"},"custom_label_0":{"description":"custom_label_0","type":"string"},"custom_label_1":{"description":"custom_label_1","type":"string"},"custom_label_2":{"description":"custom_label_2","type":"string"},"custom_label_3":{"description":"custom_label_3","type":"string"},"custom_label_4":{"description":"custom_label_4","type":"string"},"custom_number_0":{"description":"custom_number_0","type":"integer"},"custom_number_1":{"description":"custom_number_1","type":"integer"},"custom_number_2":{"description":"custom_number_2","type":"integer"},"custom_number_3":{"description":"custom_number_3","type":"integer"},"custom_number_4":{"description":"custom_number_4","type":"integer"},"description":{"description":"description","type":"string"},"expiration_date":{"description":"expiration_date","type":"string"},"fb_product_category":{"description":"fb_product_category","type":"string"},"gender":{"description":"gender (enum: productgroupproducts_gender_enum_param)","type":"string"},"gtin":{"description":"gtin","type":"string"},"id":{"description":"ProductGroup ID","type":"string"},"image_url":{"description":"image_url","type":"string"},"inventory":{"description":"inventory","type":"integer"},"ios_app_name":{"description":"ios_app_name","type":"string"},"ios_app_store_id":{"description":"ios_app_store_id","type":"integer"},"ios_url":{"description":"ios_url","type":"string"},"ipad_app_name":{"description":"ipad_app_name","type":"string"},"ipad_app_store_id":{"description":"ipad_app_store_id","type":"integer"},"ipad_url":{"description":"ipad_url","type":"string"},"iphone_app_name":{"description":"iphone_app_name","type":"string"},"iphone_app_store_id":{"description":"iphone_app_store_id","type":"integer"},"iphone_url":{"description":"iphone_url","type":"string"},"launch_date":{"description":"launch_date","type":"string"},"manufacturer_part_number":{"description":"manufacturer_part_number","type":"string"},"marked_for_product_launch":{"description":"marked_for_product_launch (enum: productgroupproducts_marked_for_product_launch_enum_param)","type":"string"},"material":{"description":"material","type":"string"},"mobile_link":{"description":"mobile_link","type":"string"},"name":{"description":"name","type":"string"},"ordering_index":{"description":"ordering_index","type":"integer"},"pattern":{"description":"pattern","type":"string"},"price":{"description":"price","type":"integer"},"product_priority_0":{"description":"product_priority_0","type":"number"},"product_priority_1":{"description":"product_priority_1","type":"number"},"product_priority_2":{"description":"product_priority_2","type":"number"},"product_priority_3":{"description":"product_priority_3","type":"number"},"product_priority_4":{"description":"product_priority_4","type":"number"},"product_type":{"description":"product_type","type":"string"},"quantity_to_sell_on_facebook":{"description":"quantity_to_sell_on_facebook","type":"integer"},"retailer_id":{"description":"retailer_id","type":"string"},"return_policy_days":{"description":"return_policy_days","type":"integer"},"sale_price":{"description":"sale_price","type":"integer"},"sale_price_end_date":{"description":"sale_price_end_date","type":"string"},"sale_price_start_date":{"description":"sale_price_start_date","type":"string"},"short_description":{"description":"short_description","type":"string"},"size":{"description":"size","type":"string"},"start_date":{"description":"start_date","type":"string"},"url":{"description":"url","type":"string"},"visibility":{"description":"visibility (enum: productgroupproducts_visibility_enum_param)","type":"string"},"windows_phone_app_id":{"description":"windows_phone_app_id","type":"string"},"windows_phone_app_name":{"description":"windows_phone_app_name","type":"string"},"windows_phone_url":{"description":"windows_phone_url","type":"string"}},"required":["id","currency","image_url","name","price","retailer_id"],"type":"object"}`),
		),
		ProductGroup_POST_productsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductGroup_DELETE_",
			"DELETE  for ProductGroup. Returns Object. Parameters: deletion_method (productgroup_deletion_method)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"deletion_method":{"description":"deletion_method (enum: productgroup_deletion_method)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductGroup_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductGroup_GET_",
			"GET  for ProductGroup. Returns ProductGroup",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductGroup_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductGroup_POST_",
			"POST  for ProductGroup. Returns ProductGroup. Parameters: default_product_id (string), variants (list<Object>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"default_product_id":{"description":"default_product_id","type":"string"},"id":{"description":"ProductGroup ID","type":"string"},"variants":{"description":"variants","items":{"additionalProperties":true,"type":"object"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		ProductGroup_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductImage_GET_",
			"GET  for ProductImage. Returns ProductImage",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductImage ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductImage_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductItem_GET_channels_to_integrity_status",
			"GET channels_to_integrity_status for ProductItem. Returns CatalogItemChannelsToIntegrityStatus",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductItem ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductItem_GET_channels_to_integrity_statusHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductItem_GET_override_details",
			"GET override_details for ProductItem. Returns OverrideDetails. Parameters: keys (list<string>), type (productitemoverride_details_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductItem ID","type":"string"},"keys":{"description":"keys","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: productitemoverride_details_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		ProductItem_GET_override_detailsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductItem_GET_product_sets",
			"GET product_sets for ProductItem. Returns ProductSet",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductItem ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductItem_GET_product_setsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductItem_GET_videos_metadata",
			"GET videos_metadata for ProductItem. Returns DynamicVideoMetadata",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		ProductItem_GET_videos_metadataHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductItem_DELETE_",
			"DELETE  for ProductItem. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductItem ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductItem_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductItem_GET_",
			"GET  for ProductItem. Returns ProductItem. Parameters: catalog_id (string), image_height (unsigned int), image_width (unsigned int), override_country (string), override_language (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"catalog_id":{"description":"catalog_id","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductItem ID","type":"string"},"image_height":{"description":"image_height","type":"integer"},"image_width":{"description":"image_width","type":"integer"},"limit":{"description":"Maximum number of results","type":"integer"},"override_country":{"description":"override_country","type":"string"},"override_language":{"description":"override_language","type":"string"}},"required":["id"],"type":"object"}`),
		),
		ProductItem_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductItem_POST_",
			"POST  for ProductItem. Returns ProductItem. Parameters: additional_image_urls (list<string>), additional_variant_attributes (map), age_group (productitem_age_group), android_app_name (string), android_class (string), android_package (string), android_url (string), availability (productitem_availability), brand (string), category (string), category_specific_fields (map), checkout_url (string), color (string), commerce_tax_category (productitem_commerce_tax_category), condition (productitem_condition), currency (string), custom_data (map), custom_label_0 (string), custom_label_1 (string), custom_label_2 (string), custom_label_3 (string), custom_label_4 (string), custom_number_0 (unsigned int), custom_number_1 (unsigned int), custom_number_2 (unsigned int), custom_number_3 (unsigned int), custom_number_4 (unsigned int), description (string), expiration_date (string), fb_product_category (string), gender (productitem_gender), gtin (string), image_url (string), importer_address (map), importer_name (string), inventory (unsigned int), ios_app_name (string), ios_app_store_id (unsigned int), ios_url (string), ipad_app_name (string), ipad_app_store_id (unsigned int), ipad_url (string), iphone_app_name (string), iphone_app_store_id (unsigned int), iphone_url (string), launch_date (string), manufacturer_info (string), manufacturer_part_number (string), marked_for_product_launch (productitem_marked_for_product_launch), material (string), mobile_link (string), name (string), ordering_index (unsigned int), origin_country (productitem_origin_country), pattern (string), price (unsigned int), product_priority_0 (float), product_priority_1 (float), product_priority_2 (float), product_priority_3 (float), product_priority_4 (float), product_type (string), quantity_to_sell_on_facebook (unsigned int), retailer_id (string), return_policy_days (unsigned int), sale_price (unsigned int), sale_price_end_date (datetime), sale_price_start_date (datetime), short_description (string), size (string), start_date (string), url (string), visibility (productitem_visibility), wa_compliance_category (productitem_wa_compliance_category), windows_phone_app_id (string), windows_phone_app_name (string), windows_phone_url (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"additional_image_urls":{"description":"additional_image_urls","items":{"type":"string"},"type":"array"},"additional_variant_attributes":{"description":"additional_variant_attributes","type":"string"},"age_group":{"description":"age_group (enum: productitem_age_group)","type":"string"},"android_app_name":{"description":"android_app_name","type":"string"},"android_class":{"description":"android_class","type":"string"},"android_package":{"description":"android_package","type":"string"},"android_url":{"description":"android_url","type":"string"},"availability":{"description":"availability (enum: productitem_availability)","type":"string"},"brand":{"description":"brand","type":"string"},"category":{"description":"category","type":"string"},"category_specific_fields":{"description":"category_specific_fields","type":"string"},"checkout_url":{"description":"checkout_url","type":"string"},"color":{"description":"color","type":"string"},"commerce_tax_category":{"description":"commerce_tax_category (enum: productitem_commerce_tax_category)","type":"string"},"condition":{"description":"condition (enum: productitem_condition)","type":"string"},"currency":{"description":"currency","type":"string"},"custom_data":{"description":"custom_data","type":"string"},"custom_label_0":{"description":"custom_label_0","type":"string"},"custom_label_1":{"description":"custom_label_1","type":"string"},"custom_label_2":{"description":"custom_label_2","type":"string"},"custom_label_3":{"description":"custom_label_3","type":"string"},"custom_label_4":{"description":"custom_label_4","type":"string"},"custom_number_0":{"description":"custom_number_0","type":"integer"},"custom_number_1":{"description":"custom_number_1","type":"integer"},"custom_number_2":{"description":"custom_number_2","type":"integer"},"custom_number_3":{"description":"custom_number_3","type":"integer"},"custom_number_4":{"description":"custom_number_4","type":"integer"},"description":{"description":"description","type":"string"},"expiration_date":{"description":"expiration_date","type":"string"},"fb_product_category":{"description":"fb_product_category","type":"string"},"gender":{"description":"gender (enum: productitem_gender)","type":"string"},"gtin":{"description":"gtin","type":"string"},"id":{"description":"ProductItem ID","type":"string"},"image_url":{"description":"image_url","type":"string"},"importer_address":{"description":"importer_address","type":"string"},"importer_name":{"description":"importer_name","type":"string"},"inventory":{"description":"inventory","type":"integer"},"ios_app_name":{"description":"ios_app_name","type":"string"},"ios_app_store_id":{"description":"ios_app_store_id","type":"integer"},"ios_url":{"description":"ios_url","type":"string"},"ipad_app_name":{"description":"ipad_app_name","type":"string"},"ipad_app_store_id":{"description":"ipad_app_store_id","type":"integer"},"ipad_url":{"description":"ipad_url","type":"string"},"iphone_app_name":{"description":"iphone_app_name","type":"string"},"iphone_app_store_id":{"description":"iphone_app_store_id","type":"integer"},"iphone_url":{"description":"iphone_url","type":"string"},"launch_date":{"description":"launch_date","type":"string"},"manufacturer_info":{"description":"manufacturer_info","type":"string"},"manufacturer_part_number":{"description":"manufacturer_part_number","type":"string"},"marked_for_product_launch":{"description":"marked_for_product_launch (enum: productitem_marked_for_product_launch)","type":"string"},"material":{"description":"material","type":"string"},"mobile_link":{"description":"mobile_link","type":"string"},"name":{"description":"name","type":"string"},"ordering_index":{"description":"ordering_index","type":"integer"},"origin_country":{"description":"origin_country (enum: productitem_origin_country)","type":"string"},"pattern":{"description":"pattern","type":"string"},"price":{"description":"price","type":"integer"},"product_priority_0":{"description":"product_priority_0","type":"number"},"product_priority_1":{"description":"product_priority_1","type":"number"},"product_priority_2":{"description":"product_priority_2","type":"number"},"product_priority_3":{"description":"product_priority_3","type":"number"},"product_priority_4":{"description":"product_priority_4","type":"number"},"product_type":{"description":"product_type","type":"string"},"quantity_to_sell_on_facebook":{"description":"quantity_to_sell_on_facebook","type":"integer"},"retailer_id":{"description":"retailer_id","type":"string"},"return_policy_days":{"description":"return_policy_days","type":"integer"},"sale_price":{"description":"sale_price","type":"integer"},"sale_price_end_date":{"description":"sale_price_end_date","type":"string"},"sale_price_start_date":{"description":"sale_price_start_date","type":"string"},"short_description":{"description":"short_description","type":"string"},"size":{"description":"size","type":"string"},"start_date":{"description":"start_date","type":"string"},"url":{"description":"url","type":"string"},"visibility":{"description":"visibility (enum: productitem_visibility)","type":"string"},"wa_compliance_category":{"description":"wa_compliance_category (enum: productitem_wa_compliance_category)","type":"string"},"windows_phone_app_id":{"description":"windows_phone_app_id","type":"string"},"windows_phone_app_name":{"description":"windows_phone_app_name","type":"string"},"windows_phone_url":{"description":"windows_phone_url","type":"string"}},"required":["id"],"type":"object"}`),
		),
		ProductItem_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductItemLocalInfo_GET_",
			"GET  for ProductItemLocalInfo. Returns ProductItemLocalInfo",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductItemLocalInfo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductItemLocalInfo_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductItemOffer_GET_",
			"GET  for ProductItemOffer. Returns ProductItemOffer",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductItemOffer ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductItemOffer_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductSet_GET_automotive_models",
			"GET automotive_models for ProductSet. Returns AutomotiveModel. Parameters: bulk_pagination (bool), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"id":{"description":"ProductSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductSet_GET_automotive_modelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductSet_GET_destinations",
			"GET destinations for ProductSet. Returns Destination. Parameters: bulk_pagination (bool), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"id":{"description":"ProductSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductSet_GET_destinationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductSet_GET_flights",
			"GET flights for ProductSet. Returns Flight. Parameters: bulk_pagination (bool), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"id":{"description":"ProductSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductSet_GET_flightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductSet_GET_home_listings",
			"GET home_listings for ProductSet. Returns HomeListing. Parameters: bulk_pagination (bool), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		ProductSet_GET_home_listingsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductSet_GET_hotels",
			"GET hotels for ProductSet. Returns Hotel. Parameters: bulk_pagination (bool), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"id":{"description":"ProductSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductSet_GET_hotelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductSet_GET_media_titles",
			"GET media_titles for ProductSet. Returns MediaTitle. Parameters: bulk_pagination (bool), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		ProductSet_GET_media_titlesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductSet_GET_products",
			"GET products for ProductSet. Returns ProductItem. Parameters: bulk_pagination (bool), error_priority (productsetproducts_error_priority_enum_param), error_type (productsetproducts_error_type_enum_param), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"error_priority":{"description":"error_priority (enum: productsetproducts_error_priority_enum_param)","type":"string"},"error_type":{"description":"error_type (enum: productsetproducts_error_type_enum_param)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"id":{"description":"ProductSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductSet_GET_productsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductSet_GET_vehicle_offers",
			"GET vehicle_offers for ProductSet. Returns VehicleOffer. Parameters: bulk_pagination (bool), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"id":{"description":"ProductSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductSet_GET_vehicle_offersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductSet_GET_vehicles",
			"GET vehicles for ProductSet. Returns Vehicle. Parameters: bulk_pagination (bool), filter (Object)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"bulk_pagination":{"description":"bulk_pagination","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"additionalProperties":true,"description":"filter","type":"object"},"id":{"description":"ProductSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductSet_GET_vehiclesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductSet_DELETE_",
			"DELETE  for ProductSet. Returns Object. Parameters: allow_live_product_set_deletion (bool)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"allow_live_product_set_deletion":{"description":"allow_live_product_set_deletion","type":"boolean"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductSet_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductSet_GET_",
			"GET  for ProductSet. Returns ProductSet",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductSet ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductSet_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductSet_POST_",
			"POST  for ProductSet. Returns ProductSet. Parameters: filter (Object), metadata (map), name (string), ordering_info (list<unsigned int>), publish_to_shops (list<map>), retailer_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"filter":{"additionalProperties":true,"description":"filter","type":"object"},"id":{"description":"ProductSet ID","type":"string"},"metadata":{"description":"metadata","type":"string"},"name":{"description":"name","type":"string"},"ordering_info":{"description":"ordering_info","items":{"type":"integer"},"type":"array"},"publish_to_shops":{"description":"publish_to_shops","items":{"additionalProperties":true,"type":"object"},"type":"array"},"retailer_id":{"description":"retailer_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		ProductSet_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ProductSetUsage_GET_",
			"GET  for ProductSetUsage. Returns ProductSetUsage",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ProductSetUsage ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ProductSetUsage_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Profile_GET_picture",
			"GET picture for Profile. Returns ProfilePictureSource. Parameters: height (int), redirect (bool), type (profilepicture_type_enum_param), width (int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"height":{"description":"height","type":"integer"},"id":{"description":"Profile ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"redirect":{"description":"redirect","type":"boolean"},"type":{"description":"type (enum: profilepicture_type_enum_param)","type":"string"},"width":{"description":"width","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Profile_GET_pictureHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Profile_GET_",
			"GET  for Profile. Returns Profile",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Profile ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Profile_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PublisherBlockList_POST_append_publisher_urls",
			"POST append_publisher_urls for PublisherBlockList. Returns Object. Parameters: publisher_urls (list<string>) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"PublisherBlockList ID","type":"string"},"publisher_urls":{"description":"publisher_urls","items":{"type":"string"},"type":"array"}},"required":["id","publisher_urls"],"type":"object"}`),
		),
		PublisherBlockList_POST_append_publisher_urlsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PublisherBlockList_GET_paged_web_publishers",
			"GET paged_web_publishers for PublisherBlockList. Returns WebPublisher. Parameters: draft_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"draft_id":{"description":"draft_id","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PublisherBlockList ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PublisherBlockList_GET_paged_web_publishersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PublisherBlockList_DELETE_",
			"DELETE  for PublisherBlockList. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PublisherBlockList ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PublisherBlockList_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PublisherBlockList_GET_",
			"GET  for PublisherBlockList. Returns PublisherBlockList. Parameters: account_id (unsigned int), business_id (string), draft_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"account_id":{"description":"account_id","type":"integer"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business_id":{"description":"business_id","type":"string"},"draft_id":{"description":"draft_id","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PublisherBlockList ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PublisherBlockList_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PublisherBlockList_POST_",
			"POST  for PublisherBlockList. Returns PublisherBlockList. Parameters: spec (Object) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"PublisherBlockList ID","type":"string"},"spec":{"additionalProperties":true,"description":"spec","type":"object"}},"required":["id","spec"],"type":"object"}`),
		),
		PublisherBlockList_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"PublisherWhiteList_GET_",
			"GET  for PublisherWhiteList. Returns PublisherWhiteList",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"PublisherWhiteList ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		PublisherWhiteList_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"RTBDynamicPost_GET_comments",
			"GET comments for RTBDynamicPost. Returns Comment. Parameters: filter (rtbdynamicpostcomments_filter_enum_param), live_filter (rtbdynamicpostcomments_live_filter_enum_param), order (rtbdynamicpostcomments_order_enum_param), since (datetime)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filter":{"description":"filter (enum: rtbdynamicpostcomments_filter_enum_param)","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"live_filter":{"description":"live_filter (enum: rtbdynamicpostcomments_live_filter_enum_param)","type":"string"},"order":{"description":"order (enum: rtbdynamicpostcomments_order_enum_param)","type":"string"},"since":{"description":"since","type":"string"}},"type":"object"}`),
		),
		RTBDynamicPost_GET_commentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"RTBDynamicPost_GET_likes",
			"GET likes for RTBDynamicPost. Returns Profile",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"RTBDynamicPost ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		RTBDynamicPost_GET_likesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"RTBDynamicPost_GET_",
			"GET  for RTBDynamicPost. Returns RTBDynamicPost",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"RTBDynamicPost ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		RTBDynamicPost_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ReachFrequencyPrediction_GET_",
			"GET  for ReachFrequencyPrediction. Returns ReachFrequencyPrediction",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ReachFrequencyPrediction ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ReachFrequencyPrediction_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ResearchPollStudy_GET_",
			"GET  for ResearchPollStudy. Returns ResearchPollStudy",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ResearchPollStudy ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ResearchPollStudy_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"RightsManagerDataExport_GET_",
			"GET  for RightsManagerDataExport. Returns RightsManagerDataExport",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"RightsManagerDataExport ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		RightsManagerDataExport_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Robot_GET_",
			"GET  for Robot. Returns Robot",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Robot ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Robot_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"SavedAudience_GET_",
			"GET  for SavedAudience. Returns SavedAudience",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"SavedAudience ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		SavedAudience_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"SavedMessageResponse_GET_",
			"GET  for SavedMessageResponse. Returns SavedMessageResponse",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"SavedMessageResponse ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		SavedMessageResponse_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ShadowIGHashtag_GET_recent_media",
			"GET recent_media for ShadowIGHashtag. Returns IGMedia. Parameters: user_id (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"user_id":{"description":"user_id","type":"string"}},"required":["user_id"],"type":"object"}`),
		),
		ShadowIGHashtag_GET_recent_mediaHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ShadowIGHashtag_GET_top_media",
			"GET top_media for ShadowIGHashtag. Returns IGMedia. Parameters: user_id (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"user_id":{"description":"user_id","type":"string"}},"required":["user_id"],"type":"object"}`),
		),
		ShadowIGHashtag_GET_top_mediaHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ShadowIGHashtag_GET_",
			"GET  for ShadowIGHashtag. Returns ShadowIGHashtag",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ShadowIGHashtag ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ShadowIGHashtag_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ShadowIGMediaBuilder_GET_",
			"GET  for ShadowIGMediaBuilder. Returns ShadowIGMediaBuilder",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ShadowIGMediaBuilder ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ShadowIGMediaBuilder_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Shop_GET_",
			"GET  for Shop. Returns Shop",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Shop ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Shop_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"SignalsIWLExtractor_GET_",
			"GET  for SignalsIWLExtractor. Returns SignalsIWLExtractor",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"SignalsIWLExtractor ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		SignalsIWLExtractor_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"SiteLink_GET_",
			"GET  for SiteLink. Returns SiteLink",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"SiteLink ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		SiteLink_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"SlicedEventSourceGroup_GET_",
			"GET  for SlicedEventSourceGroup. Returns SlicedEventSourceGroup",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"SlicedEventSourceGroup ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		SlicedEventSourceGroup_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Status_POST_likes",
			"POST likes for Status. Returns Status. Parameters: feedback_source (string), nectar_module (string), notify (bool), tracking (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"feedback_source":{"description":"feedback_source","type":"string"},"id":{"description":"Status ID","type":"string"},"nectar_module":{"description":"nectar_module","type":"string"},"notify":{"description":"notify","type":"boolean"},"tracking":{"description":"tracking","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Status_POST_likesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Status_GET_",
			"GET  for Status. Returns Status",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Status ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Status_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"StoreCatalogSettings_DELETE_",
			"DELETE  for StoreCatalogSettings. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"StoreCatalogSettings ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		StoreCatalogSettings_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"StoreCatalogSettings_GET_",
			"GET  for StoreCatalogSettings. Returns StoreCatalogSettings",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"StoreCatalogSettings ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		StoreCatalogSettings_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"StoreLocation_GET_",
			"GET  for StoreLocation. Returns StoreLocation",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"StoreLocation ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		StoreLocation_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Stories_GET_insights",
			"GET insights for Stories. Returns InsightsResult. Parameters: metric (list<storiesinsights_metric_enum_param>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Stories ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"metric":{"description":"metric","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		Stories_GET_insightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Stories_GET_",
			"GET  for Stories. Returns Stories",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Stories ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Stories_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"SystemUser_GET_assigned_ad_accounts",
			"GET assigned_ad_accounts for SystemUser. Returns AdAccount",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"SystemUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		SystemUser_GET_assigned_ad_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"SystemUser_GET_assigned_business_asset_groups",
			"GET assigned_business_asset_groups for SystemUser. Returns BusinessAssetGroup. Parameters: contained_asset_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"contained_asset_id":{"description":"contained_asset_id","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"SystemUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		SystemUser_GET_assigned_business_asset_groupsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"SystemUser_GET_assigned_pages",
			"GET assigned_pages for SystemUser. Returns Page. Parameters: pages (list<unsigned int>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"SystemUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"pages":{"description":"pages","items":{"type":"integer"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		SystemUser_GET_assigned_pagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"SystemUser_GET_assigned_product_catalogs",
			"GET assigned_product_catalogs for SystemUser. Returns ProductCatalog",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"SystemUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		SystemUser_GET_assigned_product_catalogsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"SystemUser_GET_",
			"GET  for SystemUser. Returns SystemUser",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"SystemUser ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		SystemUser_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ThirdPartyMeasurementReportDataset_GET_",
			"GET  for ThirdPartyMeasurementReportDataset. Returns ThirdPartyMeasurementReportDataset",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ThirdPartyMeasurementReportDataset ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ThirdPartyMeasurementReportDataset_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ThirdPartyPartnerLiftRequest_GET_",
			"GET  for ThirdPartyPartnerLiftRequest. Returns ThirdPartyPartnerLiftRequest",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ThirdPartyPartnerLiftRequest ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ThirdPartyPartnerLiftRequest_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ThirdPartyPartnerPanelRequest_GET_",
			"GET  for ThirdPartyPartnerPanelRequest. Returns ThirdPartyPartnerPanelRequest",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ThirdPartyPartnerPanelRequest ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ThirdPartyPartnerPanelRequest_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ThirdPartyPartnerPanelScheduled_GET_",
			"GET  for ThirdPartyPartnerPanelScheduled. Returns ThirdPartyPartnerPanelScheduled",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ThirdPartyPartnerPanelScheduled ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ThirdPartyPartnerPanelScheduled_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"ThirdPartyPartnerViewabilityRequest_GET_",
			"GET  for ThirdPartyPartnerViewabilityRequest. Returns ThirdPartyPartnerViewabilityRequest",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"ThirdPartyPartnerViewabilityRequest ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		ThirdPartyPartnerViewabilityRequest_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"TransactableItem_GET_channels_to_integrity_status",
			"GET channels_to_integrity_status for TransactableItem. Returns CatalogItemChannelsToIntegrityStatus",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"TransactableItem ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		TransactableItem_GET_channels_to_integrity_statusHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"TransactableItem_GET_override_details",
			"GET override_details for TransactableItem. Returns OverrideDetails. Parameters: keys (list<string>), type (transactableitemoverride_details_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"TransactableItem ID","type":"string"},"keys":{"description":"keys","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: transactableitemoverride_details_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		TransactableItem_GET_override_detailsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"TransactableItem_GET_",
			"GET  for TransactableItem. Returns TransactableItem",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"TransactableItem ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		TransactableItem_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"URL_GET_",
			"GET  for URL. Returns URL",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"URL ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		URL_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"URL_POST_",
			"POST  for URL. Returns URL. Parameters: blacklist (bool), denylist (bool), hmac (string), locale (list<string>), scopes (list<url_scopes>), ts (datetime)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"blacklist":{"description":"blacklist","type":"boolean"},"denylist":{"description":"denylist","type":"boolean"},"hmac":{"description":"hmac","type":"string"},"id":{"description":"URL ID","type":"string"},"locale":{"description":"locale","items":{"type":"string"},"type":"array"},"scopes":{"description":"scopes","items":{"type":"string"},"type":"array"},"ts":{"description":"ts","type":"string"}},"required":["id"],"type":"object"}`),
		),
		URL_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"UnifiedThread_GET_messages",
			"GET messages for UnifiedThread. Returns UnifiedMessage. Parameters: source (unifiedthreadmessages_source_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"source":{"description":"source (enum: unifiedthreadmessages_source_enum_param)","type":"string"}},"type":"object"}`),
		),
		UnifiedThread_GET_messagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"UnifiedThread_GET_",
			"GET  for UnifiedThread. Returns UnifiedThread",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"UnifiedThread ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		UnifiedThread_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_DELETE_access_tokens",
			"DELETE access_tokens for User. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		User_DELETE_access_tokensHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_POST_access_tokens",
			"POST access_tokens for User. Returns User. Parameters: business_app (string) [required], page_id (string), scope (list<string>), set_token_expires_in_60_days (bool)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"business_app":{"description":"business_app","type":"string"},"id":{"description":"User ID","type":"string"},"page_id":{"description":"page_id","type":"string"},"scope":{"description":"scope","items":{"type":"string"},"type":"array"},"set_token_expires_in_60_days":{"description":"set_token_expires_in_60_days","type":"boolean"}},"required":["id","business_app"],"type":"object"}`),
		),
		User_POST_access_tokensHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_accounts",
			"GET accounts for User. Returns Page. Parameters: ad_id (string), is_place (bool), is_promotable (bool)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"ad_id":{"description":"ad_id","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"is_place":{"description":"is_place","type":"boolean"},"is_promotable":{"description":"is_promotable","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		User_GET_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_POST_accounts",
			"POST accounts for User. Returns Object. Parameters: about (string), address (string), category (int), category_enum (string), category_list (list<string>), city_id (string), coordinates (Object), cover_photo (Object), description (string), ignore_coordinate_warnings (bool), location (Object), name (string) [required], phone (string), picture (string), website (string), zip (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"about":{"description":"about","type":"string"},"address":{"description":"address","type":"string"},"category":{"description":"category","type":"integer"},"category_enum":{"description":"category_enum","type":"string"},"category_list":{"description":"category_list","items":{"type":"string"},"type":"array"},"city_id":{"description":"city_id","type":"string"},"coordinates":{"additionalProperties":true,"description":"coordinates","type":"object"},"cover_photo":{"additionalProperties":true,"description":"cover_photo","type":"object"},"description":{"description":"description","type":"string"},"id":{"description":"User ID","type":"string"},"ignore_coordinate_warnings":{"description":"ignore_coordinate_warnings","type":"boolean"},"location":{"additionalProperties":true,"description":"location","type":"object"},"name":{"description":"name","type":"string"},"phone":{"description":"phone","type":"string"},"picture":{"description":"picture","type":"string"},"website":{"description":"website","type":"string"},"zip":{"description":"zip","type":"string"}},"required":["id","name"],"type":"object"}`),
		),
		User_POST_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_ad_studies",
			"GET ad_studies for User. Returns AdStudy",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		User_GET_ad_studiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_POST_ad_studies",
			"POST ad_studies for User. Returns AdStudy. Parameters: cells (list<Object>), client_business (string), confidence_level (float), cooldown_start_time (int), description (string), end_time (int), name (string), objectives (list<Object>), observation_end_time (int), start_time (int), type (userad_studies_type_enum_param), viewers (list<int>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"cells":{"description":"cells","items":{"additionalProperties":true,"type":"object"},"type":"array"},"client_business":{"description":"client_business","type":"string"},"confidence_level":{"description":"confidence_level","type":"number"},"cooldown_start_time":{"description":"cooldown_start_time","type":"integer"},"description":{"description":"description","type":"string"},"end_time":{"description":"end_time","type":"integer"},"id":{"description":"User ID","type":"string"},"name":{"description":"name","type":"string"},"objectives":{"description":"objectives","items":{"additionalProperties":true,"type":"object"},"type":"array"},"observation_end_time":{"description":"observation_end_time","type":"integer"},"start_time":{"description":"start_time","type":"integer"},"type":{"description":"type (enum: userad_studies_type_enum_param)","type":"string"},"viewers":{"description":"viewers","items":{"type":"integer"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		User_POST_ad_studiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_adaccounts",
			"GET adaccounts for User. Returns AdAccount",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		User_GET_adaccountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_albums",
			"GET albums for User. Returns Album",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		User_GET_albumsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_POST_applications",
			"POST applications for User. Returns User. Parameters: business_app (int) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"business_app":{"description":"business_app","type":"integer"},"id":{"description":"User ID","type":"string"}},"required":["id","business_app"],"type":"object"}`),
		),
		User_POST_applicationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_apprequestformerrecipients",
			"GET apprequestformerrecipients for User. Returns AppRequestFormerRecipient",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		User_GET_apprequestformerrecipientsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_apprequests",
			"GET apprequests for User. Returns AppRequest",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		User_GET_apprequestsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_assigned_ad_accounts",
			"GET assigned_ad_accounts for User. Returns AdAccount",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		User_GET_assigned_ad_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_assigned_applications",
			"GET assigned_applications for User. Returns Application",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		User_GET_assigned_applicationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_assigned_business_asset_groups",
			"GET assigned_business_asset_groups for User. Returns BusinessAssetGroup. Parameters: contained_asset_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"contained_asset_id":{"description":"contained_asset_id","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		User_GET_assigned_business_asset_groupsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_assigned_pages",
			"GET assigned_pages for User. Returns Page. Parameters: pages (list<unsigned int>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"pages":{"description":"pages","items":{"type":"integer"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		User_GET_assigned_pagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_assigned_product_catalogs",
			"GET assigned_product_catalogs for User. Returns ProductCatalog",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		User_GET_assigned_product_catalogsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_avatars",
			"GET avatars for User. Returns Avatar",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		User_GET_avatarsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_business_users",
			"GET business_users for User. Returns BusinessUser",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		User_GET_business_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_DELETE_businesses",
			"DELETE businesses for User. Returns Object. Parameters: business (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business":{"description":"business","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		User_DELETE_businessesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_businesses",
			"GET businesses for User. Returns Business",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		User_GET_businessesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_POST_businesses",
			"POST businesses for User. Returns Business. Parameters: child_business_external_id (string), email (string), name (string) [required], primary_page (string), sales_rep_email (string), survey_business_type (userbusinesses_survey_business_type_enum_param), survey_num_assets (unsigned int), survey_num_people (unsigned int), timezone_id (userbusinesses_timezone_id_enum_param), vertical (userbusinesses_vertical_enum_param) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"child_business_external_id":{"description":"child_business_external_id","type":"string"},"email":{"description":"email","type":"string"},"id":{"description":"User ID","type":"string"},"name":{"description":"name","type":"string"},"primary_page":{"description":"primary_page","type":"string"},"sales_rep_email":{"description":"sales_rep_email","type":"string"},"survey_business_type":{"description":"survey_business_type (enum: userbusinesses_survey_business_type_enum_param)","type":"string"},"survey_num_assets":{"description":"survey_num_assets","type":"integer"},"survey_num_people":{"description":"survey_num_people","type":"integer"},"timezone_id":{"description":"timezone_id (enum: userbusinesses_timezone_id_enum_param)","type":"string"},"vertical":{"description":"vertical (enum: userbusinesses_vertical_enum_param)","type":"string"}},"required":["id","name","vertical"],"type":"object"}`),
		),
		User_POST_businessesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_conversations",
			"GET conversations for User. Returns UnifiedThread. Parameters: folder (string), platform (userconversations_platform_enum_param), tags (list<string>), user_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"folder":{"description":"folder","type":"string"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"platform":{"description":"platform (enum: userconversations_platform_enum_param)","type":"string"},"tags":{"description":"tags","items":{"type":"string"},"type":"array"},"user_id":{"description":"user_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		User_GET_conversationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_custom_labels",
			"GET custom_labels for User. Returns PageUserMessageThreadLabel",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		User_GET_custom_labelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_events",
			"GET events for User. Returns Event. Parameters: include_canceled (bool), type (userevents_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"include_canceled":{"description":"include_canceled","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: userevents_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		User_GET_eventsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_feed",
			"GET feed for User. Returns Post. Parameters: include_hidden (bool), q (string), show_expired (bool), since (datetime), until (datetime), with (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"include_hidden":{"description":"include_hidden","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"q":{"description":"q","type":"string"},"show_expired":{"description":"show_expired","type":"boolean"},"since":{"description":"since","type":"string"},"until":{"description":"until","type":"string"},"with":{"description":"with","type":"string"}},"required":["id"],"type":"object"}`),
		),
		User_GET_feedHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_POST_feed",
			"POST feed for User. Returns Post. Parameters: actions (Object), album_id (string), android_key_hash (string), application_id (string), asked_fun_fact_prompt_id (unsigned int), asset3d_id (string), associated_id (string), attach_place_suggestion (bool), attached_media (list<Object>), audience_exp (bool), backdated_time (datetime), backdated_time_granularity (userfeed_backdated_time_granularity_enum_param), breaking_news (bool), breaking_news_expiration (unsigned int), call_to_action (Object), caption (string), child_attachments (list<Object>), client_mutation_id (string), composer_entry_picker (string), composer_entry_point (string), composer_entry_time (unsigned int), composer_session_events_log (string), composer_session_id (string), composer_source_surface (string), composer_type (string), connection_class (string), content_attachment (string), coordinates (Object), cta_link (string), cta_type (string), description (string), direct_share_status (unsigned int), expanded_height (unsigned int), expanded_width (unsigned int), feed_targeting (Object), formatting (userfeed_formatting_enum_param), fun_fact_prompt_id (string), fun_fact_toastee_id (unsigned int), height (unsigned int), home_checkin_city_id (Object), image_crops (map), implicit_with_tags (list<int>), instant_game_entry_point_data (string), ios_bundle_id (string), is_backout_draft (bool), is_boost_intended (bool), is_explicit_location (bool), is_explicit_share (bool), is_group_linking_post (bool), is_photo_container (bool), link (string), location_source_id (string), manual_privacy (bool), message (string), multi_share_end_card (bool), multi_share_optimized (bool), name (string), nectar_module (string), object_attachment (string), og_action_type_id (string), og_hide_object_attachment (bool), og_icon_id (string), og_object_id (string), og_phrase (string), og_set_profile_badge (bool), og_suggestion_mechanism (string), page_recommendation (string), picture (string), place (Object), place_attachment_setting (userfeed_place_attachment_setting_enum_param), place_list (string), place_list_data (list), post_surfaces_blacklist (list<userfeed_post_surfaces_blacklist_enum_param>), posting_to_redspace (userfeed_posting_to_redspace_enum_param), privacy (string), prompt_id (string), prompt_tracking_string (string), properties (Object), proxied_app_id (string), publish_event_id (unsigned int), published (bool), quote (string), ref (list<string>), referenceable_image_ids (list<string>), referral_id (string), scheduled_publish_time (datetime), source (string), sponsor_id (string), sponsor_relationship (unsigned int), suggested_place_id (Object), tags (list<int>), target_surface (userfeed_target_surface_enum_param), targeting (Object), text_format_metadata (string), text_format_preset_id (string), text_only_place (string), thumbnail (file), time_since_original_post (unsigned int), title (string), tracking_info (string), unpublished_content_type (userfeed_unpublished_content_type_enum_param), user_selected_tags (bool), video_start_time_ms (unsigned int), viewer_coordinates (Object), width (unsigned int)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"actions":{"additionalProperties":true,"description":"actions","type":"object"},"album_id":{"description":"album_id","type":"string"},"android_key_hash":{"description":"android_key_hash","type":"string"},"application_id":{"description":"application_id","type":"string"},"asked_fun_fact_prompt_id":{"description":"asked_fun_fact_prompt_id","type":"integer"},"asset3d_id":{"description":"asset3d_id","type":"string"},"associated_id":{"description":"associated_id","type":"string"},"attach_place_suggestion":{"description":"attach_place_suggestion","type":"boolean"},"attached_media":{"description":"attached_media","items":{"additionalProperties":true,"type":"object"},"type":"array"},"audience_exp":{"description":"audience_exp","type":"boolean"},"backdated_time":{"description":"backdated_time","type":"string"},"backdated_time_granularity":{"description":"backdated_time_granularity (enum: userfeed_backdated_time_granularity_enum_param)","type":"string"},"breaking_news":{"description":"breaking_news","type":"boolean"},"breaking_news_expiration":{"description":"breaking_news_expiration","type":"integer"},"call_to_action":{"additionalProperties":true,"description":"call_to_action","type":"object"},"caption":{"description":"caption","type":"string"},"child_attachments":{"description":"child_attachments","items":{"additionalProperties":true,"type":"object"},"type":"array"},"client_mutation_id":{"description":"client_mutation_id","type":"string"},"composer_entry_picker":{"description":"composer_entry_picker","type":"string"},"composer_entry_point":{"description":"composer_entry_point","type":"string"},"composer_entry_time":{"description":"composer_entry_time","type":"integer"},"composer_session_events_log":{"description":"composer_session_events_log","type":"string"},"composer_session_id":{"description":"composer_session_id","type":"string"},"composer_source_surface":{"description":"composer_source_surface","type":"string"},"composer_type":{"description":"composer_type","type":"string"},"connection_class":{"description":"connection_class","type":"string"},"content_attachment":{"description":"content_attachment","type":"string"},"coordinates":{"additionalProperties":true,"description":"coordinates","type":"object"},"cta_link":{"description":"cta_link","type":"string"},"cta_type":{"description":"cta_type","type":"string"},"description":{"description":"description","type":"string"},"direct_share_status":{"description":"direct_share_status","type":"integer"},"expanded_height":{"description":"expanded_height","type":"integer"},"expanded_width":{"description":"expanded_width","type":"integer"},"feed_targeting":{"additionalProperties":true,"description":"feed_targeting","type":"object"},"formatting":{"description":"formatting (enum: userfeed_formatting_enum_param)","type":"string"},"fun_fact_prompt_id":{"description":"fun_fact_prompt_id","type":"string"},"fun_fact_toastee_id":{"description":"fun_fact_toastee_id","type":"integer"},"height":{"description":"height","type":"integer"},"home_checkin_city_id":{"additionalProperties":true,"description":"home_checkin_city_id","type":"object"},"id":{"description":"User ID","type":"string"},"image_crops":{"description":"image_crops","type":"string"},"implicit_with_tags":{"description":"implicit_with_tags","items":{"type":"integer"},"type":"array"},"instant_game_entry_point_data":{"description":"instant_game_entry_point_data","type":"string"},"ios_bundle_id":{"description":"ios_bundle_id","type":"string"},"is_backout_draft":{"description":"is_backout_draft","type":"boolean"},"is_boost_intended":{"description":"is_boost_intended","type":"boolean"},"is_explicit_location":{"description":"is_explicit_location","type":"boolean"},"is_explicit_share":{"description":"is_explicit_share","type":"boolean"},"is_group_linking_post":{"description":"is_group_linking_post","type":"boolean"},"is_photo_container":{"description":"is_photo_container","type":"boolean"},"link":{"description":"link","type":"string"},"location_source_id":{"description":"location_source_id","type":"string"},"manual_privacy":{"description":"manual_privacy","type":"boolean"},"message":{"description":"message","type":"string"},"multi_share_end_card":{"description":"multi_share_end_card","type":"boolean"},"multi_share_optimized":{"description":"multi_share_optimized","type":"boolean"},"name":{"description":"name","type":"string"},"nectar_module":{"description":"nectar_module","type":"string"},"object_attachment":{"description":"object_attachment","type":"string"},"og_action_type_id":{"description":"og_action_type_id","type":"string"},"og_hide_object_attachment":{"description":"og_hide_object_attachment","type":"boolean"},"og_icon_id":{"description":"og_icon_id","type":"string"},"og_object_id":{"description":"og_object_id","type":"string"},"og_phrase":{"description":"og_phrase","type":"string"},"og_set_profile_badge":{"description":"og_set_profile_badge","type":"boolean"},"og_suggestion_mechanism":{"description":"og_suggestion_mechanism","type":"string"},"page_recommendation":{"description":"page_recommendation","type":"string"},"picture":{"description":"picture","type":"string"},"place":{"additionalProperties":true,"description":"place","type":"object"},"place_attachment_setting":{"description":"place_attachment_setting (enum: userfeed_place_attachment_setting_enum_param)","type":"string"},"place_list":{"description":"place_list","type":"string"},"place_list_data":{"description":"place_list_data","type":"string"},"post_surfaces_blacklist":{"description":"post_surfaces_blacklist","items":{"type":"string"},"type":"array"},"posting_to_redspace":{"description":"posting_to_redspace (enum: userfeed_posting_to_redspace_enum_param)","type":"string"},"privacy":{"description":"privacy","type":"string"},"prompt_id":{"description":"prompt_id","type":"string"},"prompt_tracking_string":{"description":"prompt_tracking_string","type":"string"},"properties":{"additionalProperties":true,"description":"properties","type":"object"},"proxied_app_id":{"description":"proxied_app_id","type":"string"},"publish_event_id":{"description":"publish_event_id","type":"integer"},"published":{"description":"published","type":"boolean"},"quote":{"description":"quote","type":"string"},"ref":{"description":"ref","items":{"type":"string"},"type":"array"},"referenceable_image_ids":{"description":"referenceable_image_ids","items":{"type":"string"},"type":"array"},"referral_id":{"description":"referral_id","type":"string"},"scheduled_publish_time":{"description":"scheduled_publish_time","type":"string"},"source":{"description":"source","type":"string"},"sponsor_id":{"description":"sponsor_id","type":"string"},"sponsor_relationship":{"description":"sponsor_relationship","type":"integer"},"suggested_place_id":{"additionalProperties":true,"description":"suggested_place_id","type":"object"},"tags":{"description":"tags","items":{"type":"integer"},"type":"array"},"target_surface":{"description":"target_surface (enum: userfeed_target_surface_enum_param)","type":"string"},"targeting":{"additionalProperties":true,"description":"targeting","type":"object"},"text_format_metadata":{"description":"text_format_metadata","type":"string"},"text_format_preset_id":{"description":"text_format_preset_id","type":"string"},"text_only_place":{"description":"text_only_place","type":"string"},"thumbnail":{"description":"thumbnail","type":"string"},"time_since_original_post":{"description":"time_since_original_post","type":"integer"},"title":{"description":"title","type":"string"},"tracking_info":{"description":"tracking_info","type":"string"},"unpublished_content_type":{"description":"unpublished_content_type (enum: userfeed_unpublished_content_type_enum_param)","type":"string"},"user_selected_tags":{"description":"user_selected_tags","type":"boolean"},"video_start_time_ms":{"description":"video_start_time_ms","type":"integer"},"viewer_coordinates":{"additionalProperties":true,"description":"viewer_coordinates","type":"object"},"width":{"description":"width","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		User_POST_feedHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_friends",
			"GET friends for User. Returns User. Parameters: uid (int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"uid":{"description":"uid","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		User_GET_friendsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_fundraisers",
			"GET fundraisers for User. Returns FundraiserPersonToCharity",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		User_GET_fundraisersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_POST_fundraisers",
			"POST fundraisers for User. Returns FundraiserPersonToCharity. Parameters: charity_id (string), cover_photo (file), currency (string) [required], description (string) [required], end_time (datetime) [required], external_event_name (string), external_event_start_time (datetime), external_event_uri (string), external_fundraiser_uri (string), external_id (string) [required], fundraiser_type (userfundraisers_fundraiser_type_enum_param) [required], goal_amount (unsigned int) [required], name (string) [required], page_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"charity_id":{"description":"charity_id","type":"string"},"cover_photo":{"description":"cover_photo","type":"string"},"currency":{"description":"currency","type":"string"},"description":{"description":"description","type":"string"},"end_time":{"description":"end_time","type":"string"},"external_event_name":{"description":"external_event_name","type":"string"},"external_event_start_time":{"description":"external_event_start_time","type":"string"},"external_event_uri":{"description":"external_event_uri","type":"string"},"external_fundraiser_uri":{"description":"external_fundraiser_uri","type":"string"},"external_id":{"description":"external_id","type":"string"},"fundraiser_type":{"description":"fundraiser_type (enum: userfundraisers_fundraiser_type_enum_param)","type":"string"},"goal_amount":{"description":"goal_amount","type":"integer"},"id":{"description":"User ID","type":"string"},"name":{"description":"name","type":"string"},"page_id":{"description":"page_id","type":"string"}},"required":["id","currency","description","end_time","external_id","fundraiser_type","goal_amount","name"],"type":"object"}`),
		),
		User_POST_fundraisersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_groups",
			"GET groups for User. Returns Group. Parameters: admin_only (bool), parent (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"admin_only":{"description":"admin_only","type":"boolean"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"parent":{"description":"parent","type":"string"}},"required":["id"],"type":"object"}`),
		),
		User_GET_groupsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_ids_for_apps",
			"GET ids_for_apps for User. Returns UserIDForApp. Parameters: app (int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"app":{"description":"app","type":"integer"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		User_GET_ids_for_appsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_ids_for_business",
			"GET ids_for_business for User. Returns UserIDForApp. Parameters: app (int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"app":{"description":"app","type":"integer"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		User_GET_ids_for_businessHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_ids_for_pages",
			"GET ids_for_pages for User. Returns UserIDForPage. Parameters: page (int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"page":{"description":"page","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		User_GET_ids_for_pagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_likes",
			"GET likes for User. Returns Page. Parameters: target_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"target_id":{"description":"target_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		User_GET_likesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_live_videos",
			"GET live_videos for User. Returns LiveVideo. Parameters: broadcast_status (list<userlive_videos_broadcast_status_enum_param>), source (userlive_videos_source_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"broadcast_status":{"description":"broadcast_status","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"source":{"description":"source (enum: userlive_videos_source_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		User_GET_live_videosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_POST_live_videos",
			"POST live_videos for User. Returns LiveVideo. Parameters: content_tags (list<string>), description (string), enable_backup_ingest (bool), encoding_settings (string), event_params (Object), fisheye_video_cropped (bool), front_z_rotation (float), is_audio_only (bool), is_spherical (bool), original_fov (unsigned int), privacy (string), projection (userlive_videos_projection_enum_param), published (bool), schedule_custom_profile_image (file), spatial_audio_format (userlive_videos_spatial_audio_format_enum_param), status (userlive_videos_status_enum_param), stereoscopic_mode (userlive_videos_stereoscopic_mode_enum_param), stop_on_delete_stream (bool), stream_type (userlive_videos_stream_type_enum_param), title (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"content_tags":{"description":"content_tags","items":{"type":"string"},"type":"array"},"description":{"description":"description","type":"string"},"enable_backup_ingest":{"description":"enable_backup_ingest","type":"boolean"},"encoding_settings":{"description":"encoding_settings","type":"string"},"event_params":{"additionalProperties":true,"description":"event_params","type":"object"},"fisheye_video_cropped":{"description":"fisheye_video_cropped","type":"boolean"},"front_z_rotation":{"description":"front_z_rotation","type":"number"},"id":{"description":"User ID","type":"string"},"is_audio_only":{"description":"is_audio_only","type":"boolean"},"is_spherical":{"description":"is_spherical","type":"boolean"},"original_fov":{"description":"original_fov","type":"integer"},"privacy":{"description":"privacy","type":"string"},"projection":{"description":"projection (enum: userlive_videos_projection_enum_param)","type":"string"},"published":{"description":"published","type":"boolean"},"schedule_custom_profile_image":{"description":"schedule_custom_profile_image","type":"string"},"spatial_audio_format":{"description":"spatial_audio_format (enum: userlive_videos_spatial_audio_format_enum_param)","type":"string"},"status":{"description":"status (enum: userlive_videos_status_enum_param)","type":"string"},"stereoscopic_mode":{"description":"stereoscopic_mode (enum: userlive_videos_stereoscopic_mode_enum_param)","type":"string"},"stop_on_delete_stream":{"description":"stop_on_delete_stream","type":"boolean"},"stream_type":{"description":"stream_type (enum: userlive_videos_stream_type_enum_param)","type":"string"},"title":{"description":"title","type":"string"}},"required":["id"],"type":"object"}`),
		),
		User_POST_live_videosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_POST_messenger_desktop_performance_traces",
			"POST messenger_desktop_performance_traces for User. Returns User",
			json.RawMessage(`{"additionalProperties":false,"properties":{},"type":"object"}`),
		),
		User_POST_messenger_desktop_performance_tracesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_POST_messenger_kids_accounts_unread_badge",
			"POST messenger_kids_accounts_unread_badge for User. Returns User. Parameters: proxied_app_id (int) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"proxied_app_id":{"description":"proxied_app_id","type":"integer"}},"required":["proxied_app_id"],"type":"object"}`),
		),
		User_POST_messenger_kids_accounts_unread_badgeHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_music",
			"GET music for User. Returns Page. Parameters: target_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"target_id":{"description":"target_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		User_GET_musicHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_POST_notifications",
			"POST notifications for User. Returns User. Parameters: bot_message_payload_elements (string), filtering (list<usernotifications_filtering_enum_param>), href (Object), label (string), message (map), notif_ids (list<string>), payload (string), read (bool), ref (string), schedule_interval (unsigned int), seen (bool), template (Object), type (usernotifications_type_enum_param)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"bot_message_payload_elements":{"description":"bot_message_payload_elements","type":"string"},"filtering":{"description":"filtering","items":{"type":"string"},"type":"array"},"href":{"additionalProperties":true,"description":"href","type":"object"},"id":{"description":"User ID","type":"string"},"label":{"description":"label","type":"string"},"message":{"description":"message","type":"string"},"notif_ids":{"description":"notif_ids","items":{"type":"string"},"type":"array"},"payload":{"description":"payload","type":"string"},"read":{"description":"read","type":"boolean"},"ref":{"description":"ref","type":"string"},"schedule_interval":{"description":"schedule_interval","type":"integer"},"seen":{"description":"seen","type":"boolean"},"template":{"additionalProperties":true,"description":"template","type":"object"},"type":{"description":"type (enum: usernotifications_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		User_POST_notificationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_payment_transactions",
			"GET payment_transactions for User. Returns PaymentEnginePayment",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		User_GET_payment_transactionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_DELETE_permissions",
			"DELETE permissions for User. Returns Object. Parameters: permission (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"permission":{"description":"permission","type":"string"}},"required":["id"],"type":"object"}`),
		),
		User_DELETE_permissionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_permissions",
			"GET permissions for User. Returns Permission. Parameters: permission (string), status (userpermissions_status_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"permission":{"description":"permission","type":"string"},"status":{"description":"status (enum: userpermissions_status_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		User_GET_permissionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_personal_ad_accounts",
			"GET personal_ad_accounts for User. Returns AdAccount",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		User_GET_personal_ad_accountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_photos",
			"GET photos for User. Returns Photo. Parameters: type (userphotos_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: userphotos_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		User_GET_photosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_POST_photos",
			"POST photos for User. Returns Photo. Parameters: aid (string), allow_spherical_photo (bool), alt_text_custom (string), android_key_hash (string), application_id (string), attempt (unsigned int), audience_exp (bool), backdated_time (datetime), backdated_time_granularity (userphotos_backdated_time_granularity_enum_param), caption (string), composer_session_id (string), direct_share_status (unsigned int), feed_targeting (Object), filter_type (unsigned int), full_res_is_coming_later (bool), initial_view_heading_override_degrees (unsigned int), initial_view_pitch_override_degrees (unsigned int), initial_view_vertical_fov_override_degrees (unsigned int), ios_bundle_id (string), is_explicit_location (bool), is_explicit_place (bool), manual_privacy (bool), message (string), name (string), no_story (bool), offline_id (unsigned int), og_action_type_id (string), og_icon_id (string), og_object_id (string), og_phrase (string), og_set_profile_badge (bool), og_suggestion_mechanism (string), place (Object), privacy (string), profile_id (int), provenance_info (map), proxied_app_id (string), published (bool), qn (string), scheduled_publish_time (unsigned int), spherical_metadata (map), sponsor_id (string), sponsor_relationship (unsigned int), tags (list<Object>), target_id (int), targeting (Object), time_since_original_post (unsigned int), uid (int), unpublished_content_type (userphotos_unpublished_content_type_enum_param), url (string), user_selected_tags (bool), vault_image_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"aid":{"description":"aid","type":"string"},"allow_spherical_photo":{"description":"allow_spherical_photo","type":"boolean"},"alt_text_custom":{"description":"alt_text_custom","type":"string"},"android_key_hash":{"description":"android_key_hash","type":"string"},"application_id":{"description":"application_id","type":"string"},"attempt":{"description":"attempt","type":"integer"},"audience_exp":{"description":"audience_exp","type":"boolean"},"backdated_time":{"description":"backdated_time","type":"string"},"backdated_time_granularity":{"description":"backdated_time_granularity (enum: userphotos_backdated_time_granularity_enum_param)","type":"string"},"caption":{"description":"caption","type":"string"},"composer_session_id":{"description":"composer_session_id","type":"string"},"direct_share_status":{"description":"direct_share_status","type":"integer"},"feed_targeting":{"additionalProperties":true,"description":"feed_targeting","type":"object"},"filter_type":{"description":"filter_type","type":"integer"},"full_res_is_coming_later":{"description":"full_res_is_coming_later","type":"boolean"},"id":{"description":"User ID","type":"string"},"initial_view_heading_override_degrees":{"description":"initial_view_heading_override_degrees","type":"integer"},"initial_view_pitch_override_degrees":{"description":"initial_view_pitch_override_degrees","type":"integer"},"initial_view_vertical_fov_override_degrees":{"description":"initial_view_vertical_fov_override_degrees","type":"integer"},"ios_bundle_id":{"description":"ios_bundle_id","type":"string"},"is_explicit_location":{"description":"is_explicit_location","type":"boolean"},"is_explicit_place":{"description":"is_explicit_place","type":"boolean"},"manual_privacy":{"description":"manual_privacy","type":"boolean"},"message":{"description":"message","type":"string"},"name":{"description":"name","type":"string"},"no_story":{"description":"no_story","type":"boolean"},"offline_id":{"description":"offline_id","type":"integer"},"og_action_type_id":{"description":"og_action_type_id","type":"string"},"og_icon_id":{"description":"og_icon_id","type":"string"},"og_object_id":{"description":"og_object_id","type":"string"},"og_phrase":{"description":"og_phrase","type":"string"},"og_set_profile_badge":{"description":"og_set_profile_badge","type":"boolean"},"og_suggestion_mechanism":{"description":"og_suggestion_mechanism","type":"string"},"place":{"additionalProperties":true,"description":"place","type":"object"},"privacy":{"description":"privacy","type":"string"},"profile_id":{"description":"profile_id","type":"integer"},"provenance_info":{"description":"provenance_info","type":"string"},"proxied_app_id":{"description":"proxied_app_id","type":"string"},"published":{"description":"published","type":"boolean"},"qn":{"description":"qn","type":"string"},"scheduled_publish_time":{"description":"scheduled_publish_time","type":"integer"},"spherical_metadata":{"description":"spherical_metadata","type":"string"},"sponsor_id":{"description":"sponsor_id","type":"string"},"sponsor_relationship":{"description":"sponsor_relationship","type":"integer"},"tags":{"description":"tags","items":{"additionalProperties":true,"type":"object"},"type":"array"},"target_id":{"description":"target_id","type":"integer"},"targeting":{"additionalProperties":true,"description":"targeting","type":"object"},"time_since_original_post":{"description":"time_since_original_post","type":"integer"},"uid":{"description":"uid","type":"integer"},"unpublished_content_type":{"description":"unpublished_content_type (enum: userphotos_unpublished_content_type_enum_param)","type":"string"},"url":{"description":"url","type":"string"},"user_selected_tags":{"description":"user_selected_tags","type":"boolean"},"vault_image_id":{"description":"vault_image_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		User_POST_photosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_picture",
			"GET picture for User. Returns ProfilePictureSource. Parameters: height (int), redirect (bool), type (userpicture_type_enum_param), width (int)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"height":{"description":"height","type":"integer"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"redirect":{"description":"redirect","type":"boolean"},"type":{"description":"type (enum: userpicture_type_enum_param)","type":"string"},"width":{"description":"width","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		User_GET_pictureHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_posts",
			"GET posts for User. Returns Post. Parameters: include_hidden (bool), q (string), show_expired (bool), since (datetime), until (datetime), with (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"include_hidden":{"description":"include_hidden","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"q":{"description":"q","type":"string"},"show_expired":{"description":"show_expired","type":"boolean"},"since":{"description":"since","type":"string"},"until":{"description":"until","type":"string"},"with":{"description":"with","type":"string"}},"required":["id"],"type":"object"}`),
		),
		User_GET_postsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_rich_media_documents",
			"GET rich_media_documents for User. Returns Canvas. Parameters: query (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"query":{"description":"query","type":"string"}},"type":"object"}`),
		),
		User_GET_rich_media_documentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_POST_staging_resources",
			"POST staging_resources for User. Returns User. Parameters: file (file)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"file":{"description":"file","type":"string"},"id":{"description":"User ID","type":"string"}},"required":["id"],"type":"object"}`),
		),
		User_POST_staging_resourcesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_videos",
			"GET videos for User. Returns AdVideo. Parameters: type (uservideos_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: uservideos_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		User_GET_videosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_POST_videos",
			"POST videos for User. Returns AdVideo. Parameters: application_id (string), asked_fun_fact_prompt_id (unsigned int), audio_story_wave_animation_handle (string), composer_entry_picker (string), composer_entry_point (string), composer_entry_time (unsigned int), composer_session_events_log (string), composer_session_id (string), composer_source_surface (string), composer_type (string), container_type (uservideos_container_type_enum_param), content_category (uservideos_content_category_enum_param), creative_tools (string), description (string), direct_share_status (unsigned int), embeddable (bool), end_offset (unsigned int), fbuploader_video_file_chunk (string), file_size (unsigned int), file_url (string), fisheye_video_cropped (bool), formatting (uservideos_formatting_enum_param), fov (unsigned int), front_z_rotation (float), fun_fact_prompt_id (string), fun_fact_toastee_id (unsigned int), guide (list<list<unsigned int>>), guide_enabled (bool), initial_heading (unsigned int), initial_pitch (unsigned int), instant_game_entry_point_data (string), is_boost_intended (bool), is_explicit_share (bool), is_group_linking_post (bool), is_partnership_ad (bool), is_voice_clip (bool), location_source_id (string), manual_privacy (bool), no_story (bool), og_action_type_id (string), og_icon_id (string), og_object_id (string), og_phrase (string), og_suggestion_mechanism (string), original_fov (unsigned int), original_projection_type (uservideos_original_projection_type_enum_param), partnership_ad_ad_code (string), privacy (string), publish_event_id (unsigned int), referenced_sticker_id (string), replace_video_id (string), slideshow_spec (map), source (string), source_instagram_media_id (string), spherical (bool), sponsor_id (string), start_offset (unsigned int), swap_mode (uservideos_swap_mode_enum_param), text_format_metadata (string), thumb (file), time_since_original_post (unsigned int), title (string), transcode_setting_properties (string), unpublished_content_type (uservideos_unpublished_content_type_enum_param), upload_phase (uservideos_upload_phase_enum_param), upload_session_id (string), upload_setting_properties (string), video_file_chunk (string), video_id_original (string), video_start_time_ms (unsigned int), waterfall_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"application_id":{"description":"application_id","type":"string"},"asked_fun_fact_prompt_id":{"description":"asked_fun_fact_prompt_id","type":"integer"},"audio_story_wave_animation_handle":{"description":"audio_story_wave_animation_handle","type":"string"},"composer_entry_picker":{"description":"composer_entry_picker","type":"string"},"composer_entry_point":{"description":"composer_entry_point","type":"string"},"composer_entry_time":{"description":"composer_entry_time","type":"integer"},"composer_session_events_log":{"description":"composer_session_events_log","type":"string"},"composer_session_id":{"description":"composer_session_id","type":"string"},"composer_source_surface":{"description":"composer_source_surface","type":"string"},"composer_type":{"description":"composer_type","type":"string"},"container_type":{"description":"container_type (enum: uservideos_container_type_enum_param)","type":"string"},"content_category":{"description":"content_category (enum: uservideos_content_category_enum_param)","type":"string"},"creative_tools":{"description":"creative_tools","type":"string"},"description":{"description":"description","type":"string"},"direct_share_status":{"description":"direct_share_status","type":"integer"},"embeddable":{"description":"embeddable","type":"boolean"},"end_offset":{"description":"end_offset","type":"integer"},"fbuploader_video_file_chunk":{"description":"fbuploader_video_file_chunk","type":"string"},"file_size":{"description":"file_size","type":"integer"},"file_url":{"description":"file_url","type":"string"},"fisheye_video_cropped":{"description":"fisheye_video_cropped","type":"boolean"},"formatting":{"description":"formatting (enum: uservideos_formatting_enum_param)","type":"string"},"fov":{"description":"fov","type":"integer"},"front_z_rotation":{"description":"front_z_rotation","type":"number"},"fun_fact_prompt_id":{"description":"fun_fact_prompt_id","type":"string"},"fun_fact_toastee_id":{"description":"fun_fact_toastee_id","type":"integer"},"guide":{"description":"guide","items":{"type":"string"},"type":"array"},"guide_enabled":{"description":"guide_enabled","type":"boolean"},"id":{"description":"User ID","type":"string"},"initial_heading":{"description":"initial_heading","type":"integer"},"initial_pitch":{"description":"initial_pitch","type":"integer"},"instant_game_entry_point_data":{"description":"instant_game_entry_point_data","type":"string"},"is_boost_intended":{"description":"is_boost_intended","type":"boolean"},"is_explicit_share":{"description":"is_explicit_share","type":"boolean"},"is_group_linking_post":{"description":"is_group_linking_post","type":"boolean"},"is_partnership_ad":{"description":"is_partnership_ad","type":"boolean"},"is_voice_clip":{"description":"is_voice_clip","type":"boolean"},"location_source_id":{"description":"location_source_id","type":"string"},"manual_privacy":{"description":"manual_privacy","type":"boolean"},"no_story":{"description":"no_story","type":"boolean"},"og_action_type_id":{"description":"og_action_type_id","type":"string"},"og_icon_id":{"description":"og_icon_id","type":"string"},"og_object_id":{"description":"og_object_id","type":"string"},"og_phrase":{"description":"og_phrase","type":"string"},"og_suggestion_mechanism":{"description":"og_suggestion_mechanism","type":"string"},"original_fov":{"description":"original_fov","type":"integer"},"original_projection_type":{"description":"original_projection_type (enum: uservideos_original_projection_type_enum_param)","type":"string"},"partnership_ad_ad_code":{"description":"partnership_ad_ad_code","type":"string"},"privacy":{"description":"privacy","type":"string"},"publish_event_id":{"description":"publish_event_id","type":"integer"},"referenced_sticker_id":{"description":"referenced_sticker_id","type":"string"},"replace_video_id":{"description":"replace_video_id","type":"string"},"slideshow_spec":{"description":"slideshow_spec","type":"string"},"source":{"description":"source","type":"string"},"source_instagram_media_id":{"description":"source_instagram_media_id","type":"string"},"spherical":{"description":"spherical","type":"boolean"},"sponsor_id":{"description":"sponsor_id","type":"string"},"start_offset":{"description":"start_offset","type":"integer"},"swap_mode":{"description":"swap_mode (enum: uservideos_swap_mode_enum_param)","type":"string"},"text_format_metadata":{"description":"text_format_metadata","type":"string"},"thumb":{"description":"thumb","type":"string"},"time_since_original_post":{"description":"time_since_original_post","type":"integer"},"title":{"description":"title","type":"string"},"transcode_setting_properties":{"description":"transcode_setting_properties","type":"string"},"unpublished_content_type":{"description":"unpublished_content_type (enum: uservideos_unpublished_content_type_enum_param)","type":"string"},"upload_phase":{"description":"upload_phase (enum: uservideos_upload_phase_enum_param)","type":"string"},"upload_session_id":{"description":"upload_session_id","type":"string"},"upload_setting_properties":{"description":"upload_setting_properties","type":"string"},"video_file_chunk":{"description":"video_file_chunk","type":"string"},"video_id_original":{"description":"video_id_original","type":"string"},"video_start_time_ms":{"description":"video_start_time_ms","type":"integer"},"waterfall_id":{"description":"waterfall_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		User_POST_videosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_DELETE_",
			"DELETE  for User. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		User_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_GET_",
			"GET  for User. Returns User",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		User_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"User_POST_",
			"POST  for User. Returns User. Parameters: emoji_color_pref (unsigned int), firstname (string), lastname (string), local_news_megaphone_dismiss_status (user_local_news_megaphone_dismiss_status), local_news_subscription_status (user_local_news_subscription_status), name (string), password (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"emoji_color_pref":{"description":"emoji_color_pref","type":"integer"},"firstname":{"description":"firstname","type":"string"},"id":{"description":"User ID","type":"string"},"lastname":{"description":"lastname","type":"string"},"local_news_megaphone_dismiss_status":{"description":"local_news_megaphone_dismiss_status (enum: user_local_news_megaphone_dismiss_status)","type":"string"},"local_news_subscription_status":{"description":"local_news_subscription_status (enum: user_local_news_subscription_status)","type":"string"},"name":{"description":"name","type":"string"},"password":{"description":"password","type":"string"}},"required":["id"],"type":"object"}`),
		),
		User_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"UserContext_GET_",
			"GET  for UserContext. Returns UserContext",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"UserContext ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		UserContext_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"UserPageOneTimeOptInTokenSettings_GET_",
			"GET  for UserPageOneTimeOptInTokenSettings. Returns UserPageOneTimeOptInTokenSettings",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"UserPageOneTimeOptInTokenSettings ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		UserPageOneTimeOptInTokenSettings_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Vehicle_GET_channels_to_integrity_status",
			"GET channels_to_integrity_status for Vehicle. Returns CatalogItemChannelsToIntegrityStatus",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Vehicle ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Vehicle_GET_channels_to_integrity_statusHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Vehicle_GET_override_details",
			"GET override_details for Vehicle. Returns OverrideDetails. Parameters: keys (list<string>), type (vehicleoverride_details_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Vehicle ID","type":"string"},"keys":{"description":"keys","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: vehicleoverride_details_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		Vehicle_GET_override_detailsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Vehicle_GET_videos_metadata",
			"GET videos_metadata for Vehicle. Returns DynamicVideoMetadata",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		Vehicle_GET_videos_metadataHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Vehicle_GET_",
			"GET  for Vehicle. Returns Vehicle",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Vehicle ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Vehicle_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"Vehicle_POST_",
			"POST  for Vehicle. Returns Vehicle. Parameters: address (map), applinks (Object), availability (vehicle_availability), body_style (vehicle_body_style), condition (vehicle_condition), currency (string), date_first_on_lot (string), dealer_id (string), dealer_name (string), dealer_phone (string), description (string), drivetrain (vehicle_drivetrain), exterior_color (string), fb_page_id (string), fuel_type (vehicle_fuel_type), images (list<Object>), interior_color (string), make (string), mileage (map), model (string), price (unsigned int), state_of_vehicle (vehicle_state_of_vehicle), title (string), transmission (vehicle_transmission), trim (string), url (string), vehicle_type (vehicle_vehicle_type), vin (string), year (unsigned int)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"address":{"description":"address","type":"string"},"applinks":{"additionalProperties":true,"description":"applinks","type":"object"},"availability":{"description":"availability (enum: vehicle_availability)","type":"string"},"body_style":{"description":"body_style (enum: vehicle_body_style)","type":"string"},"condition":{"description":"condition (enum: vehicle_condition)","type":"string"},"currency":{"description":"currency","type":"string"},"date_first_on_lot":{"description":"date_first_on_lot","type":"string"},"dealer_id":{"description":"dealer_id","type":"string"},"dealer_name":{"description":"dealer_name","type":"string"},"dealer_phone":{"description":"dealer_phone","type":"string"},"description":{"description":"description","type":"string"},"drivetrain":{"description":"drivetrain (enum: vehicle_drivetrain)","type":"string"},"exterior_color":{"description":"exterior_color","type":"string"},"fb_page_id":{"description":"fb_page_id","type":"string"},"fuel_type":{"description":"fuel_type (enum: vehicle_fuel_type)","type":"string"},"id":{"description":"Vehicle ID","type":"string"},"images":{"description":"images","items":{"additionalProperties":true,"type":"object"},"type":"array"},"interior_color":{"description":"interior_color","type":"string"},"make":{"description":"make","type":"string"},"mileage":{"description":"mileage","type":"string"},"model":{"description":"model","type":"string"},"price":{"description":"price","type":"integer"},"state_of_vehicle":{"description":"state_of_vehicle (enum: vehicle_state_of_vehicle)","type":"string"},"title":{"description":"title","type":"string"},"transmission":{"description":"transmission (enum: vehicle_transmission)","type":"string"},"trim":{"description":"trim","type":"string"},"url":{"description":"url","type":"string"},"vehicle_type":{"description":"vehicle_type (enum: vehicle_vehicle_type)","type":"string"},"vin":{"description":"vin","type":"string"},"year":{"description":"year","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		Vehicle_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"VehicleOffer_GET_channels_to_integrity_status",
			"GET channels_to_integrity_status for VehicleOffer. Returns CatalogItemChannelsToIntegrityStatus",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"VehicleOffer ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		VehicleOffer_GET_channels_to_integrity_statusHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"VehicleOffer_GET_override_details",
			"GET override_details for VehicleOffer. Returns OverrideDetails. Parameters: keys (list<string>), type (vehicleofferoverride_details_type_enum_param)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"VehicleOffer ID","type":"string"},"keys":{"description":"keys","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: vehicleofferoverride_details_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`),
		),
		VehicleOffer_GET_override_detailsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"VehicleOffer_GET_videos_metadata",
			"GET videos_metadata for VehicleOffer. Returns DynamicVideoMetadata",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		VehicleOffer_GET_videos_metadataHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"VehicleOffer_GET_",
			"GET  for VehicleOffer. Returns VehicleOffer",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"VehicleOffer ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		VehicleOffer_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"VideoCopyright_GET_update_records",
			"GET update_records for VideoCopyright. Returns MediaCopyrightUpdateRecord",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"VideoCopyright ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		VideoCopyright_GET_update_recordsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"VideoCopyright_GET_",
			"GET  for VideoCopyright. Returns VideoCopyright",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"VideoCopyright ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		VideoCopyright_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"VideoCopyright_POST_",
			"POST  for VideoCopyright. Returns VideoCopyright. Parameters: append_excluded_ownership_segments (bool), attribution_id (string), content_category (videocopyright_content_category), excluded_ownership_countries (list<string>), excluded_ownership_segments (list<Object>), is_reference_disabled (bool), monitoring_type (videocopyright_monitoring_type), ownership_countries (list<string>), rule_id (string), whitelisted_ids (list<string>), whitelisted_ig_user_ids (list<string>)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"append_excluded_ownership_segments":{"description":"append_excluded_ownership_segments","type":"boolean"},"attribution_id":{"description":"attribution_id","type":"string"},"content_category":{"description":"content_category (enum: videocopyright_content_category)","type":"string"},"excluded_ownership_countries":{"description":"excluded_ownership_countries","items":{"type":"string"},"type":"array"},"excluded_ownership_segments":{"description":"excluded_ownership_segments","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"VideoCopyright ID","type":"string"},"is_reference_disabled":{"description":"is_reference_disabled","type":"boolean"},"monitoring_type":{"description":"monitoring_type (enum: videocopyright_monitoring_type)","type":"string"},"ownership_countries":{"description":"ownership_countries","items":{"type":"string"},"type":"array"},"rule_id":{"description":"rule_id","type":"string"},"whitelisted_ids":{"description":"whitelisted_ids","items":{"type":"string"},"type":"array"},"whitelisted_ig_user_ids":{"description":"whitelisted_ig_user_ids","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
		),
		VideoCopyright_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"VideoCopyrightMatch_GET_",
			"GET  for VideoCopyrightMatch. Returns VideoCopyrightMatch",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"VideoCopyrightMatch ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		VideoCopyrightMatch_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"VideoCopyrightRule_GET_",
			"GET  for VideoCopyrightRule. Returns VideoCopyrightRule",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"VideoCopyrightRule ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		VideoCopyrightRule_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"VideoList_GET_videos",
			"GET videos for VideoList. Returns AdVideo",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"VideoList ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		VideoList_GET_videosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"VideoList_GET_",
			"GET  for VideoList. Returns VideoList",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"VideoList ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		VideoList_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"VideoPoll_GET_poll_options",
			"GET poll_options for VideoPoll. Returns VideoPollOption",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"VideoPoll ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		VideoPoll_GET_poll_optionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"VideoPoll_GET_",
			"GET  for VideoPoll. Returns VideoPoll",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"VideoPoll ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		VideoPoll_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"VideoPoll_POST_",
			"POST  for VideoPoll. Returns VideoPoll. Parameters: action (videopoll_action) [required], close_after_voting (bool), default_open (bool), show_gradient (bool), show_results (bool)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"action":{"description":"action (enum: videopoll_action)","type":"string"},"close_after_voting":{"description":"close_after_voting","type":"boolean"},"default_open":{"description":"default_open","type":"boolean"},"id":{"description":"VideoPoll ID","type":"string"},"show_gradient":{"description":"show_gradient","type":"boolean"},"show_results":{"description":"show_results","type":"boolean"}},"required":["id","action"],"type":"object"}`),
		),
		VideoPoll_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"VideoTextQuestion_GET_",
			"GET  for VideoTextQuestion. Returns VideoTextQuestion",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"VideoTextQuestion ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		VideoTextQuestion_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WearableDevicePublicKey_GET_",
			"GET  for WearableDevicePublicKey. Returns WearableDevicePublicKey",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WearableDevicePublicKey ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WearableDevicePublicKey_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WebsiteCreativeAssetSource_GET_",
			"GET  for WebsiteCreativeAssetSource. Returns WebsiteCreativeAssetSource",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WebsiteCreativeAssetSource ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WebsiteCreativeAssetSource_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WebsiteCreativeAssetSuggestions_GET_",
			"GET  for WebsiteCreativeAssetSuggestions. Returns WebsiteCreativeAssetSuggestions",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WebsiteCreativeAssetSuggestions ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WebsiteCreativeAssetSuggestions_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WebsiteCreativeInfo_GET_",
			"GET  for WebsiteCreativeInfo. Returns WebsiteCreativeInfo",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WebsiteCreativeInfo ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WebsiteCreativeInfo_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_GET_activities",
			"GET activities for WhatsAppBusinessAccount. Returns WhatsAppBusinessActivityHistory",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_GET_activitiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_DELETE_assigned_users",
			"DELETE assigned_users for WhatsAppBusinessAccount. Returns Object. Parameters: user (int) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"user":{"description":"user","type":"integer"}},"required":["id","user"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_DELETE_assigned_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_GET_assigned_users",
			"GET assigned_users for WhatsAppBusinessAccount. Returns AssignedUser. Parameters: business (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business":{"description":"business","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","business"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_GET_assigned_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_POST_assigned_users",
			"POST assigned_users for WhatsAppBusinessAccount. Returns WhatsAppBusinessAccount. Parameters: tasks (list<whatsappbusinessaccountassigned_users_tasks_enum_param>) [required], user (int) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"tasks":{"description":"tasks","items":{"type":"string"},"type":"array"},"user":{"description":"user","type":"integer"}},"required":["id","tasks","user"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_POST_assigned_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_GET_audiences",
			"GET audiences for WhatsAppBusinessAccount. Returns WhatsAppBusinessAudience",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_GET_audiencesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_GET_call_analytics",
			"GET call_analytics for WhatsAppBusinessAccount. Returns WABACallAnalytics. Parameters: country_codes (list<string>), dimensions (list<whatsappbusinessaccountcall_analytics_dimensions_enum_param>), directions (list<whatsappbusinessaccountcall_analytics_directions_enum_param>), end (unsigned int) [required], granularity (whatsappbusinessaccountcall_analytics_granularity_enum_param) [required], metric_types (list<whatsappbusinessaccountcall_analytics_metric_types_enum_param>), phone_numbers (list<string>), start (unsigned int) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"country_codes":{"description":"country_codes","items":{"type":"string"},"type":"array"},"dimensions":{"description":"dimensions","items":{"type":"string"},"type":"array"},"directions":{"description":"directions","items":{"type":"string"},"type":"array"},"end":{"description":"end","type":"integer"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"granularity":{"description":"granularity (enum: whatsappbusinessaccountcall_analytics_granularity_enum_param)","type":"string"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"metric_types":{"description":"metric_types","items":{"type":"string"},"type":"array"},"phone_numbers":{"description":"phone_numbers","items":{"type":"string"},"type":"array"},"start":{"description":"start","type":"integer"}},"required":["id","end","granularity","start"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_GET_call_analyticsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_GET_conversation_analytics",
			"GET conversation_analytics for WhatsAppBusinessAccount. Returns WABAConversationAnalytics. Parameters: conversation_categories (list<whatsappbusinessaccountconversation_analytics_conversation_categories_enum_param>), conversation_directions (list<whatsappbusinessaccountconversation_analytics_conversation_directions_enum_param>), conversation_types (list<whatsappbusinessaccountconversation_analytics_conversation_types_enum_param>), country_codes (list<string>), dimensions (list<whatsappbusinessaccountconversation_analytics_dimensions_enum_param>), end (unsigned int) [required], granularity (whatsappbusinessaccountconversation_analytics_granularity_enum_param) [required], metric_types (list<whatsappbusinessaccountconversation_analytics_metric_types_enum_param>), phone_numbers (list<string>), start (unsigned int) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"conversation_categories":{"description":"conversation_categories","items":{"type":"string"},"type":"array"},"conversation_directions":{"description":"conversation_directions","items":{"type":"string"},"type":"array"},"conversation_types":{"description":"conversation_types","items":{"type":"string"},"type":"array"},"country_codes":{"description":"country_codes","items":{"type":"string"},"type":"array"},"dimensions":{"description":"dimensions","items":{"type":"string"},"type":"array"},"end":{"description":"end","type":"integer"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"granularity":{"description":"granularity (enum: whatsappbusinessaccountconversation_analytics_granularity_enum_param)","type":"string"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"metric_types":{"description":"metric_types","items":{"type":"string"},"type":"array"},"phone_numbers":{"description":"phone_numbers","items":{"type":"string"},"type":"array"},"start":{"description":"start","type":"integer"}},"required":["id","end","granularity","start"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_GET_conversation_analyticsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_GET_dataset",
			"GET dataset for WhatsAppBusinessAccount. Returns Dataset",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_GET_datasetHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_POST_dataset",
			"POST dataset for WhatsAppBusinessAccount. Returns Dataset. Parameters: dataset_name (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"dataset_name":{"description":"dataset_name","type":"string"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"}},"required":["id"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_POST_datasetHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_GET_flows",
			"GET flows for WhatsAppBusinessAccount. Returns WhatsAppExtension",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_GET_flowsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_POST_flows",
			"POST flows for WhatsAppBusinessAccount. Returns WhatsAppExtension. Parameters: categories (list<whatsappbusinessaccountflows_categories_enum_param>) [required], clone_flow_id (string), endpoint_uri (string), flow_json (string), name (string) [required], publish (bool)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"categories":{"description":"categories","items":{"type":"string"},"type":"array"},"clone_flow_id":{"description":"clone_flow_id","type":"string"},"endpoint_uri":{"description":"endpoint_uri","type":"string"},"flow_json":{"description":"flow_json","type":"string"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"name":{"description":"name","type":"string"},"publish":{"description":"publish","type":"boolean"}},"required":["id","categories","name"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_POST_flowsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_POST_generate_payment_configuration_oauth_link",
			"POST generate_payment_configuration_oauth_link for WhatsAppBusinessAccount. Returns WhatsAppBusinessAccount. Parameters: configuration_name (string) [required], redirect_url (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"configuration_name":{"description":"configuration_name","type":"string"},"redirect_url":{"description":"redirect_url","type":"string"}},"required":["configuration_name"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_POST_generate_payment_configuration_oauth_linkHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_GET_message_campaigns",
			"GET message_campaigns for WhatsAppBusinessAccount. Returns WhatsAppBusinessCampaign",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		WhatsAppBusinessAccount_GET_message_campaignsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_GET_message_template_previews",
			"GET message_template_previews for WhatsAppBusinessAccount. Returns WhatsAppBusinessAccountMessageTemplatePreview. Parameters: add_security_recommendation (bool), button_types (list<whatsappbusinessaccountmessage_template_previews_button_types_enum_param>), category (whatsappbusinessaccountmessage_template_previews_category_enum_param) [required], code_expiration_minutes (unsigned int), languages (list<string>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"add_security_recommendation":{"description":"add_security_recommendation","type":"boolean"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"button_types":{"description":"button_types","items":{"type":"string"},"type":"array"},"category":{"description":"category (enum: whatsappbusinessaccountmessage_template_previews_category_enum_param)","type":"string"},"code_expiration_minutes":{"description":"code_expiration_minutes","type":"integer"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"languages":{"description":"languages","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["category"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_GET_message_template_previewsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_DELETE_message_templates",
			"DELETE message_templates for WhatsAppBusinessAccount. Returns Object. Parameters: hsm_id (string), name (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"hsm_id":{"description":"hsm_id","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"name":{"description":"name","type":"string"}},"required":["name"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_DELETE_message_templatesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_GET_message_templates",
			"GET message_templates for WhatsAppBusinessAccount. Returns WhatsAppBusinessHSM. Parameters: category (list<whatsappbusinessaccountmessage_templates_category_enum_param>), content (string), language (list<string>), name (string), name_or_content (string), quality_score (list<whatsappbusinessaccountmessage_templates_quality_score_enum_param>), status (list<whatsappbusinessaccountmessage_templates_status_enum_param>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"category":{"description":"category","items":{"type":"string"},"type":"array"},"content":{"description":"content","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"language":{"description":"language","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"name":{"description":"name","type":"string"},"name_or_content":{"description":"name_or_content","type":"string"},"quality_score":{"description":"quality_score","items":{"type":"string"},"type":"array"},"status":{"description":"status","items":{"type":"string"},"type":"array"}},"type":"object"}`),
		),
		WhatsAppBusinessAccount_GET_message_templatesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_POST_message_templates",
			"POST message_templates for WhatsAppBusinessAccount. Returns WhatsAppBusinessAccount. Parameters: allow_category_change (bool), category (whatsappbusinessaccountmessage_templates_category_enum_param) [required], components (list<map>), cta_url_link_tracking_opted_out (bool), degrees_of_freedom_spec (map), display_format (whatsappbusinessaccountmessage_templates_display_format_enum_param), language (string) [required], library_template_body_inputs (map), library_template_button_inputs (list<map>), library_template_name (string), message_send_ttl_seconds (unsigned int), name (string) [required], parameter_format (whatsappbusinessaccountmessage_templates_parameter_format_enum_param), sub_category (whatsappbusinessaccountmessage_templates_sub_category_enum_param)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"allow_category_change":{"description":"allow_category_change","type":"boolean"},"category":{"description":"category (enum: whatsappbusinessaccountmessage_templates_category_enum_param)","type":"string"},"components":{"description":"components","items":{"additionalProperties":true,"type":"object"},"type":"array"},"cta_url_link_tracking_opted_out":{"description":"cta_url_link_tracking_opted_out","type":"boolean"},"degrees_of_freedom_spec":{"description":"degrees_of_freedom_spec","type":"string"},"display_format":{"description":"display_format (enum: whatsappbusinessaccountmessage_templates_display_format_enum_param)","type":"string"},"language":{"description":"language","type":"string"},"library_template_body_inputs":{"description":"library_template_body_inputs","type":"string"},"library_template_button_inputs":{"description":"library_template_button_inputs","items":{"additionalProperties":true,"type":"object"},"type":"array"},"library_template_name":{"description":"library_template_name","type":"string"},"message_send_ttl_seconds":{"description":"message_send_ttl_seconds","type":"integer"},"name":{"description":"name","type":"string"},"parameter_format":{"description":"parameter_format (enum: whatsappbusinessaccountmessage_templates_parameter_format_enum_param)","type":"string"},"sub_category":{"description":"sub_category (enum: whatsappbusinessaccountmessage_templates_sub_category_enum_param)","type":"string"}},"required":["category","language","name"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_POST_message_templatesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_POST_migrate_flows",
			"POST migrate_flows for WhatsAppBusinessAccount. Returns WhatsAppBusinessAccount. Parameters: source_flow_names (list<string>), source_waba_id (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"source_flow_names":{"description":"source_flow_names","items":{"type":"string"},"type":"array"},"source_waba_id":{"description":"source_waba_id","type":"string"}},"required":["id","source_waba_id"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_POST_migrate_flowsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_POST_migrate_message_templates",
			"POST migrate_message_templates for WhatsAppBusinessAccount. Returns WhatsAppBusinessAccount. Parameters: page_number (unsigned int), source_waba_id (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"page_number":{"description":"page_number","type":"integer"},"source_waba_id":{"description":"source_waba_id","type":"string"}},"required":["source_waba_id"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_POST_migrate_message_templatesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_DELETE_payment_configuration",
			"DELETE payment_configuration for WhatsAppBusinessAccount. Returns Object. Parameters: configuration_name (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"configuration_name":{"description":"configuration_name","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["configuration_name"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_DELETE_payment_configurationHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_GET_payment_configuration",
			"GET payment_configuration for WhatsAppBusinessAccount. Returns WhatsAppBusinessAccountPaymentConfiguration. Parameters: configuration_name (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"configuration_name":{"description":"configuration_name","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["configuration_name"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_GET_payment_configurationHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_POST_payment_configuration",
			"POST payment_configuration for WhatsAppBusinessAccount. Returns WhatsAppBusinessAccount. Parameters: configuration_name (string) [required], data_endpoint_url (string), merchant_category_code (string), merchant_vpa (string), provider_name (whatsappbusinessaccountpayment_configuration_provider_name_enum_param), purpose_code (string), redirect_url (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"configuration_name":{"description":"configuration_name","type":"string"},"data_endpoint_url":{"description":"data_endpoint_url","type":"string"},"merchant_category_code":{"description":"merchant_category_code","type":"string"},"merchant_vpa":{"description":"merchant_vpa","type":"string"},"provider_name":{"description":"provider_name (enum: whatsappbusinessaccountpayment_configuration_provider_name_enum_param)","type":"string"},"purpose_code":{"description":"purpose_code","type":"string"},"redirect_url":{"description":"redirect_url","type":"string"}},"required":["configuration_name"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_POST_payment_configurationHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_GET_payment_configurations",
			"GET payment_configurations for WhatsAppBusinessAccount. Returns WhatsAppBusinessAccountPaymentConfigurations",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`),
		),
		WhatsAppBusinessAccount_GET_payment_configurationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_GET_phone_numbers",
			"GET phone_numbers for WhatsAppBusinessAccount. Returns WhatsAppBusinessAccountToNumberCurrentStatus",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_GET_phone_numbersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_POST_phone_numbers",
			"POST phone_numbers for WhatsAppBusinessAccount. Returns WhatsAppBusinessAccountToNumberCurrentStatus. Parameters: cc (string), migrate_phone_number (bool), phone_number (string), preverified_id (string), verified_name (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"cc":{"description":"cc","type":"string"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"migrate_phone_number":{"description":"migrate_phone_number","type":"boolean"},"phone_number":{"description":"phone_number","type":"string"},"preverified_id":{"description":"preverified_id","type":"string"},"verified_name":{"description":"verified_name","type":"string"}},"required":["id"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_POST_phone_numbersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_GET_pricing_analytics",
			"GET pricing_analytics for WhatsAppBusinessAccount. Returns WABAPricingAnalytics. Parameters: country_codes (list<string>), dimensions (list<whatsappbusinessaccountpricing_analytics_dimensions_enum_param>), end (unsigned int) [required], granularity (whatsappbusinessaccountpricing_analytics_granularity_enum_param) [required], metric_types (list<whatsappbusinessaccountpricing_analytics_metric_types_enum_param>), phone_numbers (list<string>), pricing_categories (list<whatsappbusinessaccountpricing_analytics_pricing_categories_enum_param>), pricing_types (list<whatsappbusinessaccountpricing_analytics_pricing_types_enum_param>), start (unsigned int) [required], tiers (list<string>)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"country_codes":{"description":"country_codes","items":{"type":"string"},"type":"array"},"dimensions":{"description":"dimensions","items":{"type":"string"},"type":"array"},"end":{"description":"end","type":"integer"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"granularity":{"description":"granularity (enum: whatsappbusinessaccountpricing_analytics_granularity_enum_param)","type":"string"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"metric_types":{"description":"metric_types","items":{"type":"string"},"type":"array"},"phone_numbers":{"description":"phone_numbers","items":{"type":"string"},"type":"array"},"pricing_categories":{"description":"pricing_categories","items":{"type":"string"},"type":"array"},"pricing_types":{"description":"pricing_types","items":{"type":"string"},"type":"array"},"start":{"description":"start","type":"integer"},"tiers":{"description":"tiers","items":{"type":"string"},"type":"array"}},"required":["id","end","granularity","start"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_GET_pricing_analyticsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_DELETE_product_catalogs",
			"DELETE product_catalogs for WhatsAppBusinessAccount. Returns Object. Parameters: catalog_id (string) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"catalog_id":{"description":"catalog_id","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id","catalog_id"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_DELETE_product_catalogsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_GET_product_catalogs",
			"GET product_catalogs for WhatsAppBusinessAccount. Returns ProductCatalog",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_GET_product_catalogsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_POST_product_catalogs",
			"POST product_catalogs for WhatsAppBusinessAccount. Returns ProductCatalog. Parameters: catalog_id (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"catalog_id":{"description":"catalog_id","type":"string"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"}},"required":["id","catalog_id"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_POST_product_catalogsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_GET_schedules",
			"GET schedules for WhatsAppBusinessAccount. Returns WhatsAppBusinessCampaignSchedule",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_GET_schedulesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_POST_set_obo_mobility_intent",
			"POST set_obo_mobility_intent for WhatsAppBusinessAccount. Returns WhatsAppBusinessAccountOBOMobilityIntent. Parameters: solution_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"solution_id":{"description":"solution_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_POST_set_obo_mobility_intentHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_POST_set_solution_migration_intent",
			"POST set_solution_migration_intent for WhatsAppBusinessAccount. Returns WhatsAppBusinessAccountMigrationIntent. Parameters: app_id (string), solution_id (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"app_id":{"description":"app_id","type":"string"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"solution_id":{"description":"solution_id","type":"string"}},"required":["id"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_POST_set_solution_migration_intentHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_GET_solutions",
			"GET solutions for WhatsAppBusinessAccount. Returns WhatsAppBusinessSolution",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_GET_solutionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_DELETE_subscribed_apps",
			"DELETE subscribed_apps for WhatsAppBusinessAccount. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_DELETE_subscribed_appsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_GET_subscribed_apps",
			"GET subscribed_apps for WhatsAppBusinessAccount. Returns WhatsAppApplication",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_GET_subscribed_appsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_POST_subscribed_apps",
			"POST subscribed_apps for WhatsAppBusinessAccount. Returns WhatsAppBusinessAccount. Parameters: override_callback_uri (string), verify_token (string)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"override_callback_uri":{"description":"override_callback_uri","type":"string"},"verify_token":{"description":"verify_token","type":"string"}},"required":["id"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_POST_subscribed_appsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_GET_template_analytics",
			"GET template_analytics for WhatsAppBusinessAccount. Returns WABATemplateAnalytics. Parameters: end (datetime) [required], granularity (whatsappbusinessaccounttemplate_analytics_granularity_enum_param) [required], metric_types (list<whatsappbusinessaccounttemplate_analytics_metric_types_enum_param>), product_type (whatsappbusinessaccounttemplate_analytics_product_type_enum_param), start (datetime) [required], template_ids (list<string>) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"end":{"description":"end","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"granularity":{"description":"granularity (enum: whatsappbusinessaccounttemplate_analytics_granularity_enum_param)","type":"string"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"metric_types":{"description":"metric_types","items":{"type":"string"},"type":"array"},"product_type":{"description":"product_type (enum: whatsappbusinessaccounttemplate_analytics_product_type_enum_param)","type":"string"},"start":{"description":"start","type":"string"},"template_ids":{"description":"template_ids","items":{"type":"string"},"type":"array"}},"required":["id","end","granularity","start","template_ids"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_GET_template_analyticsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_GET_template_group_analytics",
			"GET template_group_analytics for WhatsAppBusinessAccount. Returns WABATemplateGroupAnalytics. Parameters: end (datetime) [required], granularity (whatsappbusinessaccounttemplate_group_analytics_granularity_enum_param) [required], metric_types (list<whatsappbusinessaccounttemplate_group_analytics_metric_types_enum_param>), start (datetime) [required], template_group_ids (list<string>) [required]",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"end":{"description":"end","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"granularity":{"description":"granularity (enum: whatsappbusinessaccounttemplate_group_analytics_granularity_enum_param)","type":"string"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"metric_types":{"description":"metric_types","items":{"type":"string"},"type":"array"},"start":{"description":"start","type":"string"},"template_group_ids":{"description":"template_group_ids","items":{"type":"string"},"type":"array"}},"required":["id","end","granularity","start","template_group_ids"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_GET_template_group_analyticsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_GET_template_groups",
			"GET template_groups for WhatsAppBusinessAccount. Returns BusinessMessagingTemplateGroup",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_GET_template_groupsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_POST_template_groups",
			"POST template_groups for WhatsAppBusinessAccount. Returns BusinessMessagingTemplateGroup. Parameters: description (string) [required], name (string) [required], whatsapp_business_templates (list<string>) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"description":{"description":"description","type":"string"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"name":{"description":"name","type":"string"},"whatsapp_business_templates":{"description":"whatsapp_business_templates","items":{"type":"string"},"type":"array"}},"required":["id","description","name","whatsapp_business_templates"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_POST_template_groupsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_GET_template_performance_metrics",
			"GET template_performance_metrics for WhatsAppBusinessAccount. Returns WhatsAppBusinessHSMWhatsAppBusinessPerformanceMetrics. Parameters: name (string), template_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"name":{"description":"name","type":"string"},"template_id":{"description":"template_id","type":"string"}},"type":"object"}`),
		),
		WhatsAppBusinessAccount_GET_template_performance_metricsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_POST_upsert_message_templates",
			"POST upsert_message_templates for WhatsAppBusinessAccount. Returns WhatsAppBusinessAccount. Parameters: category (whatsappbusinessaccountupsert_message_templates_category_enum_param) [required], components (list<map>) [required], languages (list<string>) [required], message_send_ttl_seconds (unsigned int), name (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"category":{"description":"category (enum: whatsappbusinessaccountupsert_message_templates_category_enum_param)","type":"string"},"components":{"description":"components","items":{"additionalProperties":true,"type":"object"},"type":"array"},"languages":{"description":"languages","items":{"type":"string"},"type":"array"},"message_send_ttl_seconds":{"description":"message_send_ttl_seconds","type":"integer"},"name":{"description":"name","type":"string"}},"required":["category","components","languages","name"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_POST_upsert_message_templatesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_GET_welcome_message_sequences",
			"GET welcome_message_sequences for WhatsAppBusinessAccount. Returns CTXPartnerAppWelcomeMessageFlow. Parameters: app_id (string), sequence_id (string)",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"app_id":{"description":"app_id","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"sequence_id":{"description":"sequence_id","type":"string"}},"type":"object"}`),
		),
		WhatsAppBusinessAccount_GET_welcome_message_sequencesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_GET_",
			"GET  for WhatsAppBusinessAccount. Returns WhatsAppBusinessAccount",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessAccount_POST_",
			"POST  for WhatsAppBusinessAccount. Returns WhatsAppBusinessAccount. Parameters: is_enabled_for_insights (bool)",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"WhatsAppBusinessAccount ID","type":"string"},"is_enabled_for_insights":{"description":"is_enabled_for_insights","type":"boolean"}},"required":["id"],"type":"object"}`),
		),
		WhatsAppBusinessAccount_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessPreVerifiedPhoneNumber_GET_partners",
			"GET partners for WhatsAppBusinessPreVerifiedPhoneNumber. Returns Business",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WhatsAppBusinessPreVerifiedPhoneNumber ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WhatsAppBusinessPreVerifiedPhoneNumber_GET_partnersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessPreVerifiedPhoneNumber_POST_request_code",
			"POST request_code for WhatsAppBusinessPreVerifiedPhoneNumber. Returns Object. Parameters: code_method (whatsappbusinesspreverifiedphonenumberrequest_code_code_method_enum_param) [required], language (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"code_method":{"description":"code_method (enum: whatsappbusinesspreverifiedphonenumberrequest_code_code_method_enum_param)","type":"string"},"id":{"description":"WhatsAppBusinessPreVerifiedPhoneNumber ID","type":"string"},"language":{"description":"language","type":"string"}},"required":["id","code_method","language"],"type":"object"}`),
		),
		WhatsAppBusinessPreVerifiedPhoneNumber_POST_request_codeHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessPreVerifiedPhoneNumber_POST_verify_code",
			"POST verify_code for WhatsAppBusinessPreVerifiedPhoneNumber. Returns Object. Parameters: code (string) [required]",
			json.RawMessage(`{"additionalProperties":false,"properties":{"code":{"description":"code","type":"string"},"id":{"description":"WhatsAppBusinessPreVerifiedPhoneNumber ID","type":"string"}},"required":["id","code"],"type":"object"}`),
		),
		WhatsAppBusinessPreVerifiedPhoneNumber_POST_verify_codeHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessPreVerifiedPhoneNumber_DELETE_",
			"DELETE  for WhatsAppBusinessPreVerifiedPhoneNumber. Returns Object",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WhatsAppBusinessPreVerifiedPhoneNumber ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WhatsAppBusinessPreVerifiedPhoneNumber_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessPreVerifiedPhoneNumber_GET_",
			"GET  for WhatsAppBusinessPreVerifiedPhoneNumber. Returns WhatsAppBusinessPreVerifiedPhoneNumber",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WhatsAppBusinessPreVerifiedPhoneNumber ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WhatsAppBusinessPreVerifiedPhoneNumber_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessProfile_GET_",
			"GET  for WhatsAppBusinessProfile. Returns WhatsAppBusinessProfile",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WhatsAppBusinessProfile ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WhatsAppBusinessProfile_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhatsAppBusinessProfile_POST_",
			"POST  for WhatsAppBusinessProfile. Returns WhatsAppBusinessProfile",
			json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"WhatsAppBusinessProfile ID","type":"string"}},"required":["id"],"type":"object"}`),
		),
		WhatsAppBusinessProfile_POST_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WhitehatFBDLRun_GET_",
			"GET  for WhitehatFBDLRun. Returns WhitehatFBDLRun",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WhitehatFBDLRun ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WhitehatFBDLRun_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WifiInformation_GET_",
			"GET  for WifiInformation. Returns WifiInformation",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WifiInformation ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WifiInformation_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WithAsset3D_GET_",
			"GET  for WithAsset3D. Returns WithAsset3D",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WithAsset3D ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WithAsset3D_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WoodhengePurchasedPAYGReceipt_GET_",
			"GET  for WoodhengePurchasedPAYGReceipt. Returns WoodhengePurchasedPAYGReceipt",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WoodhengePurchasedPAYGReceipt ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WoodhengePurchasedPAYGReceipt_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WoodhengeSupporter_GET_",
			"GET  for WoodhengeSupporter. Returns WoodhengeSupporter",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WoodhengeSupporter ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WoodhengeSupporter_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WorkExperience_GET_",
			"GET  for WorkExperience. Returns WorkExperience",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WorkExperience ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WorkExperience_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WorkSkill_GET_users",
			"GET users for WorkSkill. Returns User",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WorkSkill ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WorkSkill_GET_usersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"WorkSkill_GET_",
			"GET  for WorkSkill. Returns WorkSkill",
			json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"WorkSkill ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`),
		),
		WorkSkill_GET_Handler,
	)

	return nil
}

// Total tools generated: 1441
