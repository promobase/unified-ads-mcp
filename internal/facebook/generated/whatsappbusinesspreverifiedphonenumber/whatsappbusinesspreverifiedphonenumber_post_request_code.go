// Code generated by Facebook Business API codegen. DO NOT EDIT.

package whatsappbusinesspreverifiedphonenumber

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolWhatsappbusinesspreverifiedphonenumber_post_request_code returns the MCP tool definition for whatsappbusinesspreverifiedphonenumber_post_request_code
func ToolWhatsappbusinesspreverifiedphonenumber_post_request_code() mcp.Tool {

	// Params object accepts: code_method (whatsappbusinesspreverifiedphonenumberrequest_code_code_method_enum_param), language (string)
	return mcp.NewTool("whatsappbusinesspreverifiedphonenumber_post_request_code",
		mcp.WithDescription("POST request_code for WhatsAppBusinessPreVerifiedPhoneNumber"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"code_method": map[string]any{
					"type":        "string",
					"description": "code_method parameter",
					"required":    true,
					"enum":        []string{"SMS", "VOICE"},
				},
				"language": map[string]any{
					"type":        "string",
					"description": "language parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: code_method (enum) [SMS, VOICE] [required], language (string) [required]"),
		),
	)
}

// HandleWhatsappbusinesspreverifiedphonenumber_post_request_code handles the whatsappbusinesspreverifiedphonenumber_post_request_code tool with context-based auth
func HandleWhatsappbusinesspreverifiedphonenumber_post_request_code(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	// Parse required params object and expand into args
	val, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(val), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the API method
	result, err := Whatsappbusinesspreverifiedphonenumber_post_request_code(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinesspreverifiedphonenumber_post_request_code: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Whatsappbusinesspreverifiedphonenumber_post_request_code performs POST request_code for WhatsAppBusinessPreVerifiedPhoneNumber
func Whatsappbusinesspreverifiedphonenumber_post_request_code(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "request_code"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
