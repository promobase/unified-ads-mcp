// Code generated by Facebook Business API codegen. DO NOT EDIT.

package business

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolBusiness_post_adaccount returns the MCP tool definition for business_post_adaccount
func ToolBusiness_post_adaccount() mcp.Tool {

	// Params object accepts: ad_account_created_from_bm_flag (bool), currency (string), end_advertiser (Object), funding_id (string), invoice (bool), invoice_group_id (string), invoicing_emails (list<string>), io (bool), media_agency (string), name (string), partner (string), po_number (string), timezone_id (unsigned int)
	return mcp.NewTool("business_post_adaccount",
		mcp.WithDescription("POST adaccount for Business"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"ad_account_created_from_bm_flag": map[string]any{
					"type":        "boolean",
					"description": "ad_account_created_from_bm_flag parameter",
				},
				"currency": map[string]any{
					"type":        "string",
					"description": "currency parameter",
					"required":    true,
				},
				"end_advertiser": map[string]any{
					"type":        "object",
					"description": "end_advertiser parameter",
					"required":    true,
				},
				"funding_id": map[string]any{
					"type":        "string",
					"description": "funding_id parameter",
				},
				"invoice": map[string]any{
					"type":        "boolean",
					"description": "invoice parameter",
				},
				"invoice_group_id": map[string]any{
					"type":        "string",
					"description": "invoice_group_id parameter",
				},
				"invoicing_emails": map[string]any{
					"type":        "array",
					"description": "invoicing_emails parameter",
					"items":       map[string]any{"type": "string"},
				},
				"io": map[string]any{
					"type":        "boolean",
					"description": "io parameter",
				},
				"media_agency": map[string]any{
					"type":        "string",
					"description": "media_agency parameter",
					"required":    true,
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
					"required":    true,
				},
				"partner": map[string]any{
					"type":        "string",
					"description": "partner parameter",
					"required":    true,
				},
				"po_number": map[string]any{
					"type":        "string",
					"description": "po_number parameter",
				},
				"timezone_id": map[string]any{
					"type":        "integer",
					"description": "timezone_id parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: ad_account_created_from_bm_flag (boolean), currency (string) [required], end_advertiser (object) [required], funding_id (string), invoice (boolean), invoice_group_id (string), invoicing_emails (array<string>), io (boolean), media_agency (string) [required], name (string) [required], partner (string) [required], po_number (string), timezone_id (integer) [required]"),
		),
	)
}

// HandleBusiness_post_adaccount handles the business_post_adaccount tool with context-based auth
func HandleBusiness_post_adaccount(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	// Parse required params object and expand into args
	val, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(val), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the API method
	result, err := Business_post_adaccount(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_adaccount: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Business_post_adaccount performs POST adaccount for Business
func Business_post_adaccount(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "adaccount"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
