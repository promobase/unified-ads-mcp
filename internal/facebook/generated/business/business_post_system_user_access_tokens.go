// Code generated by Facebook Business API codegen. DO NOT EDIT.

package business

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolBusiness_post_system_user_access_tokens returns the MCP tool definition for business_post_system_user_access_tokens
func ToolBusiness_post_system_user_access_tokens() mcp.Tool {

	// Params object accepts: asset (list<unsigned int>), fetch_only (bool), scope (list<Permission>), set_token_expires_in_60_days (bool), system_user_id (unsigned int)
	return mcp.NewTool("business_post_system_user_access_tokens",
		mcp.WithDescription("POST system_user_access_tokens for Business"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"asset": map[string]any{
					"type":        "array",
					"description": "asset parameter",
					"items":       map[string]any{"type": "integer"},
				},
				"fetch_only": map[string]any{
					"type":        "boolean",
					"description": "fetch_only parameter",
				},
				"scope": map[string]any{
					"type":        "array",
					"description": "scope parameter",
					"items":       map[string]any{"type": "string"},
				},
				"set_token_expires_in_60_days": map[string]any{
					"type":        "boolean",
					"description": "set_token_expires_in_60_days parameter",
				},
				"system_user_id": map[string]any{
					"type":        "integer",
					"description": "system_user_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: asset (array<integer>), fetch_only (boolean), scope (array<Permission>), set_token_expires_in_60_days (boolean), system_user_id (integer)"),
		),
	)
}

// HandleBusiness_post_system_user_access_tokens handles the business_post_system_user_access_tokens tool with context-based auth
func HandleBusiness_post_system_user_access_tokens(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Business_post_system_user_access_tokens(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_system_user_access_tokens: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Business_post_system_user_access_tokens performs POST system_user_access_tokens for Business
func Business_post_system_user_access_tokens(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "system_user_access_tokens"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
