// Code generated by Facebook Business API codegen. DO NOT EDIT.

package business

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolBusiness_post_managed_partner_business_setup returns the MCP tool definition for business_post_managed_partner_business_setup
func ToolBusiness_post_managed_partner_business_setup() mcp.Tool {

	// Params object accepts: active_ad_account_id (string), active_page_id (int), partner_facebook_page_url (string), partner_registration_countries (list<string>), seller_email_address (string), seller_external_website_url (string), template (list<map>)
	return mcp.NewTool("business_post_managed_partner_business_setup",
		mcp.WithDescription("POST managed_partner_business_setup for Business"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"active_ad_account_id": map[string]any{
					"type":        "string",
					"description": "active_ad_account_id parameter",
				},
				"active_page_id": map[string]any{
					"type":        "integer",
					"description": "active_page_id parameter",
				},
				"partner_facebook_page_url": map[string]any{
					"type":        "string",
					"description": "partner_facebook_page_url parameter",
				},
				"partner_registration_countries": map[string]any{
					"type":        "array",
					"description": "partner_registration_countries parameter",
					"items":       map[string]any{"type": "string"},
				},
				"seller_email_address": map[string]any{
					"type":        "string",
					"description": "seller_email_address parameter",
				},
				"seller_external_website_url": map[string]any{
					"type":        "string",
					"description": "seller_external_website_url parameter",
				},
				"template": map[string]any{
					"type":        "array",
					"description": "template parameter",
					"items":       map[string]any{"type": "object"},
				},
			}),
			mcp.Description("Parameters object containing: active_ad_account_id (string), active_page_id (integer), partner_facebook_page_url (string), partner_registration_countries (array<string>), seller_email_address (string), seller_external_website_url (string), template (array<object>)"),
		),
	)
}

// HandleBusiness_post_managed_partner_business_setup handles the business_post_managed_partner_business_setup tool with context-based auth
func HandleBusiness_post_managed_partner_business_setup(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Business_post_managed_partner_business_setup(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_managed_partner_business_setup: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Business_post_managed_partner_business_setup performs POST managed_partner_business_setup for Business
func Business_post_managed_partner_business_setup(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/managed_partner_business_setup")

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
