// Code generated by Facebook Business API codegen. DO NOT EDIT.

package business

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolBusiness_post_business_users returns the MCP tool definition for business_post_business_users
func ToolBusiness_post_business_users() mcp.Tool {

	// Params object accepts: email (string), invited_user_type (list<businessbusiness_users_invited_user_type_enum_param>), role (businessbusiness_users_role_enum_param), tasks (list<businessbusiness_users_tasks_enum_param>)
	return mcp.NewTool("business_post_business_users",
		mcp.WithDescription("POST business_users for Business"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"email": map[string]any{
					"type":        "string",
					"description": "email parameter",
					"required":    true,
				},
				"invited_user_type": map[string]any{
					"type":        "array",
					"description": "invited_user_type parameter",
					"enum":        []string{"FB", "MWA"},
					"items":       map[string]any{"type": "string"},
				},
				"role": map[string]any{
					"type":        "string",
					"description": "role parameter",
					"enum":        []string{"ADMIN", "ADS_RIGHTS_REVIEWER", "DEFAULT", "DEVELOPER", "EMPLOYEE", "FINANCE_ANALYST", "FINANCE_EDIT", "FINANCE_EDITOR", "FINANCE_VIEW", "MANAGE", "PARTNER_CENTER_ADMIN", "PARTNER_CENTER_ANALYST", "PARTNER_CENTER_EDUCATION", "PARTNER_CENTER_MARKETING", "PARTNER_CENTER_OPERATIONS"},
				},
				"tasks": map[string]any{
					"type":        "array",
					"description": "tasks parameter",
					"enum":        []string{"ADMIN", "ADS_RIGHTS_REVIEWER", "DEFAULT", "DEVELOPER", "EMPLOYEE", "FINANCE_ANALYST", "FINANCE_EDIT", "FINANCE_EDITOR", "FINANCE_VIEW", "MANAGE", "PARTNER_CENTER_ADMIN", "PARTNER_CENTER_ANALYST", "PARTNER_CENTER_EDUCATION", "PARTNER_CENTER_MARKETING", "PARTNER_CENTER_OPERATIONS"},
					"items":       map[string]any{"type": "string"},
				},
			}),
			mcp.Description("Parameters object containing: email (string) [required], invited_user_type (array<enum>) [FB, MWA], role (enum) [ADMIN, ADS_RIGHTS_REVIEWER, DEFAULT, DEVELOPER, EMPLOYEE, ...], tasks (array<enum>) [ADMIN, ADS_RIGHTS_REVIEWER, DEFAULT, DEVELOPER, EMPLOYEE, ...]"),
		),
	)
}

// HandleBusiness_post_business_users handles the business_post_business_users tool with context-based auth
func HandleBusiness_post_business_users(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	// Parse required params object and expand into args
	val, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(val), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the API method
	result, err := Business_post_business_users(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_business_users: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Business_post_business_users performs POST business_users for Business
func Business_post_business_users(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "business_users"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
