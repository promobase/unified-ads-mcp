// Code generated by Facebook Business API codegen. DO NOT EDIT.

package business

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolBusiness_post_owned_product_catalogs returns the MCP tool definition for business_post_owned_product_catalogs
func ToolBusiness_post_owned_product_catalogs() mcp.Tool {

	// Params object accepts: additional_vertical_option (businessowned_product_catalogs_additional_vertical_option_enum_param), business_metadata (map), catalog_segment_filter (Object), catalog_segment_product_set_id (string), da_display_settings (Object), destination_catalog_settings (map), flight_catalog_settings (map), name (string), parent_catalog_id (string), partner_integration (map), store_catalog_settings (map), vertical (businessowned_product_catalogs_vertical_enum_param)
	return mcp.NewTool("business_post_owned_product_catalogs",
		mcp.WithDescription("POST owned_product_catalogs for Business"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"additional_vertical_option": map[string]any{
					"type":        "string",
					"description": "additional_vertical_option parameter",
					"enum":        []string{"LOCAL_DA_CATALOG", "LOCAL_PRODUCTS"},
				},
				"business_metadata": map[string]any{
					"type":        "object",
					"description": "business_metadata parameter",
				},
				"catalog_segment_filter": map[string]any{
					"type":        "object",
					"description": "catalog_segment_filter parameter",
				},
				"catalog_segment_product_set_id": map[string]any{
					"type":        "string",
					"description": "catalog_segment_product_set_id parameter",
				},
				"da_display_settings": map[string]any{
					"type":        "object",
					"description": "da_display_settings parameter",
				},
				"destination_catalog_settings": map[string]any{
					"type":        "object",
					"description": "destination_catalog_settings parameter",
				},
				"flight_catalog_settings": map[string]any{
					"type":        "object",
					"description": "flight_catalog_settings parameter",
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
					"required":    true,
				},
				"parent_catalog_id": map[string]any{
					"type":        "string",
					"description": "parent_catalog_id parameter",
				},
				"partner_integration": map[string]any{
					"type":        "object",
					"description": "partner_integration parameter",
				},
				"store_catalog_settings": map[string]any{
					"type":        "object",
					"description": "store_catalog_settings parameter",
				},
				"vertical": map[string]any{
					"type":        "string",
					"description": "vertical parameter",
					"enum":        []string{"adoptable_pets", "commerce", "destinations", "flights", "generic", "home_listings", "hotels", "local_service_businesses", "offer_items", "offline_commerce", "transactable_items", "vehicles"},
				},
			}),
			mcp.Description("Parameters object containing: additional_vertical_option (enum) [LOCAL_DA_CATALOG, LOCAL_PRODUCTS], business_metadata (object), catalog_segment_filter (object), catalog_segment_product_set_id (string), da_display_settings (object), destination_catalog_settings (object), flight_catalog_settings (object), name (string) [required], parent_catalog_id (string), partner_integration (object), store_catalog_settings (object), vertical (enum) [adoptable_pets, commerce, destinations, flights, generic, ...]"),
		),
	)
}

// HandleBusiness_post_owned_product_catalogs handles the business_post_owned_product_catalogs tool with context-based auth
func HandleBusiness_post_owned_product_catalogs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	// Parse required params object and expand into args
	val, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(val), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the API method
	result, err := Business_post_owned_product_catalogs(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_owned_product_catalogs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Business_post_owned_product_catalogs performs POST owned_product_catalogs for Business
func Business_post_owned_product_catalogs(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "/owned_product_catalogs"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
