// Code generated by Facebook Business API codegen. DO NOT EDIT.

package business

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolBusiness_post_collaborative_ads_collaboration_requests returns the MCP tool definition for business_post_collaborative_ads_collaboration_requests
func ToolBusiness_post_collaborative_ads_collaboration_requests() mcp.Tool {

	// Params object accepts: brands (list<string>), contact_email (string), contact_first_name (string), contact_last_name (string), phone_number (string), receiver_business (string), requester_agency_or_brand (businesscollaborative_ads_collaboration_requests_requester_agency_or_brand_enum_param), sender_client_business (string)
	return mcp.NewTool("business_post_collaborative_ads_collaboration_requests",
		mcp.WithDescription("POST collaborative_ads_collaboration_requests for Business"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"brands": map[string]any{
					"type":        "array",
					"description": "brands parameter",
					"required":    true,
					"items":       map[string]any{"type": "string"},
				},
				"contact_email": map[string]any{
					"type":        "string",
					"description": "contact_email parameter",
					"required":    true,
				},
				"contact_first_name": map[string]any{
					"type":        "string",
					"description": "contact_first_name parameter",
					"required":    true,
				},
				"contact_last_name": map[string]any{
					"type":        "string",
					"description": "contact_last_name parameter",
					"required":    true,
				},
				"phone_number": map[string]any{
					"type":        "string",
					"description": "phone_number parameter",
				},
				"receiver_business": map[string]any{
					"type":        "string",
					"description": "receiver_business parameter",
					"required":    true,
				},
				"requester_agency_or_brand": map[string]any{
					"type":        "string",
					"description": "requester_agency_or_brand parameter",
					"required":    true,
					"enum":        []string{"AGENCY", "BRAND", "MERCHANT"},
				},
				"sender_client_business": map[string]any{
					"type":        "string",
					"description": "sender_client_business parameter",
				},
			}),
			mcp.Description("Parameters object containing: brands (array<string>) [required], contact_email (string) [required], contact_first_name (string) [required], contact_last_name (string) [required], phone_number (string), receiver_business (string) [required], requester_agency_or_brand (enum) [AGENCY, BRAND, MERCHANT] [required], sender_client_business (string)"),
		),
	)
}

// HandleBusiness_post_collaborative_ads_collaboration_requests handles the business_post_collaborative_ads_collaboration_requests tool with context-based auth
func HandleBusiness_post_collaborative_ads_collaboration_requests(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	// Parse required params object and expand into args
	val, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(val), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the API method
	result, err := Business_post_collaborative_ads_collaboration_requests(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_collaborative_ads_collaboration_requests: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Business_post_collaborative_ads_collaboration_requests performs POST collaborative_ads_collaboration_requests for Business
func Business_post_collaborative_ads_collaboration_requests(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "/collaborative_ads_collaboration_requests"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
