// Code generated by Facebook Business API codegen. DO NOT EDIT.

package business

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolBusiness_post returns the MCP tool definition for business_post
func ToolBusiness_post() mcp.Tool {

	// Params object accepts: entry_point (string), name (string), primary_page (string), timezone_id (unsigned int), two_factor_type (business_two_factor_type), vertical (business_vertical)
	return mcp.NewTool("business_post",
		mcp.WithDescription("POST  for Business"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"entry_point": map[string]any{
					"type":        "string",
					"description": "entry_point parameter",
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
				},
				"primary_page": map[string]any{
					"type":        "string",
					"description": "primary_page parameter",
				},
				"timezone_id": map[string]any{
					"type":        "integer",
					"description": "timezone_id parameter",
				},
				"two_factor_type": map[string]any{
					"type":        "string",
					"description": "two_factor_type parameter",
					"enum":        []string{"admin_required", "all_required", "none"},
				},
				"vertical": map[string]any{
					"type":        "string",
					"description": "vertical parameter",
					"enum":        []string{"ADVERTISING", "AUTOMOTIVE", "CONSUMER_PACKAGED_GOODS", "ECOMMERCE", "EDUCATION", "ENERGY_AND_UTILITIES", "ENTERTAINMENT_AND_MEDIA", "FINANCIAL_SERVICES", "GAMING", "GOVERNMENT_AND_POLITICS", "HEALTH", "LUXURY", "MARKETING", "NON_PROFIT", "NOT_SET", "ORGANIZATIONS_AND_ASSOCIATIONS", "OTHER", "PROFESSIONAL_SERVICES", "RESTAURANT", "RETAIL", "TECHNOLOGY", "TELECOM", "TRAVEL"},
				},
			}),
			mcp.Description("Parameters object containing: entry_point (string), name (string), primary_page (string), timezone_id (integer), two_factor_type (business_two_factor_type) [admin_required, all_required, none], vertical (business_vertical) [ADVERTISING, AUTOMOTIVE, CONSUMER_PACKAGED_GOODS, ECOMMERCE, EDUCATION, ...]"),
		),
	)
}

// HandleBusiness_post handles the business_post tool with context-based auth
func HandleBusiness_post(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Business_post(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Business_post performs POST  for Business
func Business_post(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
