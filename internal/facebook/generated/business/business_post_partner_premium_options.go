// Code generated by Facebook Business API codegen. DO NOT EDIT.

package business

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/shared"
)

// ToolBusiness_post_partner_premium_options returns the MCP tool definition for business_post_partner_premium_options
func ToolBusiness_post_partner_premium_options() mcp.Tool {
	
	// Params object accepts: catalog_segment_id (string), enable_basket_insight (bool), enable_extended_audience_retargeting (bool), partner_business_id (string), retailer_custom_audience_config (map), vendor_id (string)
	return mcp.NewTool("business_post_partner_premium_options",
		mcp.WithDescription("POST partner_premium_options for Business"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"catalog_segment_id": map[string]any{
					"type": "string",
					"description": "catalog_segment_id parameter",
				},
				"enable_basket_insight": map[string]any{
					"type": "boolean",
					"description": "enable_basket_insight parameter",
					"required": true,
				},
				"enable_extended_audience_retargeting": map[string]any{
					"type": "boolean",
					"description": "enable_extended_audience_retargeting parameter",
					"required": true,
				},
				"partner_business_id": map[string]any{
					"type": "string",
					"description": "partner_business_id parameter",
					"required": true,
				},
				"retailer_custom_audience_config": map[string]any{
					"type": "object",
					"description": "retailer_custom_audience_config parameter",
					"required": true,
				},
				"vendor_id": map[string]any{
					"type": "string",
					"description": "vendor_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: catalog_segment_id (string), enable_basket_insight (boolean) [required], enable_extended_audience_retargeting (boolean) [required], partner_business_id (string) [required], retailer_custom_audience_config (object) [required], vendor_id (string)"),
		),
	)
}

// HandleBusiness_post_partner_premium_options handles the business_post_partner_premium_options tool with context-based auth
func HandleBusiness_post_partner_premium_options(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}



	// Call the API method
	result, err := Business_post_partner_premium_options(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_partner_premium_options: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Business_post_partner_premium_options performs POST partner_premium_options for Business
func Business_post_partner_premium_options(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/partner_premium_options")
	
	urlParams := url.Values{}
	urlParams.Set("access_token", accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("params", fmt.Sprintf("%v", val))
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}