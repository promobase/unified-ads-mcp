// Code generated by Facebook Business API codegen. DO NOT EDIT.

package business

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/shared"
)

// ToolBusiness_post_managed_partner_businesses returns the MCP tool definition for business_post_managed_partner_businesses
func ToolBusiness_post_managed_partner_businesses() mcp.Tool {
	
	// Params object accepts: ad_account_currency (string), catalog_id (string), child_business_external_id (string), credit_limit (unsigned int), line_of_credit_id (string), name (string), no_ad_account (bool), page_name (string), page_profile_image_url (string), partition_type (businessmanaged_partner_businesses_partition_type_enum_param), partner_facebook_page_url (string), partner_registration_countries (list<string>), sales_rep_email (string), seller_external_website_url (string), seller_targeting_countries (list<string>), skip_partner_page_creation (bool), survey_business_type (businessmanaged_partner_businesses_survey_business_type_enum_param), survey_num_assets (unsigned int), survey_num_people (unsigned int), timezone_id (businessmanaged_partner_businesses_timezone_id_enum_param), vertical (businessmanaged_partner_businesses_vertical_enum_param)
	return mcp.NewTool("business_post_managed_partner_businesses",
		mcp.WithDescription("POST managed_partner_businesses for Business"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"ad_account_currency": map[string]any{
					"type": "string",
					"description": "ad_account_currency parameter",
				},
				"catalog_id": map[string]any{
					"type": "string",
					"description": "catalog_id parameter",
					"required": true,
				},
				"child_business_external_id": map[string]any{
					"type": "string",
					"description": "child_business_external_id parameter",
				},
				"credit_limit": map[string]any{
					"type": "integer",
					"description": "credit_limit parameter",
				},
				"line_of_credit_id": map[string]any{
					"type": "string",
					"description": "line_of_credit_id parameter",
				},
				"name": map[string]any{
					"type": "string",
					"description": "name parameter",
					"required": true,
				},
				"no_ad_account": map[string]any{
					"type": "boolean",
					"description": "no_ad_account parameter",
				},
				"page_name": map[string]any{
					"type": "string",
					"description": "page_name parameter",
				},
				"page_profile_image_url": map[string]any{
					"type": "string",
					"description": "page_profile_image_url parameter",
				},
				"partition_type": map[string]any{
					"type": "string",
					"description": "partition_type parameter",
					"enum": []string{ "AUTH", "FIXED", "FIXED_WITHOUT_PARTITION" },
				},
				"partner_facebook_page_url": map[string]any{
					"type": "string",
					"description": "partner_facebook_page_url parameter",
				},
				"partner_registration_countries": map[string]any{
					"type": "array",
					"description": "partner_registration_countries parameter",
					"items": map[string]any{"type": "string"},
				},
				"sales_rep_email": map[string]any{
					"type": "string",
					"description": "sales_rep_email parameter",
				},
				"seller_external_website_url": map[string]any{
					"type": "string",
					"description": "seller_external_website_url parameter",
					"required": true,
				},
				"seller_targeting_countries": map[string]any{
					"type": "array",
					"description": "seller_targeting_countries parameter",
					"required": true,
					"items": map[string]any{"type": "string"},
				},
				"skip_partner_page_creation": map[string]any{
					"type": "boolean",
					"description": "skip_partner_page_creation parameter",
				},
				"survey_business_type": map[string]any{
					"type": "string",
					"description": "survey_business_type parameter",
					"enum": []string{ "ADVERTISER", "AGENCY", "APP_DEVELOPER", "PUBLISHER" },
				},
				"survey_num_assets": map[string]any{
					"type": "integer",
					"description": "survey_num_assets parameter",
				},
				"survey_num_people": map[string]any{
					"type": "integer",
					"description": "survey_num_people parameter",
				},
				"timezone_id": map[string]any{
					"type": "string",
					"description": "timezone_id parameter",
					"enum": []string{},
				},
				"vertical": map[string]any{
					"type": "string",
					"description": "vertical parameter",
					"required": true,
					"enum": []string{ "ADVERTISING", "AUTOMOTIVE", "CONSUMER_PACKAGED_GOODS", "ECOMMERCE", "EDUCATION", "ENERGY_AND_UTILITIES", "ENTERTAINMENT_AND_MEDIA", "FINANCIAL_SERVICES", "GAMING", "GOVERNMENT_AND_POLITICS", "HEALTH", "LUXURY", "MARKETING", "NON_PROFIT", "NOT_SET", "ORGANIZATIONS_AND_ASSOCIATIONS", "OTHER", "PROFESSIONAL_SERVICES", "RESTAURANT", "RETAIL", "TECHNOLOGY", "TELECOM", "TRAVEL" },
				},
			}),
			mcp.Description("Parameters object containing: ad_account_currency (string), catalog_id (string) [required], child_business_external_id (string), credit_limit (integer), line_of_credit_id (string), name (string) [required], no_ad_account (boolean), page_name (string), page_profile_image_url (string), partition_type (enum) [AUTH, FIXED, FIXED_WITHOUT_PARTITION], partner_facebook_page_url (string), partner_registration_countries (array<string>), sales_rep_email (string), seller_external_website_url (string) [required], seller_targeting_countries (array<string>) [required], skip_partner_page_creation (boolean), survey_business_type (enum) [ADVERTISER, AGENCY, APP_DEVELOPER, PUBLISHER], survey_num_assets (integer), survey_num_people (integer), timezone_id (enum) [0, 1, 2, 3, 4, ...], vertical (enum) [ADVERTISING, AUTOMOTIVE, CONSUMER_PACKAGED_GOODS, ECOMMERCE, EDUCATION, ...] [required]"),
		),
	)
}

// HandleBusiness_post_managed_partner_businesses handles the business_post_managed_partner_businesses tool with context-based auth
func HandleBusiness_post_managed_partner_businesses(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}



	// Call the API method
	result, err := Business_post_managed_partner_businesses(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_managed_partner_businesses: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Business_post_managed_partner_businesses performs POST managed_partner_businesses for Business
func Business_post_managed_partner_businesses(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/managed_partner_businesses")
	
	urlParams := url.Values{}
	urlParams.Set("access_token", accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("params", fmt.Sprintf("%v", val))
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}