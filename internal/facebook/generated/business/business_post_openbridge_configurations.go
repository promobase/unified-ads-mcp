// Code generated by Facebook Business API codegen. DO NOT EDIT.

package business

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolBusiness_post_openbridge_configurations returns the MCP tool definition for business_post_openbridge_configurations
func ToolBusiness_post_openbridge_configurations() mcp.Tool {

	// Params object accepts: active (bool), cloud_provider (string), cloud_region (string), destination_id (string), endpoint (string), fallback_domain (string), first_party_domain (string), host_business_id (unsigned int), instance_id (string), instance_version (string), is_sgw_instance (bool), is_sgw_pixel_from_meta_pixel (bool), partner_name (string), pixel_id (unsigned int), sgw_account_id (string), sgw_instance_url (string), sgw_pixel_id (unsigned int)
	return mcp.NewTool("business_post_openbridge_configurations",
		mcp.WithDescription("POST openbridge_configurations for Business"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"active": map[string]any{
					"type":        "boolean",
					"description": "active parameter",
				},
				"cloud_provider": map[string]any{
					"type":        "string",
					"description": "cloud_provider parameter",
				},
				"cloud_region": map[string]any{
					"type":        "string",
					"description": "cloud_region parameter",
				},
				"destination_id": map[string]any{
					"type":        "string",
					"description": "destination_id parameter",
				},
				"endpoint": map[string]any{
					"type":        "string",
					"description": "endpoint parameter",
				},
				"fallback_domain": map[string]any{
					"type":        "string",
					"description": "fallback_domain parameter",
				},
				"first_party_domain": map[string]any{
					"type":        "string",
					"description": "first_party_domain parameter",
				},
				"host_business_id": map[string]any{
					"type":        "integer",
					"description": "host_business_id parameter",
				},
				"instance_id": map[string]any{
					"type":        "string",
					"description": "instance_id parameter",
				},
				"instance_version": map[string]any{
					"type":        "string",
					"description": "instance_version parameter",
				},
				"is_sgw_instance": map[string]any{
					"type":        "boolean",
					"description": "is_sgw_instance parameter",
				},
				"is_sgw_pixel_from_meta_pixel": map[string]any{
					"type":        "boolean",
					"description": "is_sgw_pixel_from_meta_pixel parameter",
				},
				"partner_name": map[string]any{
					"type":        "string",
					"description": "partner_name parameter",
				},
				"pixel_id": map[string]any{
					"type":        "integer",
					"description": "pixel_id parameter",
					"required":    true,
				},
				"sgw_account_id": map[string]any{
					"type":        "string",
					"description": "sgw_account_id parameter",
				},
				"sgw_instance_url": map[string]any{
					"type":        "string",
					"description": "sgw_instance_url parameter",
				},
				"sgw_pixel_id": map[string]any{
					"type":        "integer",
					"description": "sgw_pixel_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: active (boolean), cloud_provider (string), cloud_region (string), destination_id (string), endpoint (string), fallback_domain (string), first_party_domain (string), host_business_id (integer), instance_id (string), instance_version (string), is_sgw_instance (boolean), is_sgw_pixel_from_meta_pixel (boolean), partner_name (string), pixel_id (integer) [required], sgw_account_id (string), sgw_instance_url (string), sgw_pixel_id (integer)"),
		),
	)
}

// HandleBusiness_post_openbridge_configurations handles the business_post_openbridge_configurations tool with context-based auth
func HandleBusiness_post_openbridge_configurations(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	// Parse required params object and expand into args
	val, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(val), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the API method
	result, err := Business_post_openbridge_configurations(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_openbridge_configurations: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Business_post_openbridge_configurations performs POST openbridge_configurations for Business
func Business_post_openbridge_configurations(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "openbridge_configurations"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
