// Code generated by Facebook Business API codegen. DO NOT EDIT.

package privateliftstudyinstance

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolPrivateliftstudyinstance_post_ returns the MCP tool definition for privateliftstudyinstance_post_
func ToolPrivateliftstudyinstance_post_() mcp.Tool {

	// Params object accepts: operation (privateliftstudyinstance_operation), run_id (string)
	return mcp.NewTool("privateliftstudyinstance_post_",
		mcp.WithDescription("POST  for PrivateLiftStudyInstance"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"operation": map[string]any{
					"type":        "string",
					"description": "operation parameter",
					"enum":        []string{"AGGREGATE", "CANCEL", "COMPUTE", "ID_MATCH", "NEXT", "NONE"},
				},
				"run_id": map[string]any{
					"type":        "string",
					"description": "run_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: operation (privateliftstudyinstance_operation) [AGGREGATE, CANCEL, COMPUTE, ID_MATCH, NEXT, ...], run_id (string)"),
		),
	)
}

// HandlePrivateliftstudyinstance_post_ handles the privateliftstudyinstance_post_ tool with context-based auth
func HandlePrivateliftstudyinstance_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Privateliftstudyinstance_post_(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute privateliftstudyinstance_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Privateliftstudyinstance_post_ performs POST  for PrivateLiftStudyInstance
func Privateliftstudyinstance_post_(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
