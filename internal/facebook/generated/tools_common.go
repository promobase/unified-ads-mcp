// Code generated by codegen. DO NOT EDIT.

package generated

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"os"
)

const (
	graphAPIVersion = "v23.0"
	graphAPIHost    = "https://graph.facebook.com"
)

// getAccessToken retrieves the Facebook access token from environment
func getAccessToken() string {
	return os.Getenv("FACEBOOK_ACCESS_TOKEN")
}

// buildGraphURL constructs the Facebook Graph API URL
func buildGraphURL(objectID, endpoint string) string {
	if objectID != "" {
		return fmt.Sprintf("%s/%s/%s/%s", graphAPIHost, graphAPIVersion, objectID, endpoint)
	}
	return fmt.Sprintf("%s/%s/%s", graphAPIHost, graphAPIVersion, endpoint)
}

// makeGraphRequest performs an HTTP request to the Facebook Graph API
func makeGraphRequest(method, urlStr string, data map[string]interface{}) ([]byte, error) {
	client := &http.Client{}

	var req *http.Request
	var err error

	// Parse URL to add access token
	parsedURL, err := url.Parse(urlStr)
	if err != nil {
		return nil, fmt.Errorf("invalid URL: %w", err)
	}

	// Add access token to query params
	q := parsedURL.Query()
	q.Set("access_token", getAccessToken())
	parsedURL.RawQuery = q.Encode()

	// Create request based on method
	switch method {
	case "GET", "DELETE":
		req, err = http.NewRequest(method, parsedURL.String(), nil)
	case "POST", "PUT":
		jsonData, err := json.Marshal(data)
		if err != nil {
			return nil, fmt.Errorf("failed to marshal data: %w", err)
		}
		req, err = http.NewRequest(method, parsedURL.String(), bytes.NewBuffer(jsonData))
		if err == nil {
			req.Header.Set("Content-Type", "application/json")
		}
	default:
		return nil, fmt.Errorf("unsupported method: %s", method)
	}

	if err != nil {
		return nil, fmt.Errorf("failed to create request: %w", err)
	}

	// Execute request
	resp, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("request failed: %w", err)
	}
	defer resp.Body.Close()

	// Read response
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("failed to read response: %w", err)
	}

	// Check for errors
	if resp.StatusCode >= 400 {
		var fbError map[string]interface{}
		if err := json.Unmarshal(body, &fbError); err == nil {
			if errData, ok := fbError["error"].(map[string]interface{}); ok {
				return nil, fmt.Errorf("Facebook API error: %v - %v",
					errData["type"], errData["message"])
			}
		}
		return nil, fmt.Errorf("HTTP %d: %s", resp.StatusCode, string(body))
	}

	return body, nil
}
