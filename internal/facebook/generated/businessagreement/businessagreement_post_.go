// Code generated by Facebook Business API codegen. DO NOT EDIT.

package businessagreement

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolBusinessagreement_post_ returns the MCP tool definition for businessagreement_post_
func ToolBusinessagreement_post_() mcp.Tool {

	// Params object accepts: asset_id (unsigned int), request_status (businessagreement_request_status)
	return mcp.NewTool("businessagreement_post_",
		mcp.WithDescription("POST  for BusinessAgreement"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"asset_id": map[string]any{
					"type":        "integer",
					"description": "asset_id parameter",
				},
				"request_status": map[string]any{
					"type":        "string",
					"description": "request_status parameter",
					"enum":        []string{"APPROVE", "CANCELED", "DECLINE", "EXPIRED", "IN_PROGRESS", "PENDING", "PENDING_EMAIL_VERIFICATION", "PENDING_INTEGRITY_REVIEW"},
				},
			}),
			mcp.Description("Parameters object containing: asset_id (integer), request_status (businessagreement_request_status) [APPROVE, CANCELED, DECLINE, EXPIRED, IN_PROGRESS, ...]"),
		),
	)
}

// HandleBusinessagreement_post_ handles the businessagreement_post_ tool with context-based auth
func HandleBusinessagreement_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Businessagreement_post_(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute businessagreement_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Businessagreement_post_ performs POST  for BusinessAgreement
func Businessagreement_post_(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + ""

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
