// Code generated by Facebook Business API codegen. DO NOT EDIT.

package adsusersettings

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolAdsusersettings_get returns the MCP tool definition for adsusersettings_get
func ToolAdsusersettings_get() mcp.Tool {
	// Available fields for AdsUserSettings: a_plus_c_survey_seen, add_overlays_opt_in_status, adgroup_name_template, ads_cs_catalog_opt_out_timestamp, ads_tool_visits, aplusc_carousel_cda_opt_in_status, aplusc_carousel_inline_comment_opt_in_status, aplusc_enhance_cta_opt_in_status, aplusc_epa_opt_in_status, aplusc_local_store_extension_opt_in_status, aplusc_opt_out_friction, aplusc_videofilter_opt_in_status, aplusc_videouncrop_opt_in_status, autoflow_lite_opt_in_status, autoflow_lite_should_opt_in, blended_ads_creation_defaulting_opt_in_status, blended_ads_creation_defaulting_opt_out_campaign_group_ids, bookmarked_pages, campaign_group_name_template, campaign_name_template, carousel_to_video_opt_in_status, connected_sources_catalog_opt_in_status, da_add_overlays_opt_in_status, da_hide_price_opt_in_status, default_creation_mode, dynamic_partnership_ads_opt_in_status, enhance_cta_text_extraction_opt_in_status, export_format_default, focus_mode_default, gen_ai_alpha_test_status, id, image_background_generation_opt_in_status, image_brightness_and_contrast_opt_in_status, image_expansion_opt_in_status, is_ads_ai_consented, is_cbo_default_on, is_se_removal_guidance_dismissed, last_used_post_format, last_visited_time, metadata_brand_kit_opt_in_status, music_on_reels_opt_in, muted_cbo_midflight_education_messages, onsite_destination_optimization_opt_in, open_tabs, pac_relaxation_opt_in_status, placement_group_square_opt_in_status, placement_group_vertical_opt_in_status, previously_seen_recommendations, product_extensions_opt_in, sa_off_conv_loc_seen, saoff_published_l2_conv_loc_seen, saon_migr_l1_seen_status, selected_ad_account, selected_comparison_timerange, selected_metric_cic, selected_metrics_cic, selected_page, selected_page_section, selected_power_editor_pane, selected_stat_range, should_export_filter_empty_cols, should_export_rows_without_unsupported_feature, should_not_auto_expand_tree_table, should_not_show_cbo_campaign_toggle_off_confirmation_message, should_not_show_publish_message_on_editor_close, show_original_videos_opt_in, static_ad_product_extensions_opt_in, sticky_setting_after_default_on, syd_campaign_trends_metric, text_optimizations_text_extraction_opt_in_status, text_translation_opt_in_status, text_variations_sticky_opt_in_status, total_coupon_syd_dismissals, total_coupon_upsell_dismissals, url_prefill_removal_timestamp, use_pe_create_flow, use_stepper_primary_entry, user

	return mcp.NewTool("adsusersettings_get",
		mcp.WithDescription("GET  for AdsUserSettings"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for AdsUserSettings objects. Available fields: a_plus_c_survey_seen, add_overlays_opt_in_status, adgroup_name_template, ads_cs_catalog_opt_out_timestamp, ads_tool_visits, aplusc_carousel_cda_opt_in_status, aplusc_carousel_inline_comment_opt_in_status, aplusc_enhance_cta_opt_in_status, aplusc_epa_opt_in_status, aplusc_local_store_extension_opt_in_status, aplusc_opt_out_friction, aplusc_videofilter_opt_in_status, aplusc_videouncrop_opt_in_status, autoflow_lite_opt_in_status, autoflow_lite_should_opt_in (and 63 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleAdsusersettings_get handles the adsusersettings_get tool with context-based auth
func HandleAdsusersettings_get(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	utils.ParseFieldsArray(request, args)

	// Optional: limit
	utils.ParseOptionalInt(request, "limit", args)

	// Optional: after
	utils.ParseOptionalString(request, "after", args)

	// Optional: before
	utils.ParseOptionalString(request, "before", args)

	// Call the API method
	result, err := Adsusersettings_get(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adsusersettings_get: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Adsusersettings_get performs GET  for AdsUserSettings
func Adsusersettings_get(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("GET", baseURL, urlParams)
}
