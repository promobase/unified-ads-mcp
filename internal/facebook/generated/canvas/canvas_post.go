// Code generated by Facebook Business API codegen. DO NOT EDIT.

package canvas

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolCanvas_post returns the MCP tool definition for canvas_post
func ToolCanvas_post() mcp.Tool {

	// Params object accepts: background_color (string), body_element_ids (list<string>), enable_swipe_to_open (bool), is_hidden (bool), is_published (bool), name (string), source_template_id (string)
	return mcp.NewTool("canvas_post",
		mcp.WithDescription("POST  for Canvas"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"background_color": map[string]any{
					"type":        "string",
					"description": "background_color parameter",
				},
				"body_element_ids": map[string]any{
					"type":        "array",
					"description": "body_element_ids parameter",
					"items":       map[string]any{"type": "string"},
				},
				"enable_swipe_to_open": map[string]any{
					"type":        "boolean",
					"description": "enable_swipe_to_open parameter",
				},
				"is_hidden": map[string]any{
					"type":        "boolean",
					"description": "is_hidden parameter",
				},
				"is_published": map[string]any{
					"type":        "boolean",
					"description": "is_published parameter",
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
				},
				"source_template_id": map[string]any{
					"type":        "string",
					"description": "source_template_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: background_color (string), body_element_ids (array<string>), enable_swipe_to_open (boolean), is_hidden (boolean), is_published (boolean), name (string), source_template_id (string)"),
		),
	)
}

// HandleCanvas_post handles the canvas_post tool with context-based auth
func HandleCanvas_post(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Canvas_post(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute canvas_post: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Canvas_post performs POST  for Canvas
func Canvas_post(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + ""

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
