// Code generated by Facebook Business API codegen. DO NOT EDIT.

package adspixel

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolAdspixel_get_offline_event_uploads returns the MCP tool definition for adspixel_get_offline_event_uploads
func ToolAdspixel_get_offline_event_uploads() mcp.Tool {
	// Available fields for OfflineConversionDataSetUpload: api_calls, creation_time, duplicate_entries, event_stats, event_time_max, event_time_min, first_upload_time, id, is_excluded_for_lift, last_upload_time, match_rate_approx, matched_entries, upload_tag, valid_entries
	// Params object accepts: end_time (datetime), order (adspixeloffline_event_uploads_order_enum_param), sort_by (adspixeloffline_event_uploads_sort_by_enum_param), start_time (datetime), upload_tag (string)
	return mcp.NewTool("adspixel_get_offline_event_uploads",
		mcp.WithDescription("GET offline_event_uploads for AdsPixel"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"end_time": map[string]any{
					"type":        "string",
					"description": "end_time parameter",
				},
				"order": map[string]any{
					"type":        "string",
					"description": "order parameter",
					"enum":        []string{"ASCENDING", "DESCENDING"},
				},
				"sort_by": map[string]any{
					"type":        "string",
					"description": "sort_by parameter",
					"enum":        []string{"API_CALLS", "CREATION_TIME", "EVENT_TIME_MAX", "EVENT_TIME_MIN", "FIRST_UPLOAD_TIME", "IS_EXCLUDED_FOR_LIFT", "LAST_UPLOAD_TIME"},
				},
				"start_time": map[string]any{
					"type":        "string",
					"description": "start_time parameter",
				},
				"upload_tag": map[string]any{
					"type":        "string",
					"description": "upload_tag parameter",
				},
			}),
			mcp.Description("Parameters object containing: end_time (datetime), order (enum) [ASCENDING, DESCENDING], sort_by (enum) [API_CALLS, CREATION_TIME, EVENT_TIME_MAX, EVENT_TIME_MIN, FIRST_UPLOAD_TIME, ...], start_time (datetime), upload_tag (string)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for OfflineConversionDataSetUpload objects. Available fields: api_calls, creation_time, duplicate_entries, event_stats, event_time_max, event_time_min, first_upload_time, id, is_excluded_for_lift, last_upload_time, match_rate_approx, matched_entries, upload_tag, valid_entries"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleAdspixel_get_offline_event_uploads handles the adspixel_get_offline_event_uploads tool with context-based auth
func HandleAdspixel_get_offline_event_uploads(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Optional: fields
	utils.ParseFieldsArray(request, args)

	// Optional: limit
	utils.ParseOptionalInt(request, "limit", args)

	// Optional: after
	utils.ParseOptionalString(request, "after", args)

	// Optional: before
	utils.ParseOptionalString(request, "before", args)

	// Call the API method
	result, err := Adspixel_get_offline_event_uploads(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adspixel_get_offline_event_uploads: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Adspixel_get_offline_event_uploads performs GET offline_event_uploads for AdsPixel
func Adspixel_get_offline_event_uploads(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/offline_event_uploads")

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("GET", baseURL, urlParams)
}
