// Code generated by Facebook Business API codegen. DO NOT EDIT.

package adspixel

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolAdspixel_post returns the MCP tool definition for adspixel_post
func ToolAdspixel_post() mcp.Tool {

	// Params object accepts: automatic_matching_fields (list<adspixel_automatic_matching_fields>), data_use_setting (adspixel_data_use_setting), enable_automatic_matching (bool), first_party_cookie_status (adspixel_first_party_cookie_status), name (string), server_events_business_ids (list<string>)
	return mcp.NewTool("adspixel_post",
		mcp.WithDescription("POST  for AdsPixel"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"automatic_matching_fields": map[string]any{
					"type":        "array",
					"description": "automatic_matching_fields parameter",
					"enum":        []string{"country", "ct", "db", "em", "external_id", "fn", "ge", "ln", "ph", "st", "zp"},
					"items":       map[string]any{"type": "string"},
				},
				"data_use_setting": map[string]any{
					"type":        "string",
					"description": "data_use_setting parameter",
					"enum":        []string{"ADVERTISING_AND_ANALYTICS", "ANALYTICS_ONLY", "EMPTY"},
				},
				"enable_automatic_matching": map[string]any{
					"type":        "boolean",
					"description": "enable_automatic_matching parameter",
				},
				"first_party_cookie_status": map[string]any{
					"type":        "string",
					"description": "first_party_cookie_status parameter",
					"enum":        []string{"EMPTY", "FIRST_PARTY_COOKIE_DISABLED", "FIRST_PARTY_COOKIE_ENABLED"},
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
				},
				"server_events_business_ids": map[string]any{
					"type":        "array",
					"description": "server_events_business_ids parameter",
					"items":       map[string]any{"type": "string"},
				},
			}),
			mcp.Description("Parameters object containing: automatic_matching_fields (array<adspixel_automatic_matching_fields>) [country, ct, db, em, external_id, ...], data_use_setting (adspixel_data_use_setting) [ADVERTISING_AND_ANALYTICS, ANALYTICS_ONLY, EMPTY], enable_automatic_matching (boolean), first_party_cookie_status (adspixel_first_party_cookie_status) [EMPTY, FIRST_PARTY_COOKIE_DISABLED, FIRST_PARTY_COOKIE_ENABLED], name (string), server_events_business_ids (array<string>)"),
		),
	)
}

// HandleAdspixel_post handles the adspixel_post tool with context-based auth
func HandleAdspixel_post(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Adspixel_post(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adspixel_post: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Adspixel_post performs POST  for AdsPixel
func Adspixel_post(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + ""

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
