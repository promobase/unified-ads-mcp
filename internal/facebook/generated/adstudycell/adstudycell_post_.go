// Code generated by Facebook Business API codegen. DO NOT EDIT.

package adstudycell

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolAdstudycell_post_ returns the MCP tool definition for adstudycell_post_
func ToolAdstudycell_post_() mcp.Tool {

	// Params object accepts: adaccounts (list<unsigned int>), adsets (list<string>), campaigns (list<string>), creation_template (adstudycell_creation_template), description (string), name (string)
	return mcp.NewTool("adstudycell_post_",
		mcp.WithDescription("POST  for AdStudyCell"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"adaccounts": map[string]any{
					"type":        "array",
					"description": "adaccounts parameter",
					"items":       map[string]any{"type": "integer"},
				},
				"adsets": map[string]any{
					"type":        "array",
					"description": "adsets parameter",
					"items":       map[string]any{"type": "string"},
				},
				"campaigns": map[string]any{
					"type":        "array",
					"description": "campaigns parameter",
					"items":       map[string]any{"type": "string"},
				},
				"creation_template": map[string]any{
					"type":        "string",
					"description": "creation_template parameter",
					"enum":        []string{"AUTOMATIC_PLACEMENTS", "BRAND_AWARENESS", "FACEBOOK", "FACEBOOK_AUDIENCE_NETWORK", "FACEBOOK_INSTAGRAM", "FACEBOOK_NEWS_FEED", "FACEBOOK_NEWS_FEED_IN_STREAM_VIDEO", "HIGH_FREQUENCY", "INSTAGRAM", "IN_STREAM_VIDEO", "LOW_FREQUENCY", "MEDIUM_FREQUENCY", "MOBILE_OPTIMIZED_VIDEO", "PAGE_POST_ENGAGEMENT", "REACH", "TV_COMMERCIAL", "TV_FACEBOOK", "VIDEO_VIEW_OPTIMIZATION"},
				},
				"description": map[string]any{
					"type":        "string",
					"description": "description parameter",
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
				},
			}),
			mcp.Description("Parameters object containing: adaccounts (array<integer>), adsets (array<string>), campaigns (array<string>), creation_template (adstudycell_creation_template) [AUTOMATIC_PLACEMENTS, BRAND_AWARENESS, FACEBOOK, FACEBOOK_AUDIENCE_NETWORK, FACEBOOK_INSTAGRAM, ...], description (string), name (string)"),
		),
	)
}

// HandleAdstudycell_post_ handles the adstudycell_post_ tool with context-based auth
func HandleAdstudycell_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Adstudycell_post_(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adstudycell_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Adstudycell_post_ performs POST  for AdStudyCell
func Adstudycell_post_(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
