// Code generated by Facebook Business API codegen. DO NOT EDIT.

package commercemerchantsettings

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/shared"
)

// ToolCommercemerchantsettings_post_order_management_apps returns the MCP tool definition for commercemerchantsettings_post_order_management_apps
func ToolCommercemerchantsettings_post_order_management_apps() mcp.Tool {
	
	
	return mcp.NewTool("commercemerchantsettings_post_order_management_apps",
		mcp.WithDescription("POST order_management_apps for CommerceMerchantSettings"),
	)
}

// HandleCommercemerchantsettings_post_order_management_apps handles the commercemerchantsettings_post_order_management_apps tool with context-based auth
func HandleCommercemerchantsettings_post_order_management_apps(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})



	// Call the API method
	result, err := Commercemerchantsettings_post_order_management_apps(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute commercemerchantsettings_post_order_management_apps: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Commercemerchantsettings_post_order_management_apps performs POST order_management_apps for CommerceMerchantSettings
func Commercemerchantsettings_post_order_management_apps(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/order_management_apps")
	
	urlParams := url.Values{}
	urlParams.Set("access_token", accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}