// Code generated by Facebook Business API codegen. DO NOT EDIT.

package productfeed

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolProductfeed_post_ returns the MCP tool definition for productfeed_post_
func ToolProductfeed_post_() mcp.Tool {

	// Params object accepts: default_currency (string), deletion_enabled (bool), delimiter (productfeed_delimiter), encoding (productfeed_encoding), migrated_from_feed_id (string), name (string), quoted_fields_mode (productfeed_quoted_fields_mode), schedule (string), update_schedule (string)
	return mcp.NewTool("productfeed_post_",
		mcp.WithDescription("POST  for ProductFeed"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"default_currency": map[string]any{
					"type":        "string",
					"description": "default_currency parameter",
				},
				"deletion_enabled": map[string]any{
					"type":        "boolean",
					"description": "deletion_enabled parameter",
				},
				"delimiter": map[string]any{
					"type":        "string",
					"description": "delimiter parameter",
					"enum":        []string{"AUTODETECT", "BAR", "COMMA", "SEMICOLON", "TAB", "TILDE"},
				},
				"encoding": map[string]any{
					"type":        "string",
					"description": "encoding parameter",
					"enum":        []string{"AUTODETECT", "LATIN1", "UTF16BE", "UTF16LE", "UTF32BE", "UTF32LE", "UTF8"},
				},
				"migrated_from_feed_id": map[string]any{
					"type":        "string",
					"description": "migrated_from_feed_id parameter",
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
				},
				"quoted_fields_mode": map[string]any{
					"type":        "string",
					"description": "quoted_fields_mode parameter",
					"enum":        []string{"autodetect", "off", "on"},
				},
				"schedule": map[string]any{
					"type":        "string",
					"description": "schedule parameter",
				},
				"update_schedule": map[string]any{
					"type":        "string",
					"description": "update_schedule parameter",
				},
			}),
			mcp.Description("Parameters object containing: default_currency (string), deletion_enabled (boolean), delimiter (productfeed_delimiter) [AUTODETECT, BAR, COMMA, SEMICOLON, TAB, ...], encoding (productfeed_encoding) [AUTODETECT, LATIN1, UTF16BE, UTF16LE, UTF32BE, ...], migrated_from_feed_id (string), name (string), quoted_fields_mode (productfeed_quoted_fields_mode) [autodetect, off, on], schedule (string), update_schedule (string)"),
		),
	)
}

// HandleProductfeed_post_ handles the productfeed_post_ tool with context-based auth
func HandleProductfeed_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Productfeed_post_(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute productfeed_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Productfeed_post_ performs POST  for ProductFeed
func Productfeed_post_(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
