// Code generated by Facebook Business API codegen. DO NOT EDIT.

package appeventconfig

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolAppeventconfig_get returns the MCP tool definition for appeventconfig_get
func ToolAppeventconfig_get() mcp.Tool {
	// Available fields for AppEventConfig: breakdowns_config, builtin_fields_config, deprecated_events_config, events_config, id, ios_purchase_validation_secret, is_any_role_able_to_see_restricted_insights, is_implicit_purchase_logging_on_android_supported, is_implicit_purchase_logging_on_ios_supported, is_track_android_app_uninstall_supported, is_track_ios_app_uninstall_supported, journey_backfill_status, journey_conversion_events, journey_enabled, journey_timeout, latest_sdk_versions, log_android_implicit_purchase_events, log_automatic_analytics_events, log_implicit_purchase_events, prev_journey_conversion_events, query_approximation_accuracy_level, query_currency, query_timezone, recent_events_update_time, session_timeout_interval, track_android_app_uninstall, track_ios_app_uninstall
	// Params object accepts: event_name (string)
	return mcp.NewTool("appeventconfig_get",
		mcp.WithDescription("GET  for AppEventConfig"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"event_name": map[string]any{
					"type":        "string",
					"description": "event_name parameter",
				},
			}),
			mcp.Description("Parameters object containing: event_name (string)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for AppEventConfig objects. Available fields: breakdowns_config, builtin_fields_config, deprecated_events_config, events_config, id, ios_purchase_validation_secret, is_any_role_able_to_see_restricted_insights, is_implicit_purchase_logging_on_android_supported, is_implicit_purchase_logging_on_ios_supported, is_track_android_app_uninstall_supported, is_track_ios_app_uninstall_supported, journey_backfill_status, journey_conversion_events, journey_enabled, journey_timeout (and 12 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleAppeventconfig_get handles the appeventconfig_get tool with context-based auth
func HandleAppeventconfig_get(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Optional: fields
	utils.ParseFieldsArray(request, args)

	// Optional: limit
	utils.ParseOptionalInt(request, "limit", args)

	// Optional: after
	utils.ParseOptionalString(request, "after", args)

	// Optional: before
	utils.ParseOptionalString(request, "before", args)

	// Call the API method
	result, err := Appeventconfig_get(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute appeventconfig_get: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Appeventconfig_get performs GET  for AppEventConfig
func Appeventconfig_get(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("GET", baseURL, urlParams)
}
