// Code generated by Facebook Business API codegen. DO NOT EDIT.

package businessuser

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolBusinessuser_post returns the MCP tool definition for businessuser_post
func ToolBusinessuser_post() mcp.Tool {

	// Params object accepts: clear_pending_email (bool), email (string), first_name (string), last_name (string), pending_email (string), role (businessuser_role), skip_verification_email (bool), tasks (list<businessuser_tasks>), title (string)
	return mcp.NewTool("businessuser_post",
		mcp.WithDescription("POST  for BusinessUser"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"clear_pending_email": map[string]any{
					"type":        "boolean",
					"description": "clear_pending_email parameter",
				},
				"email": map[string]any{
					"type":        "string",
					"description": "email parameter",
				},
				"first_name": map[string]any{
					"type":        "string",
					"description": "first_name parameter",
				},
				"last_name": map[string]any{
					"type":        "string",
					"description": "last_name parameter",
				},
				"pending_email": map[string]any{
					"type":        "string",
					"description": "pending_email parameter",
				},
				"role": map[string]any{
					"type":        "string",
					"description": "role parameter",
					"enum":        []string{"ADMIN", "ADS_RIGHTS_REVIEWER", "DEFAULT", "DEVELOPER", "EMPLOYEE", "FINANCE_ANALYST", "FINANCE_EDIT", "FINANCE_EDITOR", "FINANCE_VIEW", "MANAGE", "PARTNER_CENTER_ADMIN", "PARTNER_CENTER_ANALYST", "PARTNER_CENTER_EDUCATION", "PARTNER_CENTER_MARKETING", "PARTNER_CENTER_OPERATIONS"},
				},
				"skip_verification_email": map[string]any{
					"type":        "boolean",
					"description": "skip_verification_email parameter",
				},
				"tasks": map[string]any{
					"type":        "array",
					"description": "tasks parameter",
					"enum":        []string{"ADMIN", "ADS_RIGHTS_REVIEWER", "DEFAULT", "DEVELOPER", "EMPLOYEE", "FINANCE_ANALYST", "FINANCE_EDIT", "FINANCE_EDITOR", "FINANCE_VIEW", "MANAGE", "PARTNER_CENTER_ADMIN", "PARTNER_CENTER_ANALYST", "PARTNER_CENTER_EDUCATION", "PARTNER_CENTER_MARKETING", "PARTNER_CENTER_OPERATIONS"},
					"items":       map[string]any{"type": "string"},
				},
				"title": map[string]any{
					"type":        "string",
					"description": "title parameter",
				},
			}),
			mcp.Description("Parameters object containing: clear_pending_email (boolean), email (string), first_name (string), last_name (string), pending_email (string), role (businessuser_role) [ADMIN, ADS_RIGHTS_REVIEWER, DEFAULT, DEVELOPER, EMPLOYEE, ...], skip_verification_email (boolean), tasks (array<businessuser_tasks>) [ADMIN, ADS_RIGHTS_REVIEWER, DEFAULT, DEVELOPER, EMPLOYEE, ...], title (string)"),
		),
	)
}

// HandleBusinessuser_post handles the businessuser_post tool with context-based auth
func HandleBusinessuser_post(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Businessuser_post(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute businessuser_post: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Businessuser_post performs POST  for BusinessUser
func Businessuser_post(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
