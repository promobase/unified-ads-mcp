// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_list_adcreativesArgs defines the typed arguments for ad_list_adcreatives
type ad_list_adcreativesArgs struct {
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// RegisterAdListAdcreativesHandler registers the ad_list_adcreatives tool
func RegisterAdListAdcreativesHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_list_adcreatives",
		"List adcreatives for this Ad Returns AdCreative.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"}},"required":[],"type":"object"}`),
	)

	s.AddTool(tool, AdListAdcreativesHandler)
	return nil
}

// AdListAdcreativesHandler handles the ad_list_adcreatives tool
func AdListAdcreativesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_list_adcreativesArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := "/adcreatives"
	// Prepare query parameters
	params := make(map[string]string)
	if len(args.Fields) > 0 {
		params["fields"] = strings.Join(args.Fields, ",")
	}
	if args.Limit > 0 {
		params["limit"] = fmt.Sprintf("%d", args.Limit)
	}
	if args.After != "" {
		params["after"] = args.After
	}
	if args.Before != "" {
		params["before"] = args.Before
	}

	result, err := common.MakeGraphAPIRequest(ctx, "GET", endpoint, params, nil)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
