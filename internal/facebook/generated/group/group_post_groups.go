// Code generated by Facebook Business API codegen. DO NOT EDIT.

package group

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolGroup_post_groups returns the MCP tool definition for group_post_groups
func ToolGroup_post_groups() mcp.Tool {

	// Params object accepts: admin (int), description (string), group_icon_id (string), group_type (groupgroups_group_type_enum_param), join_setting (groupgroups_join_setting_enum_param), name (string), parent_id (string), post_permissions (groupgroups_post_permissions_enum_param), post_requires_admin_approval (bool), privacy (string), ref (string)
	return mcp.NewTool("group_post_groups",
		mcp.WithDescription("POST groups for Group"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"admin": map[string]any{
					"type":        "integer",
					"description": "admin parameter",
				},
				"description": map[string]any{
					"type":        "string",
					"description": "description parameter",
				},
				"group_icon_id": map[string]any{
					"type":        "string",
					"description": "group_icon_id parameter",
				},
				"group_type": map[string]any{
					"type":        "string",
					"description": "group_type parameter",
					"enum":        []string{"CASUAL", "COWORKERS", "CUSTOM", "FOR_SALE", "FOR_WORK", "GAME", "HEALTH_SUPPORT", "JOBS", "LEARNING", "NONE", "PARENTING", "STREAMER", "WORK_ANNOUNCEMENT", "WORK_DEMO_GROUP", "WORK_DISCUSSION", "WORK_EPHEMERAL", "WORK_FEEDBACK", "WORK_FOR_SALE", "WORK_GARDEN", "WORK_INTEGRITY", "WORK_LEARNING", "WORK_MENTORSHIP", "WORK_MULTI_COMPANY", "WORK_RECRUITING", "WORK_SOCIAL", "WORK_STAGES", "WORK_TEAM", "WORK_TEAMWORK"},
				},
				"join_setting": map[string]any{
					"type":        "string",
					"description": "join_setting parameter",
					"enum":        []string{"ADMIN_ONLY", "ANYONE", "NONE"},
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
					"required":    true,
				},
				"parent_id": map[string]any{
					"type":        "string",
					"description": "parent_id parameter",
				},
				"post_permissions": map[string]any{
					"type":        "string",
					"description": "post_permissions parameter",
					"enum":        []string{"ADMIN_ONLY", "ANYONE", "NONE"},
				},
				"post_requires_admin_approval": map[string]any{
					"type":        "boolean",
					"description": "post_requires_admin_approval parameter",
				},
				"privacy": map[string]any{
					"type":        "string",
					"description": "privacy parameter",
				},
				"ref": map[string]any{
					"type":        "string",
					"description": "ref parameter",
				},
			}),
			mcp.Description("Parameters object containing: admin (integer), description (string), group_icon_id (string), group_type (enum) [CASUAL, COWORKERS, CUSTOM, FOR_SALE, FOR_WORK, ...], join_setting (enum) [ADMIN_ONLY, ANYONE, NONE], name (string) [required], parent_id (string), post_permissions (enum) [ADMIN_ONLY, ANYONE, NONE], post_requires_admin_approval (boolean), privacy (string), ref (string)"),
		),
	)
}

// HandleGroup_post_groups handles the group_post_groups tool with context-based auth
func HandleGroup_post_groups(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	// Parse required params object and expand into args
	val, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(val), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the API method
	result, err := Group_post_groups(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute group_post_groups: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Group_post_groups performs POST groups for Group
func Group_post_groups(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "groups"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
