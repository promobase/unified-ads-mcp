// Code generated by Facebook Business API codegen. DO NOT EDIT.

package group

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolGroup_post_ returns the MCP tool definition for group_post_
func ToolGroup_post_() mcp.Tool {

	// Params object accepts: cover (string), cover_url (string), description (string), focus_x (float), focus_y (float), group_icon (string), is_official_group (bool), join_setting (group_join_setting), name (string), no_feed_story (bool), offset_y (int), post_permissions (group_post_permissions), post_requires_admin_approval (bool), privacy (string), purpose (group_purpose), update_view_time (bool)
	return mcp.NewTool("group_post_",
		mcp.WithDescription("POST  for Group"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"cover": map[string]any{
					"type":        "string",
					"description": "cover parameter",
				},
				"cover_url": map[string]any{
					"type":        "string",
					"description": "cover_url parameter",
				},
				"description": map[string]any{
					"type":        "string",
					"description": "description parameter",
				},
				"focus_x": map[string]any{
					"type":        "number",
					"description": "focus_x parameter",
				},
				"focus_y": map[string]any{
					"type":        "number",
					"description": "focus_y parameter",
				},
				"group_icon": map[string]any{
					"type":        "string",
					"description": "group_icon parameter",
				},
				"is_official_group": map[string]any{
					"type":        "boolean",
					"description": "is_official_group parameter",
				},
				"join_setting": map[string]any{
					"type":        "string",
					"description": "join_setting parameter",
					"enum":        []string{"ADMIN_ONLY", "ANYONE", "NONE"},
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
				},
				"no_feed_story": map[string]any{
					"type":        "boolean",
					"description": "no_feed_story parameter",
				},
				"offset_y": map[string]any{
					"type":        "integer",
					"description": "offset_y parameter",
				},
				"post_permissions": map[string]any{
					"type":        "string",
					"description": "post_permissions parameter",
					"enum":        []string{"ADMIN_ONLY", "ANYONE", "NONE"},
				},
				"post_requires_admin_approval": map[string]any{
					"type":        "boolean",
					"description": "post_requires_admin_approval parameter",
				},
				"privacy": map[string]any{
					"type":        "string",
					"description": "privacy parameter",
				},
				"purpose": map[string]any{
					"type":        "string",
					"description": "purpose parameter",
					"enum":        []string{"CASUAL", "COWORKERS", "CUSTOM", "FOR_SALE", "FOR_WORK", "GAME", "HEALTH_SUPPORT", "JOBS", "LEARNING", "NONE", "PARENTING", "STREAMER", "WORK_ANNOUNCEMENT", "WORK_DEMO_GROUP", "WORK_DISCUSSION", "WORK_EPHEMERAL", "WORK_FEEDBACK", "WORK_FOR_SALE", "WORK_GARDEN", "WORK_INTEGRITY", "WORK_LEARNING", "WORK_MENTORSHIP", "WORK_MULTI_COMPANY", "WORK_RECRUITING", "WORK_SOCIAL", "WORK_STAGES", "WORK_TEAM", "WORK_TEAMWORK"},
				},
				"update_view_time": map[string]any{
					"type":        "boolean",
					"description": "update_view_time parameter",
				},
			}),
			mcp.Description("Parameters object containing: cover (string), cover_url (string), description (string), focus_x (number), focus_y (number), group_icon (string), is_official_group (boolean), join_setting (group_join_setting) [ADMIN_ONLY, ANYONE, NONE], name (string), no_feed_story (boolean), offset_y (integer), post_permissions (group_post_permissions) [ADMIN_ONLY, ANYONE, NONE], post_requires_admin_approval (boolean), privacy (string), purpose (group_purpose) [CASUAL, COWORKERS, CUSTOM, FOR_SALE, FOR_WORK, ...], update_view_time (boolean)"),
		),
	)
}

// HandleGroup_post_ handles the group_post_ tool with context-based auth
func HandleGroup_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Group_post_(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute group_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Group_post_ performs POST  for Group
func Group_post_(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
