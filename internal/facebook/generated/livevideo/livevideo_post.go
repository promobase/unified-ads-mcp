// Code generated by Facebook Business API codegen. DO NOT EDIT.

package livevideo

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolLivevideo_post returns the MCP tool definition for livevideo_post
func ToolLivevideo_post() mcp.Tool {

	// Params object accepts: allow_bm_crossposting (bool), content_tags (list<string>), cross_share_to_group_ids (list<string>), crossposting_actions (list<map>), custom_labels (list<string>), description (string), direct_share_status (unsigned int), embeddable (bool), end_live_video (bool), event_params (Object), is_audio_only (bool), is_manual_mode (bool), live_comment_moderation_setting (list<livevideo_live_comment_moderation_setting>), master_ingest_stream_id (string), og_icon_id (string), og_phrase (string), persistent_stream_key_status (livevideo_persistent_stream_key_status), place (Object), planned_start_time (datetime), privacy (string), published (bool), schedule_custom_profile_image (file), schedule_feed_background_image (file), sponsor_id (string), sponsor_relationship (unsigned int), status (livevideo_status), stream_type (livevideo_stream_type), tags (list<int>), targeting (Object), title (string)
	return mcp.NewTool("livevideo_post",
		mcp.WithDescription("POST  for LiveVideo"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"allow_bm_crossposting": map[string]any{
					"type":        "boolean",
					"description": "allow_bm_crossposting parameter",
				},
				"content_tags": map[string]any{
					"type":        "array",
					"description": "content_tags parameter",
					"items":       map[string]any{"type": "string"},
				},
				"cross_share_to_group_ids": map[string]any{
					"type":        "array",
					"description": "cross_share_to_group_ids parameter",
					"items":       map[string]any{"type": "string"},
				},
				"crossposting_actions": map[string]any{
					"type":        "array",
					"description": "crossposting_actions parameter",
					"items":       map[string]any{"type": "object"},
				},
				"custom_labels": map[string]any{
					"type":        "array",
					"description": "custom_labels parameter",
					"items":       map[string]any{"type": "string"},
				},
				"description": map[string]any{
					"type":        "string",
					"description": "description parameter",
				},
				"direct_share_status": map[string]any{
					"type":        "integer",
					"description": "direct_share_status parameter",
				},
				"embeddable": map[string]any{
					"type":        "boolean",
					"description": "embeddable parameter",
				},
				"end_live_video": map[string]any{
					"type":        "boolean",
					"description": "end_live_video parameter",
				},
				"event_params": map[string]any{
					"type":        "object",
					"description": "event_params parameter",
				},
				"is_audio_only": map[string]any{
					"type":        "boolean",
					"description": "is_audio_only parameter",
				},
				"is_manual_mode": map[string]any{
					"type":        "boolean",
					"description": "is_manual_mode parameter",
				},
				"live_comment_moderation_setting": map[string]any{
					"type":        "array",
					"description": "live_comment_moderation_setting parameter",
					"enum":        []string{"DEFAULT", "DISCUSSION", "FOLLOWED", "FOLLOWER", "NO_HYPERLINK", "PROTECTED_MODE", "RESTRICTED", "SLOW", "SUPPORTER", "TAGGED"},
					"items":       map[string]any{"type": "string"},
				},
				"master_ingest_stream_id": map[string]any{
					"type":        "string",
					"description": "master_ingest_stream_id parameter",
				},
				"og_icon_id": map[string]any{
					"type":        "string",
					"description": "og_icon_id parameter",
				},
				"og_phrase": map[string]any{
					"type":        "string",
					"description": "og_phrase parameter",
				},
				"persistent_stream_key_status": map[string]any{
					"type":        "string",
					"description": "persistent_stream_key_status parameter",
					"enum":        []string{"DISABLE", "ENABLE", "REGENERATE"},
				},
				"place": map[string]any{
					"type":        "object",
					"description": "place parameter",
				},
				"planned_start_time": map[string]any{
					"type":        "string",
					"description": "planned_start_time parameter",
				},
				"privacy": map[string]any{
					"type":        "string",
					"description": "privacy parameter",
				},
				"published": map[string]any{
					"type":        "boolean",
					"description": "published parameter",
				},
				"schedule_custom_profile_image": map[string]any{
					"type":        "string",
					"description": "schedule_custom_profile_image parameter",
				},
				"schedule_feed_background_image": map[string]any{
					"type":        "string",
					"description": "schedule_feed_background_image parameter",
				},
				"sponsor_id": map[string]any{
					"type":        "string",
					"description": "sponsor_id parameter",
				},
				"sponsor_relationship": map[string]any{
					"type":        "integer",
					"description": "sponsor_relationship parameter",
				},
				"status": map[string]any{
					"type":        "string",
					"description": "status parameter",
					"enum":        []string{"LIVE_NOW", "SCHEDULED_CANCELED", "SCHEDULED_LIVE", "SCHEDULED_UNPUBLISHED", "UNPUBLISHED"},
				},
				"stream_type": map[string]any{
					"type":        "string",
					"description": "stream_type parameter",
					"enum":        []string{"AMBIENT", "REGULAR"},
				},
				"tags": map[string]any{
					"type":        "array",
					"description": "tags parameter",
					"items":       map[string]any{"type": "integer"},
				},
				"targeting": map[string]any{
					"type":        "object",
					"description": "targeting parameter",
				},
				"title": map[string]any{
					"type":        "string",
					"description": "title parameter",
				},
			}),
			mcp.Description("Parameters object containing: allow_bm_crossposting (boolean), content_tags (array<string>), cross_share_to_group_ids (array<string>), crossposting_actions (array<object>), custom_labels (array<string>), description (string), direct_share_status (integer), embeddable (boolean), end_live_video (boolean), event_params (object), is_audio_only (boolean), is_manual_mode (boolean), live_comment_moderation_setting (array<livevideo_live_comment_moderation_setting>) [DEFAULT, DISCUSSION, FOLLOWED, FOLLOWER, NO_HYPERLINK, ...], master_ingest_stream_id (string), og_icon_id (string), og_phrase (string), persistent_stream_key_status (livevideo_persistent_stream_key_status) [DISABLE, ENABLE, REGENERATE], place (object), planned_start_time (datetime), privacy (string), published (boolean), schedule_custom_profile_image (file), schedule_feed_background_image (file), sponsor_id (string), sponsor_relationship (integer), status (livevideo_status) [LIVE_NOW, SCHEDULED_CANCELED, SCHEDULED_LIVE, SCHEDULED_UNPUBLISHED, UNPUBLISHED], stream_type (livevideo_stream_type) [AMBIENT, REGULAR], tags (array<integer>), targeting (object), title (string)"),
		),
	)
}

// HandleLivevideo_post handles the livevideo_post tool with context-based auth
func HandleLivevideo_post(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Livevideo_post(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute livevideo_post: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Livevideo_post performs POST  for LiveVideo
func Livevideo_post(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + ""

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
