// Code generated by Facebook Business API codegen. DO NOT EDIT.

package post

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/shared"
)

// ToolPost_post_ returns the MCP tool definition for post_post_
func ToolPost_post_() mcp.Tool {
	
	// Params object accepts: attached_media (list<Object>), backdated_time (datetime), backdated_time_granularity (post_backdated_time_granularity), composer_session_id (string), direct_share_status (unsigned int), explicitly_added_mentionee_ids (list<unsigned int>), feed_story_visibility (post_feed_story_visibility), is_explicit_location (bool), is_hidden (bool), is_pinned (bool), is_published (bool), message (string), og_action_type_id (string), og_hide_object_attachment (bool), og_icon_id (string), og_object_id (string), og_phrase (string), og_set_profile_badge (bool), og_suggestion_mechanism (string), place (Object), privacy (string), product_item (Object), scheduled_publish_time (unsigned int), should_sync_product_edit (bool), source_type (string), sponsor_id (string), sponsor_relationship (unsigned int), tags (list<int>), text_format_preset_id (string), timeline_visibility (post_timeline_visibility), tracking (string)
	return mcp.NewTool("post_post_",
		mcp.WithDescription("POST  for Post"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"attached_media": map[string]any{
					"type": "array",
					"description": "attached_media parameter",
					"items": map[string]any{"type": "object"},
				},
				"backdated_time": map[string]any{
					"type": "string",
					"description": "backdated_time parameter",
				},
				"backdated_time_granularity": map[string]any{
					"type": "string",
					"description": "backdated_time_granularity parameter",
					"enum": []string{ "day", "hour", "min", "month", "none", "year" },
				},
				"composer_session_id": map[string]any{
					"type": "string",
					"description": "composer_session_id parameter",
				},
				"direct_share_status": map[string]any{
					"type": "integer",
					"description": "direct_share_status parameter",
				},
				"explicitly_added_mentionee_ids": map[string]any{
					"type": "array",
					"description": "explicitly_added_mentionee_ids parameter",
					"items": map[string]any{"type": "integer"},
				},
				"feed_story_visibility": map[string]any{
					"type": "string",
					"description": "feed_story_visibility parameter",
					"enum": []string{ "hidden", "visible" },
				},
				"is_explicit_location": map[string]any{
					"type": "boolean",
					"description": "is_explicit_location parameter",
				},
				"is_hidden": map[string]any{
					"type": "boolean",
					"description": "is_hidden parameter",
				},
				"is_pinned": map[string]any{
					"type": "boolean",
					"description": "is_pinned parameter",
				},
				"is_published": map[string]any{
					"type": "boolean",
					"description": "is_published parameter",
				},
				"message": map[string]any{
					"type": "string",
					"description": "message parameter",
				},
				"og_action_type_id": map[string]any{
					"type": "string",
					"description": "og_action_type_id parameter",
				},
				"og_hide_object_attachment": map[string]any{
					"type": "boolean",
					"description": "og_hide_object_attachment parameter",
				},
				"og_icon_id": map[string]any{
					"type": "string",
					"description": "og_icon_id parameter",
				},
				"og_object_id": map[string]any{
					"type": "string",
					"description": "og_object_id parameter",
				},
				"og_phrase": map[string]any{
					"type": "string",
					"description": "og_phrase parameter",
				},
				"og_set_profile_badge": map[string]any{
					"type": "boolean",
					"description": "og_set_profile_badge parameter",
				},
				"og_suggestion_mechanism": map[string]any{
					"type": "string",
					"description": "og_suggestion_mechanism parameter",
				},
				"place": map[string]any{
					"type": "object",
					"description": "place parameter",
				},
				"privacy": map[string]any{
					"type": "string",
					"description": "privacy parameter",
				},
				"product_item": map[string]any{
					"type": "object",
					"description": "product_item parameter",
				},
				"scheduled_publish_time": map[string]any{
					"type": "integer",
					"description": "scheduled_publish_time parameter",
				},
				"should_sync_product_edit": map[string]any{
					"type": "boolean",
					"description": "should_sync_product_edit parameter",
				},
				"source_type": map[string]any{
					"type": "string",
					"description": "source_type parameter",
				},
				"sponsor_id": map[string]any{
					"type": "string",
					"description": "sponsor_id parameter",
				},
				"sponsor_relationship": map[string]any{
					"type": "integer",
					"description": "sponsor_relationship parameter",
				},
				"tags": map[string]any{
					"type": "array",
					"description": "tags parameter",
					"items": map[string]any{"type": "integer"},
				},
				"text_format_preset_id": map[string]any{
					"type": "string",
					"description": "text_format_preset_id parameter",
				},
				"timeline_visibility": map[string]any{
					"type": "string",
					"description": "timeline_visibility parameter",
					"enum": []string{ "forced_allow", "hidden", "normal" },
				},
				"tracking": map[string]any{
					"type": "string",
					"description": "tracking parameter",
				},
			}),
			mcp.Description("Parameters object containing: attached_media (array<object>), backdated_time (datetime), backdated_time_granularity (post_backdated_time_granularity) [day, hour, min, month, none, ...], composer_session_id (string), direct_share_status (integer), explicitly_added_mentionee_ids (array<integer>), feed_story_visibility (post_feed_story_visibility) [hidden, visible], is_explicit_location (boolean), is_hidden (boolean), is_pinned (boolean), is_published (boolean), message (string), og_action_type_id (string), og_hide_object_attachment (boolean), og_icon_id (string), og_object_id (string), og_phrase (string), og_set_profile_badge (boolean), og_suggestion_mechanism (string), place (object), privacy (string), product_item (object), scheduled_publish_time (integer), should_sync_product_edit (boolean), source_type (string), sponsor_id (string), sponsor_relationship (integer), tags (array<integer>), text_format_preset_id (string), timeline_visibility (post_timeline_visibility) [forced_allow, hidden, normal], tracking (string)"),
		),
	)
}

// HandlePost_post_ handles the post_post_ tool with context-based auth
func HandlePost_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the API method
	result, err := Post_post_(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute post_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Post_post_ performs POST  for Post
func Post_post_(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")
	
	urlParams := url.Values{}
	urlParams.Set("access_token", accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("params", fmt.Sprintf("%v", val))
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}