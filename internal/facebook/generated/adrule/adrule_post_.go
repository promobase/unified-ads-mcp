// Code generated by Facebook Business API codegen. DO NOT EDIT.

package adrule

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolAdrule_post_ returns the MCP tool definition for adrule_post_
func ToolAdrule_post_() mcp.Tool {

	// Params object accepts: evaluation_spec (Object), execution_spec (Object), name (string), schedule_spec (Object), status (adrule_status)
	return mcp.NewTool("adrule_post_",
		mcp.WithDescription("POST  for AdRule"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"evaluation_spec": map[string]any{
					"type":        "object",
					"description": "evaluation_spec parameter",
				},
				"execution_spec": map[string]any{
					"type":        "object",
					"description": "execution_spec parameter",
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
				},
				"schedule_spec": map[string]any{
					"type":        "object",
					"description": "schedule_spec parameter",
				},
				"status": map[string]any{
					"type":        "string",
					"description": "status parameter",
					"enum":        []string{"DELETED", "DISABLED", "ENABLED", "HAS_ISSUES"},
				},
			}),
			mcp.Description("Parameters object containing: evaluation_spec (object), execution_spec (object), name (string), schedule_spec (object), status (adrule_status) [DELETED, DISABLED, ENABLED, HAS_ISSUES]"),
		),
	)
}

// HandleAdrule_post_ handles the adrule_post_ tool with context-based auth
func HandleAdrule_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Adrule_post_(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adrule_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Adrule_post_ performs POST  for AdRule
func Adrule_post_(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + ""

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
