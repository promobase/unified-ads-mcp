// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// user_create_videoArgs defines the typed arguments for user_create_video
type user_create_videoArgs struct {
	ID                            string                 `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	ApplicationId                 string                 `json:"application_id,omitempty" jsonschema:"description=ID of the Application,pattern=^[0-9]+$"`
	AskedFunFactPromptId          int                    `json:"asked_fun_fact_prompt_id,omitempty" jsonschema:"description=ID of the Asked Fun Fact Prompt,pattern=^[0-9]+$"`
	AudioStoryWaveAnimationHandle string                 `json:"audio_story_wave_animation_handle,omitempty" jsonschema:"description=Audio Story Wave Animation Handle"`
	ComposerEntryPicker           string                 `json:"composer_entry_picker,omitempty" jsonschema:"description=Composer Entry Picker"`
	ComposerEntryPoint            string                 `json:"composer_entry_point,omitempty" jsonschema:"description=Composer Entry Point"`
	ComposerEntryTime             int                    `json:"composer_entry_time,omitempty" jsonschema:"description=Composer Entry Time"`
	ComposerSessionEventsLog      string                 `json:"composer_session_events_log,omitempty" jsonschema:"description=Composer Session Events Log"`
	ComposerSessionId             string                 `json:"composer_session_id,omitempty" jsonschema:"description=ID of the Composer Session,pattern=^[0-9]+$"`
	ComposerSourceSurface         string                 `json:"composer_source_surface,omitempty" jsonschema:"description=Composer Source Surface"`
	ComposerType                  string                 `json:"composer_type,omitempty" jsonschema:"description=Composer Type"`
	ContainerType                 string                 `json:"container_type,omitempty" jsonschema:"description=Container Type"`
	ContentCategory               string                 `json:"content_category,omitempty" jsonschema:"description=Content Category"`
	CreativeTools                 string                 `json:"creative_tools,omitempty" jsonschema:"description=Creative Tools"`
	Description                   string                 `json:"description,omitempty" jsonschema:"description=Description"`
	DirectShareStatus             int                    `json:"direct_share_status,omitempty" jsonschema:"description=Direct Share Status"`
	Embeddable                    bool                   `json:"embeddable,omitempty" jsonschema:"description=Embeddable"`
	EndOffset                     int                    `json:"end_offset,omitempty" jsonschema:"description=End Offset"`
	FbuploaderVideoFileChunk      string                 `json:"fbuploader_video_file_chunk,omitempty" jsonschema:"description=Fbuploader Video File Chunk"`
	FileSize                      int                    `json:"file_size,omitempty" jsonschema:"description=File Size"`
	FileUrl                       string                 `json:"file_url,omitempty" jsonschema:"description=File URL,format=uri"`
	FisheyeVideoCropped           bool                   `json:"fisheye_video_cropped,omitempty" jsonschema:"description=Fisheye Video Cropped"`
	Formatting                    string                 `json:"formatting,omitempty" jsonschema:"description=Formatting"`
	Fov                           int                    `json:"fov,omitempty" jsonschema:"description=Fov"`
	FrontZRotation                float64                `json:"front_z_rotation,omitempty" jsonschema:"description=Front Z Rotation"`
	FunFactPromptId               string                 `json:"fun_fact_prompt_id,omitempty" jsonschema:"description=ID of the Fun Fact Prompt,pattern=^[0-9]+$"`
	FunFactToasteeId              int                    `json:"fun_fact_toastee_id,omitempty" jsonschema:"description=ID of the Fun Fact Toastee,pattern=^[0-9]+$"`
	Guide                         []interface{}          `json:"guide,omitempty" jsonschema:"description=Guide"`
	GuideEnabled                  bool                   `json:"guide_enabled,omitempty" jsonschema:"description=Guide Enabled"`
	InitialHeading                int                    `json:"initial_heading,omitempty" jsonschema:"description=Initial Heading"`
	InitialPitch                  int                    `json:"initial_pitch,omitempty" jsonschema:"description=Initial Pitch"`
	InstantGameEntryPointData     string                 `json:"instant_game_entry_point_data,omitempty" jsonschema:"description=Instant Game Entry Point Data"`
	IsBoostIntended               bool                   `json:"is_boost_intended,omitempty" jsonschema:"description=Is Boost Intended"`
	IsExplicitShare               bool                   `json:"is_explicit_share,omitempty" jsonschema:"description=Is Explicit Share"`
	IsGroupLinkingPost            bool                   `json:"is_group_linking_post,omitempty" jsonschema:"description=Is Group Linking Post"`
	IsPartnershipAd               bool                   `json:"is_partnership_ad,omitempty" jsonschema:"description=Is Partnership Ad"`
	IsVoiceClip                   bool                   `json:"is_voice_clip,omitempty" jsonschema:"description=Is Voice Clip"`
	LocationSourceId              string                 `json:"location_source_id,omitempty" jsonschema:"description=ID of the Location Source,pattern=^[0-9]+$"`
	ManualPrivacy                 bool                   `json:"manual_privacy,omitempty" jsonschema:"description=Manual Privacy"`
	NoStory                       bool                   `json:"no_story,omitempty" jsonschema:"description=No Story"`
	OgActionTypeId                string                 `json:"og_action_type_id,omitempty" jsonschema:"description=ID of the Og Action Type,pattern=^[0-9]+$"`
	OgIconId                      string                 `json:"og_icon_id,omitempty" jsonschema:"description=ID of the Og Icon,pattern=^[0-9]+$"`
	OgObjectId                    string                 `json:"og_object_id,omitempty" jsonschema:"description=ID of the Og Object,pattern=^[0-9]+$"`
	OgPhrase                      string                 `json:"og_phrase,omitempty" jsonschema:"description=Og Phrase"`
	OgSuggestionMechanism         string                 `json:"og_suggestion_mechanism,omitempty" jsonschema:"description=Og Suggestion Mechanism"`
	OriginalFov                   int                    `json:"original_fov,omitempty" jsonschema:"description=Original Fov"`
	OriginalProjectionType        string                 `json:"original_projection_type,omitempty" jsonschema:"description=Original Projection Type"`
	PartnershipAdAdCode           string                 `json:"partnership_ad_ad_code,omitempty" jsonschema:"description=Partnership Ad Ad Code"`
	Privacy                       string                 `json:"privacy,omitempty" jsonschema:"description=Privacy"`
	PublishEventId                int                    `json:"publish_event_id,omitempty" jsonschema:"description=ID of the Publish Event,pattern=^[0-9]+$"`
	ReferencedStickerId           string                 `json:"referenced_sticker_id,omitempty" jsonschema:"description=ID of the Referenced Sticker,pattern=^[0-9]+$"`
	ReplaceVideoId                string                 `json:"replace_video_id,omitempty" jsonschema:"description=ID of the Replace Video,pattern=^[0-9]+$"`
	SlideshowSpec                 map[string]interface{} `json:"slideshow_spec,omitempty" jsonschema:"description=Slideshow Spec"`
	Source                        string                 `json:"source,omitempty" jsonschema:"description=Source"`
	SourceInstagramMediaId        string                 `json:"source_instagram_media_id,omitempty" jsonschema:"description=ID of the Source Instagram Media,pattern=^[0-9]+$"`
	Spherical                     bool                   `json:"spherical,omitempty" jsonschema:"description=Spherical"`
	SponsorId                     string                 `json:"sponsor_id,omitempty" jsonschema:"description=ID of the Sponsor,pattern=^[0-9]+$"`
	StartOffset                   int                    `json:"start_offset,omitempty" jsonschema:"description=Start Offset"`
	SwapMode                      string                 `json:"swap_mode,omitempty" jsonschema:"description=Swap Mode"`
	TextFormatMetadata            string                 `json:"text_format_metadata,omitempty" jsonschema:"description=Text Format Metadata"`
	Thumb                         interface{}            `json:"thumb,omitempty" jsonschema:"description=Thumb"`
	TimeSinceOriginalPost         int                    `json:"time_since_original_post,omitempty" jsonschema:"description=Time Since Original Post"`
	Title                         string                 `json:"title,omitempty" jsonschema:"description=Title"`
	TranscodeSettingProperties    string                 `json:"transcode_setting_properties,omitempty" jsonschema:"description=Transcode Setting Properties"`
	UnpublishedContentType        string                 `json:"unpublished_content_type,omitempty" jsonschema:"description=Unpublished Content Type"`
	UploadPhase                   string                 `json:"upload_phase,omitempty" jsonschema:"description=Upload Phase"`
	UploadSessionId               string                 `json:"upload_session_id,omitempty" jsonschema:"description=ID of the Upload Session,pattern=^[0-9]+$"`
	UploadSettingProperties       string                 `json:"upload_setting_properties,omitempty" jsonschema:"description=Upload Setting Properties"`
	VideoFileChunk                string                 `json:"video_file_chunk,omitempty" jsonschema:"description=Video File Chunk"`
	VideoIdOriginal               string                 `json:"video_id_original,omitempty" jsonschema:"description=Video ID Original,pattern=^[0-9]+$"`
	VideoStartTimeMs              int                    `json:"video_start_time_ms,omitempty" jsonschema:"description=Video Start Time Ms"`
	WaterfallId                   string                 `json:"waterfall_id,omitempty" jsonschema:"description=ID of the Waterfall,pattern=^[0-9]+$"`
}

// RegisterUserCreateVideoHandler registers the user_create_video tool
func RegisterUserCreateVideoHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"user_create_video",
		"Create or update videos for this User Returns AdVideo.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"application_id":{"description":"ID of the Application","pattern":"^[0-9]+$","type":"string"},"asked_fun_fact_prompt_id":{"description":"ID of the Asked Fun Fact Prompt","pattern":"^[0-9]+$","type":"integer"},"audio_story_wave_animation_handle":{"description":"Audio Story Wave Animation Handle","type":"string"},"composer_entry_picker":{"description":"Composer Entry Picker","type":"string"},"composer_entry_point":{"description":"Composer Entry Point","type":"string"},"composer_entry_time":{"description":"Composer Entry Time","type":"integer"},"composer_session_events_log":{"description":"Composer Session Events Log","type":"string"},"composer_session_id":{"description":"ID of the Composer Session","pattern":"^[0-9]+$","type":"string"},"composer_source_surface":{"description":"Composer Source Surface","type":"string"},"composer_type":{"description":"Composer Type","type":"string"},"container_type":{"description":"Container Type (enum: uservideos_container_type_enum_param)","enum":["ACO_VIDEO_VARIATION","ADS_AI_GENERATED","AD_BREAK_PREVIEW","AD_DERIVATIVE","AD_LIBRARY_WATERMARK","ALBUM_MULTIMEDIA_POST","ALOHA_SUPERFRAME","APP_REREVIEW_SCREENCAST","APP_REVIEW_SCREENCAST","ASSET_MANAGER","ATLAS_VIDEO","AUDIO_BROADCAST","AUDIO_COMMENT","BROADCAST","CANVAS","CMS_MEDIA_MANAGER","CONTAINED_POST_ATTACHMENT","CONTAINED_POST_AUDIO_BROADCAST","CONTAINED_POST_COPYRIGHT_REFERENCE_BROADCAST","COPYRIGHT_REFERENCE_BROADCAST","COPYRIGHT_REFERENCE_IG_XPOST_VIDEO","COPYRIGHT_REFERENCE_VIDEO","CREATION_ML_PRECREATION","CREATOR_FAN_CHALLENGE","CREATOR_STOREFRONT_PERSONALIZED_VIDEO","DATAGENIX_VIDEO","DCO_AD_ASSET_FEED","DCO_AUTOGEN_VIDEO","DCO_TRIMMED_VIDEO","DIM_SUM","DIRECTED_POST_ATTACHMENT","DIRECT_INBOX","DROPS_SHOPPING_EVENT_PAGE","DYNAMIC_ITEM_VIDEO","DYNAMIC_TEMPLATE_VIDEO","EVENT_COVER_VIDEO","EVENT_TOUR","FACECAST_DVR","FB_AVATAR_ANIMATED_SATP","FB_COLLECTIBLE_VIDEO","FB_SHORTS","FB_SHORTS_CONTENT_REMIXABLE","FB_SHORTS_GROUP_POST","FB_SHORTS_LINKED_PRODUCT","FB_SHORTS_PMV_POST","FB_SHORTS_POST","FB_SHORTS_REMIX_POST","FUNDRAISER_COVER_VIDEO","GAME_CLIP","GIF_TO_VIDEO","GOODWILL_ANNIVERSARY_DEPRECATED","GOODWILL_ANNIVERSARY_PROMOTION_DEPRECATED","GOODWILL_VIDEO_CONTAINED_SHARE","GOODWILL_VIDEO_PROMOTION","GOODWILL_VIDEO_SHARE","GOODWILL_VIDEO_TOKEN_REQUIRED","GROUP_POST","HEURISTIC_CLUSTER_VIDEO","HIGHLIGHT_CLIP_VIDEO","HORIZON_WORLDS_TV","HUDDLE_BROADCAST","IG_REELS_XPV","IG_STORIES_READER","INJECTABLE","INSPIRATION_VIDEO","INSTAGRAM_VIDEO_COPY","INSTANT_APPLICATION_PREVIEW","INSTANT_ARTICLE","ISSUE_MODULE","LEARN","LEGACY","LEGACY_CONTAINED_POST_BROADCAST","LIVE_AUDIO_ROOM_BROADCAST","LIVE_CLIP_PREVIEW","LIVE_CLIP_WORKCHAT","LIVE_CREATIVE_KIT_VIDEO","LIVE_PHOTO","LOOK_NOW_DEPRECATED","MARKETPLACE_LISTING_VIDEO","MARKETPLACE_PRE_RECORDED_VIDEO","MOMENTS_VIDEO","MUSIC_CLIP","MUSIC_CLIP_IN_COMMENT","MUSIC_CLIP_IN_LIGHTWEIGHT_STATUS","MUSIC_CLIP_IN_MSGR_NOTE","MUSIC_CLIP_IN_POLL_OPTION","MUSIC_CLIP_ON_DATING_PROFILE","NEO_ASYNC_GAME_VIDEO","NEW_CONTAINED_POST_BROADCAST","NO_STORY","OCULUS_CREATOR_PORTAL","OCULUS_VENUES_BROADCAST","ORIGINALITY_SELF_ADVOCACY","PAGES_COVER_VIDEO","PAGE_REVIEW_SCREENCAST","PAGE_SLIDESHOW_VIDEO","PAID_CONTENT_PREVIEW","PAID_CONTENT_VIDEO","PAID_CONTENT_VIDEO__POST","PIXELCLOUD","PODCAST_HIGHLIGHT","PODCAST_ML_PREVIEW","PODCAST_ML_PREVIEW_NO_NEWSFEED_STORY","PODCAST_RSS","PODCAST_RSS_EPHEMERAL","PODCAST_RSS_NO_NEWSFEED_STORY","PODCAST_VOICES","PODCAST_VOICES_NO_NEWSFEED_STORY","PREMIERE_SOURCE","PREMIUM_MUSIC_VIDEO_CLIP","PREMIUM_MUSIC_VIDEO_CROPPED_CLIP","PREMIUM_MUSIC_VIDEO_NO_NEWSFEED_STORY","PREMIUM_MUSIC_VIDEO_WITH_NEWSFEED_STORY","PRIVATE_GALLERY_VIDEO","PRODUCT_VIDEO","PROFILE_COVER_VIDEO","PROFILE_INTRO_CARD","PROFILE_VIDEO","PROTON","QUICK_CLIP_WORKPLACE_POST","QUICK_PROMOTION","REPLACE_VIDEO","SALES_CLIENT_INTERACTION","SHOWREEL_NATIVE_DUMMY_VIDEO","SLIDESHOW_ANIMOTO","SLIDESHOW_SHAKR","SLIDESHOW_VARIATION_VIDEO","SOUND_PLATFORM_STREAM","SRT_ATTACHMENT","STORIES_VIDEO","STORYLINE","STORYLINE_WITH_EXTERNAL_MUSIC","STORY_ARCHIVE_VIDEO","STORY_CARD_TEMPLATE","STREAM_HIGHLIGHTS_VIDEO","TAROT_DIGEST","TEMPORARY_UNLISTED","TEMP_VIDEO_COPYRIGHT_SCAN","UNLISTED","UNLISTED_OCULUS","VIDEO_COMMENT","VIDEO_COMPOSITION_VARIATION","VIDEO_CREATIVE_EDITOR_AUTOGEN_AD_VIDEO","VIDEO_SUPERRES","VOICES_ARTICLE_VIDEO","VU_GENERATED_VIDEO","WOODHENGE","WORK_KNOWLEDGE_VIDEO","YOUR_DAY"],"type":"string"},"content_category":{"description":"Content Category (enum: uservideos_content_category_enum_param)","enum":["BEAUTY_FASHION","BUSINESS","CARS_TRUCKS","COMEDY","CUTE_ANIMALS","ENTERTAINMENT","FAMILY","FOOD_HEALTH","HOME","LIFESTYLE","MUSIC","NEWS","OTHER","POLITICS","SCIENCE","SPORTS","TECHNOLOGY","VIDEO_GAMING"],"type":"string"},"creative_tools":{"description":"Creative Tools","type":"string"},"description":{"description":"Description","type":"string"},"direct_share_status":{"description":"Direct Share Status","type":"integer"},"embeddable":{"description":"Embeddable","type":"boolean"},"end_offset":{"description":"End Offset","type":"integer"},"fbuploader_video_file_chunk":{"description":"Fbuploader Video File Chunk","type":"string"},"file_size":{"description":"File Size","type":"integer"},"file_url":{"description":"File URL","format":"uri","type":"string"},"fisheye_video_cropped":{"description":"Fisheye Video Cropped","type":"boolean"},"formatting":{"description":"Formatting (enum: uservideos_formatting_enum_param)","enum":["MARKDOWN","PLAINTEXT"],"type":"string"},"fov":{"description":"Fov","type":"integer"},"front_z_rotation":{"description":"Front Z Rotation","type":"number"},"fun_fact_prompt_id":{"description":"ID of the Fun Fact Prompt","pattern":"^[0-9]+$","type":"string"},"fun_fact_toastee_id":{"description":"ID of the Fun Fact Toastee","pattern":"^[0-9]+$","type":"integer"},"guide":{"description":"Guide","items":{"type":"string"},"type":"array"},"guide_enabled":{"description":"Guide Enabled","type":"boolean"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"initial_heading":{"description":"Initial Heading","type":"integer"},"initial_pitch":{"description":"Initial Pitch","type":"integer"},"instant_game_entry_point_data":{"description":"Instant Game Entry Point Data","type":"string"},"is_boost_intended":{"description":"Is Boost Intended","type":"boolean"},"is_explicit_share":{"description":"Is Explicit Share","type":"boolean"},"is_group_linking_post":{"description":"Is Group Linking Post","type":"boolean"},"is_partnership_ad":{"description":"Is Partnership Ad","type":"boolean"},"is_voice_clip":{"description":"Is Voice Clip","type":"boolean"},"location_source_id":{"description":"ID of the Location Source","pattern":"^[0-9]+$","type":"string"},"manual_privacy":{"description":"Manual Privacy","type":"boolean"},"no_story":{"description":"No Story","type":"boolean"},"og_action_type_id":{"description":"ID of the Og Action Type","pattern":"^[0-9]+$","type":"string"},"og_icon_id":{"description":"ID of the Og Icon","pattern":"^[0-9]+$","type":"string"},"og_object_id":{"description":"ID of the Og Object","pattern":"^[0-9]+$","type":"string"},"og_phrase":{"description":"Og Phrase","type":"string"},"og_suggestion_mechanism":{"description":"Og Suggestion Mechanism","type":"string"},"original_fov":{"description":"Original Fov","type":"integer"},"original_projection_type":{"description":"Original Projection Type (enum: uservideos_original_projection_type_enum_param)","enum":["cubemap","equirectangular","half_equirectangular"],"type":"string"},"partnership_ad_ad_code":{"description":"Partnership Ad Ad Code","type":"string"},"privacy":{"description":"Privacy","type":"string"},"publish_event_id":{"description":"ID of the Publish Event","pattern":"^[0-9]+$","type":"integer"},"referenced_sticker_id":{"description":"ID of the Referenced Sticker","pattern":"^[0-9]+$","type":"string"},"replace_video_id":{"description":"ID of the Replace Video","pattern":"^[0-9]+$","type":"string"},"slideshow_spec":{"description":"Slideshow Spec","type":"string"},"source":{"description":"Source","type":"string"},"source_instagram_media_id":{"description":"ID of the Source Instagram Media","pattern":"^[0-9]+$","type":"string"},"spherical":{"description":"Spherical","type":"boolean"},"sponsor_id":{"description":"ID of the Sponsor","pattern":"^[0-9]+$","type":"string"},"start_offset":{"description":"Start Offset","type":"integer"},"swap_mode":{"description":"Swap Mode (enum: uservideos_swap_mode_enum_param)","enum":["replace"],"type":"string"},"text_format_metadata":{"description":"Text Format Metadata","type":"string"},"thumb":{"description":"Thumb","type":"string"},"time_since_original_post":{"description":"Time Since Original Post","type":"integer"},"title":{"description":"Title","type":"string"},"transcode_setting_properties":{"description":"Transcode Setting Properties","type":"string"},"unpublished_content_type":{"description":"Unpublished Content Type (enum: uservideos_unpublished_content_type_enum_param)","enum":["ADS_POST","DRAFT","INLINE_CREATED","PUBLISHED","REVIEWABLE_BRANDED_CONTENT","SCHEDULED","SCHEDULED_RECURRING"],"type":"string"},"upload_phase":{"description":"Upload Phase (enum: uservideos_upload_phase_enum_param)","enum":["cancel","finish","start","transfer"],"type":"string"},"upload_session_id":{"description":"ID of the Upload Session","pattern":"^[0-9]+$","type":"string"},"upload_setting_properties":{"description":"Upload Setting Properties","type":"string"},"video_file_chunk":{"description":"Video File Chunk","type":"string"},"video_id_original":{"description":"Video ID Original","pattern":"^[0-9]+$","type":"string"},"video_start_time_ms":{"description":"Video Start Time Ms","type":"integer"},"waterfall_id":{"description":"ID of the Waterfall","pattern":"^[0-9]+$","type":"string"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, UserCreateVideoHandler)
	return nil
}

// UserCreateVideoHandler handles the user_create_video tool
func UserCreateVideoHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args user_create_videoArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/videos", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if args.ApplicationId != "" {
		body["application_id"] = args.ApplicationId
	}
	if args.AskedFunFactPromptId > 0 {
		body["asked_fun_fact_prompt_id"] = args.AskedFunFactPromptId
	}
	if args.AudioStoryWaveAnimationHandle != "" {
		body["audio_story_wave_animation_handle"] = args.AudioStoryWaveAnimationHandle
	}
	if args.ComposerEntryPicker != "" {
		body["composer_entry_picker"] = args.ComposerEntryPicker
	}
	if args.ComposerEntryPoint != "" {
		body["composer_entry_point"] = args.ComposerEntryPoint
	}
	if args.ComposerEntryTime > 0 {
		body["composer_entry_time"] = args.ComposerEntryTime
	}
	if args.ComposerSessionEventsLog != "" {
		body["composer_session_events_log"] = args.ComposerSessionEventsLog
	}
	if args.ComposerSessionId != "" {
		body["composer_session_id"] = args.ComposerSessionId
	}
	if args.ComposerSourceSurface != "" {
		body["composer_source_surface"] = args.ComposerSourceSurface
	}
	if args.ComposerType != "" {
		body["composer_type"] = args.ComposerType
	}
	if args.ContainerType != "" {
		body["container_type"] = args.ContainerType
	}
	if args.ContentCategory != "" {
		body["content_category"] = args.ContentCategory
	}
	if args.CreativeTools != "" {
		body["creative_tools"] = args.CreativeTools
	}
	if args.Description != "" {
		body["description"] = args.Description
	}
	if args.DirectShareStatus > 0 {
		body["direct_share_status"] = args.DirectShareStatus
	}
	body["embeddable"] = args.Embeddable
	if args.EndOffset > 0 {
		body["end_offset"] = args.EndOffset
	}
	if args.FbuploaderVideoFileChunk != "" {
		body["fbuploader_video_file_chunk"] = args.FbuploaderVideoFileChunk
	}
	if args.FileSize > 0 {
		body["file_size"] = args.FileSize
	}
	if args.FileUrl != "" {
		body["file_url"] = args.FileUrl
	}
	body["fisheye_video_cropped"] = args.FisheyeVideoCropped
	if args.Formatting != "" {
		body["formatting"] = args.Formatting
	}
	if args.Fov > 0 {
		body["fov"] = args.Fov
	}
	body["front_z_rotation"] = args.FrontZRotation
	if args.FunFactPromptId != "" {
		body["fun_fact_prompt_id"] = args.FunFactPromptId
	}
	if args.FunFactToasteeId > 0 {
		body["fun_fact_toastee_id"] = args.FunFactToasteeId
	}
	if len(args.Guide) > 0 {
		body["guide"] = args.Guide
	}
	body["guide_enabled"] = args.GuideEnabled
	if args.InitialHeading > 0 {
		body["initial_heading"] = args.InitialHeading
	}
	if args.InitialPitch > 0 {
		body["initial_pitch"] = args.InitialPitch
	}
	if args.InstantGameEntryPointData != "" {
		body["instant_game_entry_point_data"] = args.InstantGameEntryPointData
	}
	body["is_boost_intended"] = args.IsBoostIntended
	body["is_explicit_share"] = args.IsExplicitShare
	body["is_group_linking_post"] = args.IsGroupLinkingPost
	body["is_partnership_ad"] = args.IsPartnershipAd
	body["is_voice_clip"] = args.IsVoiceClip
	if args.LocationSourceId != "" {
		body["location_source_id"] = args.LocationSourceId
	}
	body["manual_privacy"] = args.ManualPrivacy
	body["no_story"] = args.NoStory
	if args.OgActionTypeId != "" {
		body["og_action_type_id"] = args.OgActionTypeId
	}
	if args.OgIconId != "" {
		body["og_icon_id"] = args.OgIconId
	}
	if args.OgObjectId != "" {
		body["og_object_id"] = args.OgObjectId
	}
	if args.OgPhrase != "" {
		body["og_phrase"] = args.OgPhrase
	}
	if args.OgSuggestionMechanism != "" {
		body["og_suggestion_mechanism"] = args.OgSuggestionMechanism
	}
	if args.OriginalFov > 0 {
		body["original_fov"] = args.OriginalFov
	}
	if args.OriginalProjectionType != "" {
		body["original_projection_type"] = args.OriginalProjectionType
	}
	if args.PartnershipAdAdCode != "" {
		body["partnership_ad_ad_code"] = args.PartnershipAdAdCode
	}
	if args.Privacy != "" {
		body["privacy"] = args.Privacy
	}
	if args.PublishEventId > 0 {
		body["publish_event_id"] = args.PublishEventId
	}
	if args.ReferencedStickerId != "" {
		body["referenced_sticker_id"] = args.ReferencedStickerId
	}
	if args.ReplaceVideoId != "" {
		body["replace_video_id"] = args.ReplaceVideoId
	}
	body["slideshow_spec"] = args.SlideshowSpec
	if args.Source != "" {
		body["source"] = args.Source
	}
	if args.SourceInstagramMediaId != "" {
		body["source_instagram_media_id"] = args.SourceInstagramMediaId
	}
	body["spherical"] = args.Spherical
	if args.SponsorId != "" {
		body["sponsor_id"] = args.SponsorId
	}
	if args.StartOffset > 0 {
		body["start_offset"] = args.StartOffset
	}
	if args.SwapMode != "" {
		body["swap_mode"] = args.SwapMode
	}
	if args.TextFormatMetadata != "" {
		body["text_format_metadata"] = args.TextFormatMetadata
	}
	body["thumb"] = args.Thumb
	if args.TimeSinceOriginalPost > 0 {
		body["time_since_original_post"] = args.TimeSinceOriginalPost
	}
	if args.Title != "" {
		body["title"] = args.Title
	}
	if args.TranscodeSettingProperties != "" {
		body["transcode_setting_properties"] = args.TranscodeSettingProperties
	}
	if args.UnpublishedContentType != "" {
		body["unpublished_content_type"] = args.UnpublishedContentType
	}
	if args.UploadPhase != "" {
		body["upload_phase"] = args.UploadPhase
	}
	if args.UploadSessionId != "" {
		body["upload_session_id"] = args.UploadSessionId
	}
	if args.UploadSettingProperties != "" {
		body["upload_setting_properties"] = args.UploadSettingProperties
	}
	if args.VideoFileChunk != "" {
		body["video_file_chunk"] = args.VideoFileChunk
	}
	if args.VideoIdOriginal != "" {
		body["video_id_original"] = args.VideoIdOriginal
	}
	if args.VideoStartTimeMs > 0 {
		body["video_start_time_ms"] = args.VideoStartTimeMs
	}
	if args.WaterfallId != "" {
		body["waterfall_id"] = args.WaterfallId
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
