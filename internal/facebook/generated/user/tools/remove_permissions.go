// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// user_remove_permissionsArgs defines the typed arguments for user_remove_permissions
type user_remove_permissionsArgs struct {
	ID         string `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Permission string `json:"permission,omitempty" jsonschema:"description=Permission"`
}

// RegisterUserRemovePermissionsHandler registers the user_remove_permissions tool
func RegisterUserRemovePermissionsHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"user_remove_permissions",
		"Remove permissions from this User",
		json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"permission":{"description":"Permission","type":"string"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, UserRemovePermissionsHandler)
	return nil
}

// UserRemovePermissionsHandler handles the user_remove_permissions tool
func UserRemovePermissionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args user_remove_permissionsArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/permissions", args.ID)
	// Prepare query parameters
	params := make(map[string]string)
	// ID is part of path, not query params
	if args.Permission != "" {
		params["permission"] = args.Permission
	}

	result, err := common.MakeGraphAPIRequest(ctx, "DELETE", endpoint, params, nil)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
