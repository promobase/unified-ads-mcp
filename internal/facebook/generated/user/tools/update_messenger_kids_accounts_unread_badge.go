// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// user_update_messenger_kids_accounts_unread_badgeArgs defines the typed arguments for user_update_messenger_kids_accounts_unread_badge
type user_update_messenger_kids_accounts_unread_badgeArgs struct {
	ProxiedAppId int `json:"proxied_app_id" jsonschema:"description=ID of the Proxied App,required,pattern=^[0-9]+$"`
}

// RegisterUserUpdateMessengerKidsAccountsUnreadBadgeHandler registers the user_update_messenger_kids_accounts_unread_badge tool
func RegisterUserUpdateMessengerKidsAccountsUnreadBadgeHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"user_update_messenger_kids_accounts_unread_badge",
		"Create or update messenger_kids_accounts_unread_badge for this User Returns User. Required: proxied_app_id",
		json.RawMessage(`{"additionalProperties":false,"properties":{"proxied_app_id":{"description":"ID of the Proxied App","pattern":"^[0-9]+$","type":"integer"}},"required":["proxied_app_id"],"type":"object"}`),
	)

	s.AddTool(tool, UserUpdateMessengerKidsAccountsUnreadBadgeHandler)
	return nil
}

// UserUpdateMessengerKidsAccountsUnreadBadgeHandler handles the user_update_messenger_kids_accounts_unread_badge tool
func UserUpdateMessengerKidsAccountsUnreadBadgeHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args user_update_messenger_kids_accounts_unread_badgeArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := "/messenger_kids_accounts_unread_badge"
	// Prepare request body
	body := make(map[string]interface{})
	if args.ProxiedAppId > 0 {
		body["proxied_app_id"] = args.ProxiedAppId
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
