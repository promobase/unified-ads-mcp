// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// user_create_notificationArgs defines the typed arguments for user_create_notification
type user_create_notificationArgs struct {
	ID                        string                 `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	BotMessagePayloadElements string                 `json:"bot_message_payload_elements,omitempty" jsonschema:"description=Bot Message Payload Elements"`
	Filtering                 []string               `json:"filtering,omitempty" jsonschema:"description=Filtering"`
	Href                      map[string]interface{} `json:"href,omitempty" jsonschema:"description=Href"`
	Label                     string                 `json:"label,omitempty" jsonschema:"description=Label"`
	Message                   map[string]interface{} `json:"message,omitempty" jsonschema:"description=Message,minimum=13,maximum=100"`
	NotifIds                  []string               `json:"notif_ids,omitempty" jsonschema:"description=Notif Ids,pattern=^[0-9]+$"`
	Payload                   string                 `json:"payload,omitempty" jsonschema:"description=Payload"`
	Read                      bool                   `json:"read,omitempty" jsonschema:"description=Read"`
	Ref                       string                 `json:"ref,omitempty" jsonschema:"description=Ref"`
	ScheduleInterval          int                    `json:"schedule_interval,omitempty" jsonschema:"description=Schedule Interval"`
	Seen                      bool                   `json:"seen,omitempty" jsonschema:"description=Seen"`
	Template                  map[string]interface{} `json:"template,omitempty" jsonschema:"description=Template"`
	Type                      string                 `json:"type,omitempty" jsonschema:"description=Type"`
}

// RegisterUserCreateNotificationHandler registers the user_create_notification tool
func RegisterUserCreateNotificationHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"user_create_notification",
		"Create or update notifications for this User Returns User.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"bot_message_payload_elements":{"description":"Bot Message Payload Elements","type":"string"},"filtering":{"description":"Filtering","items":{"type":"string"},"type":"array"},"href":{"additionalProperties":true,"description":"Href","type":"object"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"label":{"description":"Label","type":"string"},"message":{"description":"Message","type":"string"},"notif_ids":{"description":"Notif Ids","items":{"type":"string"},"type":"array"},"payload":{"description":"Payload","type":"string"},"read":{"description":"Read","type":"boolean"},"ref":{"description":"Ref","type":"string"},"schedule_interval":{"description":"Schedule Interval","type":"integer"},"seen":{"description":"Seen","type":"boolean"},"template":{"additionalProperties":true,"description":"Template","type":"object"},"type":{"description":"Type (enum: usernotifications_type_enum_param)","enum":["content_update","generic"],"type":"string"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, UserCreateNotificationHandler)
	return nil
}

// UserCreateNotificationHandler handles the user_create_notification tool
func UserCreateNotificationHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args user_create_notificationArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/notifications", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if args.BotMessagePayloadElements != "" {
		body["bot_message_payload_elements"] = args.BotMessagePayloadElements
	}
	if len(args.Filtering) > 0 {
		body["filtering"] = args.Filtering
	}
	body["href"] = args.Href
	if args.Label != "" {
		body["label"] = args.Label
	}
	body["message"] = args.Message
	if len(args.NotifIds) > 0 {
		body["notif_ids"] = args.NotifIds
	}
	if args.Payload != "" {
		body["payload"] = args.Payload
	}
	body["read"] = args.Read
	if args.Ref != "" {
		body["ref"] = args.Ref
	}
	if args.ScheduleInterval > 0 {
		body["schedule_interval"] = args.ScheduleInterval
	}
	body["seen"] = args.Seen
	body["template"] = args.Template
	if args.Type != "" {
		body["type"] = args.Type
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
