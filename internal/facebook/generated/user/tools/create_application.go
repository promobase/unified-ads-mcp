// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// user_create_applicationArgs defines the typed arguments for user_create_application
type user_create_applicationArgs struct {
	ID          string `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	BusinessApp int    `json:"business_app" jsonschema:"description=Business App,required"`
}

// RegisterUserCreateApplicationHandler registers the user_create_application tool
func RegisterUserCreateApplicationHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"user_create_application",
		"Create or update applications for this User Returns User. Required: business_app",
		json.RawMessage(`{"additionalProperties":false,"properties":{"business_app":{"description":"Business App","type":"integer"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"}},"required":["id","business_app"],"type":"object"}`),
	)

	s.AddTool(tool, UserCreateApplicationHandler)
	return nil
}

// UserCreateApplicationHandler handles the user_create_application tool
func UserCreateApplicationHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args user_create_applicationArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/applications", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if args.BusinessApp > 0 {
		body["business_app"] = args.BusinessApp
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
