// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// user_create_access_tokenArgs defines the typed arguments for user_create_access_token
type user_create_access_tokenArgs struct {
	ID                      string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	BusinessApp             string   `json:"business_app" jsonschema:"description=Business App,required"`
	PageId                  string   `json:"page_id,omitempty" jsonschema:"description=ID of the Page,pattern=^[0-9]+$"`
	Scope                   []string `json:"scope,omitempty" jsonschema:"description=Scope"`
	SetTokenExpiresIn60Days bool     `json:"set_token_expires_in_60_days,omitempty" jsonschema:"description=Set Token Expires In 60 Days"`
}

// RegisterUserCreateAccessTokenHandler registers the user_create_access_token tool
func RegisterUserCreateAccessTokenHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"user_create_access_token",
		"Create or update access_tokens for this User Returns User. Required: business_app",
		json.RawMessage(`{"additionalProperties":false,"properties":{"business_app":{"description":"Business App","type":"string"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"page_id":{"description":"ID of the Page","pattern":"^[0-9]+$","type":"string"},"scope":{"description":"Scope","items":{"type":"string"},"type":"array"},"set_token_expires_in_60_days":{"description":"Set Token Expires In 60 Days","type":"boolean"}},"required":["id","business_app"],"type":"object"}`),
	)

	s.AddTool(tool, UserCreateAccessTokenHandler)
	return nil
}

// UserCreateAccessTokenHandler handles the user_create_access_token tool
func UserCreateAccessTokenHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args user_create_access_tokenArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/access_tokens", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if args.BusinessApp != "" {
		body["business_app"] = args.BusinessApp
	}
	if args.PageId != "" {
		body["page_id"] = args.PageId
	}
	if len(args.Scope) > 0 {
		body["scope"] = args.Scope
	}
	body["set_token_expires_in_60_days"] = args.SetTokenExpiresIn60Days

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
