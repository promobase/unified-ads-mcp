// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// user_create_fundraiserArgs defines the typed arguments for user_create_fundraiser
type user_create_fundraiserArgs struct {
	ID                     string      `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	CharityId              string      `json:"charity_id,omitempty" jsonschema:"description=ID of the Charity,pattern=^[0-9]+$"`
	CoverPhoto             interface{} `json:"cover_photo,omitempty" jsonschema:"description=Cover Photo"`
	Currency               string      `json:"currency" jsonschema:"description=Currency,required"`
	Description            string      `json:"description" jsonschema:"description=Description,required"`
	EndTime                string      `json:"end_time" jsonschema:"description=End Time,required,format=date-time"`
	ExternalEventName      string      `json:"external_event_name,omitempty" jsonschema:"description=External Event Name"`
	ExternalEventStartTime string      `json:"external_event_start_time,omitempty" jsonschema:"description=External Event Start Time,format=date-time"`
	ExternalEventUri       string      `json:"external_event_uri,omitempty" jsonschema:"description=External Event Uri"`
	ExternalFundraiserUri  string      `json:"external_fundraiser_uri,omitempty" jsonschema:"description=External Fundraiser Uri"`
	ExternalId             string      `json:"external_id" jsonschema:"description=ID of the External,required,pattern=^[0-9]+$"`
	FundraiserType         string      `json:"fundraiser_type" jsonschema:"description=Fundraiser Type,required"`
	GoalAmount             int         `json:"goal_amount" jsonschema:"description=Goal Amount,required,minimum=1"`
	Name                   string      `json:"name" jsonschema:"description=Name,required"`
	PageId                 string      `json:"page_id,omitempty" jsonschema:"description=ID of the Page,pattern=^[0-9]+$"`
}

// RegisterUserCreateFundraiserHandler registers the user_create_fundraiser tool
func RegisterUserCreateFundraiserHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"user_create_fundraiser",
		"Create or update fundraisers for this User Returns FundraiserPersonToCharity. Required: currency, description, end_time, external_id, fundraiser_type (enum), goal_amount, name",
		json.RawMessage(`{"additionalProperties":false,"properties":{"charity_id":{"description":"ID of the Charity","pattern":"^[0-9]+$","type":"string"},"cover_photo":{"description":"Cover Photo","type":"string"},"currency":{"description":"Currency","type":"string"},"description":{"description":"Description","type":"string"},"end_time":{"description":"End Time","type":"string"},"external_event_name":{"description":"External Event Name","type":"string"},"external_event_start_time":{"description":"External Event Start Time","type":"string"},"external_event_uri":{"description":"External Event Uri","type":"string"},"external_fundraiser_uri":{"description":"External Fundraiser Uri","type":"string"},"external_id":{"description":"ID of the External","pattern":"^[0-9]+$","type":"string"},"fundraiser_type":{"description":"Fundraiser Type (enum: userfundraisers_fundraiser_type_enum_param)","enum":["person_for_charity"],"type":"string"},"goal_amount":{"description":"Goal Amount","type":"integer"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"name":{"description":"Name","type":"string"},"page_id":{"description":"ID of the Page","pattern":"^[0-9]+$","type":"string"}},"required":["id","currency","description","end_time","external_id","fundraiser_type","goal_amount","name"],"type":"object"}`),
	)

	s.AddTool(tool, UserCreateFundraiserHandler)
	return nil
}

// UserCreateFundraiserHandler handles the user_create_fundraiser tool
func UserCreateFundraiserHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args user_create_fundraiserArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/fundraisers", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if args.CharityId != "" {
		body["charity_id"] = args.CharityId
	}
	body["cover_photo"] = args.CoverPhoto
	if args.Currency != "" {
		body["currency"] = args.Currency
	}
	if args.Description != "" {
		body["description"] = args.Description
	}
	if args.EndTime != "" {
		body["end_time"] = args.EndTime
	}
	if args.ExternalEventName != "" {
		body["external_event_name"] = args.ExternalEventName
	}
	if args.ExternalEventStartTime != "" {
		body["external_event_start_time"] = args.ExternalEventStartTime
	}
	if args.ExternalEventUri != "" {
		body["external_event_uri"] = args.ExternalEventUri
	}
	if args.ExternalFundraiserUri != "" {
		body["external_fundraiser_uri"] = args.ExternalFundraiserUri
	}
	if args.ExternalId != "" {
		body["external_id"] = args.ExternalId
	}
	if args.FundraiserType != "" {
		body["fundraiser_type"] = args.FundraiserType
	}
	if args.GoalAmount > 0 {
		body["goal_amount"] = args.GoalAmount
	}
	if args.Name != "" {
		body["name"] = args.Name
	}
	if args.PageId != "" {
		body["page_id"] = args.PageId
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
