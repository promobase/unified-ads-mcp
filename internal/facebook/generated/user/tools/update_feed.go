// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// user_update_feedArgs defines the typed arguments for user_update_feed
type user_update_feedArgs struct {
	ID                        string                   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Actions                   map[string]interface{}   `json:"actions,omitempty" jsonschema:"description=Actions"`
	AlbumId                   string                   `json:"album_id,omitempty" jsonschema:"description=ID of the Album,pattern=^[0-9]+$"`
	AndroidKeyHash            string                   `json:"android_key_hash,omitempty" jsonschema:"description=Android Key Hash"`
	ApplicationId             string                   `json:"application_id,omitempty" jsonschema:"description=ID of the Application,pattern=^[0-9]+$"`
	AskedFunFactPromptId      int                      `json:"asked_fun_fact_prompt_id,omitempty" jsonschema:"description=ID of the Asked Fun Fact Prompt,pattern=^[0-9]+$"`
	Asset3dId                 string                   `json:"asset3d_id,omitempty" jsonschema:"description=ID of the Asset3d,pattern=^[0-9]+$"`
	AssociatedId              string                   `json:"associated_id,omitempty" jsonschema:"description=ID of the Associated,pattern=^[0-9]+$"`
	AttachPlaceSuggestion     bool                     `json:"attach_place_suggestion,omitempty" jsonschema:"description=Attach Place Suggestion"`
	AttachedMedia             []map[string]interface{} `json:"attached_media,omitempty" jsonschema:"description=Attached Media"`
	AudienceExp               bool                     `json:"audience_exp,omitempty" jsonschema:"description=Audience Exp"`
	BackdatedTime             string                   `json:"backdated_time,omitempty" jsonschema:"description=Backdated Time,format=date-time"`
	BackdatedTimeGranularity  string                   `json:"backdated_time_granularity,omitempty" jsonschema:"description=Backdated Time Granularity"`
	BreakingNews              bool                     `json:"breaking_news,omitempty" jsonschema:"description=Breaking News"`
	BreakingNewsExpiration    int                      `json:"breaking_news_expiration,omitempty" jsonschema:"description=Breaking News Expiration"`
	CallToAction              map[string]interface{}   `json:"call_to_action,omitempty" jsonschema:"description=Call To Action"`
	Caption                   string                   `json:"caption,omitempty" jsonschema:"description=Caption"`
	ChildAttachments          []map[string]interface{} `json:"child_attachments,omitempty" jsonschema:"description=Child Attachments"`
	ClientMutationId          string                   `json:"client_mutation_id,omitempty" jsonschema:"description=ID of the Client Mutation,pattern=^[0-9]+$"`
	ComposerEntryPicker       string                   `json:"composer_entry_picker,omitempty" jsonschema:"description=Composer Entry Picker"`
	ComposerEntryPoint        string                   `json:"composer_entry_point,omitempty" jsonschema:"description=Composer Entry Point"`
	ComposerEntryTime         int                      `json:"composer_entry_time,omitempty" jsonschema:"description=Composer Entry Time"`
	ComposerSessionEventsLog  string                   `json:"composer_session_events_log,omitempty" jsonschema:"description=Composer Session Events Log"`
	ComposerSessionId         string                   `json:"composer_session_id,omitempty" jsonschema:"description=ID of the Composer Session,pattern=^[0-9]+$"`
	ComposerSourceSurface     string                   `json:"composer_source_surface,omitempty" jsonschema:"description=Composer Source Surface"`
	ComposerType              string                   `json:"composer_type,omitempty" jsonschema:"description=Composer Type"`
	ConnectionClass           string                   `json:"connection_class,omitempty" jsonschema:"description=Connection Class"`
	ContentAttachment         string                   `json:"content_attachment,omitempty" jsonschema:"description=Content Attachment"`
	Coordinates               map[string]interface{}   `json:"coordinates,omitempty" jsonschema:"description=Coordinates"`
	CtaLink                   string                   `json:"cta_link,omitempty" jsonschema:"description=Cta Link"`
	CtaType                   string                   `json:"cta_type,omitempty" jsonschema:"description=Cta Type"`
	Description               string                   `json:"description,omitempty" jsonschema:"description=Description"`
	DirectShareStatus         int                      `json:"direct_share_status,omitempty" jsonschema:"description=Direct Share Status"`
	ExpandedHeight            int                      `json:"expanded_height,omitempty" jsonschema:"description=Expanded Height"`
	ExpandedWidth             int                      `json:"expanded_width,omitempty" jsonschema:"description=Expanded Width"`
	FeedTargeting             map[string]interface{}   `json:"feed_targeting,omitempty" jsonschema:"description=Feed Targeting"`
	Formatting                string                   `json:"formatting,omitempty" jsonschema:"description=Formatting"`
	FunFactPromptId           string                   `json:"fun_fact_prompt_id,omitempty" jsonschema:"description=ID of the Fun Fact Prompt,pattern=^[0-9]+$"`
	FunFactToasteeId          int                      `json:"fun_fact_toastee_id,omitempty" jsonschema:"description=ID of the Fun Fact Toastee,pattern=^[0-9]+$"`
	Height                    int                      `json:"height,omitempty" jsonschema:"description=Height"`
	HomeCheckinCityId         map[string]interface{}   `json:"home_checkin_city_id,omitempty" jsonschema:"description=ID of the Home Checkin City,pattern=^[0-9]+$"`
	ImageCrops                map[string]interface{}   `json:"image_crops,omitempty" jsonschema:"description=Image Crops,minimum=13,maximum=100"`
	ImplicitWithTags          []int                    `json:"implicit_with_tags,omitempty" jsonschema:"description=Implicit With Tags"`
	InstantGameEntryPointData string                   `json:"instant_game_entry_point_data,omitempty" jsonschema:"description=Instant Game Entry Point Data"`
	IosBundleId               string                   `json:"ios_bundle_id,omitempty" jsonschema:"description=ID of the Ios Bundle,pattern=^[0-9]+$"`
	IsBackoutDraft            bool                     `json:"is_backout_draft,omitempty" jsonschema:"description=Is Backout Draft"`
	IsBoostIntended           bool                     `json:"is_boost_intended,omitempty" jsonschema:"description=Is Boost Intended"`
	IsExplicitLocation        bool                     `json:"is_explicit_location,omitempty" jsonschema:"description=Is Explicit Location"`
	IsExplicitShare           bool                     `json:"is_explicit_share,omitempty" jsonschema:"description=Is Explicit Share"`
	IsGroupLinkingPost        bool                     `json:"is_group_linking_post,omitempty" jsonschema:"description=Is Group Linking Post"`
	IsPhotoContainer          bool                     `json:"is_photo_container,omitempty" jsonschema:"description=Is Photo Container"`
	Link                      string                   `json:"link,omitempty" jsonschema:"description=Link"`
	LocationSourceId          string                   `json:"location_source_id,omitempty" jsonschema:"description=ID of the Location Source,pattern=^[0-9]+$"`
	ManualPrivacy             bool                     `json:"manual_privacy,omitempty" jsonschema:"description=Manual Privacy"`
	Message                   string                   `json:"message,omitempty" jsonschema:"description=Message"`
	MultiShareEndCard         bool                     `json:"multi_share_end_card,omitempty" jsonschema:"description=Multi Share End Card"`
	MultiShareOptimized       bool                     `json:"multi_share_optimized,omitempty" jsonschema:"description=Multi Share Optimized"`
	Name                      string                   `json:"name,omitempty" jsonschema:"description=Name"`
	NectarModule              string                   `json:"nectar_module,omitempty" jsonschema:"description=Nectar Module"`
	ObjectAttachment          string                   `json:"object_attachment,omitempty" jsonschema:"description=Object Attachment"`
	OgActionTypeId            string                   `json:"og_action_type_id,omitempty" jsonschema:"description=ID of the Og Action Type,pattern=^[0-9]+$"`
	OgHideObjectAttachment    bool                     `json:"og_hide_object_attachment,omitempty" jsonschema:"description=Og Hide Object Attachment"`
	OgIconId                  string                   `json:"og_icon_id,omitempty" jsonschema:"description=ID of the Og Icon,pattern=^[0-9]+$"`
	OgObjectId                string                   `json:"og_object_id,omitempty" jsonschema:"description=ID of the Og Object,pattern=^[0-9]+$"`
	OgPhrase                  string                   `json:"og_phrase,omitempty" jsonschema:"description=Og Phrase"`
	OgSetProfileBadge         bool                     `json:"og_set_profile_badge,omitempty" jsonschema:"description=Og Set Profile Badge"`
	OgSuggestionMechanism     string                   `json:"og_suggestion_mechanism,omitempty" jsonschema:"description=Og Suggestion Mechanism"`
	PageRecommendation        string                   `json:"page_recommendation,omitempty" jsonschema:"description=Page Recommendation"`
	Picture                   string                   `json:"picture,omitempty" jsonschema:"description=Picture"`
	Place                     map[string]interface{}   `json:"place,omitempty" jsonschema:"description=Place"`
	PlaceAttachmentSetting    string                   `json:"place_attachment_setting,omitempty" jsonschema:"description=Place Attachment Setting"`
	PlaceList                 string                   `json:"place_list,omitempty" jsonschema:"description=Place List"`
	PlaceListData             interface{}              `json:"place_list_data,omitempty" jsonschema:"description=Place List Data"`
	PostSurfacesBlacklist     []string                 `json:"post_surfaces_blacklist,omitempty" jsonschema:"description=Post Surfaces Blacklist"`
	PostingToRedspace         string                   `json:"posting_to_redspace,omitempty" jsonschema:"description=Posting To Redspace"`
	Privacy                   string                   `json:"privacy,omitempty" jsonschema:"description=Privacy"`
	PromptId                  string                   `json:"prompt_id,omitempty" jsonschema:"description=ID of the Prompt,pattern=^[0-9]+$"`
	PromptTrackingString      string                   `json:"prompt_tracking_string,omitempty" jsonschema:"description=Prompt Tracking String"`
	Properties                map[string]interface{}   `json:"properties,omitempty" jsonschema:"description=Properties"`
	ProxiedAppId              string                   `json:"proxied_app_id,omitempty" jsonschema:"description=ID of the Proxied App,pattern=^[0-9]+$"`
	PublishEventId            int                      `json:"publish_event_id,omitempty" jsonschema:"description=ID of the Publish Event,pattern=^[0-9]+$"`
	Published                 bool                     `json:"published,omitempty" jsonschema:"description=Published"`
	Quote                     string                   `json:"quote,omitempty" jsonschema:"description=Quote"`
	Ref                       []string                 `json:"ref,omitempty" jsonschema:"description=Ref"`
	ReferenceableImageIds     []string                 `json:"referenceable_image_ids,omitempty" jsonschema:"description=Referenceable Image Ids,pattern=^[0-9]+$"`
	ReferralId                string                   `json:"referral_id,omitempty" jsonschema:"description=ID of the Referral,pattern=^[0-9]+$"`
	ScheduledPublishTime      string                   `json:"scheduled_publish_time,omitempty" jsonschema:"description=Scheduled Publish Time,format=date-time"`
	Source                    string                   `json:"source,omitempty" jsonschema:"description=Source"`
	SponsorId                 string                   `json:"sponsor_id,omitempty" jsonschema:"description=ID of the Sponsor,pattern=^[0-9]+$"`
	SponsorRelationship       int                      `json:"sponsor_relationship,omitempty" jsonschema:"description=Sponsor Relationship"`
	SuggestedPlaceId          map[string]interface{}   `json:"suggested_place_id,omitempty" jsonschema:"description=ID of the Suggested Place,pattern=^[0-9]+$"`
	Tags                      []int                    `json:"tags,omitempty" jsonschema:"description=Tags"`
	TargetSurface             string                   `json:"target_surface,omitempty" jsonschema:"description=Target Surface"`
	Targeting                 map[string]interface{}   `json:"targeting,omitempty" jsonschema:"description=Targeting"`
	TextFormatMetadata        string                   `json:"text_format_metadata,omitempty" jsonschema:"description=Text Format Metadata"`
	TextFormatPresetId        string                   `json:"text_format_preset_id,omitempty" jsonschema:"description=ID of the Text Format Preset,pattern=^[0-9]+$"`
	TextOnlyPlace             string                   `json:"text_only_place,omitempty" jsonschema:"description=Text Only Place"`
	Thumbnail                 interface{}              `json:"thumbnail,omitempty" jsonschema:"description=Thumbnail"`
	TimeSinceOriginalPost     int                      `json:"time_since_original_post,omitempty" jsonschema:"description=Time Since Original Post"`
	Title                     string                   `json:"title,omitempty" jsonschema:"description=Title"`
	TrackingInfo              string                   `json:"tracking_info,omitempty" jsonschema:"description=Tracking Info"`
	UnpublishedContentType    string                   `json:"unpublished_content_type,omitempty" jsonschema:"description=Unpublished Content Type"`
	UserSelectedTags          bool                     `json:"user_selected_tags,omitempty" jsonschema:"description=User Selected Tags"`
	VideoStartTimeMs          int                      `json:"video_start_time_ms,omitempty" jsonschema:"description=Video Start Time Ms"`
	ViewerCoordinates         map[string]interface{}   `json:"viewer_coordinates,omitempty" jsonschema:"description=Viewer Coordinates"`
	Width                     int                      `json:"width,omitempty" jsonschema:"description=Width"`
}

// RegisterUserUpdateFeedHandler registers the user_update_feed tool
func RegisterUserUpdateFeedHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"user_update_feed",
		"Create or update feed for this User Returns Post.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"actions":{"additionalProperties":true,"description":"Actions","type":"object"},"album_id":{"description":"ID of the Album","pattern":"^[0-9]+$","type":"string"},"android_key_hash":{"description":"Android Key Hash","type":"string"},"application_id":{"description":"ID of the Application","pattern":"^[0-9]+$","type":"string"},"asked_fun_fact_prompt_id":{"description":"ID of the Asked Fun Fact Prompt","pattern":"^[0-9]+$","type":"integer"},"asset3d_id":{"description":"ID of the Asset3d","pattern":"^[0-9]+$","type":"string"},"associated_id":{"description":"ID of the Associated","pattern":"^[0-9]+$","type":"string"},"attach_place_suggestion":{"description":"Attach Place Suggestion","type":"boolean"},"attached_media":{"description":"Attached Media","items":{"additionalProperties":true,"type":"object"},"type":"array"},"audience_exp":{"description":"Audience Exp","type":"boolean"},"backdated_time":{"description":"Backdated Time","type":"string"},"backdated_time_granularity":{"description":"Backdated Time Granularity (enum: userfeed_backdated_time_granularity_enum_param)","enum":["day","hour","min","month","none","year"],"type":"string"},"breaking_news":{"description":"Breaking News","type":"boolean"},"breaking_news_expiration":{"description":"Breaking News Expiration","type":"integer"},"call_to_action":{"additionalProperties":true,"description":"Call To Action","type":"object"},"caption":{"description":"Caption","type":"string"},"child_attachments":{"description":"Child Attachments","items":{"additionalProperties":true,"type":"object"},"type":"array"},"client_mutation_id":{"description":"ID of the Client Mutation","pattern":"^[0-9]+$","type":"string"},"composer_entry_picker":{"description":"Composer Entry Picker","type":"string"},"composer_entry_point":{"description":"Composer Entry Point","type":"string"},"composer_entry_time":{"description":"Composer Entry Time","type":"integer"},"composer_session_events_log":{"description":"Composer Session Events Log","type":"string"},"composer_session_id":{"description":"ID of the Composer Session","pattern":"^[0-9]+$","type":"string"},"composer_source_surface":{"description":"Composer Source Surface","type":"string"},"composer_type":{"description":"Composer Type","type":"string"},"connection_class":{"description":"Connection Class","type":"string"},"content_attachment":{"description":"Content Attachment","type":"string"},"coordinates":{"additionalProperties":true,"description":"Coordinates","type":"object"},"cta_link":{"description":"Cta Link","type":"string"},"cta_type":{"description":"Cta Type","type":"string"},"description":{"description":"Description","type":"string"},"direct_share_status":{"description":"Direct Share Status","type":"integer"},"expanded_height":{"description":"Expanded Height","type":"integer"},"expanded_width":{"description":"Expanded Width","type":"integer"},"feed_targeting":{"additionalProperties":true,"description":"Feed Targeting","type":"object"},"formatting":{"description":"Formatting (enum: userfeed_formatting_enum_param)","enum":["MARKDOWN","PLAINTEXT"],"type":"string"},"fun_fact_prompt_id":{"description":"ID of the Fun Fact Prompt","pattern":"^[0-9]+$","type":"string"},"fun_fact_toastee_id":{"description":"ID of the Fun Fact Toastee","pattern":"^[0-9]+$","type":"integer"},"height":{"description":"Height","type":"integer"},"home_checkin_city_id":{"additionalProperties":true,"description":"ID of the Home Checkin City","type":"object"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"image_crops":{"description":"Image Crops","type":"string"},"implicit_with_tags":{"description":"Implicit With Tags","items":{"type":"integer"},"type":"array"},"instant_game_entry_point_data":{"description":"Instant Game Entry Point Data","type":"string"},"ios_bundle_id":{"description":"ID of the Ios Bundle","pattern":"^[0-9]+$","type":"string"},"is_backout_draft":{"description":"Is Backout Draft","type":"boolean"},"is_boost_intended":{"description":"Is Boost Intended","type":"boolean"},"is_explicit_location":{"description":"Is Explicit Location","type":"boolean"},"is_explicit_share":{"description":"Is Explicit Share","type":"boolean"},"is_group_linking_post":{"description":"Is Group Linking Post","type":"boolean"},"is_photo_container":{"description":"Is Photo Container","type":"boolean"},"link":{"description":"Link","type":"string"},"location_source_id":{"description":"ID of the Location Source","pattern":"^[0-9]+$","type":"string"},"manual_privacy":{"description":"Manual Privacy","type":"boolean"},"message":{"description":"Message","type":"string"},"multi_share_end_card":{"description":"Multi Share End Card","type":"boolean"},"multi_share_optimized":{"description":"Multi Share Optimized","type":"boolean"},"name":{"description":"Name","type":"string"},"nectar_module":{"description":"Nectar Module","type":"string"},"object_attachment":{"description":"Object Attachment","type":"string"},"og_action_type_id":{"description":"ID of the Og Action Type","pattern":"^[0-9]+$","type":"string"},"og_hide_object_attachment":{"description":"Og Hide Object Attachment","type":"boolean"},"og_icon_id":{"description":"ID of the Og Icon","pattern":"^[0-9]+$","type":"string"},"og_object_id":{"description":"ID of the Og Object","pattern":"^[0-9]+$","type":"string"},"og_phrase":{"description":"Og Phrase","type":"string"},"og_set_profile_badge":{"description":"Og Set Profile Badge","type":"boolean"},"og_suggestion_mechanism":{"description":"Og Suggestion Mechanism","type":"string"},"page_recommendation":{"description":"Page Recommendation","type":"string"},"picture":{"description":"Picture","type":"string"},"place":{"additionalProperties":true,"description":"Place","type":"object"},"place_attachment_setting":{"description":"Place Attachment Setting (enum: userfeed_place_attachment_setting_enum_param)","enum":["1","2"],"type":"string"},"place_list":{"description":"Place List","type":"string"},"place_list_data":{"description":"Place List Data","type":"string"},"post_surfaces_blacklist":{"description":"Post Surfaces Blacklist","items":{"type":"string"},"type":"array"},"posting_to_redspace":{"description":"Posting To Redspace (enum: userfeed_posting_to_redspace_enum_param)","enum":["disabled","enabled"],"type":"string"},"privacy":{"description":"Privacy","type":"string"},"prompt_id":{"description":"ID of the Prompt","pattern":"^[0-9]+$","type":"string"},"prompt_tracking_string":{"description":"Prompt Tracking String","type":"string"},"properties":{"additionalProperties":true,"description":"Properties","type":"object"},"proxied_app_id":{"description":"ID of the Proxied App","pattern":"^[0-9]+$","type":"string"},"publish_event_id":{"description":"ID of the Publish Event","pattern":"^[0-9]+$","type":"integer"},"published":{"description":"Published","type":"boolean"},"quote":{"description":"Quote","type":"string"},"ref":{"description":"Ref","items":{"type":"string"},"type":"array"},"referenceable_image_ids":{"description":"Referenceable Image Ids","items":{"type":"string"},"type":"array"},"referral_id":{"description":"ID of the Referral","pattern":"^[0-9]+$","type":"string"},"scheduled_publish_time":{"description":"Scheduled Publish Time","type":"string"},"source":{"description":"Source","type":"string"},"sponsor_id":{"description":"ID of the Sponsor","pattern":"^[0-9]+$","type":"string"},"sponsor_relationship":{"description":"Sponsor Relationship","type":"integer"},"suggested_place_id":{"additionalProperties":true,"description":"ID of the Suggested Place","type":"object"},"tags":{"description":"Tags","items":{"type":"integer"},"type":"array"},"target_surface":{"description":"Target Surface (enum: userfeed_target_surface_enum_param)","enum":["STORY","TIMELINE"],"type":"string"},"targeting":{"additionalProperties":true,"description":"Targeting","type":"object"},"text_format_metadata":{"description":"Text Format Metadata","type":"string"},"text_format_preset_id":{"description":"ID of the Text Format Preset","pattern":"^[0-9]+$","type":"string"},"text_only_place":{"description":"Text Only Place","type":"string"},"thumbnail":{"description":"Thumbnail","type":"string"},"time_since_original_post":{"description":"Time Since Original Post","type":"integer"},"title":{"description":"Title","type":"string"},"tracking_info":{"description":"Tracking Info","type":"string"},"unpublished_content_type":{"description":"Unpublished Content Type (enum: userfeed_unpublished_content_type_enum_param)","enum":["ADS_POST","DRAFT","INLINE_CREATED","PUBLISHED","REVIEWABLE_BRANDED_CONTENT","SCHEDULED","SCHEDULED_RECURRING"],"type":"string"},"user_selected_tags":{"description":"User Selected Tags","type":"boolean"},"video_start_time_ms":{"description":"Video Start Time Ms","type":"integer"},"viewer_coordinates":{"additionalProperties":true,"description":"Viewer Coordinates","type":"object"},"width":{"description":"Width","type":"integer"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, UserUpdateFeedHandler)
	return nil
}

// UserUpdateFeedHandler handles the user_update_feed tool
func UserUpdateFeedHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args user_update_feedArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/feed", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	body["actions"] = args.Actions
	if args.AlbumId != "" {
		body["album_id"] = args.AlbumId
	}
	if args.AndroidKeyHash != "" {
		body["android_key_hash"] = args.AndroidKeyHash
	}
	if args.ApplicationId != "" {
		body["application_id"] = args.ApplicationId
	}
	if args.AskedFunFactPromptId > 0 {
		body["asked_fun_fact_prompt_id"] = args.AskedFunFactPromptId
	}
	if args.Asset3dId != "" {
		body["asset3d_id"] = args.Asset3dId
	}
	if args.AssociatedId != "" {
		body["associated_id"] = args.AssociatedId
	}
	body["attach_place_suggestion"] = args.AttachPlaceSuggestion
	if len(args.AttachedMedia) > 0 {
		body["attached_media"] = args.AttachedMedia
	}
	body["audience_exp"] = args.AudienceExp
	if args.BackdatedTime != "" {
		body["backdated_time"] = args.BackdatedTime
	}
	if args.BackdatedTimeGranularity != "" {
		body["backdated_time_granularity"] = args.BackdatedTimeGranularity
	}
	body["breaking_news"] = args.BreakingNews
	if args.BreakingNewsExpiration > 0 {
		body["breaking_news_expiration"] = args.BreakingNewsExpiration
	}
	body["call_to_action"] = args.CallToAction
	if args.Caption != "" {
		body["caption"] = args.Caption
	}
	if len(args.ChildAttachments) > 0 {
		body["child_attachments"] = args.ChildAttachments
	}
	if args.ClientMutationId != "" {
		body["client_mutation_id"] = args.ClientMutationId
	}
	if args.ComposerEntryPicker != "" {
		body["composer_entry_picker"] = args.ComposerEntryPicker
	}
	if args.ComposerEntryPoint != "" {
		body["composer_entry_point"] = args.ComposerEntryPoint
	}
	if args.ComposerEntryTime > 0 {
		body["composer_entry_time"] = args.ComposerEntryTime
	}
	if args.ComposerSessionEventsLog != "" {
		body["composer_session_events_log"] = args.ComposerSessionEventsLog
	}
	if args.ComposerSessionId != "" {
		body["composer_session_id"] = args.ComposerSessionId
	}
	if args.ComposerSourceSurface != "" {
		body["composer_source_surface"] = args.ComposerSourceSurface
	}
	if args.ComposerType != "" {
		body["composer_type"] = args.ComposerType
	}
	if args.ConnectionClass != "" {
		body["connection_class"] = args.ConnectionClass
	}
	if args.ContentAttachment != "" {
		body["content_attachment"] = args.ContentAttachment
	}
	body["coordinates"] = args.Coordinates
	if args.CtaLink != "" {
		body["cta_link"] = args.CtaLink
	}
	if args.CtaType != "" {
		body["cta_type"] = args.CtaType
	}
	if args.Description != "" {
		body["description"] = args.Description
	}
	if args.DirectShareStatus > 0 {
		body["direct_share_status"] = args.DirectShareStatus
	}
	if args.ExpandedHeight > 0 {
		body["expanded_height"] = args.ExpandedHeight
	}
	if args.ExpandedWidth > 0 {
		body["expanded_width"] = args.ExpandedWidth
	}
	body["feed_targeting"] = args.FeedTargeting
	if args.Formatting != "" {
		body["formatting"] = args.Formatting
	}
	if args.FunFactPromptId != "" {
		body["fun_fact_prompt_id"] = args.FunFactPromptId
	}
	if args.FunFactToasteeId > 0 {
		body["fun_fact_toastee_id"] = args.FunFactToasteeId
	}
	if args.Height > 0 {
		body["height"] = args.Height
	}
	body["home_checkin_city_id"] = args.HomeCheckinCityId
	body["image_crops"] = args.ImageCrops
	if len(args.ImplicitWithTags) > 0 {
		body["implicit_with_tags"] = args.ImplicitWithTags
	}
	if args.InstantGameEntryPointData != "" {
		body["instant_game_entry_point_data"] = args.InstantGameEntryPointData
	}
	if args.IosBundleId != "" {
		body["ios_bundle_id"] = args.IosBundleId
	}
	body["is_backout_draft"] = args.IsBackoutDraft
	body["is_boost_intended"] = args.IsBoostIntended
	body["is_explicit_location"] = args.IsExplicitLocation
	body["is_explicit_share"] = args.IsExplicitShare
	body["is_group_linking_post"] = args.IsGroupLinkingPost
	body["is_photo_container"] = args.IsPhotoContainer
	if args.Link != "" {
		body["link"] = args.Link
	}
	if args.LocationSourceId != "" {
		body["location_source_id"] = args.LocationSourceId
	}
	body["manual_privacy"] = args.ManualPrivacy
	if args.Message != "" {
		body["message"] = args.Message
	}
	body["multi_share_end_card"] = args.MultiShareEndCard
	body["multi_share_optimized"] = args.MultiShareOptimized
	if args.Name != "" {
		body["name"] = args.Name
	}
	if args.NectarModule != "" {
		body["nectar_module"] = args.NectarModule
	}
	if args.ObjectAttachment != "" {
		body["object_attachment"] = args.ObjectAttachment
	}
	if args.OgActionTypeId != "" {
		body["og_action_type_id"] = args.OgActionTypeId
	}
	body["og_hide_object_attachment"] = args.OgHideObjectAttachment
	if args.OgIconId != "" {
		body["og_icon_id"] = args.OgIconId
	}
	if args.OgObjectId != "" {
		body["og_object_id"] = args.OgObjectId
	}
	if args.OgPhrase != "" {
		body["og_phrase"] = args.OgPhrase
	}
	body["og_set_profile_badge"] = args.OgSetProfileBadge
	if args.OgSuggestionMechanism != "" {
		body["og_suggestion_mechanism"] = args.OgSuggestionMechanism
	}
	if args.PageRecommendation != "" {
		body["page_recommendation"] = args.PageRecommendation
	}
	if args.Picture != "" {
		body["picture"] = args.Picture
	}
	body["place"] = args.Place
	if args.PlaceAttachmentSetting != "" {
		body["place_attachment_setting"] = args.PlaceAttachmentSetting
	}
	if args.PlaceList != "" {
		body["place_list"] = args.PlaceList
	}
	body["place_list_data"] = args.PlaceListData
	if len(args.PostSurfacesBlacklist) > 0 {
		body["post_surfaces_blacklist"] = args.PostSurfacesBlacklist
	}
	if args.PostingToRedspace != "" {
		body["posting_to_redspace"] = args.PostingToRedspace
	}
	if args.Privacy != "" {
		body["privacy"] = args.Privacy
	}
	if args.PromptId != "" {
		body["prompt_id"] = args.PromptId
	}
	if args.PromptTrackingString != "" {
		body["prompt_tracking_string"] = args.PromptTrackingString
	}
	body["properties"] = args.Properties
	if args.ProxiedAppId != "" {
		body["proxied_app_id"] = args.ProxiedAppId
	}
	if args.PublishEventId > 0 {
		body["publish_event_id"] = args.PublishEventId
	}
	body["published"] = args.Published
	if args.Quote != "" {
		body["quote"] = args.Quote
	}
	if len(args.Ref) > 0 {
		body["ref"] = args.Ref
	}
	if len(args.ReferenceableImageIds) > 0 {
		body["referenceable_image_ids"] = args.ReferenceableImageIds
	}
	if args.ReferralId != "" {
		body["referral_id"] = args.ReferralId
	}
	if args.ScheduledPublishTime != "" {
		body["scheduled_publish_time"] = args.ScheduledPublishTime
	}
	if args.Source != "" {
		body["source"] = args.Source
	}
	if args.SponsorId != "" {
		body["sponsor_id"] = args.SponsorId
	}
	if args.SponsorRelationship > 0 {
		body["sponsor_relationship"] = args.SponsorRelationship
	}
	body["suggested_place_id"] = args.SuggestedPlaceId
	if len(args.Tags) > 0 {
		body["tags"] = args.Tags
	}
	if args.TargetSurface != "" {
		body["target_surface"] = args.TargetSurface
	}
	body["targeting"] = args.Targeting
	if args.TextFormatMetadata != "" {
		body["text_format_metadata"] = args.TextFormatMetadata
	}
	if args.TextFormatPresetId != "" {
		body["text_format_preset_id"] = args.TextFormatPresetId
	}
	if args.TextOnlyPlace != "" {
		body["text_only_place"] = args.TextOnlyPlace
	}
	body["thumbnail"] = args.Thumbnail
	if args.TimeSinceOriginalPost > 0 {
		body["time_since_original_post"] = args.TimeSinceOriginalPost
	}
	if args.Title != "" {
		body["title"] = args.Title
	}
	if args.TrackingInfo != "" {
		body["tracking_info"] = args.TrackingInfo
	}
	if args.UnpublishedContentType != "" {
		body["unpublished_content_type"] = args.UnpublishedContentType
	}
	body["user_selected_tags"] = args.UserSelectedTags
	if args.VideoStartTimeMs > 0 {
		body["video_start_time_ms"] = args.VideoStartTimeMs
	}
	body["viewer_coordinates"] = args.ViewerCoordinates
	if args.Width > 0 {
		body["width"] = args.Width
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
