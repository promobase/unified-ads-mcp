// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// user_create_staging_resourceArgs defines the typed arguments for user_create_staging_resource
type user_create_staging_resourceArgs struct {
	ID   string      `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	File interface{} `json:"file,omitempty" jsonschema:"description=File"`
}

// RegisterUserCreateStagingResourceHandler registers the user_create_staging_resource tool
func RegisterUserCreateStagingResourceHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"user_create_staging_resource",
		"Create or update staging_resources for this User Returns User.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"file":{"description":"File","type":"string"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, UserCreateStagingResourceHandler)
	return nil
}

// UserCreateStagingResourceHandler handles the user_create_staging_resource tool
func UserCreateStagingResourceHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args user_create_staging_resourceArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/staging_resources", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	body["file"] = args.File

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
