// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// user_create_live_videoArgs defines the typed arguments for user_create_live_video
type user_create_live_videoArgs struct {
	ID                         string                 `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	ContentTags                []string               `json:"content_tags,omitempty" jsonschema:"description=Content Tags"`
	Description                string                 `json:"description,omitempty" jsonschema:"description=Description"`
	EnableBackupIngest         bool                   `json:"enable_backup_ingest,omitempty" jsonschema:"description=Enable Backup Ingest"`
	EncodingSettings           string                 `json:"encoding_settings,omitempty" jsonschema:"description=Encoding Settings"`
	EventParams                map[string]interface{} `json:"event_params,omitempty" jsonschema:"description=Event Params"`
	FisheyeVideoCropped        bool                   `json:"fisheye_video_cropped,omitempty" jsonschema:"description=Fisheye Video Cropped"`
	FrontZRotation             float64                `json:"front_z_rotation,omitempty" jsonschema:"description=Front Z Rotation"`
	IsAudioOnly                bool                   `json:"is_audio_only,omitempty" jsonschema:"description=Is Audio Only"`
	IsSpherical                bool                   `json:"is_spherical,omitempty" jsonschema:"description=Is Spherical"`
	OriginalFov                int                    `json:"original_fov,omitempty" jsonschema:"description=Original Fov"`
	Privacy                    string                 `json:"privacy,omitempty" jsonschema:"description=Privacy"`
	Projection                 string                 `json:"projection,omitempty" jsonschema:"description=Projection"`
	Published                  bool                   `json:"published,omitempty" jsonschema:"description=Published"`
	ScheduleCustomProfileImage interface{}            `json:"schedule_custom_profile_image,omitempty" jsonschema:"description=Schedule Custom Profile Image,minimum=13,maximum=100"`
	SpatialAudioFormat         string                 `json:"spatial_audio_format,omitempty" jsonschema:"description=Spatial Audio Format"`
	Status                     string                 `json:"status,omitempty" jsonschema:"description=Status,enum=ACTIVE,enum=PAUSED,enum=DELETED,enum=ARCHIVED"`
	StereoscopicMode           string                 `json:"stereoscopic_mode,omitempty" jsonschema:"description=Stereoscopic Mode"`
	StopOnDeleteStream         bool                   `json:"stop_on_delete_stream,omitempty" jsonschema:"description=Stop On Delete Stream"`
	StreamType                 string                 `json:"stream_type,omitempty" jsonschema:"description=Stream Type"`
	Title                      string                 `json:"title,omitempty" jsonschema:"description=Title"`
}

// RegisterUserCreateLiveVideoHandler registers the user_create_live_video tool
func RegisterUserCreateLiveVideoHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"user_create_live_video",
		"Create or update live_videos for this User Returns LiveVideo.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"content_tags":{"description":"Content Tags","items":{"type":"string"},"type":"array"},"description":{"description":"Description","type":"string"},"enable_backup_ingest":{"description":"Enable Backup Ingest","type":"boolean"},"encoding_settings":{"description":"Encoding Settings","type":"string"},"event_params":{"additionalProperties":true,"description":"Event Params","type":"object"},"fisheye_video_cropped":{"description":"Fisheye Video Cropped","type":"boolean"},"front_z_rotation":{"description":"Front Z Rotation","type":"number"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"is_audio_only":{"description":"Is Audio Only","type":"boolean"},"is_spherical":{"description":"Is Spherical","type":"boolean"},"original_fov":{"description":"Original Fov","type":"integer"},"privacy":{"description":"Privacy","type":"string"},"projection":{"description":"Projection (enum: userlive_videos_projection_enum_param)","enum":["CUBEMAP","EQUIRECTANGULAR","HALF_EQUIRECTANGULAR"],"type":"string"},"published":{"description":"Published","type":"boolean"},"schedule_custom_profile_image":{"description":"Schedule Custom Profile Image","type":"string"},"spatial_audio_format":{"description":"Spatial Audio Format (enum: userlive_videos_spatial_audio_format_enum_param)","enum":["ambiX_4"],"type":"string"},"status":{"description":"Status (enum: userlive_videos_status_enum_param)","enum":["LIVE_NOW","SCHEDULED_CANCELED","SCHEDULED_LIVE","SCHEDULED_UNPUBLISHED","UNPUBLISHED"],"type":"string"},"stereoscopic_mode":{"description":"Stereoscopic Mode (enum: userlive_videos_stereoscopic_mode_enum_param)","enum":["LEFT_RIGHT","MONO","TOP_BOTTOM"],"type":"string"},"stop_on_delete_stream":{"description":"Stop On Delete Stream","type":"boolean"},"stream_type":{"description":"Stream Type (enum: userlive_videos_stream_type_enum_param)","enum":["AMBIENT","REGULAR"],"type":"string"},"title":{"description":"Title","type":"string"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, UserCreateLiveVideoHandler)
	return nil
}

// UserCreateLiveVideoHandler handles the user_create_live_video tool
func UserCreateLiveVideoHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args user_create_live_videoArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/live_videos", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if len(args.ContentTags) > 0 {
		body["content_tags"] = args.ContentTags
	}
	if args.Description != "" {
		body["description"] = args.Description
	}
	body["enable_backup_ingest"] = args.EnableBackupIngest
	if args.EncodingSettings != "" {
		body["encoding_settings"] = args.EncodingSettings
	}
	body["event_params"] = args.EventParams
	body["fisheye_video_cropped"] = args.FisheyeVideoCropped
	body["front_z_rotation"] = args.FrontZRotation
	body["is_audio_only"] = args.IsAudioOnly
	body["is_spherical"] = args.IsSpherical
	if args.OriginalFov > 0 {
		body["original_fov"] = args.OriginalFov
	}
	if args.Privacy != "" {
		body["privacy"] = args.Privacy
	}
	if args.Projection != "" {
		body["projection"] = args.Projection
	}
	body["published"] = args.Published
	body["schedule_custom_profile_image"] = args.ScheduleCustomProfileImage
	if args.SpatialAudioFormat != "" {
		body["spatial_audio_format"] = args.SpatialAudioFormat
	}
	if args.Status != "" {
		body["status"] = args.Status
	}
	if args.StereoscopicMode != "" {
		body["stereoscopic_mode"] = args.StereoscopicMode
	}
	body["stop_on_delete_stream"] = args.StopOnDeleteStream
	if args.StreamType != "" {
		body["stream_type"] = args.StreamType
	}
	if args.Title != "" {
		body["title"] = args.Title
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
