// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// user_updateArgs defines the typed arguments for user_update
type user_updateArgs struct {
	ID                              string `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	EmojiColorPref                  int    `json:"emoji_color_pref,omitempty" jsonschema:"description=Emoji Color Pref"`
	Firstname                       string `json:"firstname,omitempty" jsonschema:"description=Firstname"`
	Lastname                        string `json:"lastname,omitempty" jsonschema:"description=Lastname"`
	LocalNewsMegaphoneDismissStatus string `json:"local_news_megaphone_dismiss_status,omitempty" jsonschema:"description=Local News Megaphone Dismiss Status"`
	LocalNewsSubscriptionStatus     string `json:"local_news_subscription_status,omitempty" jsonschema:"description=Local News Subscription Status"`
	Name                            string `json:"name,omitempty" jsonschema:"description=Name"`
	Password                        string `json:"password,omitempty" jsonschema:"description=Password"`
}

// RegisterUserUpdateHandler registers the user_update tool
func RegisterUserUpdateHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"user_update",
		"Update a User Returns User.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"emoji_color_pref":{"description":"Emoji Color Pref","type":"integer"},"firstname":{"description":"Firstname","type":"string"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"lastname":{"description":"Lastname","type":"string"},"local_news_megaphone_dismiss_status":{"description":"Local News Megaphone Dismiss Status (enum: user_local_news_megaphone_dismiss_status)","enum":["NO","YES"],"type":"string"},"local_news_subscription_status":{"description":"Local News Subscription Status (enum: user_local_news_subscription_status)","enum":["STATUS_OFF","STATUS_ON"],"type":"string"},"name":{"description":"Name","type":"string"},"password":{"description":"Password","type":"string"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, UserUpdateHandler)
	return nil
}

// UserUpdateHandler handles the user_update tool
func UserUpdateHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args user_updateArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if args.EmojiColorPref > 0 {
		body["emoji_color_pref"] = args.EmojiColorPref
	}
	if args.Firstname != "" {
		body["firstname"] = args.Firstname
	}
	if args.Lastname != "" {
		body["lastname"] = args.Lastname
	}
	if args.LocalNewsMegaphoneDismissStatus != "" {
		body["local_news_megaphone_dismiss_status"] = args.LocalNewsMegaphoneDismissStatus
	}
	if args.LocalNewsSubscriptionStatus != "" {
		body["local_news_subscription_status"] = args.LocalNewsSubscriptionStatus
	}
	if args.Name != "" {
		body["name"] = args.Name
	}
	if args.Password != "" {
		body["password"] = args.Password
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
