// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// user_create_ad_studieArgs defines the typed arguments for user_create_ad_studie
type user_create_ad_studieArgs struct {
	ID                 string                   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Cells              []map[string]interface{} `json:"cells,omitempty" jsonschema:"description=Cells"`
	ClientBusiness     string                   `json:"client_business,omitempty" jsonschema:"description=Client Business"`
	ConfidenceLevel    float64                  `json:"confidence_level,omitempty" jsonschema:"description=Confidence Level"`
	CooldownStartTime  int                      `json:"cooldown_start_time,omitempty" jsonschema:"description=Cooldown Start Time"`
	Description        string                   `json:"description,omitempty" jsonschema:"description=Description"`
	EndTime            int                      `json:"end_time,omitempty" jsonschema:"description=End Time"`
	Name               string                   `json:"name,omitempty" jsonschema:"description=Name"`
	Objectives         []map[string]interface{} `json:"objectives,omitempty" jsonschema:"description=Objectives"`
	ObservationEndTime int                      `json:"observation_end_time,omitempty" jsonschema:"description=Observation End Time"`
	StartTime          int                      `json:"start_time,omitempty" jsonschema:"description=Start Time"`
	Type               string                   `json:"type,omitempty" jsonschema:"description=Type"`
	Viewers            []int                    `json:"viewers,omitempty" jsonschema:"description=Viewers"`
}

// RegisterUserCreateAdStudieHandler registers the user_create_ad_studie tool
func RegisterUserCreateAdStudieHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"user_create_ad_studie",
		"Associate ad_studies with this User Returns AdStudy.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"cells":{"description":"Cells","items":{"additionalProperties":true,"type":"object"},"type":"array"},"client_business":{"description":"Client Business","type":"string"},"confidence_level":{"description":"Confidence Level","type":"number"},"cooldown_start_time":{"description":"Cooldown Start Time","type":"integer"},"description":{"description":"Description","type":"string"},"end_time":{"description":"End Time","type":"integer"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"name":{"description":"Name","type":"string"},"objectives":{"description":"Objectives","items":{"additionalProperties":true,"type":"object"},"type":"array"},"observation_end_time":{"description":"Observation End Time","type":"integer"},"start_time":{"description":"Start Time","type":"integer"},"type":{"description":"Type (enum: userad_studies_type_enum_param)","enum":["BACKEND_AB_TESTING","CONTINUOUS_LIFT_CONFIG","GEO_LIFT","LIFT","SPLIT_TEST"],"type":"string"},"viewers":{"description":"Viewers","items":{"type":"integer"},"type":"array"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, UserCreateAdStudieHandler)
	return nil
}

// UserCreateAdStudieHandler handles the user_create_ad_studie tool
func UserCreateAdStudieHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args user_create_ad_studieArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/ad_studies", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if len(args.Cells) > 0 {
		body["cells"] = args.Cells
	}
	if args.ClientBusiness != "" {
		body["client_business"] = args.ClientBusiness
	}
	body["confidence_level"] = args.ConfidenceLevel
	if args.CooldownStartTime > 0 {
		body["cooldown_start_time"] = args.CooldownStartTime
	}
	if args.Description != "" {
		body["description"] = args.Description
	}
	if args.EndTime > 0 {
		body["end_time"] = args.EndTime
	}
	if args.Name != "" {
		body["name"] = args.Name
	}
	if len(args.Objectives) > 0 {
		body["objectives"] = args.Objectives
	}
	if args.ObservationEndTime > 0 {
		body["observation_end_time"] = args.ObservationEndTime
	}
	if args.StartTime > 0 {
		body["start_time"] = args.StartTime
	}
	if args.Type != "" {
		body["type"] = args.Type
	}
	if len(args.Viewers) > 0 {
		body["viewers"] = args.Viewers
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
