// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// user_create_accountArgs defines the typed arguments for user_create_account
type user_create_accountArgs struct {
	ID                       string                 `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	About                    string                 `json:"about,omitempty" jsonschema:"description=About"`
	Address                  string                 `json:"address,omitempty" jsonschema:"description=Address"`
	Category                 int                    `json:"category,omitempty" jsonschema:"description=Category"`
	CategoryEnum             string                 `json:"category_enum,omitempty" jsonschema:"description=Category Enum"`
	CategoryList             []string               `json:"category_list,omitempty" jsonschema:"description=Category List"`
	CityId                   string                 `json:"city_id,omitempty" jsonschema:"description=ID of the City,pattern=^[0-9]+$"`
	Coordinates              map[string]interface{} `json:"coordinates,omitempty" jsonschema:"description=Coordinates"`
	CoverPhoto               map[string]interface{} `json:"cover_photo,omitempty" jsonschema:"description=Cover Photo"`
	Description              string                 `json:"description,omitempty" jsonschema:"description=Description"`
	IgnoreCoordinateWarnings bool                   `json:"ignore_coordinate_warnings,omitempty" jsonschema:"description=Ignore Coordinate Warnings"`
	Location                 map[string]interface{} `json:"location,omitempty" jsonschema:"description=Location"`
	Name                     string                 `json:"name" jsonschema:"description=Name,required"`
	Phone                    string                 `json:"phone,omitempty" jsonschema:"description=Phone"`
	Picture                  string                 `json:"picture,omitempty" jsonschema:"description=Picture"`
	Website                  string                 `json:"website,omitempty" jsonschema:"description=Website"`
	Zip                      string                 `json:"zip,omitempty" jsonschema:"description=Zip"`
}

// RegisterUserCreateAccountHandler registers the user_create_account tool
func RegisterUserCreateAccountHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"user_create_account",
		"Create or update accounts for this User Required: name",
		json.RawMessage(`{"additionalProperties":false,"properties":{"about":{"description":"About","type":"string"},"address":{"description":"Address","type":"string"},"category":{"description":"Category","type":"integer"},"category_enum":{"description":"Category Enum","type":"string"},"category_list":{"description":"Category List","items":{"type":"string"},"type":"array"},"city_id":{"description":"ID of the City","pattern":"^[0-9]+$","type":"string"},"coordinates":{"additionalProperties":true,"description":"Coordinates","type":"object"},"cover_photo":{"additionalProperties":true,"description":"Cover Photo","type":"object"},"description":{"description":"Description","type":"string"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"ignore_coordinate_warnings":{"description":"Ignore Coordinate Warnings","type":"boolean"},"location":{"additionalProperties":true,"description":"Location","type":"object"},"name":{"description":"Name","type":"string"},"phone":{"description":"Phone","type":"string"},"picture":{"description":"Picture","type":"string"},"website":{"description":"Website","type":"string"},"zip":{"description":"Zip","type":"string"}},"required":["id","name"],"type":"object"}`),
	)

	s.AddTool(tool, UserCreateAccountHandler)
	return nil
}

// UserCreateAccountHandler handles the user_create_account tool
func UserCreateAccountHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args user_create_accountArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/accounts", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if args.About != "" {
		body["about"] = args.About
	}
	if args.Address != "" {
		body["address"] = args.Address
	}
	if args.Category > 0 {
		body["category"] = args.Category
	}
	if args.CategoryEnum != "" {
		body["category_enum"] = args.CategoryEnum
	}
	if len(args.CategoryList) > 0 {
		body["category_list"] = args.CategoryList
	}
	if args.CityId != "" {
		body["city_id"] = args.CityId
	}
	body["coordinates"] = args.Coordinates
	body["cover_photo"] = args.CoverPhoto
	if args.Description != "" {
		body["description"] = args.Description
	}
	body["ignore_coordinate_warnings"] = args.IgnoreCoordinateWarnings
	body["location"] = args.Location
	if args.Name != "" {
		body["name"] = args.Name
	}
	if args.Phone != "" {
		body["phone"] = args.Phone
	}
	if args.Picture != "" {
		body["picture"] = args.Picture
	}
	if args.Website != "" {
		body["website"] = args.Website
	}
	if args.Zip != "" {
		body["zip"] = args.Zip
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
