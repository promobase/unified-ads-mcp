// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// user_remove_access_tokensArgs defines the typed arguments for user_remove_access_tokens
type user_remove_access_tokensArgs struct {
	ID string `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
}

// RegisterUserRemoveAccessTokensHandler registers the user_remove_access_tokens tool
func RegisterUserRemoveAccessTokensHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"user_remove_access_tokens",
		"Remove access_tokens from this User",
		json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, UserRemoveAccessTokensHandler)
	return nil
}

// UserRemoveAccessTokensHandler handles the user_remove_access_tokens tool
func UserRemoveAccessTokensHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args user_remove_access_tokensArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/access_tokens", args.ID)
	// Prepare query parameters
	params := make(map[string]string)
	// ID is part of path, not query params

	result, err := common.MakeGraphAPIRequest(ctx, "DELETE", endpoint, params, nil)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
