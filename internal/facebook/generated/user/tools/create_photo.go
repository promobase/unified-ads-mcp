// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// user_create_photoArgs defines the typed arguments for user_create_photo
type user_create_photoArgs struct {
	ID                                    string                   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Aid                                   string                   `json:"aid,omitempty" jsonschema:"description=Aid"`
	AllowSphericalPhoto                   bool                     `json:"allow_spherical_photo,omitempty" jsonschema:"description=Allow Spherical Photo"`
	AltTextCustom                         string                   `json:"alt_text_custom,omitempty" jsonschema:"description=Alt Text Custom"`
	AndroidKeyHash                        string                   `json:"android_key_hash,omitempty" jsonschema:"description=Android Key Hash"`
	ApplicationId                         string                   `json:"application_id,omitempty" jsonschema:"description=ID of the Application,pattern=^[0-9]+$"`
	Attempt                               int                      `json:"attempt,omitempty" jsonschema:"description=Attempt"`
	AudienceExp                           bool                     `json:"audience_exp,omitempty" jsonschema:"description=Audience Exp"`
	BackdatedTime                         string                   `json:"backdated_time,omitempty" jsonschema:"description=Backdated Time,format=date-time"`
	BackdatedTimeGranularity              string                   `json:"backdated_time_granularity,omitempty" jsonschema:"description=Backdated Time Granularity"`
	Caption                               string                   `json:"caption,omitempty" jsonschema:"description=Caption"`
	ComposerSessionId                     string                   `json:"composer_session_id,omitempty" jsonschema:"description=ID of the Composer Session,pattern=^[0-9]+$"`
	DirectShareStatus                     int                      `json:"direct_share_status,omitempty" jsonschema:"description=Direct Share Status"`
	FeedTargeting                         map[string]interface{}   `json:"feed_targeting,omitempty" jsonschema:"description=Feed Targeting"`
	FilterType                            int                      `json:"filter_type,omitempty" jsonschema:"description=Filter Type"`
	FullResIsComingLater                  bool                     `json:"full_res_is_coming_later,omitempty" jsonschema:"description=Full Res Is Coming Later"`
	InitialViewHeadingOverrideDegrees     int                      `json:"initial_view_heading_override_degrees,omitempty" jsonschema:"description=Initial View Heading Override Degrees"`
	InitialViewPitchOverrideDegrees       int                      `json:"initial_view_pitch_override_degrees,omitempty" jsonschema:"description=Initial View Pitch Override Degrees"`
	InitialViewVerticalFovOverrideDegrees int                      `json:"initial_view_vertical_fov_override_degrees,omitempty" jsonschema:"description=Initial View Vertical Fov Override Degrees"`
	IosBundleId                           string                   `json:"ios_bundle_id,omitempty" jsonschema:"description=ID of the Ios Bundle,pattern=^[0-9]+$"`
	IsExplicitLocation                    bool                     `json:"is_explicit_location,omitempty" jsonschema:"description=Is Explicit Location"`
	IsExplicitPlace                       bool                     `json:"is_explicit_place,omitempty" jsonschema:"description=Is Explicit Place"`
	ManualPrivacy                         bool                     `json:"manual_privacy,omitempty" jsonschema:"description=Manual Privacy"`
	Message                               string                   `json:"message,omitempty" jsonschema:"description=Message"`
	Name                                  string                   `json:"name,omitempty" jsonschema:"description=Name"`
	NoStory                               bool                     `json:"no_story,omitempty" jsonschema:"description=No Story"`
	OfflineId                             int                      `json:"offline_id,omitempty" jsonschema:"description=ID of the Offline,pattern=^[0-9]+$"`
	OgActionTypeId                        string                   `json:"og_action_type_id,omitempty" jsonschema:"description=ID of the Og Action Type,pattern=^[0-9]+$"`
	OgIconId                              string                   `json:"og_icon_id,omitempty" jsonschema:"description=ID of the Og Icon,pattern=^[0-9]+$"`
	OgObjectId                            string                   `json:"og_object_id,omitempty" jsonschema:"description=ID of the Og Object,pattern=^[0-9]+$"`
	OgPhrase                              string                   `json:"og_phrase,omitempty" jsonschema:"description=Og Phrase"`
	OgSetProfileBadge                     bool                     `json:"og_set_profile_badge,omitempty" jsonschema:"description=Og Set Profile Badge"`
	OgSuggestionMechanism                 string                   `json:"og_suggestion_mechanism,omitempty" jsonschema:"description=Og Suggestion Mechanism"`
	Place                                 map[string]interface{}   `json:"place,omitempty" jsonschema:"description=Place"`
	Privacy                               string                   `json:"privacy,omitempty" jsonschema:"description=Privacy"`
	ProfileId                             int                      `json:"profile_id,omitempty" jsonschema:"description=ID of the Profile,pattern=^[0-9]+$"`
	ProvenanceInfo                        map[string]interface{}   `json:"provenance_info,omitempty" jsonschema:"description=Provenance Info"`
	ProxiedAppId                          string                   `json:"proxied_app_id,omitempty" jsonschema:"description=ID of the Proxied App,pattern=^[0-9]+$"`
	Published                             bool                     `json:"published,omitempty" jsonschema:"description=Published"`
	Qn                                    string                   `json:"qn,omitempty" jsonschema:"description=Qn"`
	ScheduledPublishTime                  int                      `json:"scheduled_publish_time,omitempty" jsonschema:"description=Scheduled Publish Time"`
	SphericalMetadata                     map[string]interface{}   `json:"spherical_metadata,omitempty" jsonschema:"description=Spherical Metadata"`
	SponsorId                             string                   `json:"sponsor_id,omitempty" jsonschema:"description=ID of the Sponsor,pattern=^[0-9]+$"`
	SponsorRelationship                   int                      `json:"sponsor_relationship,omitempty" jsonschema:"description=Sponsor Relationship"`
	Tags                                  []map[string]interface{} `json:"tags,omitempty" jsonschema:"description=Tags"`
	TargetId                              int                      `json:"target_id,omitempty" jsonschema:"description=ID of the Target,pattern=^[0-9]+$"`
	Targeting                             map[string]interface{}   `json:"targeting,omitempty" jsonschema:"description=Targeting"`
	TimeSinceOriginalPost                 int                      `json:"time_since_original_post,omitempty" jsonschema:"description=Time Since Original Post"`
	Uid                                   int                      `json:"uid,omitempty" jsonschema:"description=Uid"`
	UnpublishedContentType                string                   `json:"unpublished_content_type,omitempty" jsonschema:"description=Unpublished Content Type"`
	Url                                   string                   `json:"url,omitempty" jsonschema:"description=URL,format=uri"`
	UserSelectedTags                      bool                     `json:"user_selected_tags,omitempty" jsonschema:"description=User Selected Tags"`
	VaultImageId                          string                   `json:"vault_image_id,omitempty" jsonschema:"description=ID of the Vault Image,pattern=^[0-9]+$"`
}

// RegisterUserCreatePhotoHandler registers the user_create_photo tool
func RegisterUserCreatePhotoHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"user_create_photo",
		"Create or update photos for this User Returns Photo.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"aid":{"description":"Aid","type":"string"},"allow_spherical_photo":{"description":"Allow Spherical Photo","type":"boolean"},"alt_text_custom":{"description":"Alt Text Custom","type":"string"},"android_key_hash":{"description":"Android Key Hash","type":"string"},"application_id":{"description":"ID of the Application","pattern":"^[0-9]+$","type":"string"},"attempt":{"description":"Attempt","type":"integer"},"audience_exp":{"description":"Audience Exp","type":"boolean"},"backdated_time":{"description":"Backdated Time","type":"string"},"backdated_time_granularity":{"description":"Backdated Time Granularity (enum: userphotos_backdated_time_granularity_enum_param)","enum":["day","hour","min","month","none","year"],"type":"string"},"caption":{"description":"Caption","type":"string"},"composer_session_id":{"description":"ID of the Composer Session","pattern":"^[0-9]+$","type":"string"},"direct_share_status":{"description":"Direct Share Status","type":"integer"},"feed_targeting":{"additionalProperties":true,"description":"Feed Targeting","type":"object"},"filter_type":{"description":"Filter Type","type":"integer"},"full_res_is_coming_later":{"description":"Full Res Is Coming Later","type":"boolean"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"initial_view_heading_override_degrees":{"description":"Initial View Heading Override Degrees","type":"integer"},"initial_view_pitch_override_degrees":{"description":"Initial View Pitch Override Degrees","type":"integer"},"initial_view_vertical_fov_override_degrees":{"description":"Initial View Vertical Fov Override Degrees","type":"integer"},"ios_bundle_id":{"description":"ID of the Ios Bundle","pattern":"^[0-9]+$","type":"string"},"is_explicit_location":{"description":"Is Explicit Location","type":"boolean"},"is_explicit_place":{"description":"Is Explicit Place","type":"boolean"},"manual_privacy":{"description":"Manual Privacy","type":"boolean"},"message":{"description":"Message","type":"string"},"name":{"description":"Name","type":"string"},"no_story":{"description":"No Story","type":"boolean"},"offline_id":{"description":"ID of the Offline","pattern":"^[0-9]+$","type":"integer"},"og_action_type_id":{"description":"ID of the Og Action Type","pattern":"^[0-9]+$","type":"string"},"og_icon_id":{"description":"ID of the Og Icon","pattern":"^[0-9]+$","type":"string"},"og_object_id":{"description":"ID of the Og Object","pattern":"^[0-9]+$","type":"string"},"og_phrase":{"description":"Og Phrase","type":"string"},"og_set_profile_badge":{"description":"Og Set Profile Badge","type":"boolean"},"og_suggestion_mechanism":{"description":"Og Suggestion Mechanism","type":"string"},"place":{"additionalProperties":true,"description":"Place","type":"object"},"privacy":{"description":"Privacy","type":"string"},"profile_id":{"description":"ID of the Profile","pattern":"^[0-9]+$","type":"integer"},"provenance_info":{"description":"Provenance Info","type":"string"},"proxied_app_id":{"description":"ID of the Proxied App","pattern":"^[0-9]+$","type":"string"},"published":{"description":"Published","type":"boolean"},"qn":{"description":"Qn","type":"string"},"scheduled_publish_time":{"description":"Scheduled Publish Time","type":"integer"},"spherical_metadata":{"description":"Spherical Metadata","type":"string"},"sponsor_id":{"description":"ID of the Sponsor","pattern":"^[0-9]+$","type":"string"},"sponsor_relationship":{"description":"Sponsor Relationship","type":"integer"},"tags":{"description":"Tags","items":{"additionalProperties":true,"type":"object"},"type":"array"},"target_id":{"description":"ID of the Target","pattern":"^[0-9]+$","type":"integer"},"targeting":{"additionalProperties":true,"description":"Targeting","type":"object"},"time_since_original_post":{"description":"Time Since Original Post","type":"integer"},"uid":{"description":"Uid","type":"integer"},"unpublished_content_type":{"description":"Unpublished Content Type (enum: userphotos_unpublished_content_type_enum_param)","enum":["ADS_POST","DRAFT","INLINE_CREATED","PUBLISHED","REVIEWABLE_BRANDED_CONTENT","SCHEDULED","SCHEDULED_RECURRING"],"type":"string"},"url":{"description":"URL","format":"uri","type":"string"},"user_selected_tags":{"description":"User Selected Tags","type":"boolean"},"vault_image_id":{"description":"ID of the Vault Image","pattern":"^[0-9]+$","type":"string"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, UserCreatePhotoHandler)
	return nil
}

// UserCreatePhotoHandler handles the user_create_photo tool
func UserCreatePhotoHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args user_create_photoArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/photos", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if args.Aid != "" {
		body["aid"] = args.Aid
	}
	body["allow_spherical_photo"] = args.AllowSphericalPhoto
	if args.AltTextCustom != "" {
		body["alt_text_custom"] = args.AltTextCustom
	}
	if args.AndroidKeyHash != "" {
		body["android_key_hash"] = args.AndroidKeyHash
	}
	if args.ApplicationId != "" {
		body["application_id"] = args.ApplicationId
	}
	if args.Attempt > 0 {
		body["attempt"] = args.Attempt
	}
	body["audience_exp"] = args.AudienceExp
	if args.BackdatedTime != "" {
		body["backdated_time"] = args.BackdatedTime
	}
	if args.BackdatedTimeGranularity != "" {
		body["backdated_time_granularity"] = args.BackdatedTimeGranularity
	}
	if args.Caption != "" {
		body["caption"] = args.Caption
	}
	if args.ComposerSessionId != "" {
		body["composer_session_id"] = args.ComposerSessionId
	}
	if args.DirectShareStatus > 0 {
		body["direct_share_status"] = args.DirectShareStatus
	}
	body["feed_targeting"] = args.FeedTargeting
	if args.FilterType > 0 {
		body["filter_type"] = args.FilterType
	}
	body["full_res_is_coming_later"] = args.FullResIsComingLater
	if args.InitialViewHeadingOverrideDegrees > 0 {
		body["initial_view_heading_override_degrees"] = args.InitialViewHeadingOverrideDegrees
	}
	if args.InitialViewPitchOverrideDegrees > 0 {
		body["initial_view_pitch_override_degrees"] = args.InitialViewPitchOverrideDegrees
	}
	if args.InitialViewVerticalFovOverrideDegrees > 0 {
		body["initial_view_vertical_fov_override_degrees"] = args.InitialViewVerticalFovOverrideDegrees
	}
	if args.IosBundleId != "" {
		body["ios_bundle_id"] = args.IosBundleId
	}
	body["is_explicit_location"] = args.IsExplicitLocation
	body["is_explicit_place"] = args.IsExplicitPlace
	body["manual_privacy"] = args.ManualPrivacy
	if args.Message != "" {
		body["message"] = args.Message
	}
	if args.Name != "" {
		body["name"] = args.Name
	}
	body["no_story"] = args.NoStory
	if args.OfflineId > 0 {
		body["offline_id"] = args.OfflineId
	}
	if args.OgActionTypeId != "" {
		body["og_action_type_id"] = args.OgActionTypeId
	}
	if args.OgIconId != "" {
		body["og_icon_id"] = args.OgIconId
	}
	if args.OgObjectId != "" {
		body["og_object_id"] = args.OgObjectId
	}
	if args.OgPhrase != "" {
		body["og_phrase"] = args.OgPhrase
	}
	body["og_set_profile_badge"] = args.OgSetProfileBadge
	if args.OgSuggestionMechanism != "" {
		body["og_suggestion_mechanism"] = args.OgSuggestionMechanism
	}
	body["place"] = args.Place
	if args.Privacy != "" {
		body["privacy"] = args.Privacy
	}
	if args.ProfileId > 0 {
		body["profile_id"] = args.ProfileId
	}
	body["provenance_info"] = args.ProvenanceInfo
	if args.ProxiedAppId != "" {
		body["proxied_app_id"] = args.ProxiedAppId
	}
	body["published"] = args.Published
	if args.Qn != "" {
		body["qn"] = args.Qn
	}
	if args.ScheduledPublishTime > 0 {
		body["scheduled_publish_time"] = args.ScheduledPublishTime
	}
	body["spherical_metadata"] = args.SphericalMetadata
	if args.SponsorId != "" {
		body["sponsor_id"] = args.SponsorId
	}
	if args.SponsorRelationship > 0 {
		body["sponsor_relationship"] = args.SponsorRelationship
	}
	if len(args.Tags) > 0 {
		body["tags"] = args.Tags
	}
	if args.TargetId > 0 {
		body["target_id"] = args.TargetId
	}
	body["targeting"] = args.Targeting
	if args.TimeSinceOriginalPost > 0 {
		body["time_since_original_post"] = args.TimeSinceOriginalPost
	}
	if args.Uid > 0 {
		body["uid"] = args.Uid
	}
	if args.UnpublishedContentType != "" {
		body["unpublished_content_type"] = args.UnpublishedContentType
	}
	if args.Url != "" {
		body["url"] = args.Url
	}
	body["user_selected_tags"] = args.UserSelectedTags
	if args.VaultImageId != "" {
		body["vault_image_id"] = args.VaultImageId
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
