// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// user_list_postsArgs defines the typed arguments for user_list_posts
type user_list_postsArgs struct {
	ID            string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields        []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit         int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After         string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before        string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	IncludeHidden bool     `json:"include_hidden,omitempty" jsonschema:"description=Include Hidden"`
	Q             string   `json:"q,omitempty" jsonschema:"description=Q"`
	ShowExpired   bool     `json:"show_expired,omitempty" jsonschema:"description=Show Expired"`
	Since         string   `json:"since,omitempty" jsonschema:"description=Since,format=date-time"`
	Until         string   `json:"until,omitempty" jsonschema:"description=Until,format=date-time"`
	With          string   `json:"with,omitempty" jsonschema:"description=With"`
}

// RegisterUserListPostsHandler registers the user_list_posts tool
func RegisterUserListPostsHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"user_list_posts",
		"List posts for this User Returns Post.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"include_hidden":{"description":"Include Hidden","type":"boolean"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"q":{"description":"Q","type":"string"},"show_expired":{"description":"Show Expired","type":"boolean"},"since":{"description":"Since","type":"string"},"until":{"description":"Until","type":"string"},"with":{"description":"With","type":"string"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, UserListPostsHandler)
	return nil
}

// UserListPostsHandler handles the user_list_posts tool
func UserListPostsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args user_list_postsArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/posts", args.ID)
	// Prepare query parameters
	params := make(map[string]string)
	// ID is part of path, not query params
	if len(args.Fields) > 0 {
		params["fields"] = strings.Join(args.Fields, ",")
	}
	if args.Limit > 0 {
		params["limit"] = fmt.Sprintf("%d", args.Limit)
	}
	if args.After != "" {
		params["after"] = args.After
	}
	if args.Before != "" {
		params["before"] = args.Before
	}
	params["include_hidden"] = fmt.Sprintf("%v", args.IncludeHidden)
	if args.Q != "" {
		params["q"] = args.Q
	}
	params["show_expired"] = fmt.Sprintf("%v", args.ShowExpired)
	if args.Since != "" {
		params["since"] = args.Since
	}
	if args.Until != "" {
		params["until"] = args.Until
	}
	if args.With != "" {
		params["with"] = args.With
	}

	result, err := common.MakeGraphAPIRequest(ctx, "GET", endpoint, params, nil)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
