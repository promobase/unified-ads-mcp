// Code generated by Facebook Business API codegen. DO NOT EDIT.

package user

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolUser_post_notifications returns the MCP tool definition for user_post_notifications
func ToolUser_post_notifications() mcp.Tool {

	// Params object accepts: bot_message_payload_elements (string), filtering (list<usernotifications_filtering_enum_param>), href (Object), label (string), message (map), notif_ids (list<string>), payload (string), read (bool), ref (string), schedule_interval (unsigned int), seen (bool), template (Object), type (usernotifications_type_enum_param)
	return mcp.NewTool("user_post_notifications",
		mcp.WithDescription("POST notifications for User"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"bot_message_payload_elements": map[string]any{
					"type":        "string",
					"description": "bot_message_payload_elements parameter",
				},
				"filtering": map[string]any{
					"type":        "array",
					"description": "filtering parameter",
					"enum":        []string{"ema", "groups", "groups_social"},
					"items":       map[string]any{"type": "string"},
				},
				"href": map[string]any{
					"type":        "object",
					"description": "href parameter",
				},
				"label": map[string]any{
					"type":        "string",
					"description": "label parameter",
				},
				"message": map[string]any{
					"type":        "object",
					"description": "message parameter",
				},
				"notif_ids": map[string]any{
					"type":        "array",
					"description": "notif_ids parameter",
					"items":       map[string]any{"type": "string"},
				},
				"payload": map[string]any{
					"type":        "string",
					"description": "payload parameter",
				},
				"read": map[string]any{
					"type":        "boolean",
					"description": "read parameter",
				},
				"ref": map[string]any{
					"type":        "string",
					"description": "ref parameter",
				},
				"schedule_interval": map[string]any{
					"type":        "integer",
					"description": "schedule_interval parameter",
				},
				"seen": map[string]any{
					"type":        "boolean",
					"description": "seen parameter",
				},
				"template": map[string]any{
					"type":        "object",
					"description": "template parameter",
				},
				"type": map[string]any{
					"type":        "string",
					"description": "type parameter",
					"enum":        []string{"content_update", "generic"},
				},
			}),
			mcp.Description("Parameters object containing: bot_message_payload_elements (string), filtering (array<enum>) [ema, groups, groups_social], href (object), label (string), message (object), notif_ids (array<string>), payload (string), read (boolean), ref (string), schedule_interval (integer), seen (boolean), template (object), type (enum) [content_update, generic]"),
		),
	)
}

// HandleUser_post_notifications handles the user_post_notifications tool with context-based auth
func HandleUser_post_notifications(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := User_post_notifications(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute user_post_notifications: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// User_post_notifications performs POST notifications for User
func User_post_notifications(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "/notifications"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
