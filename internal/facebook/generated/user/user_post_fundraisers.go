// Code generated by Facebook Business API codegen. DO NOT EDIT.

package user

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolUser_post_fundraisers returns the MCP tool definition for user_post_fundraisers
func ToolUser_post_fundraisers() mcp.Tool {

	// Params object accepts: charity_id (string), cover_photo (file), currency (string), description (string), end_time (datetime), external_event_name (string), external_event_start_time (datetime), external_event_uri (string), external_fundraiser_uri (string), external_id (string), fundraiser_type (userfundraisers_fundraiser_type_enum_param), goal_amount (unsigned int), name (string), page_id (string)
	return mcp.NewTool("user_post_fundraisers",
		mcp.WithDescription("POST fundraisers for User"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"charity_id": map[string]any{
					"type":        "string",
					"description": "charity_id parameter",
				},
				"cover_photo": map[string]any{
					"type":        "string",
					"description": "cover_photo parameter",
				},
				"currency": map[string]any{
					"type":        "string",
					"description": "currency parameter",
					"required":    true,
				},
				"description": map[string]any{
					"type":        "string",
					"description": "description parameter",
					"required":    true,
				},
				"end_time": map[string]any{
					"type":        "string",
					"description": "end_time parameter",
					"required":    true,
				},
				"external_event_name": map[string]any{
					"type":        "string",
					"description": "external_event_name parameter",
				},
				"external_event_start_time": map[string]any{
					"type":        "string",
					"description": "external_event_start_time parameter",
				},
				"external_event_uri": map[string]any{
					"type":        "string",
					"description": "external_event_uri parameter",
				},
				"external_fundraiser_uri": map[string]any{
					"type":        "string",
					"description": "external_fundraiser_uri parameter",
				},
				"external_id": map[string]any{
					"type":        "string",
					"description": "external_id parameter",
					"required":    true,
				},
				"fundraiser_type": map[string]any{
					"type":        "string",
					"description": "fundraiser_type parameter",
					"required":    true,
					"enum":        []string{"person_for_charity"},
				},
				"goal_amount": map[string]any{
					"type":        "integer",
					"description": "goal_amount parameter",
					"required":    true,
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
					"required":    true,
				},
				"page_id": map[string]any{
					"type":        "string",
					"description": "page_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: charity_id (string), cover_photo (file), currency (string) [required], description (string) [required], end_time (datetime) [required], external_event_name (string), external_event_start_time (datetime), external_event_uri (string), external_fundraiser_uri (string), external_id (string) [required], fundraiser_type (enum) [person_for_charity] [required], goal_amount (integer) [required], name (string) [required], page_id (string)"),
		),
	)
}

// HandleUser_post_fundraisers handles the user_post_fundraisers tool with context-based auth
func HandleUser_post_fundraisers(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	// Parse required params object and expand into args
	val, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(val), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the API method
	result, err := User_post_fundraisers(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute user_post_fundraisers: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// User_post_fundraisers performs POST fundraisers for User
func User_post_fundraisers(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "/fundraisers"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
