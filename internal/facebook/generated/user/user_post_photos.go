// Code generated by Facebook Business API codegen. DO NOT EDIT.

package user

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolUser_post_photos returns the MCP tool definition for user_post_photos
func ToolUser_post_photos() mcp.Tool {

	// Params object accepts: aid (string), allow_spherical_photo (bool), alt_text_custom (string), android_key_hash (string), application_id (string), attempt (unsigned int), audience_exp (bool), backdated_time (datetime), backdated_time_granularity (userphotos_backdated_time_granularity_enum_param), caption (string), composer_session_id (string), direct_share_status (unsigned int), feed_targeting (Object), filter_type (unsigned int), full_res_is_coming_later (bool), initial_view_heading_override_degrees (unsigned int), initial_view_pitch_override_degrees (unsigned int), initial_view_vertical_fov_override_degrees (unsigned int), ios_bundle_id (string), is_explicit_location (bool), is_explicit_place (bool), manual_privacy (bool), message (string), name (string), no_story (bool), offline_id (unsigned int), og_action_type_id (string), og_icon_id (string), og_object_id (string), og_phrase (string), og_set_profile_badge (bool), og_suggestion_mechanism (string), place (Object), privacy (string), profile_id (int), provenance_info (map), proxied_app_id (string), published (bool), qn (string), scheduled_publish_time (unsigned int), spherical_metadata (map), sponsor_id (string), sponsor_relationship (unsigned int), tags (list<Object>), target_id (int), targeting (Object), time_since_original_post (unsigned int), uid (int), unpublished_content_type (userphotos_unpublished_content_type_enum_param), url (string), user_selected_tags (bool), vault_image_id (string)
	return mcp.NewTool("user_post_photos",
		mcp.WithDescription("POST photos for User"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"aid": map[string]any{
					"type":        "string",
					"description": "aid parameter",
				},
				"allow_spherical_photo": map[string]any{
					"type":        "boolean",
					"description": "allow_spherical_photo parameter",
				},
				"alt_text_custom": map[string]any{
					"type":        "string",
					"description": "alt_text_custom parameter",
				},
				"android_key_hash": map[string]any{
					"type":        "string",
					"description": "android_key_hash parameter",
				},
				"application_id": map[string]any{
					"type":        "string",
					"description": "application_id parameter",
				},
				"attempt": map[string]any{
					"type":        "integer",
					"description": "attempt parameter",
				},
				"audience_exp": map[string]any{
					"type":        "boolean",
					"description": "audience_exp parameter",
				},
				"backdated_time": map[string]any{
					"type":        "string",
					"description": "backdated_time parameter",
				},
				"backdated_time_granularity": map[string]any{
					"type":        "string",
					"description": "backdated_time_granularity parameter",
					"enum":        []string{"day", "hour", "min", "month", "none", "year"},
				},
				"caption": map[string]any{
					"type":        "string",
					"description": "caption parameter",
				},
				"composer_session_id": map[string]any{
					"type":        "string",
					"description": "composer_session_id parameter",
				},
				"direct_share_status": map[string]any{
					"type":        "integer",
					"description": "direct_share_status parameter",
				},
				"feed_targeting": map[string]any{
					"type":        "object",
					"description": "feed_targeting parameter",
				},
				"filter_type": map[string]any{
					"type":        "integer",
					"description": "filter_type parameter",
				},
				"full_res_is_coming_later": map[string]any{
					"type":        "boolean",
					"description": "full_res_is_coming_later parameter",
				},
				"initial_view_heading_override_degrees": map[string]any{
					"type":        "integer",
					"description": "initial_view_heading_override_degrees parameter",
				},
				"initial_view_pitch_override_degrees": map[string]any{
					"type":        "integer",
					"description": "initial_view_pitch_override_degrees parameter",
				},
				"initial_view_vertical_fov_override_degrees": map[string]any{
					"type":        "integer",
					"description": "initial_view_vertical_fov_override_degrees parameter",
				},
				"ios_bundle_id": map[string]any{
					"type":        "string",
					"description": "ios_bundle_id parameter",
				},
				"is_explicit_location": map[string]any{
					"type":        "boolean",
					"description": "is_explicit_location parameter",
				},
				"is_explicit_place": map[string]any{
					"type":        "boolean",
					"description": "is_explicit_place parameter",
				},
				"manual_privacy": map[string]any{
					"type":        "boolean",
					"description": "manual_privacy parameter",
				},
				"message": map[string]any{
					"type":        "string",
					"description": "message parameter",
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
				},
				"no_story": map[string]any{
					"type":        "boolean",
					"description": "no_story parameter",
				},
				"offline_id": map[string]any{
					"type":        "integer",
					"description": "offline_id parameter",
				},
				"og_action_type_id": map[string]any{
					"type":        "string",
					"description": "og_action_type_id parameter",
				},
				"og_icon_id": map[string]any{
					"type":        "string",
					"description": "og_icon_id parameter",
				},
				"og_object_id": map[string]any{
					"type":        "string",
					"description": "og_object_id parameter",
				},
				"og_phrase": map[string]any{
					"type":        "string",
					"description": "og_phrase parameter",
				},
				"og_set_profile_badge": map[string]any{
					"type":        "boolean",
					"description": "og_set_profile_badge parameter",
				},
				"og_suggestion_mechanism": map[string]any{
					"type":        "string",
					"description": "og_suggestion_mechanism parameter",
				},
				"place": map[string]any{
					"type":        "object",
					"description": "place parameter",
				},
				"privacy": map[string]any{
					"type":        "string",
					"description": "privacy parameter",
				},
				"profile_id": map[string]any{
					"type":        "integer",
					"description": "profile_id parameter",
				},
				"provenance_info": map[string]any{
					"type":        "object",
					"description": "provenance_info parameter",
				},
				"proxied_app_id": map[string]any{
					"type":        "string",
					"description": "proxied_app_id parameter",
				},
				"published": map[string]any{
					"type":        "boolean",
					"description": "published parameter",
				},
				"qn": map[string]any{
					"type":        "string",
					"description": "qn parameter",
				},
				"scheduled_publish_time": map[string]any{
					"type":        "integer",
					"description": "scheduled_publish_time parameter",
				},
				"spherical_metadata": map[string]any{
					"type":        "object",
					"description": "spherical_metadata parameter",
				},
				"sponsor_id": map[string]any{
					"type":        "string",
					"description": "sponsor_id parameter",
				},
				"sponsor_relationship": map[string]any{
					"type":        "integer",
					"description": "sponsor_relationship parameter",
				},
				"tags": map[string]any{
					"type":        "array",
					"description": "tags parameter",
					"items":       map[string]any{"type": "object"},
				},
				"target_id": map[string]any{
					"type":        "integer",
					"description": "target_id parameter",
				},
				"targeting": map[string]any{
					"type":        "object",
					"description": "targeting parameter",
				},
				"time_since_original_post": map[string]any{
					"type":        "integer",
					"description": "time_since_original_post parameter",
				},
				"uid": map[string]any{
					"type":        "integer",
					"description": "uid parameter",
				},
				"unpublished_content_type": map[string]any{
					"type":        "string",
					"description": "unpublished_content_type parameter",
					"enum":        []string{"ADS_POST", "DRAFT", "INLINE_CREATED", "PUBLISHED", "REVIEWABLE_BRANDED_CONTENT", "SCHEDULED", "SCHEDULED_RECURRING"},
				},
				"url": map[string]any{
					"type":        "string",
					"description": "url parameter",
				},
				"user_selected_tags": map[string]any{
					"type":        "boolean",
					"description": "user_selected_tags parameter",
				},
				"vault_image_id": map[string]any{
					"type":        "string",
					"description": "vault_image_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: aid (string), allow_spherical_photo (boolean), alt_text_custom (string), android_key_hash (string), application_id (string), attempt (integer), audience_exp (boolean), backdated_time (datetime), backdated_time_granularity (enum) [day, hour, min, month, none, ...], caption (string), composer_session_id (string), direct_share_status (integer), feed_targeting (object), filter_type (integer), full_res_is_coming_later (boolean), initial_view_heading_override_degrees (integer), initial_view_pitch_override_degrees (integer), initial_view_vertical_fov_override_degrees (integer), ios_bundle_id (string), is_explicit_location (boolean), is_explicit_place (boolean), manual_privacy (boolean), message (string), name (string), no_story (boolean), offline_id (integer), og_action_type_id (string), og_icon_id (string), og_object_id (string), og_phrase (string), og_set_profile_badge (boolean), og_suggestion_mechanism (string), place (object), privacy (string), profile_id (integer), provenance_info (object), proxied_app_id (string), published (boolean), qn (string), scheduled_publish_time (integer), spherical_metadata (object), sponsor_id (string), sponsor_relationship (integer), tags (array<object>), target_id (integer), targeting (object), time_since_original_post (integer), uid (integer), unpublished_content_type (enum) [ADS_POST, DRAFT, INLINE_CREATED, PUBLISHED, REVIEWABLE_BRANDED_CONTENT, ...], url (string), user_selected_tags (boolean), vault_image_id (string)"),
		),
	)
}

// HandleUser_post_photos handles the user_post_photos tool with context-based auth
func HandleUser_post_photos(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := User_post_photos(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute user_post_photos: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// User_post_photos performs POST photos for User
func User_post_photos(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/photos")

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
