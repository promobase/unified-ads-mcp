// Code generated by Facebook Business API codegen. DO NOT EDIT.

package user

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/shared"
)

// ToolUser_post_ad_studies returns the MCP tool definition for user_post_ad_studies
func ToolUser_post_ad_studies() mcp.Tool {
	
	// Params object accepts: cells (list<Object>), client_business (string), confidence_level (float), cooldown_start_time (int), description (string), end_time (int), name (string), objectives (list<Object>), observation_end_time (int), start_time (int), type (userad_studies_type_enum_param), viewers (list<int>)
	return mcp.NewTool("user_post_ad_studies",
		mcp.WithDescription("POST ad_studies for User"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"cells": map[string]any{
					"type": "array",
					"description": "cells parameter",
					"items": map[string]any{"type": "object"},
				},
				"client_business": map[string]any{
					"type": "string",
					"description": "client_business parameter",
				},
				"confidence_level": map[string]any{
					"type": "number",
					"description": "confidence_level parameter",
				},
				"cooldown_start_time": map[string]any{
					"type": "integer",
					"description": "cooldown_start_time parameter",
				},
				"description": map[string]any{
					"type": "string",
					"description": "description parameter",
				},
				"end_time": map[string]any{
					"type": "integer",
					"description": "end_time parameter",
				},
				"name": map[string]any{
					"type": "string",
					"description": "name parameter",
				},
				"objectives": map[string]any{
					"type": "array",
					"description": "objectives parameter",
					"items": map[string]any{"type": "object"},
				},
				"observation_end_time": map[string]any{
					"type": "integer",
					"description": "observation_end_time parameter",
				},
				"start_time": map[string]any{
					"type": "integer",
					"description": "start_time parameter",
				},
				"type": map[string]any{
					"type": "string",
					"description": "type parameter",
					"enum": []string{ "BACKEND_AB_TESTING", "CONTINUOUS_LIFT_CONFIG", "GEO_LIFT", "LIFT", "SPLIT_TEST" },
				},
				"viewers": map[string]any{
					"type": "array",
					"description": "viewers parameter",
					"items": map[string]any{"type": "integer"},
				},
			}),
			mcp.Description("Parameters object containing: cells (array<object>), client_business (string), confidence_level (number), cooldown_start_time (integer), description (string), end_time (integer), name (string), objectives (array<object>), observation_end_time (integer), start_time (integer), type (enum) [BACKEND_AB_TESTING, CONTINUOUS_LIFT_CONFIG, GEO_LIFT, LIFT, SPLIT_TEST], viewers (array<integer>)"),
		),
	)
}

// HandleUser_post_ad_studies handles the user_post_ad_studies tool with context-based auth
func HandleUser_post_ad_studies(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the API method
	result, err := User_post_ad_studies(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute user_post_ad_studies: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// User_post_ad_studies performs POST ad_studies for User
func User_post_ad_studies(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/ad_studies")
	
	urlParams := url.Values{}
	urlParams.Set("access_token", accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("params", fmt.Sprintf("%v", val))
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}