// Code generated by Facebook Business API codegen. DO NOT EDIT.

package user

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolUser_post_accounts returns the MCP tool definition for user_post_accounts
func ToolUser_post_accounts() mcp.Tool {

	// Params object accepts: about (string), address (string), category (int), category_enum (string), category_list (list<string>), city_id (string), coordinates (Object), cover_photo (Object), description (string), ignore_coordinate_warnings (bool), location (Object), name (string), phone (string), picture (string), website (string), zip (string)
	return mcp.NewTool("user_post_accounts",
		mcp.WithDescription("POST accounts for User"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"about": map[string]any{
					"type":        "string",
					"description": "about parameter",
				},
				"address": map[string]any{
					"type":        "string",
					"description": "address parameter",
				},
				"category": map[string]any{
					"type":        "integer",
					"description": "category parameter",
				},
				"category_enum": map[string]any{
					"type":        "string",
					"description": "category_enum parameter",
				},
				"category_list": map[string]any{
					"type":        "array",
					"description": "category_list parameter",
					"items":       map[string]any{"type": "string"},
				},
				"city_id": map[string]any{
					"type":        "string",
					"description": "city_id parameter",
				},
				"coordinates": map[string]any{
					"type":        "object",
					"description": "coordinates parameter",
				},
				"cover_photo": map[string]any{
					"type":        "object",
					"description": "cover_photo parameter",
				},
				"description": map[string]any{
					"type":        "string",
					"description": "description parameter",
				},
				"ignore_coordinate_warnings": map[string]any{
					"type":        "boolean",
					"description": "ignore_coordinate_warnings parameter",
				},
				"location": map[string]any{
					"type":        "object",
					"description": "location parameter",
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
					"required":    true,
				},
				"phone": map[string]any{
					"type":        "string",
					"description": "phone parameter",
				},
				"picture": map[string]any{
					"type":        "string",
					"description": "picture parameter",
				},
				"website": map[string]any{
					"type":        "string",
					"description": "website parameter",
				},
				"zip": map[string]any{
					"type":        "string",
					"description": "zip parameter",
				},
			}),
			mcp.Description("Parameters object containing: about (string), address (string), category (integer), category_enum (string), category_list (array<string>), city_id (string), coordinates (object), cover_photo (object), description (string), ignore_coordinate_warnings (boolean), location (object), name (string) [required], phone (string), picture (string), website (string), zip (string)"),
		),
	)
}

// HandleUser_post_accounts handles the user_post_accounts tool with context-based auth
func HandleUser_post_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	// Parse required params object and expand into args
	val, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(val), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the API method
	result, err := User_post_accounts(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute user_post_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// User_post_accounts performs POST accounts for User
func User_post_accounts(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "/accounts"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
