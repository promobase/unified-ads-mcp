// Code generated by Facebook Business API codegen. DO NOT EDIT.

package adaccount

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/shared"
)

// ToolAdaccount_post_reachfrequencypredictions returns the MCP tool definition for adaccount_post_reachfrequencypredictions
func ToolAdaccount_post_reachfrequencypredictions() mcp.Tool {
	
	// Params object accepts: action (adaccountreachfrequencypredictions_action_enum_param), ad_formats (list<map>), auction_entry_option_index (unsigned int), budget (unsigned int), buying_type (adaccountreachfrequencypredictions_buying_type_enum_param), campaign_group_id (string), day_parting_schedule (list<Object>), deal_id (string), destination_id (unsigned int), destination_ids (list<string>), end_time (unsigned int), exceptions (bool), existing_campaign_id (string), expiration_time (unsigned int), frequency_cap (unsigned int), grp_buying (bool), impression (unsigned int), instream_packages (list<adaccountreachfrequencypredictions_instream_packages_enum_param>), interval_frequency_cap_reset_period (unsigned int), is_balanced_frequency (bool), is_bonus_media (bool), is_conversion_goal (bool), is_full_view (bool), is_higher_average_frequency (bool), is_reach_and_frequency_io_buying (bool), is_reserved_buying (bool), num_curve_points (unsigned int), objective (string), optimization_goal (string), prediction_mode (unsigned int), reach (unsigned int), rf_prediction_id (string), rf_prediction_id_to_release (string), rf_prediction_id_to_share (string), start_time (unsigned int), stop_time (unsigned int), story_event_type (unsigned int), target_cpm (unsigned int), target_frequency (unsigned int), target_frequency_reset_period (unsigned int), target_spec (Targeting), video_view_length_constraint (unsigned int)
	return mcp.NewTool("adaccount_post_reachfrequencypredictions",
		mcp.WithDescription("POST reachfrequencypredictions for AdAccount"),
		mcp.WithString("account_id",
			mcp.Required(),
			mcp.Description("Facebook Ad Account ID (without 'act_' prefix)"),
		),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"action": map[string]any{
					"type": "string",
					"description": "action parameter",
					"enum": []string{ "cancel", "quote", "reserve" },
				},
				"ad_formats": map[string]any{
					"type": "array",
					"description": "ad_formats parameter",
					"items": map[string]any{"type": "object"},
				},
				"auction_entry_option_index": map[string]any{
					"type": "integer",
					"description": "auction_entry_option_index parameter",
				},
				"budget": map[string]any{
					"type": "integer",
					"description": "budget parameter",
				},
				"buying_type": map[string]any{
					"type": "string",
					"description": "buying_type parameter",
					"enum": []string{ "AUCTION", "DEPRECATED_REACH_BLOCK", "FIXED_CPM", "MIXED", "REACHBLOCK", "RESEARCH_POLL", "RESERVED" },
				},
				"campaign_group_id": map[string]any{
					"type": "string",
					"description": "campaign_group_id parameter",
				},
				"day_parting_schedule": map[string]any{
					"type": "array",
					"description": "day_parting_schedule parameter",
					"items": map[string]any{"type": "object"},
				},
				"deal_id": map[string]any{
					"type": "string",
					"description": "deal_id parameter",
				},
				"destination_id": map[string]any{
					"type": "integer",
					"description": "destination_id parameter",
				},
				"destination_ids": map[string]any{
					"type": "array",
					"description": "destination_ids parameter",
					"items": map[string]any{"type": "string"},
				},
				"end_time": map[string]any{
					"type": "integer",
					"description": "end_time parameter",
				},
				"exceptions": map[string]any{
					"type": "boolean",
					"description": "exceptions parameter",
				},
				"existing_campaign_id": map[string]any{
					"type": "string",
					"description": "existing_campaign_id parameter",
				},
				"expiration_time": map[string]any{
					"type": "integer",
					"description": "expiration_time parameter",
				},
				"frequency_cap": map[string]any{
					"type": "integer",
					"description": "frequency_cap parameter",
				},
				"grp_buying": map[string]any{
					"type": "boolean",
					"description": "grp_buying parameter",
				},
				"impression": map[string]any{
					"type": "integer",
					"description": "impression parameter",
				},
				"instream_packages": map[string]any{
					"type": "array",
					"description": "instream_packages parameter",
					"enum": []string{ "BEAUTY", "ENTERTAINMENT", "FOOD", "NORMAL", "PREMIUM", "REGULAR_ANIMALS_PETS", "REGULAR_FOOD", "REGULAR_GAMES", "REGULAR_POLITICS", "REGULAR_SPORTS", "REGULAR_STYLE", "REGULAR_TV_MOVIES", "SPANISH", "SPORTS" },
					"items": map[string]any{"type": "string"},
				},
				"interval_frequency_cap_reset_period": map[string]any{
					"type": "integer",
					"description": "interval_frequency_cap_reset_period parameter",
				},
				"is_balanced_frequency": map[string]any{
					"type": "boolean",
					"description": "is_balanced_frequency parameter",
				},
				"is_bonus_media": map[string]any{
					"type": "boolean",
					"description": "is_bonus_media parameter",
				},
				"is_conversion_goal": map[string]any{
					"type": "boolean",
					"description": "is_conversion_goal parameter",
				},
				"is_full_view": map[string]any{
					"type": "boolean",
					"description": "is_full_view parameter",
				},
				"is_higher_average_frequency": map[string]any{
					"type": "boolean",
					"description": "is_higher_average_frequency parameter",
				},
				"is_reach_and_frequency_io_buying": map[string]any{
					"type": "boolean",
					"description": "is_reach_and_frequency_io_buying parameter",
				},
				"is_reserved_buying": map[string]any{
					"type": "boolean",
					"description": "is_reserved_buying parameter",
				},
				"num_curve_points": map[string]any{
					"type": "integer",
					"description": "num_curve_points parameter",
				},
				"objective": map[string]any{
					"type": "string",
					"description": "objective parameter",
				},
				"optimization_goal": map[string]any{
					"type": "string",
					"description": "optimization_goal parameter",
				},
				"prediction_mode": map[string]any{
					"type": "integer",
					"description": "prediction_mode parameter",
				},
				"reach": map[string]any{
					"type": "integer",
					"description": "reach parameter",
				},
				"rf_prediction_id": map[string]any{
					"type": "string",
					"description": "rf_prediction_id parameter",
				},
				"rf_prediction_id_to_release": map[string]any{
					"type": "string",
					"description": "rf_prediction_id_to_release parameter",
				},
				"rf_prediction_id_to_share": map[string]any{
					"type": "string",
					"description": "rf_prediction_id_to_share parameter",
				},
				"start_time": map[string]any{
					"type": "integer",
					"description": "start_time parameter",
				},
				"stop_time": map[string]any{
					"type": "integer",
					"description": "stop_time parameter",
				},
				"story_event_type": map[string]any{
					"type": "integer",
					"description": "story_event_type parameter",
				},
				"target_cpm": map[string]any{
					"type": "integer",
					"description": "target_cpm parameter",
				},
				"target_frequency": map[string]any{
					"type": "integer",
					"description": "target_frequency parameter",
				},
				"target_frequency_reset_period": map[string]any{
					"type": "integer",
					"description": "target_frequency_reset_period parameter",
				},
				"target_spec": map[string]any{
					"type": "string",
					"description": "target_spec parameter",
				},
				"video_view_length_constraint": map[string]any{
					"type": "integer",
					"description": "video_view_length_constraint parameter",
				},
			}),
			mcp.Description("Parameters object containing: action (enum) [cancel, quote, reserve], ad_formats (array<object>), auction_entry_option_index (integer), budget (integer), buying_type (enum) [AUCTION, DEPRECATED_REACH_BLOCK, FIXED_CPM, MIXED, REACHBLOCK, ...], campaign_group_id (string), day_parting_schedule (array<object>), deal_id (string), destination_id (integer), destination_ids (array<string>), end_time (integer), exceptions (boolean), existing_campaign_id (string), expiration_time (integer), frequency_cap (integer), grp_buying (boolean), impression (integer), instream_packages (array<enum>) [BEAUTY, ENTERTAINMENT, FOOD, NORMAL, PREMIUM, ...], interval_frequency_cap_reset_period (integer), is_balanced_frequency (boolean), is_bonus_media (boolean), is_conversion_goal (boolean), is_full_view (boolean), is_higher_average_frequency (boolean), is_reach_and_frequency_io_buying (boolean), is_reserved_buying (boolean), num_curve_points (integer), objective (string), optimization_goal (string), prediction_mode (integer), reach (integer), rf_prediction_id (string), rf_prediction_id_to_release (string), rf_prediction_id_to_share (string), start_time (integer), stop_time (integer), story_event_type (integer), target_cpm (integer), target_frequency (integer), target_frequency_reset_period (integer), target_spec (Targeting), video_view_length_constraint (integer)"),
		),
	)
}

// HandleAdaccount_post_reachfrequencypredictions handles the adaccount_post_reachfrequencypredictions tool with context-based auth
func HandleAdaccount_post_reachfrequencypredictions(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: account_id
	account_id, err := request.RequireString("account_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter account_id: %v", err)), nil
	}
	args["account_id"] = account_id

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the API method
	result, err := Adaccount_post_reachfrequencypredictions(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adaccount_post_reachfrequencypredictions: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Adaccount_post_reachfrequencypredictions performs POST reachfrequencypredictions for AdAccount
func Adaccount_post_reachfrequencypredictions(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	// Extract account_id for URL construction
	accountId, ok := args["account_id"].(string)
	if !ok {
		return nil, fmt.Errorf("account_id is required for adaccount_post_reachfrequencypredictions")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%sreachfrequencypredictions", accountId)
	
	urlParams := url.Values{}
	urlParams.Set("access_token", accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}