// Code generated by Facebook Business API codegen. DO NOT EDIT.

package adaccount

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolAdaccount_post_adrules_library returns the MCP tool definition for adaccount_post_adrules_library
func ToolAdaccount_post_adrules_library() mcp.Tool {

	// Params object accepts: account_id (string), evaluation_spec (Object), execution_spec (Object), name (string), schedule_spec (Object), status (adaccountadrules_library_status_enum_param), ui_creation_source (adaccountadrules_library_ui_creation_source_enum_param)
	return mcp.NewTool("adaccount_post_adrules_library",
		mcp.WithDescription("POST adrules_library for AdAccount"),
		mcp.WithString("account_id",
			mcp.Required(),
			mcp.Description("Facebook Ad Account ID (without 'act_' prefix)"),
		),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"account_id": map[string]any{
					"type":        "string",
					"description": "account_id parameter",
				},
				"evaluation_spec": map[string]any{
					"type":        "object",
					"description": "evaluation_spec parameter",
					"required":    true,
				},
				"execution_spec": map[string]any{
					"type":        "object",
					"description": "execution_spec parameter",
					"required":    true,
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
					"required":    true,
				},
				"schedule_spec": map[string]any{
					"type":        "object",
					"description": "schedule_spec parameter",
				},
				"status": map[string]any{
					"type":        "string",
					"description": "status parameter",
					"enum":        []string{"DELETED", "DISABLED", "ENABLED", "HAS_ISSUES"},
				},
				"ui_creation_source": map[string]any{
					"type":        "string",
					"description": "ui_creation_source parameter",
					"enum":        []string{"AM_ACCOUNT_OVERVIEW_RECOMMENDATIONS", "AM_ACTIVITY_HISTORY_TABLE", "AM_AD_OBJECT_NAME_CARD", "AM_AMFE_L3_RECOMMENDATION", "AM_AUTOFLOW_GUIDANCE_CARD", "AM_AUTO_APPLY_WIDGET", "AM_EDITOR_CARD", "AM_INFO_CARD", "AM_NAME_CELL_DROPDOWN", "AM_OPTIMIZATION_TIP_GUIDANCE_CARD", "AM_PERFORMANCE_SUMMARY", "AM_RULE_LANDING_PAGE_BANNER", "AM_SYD_RESOLUTION_FLOW", "AM_SYD_RESOLUTION_FLOW_MODAL", "AM_TABLE_DELIVERY_COLUMN_POPOVER", "AM_TABLE_MORE_RULES_DROPDOWN", "AM_TABLE_TOGGLE_POPOVER", "AM_TOOLBAR_CREATE_RULE_DROPDOWN", "PE_CAMPAIGN_STRUCTURE_MENU", "PE_EDITOR_CARD", "PE_INFO_CARD", "PE_TOOLBAR_CREATE_RULE_DROPDOWN", "RULES_MANAGEMENT_PAGE_ACTION_DROPDOWN", "RULES_MANAGEMENT_PAGE_RULE_GROUP", "RULES_MANAGEMENT_PAGE_RULE_NAME", "RULES_MANAGEMENT_PAGE_TOP_NAV", "RULES_VIEW_ACTIVE_RULES_DIALOG", "RULE_CREATION_SUCCESS_DIALOG", "RULE_SYD_REDIRECT", "RULE_TEMPLATES_DIALOG"},
				},
			}),
			mcp.Description("Parameters object containing: account_id (string), evaluation_spec (object) [required], execution_spec (object) [required], name (string) [required], schedule_spec (object), status (enum) [DELETED, DISABLED, ENABLED, HAS_ISSUES], ui_creation_source (enum) [AM_ACCOUNT_OVERVIEW_RECOMMENDATIONS, AM_ACTIVITY_HISTORY_TABLE, AM_AD_OBJECT_NAME_CARD, AM_AMFE_L3_RECOMMENDATION, AM_AUTOFLOW_GUIDANCE_CARD, ...]"),
		),
	)
}

// HandleAdaccount_post_adrules_library handles the adaccount_post_adrules_library tool with context-based auth
func HandleAdaccount_post_adrules_library(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: account_id
	if err := utils.ParseRequiredString(request, "account_id", args); err != nil {
		return mcp.NewToolResultError(err.Error()), nil
	}

	// Required: params
	// Parse required params object and expand into args
	val, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(val), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the API method
	result, err := Adaccount_post_adrules_library(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adaccount_post_adrules_library: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Adaccount_post_adrules_library performs POST adrules_library for AdAccount
func Adaccount_post_adrules_library(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	// Extract account_id for URL construction
	accountId, ok := args["account_id"].(string)
	if !ok {
		return nil, fmt.Errorf("account_id is required for adaccount_post_adrules_library")
	}

	baseURL = fmt.Sprintf("%s/act_%s/adrules_library", FacebookGraphAPIBaseURL, accountId)

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{
		"account_id",
	}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
