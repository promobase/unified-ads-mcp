// Code generated by Facebook Business API codegen. DO NOT EDIT.

package adaccount

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/shared"
)

// ToolAdaccount_get_matched_search_applications returns the MCP tool definition for adaccount_get_matched_search_applications
func ToolAdaccount_get_matched_search_applications() mcp.Tool {
	// Available fields for AdAccountMatchedSearchApplicationsEdgeData: app_id, are_app_events_unavailable, icon_url, name, search_source_store, store, unique_id, url
	// Params object accepts: allow_incomplete_app (bool), app_store (adaccountmatched_search_applications_app_store_enum_param), app_store_country (string), business_id (string), is_skadnetwork_search (bool), only_apps_with_permission (bool), query_term (string)
	return mcp.NewTool("adaccount_get_matched_search_applications",
		mcp.WithDescription("GET matched_search_applications for AdAccount"),
		mcp.WithString("account_id",
			mcp.Required(),
			mcp.Description("Facebook Ad Account ID (without 'act_' prefix)"),
		),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"allow_incomplete_app": map[string]any{
					"type": "boolean",
					"description": "allow_incomplete_app parameter",
				},
				"app_store": map[string]any{
					"type": "string",
					"description": "app_store parameter",
					"required": true,
					"enum": []string{ "AMAZON_APP_STORE", "APK_MIRROR", "APK_MONK", "APK_PURE", "APTOIDE_A1_STORE", "BEMOBI_MOBILE_STORE", "DIGITAL_TURBINE_STORE", "DOES_NOT_EXIST", "FB_ANDROID_STORE", "FB_CANVAS", "FB_GAMEROOM", "GALAXY_STORE", "GOOGLE_PLAY", "INSTANT_GAME", "ITUNES", "ITUNES_IPAD", "NEON_ANDROID_STORE", "NONE", "OCULUS_APP_STORE", "OPPO", "ROKU_STORE", "UPTODOWN", "VIVO", "WINDOWS_10_STORE", "WINDOWS_STORE", "XIAOMI" },
				},
				"app_store_country": map[string]any{
					"type": "string",
					"description": "app_store_country parameter",
				},
				"business_id": map[string]any{
					"type": "string",
					"description": "business_id parameter",
				},
				"is_skadnetwork_search": map[string]any{
					"type": "boolean",
					"description": "is_skadnetwork_search parameter",
				},
				"only_apps_with_permission": map[string]any{
					"type": "boolean",
					"description": "only_apps_with_permission parameter",
				},
				"query_term": map[string]any{
					"type": "string",
					"description": "query_term parameter",
					"required": true,
				},
			}),
			mcp.Description("Parameters object containing: allow_incomplete_app (boolean), app_store (enum) [AMAZON_APP_STORE, APK_MIRROR, APK_MONK, APK_PURE, APTOIDE_A1_STORE, ...] [required], app_store_country (string), business_id (string), is_skadnetwork_search (boolean), only_apps_with_permission (boolean), query_term (string) [required]"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for AdAccountMatchedSearchApplicationsEdgeData objects. Available fields: app_id, are_app_events_unavailable, icon_url, name, search_source_store, store, unique_id, url"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleAdaccount_get_matched_search_applications handles the adaccount_get_matched_search_applications tool with context-based auth
func HandleAdaccount_get_matched_search_applications(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: account_id
	account_id, err := request.RequireString("account_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter account_id: %v", err)), nil
	}
	args["account_id"] = account_id

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the API method
	result, err := Adaccount_get_matched_search_applications(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adaccount_get_matched_search_applications: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Adaccount_get_matched_search_applications performs GET matched_search_applications for AdAccount
func Adaccount_get_matched_search_applications(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	// Extract account_id for URL construction
	accountId, ok := args["account_id"].(string)
	if !ok {
		return nil, fmt.Errorf("account_id is required for adaccount_get_matched_search_applications")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%smatched_search_applications", accountId)
	
	urlParams := url.Values{}
	urlParams.Set("access_token", accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}