// Code generated by Facebook Business API codegen. DO NOT EDIT.

package adaccount

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolAdaccount_post_recommendations returns the MCP tool definition for adaccount_post_recommendations
func ToolAdaccount_post_recommendations() mcp.Tool {

	// Params object accepts: asc_fragmentation_parameters (map), autoflow_parameters (map), fragmentation_parameters (map), music_parameters (map), recommendation_signature (string), scale_good_campaign_parameters (map)
	return mcp.NewTool("adaccount_post_recommendations",
		mcp.WithDescription("POST recommendations for AdAccount"),
		mcp.WithString("account_id",
			mcp.Required(),
			mcp.Description("Facebook Ad Account ID (without 'act_' prefix)"),
		),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"asc_fragmentation_parameters": map[string]any{
					"type":        "object",
					"description": "asc_fragmentation_parameters parameter",
				},
				"autoflow_parameters": map[string]any{
					"type":        "object",
					"description": "autoflow_parameters parameter",
				},
				"fragmentation_parameters": map[string]any{
					"type":        "object",
					"description": "fragmentation_parameters parameter",
				},
				"music_parameters": map[string]any{
					"type":        "object",
					"description": "music_parameters parameter",
				},
				"recommendation_signature": map[string]any{
					"type":        "string",
					"description": "recommendation_signature parameter",
					"required":    true,
				},
				"scale_good_campaign_parameters": map[string]any{
					"type":        "object",
					"description": "scale_good_campaign_parameters parameter",
				},
			}),
			mcp.Description("Parameters object containing: asc_fragmentation_parameters (object), autoflow_parameters (object), fragmentation_parameters (object), music_parameters (object), recommendation_signature (string) [required], scale_good_campaign_parameters (object)"),
		),
	)
}

// HandleAdaccount_post_recommendations handles the adaccount_post_recommendations tool with context-based auth
func HandleAdaccount_post_recommendations(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: account_id
	if err := utils.ParseRequiredString(request, "account_id", args); err != nil {
		return mcp.NewToolResultError(err.Error()), nil
	}

	// Required: params
	// Parse required params object and expand into args
	val, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(val), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the API method
	result, err := Adaccount_post_recommendations(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adaccount_post_recommendations: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Adaccount_post_recommendations performs POST recommendations for AdAccount
func Adaccount_post_recommendations(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	// Extract account_id for URL construction
	accountId, ok := args["account_id"].(string)
	if !ok {
		return nil, fmt.Errorf("account_id is required for adaccount_post_recommendations")
	}

	baseURL = fmt.Sprintf("%s/act_%s/recommendations", FacebookGraphAPIBaseURL, accountId)

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{
		"account_id",
	}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
