// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_create_account_controlArgs defines the typed arguments for ad_account_create_account_control
type ad_account_create_account_controlArgs struct {
	ID                string                 `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	AudienceControls  map[string]interface{} `json:"audience_controls" jsonschema:"description=Audience Controls,required"`
	PlacementControls map[string]interface{} `json:"placement_controls,omitempty" jsonschema:"description=Placement Controls"`
}

// RegisterAdAccountCreateAccountControlHandler registers the ad_account_create_account_control tool
func RegisterAdAccountCreateAccountControlHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_create_account_control",
		"Create or update account_controls for this AdAccount Returns AdAccountBusinessConstraints. Required: audience_controls",
		json.RawMessage(`{"additionalProperties":false,"properties":{"audience_controls":{"additionalProperties":true,"description":"Audience Controls","type":"object"},"id":{"description":"AdAccount ID","pattern":"^[0-9]+$","type":"string"},"placement_controls":{"additionalProperties":true,"description":"Placement Controls","type":"object"}},"required":["id","audience_controls"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountCreateAccountControlHandler)
	return nil
}

// AdAccountCreateAccountControlHandler handles the ad_account_create_account_control tool
func AdAccountCreateAccountControlHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_create_account_controlArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/account_controls", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	body["audience_controls"] = args.AudienceControls
	body["placement_controls"] = args.PlacementControls

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
