// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_update_adrules_libraryArgs defines the typed arguments for ad_account_update_adrules_library
type ad_account_update_adrules_libraryArgs struct {
	ID               string                 `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	AccountId        string                 `json:"account_id,omitempty" jsonschema:"description=ID of the Account,pattern=^[0-9]+$"`
	EvaluationSpec   map[string]interface{} `json:"evaluation_spec" jsonschema:"description=Evaluation Spec,required"`
	ExecutionSpec    map[string]interface{} `json:"execution_spec" jsonschema:"description=Execution Spec,required"`
	Name             string                 `json:"name" jsonschema:"description=Name,required"`
	ScheduleSpec     map[string]interface{} `json:"schedule_spec,omitempty" jsonschema:"description=Schedule Spec"`
	Status           string                 `json:"status,omitempty" jsonschema:"description=Status,enum=ACTIVE,enum=PAUSED,enum=DELETED,enum=ARCHIVED"`
	UiCreationSource string                 `json:"ui_creation_source,omitempty" jsonschema:"description=Ui Creation Source"`
}

// RegisterAdAccountUpdateAdrulesLibraryHandler registers the ad_account_update_adrules_library tool
func RegisterAdAccountUpdateAdrulesLibraryHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_update_adrules_library",
		"Associate adrules_library with this AdAccount Returns AdRule. Required: evaluation_spec, execution_spec, name",
		json.RawMessage(`{"additionalProperties":false,"properties":{"account_id":{"description":"ID of the Account","pattern":"^[0-9]+$","type":"string"},"evaluation_spec":{"additionalProperties":true,"description":"Evaluation Spec","type":"object"},"execution_spec":{"additionalProperties":true,"description":"Execution Spec","type":"object"},"id":{"description":"AdAccount ID","pattern":"^[0-9]+$","type":"string"},"name":{"description":"Name","type":"string"},"schedule_spec":{"additionalProperties":true,"description":"Schedule Spec","type":"object"},"status":{"description":"Status (enum: adaccountadrules_library_status_enum_param)","enum":["DELETED","DISABLED","ENABLED","HAS_ISSUES"],"type":"string"},"ui_creation_source":{"description":"Ui Creation Source (enum: adaccountadrules_library_ui_creation_source_enum_param)","enum":["AM_ACCOUNT_OVERVIEW_RECOMMENDATIONS","AM_ACTIVITY_HISTORY_TABLE","AM_AD_OBJECT_NAME_CARD","AM_AMFE_L3_RECOMMENDATION","AM_AUTOFLOW_GUIDANCE_CARD","AM_AUTO_APPLY_WIDGET","AM_EDITOR_CARD","AM_INFO_CARD","AM_NAME_CELL_DROPDOWN","AM_OPTIMIZATION_TIP_GUIDANCE_CARD","AM_PERFORMANCE_SUMMARY","AM_RULE_LANDING_PAGE_BANNER","AM_SYD_RESOLUTION_FLOW","AM_SYD_RESOLUTION_FLOW_MODAL","AM_TABLE_DELIVERY_COLUMN_POPOVER","AM_TABLE_MORE_RULES_DROPDOWN","AM_TABLE_TOGGLE_POPOVER","AM_TOOLBAR_CREATE_RULE_DROPDOWN","PE_CAMPAIGN_STRUCTURE_MENU","PE_EDITOR_CARD","PE_INFO_CARD","PE_TOOLBAR_CREATE_RULE_DROPDOWN","RULES_MANAGEMENT_PAGE_ACTION_DROPDOWN","RULES_MANAGEMENT_PAGE_RULE_GROUP","RULES_MANAGEMENT_PAGE_RULE_NAME","RULES_MANAGEMENT_PAGE_TOP_NAV","RULES_VIEW_ACTIVE_RULES_DIALOG","RULE_CREATION_SUCCESS_DIALOG","RULE_SYD_REDIRECT","RULE_TEMPLATES_DIALOG"],"type":"string"}},"required":["id","evaluation_spec","execution_spec","name"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountUpdateAdrulesLibraryHandler)
	return nil
}

// AdAccountUpdateAdrulesLibraryHandler handles the ad_account_update_adrules_library tool
func AdAccountUpdateAdrulesLibraryHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_update_adrules_libraryArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/adrules_library", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if args.AccountId != "" {
		body["account_id"] = args.AccountId
	}
	body["evaluation_spec"] = args.EvaluationSpec
	body["execution_spec"] = args.ExecutionSpec
	if args.Name != "" {
		body["name"] = args.Name
	}
	body["schedule_spec"] = args.ScheduleSpec
	if args.Status != "" {
		body["status"] = args.Status
	}
	if args.UiCreationSource != "" {
		body["ui_creation_source"] = args.UiCreationSource
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
