// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_remove_campaignsArgs defines the typed arguments for ad_account_remove_campaigns
type ad_account_remove_campaignsArgs struct {
	ID             string `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	BeforeDate     string `json:"before_date,omitempty" jsonschema:"description=Before Date,format=date-time"`
	DeleteOffset   int    `json:"delete_offset,omitempty" jsonschema:"description=Delete Offset"`
	DeleteStrategy string `json:"delete_strategy" jsonschema:"description=Delete Strategy,required"`
	ObjectCount    int    `json:"object_count,omitempty" jsonschema:"description=Object Count"`
}

// RegisterAdAccountRemoveCampaignsHandler registers the ad_account_remove_campaigns tool
func RegisterAdAccountRemoveCampaignsHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_remove_campaigns",
		"Remove campaigns from this AdAccount Required: delete_strategy (enum)",
		json.RawMessage(`{"additionalProperties":false,"properties":{"before_date":{"description":"Before Date","type":"string"},"delete_offset":{"description":"Delete Offset","type":"integer"},"delete_strategy":{"description":"Delete Strategy (enum: adaccountcampaigns_delete_strategy_enum_param)","enum":["DELETE_ANY","DELETE_ARCHIVED_BEFORE","DELETE_OLDEST"],"type":"string"},"id":{"description":"AdAccount ID","pattern":"^[0-9]+$","type":"string"},"object_count":{"description":"Object Count","type":"integer"}},"required":["id","delete_strategy"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountRemoveCampaignsHandler)
	return nil
}

// AdAccountRemoveCampaignsHandler handles the ad_account_remove_campaigns tool
func AdAccountRemoveCampaignsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_remove_campaignsArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/campaigns", args.ID)
	// Prepare query parameters
	params := make(map[string]string)
	// ID is part of path, not query params
	if args.BeforeDate != "" {
		params["before_date"] = args.BeforeDate
	}
	if args.DeleteOffset > 0 {
		params["delete_offset"] = fmt.Sprintf("%d", args.DeleteOffset)
	}
	if args.DeleteStrategy != "" {
		params["delete_strategy"] = args.DeleteStrategy
	}
	if args.ObjectCount > 0 {
		params["object_count"] = fmt.Sprintf("%d", args.ObjectCount)
	}

	result, err := common.MakeGraphAPIRequest(ctx, "DELETE", endpoint, params, nil)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
