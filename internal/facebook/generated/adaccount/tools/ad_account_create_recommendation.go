// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_create_recommendationArgs defines the typed arguments for ad_account_create_recommendation
type ad_account_create_recommendationArgs struct {
	AscFragmentationParameters  map[string]interface{} `json:"asc_fragmentation_parameters,omitempty" jsonschema:"description=Asc Fragmentation Parameters"`
	AutoflowParameters          map[string]interface{} `json:"autoflow_parameters,omitempty" jsonschema:"description=Autoflow Parameters"`
	FragmentationParameters     map[string]interface{} `json:"fragmentation_parameters,omitempty" jsonschema:"description=Fragmentation Parameters"`
	MusicParameters             map[string]interface{} `json:"music_parameters,omitempty" jsonschema:"description=Music Parameters"`
	RecommendationSignature     string                 `json:"recommendation_signature" jsonschema:"description=Recommendation Signature,required"`
	ScaleGoodCampaignParameters map[string]interface{} `json:"scale_good_campaign_parameters,omitempty" jsonschema:"description=Scale Good Campaign Parameters"`
}

// RegisterAdAccountCreateRecommendationHandler registers the ad_account_create_recommendation tool
func RegisterAdAccountCreateRecommendationHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_create_recommendation",
		"Create or update recommendations for this AdAccount Returns AdAccountRecommendations. Required: recommendation_signature",
		json.RawMessage(`{"additionalProperties":false,"properties":{"asc_fragmentation_parameters":{"description":"Asc Fragmentation Parameters","type":"string"},"autoflow_parameters":{"description":"Autoflow Parameters","type":"string"},"fragmentation_parameters":{"description":"Fragmentation Parameters","type":"string"},"music_parameters":{"description":"Music Parameters","type":"string"},"recommendation_signature":{"description":"Recommendation Signature","type":"string"},"scale_good_campaign_parameters":{"description":"Scale Good Campaign Parameters","type":"string"}},"required":["recommendation_signature"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountCreateRecommendationHandler)
	return nil
}

// AdAccountCreateRecommendationHandler handles the ad_account_create_recommendation tool
func AdAccountCreateRecommendationHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_create_recommendationArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := "/recommendations"
	// Prepare request body
	body := make(map[string]interface{})
	body["asc_fragmentation_parameters"] = args.AscFragmentationParameters
	body["autoflow_parameters"] = args.AutoflowParameters
	body["fragmentation_parameters"] = args.FragmentationParameters
	body["music_parameters"] = args.MusicParameters
	if args.RecommendationSignature != "" {
		body["recommendation_signature"] = args.RecommendationSignature
	}
	body["scale_good_campaign_parameters"] = args.ScaleGoodCampaignParameters

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
