// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_list_activitiesArgs defines the typed arguments for ad_account_list_activities
type ad_account_list_activitiesArgs struct {
	ID          string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields      []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit       int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After       string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before      string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AddChildren bool     `json:"add_children,omitempty" jsonschema:"description=Add Children"`
	BusinessId  string   `json:"business_id,omitempty" jsonschema:"description=ID of the Business,pattern=^[0-9]+$"`
	Category    string   `json:"category,omitempty" jsonschema:"description=Category"`
	DataSource  string   `json:"data_source,omitempty" jsonschema:"description=Data Source"`
	ExtraOids   []string `json:"extra_oids,omitempty" jsonschema:"description=Extra Oids"`
	Oid         string   `json:"oid,omitempty" jsonschema:"description=Oid"`
	Since       string   `json:"since,omitempty" jsonschema:"description=Since,format=date-time"`
	Uid         int      `json:"uid,omitempty" jsonschema:"description=Uid"`
	Until       string   `json:"until,omitempty" jsonschema:"description=Until,format=date-time"`
}

// RegisterAdAccountListActivitiesHandler registers the ad_account_list_activities tool
func RegisterAdAccountListActivitiesHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_list_activities",
		"List activities for this AdAccount Returns AdActivity.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"add_children":{"description":"Add Children","type":"boolean"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business_id":{"description":"ID of the Business","pattern":"^[0-9]+$","type":"string"},"category":{"description":"Category (enum: adaccountactivities_category_enum_param)","enum":["ACCOUNT","AD","AD_KEYWORDS","AD_SET","AUDIENCE","BID","BUDGET","CAMPAIGN","DATE","STATUS","TARGETING"],"type":"string"},"data_source":{"description":"Data Source (enum: adaccountactivities_data_source_enum_param)","enum":["CALYPSO","TAO","TAO_AD_ACCOUNT","TAO_AD_STATUS"],"type":"string"},"extra_oids":{"description":"Extra Oids","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"oid":{"description":"Oid","type":"string"},"since":{"description":"Since","type":"string"},"uid":{"description":"Uid","type":"integer"},"until":{"description":"Until","type":"string"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountListActivitiesHandler)
	return nil
}

// AdAccountListActivitiesHandler handles the ad_account_list_activities tool
func AdAccountListActivitiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_list_activitiesArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/activities", args.ID)
	// Prepare query parameters
	params := make(map[string]string)
	// ID is part of path, not query params
	if len(args.Fields) > 0 {
		params["fields"] = strings.Join(args.Fields, ",")
	}
	if args.Limit > 0 {
		params["limit"] = fmt.Sprintf("%d", args.Limit)
	}
	if args.After != "" {
		params["after"] = args.After
	}
	if args.Before != "" {
		params["before"] = args.Before
	}
	params["add_children"] = fmt.Sprintf("%v", args.AddChildren)
	if args.BusinessId != "" {
		params["business_id"] = args.BusinessId
	}
	if args.Category != "" {
		params["category"] = args.Category
	}
	if args.DataSource != "" {
		params["data_source"] = args.DataSource
	}
	if len(args.ExtraOids) > 0 {
		params["extra_oids"] = strings.Join(args.ExtraOids, ",")
	}
	if args.Oid != "" {
		params["oid"] = args.Oid
	}
	if args.Since != "" {
		params["since"] = args.Since
	}
	if args.Uid > 0 {
		params["uid"] = fmt.Sprintf("%d", args.Uid)
	}
	if args.Until != "" {
		params["until"] = args.Until
	}

	result, err := common.MakeGraphAPIRequest(ctx, "GET", endpoint, params, nil)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
