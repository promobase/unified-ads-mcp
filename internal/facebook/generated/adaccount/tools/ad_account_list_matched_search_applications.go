// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_list_matched_search_applicationsArgs defines the typed arguments for ad_account_list_matched_search_applications
type ad_account_list_matched_search_applicationsArgs struct {
	Fields                 []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit                  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After                  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before                 string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AllowIncompleteApp     bool     `json:"allow_incomplete_app,omitempty" jsonschema:"description=Allow Incomplete App"`
	AppStore               string   `json:"app_store" jsonschema:"description=App Store,required"`
	AppStoreCountry        string   `json:"app_store_country,omitempty" jsonschema:"description=App Store Country"`
	BusinessId             string   `json:"business_id,omitempty" jsonschema:"description=ID of the Business,pattern=^[0-9]+$"`
	IsSkadnetworkSearch    bool     `json:"is_skadnetwork_search,omitempty" jsonschema:"description=Is Skadnetwork Search"`
	OnlyAppsWithPermission bool     `json:"only_apps_with_permission,omitempty" jsonschema:"description=Only Apps With Permission"`
	QueryTerm              string   `json:"query_term" jsonschema:"description=Query Term,required"`
}

// RegisterAdAccountListMatchedSearchApplicationsHandler registers the ad_account_list_matched_search_applications tool
func RegisterAdAccountListMatchedSearchApplicationsHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_list_matched_search_applications",
		"List matched_search_applications for this AdAccount Returns AdAccountMatchedSearchApplicationsEdgeData. Required: app_store (enum), query_term",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"allow_incomplete_app":{"description":"Allow Incomplete App","type":"boolean"},"app_store":{"description":"App Store (enum: adaccountmatched_search_applications_app_store_enum_param)","enum":["AMAZON_APP_STORE","APK_MIRROR","APK_MONK","APK_PURE","APTOIDE_A1_STORE","BEMOBI_MOBILE_STORE","DIGITAL_TURBINE_STORE","DOES_NOT_EXIST","FB_ANDROID_STORE","FB_CANVAS","FB_GAMEROOM","GALAXY_STORE","GOOGLE_PLAY","INSTANT_GAME","ITUNES","ITUNES_IPAD","NEON_ANDROID_STORE","NONE","OCULUS_APP_STORE","OPPO","ROKU_STORE","UPTODOWN","VIVO","WINDOWS_10_STORE","WINDOWS_STORE","XIAOMI"],"type":"string"},"app_store_country":{"description":"App Store Country","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business_id":{"description":"ID of the Business","pattern":"^[0-9]+$","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"is_skadnetwork_search":{"description":"Is Skadnetwork Search","type":"boolean"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"only_apps_with_permission":{"description":"Only Apps With Permission","type":"boolean"},"query_term":{"description":"Query Term","type":"string"}},"required":["app_store","query_term"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountListMatchedSearchApplicationsHandler)
	return nil
}

// AdAccountListMatchedSearchApplicationsHandler handles the ad_account_list_matched_search_applications tool
func AdAccountListMatchedSearchApplicationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_list_matched_search_applicationsArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := "/matched_search_applications"
	// Prepare query parameters
	params := make(map[string]string)
	if len(args.Fields) > 0 {
		params["fields"] = strings.Join(args.Fields, ",")
	}
	if args.Limit > 0 {
		params["limit"] = fmt.Sprintf("%d", args.Limit)
	}
	if args.After != "" {
		params["after"] = args.After
	}
	if args.Before != "" {
		params["before"] = args.Before
	}
	params["allow_incomplete_app"] = fmt.Sprintf("%v", args.AllowIncompleteApp)
	if args.AppStore != "" {
		params["app_store"] = args.AppStore
	}
	if args.AppStoreCountry != "" {
		params["app_store_country"] = args.AppStoreCountry
	}
	if args.BusinessId != "" {
		params["business_id"] = args.BusinessId
	}
	params["is_skadnetwork_search"] = fmt.Sprintf("%v", args.IsSkadnetworkSearch)
	params["only_apps_with_permission"] = fmt.Sprintf("%v", args.OnlyAppsWithPermission)
	if args.QueryTerm != "" {
		params["query_term"] = args.QueryTerm
	}

	result, err := common.MakeGraphAPIRequest(ctx, "GET", endpoint, params, nil)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
