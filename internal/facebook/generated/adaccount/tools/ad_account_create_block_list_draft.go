// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_create_block_list_draftArgs defines the typed arguments for ad_account_create_block_list_draft
type ad_account_create_block_list_draftArgs struct {
	ID                string      `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	PublisherUrlsFile interface{} `json:"publisher_urls_file" jsonschema:"description=Publisher Urls File,required"`
}

// RegisterAdAccountCreateBlockListDraftHandler registers the ad_account_create_block_list_draft tool
func RegisterAdAccountCreateBlockListDraftHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_create_block_list_draft",
		"Create or update block_list_drafts for this AdAccount Returns AdAccount. Required: publisher_urls_file",
		json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"AdAccount ID","pattern":"^[0-9]+$","type":"string"},"publisher_urls_file":{"description":"Publisher Urls File","type":"string"}},"required":["id","publisher_urls_file"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountCreateBlockListDraftHandler)
	return nil
}

// AdAccountCreateBlockListDraftHandler handles the ad_account_create_block_list_draft tool
func AdAccountCreateBlockListDraftHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_create_block_list_draftArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/block_list_drafts", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	body["publisher_urls_file"] = args.PublisherUrlsFile

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
