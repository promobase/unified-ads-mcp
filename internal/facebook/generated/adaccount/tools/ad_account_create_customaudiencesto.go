// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_create_customaudiencestoArgs defines the typed arguments for ad_account_create_customaudiencesto
type ad_account_create_customaudiencestoArgs struct {
	ID         string `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	BusinessId string `json:"business_id,omitempty" jsonschema:"description=ID of the Business,pattern=^[0-9]+$"`
	TosId      string `json:"tos_id" jsonschema:"description=ID of the Tos,required,pattern=^[0-9]+$"`
}

// RegisterAdAccountCreateCustomaudiencestoHandler registers the ad_account_create_customaudiencesto tool
func RegisterAdAccountCreateCustomaudiencestoHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_create_customaudiencesto",
		"Create or update customaudiencestos for this AdAccount Returns AdAccount. Required: tos_id",
		json.RawMessage(`{"additionalProperties":false,"properties":{"business_id":{"description":"ID of the Business","pattern":"^[0-9]+$","type":"string"},"id":{"description":"AdAccount ID","pattern":"^[0-9]+$","type":"string"},"tos_id":{"description":"ID of the Tos","pattern":"^[0-9]+$","type":"string"}},"required":["id","tos_id"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountCreateCustomaudiencestoHandler)
	return nil
}

// AdAccountCreateCustomaudiencestoHandler handles the ad_account_create_customaudiencesto tool
func AdAccountCreateCustomaudiencestoHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_create_customaudiencestoArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/customaudiencestos", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if args.BusinessId != "" {
		body["business_id"] = args.BusinessId
	}
	if args.TosId != "" {
		body["tos_id"] = args.TosId
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
