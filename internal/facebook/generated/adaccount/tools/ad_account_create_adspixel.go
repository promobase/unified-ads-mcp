// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_create_adspixelArgs defines the typed arguments for ad_account_create_adspixel
type ad_account_create_adspixelArgs struct {
	ID   string `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Name string `json:"name,omitempty" jsonschema:"description=Name"`
}

// RegisterAdAccountCreateAdspixelHandler registers the ad_account_create_adspixel tool
func RegisterAdAccountCreateAdspixelHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_create_adspixel",
		"Associate adspixels with this AdAccount Returns AdsPixel.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"AdAccount ID","pattern":"^[0-9]+$","type":"string"},"name":{"description":"Name","type":"string"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountCreateAdspixelHandler)
	return nil
}

// AdAccountCreateAdspixelHandler handles the ad_account_create_adspixel tool
func AdAccountCreateAdspixelHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_create_adspixelArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/adspixels", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if args.Name != "" {
		body["name"] = args.Name
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
