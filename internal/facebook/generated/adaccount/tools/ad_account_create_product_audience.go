// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_create_product_audienceArgs defines the typed arguments for ad_account_create_product_audience
type ad_account_create_product_audienceArgs struct {
	ID                   string                   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	AllowedDomains       []string                 `json:"allowed_domains,omitempty" jsonschema:"description=Allowed Domains"`
	AssociatedAudienceId int                      `json:"associated_audience_id,omitempty" jsonschema:"description=ID of the Associated Audience,pattern=^[0-9]+$"`
	ClaimObjective       string                   `json:"claim_objective,omitempty" jsonschema:"description=Claim Objective"`
	ContentType          string                   `json:"content_type,omitempty" jsonschema:"description=Content Type"`
	CreationParams       map[string]interface{}   `json:"creation_params,omitempty" jsonschema:"description=Creation Params"`
	Description          string                   `json:"description,omitempty" jsonschema:"description=Description"`
	EnableFetchOrCreate  bool                     `json:"enable_fetch_or_create,omitempty" jsonschema:"description=Enable Fetch Or Create"`
	EventSourceGroup     string                   `json:"event_source_group,omitempty" jsonschema:"description=Event Source Group"`
	EventSources         []map[string]interface{} `json:"event_sources,omitempty" jsonschema:"description=Event Sources"`
	Exclusions           []map[string]interface{} `json:"exclusions,omitempty" jsonschema:"description=Exclusions"`
	Inclusions           []map[string]interface{} `json:"inclusions,omitempty" jsonschema:"description=Inclusions"`
	IsSnapshot           bool                     `json:"is_snapshot,omitempty" jsonschema:"description=Is Snapshot"`
	IsValueBased         bool                     `json:"is_value_based,omitempty" jsonschema:"description=Is Value Based"`
	Name                 string                   `json:"name" jsonschema:"description=Name,required"`
	OptOutLink           string                   `json:"opt_out_link,omitempty" jsonschema:"description=Opt Out Link"`
	ParentAudienceId     int                      `json:"parent_audience_id,omitempty" jsonschema:"description=ID of the Parent Audience,pattern=^[0-9]+$"`
	ProductSetId         string                   `json:"product_set_id" jsonschema:"description=ID of the Product Set,required,pattern=^[0-9]+$"`
	RevSharePolicyId     int                      `json:"rev_share_policy_id,omitempty" jsonschema:"description=ID of the Rev Share Policy,pattern=^[0-9]+$"`
	Subtype              string                   `json:"subtype,omitempty" jsonschema:"description=Subtype"`
}

// RegisterAdAccountCreateProductAudienceHandler registers the ad_account_create_product_audience tool
func RegisterAdAccountCreateProductAudienceHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_create_product_audience",
		"Create or update product_audiences for this AdAccount Returns AdAccount. Required: name, product_set_id",
		json.RawMessage(`{"additionalProperties":false,"properties":{"allowed_domains":{"description":"Allowed Domains","items":{"type":"string"},"type":"array"},"associated_audience_id":{"description":"ID of the Associated Audience","pattern":"^[0-9]+$","type":"integer"},"claim_objective":{"description":"Claim Objective (enum: adaccountproduct_audiences_claim_objective_enum_param)","enum":["AUTOMOTIVE_MODEL","COLLABORATIVE_ADS","HOME_LISTING","MEDIA_TITLE","PRODUCT","TRAVEL","VEHICLE","VEHICLE_OFFER"],"type":"string"},"content_type":{"description":"Content Type (enum: adaccountproduct_audiences_content_type_enum_param)","enum":["AUTOMOTIVE_MODEL","DESTINATION","FLIGHT","GENERIC","HOME_LISTING","HOTEL","LOCAL_SERVICE_BUSINESS","MEDIA_TITLE","OFFLINE_PRODUCT","PRODUCT","VEHICLE","VEHICLE_OFFER"],"type":"string"},"creation_params":{"description":"Creation Params","type":"string"},"description":{"description":"Description","type":"string"},"enable_fetch_or_create":{"description":"Enable Fetch Or Create","type":"boolean"},"event_source_group":{"description":"Event Source Group","type":"string"},"event_sources":{"description":"Event Sources","items":{"additionalProperties":true,"type":"object"},"type":"array"},"exclusions":{"description":"Exclusions","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"AdAccount ID","pattern":"^[0-9]+$","type":"string"},"inclusions":{"description":"Inclusions","items":{"additionalProperties":true,"type":"object"},"type":"array"},"is_snapshot":{"description":"Is Snapshot","type":"boolean"},"is_value_based":{"description":"Is Value Based","type":"boolean"},"name":{"description":"Name","type":"string"},"opt_out_link":{"description":"Opt Out Link","type":"string"},"parent_audience_id":{"description":"ID of the Parent Audience","pattern":"^[0-9]+$","type":"integer"},"product_set_id":{"description":"ID of the Product Set","pattern":"^[0-9]+$","type":"string"},"rev_share_policy_id":{"description":"ID of the Rev Share Policy","pattern":"^[0-9]+$","type":"integer"},"subtype":{"description":"Subtype (enum: adaccountproduct_audiences_subtype_enum_param)","enum":["APP","BAG_OF_ACCOUNTS","BIDDING","CLAIM","CUSTOM","ENGAGEMENT","EXCLUSION","FOX","LOOKALIKE","MANAGED","MEASUREMENT","MESSENGER_SUBSCRIBER_LIST","OFFLINE_CONVERSION","PARTNER","PRIMARY","REGULATED_CATEGORIES_AUDIENCE","STUDY_RULE_AUDIENCE","VIDEO","WEBSITE"],"type":"string"}},"required":["id","name","product_set_id"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountCreateProductAudienceHandler)
	return nil
}

// AdAccountCreateProductAudienceHandler handles the ad_account_create_product_audience tool
func AdAccountCreateProductAudienceHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_create_product_audienceArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/product_audiences", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if len(args.AllowedDomains) > 0 {
		body["allowed_domains"] = args.AllowedDomains
	}
	if args.AssociatedAudienceId > 0 {
		body["associated_audience_id"] = args.AssociatedAudienceId
	}
	if args.ClaimObjective != "" {
		body["claim_objective"] = args.ClaimObjective
	}
	if args.ContentType != "" {
		body["content_type"] = args.ContentType
	}
	body["creation_params"] = args.CreationParams
	if args.Description != "" {
		body["description"] = args.Description
	}
	body["enable_fetch_or_create"] = args.EnableFetchOrCreate
	if args.EventSourceGroup != "" {
		body["event_source_group"] = args.EventSourceGroup
	}
	if len(args.EventSources) > 0 {
		body["event_sources"] = args.EventSources
	}
	if len(args.Exclusions) > 0 {
		body["exclusions"] = args.Exclusions
	}
	if len(args.Inclusions) > 0 {
		body["inclusions"] = args.Inclusions
	}
	body["is_snapshot"] = args.IsSnapshot
	body["is_value_based"] = args.IsValueBased
	if args.Name != "" {
		body["name"] = args.Name
	}
	if args.OptOutLink != "" {
		body["opt_out_link"] = args.OptOutLink
	}
	if args.ParentAudienceId > 0 {
		body["parent_audience_id"] = args.ParentAudienceId
	}
	if args.ProductSetId != "" {
		body["product_set_id"] = args.ProductSetId
	}
	if args.RevSharePolicyId > 0 {
		body["rev_share_policy_id"] = args.RevSharePolicyId
	}
	if args.Subtype != "" {
		body["subtype"] = args.Subtype
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
