// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_create_video_adArgs defines the typed arguments for ad_account_create_video_ad
type ad_account_create_video_adArgs struct {
	ID          string `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Description string `json:"description,omitempty" jsonschema:"description=Description"`
	Privacy     string `json:"privacy,omitempty" jsonschema:"description=Privacy"`
	Title       string `json:"title,omitempty" jsonschema:"description=Title"`
	UploadPhase string `json:"upload_phase" jsonschema:"description=Upload Phase,required"`
	VideoId     string `json:"video_id,omitempty" jsonschema:"description=ID of the Video,pattern=^[0-9]+$"`
	VideoState  string `json:"video_state,omitempty" jsonschema:"description=Video State"`
}

// RegisterAdAccountCreateVideoAdHandler registers the ad_account_create_video_ad tool
func RegisterAdAccountCreateVideoAdHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_create_video_ad",
		"Create or update video_ads for this AdAccount Returns AdVideo. Required: upload_phase (enum)",
		json.RawMessage(`{"additionalProperties":false,"properties":{"description":{"description":"Description","type":"string"},"id":{"description":"AdAccount ID","pattern":"^[0-9]+$","type":"string"},"privacy":{"description":"Privacy","type":"string"},"title":{"description":"Title","type":"string"},"upload_phase":{"description":"Upload Phase (enum: adaccountvideo_ads_upload_phase_enum_param)","enum":["FINISH","START"],"type":"string"},"video_id":{"description":"ID of the Video","pattern":"^[0-9]+$","type":"string"},"video_state":{"description":"Video State (enum: adaccountvideo_ads_video_state_enum_param)","enum":["DRAFT","PUBLISHED","SCHEDULED"],"type":"string"}},"required":["id","upload_phase"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountCreateVideoAdHandler)
	return nil
}

// AdAccountCreateVideoAdHandler handles the ad_account_create_video_ad tool
func AdAccountCreateVideoAdHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_create_video_adArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/video_ads", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if args.Description != "" {
		body["description"] = args.Description
	}
	if args.Privacy != "" {
		body["privacy"] = args.Privacy
	}
	if args.Title != "" {
		body["title"] = args.Title
	}
	if args.UploadPhase != "" {
		body["upload_phase"] = args.UploadPhase
	}
	if args.VideoId != "" {
		body["video_id"] = args.VideoId
	}
	if args.VideoState != "" {
		body["video_state"] = args.VideoState
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
