// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_list_targetingsuggestionsArgs defines the typed arguments for ad_account_list_targetingsuggestions
type ad_account_list_targetingsuggestionsArgs struct {
	ID                  string                   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields              []string                 `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit               int                      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After               string                   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before              string                   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AppStore            string                   `json:"app_store,omitempty" jsonschema:"description=App Store"`
	Countries           []string                 `json:"countries,omitempty" jsonschema:"description=Countries"`
	LimitType           string                   `json:"limit_type,omitempty" jsonschema:"description=Limit Type"`
	Mode                string                   `json:"mode,omitempty" jsonschema:"description=Mode"`
	Objective           string                   `json:"objective,omitempty" jsonschema:"description=Objective"`
	Objects             map[string]interface{}   `json:"objects,omitempty" jsonschema:"description=Objects"`
	RegulatedCategories []string                 `json:"regulated_categories,omitempty" jsonschema:"description=Regulated Categories"`
	RegulatedCountries  []string                 `json:"regulated_countries,omitempty" jsonschema:"description=Regulated Countries"`
	SessionId           int                      `json:"session_id,omitempty" jsonschema:"description=ID of the Session,pattern=^[0-9]+$"`
	TargetingList       []map[string]interface{} `json:"targeting_list,omitempty" jsonschema:"description=Targeting List"`
	WhitelistedTypes    []string                 `json:"whitelisted_types,omitempty" jsonschema:"description=Whitelisted Types"`
}

// RegisterAdAccountListTargetingsuggestionsHandler registers the ad_account_list_targetingsuggestions tool
func RegisterAdAccountListTargetingsuggestionsHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_list_targetingsuggestions",
		"List targetingsuggestions for this AdAccount Returns AdAccountTargetingUnified.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"app_store":{"description":"App Store (enum: adaccounttargetingsuggestions_app_store_enum_param)","enum":["amazon_app_store","apk_mirror","apk_monk","apk_pure","aptoide_a1_store","bemobi_mobile_store","digital_turbine_store","does_not_exist","fb_android_store","fb_canvas","fb_gameroom","galaxy_store","google_play","instant_game","itunes","itunes_ipad","neon_android_store","none","oculus_app_store","oppo","roku_channel_store","uptodown","vivo","windows_10_store","windows_store","xiaomi"],"type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"countries":{"description":"Countries","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"limit_type":{"description":"Limit Type (enum: adaccounttargetingsuggestions_limit_type_enum_param)","enum":["behaviors","college_years","education_majors","education_schools","education_statuses","family_statuses","home_value","income","industries","interested_in","interests","life_events","location_categories","relationship_statuses","user_adclusters","work_employers","work_positions"],"type":"string"},"mode":{"description":"Mode (enum: adaccounttargetingsuggestions_mode_enum_param)","enum":["best_performing","recently_used","related","suggestions"],"type":"string"},"objective":{"description":"Objective (enum: adaccounttargetingsuggestions_objective_enum_param)","enum":["APP_INSTALLS","BRAND_AWARENESS","CONVERSIONS","EVENT_RESPONSES","LEAD_GENERATION","LINK_CLICKS","LOCAL_AWARENESS","MESSAGES","OFFER_CLAIMS","OUTCOME_APP_PROMOTION","OUTCOME_AWARENESS","OUTCOME_ENGAGEMENT","OUTCOME_LEADS","OUTCOME_SALES","OUTCOME_TRAFFIC","PAGE_LIKES","POST_ENGAGEMENT","PRODUCT_CATALOG_SALES","REACH","STORE_VISITS","VIDEO_VIEWS"],"type":"string"},"objects":{"additionalProperties":true,"description":"Objects","type":"object"},"regulated_categories":{"description":"Regulated Categories","items":{"type":"string"},"type":"array"},"regulated_countries":{"description":"Regulated Countries","items":{"type":"string"},"type":"array"},"session_id":{"description":"ID of the Session","pattern":"^[0-9]+$","type":"integer"},"targeting_list":{"description":"Targeting List","items":{"additionalProperties":true,"type":"object"},"type":"array"},"whitelisted_types":{"description":"Whitelisted Types","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountListTargetingsuggestionsHandler)
	return nil
}

// AdAccountListTargetingsuggestionsHandler handles the ad_account_list_targetingsuggestions tool
func AdAccountListTargetingsuggestionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_list_targetingsuggestionsArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/targetingsuggestions", args.ID)
	// Prepare query parameters
	params := make(map[string]string)
	// ID is part of path, not query params
	if len(args.Fields) > 0 {
		params["fields"] = strings.Join(args.Fields, ",")
	}
	if args.Limit > 0 {
		params["limit"] = fmt.Sprintf("%d", args.Limit)
	}
	if args.After != "" {
		params["after"] = args.After
	}
	if args.Before != "" {
		params["before"] = args.Before
	}
	if args.AppStore != "" {
		params["app_store"] = args.AppStore
	}
	if len(args.Countries) > 0 {
		params["countries"] = strings.Join(args.Countries, ",")
	}
	if args.LimitType != "" {
		params["limit_type"] = args.LimitType
	}
	if args.Mode != "" {
		params["mode"] = args.Mode
	}
	if args.Objective != "" {
		params["objective"] = args.Objective
	}
	// TODO: Handle map[string]interface{} for Objects
	if len(args.RegulatedCategories) > 0 {
		params["regulated_categories"] = strings.Join(args.RegulatedCategories, ",")
	}
	if len(args.RegulatedCountries) > 0 {
		params["regulated_countries"] = strings.Join(args.RegulatedCountries, ",")
	}
	if args.SessionId > 0 {
		params["session_id"] = fmt.Sprintf("%d", args.SessionId)
	}
	// TODO: Handle []map[string]interface{} for TargetingList
	if len(args.WhitelistedTypes) > 0 {
		params["whitelisted_types"] = strings.Join(args.WhitelistedTypes, ",")
	}

	result, err := common.MakeGraphAPIRequest(ctx, "GET", endpoint, params, nil)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
