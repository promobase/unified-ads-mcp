// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_update_ad_place_page_sets_asyncArgs defines the typed arguments for ad_account_update_ad_place_page_sets_async
type ad_account_update_ad_place_page_sets_asyncArgs struct {
	ID               string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	LocationTypes    []string `json:"location_types,omitempty" jsonschema:"description=Location Types"`
	Name             string   `json:"name" jsonschema:"description=Name,required"`
	ParentPage       string   `json:"parent_page" jsonschema:"description=Parent Page,required"`
	TargetedAreaType string   `json:"targeted_area_type,omitempty" jsonschema:"description=Targeted Area Type"`
}

// RegisterAdAccountUpdateAdPlacePageSetsAsyncHandler registers the ad_account_update_ad_place_page_sets_async tool
func RegisterAdAccountUpdateAdPlacePageSetsAsyncHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_update_ad_place_page_sets_async",
		"Associate ad_place_page_sets_async with this AdAccount Returns AdPlacePageSet. Required: name, parent_page",
		json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"AdAccount ID","pattern":"^[0-9]+$","type":"string"},"location_types":{"description":"Location Types","items":{"type":"string"},"type":"array"},"name":{"description":"Name","type":"string"},"parent_page":{"description":"Parent Page","type":"string"},"targeted_area_type":{"description":"Targeted Area Type (enum: adaccountad_place_page_sets_async_targeted_area_type_enum_param)","enum":["CUSTOM_RADIUS","MARKETING_AREA","NONE"],"type":"string"}},"required":["id","name","parent_page"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountUpdateAdPlacePageSetsAsyncHandler)
	return nil
}

// AdAccountUpdateAdPlacePageSetsAsyncHandler handles the ad_account_update_ad_place_page_sets_async tool
func AdAccountUpdateAdPlacePageSetsAsyncHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_update_ad_place_page_sets_asyncArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/ad_place_page_sets_async", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if len(args.LocationTypes) > 0 {
		body["location_types"] = args.LocationTypes
	}
	if args.Name != "" {
		body["name"] = args.Name
	}
	if args.ParentPage != "" {
		body["parent_page"] = args.ParentPage
	}
	if args.TargetedAreaType != "" {
		body["targeted_area_type"] = args.TargetedAreaType
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
