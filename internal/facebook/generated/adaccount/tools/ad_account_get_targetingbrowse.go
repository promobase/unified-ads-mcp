// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_get_targetingbrowseArgs defines the typed arguments for ad_account_get_targetingbrowse
type ad_account_get_targetingbrowseArgs struct {
	ID                  string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields              []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit               int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After               string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before              string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	ExcludedCategory    string   `json:"excluded_category,omitempty" jsonschema:"description=Excluded Category"`
	IncludeNodes        bool     `json:"include_nodes,omitempty" jsonschema:"description=Include Nodes"`
	IsExclusion         bool     `json:"is_exclusion,omitempty" jsonschema:"description=Is Exclusion"`
	LimitType           string   `json:"limit_type,omitempty" jsonschema:"description=Limit Type"`
	RegulatedCategories []string `json:"regulated_categories,omitempty" jsonschema:"description=Regulated Categories"`
	RegulatedCountries  []string `json:"regulated_countries,omitempty" jsonschema:"description=Regulated Countries"`
	WhitelistedTypes    []string `json:"whitelisted_types,omitempty" jsonschema:"description=Whitelisted Types"`
}

// RegisterAdAccountGetTargetingbrowseHandler registers the ad_account_get_targetingbrowse tool
func RegisterAdAccountGetTargetingbrowseHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_get_targetingbrowse",
		"Get targeting information for this AdAccount Returns AdAccountTargetingUnified.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"excluded_category":{"description":"Excluded Category","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","pattern":"^[0-9]+$","type":"string"},"include_nodes":{"description":"Include Nodes","type":"boolean"},"is_exclusion":{"description":"Is Exclusion","type":"boolean"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"limit_type":{"description":"Limit Type (enum: adaccounttargetingbrowse_limit_type_enum_param)","enum":["behaviors","college_years","education_majors","education_schools","education_statuses","ethnic_affinity","family_statuses","generation","home_ownership","home_type","home_value","household_composition","income","industries","interested_in","interests","life_events","location_categories","moms","net_worth","office_type","politics","relationship_statuses","user_adclusters","work_employers","work_positions"],"type":"string"},"regulated_categories":{"description":"Regulated Categories","items":{"type":"string"},"type":"array"},"regulated_countries":{"description":"Regulated Countries","items":{"type":"string"},"type":"array"},"whitelisted_types":{"description":"Whitelisted Types","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountGetTargetingbrowseHandler)
	return nil
}

// AdAccountGetTargetingbrowseHandler handles the ad_account_get_targetingbrowse tool
func AdAccountGetTargetingbrowseHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_get_targetingbrowseArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/targetingbrowse", args.ID)
	// Prepare query parameters
	params := make(map[string]string)
	// ID is part of path, not query params
	if len(args.Fields) > 0 {
		params["fields"] = strings.Join(args.Fields, ",")
	}
	if args.Limit > 0 {
		params["limit"] = fmt.Sprintf("%d", args.Limit)
	}
	if args.After != "" {
		params["after"] = args.After
	}
	if args.Before != "" {
		params["before"] = args.Before
	}
	if args.ExcludedCategory != "" {
		params["excluded_category"] = args.ExcludedCategory
	}
	params["include_nodes"] = fmt.Sprintf("%v", args.IncludeNodes)
	params["is_exclusion"] = fmt.Sprintf("%v", args.IsExclusion)
	if args.LimitType != "" {
		params["limit_type"] = args.LimitType
	}
	if len(args.RegulatedCategories) > 0 {
		params["regulated_categories"] = strings.Join(args.RegulatedCategories, ",")
	}
	if len(args.RegulatedCountries) > 0 {
		params["regulated_countries"] = strings.Join(args.RegulatedCountries, ",")
	}
	if len(args.WhitelistedTypes) > 0 {
		params["whitelisted_types"] = strings.Join(args.WhitelistedTypes, ",")
	}

	result, err := common.MakeGraphAPIRequest(ctx, "GET", endpoint, params, nil)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
