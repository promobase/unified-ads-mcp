// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_get_targetingsearchArgs defines the typed arguments for ad_account_get_targetingsearch
type ad_account_get_targetingsearchArgs struct {
	Fields                             []string                 `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit                              int                      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After                              string                   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before                             string                   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AllowOnlyFatHeadInterests          bool                     `json:"allow_only_fat_head_interests,omitempty" jsonschema:"description=Allow Only Fat Head Interests"`
	AppStore                           string                   `json:"app_store,omitempty" jsonschema:"description=App Store"`
	Countries                          []string                 `json:"countries,omitempty" jsonschema:"description=Countries"`
	IsAccountLevelBrandSafetyExclusion bool                     `json:"is_account_level_brand_safety_exclusion,omitempty" jsonschema:"description=Is Account Level Brand Safety Exclusion"`
	IsAccountLevelEmployerExclusion    bool                     `json:"is_account_level_employer_exclusion,omitempty" jsonschema:"description=Is Account Level Employer Exclusion"`
	IsExclusion                        bool                     `json:"is_exclusion,omitempty" jsonschema:"description=Is Exclusion"`
	LimitType                          string                   `json:"limit_type,omitempty" jsonschema:"description=Limit Type"`
	Objective                          string                   `json:"objective,omitempty" jsonschema:"description=Objective"`
	PromotedObject                     *common.AdPromotedObject `json:"promoted_object,omitempty" jsonschema:"description=Promoted Object"`
	Q                                  string                   `json:"q" jsonschema:"description=Q,required"`
	RegulatedCategories                []string                 `json:"regulated_categories,omitempty" jsonschema:"description=Regulated Categories"`
	RegulatedCountries                 []string                 `json:"regulated_countries,omitempty" jsonschema:"description=Regulated Countries"`
	SessionId                          int                      `json:"session_id,omitempty" jsonschema:"description=ID of the Session,pattern=^[0-9]+$"`
	TargetingList                      []map[string]interface{} `json:"targeting_list,omitempty" jsonschema:"description=Targeting List"`
	WhitelistedTypes                   []string                 `json:"whitelisted_types,omitempty" jsonschema:"description=Whitelisted Types"`
}

// RegisterAdAccountGetTargetingsearchHandler registers the ad_account_get_targetingsearch tool
func RegisterAdAccountGetTargetingsearchHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_get_targetingsearch",
		"Get targeting information for this AdAccount Returns AdAccountTargetingUnified. Required: q",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"allow_only_fat_head_interests":{"description":"Allow Only Fat Head Interests","type":"boolean"},"app_store":{"description":"App Store (enum: adaccounttargetingsearch_app_store_enum_param)","enum":["amazon_app_store","apk_mirror","apk_monk","apk_pure","aptoide_a1_store","bemobi_mobile_store","digital_turbine_store","does_not_exist","fb_android_store","fb_canvas","fb_gameroom","galaxy_store","google_play","instant_game","itunes","itunes_ipad","neon_android_store","none","oculus_app_store","oppo","roku_channel_store","uptodown","vivo","windows_10_store","windows_store","xiaomi"],"type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"countries":{"description":"Countries","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"is_account_level_brand_safety_exclusion":{"description":"Is Account Level Brand Safety Exclusion","type":"boolean"},"is_account_level_employer_exclusion":{"description":"Is Account Level Employer Exclusion","type":"boolean"},"is_exclusion":{"description":"Is Exclusion","type":"boolean"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"limit_type":{"description":"Limit Type (enum: adaccounttargetingsearch_limit_type_enum_param)","enum":["adgroup_id","age_max","age_min","age_range","alternate_auto_targeting_option","app_install_state","audience_network_positions","behaviors","brand_safety_content_filter_levels","brand_safety_content_severity_levels","cafe_ca_contraction_targeting_signal","cafe_ca_expansion_targeting_signal","catalog_based_targeting","cities","city_keys","college_years","conjunctive_user_adclusters","connections","contextual_targeting_categories","countries","country","country_groups","custom_audiences","device_platforms","direct_install_devices","dynamic_audience_ids","education_majors","education_schools","education_statuses","effective_audience_network_positions","effective_device_platforms","effective_facebook_positions","effective_instagram_positions","effective_messenger_positions","effective_oculus_positions","effective_publisher_platforms","effective_threads_positions","effective_whatsapp_positions","engagement_specs","ethnic_affinity","exclude_previous_days","exclude_reached_since","excluded_brand_safety_content_types","excluded_connections","excluded_custom_audiences","excluded_dynamic_audience_ids","excluded_engagement_specs","excluded_geo_locations","excluded_mobile_device_model","excluded_product_audience_specs","excluded_publisher_categories","excluded_publisher_list_ids","excluded_user_adclusters","excluded_user_device","exclusions","expanded_implicit_custom_audiences","facebook_positions","family_statuses","fb_deal_id","flexible_spec","follow_profiles","follow_profiles_negative","format","friends_of_connections","gatekeepers","genders","generation","geo_locations","home_ownership","home_type","home_value","household_composition","household_income","id","income","industries","instagram_hashtags","instagram_positions","install_state_application","instream_video_skippable_excluded","instream_video_sponsorship_placements","interest_defaults_source","interested_in","interests","is_instagram_destination_ad","is_whatsapp_destination_ad","keywords","life_events","locales","location_categories","location_cluster_ids","location_expansion","marketing_message_channels","marketplace_product_categories","messenger_positions","mobile_device_model","moms","net_worth","oculus_positions","office_type","page_types","place_page_set_ids","political_views","politics","product_audience_specs","prospecting_audience","publisher_platforms","radius","region_keys","regions","relationship_statuses","rtb_flag","site_category","subscriber_universe","tafe_ca_mitigation_strategy","targeting_automation","targeting_optimization","targeting_relaxation_types","threads_positions","timezones","topic","trending","user_adclusters","user_age_unknown","user_device","user_event","user_os","user_page_threads","user_page_threads_excluded","whatsapp_positions","wireless_carrier","work_employers","work_positions","zips"],"type":"string"},"objective":{"description":"Objective (enum: adaccounttargetingsearch_objective_enum_param)","enum":["APP_INSTALLS","BRAND_AWARENESS","CONVERSIONS","EVENT_RESPONSES","LEAD_GENERATION","LINK_CLICKS","LOCAL_AWARENESS","MESSAGES","OFFER_CLAIMS","OUTCOME_APP_PROMOTION","OUTCOME_AWARENESS","OUTCOME_ENGAGEMENT","OUTCOME_LEADS","OUTCOME_SALES","OUTCOME_TRAFFIC","PAGE_LIKES","POST_ENGAGEMENT","PRODUCT_CATALOG_SALES","REACH","STORE_VISITS","VIDEO_VIEWS"],"type":"string"},"promoted_object":{"additionalProperties":true,"description":"Promoted Object","type":"object"},"q":{"description":"Q","type":"string"},"regulated_categories":{"description":"Regulated Categories","items":{"type":"string"},"type":"array"},"regulated_countries":{"description":"Regulated Countries","items":{"type":"string"},"type":"array"},"session_id":{"description":"ID of the Session","pattern":"^[0-9]+$","type":"integer"},"targeting_list":{"description":"Targeting List","items":{"additionalProperties":true,"type":"object"},"type":"array"},"whitelisted_types":{"description":"Whitelisted Types","items":{"type":"string"},"type":"array"}},"required":["q"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountGetTargetingsearchHandler)
	return nil
}

// AdAccountGetTargetingsearchHandler handles the ad_account_get_targetingsearch tool
func AdAccountGetTargetingsearchHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_get_targetingsearchArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := "/targetingsearch"
	// Prepare query parameters
	params := make(map[string]string)
	if len(args.Fields) > 0 {
		params["fields"] = strings.Join(args.Fields, ",")
	}
	if args.Limit > 0 {
		params["limit"] = fmt.Sprintf("%d", args.Limit)
	}
	if args.After != "" {
		params["after"] = args.After
	}
	if args.Before != "" {
		params["before"] = args.Before
	}
	params["allow_only_fat_head_interests"] = fmt.Sprintf("%v", args.AllowOnlyFatHeadInterests)
	if args.AppStore != "" {
		params["app_store"] = args.AppStore
	}
	if len(args.Countries) > 0 {
		params["countries"] = strings.Join(args.Countries, ",")
	}
	params["is_account_level_brand_safety_exclusion"] = fmt.Sprintf("%v", args.IsAccountLevelBrandSafetyExclusion)
	params["is_account_level_employer_exclusion"] = fmt.Sprintf("%v", args.IsAccountLevelEmployerExclusion)
	params["is_exclusion"] = fmt.Sprintf("%v", args.IsExclusion)
	if args.LimitType != "" {
		params["limit_type"] = args.LimitType
	}
	if args.Objective != "" {
		params["objective"] = args.Objective
	}
	// TODO: Handle *common.AdPromotedObject for PromotedObject
	if args.Q != "" {
		params["q"] = args.Q
	}
	if len(args.RegulatedCategories) > 0 {
		params["regulated_categories"] = strings.Join(args.RegulatedCategories, ",")
	}
	if len(args.RegulatedCountries) > 0 {
		params["regulated_countries"] = strings.Join(args.RegulatedCountries, ",")
	}
	if args.SessionId > 0 {
		params["session_id"] = fmt.Sprintf("%d", args.SessionId)
	}
	// TODO: Handle []map[string]interface{} for TargetingList
	if len(args.WhitelistedTypes) > 0 {
		params["whitelisted_types"] = strings.Join(args.WhitelistedTypes, ",")
	}

	result, err := common.MakeGraphAPIRequest(ctx, "GET", endpoint, params, nil)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
