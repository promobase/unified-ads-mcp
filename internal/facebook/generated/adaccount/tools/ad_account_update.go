// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_updateArgs defines the typed arguments for ad_account_update
type ad_account_updateArgs struct {
	ID                      string                   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	AgencyClientDeclaration map[string]interface{}   `json:"agency_client_declaration,omitempty" jsonschema:"description=Agency Client Declaration,minimum=13,maximum=100"`
	AttributionSpec         []map[string]interface{} `json:"attribution_spec,omitempty" jsonschema:"description=Attribution Spec"`
	BusinessInfo            map[string]interface{}   `json:"business_info,omitempty" jsonschema:"description=Business Info"`
	Currency                string                   `json:"currency,omitempty" jsonschema:"description=Currency"`
	CustomAudienceInfo      map[string]interface{}   `json:"custom_audience_info,omitempty" jsonschema:"description=Custom Audience Info"`
	DefaultDsaBeneficiary   string                   `json:"default_dsa_beneficiary,omitempty" jsonschema:"description=Default Dsa Beneficiary"`
	DefaultDsaPayor         string                   `json:"default_dsa_payor,omitempty" jsonschema:"description=Default Dsa Payor"`
	EndAdvertiser           string                   `json:"end_advertiser,omitempty" jsonschema:"description=End Advertiser"`
	ExistingCustomers       []string                 `json:"existing_customers,omitempty" jsonschema:"description=Existing Customers"`
	IsBaSkipDelayedEligible bool                     `json:"is_ba_skip_delayed_eligible,omitempty" jsonschema:"description=Is Ba Skip Delayed Eligible"`
	IsNotificationsEnabled  bool                     `json:"is_notifications_enabled,omitempty" jsonschema:"description=Is Notifications Enabled"`
	MediaAgency             string                   `json:"media_agency,omitempty" jsonschema:"description=Media Agency"`
	Name                    string                   `json:"name,omitempty" jsonschema:"description=Name"`
	Partner                 string                   `json:"partner,omitempty" jsonschema:"description=Partner"`
	SpendCap                float64                  `json:"spend_cap,omitempty" jsonschema:"description=Spend Cap"`
	SpendCapAction          string                   `json:"spend_cap_action,omitempty" jsonschema:"description=Spend Cap Action"`
	TimezoneId              int                      `json:"timezone_id,omitempty" jsonschema:"description=ID of the Timezone,pattern=^[0-9]+$"`
	TosAccepted             map[string]interface{}   `json:"tos_accepted,omitempty" jsonschema:"description=Tos Accepted"`
}

// RegisterAdAccountUpdateHandler registers the ad_account_update tool
func RegisterAdAccountUpdateHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_update",
		"Update a AdAccount Returns AdAccount.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"agency_client_declaration":{"description":"Agency Client Declaration","type":"string"},"attribution_spec":{"description":"Attribution Spec","items":{"additionalProperties":true,"type":"object"},"type":"array"},"business_info":{"description":"Business Info","type":"string"},"currency":{"description":"Currency (enum: adaccount_currency)","enum":["AED","ARS","AUD","BDT","BOB","BRL","CAD","CHF","CLP","CNY","COP","CRC","CZK","DKK","DZD","EGP","EUR","GBP","GTQ","HKD","HNL","HUF","IDR","ILS","INR","ISK","JPY","KES","KRW","LKR","MOP","MXN","MYR","NGN","NIO","NOK","NZD","PEN","PHP","PKR","PLN","PYG","QAR","RON","SAR","SEK","SGD","THB","TRY","TWD","UAH","USD","UYU","VND","ZAR"],"type":"string"},"custom_audience_info":{"description":"Custom Audience Info","type":"string"},"default_dsa_beneficiary":{"description":"Default Dsa Beneficiary","type":"string"},"default_dsa_payor":{"description":"Default Dsa Payor","type":"string"},"end_advertiser":{"description":"End Advertiser","type":"string"},"existing_customers":{"description":"Existing Customers","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","pattern":"^[0-9]+$","type":"string"},"is_ba_skip_delayed_eligible":{"description":"Is Ba Skip Delayed Eligible","type":"boolean"},"is_notifications_enabled":{"description":"Is Notifications Enabled","type":"boolean"},"media_agency":{"description":"Media Agency","type":"string"},"name":{"description":"Name","type":"string"},"partner":{"description":"Partner","type":"string"},"spend_cap":{"description":"Spend Cap","type":"number"},"spend_cap_action":{"description":"Spend Cap Action","type":"string"},"timezone_id":{"description":"ID of the Timezone","pattern":"^[0-9]+$","type":"integer"},"tos_accepted":{"description":"Tos Accepted","type":"string"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountUpdateHandler)
	return nil
}

// AdAccountUpdateHandler handles the ad_account_update tool
func AdAccountUpdateHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_updateArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	body["agency_client_declaration"] = args.AgencyClientDeclaration
	if len(args.AttributionSpec) > 0 {
		body["attribution_spec"] = args.AttributionSpec
	}
	body["business_info"] = args.BusinessInfo
	if args.Currency != "" {
		body["currency"] = args.Currency
	}
	body["custom_audience_info"] = args.CustomAudienceInfo
	if args.DefaultDsaBeneficiary != "" {
		body["default_dsa_beneficiary"] = args.DefaultDsaBeneficiary
	}
	if args.DefaultDsaPayor != "" {
		body["default_dsa_payor"] = args.DefaultDsaPayor
	}
	if args.EndAdvertiser != "" {
		body["end_advertiser"] = args.EndAdvertiser
	}
	if len(args.ExistingCustomers) > 0 {
		body["existing_customers"] = args.ExistingCustomers
	}
	body["is_ba_skip_delayed_eligible"] = args.IsBaSkipDelayedEligible
	body["is_notifications_enabled"] = args.IsNotificationsEnabled
	if args.MediaAgency != "" {
		body["media_agency"] = args.MediaAgency
	}
	if args.Name != "" {
		body["name"] = args.Name
	}
	if args.Partner != "" {
		body["partner"] = args.Partner
	}
	body["spend_cap"] = args.SpendCap
	if args.SpendCapAction != "" {
		body["spend_cap_action"] = args.SpendCapAction
	}
	if args.TimezoneId > 0 {
		body["timezone_id"] = args.TimezoneId
	}
	body["tos_accepted"] = args.TosAccepted

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
