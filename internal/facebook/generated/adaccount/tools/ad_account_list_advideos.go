// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_list_advideosArgs defines the typed arguments for ad_account_list_advideos
type ad_account_list_advideosArgs struct {
	ID             string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields         []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit          int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After          string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before         string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	MaxAspectRatio float64  `json:"max_aspect_ratio,omitempty" jsonschema:"description=Max Aspect Ratio"`
	Maxheight      int      `json:"maxheight,omitempty" jsonschema:"description=Maxheight"`
	Maxlength      int      `json:"maxlength,omitempty" jsonschema:"description=Maxlength"`
	Maxwidth       int      `json:"maxwidth,omitempty" jsonschema:"description=Maxwidth"`
	MinAspectRatio float64  `json:"min_aspect_ratio,omitempty" jsonschema:"description=Min Aspect Ratio"`
	Minheight      int      `json:"minheight,omitempty" jsonschema:"description=Minheight"`
	Minlength      int      `json:"minlength,omitempty" jsonschema:"description=Minlength"`
	Minwidth       int      `json:"minwidth,omitempty" jsonschema:"description=Minwidth"`
	Title          string   `json:"title,omitempty" jsonschema:"description=Title"`
}

// RegisterAdAccountListAdvideosHandler registers the ad_account_list_advideos tool
func RegisterAdAccountListAdvideosHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_list_advideos",
		"List advideos for this AdAccount Returns AdVideo.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"max_aspect_ratio":{"description":"Max Aspect Ratio","type":"number"},"maxheight":{"description":"Maxheight","type":"integer"},"maxlength":{"description":"Maxlength","type":"integer"},"maxwidth":{"description":"Maxwidth","type":"integer"},"min_aspect_ratio":{"description":"Min Aspect Ratio","type":"number"},"minheight":{"description":"Minheight","type":"integer"},"minlength":{"description":"Minlength","type":"integer"},"minwidth":{"description":"Minwidth","type":"integer"},"title":{"description":"Title","type":"string"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountListAdvideosHandler)
	return nil
}

// AdAccountListAdvideosHandler handles the ad_account_list_advideos tool
func AdAccountListAdvideosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_list_advideosArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/advideos", args.ID)
	// Prepare query parameters
	params := make(map[string]string)
	// ID is part of path, not query params
	if len(args.Fields) > 0 {
		params["fields"] = strings.Join(args.Fields, ",")
	}
	if args.Limit > 0 {
		params["limit"] = fmt.Sprintf("%d", args.Limit)
	}
	if args.After != "" {
		params["after"] = args.After
	}
	if args.Before != "" {
		params["before"] = args.Before
	}
	// TODO: Handle float64 for MaxAspectRatio
	if args.Maxheight > 0 {
		params["maxheight"] = fmt.Sprintf("%d", args.Maxheight)
	}
	if args.Maxlength > 0 {
		params["maxlength"] = fmt.Sprintf("%d", args.Maxlength)
	}
	if args.Maxwidth > 0 {
		params["maxwidth"] = fmt.Sprintf("%d", args.Maxwidth)
	}
	// TODO: Handle float64 for MinAspectRatio
	if args.Minheight > 0 {
		params["minheight"] = fmt.Sprintf("%d", args.Minheight)
	}
	if args.Minlength > 0 {
		params["minlength"] = fmt.Sprintf("%d", args.Minlength)
	}
	if args.Minwidth > 0 {
		params["minwidth"] = fmt.Sprintf("%d", args.Minwidth)
	}
	if args.Title != "" {
		params["title"] = args.Title
	}

	result, err := common.MakeGraphAPIRequest(ctx, "GET", endpoint, params, nil)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
