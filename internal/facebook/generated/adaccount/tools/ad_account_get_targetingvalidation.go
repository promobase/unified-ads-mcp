// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_get_targetingvalidationArgs defines the typed arguments for ad_account_get_targetingvalidation
type ad_account_get_targetingvalidationArgs struct {
	ID            string                   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields        []string                 `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit         int                      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After         string                   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before        string                   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	IdList        []interface{}            `json:"id_list,omitempty" jsonschema:"description=ID List"`
	IsExclusion   bool                     `json:"is_exclusion,omitempty" jsonschema:"description=Is Exclusion"`
	NameList      []string                 `json:"name_list,omitempty" jsonschema:"description=Name List"`
	TargetingList []map[string]interface{} `json:"targeting_list,omitempty" jsonschema:"description=Targeting List"`
}

// RegisterAdAccountGetTargetingvalidationHandler registers the ad_account_get_targetingvalidation tool
func RegisterAdAccountGetTargetingvalidationHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_get_targetingvalidation",
		"Get targeting information for this AdAccount Returns AdAccountTargetingUnified.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","pattern":"^[0-9]+$","type":"string"},"id_list":{"description":"ID List","items":{"type":"integer"},"type":"array"},"is_exclusion":{"description":"Is Exclusion","type":"boolean"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"name_list":{"description":"Name List","items":{"type":"string"},"type":"array"},"targeting_list":{"description":"Targeting List","items":{"additionalProperties":true,"type":"object"},"type":"array"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountGetTargetingvalidationHandler)
	return nil
}

// AdAccountGetTargetingvalidationHandler handles the ad_account_get_targetingvalidation tool
func AdAccountGetTargetingvalidationHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_get_targetingvalidationArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/targetingvalidation", args.ID)
	// Prepare query parameters
	params := make(map[string]string)
	// ID is part of path, not query params
	if len(args.Fields) > 0 {
		params["fields"] = strings.Join(args.Fields, ",")
	}
	if args.Limit > 0 {
		params["limit"] = fmt.Sprintf("%d", args.Limit)
	}
	if args.After != "" {
		params["after"] = args.After
	}
	if args.Before != "" {
		params["before"] = args.Before
	}
	// TODO: Handle []interface{} for IdList
	params["is_exclusion"] = fmt.Sprintf("%v", args.IsExclusion)
	if len(args.NameList) > 0 {
		params["name_list"] = strings.Join(args.NameList, ",")
	}
	// TODO: Handle []map[string]interface{} for TargetingList

	result, err := common.MakeGraphAPIRequest(ctx, "GET", endpoint, params, nil)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
