// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_create_brand_safety_content_filter_levelArgs defines the typed arguments for ad_account_create_brand_safety_content_filter_level
type ad_account_create_brand_safety_content_filter_levelArgs struct {
	ID                             string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	BrandSafetyContentFilterLevels []string `json:"brand_safety_content_filter_levels" jsonschema:"description=Brand Safety Content Filter Levels,required"`
	BusinessId                     string   `json:"business_id,omitempty" jsonschema:"description=ID of the Business,pattern=^[0-9]+$"`
}

// RegisterAdAccountCreateBrandSafetyContentFilterLevelHandler registers the ad_account_create_brand_safety_content_filter_level tool
func RegisterAdAccountCreateBrandSafetyContentFilterLevelHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_create_brand_safety_content_filter_level",
		"Create or update brand_safety_content_filter_levels for this AdAccount Returns AdAccount. Required: brand_safety_content_filter_levels",
		json.RawMessage(`{"additionalProperties":false,"properties":{"brand_safety_content_filter_levels":{"description":"Brand Safety Content Filter Levels","items":{"type":"string"},"type":"array"},"business_id":{"description":"ID of the Business","pattern":"^[0-9]+$","type":"string"},"id":{"description":"AdAccount ID","pattern":"^[0-9]+$","type":"string"}},"required":["id","brand_safety_content_filter_levels"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountCreateBrandSafetyContentFilterLevelHandler)
	return nil
}

// AdAccountCreateBrandSafetyContentFilterLevelHandler handles the ad_account_create_brand_safety_content_filter_level tool
func AdAccountCreateBrandSafetyContentFilterLevelHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_create_brand_safety_content_filter_levelArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/brand_safety_content_filter_levels", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if len(args.BrandSafetyContentFilterLevels) > 0 {
		body["brand_safety_content_filter_levels"] = args.BrandSafetyContentFilterLevels
	}
	if args.BusinessId != "" {
		body["business_id"] = args.BusinessId
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
