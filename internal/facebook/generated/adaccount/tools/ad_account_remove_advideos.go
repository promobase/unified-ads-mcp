// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_remove_advideosArgs defines the typed arguments for ad_account_remove_advideos
type ad_account_remove_advideosArgs struct {
	ID      string `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	VideoId string `json:"video_id" jsonschema:"description=ID of the Video,required,pattern=^[0-9]+$"`
}

// RegisterAdAccountRemoveAdvideosHandler registers the ad_account_remove_advideos tool
func RegisterAdAccountRemoveAdvideosHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_remove_advideos",
		"Remove advideos from this AdAccount Required: video_id",
		json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"AdAccount ID","pattern":"^[0-9]+$","type":"string"},"video_id":{"description":"ID of the Video","pattern":"^[0-9]+$","type":"string"}},"required":["id","video_id"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountRemoveAdvideosHandler)
	return nil
}

// AdAccountRemoveAdvideosHandler handles the ad_account_remove_advideos tool
func AdAccountRemoveAdvideosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_remove_advideosArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/advideos", args.ID)
	// Prepare query parameters
	params := make(map[string]string)
	// ID is part of path, not query params
	if args.VideoId != "" {
		params["video_id"] = args.VideoId
	}

	result, err := common.MakeGraphAPIRequest(ctx, "DELETE", endpoint, params, nil)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
