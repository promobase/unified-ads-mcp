// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_create_asyncadrequestsetArgs defines the typed arguments for ad_account_create_asyncadrequestset
type ad_account_create_asyncadrequestsetArgs struct {
	ID               string                   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	AdSpecs          []map[string]interface{} `json:"ad_specs" jsonschema:"description=Ad Specs,required"`
	Name             string                   `json:"name" jsonschema:"description=Name,required"`
	NotificationMode string                   `json:"notification_mode,omitempty" jsonschema:"description=Notification Mode"`
	NotificationUri  string                   `json:"notification_uri,omitempty" jsonschema:"description=Notification Uri"`
}

// RegisterAdAccountCreateAsyncadrequestsetHandler registers the ad_account_create_asyncadrequestset tool
func RegisterAdAccountCreateAsyncadrequestsetHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_create_asyncadrequestset",
		"Create or update asyncadrequestsets for this AdAccount Returns AdAsyncRequestSet. Required: ad_specs, name",
		json.RawMessage(`{"additionalProperties":false,"properties":{"ad_specs":{"description":"Ad Specs","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"AdAccount ID","pattern":"^[0-9]+$","type":"string"},"name":{"description":"Name","type":"string"},"notification_mode":{"description":"Notification Mode (enum: adaccountasyncadrequestsets_notification_mode_enum_param)","enum":["OFF","ON_COMPLETE"],"type":"string"},"notification_uri":{"description":"Notification Uri","type":"string"}},"required":["id","ad_specs","name"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountCreateAsyncadrequestsetHandler)
	return nil
}

// AdAccountCreateAsyncadrequestsetHandler handles the ad_account_create_asyncadrequestset tool
func AdAccountCreateAsyncadrequestsetHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_create_asyncadrequestsetArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/asyncadrequestsets", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if len(args.AdSpecs) > 0 {
		body["ad_specs"] = args.AdSpecs
	}
	if args.Name != "" {
		body["name"] = args.Name
	}
	if args.NotificationMode != "" {
		body["notification_mode"] = args.NotificationMode
	}
	if args.NotificationUri != "" {
		body["notification_uri"] = args.NotificationUri
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
