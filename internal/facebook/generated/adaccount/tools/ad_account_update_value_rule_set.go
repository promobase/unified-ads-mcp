// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_update_value_rule_setArgs defines the typed arguments for ad_account_update_value_rule_set
type ad_account_update_value_rule_setArgs struct {
	ID          string                   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Name        string                   `json:"name" jsonschema:"description=Name,required"`
	ProductType string                   `json:"product_type,omitempty" jsonschema:"description=Product Type"`
	Rules       []map[string]interface{} `json:"rules" jsonschema:"description=Rules,required"`
}

// RegisterAdAccountUpdateValueRuleSetHandler registers the ad_account_update_value_rule_set tool
func RegisterAdAccountUpdateValueRuleSetHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_update_value_rule_set",
		"Create or update value_rule_set for this AdAccount Returns AdsValueAdjustmentRuleCollection. Required: name, rules",
		json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"AdAccount ID","pattern":"^[0-9]+$","type":"string"},"name":{"description":"Name","type":"string"},"product_type":{"description":"Product Type (enum: adaccountvalue_rule_set_product_type_enum_param)","enum":["AUDIENCE","LEADGEN_ADS","OMNI_CHANNEL"],"type":"string"},"rules":{"description":"Rules","items":{"additionalProperties":true,"type":"object"},"type":"array"}},"required":["id","name","rules"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountUpdateValueRuleSetHandler)
	return nil
}

// AdAccountUpdateValueRuleSetHandler handles the ad_account_update_value_rule_set tool
func AdAccountUpdateValueRuleSetHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_update_value_rule_setArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/value_rule_set", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if args.Name != "" {
		body["name"] = args.Name
	}
	if args.ProductType != "" {
		body["product_type"] = args.ProductType
	}
	if len(args.Rules) > 0 {
		body["rules"] = args.Rules
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
