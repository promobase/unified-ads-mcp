// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_list_customaudiencesArgs defines the typed arguments for ad_account_list_customaudiences
type ad_account_list_customaudiencesArgs struct {
	ID                   string                   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields               []string                 `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit                int                      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After                string                   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before               string                   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	BusinessId           string                   `json:"business_id,omitempty" jsonschema:"description=ID of the Business,pattern=^[0-9]+$"`
	FetchPrimaryAudience bool                     `json:"fetch_primary_audience,omitempty" jsonschema:"description=Fetch Primary Audience"`
	Filtering            []map[string]interface{} `json:"filtering,omitempty" jsonschema:"description=Filtering"`
	PixelId              string                   `json:"pixel_id,omitempty" jsonschema:"description=ID of the Pixel,pattern=^[0-9]+$"`
}

// RegisterAdAccountListCustomaudiencesHandler registers the ad_account_list_customaudiences tool
func RegisterAdAccountListCustomaudiencesHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_list_customaudiences",
		"List customaudiences for this AdAccount Returns CustomAudience.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business_id":{"description":"ID of the Business","pattern":"^[0-9]+$","type":"string"},"fetch_primary_audience":{"description":"Fetch Primary Audience","type":"boolean"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filtering":{"description":"Filtering","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"AdAccount ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"pixel_id":{"description":"ID of the Pixel","pattern":"^[0-9]+$","type":"string"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountListCustomaudiencesHandler)
	return nil
}

// AdAccountListCustomaudiencesHandler handles the ad_account_list_customaudiences tool
func AdAccountListCustomaudiencesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_list_customaudiencesArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/customaudiences", args.ID)
	// Prepare query parameters
	params := make(map[string]string)
	// ID is part of path, not query params
	if len(args.Fields) > 0 {
		params["fields"] = strings.Join(args.Fields, ",")
	}
	if args.Limit > 0 {
		params["limit"] = fmt.Sprintf("%d", args.Limit)
	}
	if args.After != "" {
		params["after"] = args.After
	}
	if args.Before != "" {
		params["before"] = args.Before
	}
	if args.BusinessId != "" {
		params["business_id"] = args.BusinessId
	}
	params["fetch_primary_audience"] = fmt.Sprintf("%v", args.FetchPrimaryAudience)
	// TODO: Handle []map[string]interface{} for Filtering
	if args.PixelId != "" {
		params["pixel_id"] = args.PixelId
	}

	result, err := common.MakeGraphAPIRequest(ctx, "GET", endpoint, params, nil)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
