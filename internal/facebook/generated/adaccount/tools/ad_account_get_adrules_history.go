// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_get_adrules_historyArgs defines the typed arguments for ad_account_get_adrules_history
type ad_account_get_adrules_historyArgs struct {
	ID             string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields         []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit          int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After          string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before         string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Action         string   `json:"action,omitempty" jsonschema:"description=Action"`
	EvaluationType string   `json:"evaluation_type,omitempty" jsonschema:"description=Evaluation Type"`
	HideNoChanges  bool     `json:"hide_no_changes,omitempty" jsonschema:"description=Hide No Changes"`
	ObjectId       string   `json:"object_id,omitempty" jsonschema:"description=ID of the Object,pattern=^[0-9]+$"`
}

// RegisterAdAccountGetAdrulesHistoryHandler registers the ad_account_get_adrules_history tool
func RegisterAdAccountGetAdrulesHistoryHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_get_adrules_history",
		"Get adrules_history data for this AdAccount Returns AdAccountAdRulesHistory.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"action":{"description":"Action (enum: adaccountadrules_history_action_enum_param)","enum":["BUDGET_NOT_REDISTRIBUTED","CHANGED_BID","CHANGED_BUDGET","CONSOLIDATE_ASC_FRAGMENTATION","CONSOLIDATE_FRAGMENTATION","CONVERT_ASC_CP_SINGLE_INSTANCE","EMAIL","ENABLE_ADVANTAGE_CAMPAIGN_BUDGET","ENABLE_ADVANTAGE_PLUS_AUDIENCE","ENABLE_ADVANTAGE_PLUS_CREATIVE","ENABLE_ADVANTAGE_PLUS_PLACEMENTS","ENABLE_AUTOFLOW","ENABLE_GEN_UNCROP","ENABLE_LANDING_PAGE_VIEWS","ENABLE_MUSIC","ENABLE_REELS_PLACEMENTS","ENABLE_SEMANTIC_BASED_AUDIENCE_EXPANSION","ENABLE_SHOPS_ADS","ENDPOINT_PINGED","ERROR","FACEBOOK_NOTIFICATION_SENT","MESSAGE_SENT","NOT_CHANGED","PAUSED","UNPAUSED"],"type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"evaluation_type":{"description":"Evaluation Type (enum: adaccountadrules_history_evaluation_type_enum_param)","enum":["SCHEDULE","TRIGGER"],"type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"hide_no_changes":{"description":"Hide No Changes","type":"boolean"},"id":{"description":"AdAccount ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"object_id":{"description":"ID of the Object","pattern":"^[0-9]+$","type":"string"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountGetAdrulesHistoryHandler)
	return nil
}

// AdAccountGetAdrulesHistoryHandler handles the ad_account_get_adrules_history tool
func AdAccountGetAdrulesHistoryHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_get_adrules_historyArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/adrules_history", args.ID)
	// Prepare query parameters
	params := make(map[string]string)
	// ID is part of path, not query params
	if len(args.Fields) > 0 {
		params["fields"] = strings.Join(args.Fields, ",")
	}
	if args.Limit > 0 {
		params["limit"] = fmt.Sprintf("%d", args.Limit)
	}
	if args.After != "" {
		params["after"] = args.After
	}
	if args.Before != "" {
		params["before"] = args.Before
	}
	if args.Action != "" {
		params["action"] = args.Action
	}
	if args.EvaluationType != "" {
		params["evaluation_type"] = args.EvaluationType
	}
	params["hide_no_changes"] = fmt.Sprintf("%v", args.HideNoChanges)
	if args.ObjectId != "" {
		params["object_id"] = args.ObjectId
	}

	result, err := common.MakeGraphAPIRequest(ctx, "GET", endpoint, params, nil)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
