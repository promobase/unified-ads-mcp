// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_create_adplayableArgs defines the typed arguments for ad_account_create_adplayable
type ad_account_create_adplayableArgs struct {
	ID        string      `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	AppId     string      `json:"app_id,omitempty" jsonschema:"description=ID of the App,pattern=^[0-9]+$"`
	Name      string      `json:"name" jsonschema:"description=Name,required"`
	SessionId string      `json:"session_id,omitempty" jsonschema:"description=ID of the Session,pattern=^[0-9]+$"`
	Source    interface{} `json:"source,omitempty" jsonschema:"description=Source"`
	SourceUrl string      `json:"source_url,omitempty" jsonschema:"description=Source URL,format=uri"`
	SourceZip interface{} `json:"source_zip,omitempty" jsonschema:"description=Source Zip"`
}

// RegisterAdAccountCreateAdplayableHandler registers the ad_account_create_adplayable tool
func RegisterAdAccountCreateAdplayableHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_create_adplayable",
		"Associate adplayables with this AdAccount Returns PlayableContent. Required: name",
		json.RawMessage(`{"additionalProperties":false,"properties":{"app_id":{"description":"ID of the App","pattern":"^[0-9]+$","type":"string"},"id":{"description":"AdAccount ID","pattern":"^[0-9]+$","type":"string"},"name":{"description":"Name","type":"string"},"session_id":{"description":"ID of the Session","pattern":"^[0-9]+$","type":"string"},"source":{"description":"Source","type":"string"},"source_url":{"description":"Source URL","format":"uri","type":"string"},"source_zip":{"description":"Source Zip","type":"string"}},"required":["id","name"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountCreateAdplayableHandler)
	return nil
}

// AdAccountCreateAdplayableHandler handles the ad_account_create_adplayable tool
func AdAccountCreateAdplayableHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_create_adplayableArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/adplayables", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if args.AppId != "" {
		body["app_id"] = args.AppId
	}
	if args.Name != "" {
		body["name"] = args.Name
	}
	if args.SessionId != "" {
		body["session_id"] = args.SessionId
	}
	body["source"] = args.Source
	if args.SourceUrl != "" {
		body["source_url"] = args.SourceUrl
	}
	body["source_zip"] = args.SourceZip

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
