// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_create_customconversionArgs defines the typed arguments for ad_account_create_customconversion
type ad_account_create_customconversionArgs struct {
	ID                     string  `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	ActionSourceType       string  `json:"action_source_type,omitempty" jsonschema:"description=Action Source Type"`
	AdvancedRule           string  `json:"advanced_rule,omitempty" jsonschema:"description=Advanced Rule"`
	CustomEventType        string  `json:"custom_event_type,omitempty" jsonschema:"description=Custom Event Type"`
	DefaultConversionValue float64 `json:"default_conversion_value,omitempty" jsonschema:"description=Default Conversion Value"`
	Description            string  `json:"description,omitempty" jsonschema:"description=Description"`
	EventSourceId          string  `json:"event_source_id,omitempty" jsonschema:"description=ID of the Event Source,pattern=^[0-9]+$"`
	Name                   string  `json:"name" jsonschema:"description=Name,required"`
	Rule                   string  `json:"rule,omitempty" jsonschema:"description=Rule"`
}

// RegisterAdAccountCreateCustomconversionHandler registers the ad_account_create_customconversion tool
func RegisterAdAccountCreateCustomconversionHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_create_customconversion",
		"Create or update customconversions for this AdAccount Returns CustomConversion. Required: name",
		json.RawMessage(`{"additionalProperties":false,"properties":{"action_source_type":{"description":"Action Source Type (enum: adaccountcustomconversions_action_source_type_enum_param)","enum":["app","business_messaging","chat","email","other","phone_call","physical_store","system_generated","website"],"type":"string"},"advanced_rule":{"description":"Advanced Rule","type":"string"},"custom_event_type":{"description":"Custom Event Type (enum: adaccountcustomconversions_custom_event_type_enum_param)","enum":["ADD_PAYMENT_INFO","ADD_TO_CART","ADD_TO_WISHLIST","COMPLETE_REGISTRATION","CONTACT","CONTENT_VIEW","CUSTOMIZE_PRODUCT","DONATE","FACEBOOK_SELECTED","FIND_LOCATION","INITIATED_CHECKOUT","LEAD","LISTING_INTERACTION","OTHER","PURCHASE","SCHEDULE","SEARCH","START_TRIAL","SUBMIT_APPLICATION","SUBSCRIBE"],"type":"string"},"default_conversion_value":{"description":"Default Conversion Value","type":"number"},"description":{"description":"Description","type":"string"},"event_source_id":{"description":"ID of the Event Source","pattern":"^[0-9]+$","type":"string"},"id":{"description":"AdAccount ID","pattern":"^[0-9]+$","type":"string"},"name":{"description":"Name","type":"string"},"rule":{"description":"Rule","type":"string"}},"required":["id","name"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountCreateCustomconversionHandler)
	return nil
}

// AdAccountCreateCustomconversionHandler handles the ad_account_create_customconversion tool
func AdAccountCreateCustomconversionHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_create_customconversionArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/customconversions", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if args.ActionSourceType != "" {
		body["action_source_type"] = args.ActionSourceType
	}
	if args.AdvancedRule != "" {
		body["advanced_rule"] = args.AdvancedRule
	}
	if args.CustomEventType != "" {
		body["custom_event_type"] = args.CustomEventType
	}
	body["default_conversion_value"] = args.DefaultConversionValue
	if args.Description != "" {
		body["description"] = args.Description
	}
	if args.EventSourceId != "" {
		body["event_source_id"] = args.EventSourceId
	}
	if args.Name != "" {
		body["name"] = args.Name
	}
	if args.Rule != "" {
		body["rule"] = args.Rule
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
