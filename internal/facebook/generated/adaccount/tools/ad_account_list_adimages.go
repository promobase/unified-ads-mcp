// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ad_account_list_adimagesArgs defines the typed arguments for ad_account_list_adimages
type ad_account_list_adimagesArgs struct {
	ID             string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields         []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit          int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After          string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before         string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	BizTagId       int      `json:"biz_tag_id,omitempty" jsonschema:"description=ID of the Biz Tag,pattern=^[0-9]+$"`
	BusinessId     string   `json:"business_id,omitempty" jsonschema:"description=ID of the Business,pattern=^[0-9]+$"`
	Hashes         []string `json:"hashes,omitempty" jsonschema:"description=Hashes"`
	Minheight      int      `json:"minheight,omitempty" jsonschema:"description=Minheight"`
	Minwidth       int      `json:"minwidth,omitempty" jsonschema:"description=Minwidth"`
	Name           string   `json:"name,omitempty" jsonschema:"description=Name"`
	SelectedHashes []string `json:"selected_hashes,omitempty" jsonschema:"description=Selected Hashes"`
}

// RegisterAdAccountListAdimagesHandler registers the ad_account_list_adimages tool
func RegisterAdAccountListAdimagesHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"ad_account_list_adimages",
		"List adimages for this AdAccount Returns AdImage.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"biz_tag_id":{"description":"ID of the Biz Tag","pattern":"^[0-9]+$","type":"integer"},"business_id":{"description":"ID of the Business","pattern":"^[0-9]+$","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"hashes":{"description":"Hashes","items":{"type":"string"},"type":"array"},"id":{"description":"AdAccount ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"minheight":{"description":"Minheight","type":"integer"},"minwidth":{"description":"Minwidth","type":"integer"},"name":{"description":"Name","type":"string"},"selected_hashes":{"description":"Selected Hashes","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, AdAccountListAdimagesHandler)
	return nil
}

// AdAccountListAdimagesHandler handles the ad_account_list_adimages tool
func AdAccountListAdimagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args ad_account_list_adimagesArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/adimages", args.ID)
	// Prepare query parameters
	params := make(map[string]string)
	// ID is part of path, not query params
	if len(args.Fields) > 0 {
		params["fields"] = strings.Join(args.Fields, ",")
	}
	if args.Limit > 0 {
		params["limit"] = fmt.Sprintf("%d", args.Limit)
	}
	if args.After != "" {
		params["after"] = args.After
	}
	if args.Before != "" {
		params["before"] = args.Before
	}
	if args.BizTagId > 0 {
		params["biz_tag_id"] = fmt.Sprintf("%d", args.BizTagId)
	}
	if args.BusinessId != "" {
		params["business_id"] = args.BusinessId
	}
	if len(args.Hashes) > 0 {
		params["hashes"] = strings.Join(args.Hashes, ",")
	}
	if args.Minheight > 0 {
		params["minheight"] = fmt.Sprintf("%d", args.Minheight)
	}
	if args.Minwidth > 0 {
		params["minwidth"] = fmt.Sprintf("%d", args.Minwidth)
	}
	if args.Name != "" {
		params["name"] = args.Name
	}
	if len(args.SelectedHashes) > 0 {
		params["selected_hashes"] = strings.Join(args.SelectedHashes, ",")
	}

	result, err := common.MakeGraphAPIRequest(ctx, "GET", endpoint, params, nil)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
