// Code generated by Facebook Business API codegen. DO NOT EDIT.

package adaccount

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolAdaccount_delete_usersofanyaudience returns the MCP tool definition for adaccount_delete_usersofanyaudience
func ToolAdaccount_delete_usersofanyaudience() mcp.Tool {

	// Params object accepts: namespace (string), payload (Object), session (Object)
	return mcp.NewTool("adaccount_delete_usersofanyaudience",
		mcp.WithDescription("DELETE usersofanyaudience for AdAccount"),
		mcp.WithString("account_id",
			mcp.Required(),
			mcp.Description("Facebook Ad Account ID (without 'act_' prefix)"),
		),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"namespace": map[string]any{
					"type":        "string",
					"description": "namespace parameter",
				},
				"payload": map[string]any{
					"type":        "object",
					"description": "payload parameter",
				},
				"session": map[string]any{
					"type":        "object",
					"description": "session parameter",
				},
			}),
			mcp.Description("Parameters object containing: namespace (string), payload (object), session (object)"),
		),
	)
}

// HandleAdaccount_delete_usersofanyaudience handles the adaccount_delete_usersofanyaudience tool with context-based auth
func HandleAdaccount_delete_usersofanyaudience(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: account_id
	if err := utils.ParseRequiredString(request, "account_id", args); err != nil {
		return mcp.NewToolResultError(err.Error()), nil
	}

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Adaccount_delete_usersofanyaudience(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adaccount_delete_usersofanyaudience: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Adaccount_delete_usersofanyaudience performs DELETE usersofanyaudience for AdAccount
func Adaccount_delete_usersofanyaudience(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	// Extract account_id for URL construction
	accountId, ok := args["account_id"].(string)
	if !ok {
		return nil, fmt.Errorf("account_id is required for adaccount_delete_usersofanyaudience")
	}
	baseURL = fmt.Sprintf("%s/act_%susersofanyaudience", FacebookGraphAPIBaseURL, accountId)

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{
		"account_id",
	}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("DELETE", baseURL, urlParams)
}
