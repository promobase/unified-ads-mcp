// Code generated by Facebook Business API codegen. DO NOT EDIT.

package adaccount

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolAdaccount_get_async_requests returns the MCP tool definition for adaccount_get_async_requests
func ToolAdaccount_get_async_requests() mcp.Tool {
	// Available fields for AsyncRequest: id, result, status, type
	// Params object accepts: status (adaccountasync_requests_status_enum_param), type (adaccountasync_requests_type_enum_param)
	return mcp.NewTool("adaccount_get_async_requests",
		mcp.WithDescription("GET async_requests for AdAccount"),
		mcp.WithString("account_id",
			mcp.Required(),
			mcp.Description("Facebook Ad Account ID (without 'act_' prefix)"),
		),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"status": map[string]any{
					"type":        "string",
					"description": "status parameter",
					"enum":        []string{"ERROR", "EXECUTING", "FINISHED", "INITIALIZED"},
				},
				"type": map[string]any{
					"type":        "string",
					"description": "type parameter",
					"enum":        []string{"ASYNC_ADGROUP_CREATION", "BATCH_API", "DRAFTS"},
				},
			}),
			mcp.Description("Parameters object containing: status (enum) [ERROR, EXECUTING, FINISHED, INITIALIZED], type (enum) [ASYNC_ADGROUP_CREATION, BATCH_API, DRAFTS]"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for AsyncRequest objects. Available fields: id, result, status, type"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleAdaccount_get_async_requests handles the adaccount_get_async_requests tool with context-based auth
func HandleAdaccount_get_async_requests(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: account_id
	if err := utils.ParseRequiredString(request, "account_id", args); err != nil {
		return mcp.NewToolResultError(err.Error()), nil
	}

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Optional: fields
	utils.ParseFieldsArray(request, args)

	// Optional: limit
	utils.ParseOptionalInt(request, "limit", args)

	// Optional: after
	utils.ParseOptionalString(request, "after", args)

	// Optional: before
	utils.ParseOptionalString(request, "before", args)

	// Call the API method
	result, err := Adaccount_get_async_requests(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adaccount_get_async_requests: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Adaccount_get_async_requests performs GET async_requests for AdAccount
func Adaccount_get_async_requests(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	// Extract account_id for URL construction
	accountId, ok := args["account_id"].(string)
	if !ok {
		return nil, fmt.Errorf("account_id is required for adaccount_get_async_requests")
	}

	baseURL = fmt.Sprintf("%s/act_%s/async_requests", FacebookGraphAPIBaseURL, accountId)

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{
		"account_id",
	}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("GET", baseURL, urlParams)
}
