// Code generated by Facebook Business API codegen. DO NOT EDIT.

package adaccount

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolAdaccount_get_adrules_history returns the MCP tool definition for adaccount_get_adrules_history
func ToolAdaccount_get_adrules_history() mcp.Tool {
	// Available fields for AdAccountAdRulesHistory: evaluation_spec, exception_code, exception_message, execution_spec, is_manual, results, rule_id, schedule_spec, timestamp
	// Params object accepts: action (adaccountadrules_history_action_enum_param), evaluation_type (adaccountadrules_history_evaluation_type_enum_param), hide_no_changes (bool), object_id (string)
	return mcp.NewTool("adaccount_get_adrules_history",
		mcp.WithDescription("GET adrules_history for AdAccount"),
		mcp.WithString("account_id",
			mcp.Required(),
			mcp.Description("Facebook Ad Account ID (without 'act_' prefix)"),
		),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"action": map[string]any{
					"type":        "string",
					"description": "action parameter",
					"enum":        []string{"BUDGET_NOT_REDISTRIBUTED", "CHANGED_BID", "CHANGED_BUDGET", "CONSOLIDATE_ASC_FRAGMENTATION", "CONSOLIDATE_FRAGMENTATION", "CONVERT_ASC_CP_SINGLE_INSTANCE", "EMAIL", "ENABLE_ADVANTAGE_CAMPAIGN_BUDGET", "ENABLE_ADVANTAGE_PLUS_AUDIENCE", "ENABLE_ADVANTAGE_PLUS_CREATIVE", "ENABLE_ADVANTAGE_PLUS_PLACEMENTS", "ENABLE_AUTOFLOW", "ENABLE_GEN_UNCROP", "ENABLE_LANDING_PAGE_VIEWS", "ENABLE_MUSIC", "ENABLE_REELS_PLACEMENTS", "ENABLE_SEMANTIC_BASED_AUDIENCE_EXPANSION", "ENABLE_SHOPS_ADS", "ENDPOINT_PINGED", "ERROR", "FACEBOOK_NOTIFICATION_SENT", "MESSAGE_SENT", "NOT_CHANGED", "PAUSED", "UNPAUSED"},
				},
				"evaluation_type": map[string]any{
					"type":        "string",
					"description": "evaluation_type parameter",
					"enum":        []string{"SCHEDULE", "TRIGGER"},
				},
				"hide_no_changes": map[string]any{
					"type":        "boolean",
					"description": "hide_no_changes parameter",
				},
				"object_id": map[string]any{
					"type":        "string",
					"description": "object_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: action (enum) [BUDGET_NOT_REDISTRIBUTED, CHANGED_BID, CHANGED_BUDGET, CONSOLIDATE_ASC_FRAGMENTATION, CONSOLIDATE_FRAGMENTATION, ...], evaluation_type (enum) [SCHEDULE, TRIGGER], hide_no_changes (boolean), object_id (string)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for AdAccountAdRulesHistory objects. Available fields: evaluation_spec, exception_code, exception_message, execution_spec, is_manual, results, rule_id, schedule_spec, timestamp"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleAdaccount_get_adrules_history handles the adaccount_get_adrules_history tool with context-based auth
func HandleAdaccount_get_adrules_history(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: account_id
	if err := utils.ParseRequiredString(request, "account_id", args); err != nil {
		return mcp.NewToolResultError(err.Error()), nil
	}

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Optional: fields
	utils.ParseFieldsArray(request, args)

	// Optional: limit
	utils.ParseOptionalInt(request, "limit", args)

	// Optional: after
	utils.ParseOptionalString(request, "after", args)

	// Optional: before
	utils.ParseOptionalString(request, "before", args)

	// Call the API method
	result, err := Adaccount_get_adrules_history(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adaccount_get_adrules_history: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Adaccount_get_adrules_history performs GET adrules_history for AdAccount
func Adaccount_get_adrules_history(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	// Extract account_id for URL construction
	accountId, ok := args["account_id"].(string)
	if !ok {
		return nil, fmt.Errorf("account_id is required for adaccount_get_adrules_history")
	}

	baseURL = fmt.Sprintf("%s/act_%s/adrules_history", FacebookGraphAPIBaseURL, accountId)

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{
		"account_id",
	}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("GET", baseURL, urlParams)
}
