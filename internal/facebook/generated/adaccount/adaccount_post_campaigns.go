// Code generated by Facebook Business API codegen. DO NOT EDIT.

package adaccount

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolAdaccount_post_campaigns returns the MCP tool definition for adaccount_post_campaigns
func ToolAdaccount_post_campaigns() mcp.Tool {

	// Params object accepts: adlabels (list<Object>), bid_strategy (adaccountcampaigns_bid_strategy_enum_param), buying_type (string), daily_budget (unsigned int), execution_options (list<adaccountcampaigns_execution_options_enum_param>), is_skadnetwork_attribution (bool), iterative_split_test_configs (list<Object>), lifetime_budget (unsigned int), name (string), objective (adaccountcampaigns_objective_enum_param), pacing_type (list<string>), promoted_object (Object), smart_promotion_type (adaccountcampaigns_smart_promotion_type_enum_param), source_campaign_id (string), special_ad_categories (list<adaccountcampaigns_special_ad_categories_enum_param>), special_ad_category_country (list<adaccountcampaigns_special_ad_category_country_enum_param>), spend_cap (unsigned int), start_time (datetime), status (adaccountcampaigns_status_enum_param), stop_time (datetime), topline_id (string)
	return mcp.NewTool("adaccount_post_campaigns",
		mcp.WithDescription("POST campaigns for AdAccount"),
		mcp.WithString("account_id",
			mcp.Required(),
			mcp.Description("Facebook Ad Account ID (without 'act_' prefix)"),
		),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"adlabels": map[string]any{
					"type":        "array",
					"description": "adlabels parameter",
					"items":       map[string]any{"type": "object"},
				},
				"bid_strategy": map[string]any{
					"type":        "string",
					"description": "bid_strategy parameter",
					"enum":        []string{"COST_CAP", "LOWEST_COST_WITHOUT_CAP", "LOWEST_COST_WITH_BID_CAP", "LOWEST_COST_WITH_MIN_ROAS"},
				},
				"buying_type": map[string]any{
					"type":        "string",
					"description": "buying_type parameter",
				},
				"daily_budget": map[string]any{
					"type":        "integer",
					"description": "daily_budget parameter",
				},
				"execution_options": map[string]any{
					"type":        "array",
					"description": "execution_options parameter",
					"enum":        []string{"include_recommendations", "validate_only"},
					"items":       map[string]any{"type": "string"},
				},
				"is_skadnetwork_attribution": map[string]any{
					"type":        "boolean",
					"description": "is_skadnetwork_attribution parameter",
				},
				"iterative_split_test_configs": map[string]any{
					"type":        "array",
					"description": "iterative_split_test_configs parameter",
					"items":       map[string]any{"type": "object"},
				},
				"lifetime_budget": map[string]any{
					"type":        "integer",
					"description": "lifetime_budget parameter",
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
				},
				"objective": map[string]any{
					"type":        "string",
					"description": "objective parameter",
					"enum":        []string{"APP_INSTALLS", "BRAND_AWARENESS", "CONVERSIONS", "EVENT_RESPONSES", "LEAD_GENERATION", "LINK_CLICKS", "LOCAL_AWARENESS", "MESSAGES", "OFFER_CLAIMS", "OUTCOME_APP_PROMOTION", "OUTCOME_AWARENESS", "OUTCOME_ENGAGEMENT", "OUTCOME_LEADS", "OUTCOME_SALES", "OUTCOME_TRAFFIC", "PAGE_LIKES", "POST_ENGAGEMENT", "PRODUCT_CATALOG_SALES", "REACH", "STORE_VISITS", "VIDEO_VIEWS"},
				},
				"pacing_type": map[string]any{
					"type":        "array",
					"description": "pacing_type parameter",
					"items":       map[string]any{"type": "string"},
				},
				"promoted_object": map[string]any{
					"type":        "object",
					"description": "promoted_object parameter",
				},
				"smart_promotion_type": map[string]any{
					"type":        "string",
					"description": "smart_promotion_type parameter",
					"enum":        []string{"GUIDED_CREATION", "SMART_APP_PROMOTION"},
				},
				"source_campaign_id": map[string]any{
					"type":        "string",
					"description": "source_campaign_id parameter",
				},
				"special_ad_categories": map[string]any{
					"type":        "array",
					"description": "special_ad_categories parameter",
					"required":    true,
					"enum":        []string{"CREDIT", "EMPLOYMENT", "FINANCIAL_PRODUCTS_SERVICES", "HOUSING", "ISSUES_ELECTIONS_POLITICS", "NONE", "ONLINE_GAMBLING_AND_GAMING"},
					"items":       map[string]any{"type": "string"},
				},
				"special_ad_category_country": map[string]any{
					"type":        "array",
					"description": "special_ad_category_country parameter",
					"enum":        []string{"AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "XK", "YE", "YT", "ZA", "ZM", "ZW"},
					"items":       map[string]any{"type": "string"},
				},
				"spend_cap": map[string]any{
					"type":        "integer",
					"description": "spend_cap parameter",
				},
				"start_time": map[string]any{
					"type":        "string",
					"description": "start_time parameter",
				},
				"status": map[string]any{
					"type":        "string",
					"description": "status parameter",
					"enum":        []string{"ACTIVE", "ARCHIVED", "DELETED", "PAUSED"},
				},
				"stop_time": map[string]any{
					"type":        "string",
					"description": "stop_time parameter",
				},
				"topline_id": map[string]any{
					"type":        "string",
					"description": "topline_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: adlabels (array<object>), bid_strategy (enum) [COST_CAP, LOWEST_COST_WITHOUT_CAP, LOWEST_COST_WITH_BID_CAP, LOWEST_COST_WITH_MIN_ROAS], buying_type (string), daily_budget (integer), execution_options (array<enum>) [include_recommendations, validate_only], is_skadnetwork_attribution (boolean), iterative_split_test_configs (array<object>), lifetime_budget (integer), name (string), objective (enum) [APP_INSTALLS, BRAND_AWARENESS, CONVERSIONS, EVENT_RESPONSES, LEAD_GENERATION, ...], pacing_type (array<string>), promoted_object (object), smart_promotion_type (enum) [GUIDED_CREATION, SMART_APP_PROMOTION], source_campaign_id (string), special_ad_categories (array<enum>) [CREDIT, EMPLOYMENT, FINANCIAL_PRODUCTS_SERVICES, HOUSING, ISSUES_ELECTIONS_POLITICS, ...] [required], special_ad_category_country (array<enum>) [AD, AE, AF, AG, AI, ...], spend_cap (integer), start_time (datetime), status (enum) [ACTIVE, ARCHIVED, DELETED, PAUSED], stop_time (datetime), topline_id (string)"),
		),
	)
}

// HandleAdaccount_post_campaigns handles the adaccount_post_campaigns tool with context-based auth
func HandleAdaccount_post_campaigns(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: account_id
	if err := utils.ParseRequiredString(request, "account_id", args); err != nil {
		return mcp.NewToolResultError(err.Error()), nil
	}

	// Required: params
	// Parse required params object and expand into args
	val, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(val), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the API method
	result, err := Adaccount_post_campaigns(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adaccount_post_campaigns: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Adaccount_post_campaigns performs POST campaigns for AdAccount
func Adaccount_post_campaigns(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	// Extract account_id for URL construction
	accountId, ok := args["account_id"].(string)
	if !ok {
		return nil, fmt.Errorf("account_id is required for adaccount_post_campaigns")
	}
	baseURL = fmt.Sprintf("%s/act_%scampaigns", FacebookGraphAPIBaseURL, accountId)

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{
		"account_id",
	}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
