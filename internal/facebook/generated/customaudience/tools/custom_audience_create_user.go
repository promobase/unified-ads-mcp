// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// custom_audience_create_userArgs defines the typed arguments for custom_audience_create_user
type custom_audience_create_userArgs struct {
	ID        string                 `json:"id" jsonschema:"required,description=CustomAudience ID,pattern=^[0-9]+$"`
	Namespace string                 `json:"namespace,omitempty" jsonschema:"description=Namespace"`
	Payload   map[string]interface{} `json:"payload,omitempty" jsonschema:"description=Payload"`
	Session   map[string]interface{} `json:"session,omitempty" jsonschema:"description=Session"`
}

// RegisterCustomAudienceCreateUserHandler registers the custom_audience_create_user tool
func RegisterCustomAudienceCreateUserHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"custom_audience_create_user",
		"Create or update users for this CustomAudience Returns CustomAudience.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"CustomAudience ID","pattern":"^[0-9]+$","type":"string"},"namespace":{"description":"Namespace","type":"string"},"payload":{"additionalProperties":true,"description":"Payload","type":"object"},"session":{"additionalProperties":true,"description":"Session","type":"object"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, CustomAudienceCreateUserHandler)
	return nil
}

// CustomAudienceCreateUserHandler handles the custom_audience_create_user tool
func CustomAudienceCreateUserHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args custom_audience_create_userArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/users", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if args.Namespace != "" {
		body["namespace"] = args.Namespace
	}
	body["payload"] = args.Payload
	body["session"] = args.Session

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
