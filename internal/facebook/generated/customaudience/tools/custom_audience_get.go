// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// custom_audience_getArgs defines the typed arguments for custom_audience_get
type custom_audience_getArgs struct {
	ID                         string   `json:"id" jsonschema:"required,description=CustomAudience ID,pattern=^[0-9]+$"`
	Fields                     []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit                      int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After                      string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before                     string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AdAccountId                string   `json:"ad_account_id,omitempty" jsonschema:"description=ID of the Ad Account,pattern=^[0-9]+$"`
	SpecialAdCategories        []string `json:"special_ad_categories,omitempty" jsonschema:"description=Special Ad Categories"`
	SpecialAdCategoryCountries []string `json:"special_ad_category_countries,omitempty" jsonschema:"description=Special Ad Category Countries"`
	TargetCountries            []string `json:"target_countries,omitempty" jsonschema:"description=Target Countries"`
}

// RegisterCustomAudienceGetHandler registers the custom_audience_get tool
func RegisterCustomAudienceGetHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"custom_audience_get",
		"Get details of a specific CustomAudience Returns CustomAudience.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"ad_account_id":{"description":"ID of the Ad Account","pattern":"^[0-9]+$","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CustomAudience ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"special_ad_categories":{"description":"Special Ad Categories","items":{"type":"string"},"type":"array"},"special_ad_category_countries":{"description":"Special Ad Category Countries","items":{"type":"string"},"type":"array"},"target_countries":{"description":"Target Countries","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, CustomAudienceGetHandler)
	return nil
}

// CustomAudienceGetHandler handles the custom_audience_get tool
func CustomAudienceGetHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args custom_audience_getArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s", args.ID)
	// Prepare query parameters
	params := make(map[string]string)
	// ID is part of path, not query params
	if len(args.Fields) > 0 {
		params["fields"] = strings.Join(args.Fields, ",")
	}
	if args.Limit > 0 {
		params["limit"] = fmt.Sprintf("%d", args.Limit)
	}
	if args.After != "" {
		params["after"] = args.After
	}
	if args.Before != "" {
		params["before"] = args.Before
	}
	if args.AdAccountId != "" {
		params["ad_account_id"] = args.AdAccountId
	}
	if len(args.SpecialAdCategories) > 0 {
		params["special_ad_categories"] = strings.Join(args.SpecialAdCategories, ",")
	}
	if len(args.SpecialAdCategoryCountries) > 0 {
		params["special_ad_category_countries"] = strings.Join(args.SpecialAdCategoryCountries, ",")
	}
	if len(args.TargetCountries) > 0 {
		params["target_countries"] = strings.Join(args.TargetCountries, ",")
	}

	result, err := common.MakeGraphAPIRequest(ctx, "GET", endpoint, params, nil)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
