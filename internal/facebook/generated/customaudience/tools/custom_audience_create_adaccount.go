// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// custom_audience_create_adaccountArgs defines the typed arguments for custom_audience_create_adaccount
type custom_audience_create_adaccountArgs struct {
	ID               string   `json:"id" jsonschema:"required,description=CustomAudience ID,pattern=^[0-9]+$"`
	Adaccounts       []string `json:"adaccounts,omitempty" jsonschema:"description=Adaccounts"`
	Permissions      string   `json:"permissions,omitempty" jsonschema:"description=Permissions"`
	RelationshipType []string `json:"relationship_type,omitempty" jsonschema:"description=Relationship Type"`
	Replace          bool     `json:"replace,omitempty" jsonschema:"description=Replace"`
}

// RegisterCustomAudienceCreateAdaccountHandler registers the custom_audience_create_adaccount tool
func RegisterCustomAudienceCreateAdaccountHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"custom_audience_create_adaccount",
		"Associate adaccounts with this CustomAudience Returns CustomAudience.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"adaccounts":{"description":"Adaccounts","items":{"type":"string"},"type":"array"},"id":{"description":"CustomAudience ID","pattern":"^[0-9]+$","type":"string"},"permissions":{"description":"Permissions","type":"string"},"relationship_type":{"description":"Relationship Type","items":{"type":"string"},"type":"array"},"replace":{"description":"Replace","type":"boolean"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, CustomAudienceCreateAdaccountHandler)
	return nil
}

// CustomAudienceCreateAdaccountHandler handles the custom_audience_create_adaccount tool
func CustomAudienceCreateAdaccountHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args custom_audience_create_adaccountArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/adaccounts", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if len(args.Adaccounts) > 0 {
		body["adaccounts"] = args.Adaccounts
	}
	if args.Permissions != "" {
		body["permissions"] = args.Permissions
	}
	if len(args.RelationshipType) > 0 {
		body["relationship_type"] = args.RelationshipType
	}
	body["replace"] = args.Replace

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
