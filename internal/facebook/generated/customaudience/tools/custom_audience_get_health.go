// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// custom_audience_get_healthArgs defines the typed arguments for custom_audience_get_health
type custom_audience_get_healthArgs struct {
	ID                       string   `json:"id" jsonschema:"required,description=CustomAudience ID,pattern=^[0-9]+$"`
	Fields                   []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit                    int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After                    string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before                   string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	CalculatedDate           string   `json:"calculated_date,omitempty" jsonschema:"description=Calculated Date"`
	ProcessedDate            string   `json:"processed_date,omitempty" jsonschema:"description=Processed Date"`
	ValueAggregationDuration int      `json:"value_aggregation_duration,omitempty" jsonschema:"description=Value Aggregation Duration"`
	ValueCountry             string   `json:"value_country,omitempty" jsonschema:"description=Value Country"`
	ValueCurrency            string   `json:"value_currency,omitempty" jsonschema:"description=Value Currency"`
	ValueVersion             int      `json:"value_version,omitempty" jsonschema:"description=Value Version"`
}

// RegisterCustomAudienceGetHealthHandler registers the custom_audience_get_health tool
func RegisterCustomAudienceGetHealthHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"custom_audience_get_health",
		"Get health data for this CustomAudience Returns CustomAudienceHealth.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"calculated_date":{"description":"Calculated Date","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CustomAudience ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"processed_date":{"description":"Processed Date","type":"string"},"value_aggregation_duration":{"description":"Value Aggregation Duration","type":"integer"},"value_country":{"description":"Value Country","type":"string"},"value_currency":{"description":"Value Currency","type":"string"},"value_version":{"description":"Value Version","type":"integer"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, CustomAudienceGetHealthHandler)
	return nil
}

// CustomAudienceGetHealthHandler handles the custom_audience_get_health tool
func CustomAudienceGetHealthHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args custom_audience_get_healthArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/health", args.ID)
	// Prepare query parameters
	params := make(map[string]string)
	// ID is part of path, not query params
	if len(args.Fields) > 0 {
		params["fields"] = strings.Join(args.Fields, ",")
	}
	if args.Limit > 0 {
		params["limit"] = fmt.Sprintf("%d", args.Limit)
	}
	if args.After != "" {
		params["after"] = args.After
	}
	if args.Before != "" {
		params["before"] = args.Before
	}
	if args.CalculatedDate != "" {
		params["calculated_date"] = args.CalculatedDate
	}
	if args.ProcessedDate != "" {
		params["processed_date"] = args.ProcessedDate
	}
	if args.ValueAggregationDuration > 0 {
		params["value_aggregation_duration"] = fmt.Sprintf("%d", args.ValueAggregationDuration)
	}
	if args.ValueCountry != "" {
		params["value_country"] = args.ValueCountry
	}
	if args.ValueCurrency != "" {
		params["value_currency"] = args.ValueCurrency
	}
	if args.ValueVersion > 0 {
		params["value_version"] = fmt.Sprintf("%d", args.ValueVersion)
	}

	result, err := common.MakeGraphAPIRequest(ctx, "GET", endpoint, params, nil)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
