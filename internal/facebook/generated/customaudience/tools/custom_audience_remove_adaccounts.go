// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// custom_audience_remove_adaccountsArgs defines the typed arguments for custom_audience_remove_adaccounts
type custom_audience_remove_adaccountsArgs struct {
	ID         string   `json:"id" jsonschema:"required,description=CustomAudience ID,pattern=^[0-9]+$"`
	Adaccounts []string `json:"adaccounts,omitempty" jsonschema:"description=Adaccounts"`
}

// RegisterCustomAudienceRemoveAdaccountsHandler registers the custom_audience_remove_adaccounts tool
func RegisterCustomAudienceRemoveAdaccountsHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"custom_audience_remove_adaccounts",
		"Remove adaccounts from this CustomAudience",
		json.RawMessage(`{"additionalProperties":false,"properties":{"adaccounts":{"description":"Adaccounts","items":{"type":"string"},"type":"array"},"id":{"description":"CustomAudience ID","pattern":"^[0-9]+$","type":"string"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, CustomAudienceRemoveAdaccountsHandler)
	return nil
}

// CustomAudienceRemoveAdaccountsHandler handles the custom_audience_remove_adaccounts tool
func CustomAudienceRemoveAdaccountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args custom_audience_remove_adaccountsArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/adaccounts", args.ID)
	// Prepare query parameters
	params := make(map[string]string)
	// ID is part of path, not query params
	if len(args.Adaccounts) > 0 {
		params["adaccounts"] = strings.Join(args.Adaccounts, ",")
	}

	result, err := common.MakeGraphAPIRequest(ctx, "DELETE", endpoint, params, nil)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
