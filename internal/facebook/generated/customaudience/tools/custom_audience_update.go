// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// custom_audience_updateArgs defines the typed arguments for custom_audience_update
type custom_audience_updateArgs struct {
	ID                  string                   `json:"id" jsonschema:"required,description=CustomAudience ID,pattern=^[0-9]+$"`
	AllowedDomains      []string                 `json:"allowed_domains,omitempty" jsonschema:"description=Allowed Domains"`
	ClaimObjective      string                   `json:"claim_objective,omitempty" jsonschema:"description=Claim Objective"`
	ContentType         string                   `json:"content_type,omitempty" jsonschema:"description=Content Type"`
	Countries           string                   `json:"countries,omitempty" jsonschema:"description=Countries"`
	CustomerFileSource  string                   `json:"customer_file_source,omitempty" jsonschema:"description=Customer File Source"`
	Description         string                   `json:"description,omitempty" jsonschema:"description=Description"`
	EnableFetchOrCreate bool                     `json:"enable_fetch_or_create,omitempty" jsonschema:"description=Enable Fetch Or Create"`
	EventSourceGroup    string                   `json:"event_source_group,omitempty" jsonschema:"description=Event Source Group"`
	EventSources        []map[string]interface{} `json:"event_sources,omitempty" jsonschema:"description=Event Sources"`
	Exclusions          []map[string]interface{} `json:"exclusions,omitempty" jsonschema:"description=Exclusions"`
	Inclusions          []map[string]interface{} `json:"inclusions,omitempty" jsonschema:"description=Inclusions"`
	LookalikeSpec       string                   `json:"lookalike_spec,omitempty" jsonschema:"description=Lookalike Spec"`
	Name                string                   `json:"name,omitempty" jsonschema:"description=Name"`
	OptOutLink          string                   `json:"opt_out_link,omitempty" jsonschema:"description=Opt Out Link"`
	ParentAudienceId    int                      `json:"parent_audience_id,omitempty" jsonschema:"description=ID of the Parent Audience,pattern=^[0-9]+$"`
	ProductSetId        string                   `json:"product_set_id,omitempty" jsonschema:"description=ID of the Product Set,pattern=^[0-9]+$"`
	RetentionDays       int                      `json:"retention_days,omitempty" jsonschema:"description=Retention Days"`
	RevSharePolicyId    int                      `json:"rev_share_policy_id,omitempty" jsonschema:"description=ID of the Rev Share Policy,pattern=^[0-9]+$"`
	Rule                string                   `json:"rule,omitempty" jsonschema:"description=Rule"`
	RuleAggregation     string                   `json:"rule_aggregation,omitempty" jsonschema:"description=Rule Aggregation"`
	Tags                []string                 `json:"tags,omitempty" jsonschema:"description=Tags"`
	UseInCampaigns      bool                     `json:"use_in_campaigns,omitempty" jsonschema:"description=Use In Campaigns"`
}

// RegisterCustomAudienceUpdateHandler registers the custom_audience_update tool
func RegisterCustomAudienceUpdateHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"custom_audience_update",
		"Update a CustomAudience Returns CustomAudience.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"allowed_domains":{"description":"Allowed Domains","items":{"type":"string"},"type":"array"},"claim_objective":{"description":"Claim Objective (enum: customaudience_claim_objective)","enum":["AUTOMOTIVE_MODEL","COLLABORATIVE_ADS","HOME_LISTING","MEDIA_TITLE","PRODUCT","TRAVEL","VEHICLE","VEHICLE_OFFER"],"type":"string"},"content_type":{"description":"Content Type (enum: customaudience_content_type)","enum":["AUTOMOTIVE_MODEL","DESTINATION","FLIGHT","GENERIC","HOME_LISTING","HOTEL","LOCAL_SERVICE_BUSINESS","MEDIA_TITLE","OFFLINE_PRODUCT","PRODUCT","VEHICLE","VEHICLE_OFFER"],"type":"string"},"countries":{"description":"Countries","type":"string"},"customer_file_source":{"description":"Customer File Source (enum: customaudience_customer_file_source)","enum":["BOTH_USER_AND_PARTNER_PROVIDED","PARTNER_PROVIDED_ONLY","USER_PROVIDED_ONLY"],"type":"string"},"description":{"description":"Description","type":"string"},"enable_fetch_or_create":{"description":"Enable Fetch Or Create","type":"boolean"},"event_source_group":{"description":"Event Source Group","type":"string"},"event_sources":{"description":"Event Sources","items":{"additionalProperties":true,"type":"object"},"type":"array"},"exclusions":{"description":"Exclusions","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"CustomAudience ID","pattern":"^[0-9]+$","type":"string"},"inclusions":{"description":"Inclusions","items":{"additionalProperties":true,"type":"object"},"type":"array"},"lookalike_spec":{"description":"Lookalike Spec","type":"string"},"name":{"description":"Name","type":"string"},"opt_out_link":{"description":"Opt Out Link","type":"string"},"parent_audience_id":{"description":"ID of the Parent Audience","pattern":"^[0-9]+$","type":"integer"},"product_set_id":{"description":"ID of the Product Set","pattern":"^[0-9]+$","type":"string"},"retention_days":{"description":"Retention Days","type":"integer"},"rev_share_policy_id":{"description":"ID of the Rev Share Policy","pattern":"^[0-9]+$","type":"integer"},"rule":{"description":"Rule","type":"string"},"rule_aggregation":{"description":"Rule Aggregation","type":"string"},"tags":{"description":"Tags","items":{"type":"string"},"type":"array"},"use_in_campaigns":{"description":"Use In Campaigns","type":"boolean"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, CustomAudienceUpdateHandler)
	return nil
}

// CustomAudienceUpdateHandler handles the custom_audience_update tool
func CustomAudienceUpdateHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args custom_audience_updateArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if len(args.AllowedDomains) > 0 {
		body["allowed_domains"] = args.AllowedDomains
	}
	if args.ClaimObjective != "" {
		body["claim_objective"] = args.ClaimObjective
	}
	if args.ContentType != "" {
		body["content_type"] = args.ContentType
	}
	if args.Countries != "" {
		body["countries"] = args.Countries
	}
	if args.CustomerFileSource != "" {
		body["customer_file_source"] = args.CustomerFileSource
	}
	if args.Description != "" {
		body["description"] = args.Description
	}
	body["enable_fetch_or_create"] = args.EnableFetchOrCreate
	if args.EventSourceGroup != "" {
		body["event_source_group"] = args.EventSourceGroup
	}
	if len(args.EventSources) > 0 {
		body["event_sources"] = args.EventSources
	}
	if len(args.Exclusions) > 0 {
		body["exclusions"] = args.Exclusions
	}
	if len(args.Inclusions) > 0 {
		body["inclusions"] = args.Inclusions
	}
	if args.LookalikeSpec != "" {
		body["lookalike_spec"] = args.LookalikeSpec
	}
	if args.Name != "" {
		body["name"] = args.Name
	}
	if args.OptOutLink != "" {
		body["opt_out_link"] = args.OptOutLink
	}
	if args.ParentAudienceId > 0 {
		body["parent_audience_id"] = args.ParentAudienceId
	}
	if args.ProductSetId != "" {
		body["product_set_id"] = args.ProductSetId
	}
	if args.RetentionDays > 0 {
		body["retention_days"] = args.RetentionDays
	}
	if args.RevSharePolicyId > 0 {
		body["rev_share_policy_id"] = args.RevSharePolicyId
	}
	if args.Rule != "" {
		body["rule"] = args.Rule
	}
	if args.RuleAggregation != "" {
		body["rule_aggregation"] = args.RuleAggregation
	}
	if len(args.Tags) > 0 {
		body["tags"] = args.Tags
	}
	body["use_in_campaigns"] = args.UseInCampaigns

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
