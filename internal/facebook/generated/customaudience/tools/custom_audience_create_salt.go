// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// custom_audience_create_saltArgs defines the typed arguments for custom_audience_create_salt
type custom_audience_create_saltArgs struct {
	ID        string `json:"id" jsonschema:"required,description=CustomAudience ID,pattern=^[0-9]+$"`
	Salt      string `json:"salt" jsonschema:"description=Salt,required"`
	ValidFrom string `json:"valid_from" jsonschema:"description=Valid From,required,format=date-time"`
	ValidTo   string `json:"valid_to" jsonschema:"description=Valid To,required,format=date-time"`
}

// RegisterCustomAudienceCreateSaltHandler registers the custom_audience_create_salt tool
func RegisterCustomAudienceCreateSaltHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"custom_audience_create_salt",
		"Create or update salts for this CustomAudience Returns CustomAudience. Required: salt, valid_from, valid_to",
		json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"CustomAudience ID","pattern":"^[0-9]+$","type":"string"},"salt":{"description":"Salt","type":"string"},"valid_from":{"description":"Valid From","type":"string"},"valid_to":{"description":"Valid To","type":"string"}},"required":["id","salt","valid_from","valid_to"],"type":"object"}`),
	)

	s.AddTool(tool, CustomAudienceCreateSaltHandler)
	return nil
}

// CustomAudienceCreateSaltHandler handles the custom_audience_create_salt tool
func CustomAudienceCreateSaltHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args custom_audience_create_saltArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/salts", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if args.Salt != "" {
		body["salt"] = args.Salt
	}
	if args.ValidFrom != "" {
		body["valid_from"] = args.ValidFrom
	}
	if args.ValidTo != "" {
		body["valid_to"] = args.ValidTo
	}

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
