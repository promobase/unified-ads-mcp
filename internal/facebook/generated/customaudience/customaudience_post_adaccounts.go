// Code generated by Facebook Business API codegen. DO NOT EDIT.

package customaudience

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolCustomaudience_post_adaccounts returns the MCP tool definition for customaudience_post_adaccounts
func ToolCustomaudience_post_adaccounts() mcp.Tool {

	// Params object accepts: adaccounts (list<string>), permissions (string), relationship_type (list<string>), replace (bool)
	return mcp.NewTool("customaudience_post_adaccounts",
		mcp.WithDescription("POST adaccounts for CustomAudience"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"adaccounts": map[string]any{
					"type":        "array",
					"description": "adaccounts parameter",
					"items":       map[string]any{"type": "string"},
				},
				"permissions": map[string]any{
					"type":        "string",
					"description": "permissions parameter",
				},
				"relationship_type": map[string]any{
					"type":        "array",
					"description": "relationship_type parameter",
					"items":       map[string]any{"type": "string"},
				},
				"replace": map[string]any{
					"type":        "boolean",
					"description": "replace parameter",
				},
			}),
			mcp.Description("Parameters object containing: adaccounts (array<string>), permissions (string), relationship_type (array<string>), replace (boolean)"),
		),
	)
}

// HandleCustomaudience_post_adaccounts handles the customaudience_post_adaccounts tool with context-based auth
func HandleCustomaudience_post_adaccounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Customaudience_post_adaccounts(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute customaudience_post_adaccounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Customaudience_post_adaccounts performs POST adaccounts for CustomAudience
func Customaudience_post_adaccounts(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "adaccounts"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
