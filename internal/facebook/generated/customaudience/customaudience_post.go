// Code generated by Facebook Business API codegen. DO NOT EDIT.

package customaudience

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolCustomaudience_post returns the MCP tool definition for customaudience_post
func ToolCustomaudience_post() mcp.Tool {

	// Params object accepts: allowed_domains (list<string>), claim_objective (customaudience_claim_objective), content_type (customaudience_content_type), countries (string), customer_file_source (customaudience_customer_file_source), description (string), enable_fetch_or_create (bool), event_source_group (string), event_sources (list<map>), exclusions (list<Object>), inclusions (list<Object>), lookalike_spec (string), name (string), opt_out_link (string), parent_audience_id (unsigned int), product_set_id (string), retention_days (unsigned int), rev_share_policy_id (unsigned int), rule (string), rule_aggregation (string), tags (list<string>), use_in_campaigns (bool)
	return mcp.NewTool("customaudience_post",
		mcp.WithDescription("POST  for CustomAudience"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"allowed_domains": map[string]any{
					"type":        "array",
					"description": "allowed_domains parameter",
					"items":       map[string]any{"type": "string"},
				},
				"claim_objective": map[string]any{
					"type":        "string",
					"description": "claim_objective parameter",
					"enum":        []string{"AUTOMOTIVE_MODEL", "COLLABORATIVE_ADS", "HOME_LISTING", "MEDIA_TITLE", "PRODUCT", "TRAVEL", "VEHICLE", "VEHICLE_OFFER"},
				},
				"content_type": map[string]any{
					"type":        "string",
					"description": "content_type parameter",
					"enum":        []string{"AUTOMOTIVE_MODEL", "DESTINATION", "FLIGHT", "GENERIC", "HOME_LISTING", "HOTEL", "LOCAL_SERVICE_BUSINESS", "MEDIA_TITLE", "OFFLINE_PRODUCT", "PRODUCT", "VEHICLE", "VEHICLE_OFFER"},
				},
				"countries": map[string]any{
					"type":        "string",
					"description": "countries parameter",
				},
				"customer_file_source": map[string]any{
					"type":        "string",
					"description": "customer_file_source parameter",
					"enum":        []string{"BOTH_USER_AND_PARTNER_PROVIDED", "PARTNER_PROVIDED_ONLY", "USER_PROVIDED_ONLY"},
				},
				"description": map[string]any{
					"type":        "string",
					"description": "description parameter",
				},
				"enable_fetch_or_create": map[string]any{
					"type":        "boolean",
					"description": "enable_fetch_or_create parameter",
				},
				"event_source_group": map[string]any{
					"type":        "string",
					"description": "event_source_group parameter",
				},
				"event_sources": map[string]any{
					"type":        "array",
					"description": "event_sources parameter",
					"items":       map[string]any{"type": "object"},
				},
				"exclusions": map[string]any{
					"type":        "array",
					"description": "exclusions parameter",
					"items":       map[string]any{"type": "object"},
				},
				"inclusions": map[string]any{
					"type":        "array",
					"description": "inclusions parameter",
					"items":       map[string]any{"type": "object"},
				},
				"lookalike_spec": map[string]any{
					"type":        "string",
					"description": "lookalike_spec parameter",
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
				},
				"opt_out_link": map[string]any{
					"type":        "string",
					"description": "opt_out_link parameter",
				},
				"parent_audience_id": map[string]any{
					"type":        "integer",
					"description": "parent_audience_id parameter",
				},
				"product_set_id": map[string]any{
					"type":        "string",
					"description": "product_set_id parameter",
				},
				"retention_days": map[string]any{
					"type":        "integer",
					"description": "retention_days parameter",
				},
				"rev_share_policy_id": map[string]any{
					"type":        "integer",
					"description": "rev_share_policy_id parameter",
				},
				"rule": map[string]any{
					"type":        "string",
					"description": "rule parameter",
				},
				"rule_aggregation": map[string]any{
					"type":        "string",
					"description": "rule_aggregation parameter",
				},
				"tags": map[string]any{
					"type":        "array",
					"description": "tags parameter",
					"items":       map[string]any{"type": "string"},
				},
				"use_in_campaigns": map[string]any{
					"type":        "boolean",
					"description": "use_in_campaigns parameter",
				},
			}),
			mcp.Description("Parameters object containing: allowed_domains (array<string>), claim_objective (customaudience_claim_objective) [AUTOMOTIVE_MODEL, COLLABORATIVE_ADS, HOME_LISTING, MEDIA_TITLE, PRODUCT, ...], content_type (customaudience_content_type) [AUTOMOTIVE_MODEL, DESTINATION, FLIGHT, GENERIC, HOME_LISTING, ...], countries (string), customer_file_source (customaudience_customer_file_source) [BOTH_USER_AND_PARTNER_PROVIDED, PARTNER_PROVIDED_ONLY, USER_PROVIDED_ONLY], description (string), enable_fetch_or_create (boolean), event_source_group (string), event_sources (array<object>), exclusions (array<object>), inclusions (array<object>), lookalike_spec (string), name (string), opt_out_link (string), parent_audience_id (integer), product_set_id (string), retention_days (integer), rev_share_policy_id (integer), rule (string), rule_aggregation (string), tags (array<string>), use_in_campaigns (boolean)"),
		),
	)
}

// HandleCustomaudience_post handles the customaudience_post tool with context-based auth
func HandleCustomaudience_post(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Customaudience_post(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute customaudience_post: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Customaudience_post performs POST  for CustomAudience
func Customaudience_post(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
