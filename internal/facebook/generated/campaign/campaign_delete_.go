// Code generated by Facebook Business API codegen. DO NOT EDIT.

package campaign

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/shared"
)

// ToolCampaign_delete_ returns the MCP tool definition for campaign_delete_
func ToolCampaign_delete_() mcp.Tool {

	return mcp.NewTool("campaign_delete_",
		mcp.WithDescription("DELETE  for Campaign"),
		mcp.WithString("campaign_id",
			mcp.Required(),
			mcp.Description("Facebook Campaign ID"),
		),
	)
}

// HandleCampaign_delete_ handles the campaign_delete_ tool with context-based auth
func HandleCampaign_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: campaign_id
	campaign_id, err := request.RequireString("campaign_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter campaign_id: %v", err)), nil
	}
	args["campaign_id"] = campaign_id

	// Call the API method
	result, err := Campaign_delete_(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute campaign_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Campaign_delete_ performs DELETE  for Campaign
func Campaign_delete_(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	// Extract campaign_id for URL construction
	campaignId, ok := args["campaign_id"].(string)
	if !ok {
		return nil, fmt.Errorf("campaign_id is required for campaign_delete_")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s", campaignId)

	urlParams := url.Values{}
	urlParams.Set("access_token", accessToken)

	if val, ok := args["campaign_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "campaign_id" != "campaign_id" {
			urlParams.Set("campaign_id", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
