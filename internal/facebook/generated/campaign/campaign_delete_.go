// Code generated by Facebook Business API codegen. DO NOT EDIT.

package campaign

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolCampaign_delete_ returns the MCP tool definition for campaign_delete_
func ToolCampaign_delete_() mcp.Tool {

	return mcp.NewTool("campaign_delete_",
		mcp.WithDescription("DELETE  for Campaign"),
		mcp.WithString("campaign_id",
			mcp.Required(),
			mcp.Description("Facebook Campaign ID"),
		),
	)
}

// HandleCampaign_delete_ handles the campaign_delete_ tool with context-based auth
func HandleCampaign_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: campaign_id
	if err := utils.ParseRequiredString(request, "campaign_id", args); err != nil {
		return mcp.NewToolResultError(err.Error()), nil
	}

	// Call the API method
	result, err := Campaign_delete_(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute campaign_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Campaign_delete_ performs DELETE  for Campaign
func Campaign_delete_(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	// Extract campaign_id for URL construction
	campaignId, ok := args["campaign_id"].(string)
	if !ok {
		return nil, fmt.Errorf("campaign_id is required for campaign_delete_")
	}
	baseURL = fmt.Sprintf("%s/%s", FacebookGraphAPIBaseURL, campaignId)

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{
		"campaign_id",
	}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("DELETE", baseURL, urlParams)
}
