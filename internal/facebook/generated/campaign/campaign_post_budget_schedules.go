// Code generated by Facebook Business API codegen. DO NOT EDIT.

package campaign

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/shared"
)

// ToolCampaign_post_budget_schedules returns the MCP tool definition for campaign_post_budget_schedules
func ToolCampaign_post_budget_schedules() mcp.Tool {
	
	// Params object accepts: budget_value (unsigned int), budget_value_type (adcampaigngroupbudget_schedules_budget_value_type_enum_param), time_end (unsigned int), time_start (unsigned int)
	return mcp.NewTool("campaign_post_budget_schedules",
		mcp.WithDescription("POST budget_schedules for Campaign"),
		mcp.WithString("campaign_id",
			mcp.Required(),
			mcp.Description("Facebook Campaign ID"),
		),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"budget_value": map[string]any{
					"type": "integer",
					"description": "budget_value parameter",
					"required": true,
				},
				"budget_value_type": map[string]any{
					"type": "string",
					"description": "budget_value_type parameter",
					"required": true,
					"enum": []string{ "ABSOLUTE", "MULTIPLIER" },
				},
				"time_end": map[string]any{
					"type": "integer",
					"description": "time_end parameter",
					"required": true,
				},
				"time_start": map[string]any{
					"type": "integer",
					"description": "time_start parameter",
					"required": true,
				},
			}),
			mcp.Description("Parameters object containing: budget_value (integer) [required], budget_value_type (enum) [ABSOLUTE, MULTIPLIER] [required], time_end (integer) [required], time_start (integer) [required]"),
		),
	)
}

// HandleCampaign_post_budget_schedules handles the campaign_post_budget_schedules tool with context-based auth
func HandleCampaign_post_budget_schedules(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: campaign_id
	campaign_id, err := request.RequireString("campaign_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter campaign_id: %v", err)), nil
	}
	args["campaign_id"] = campaign_id

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}



	// Call the API method
	result, err := Campaign_post_budget_schedules(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute campaign_post_budget_schedules: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Campaign_post_budget_schedules performs POST budget_schedules for Campaign
func Campaign_post_budget_schedules(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	// Extract campaign_id for URL construction
	campaignId, ok := args["campaign_id"].(string)
	if !ok {
		return nil, fmt.Errorf("campaign_id is required for campaign_post_budget_schedules")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%sbudget_schedules", campaignId)
	
	urlParams := url.Values{}
	urlParams.Set("access_token", accessToken)

	if val, ok := args["campaign_id"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "campaign_id" != "campaign_id" {
			urlParams.Set("campaign_id", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "params" != "campaign_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}