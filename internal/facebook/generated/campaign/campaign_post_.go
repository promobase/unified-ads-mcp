// Code generated by Facebook Business API codegen. DO NOT EDIT.

package campaign

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/shared"
)

// ToolCampaign_post_ returns the MCP tool definition for campaign_post_
func ToolCampaign_post_() mcp.Tool {

	// Params object accepts: adlabels (list<Object>), adset_bid_amounts (map), adset_budgets (list<map>), bid_strategy (adcampaigngroup_bid_strategy), budget_rebalance_flag (bool), daily_budget (unsigned int), execution_options (list<adcampaigngroup_execution_options>), is_skadnetwork_attribution (bool), iterative_split_test_configs (list<Object>), lifetime_budget (unsigned int), name (string), objective (adcampaigngroup_objective), pacing_type (list<string>), promoted_object (Object), smart_promotion_type (adcampaigngroup_smart_promotion_type), special_ad_categories (list<adcampaigngroup_special_ad_categories>), special_ad_category (adcampaigngroup_special_ad_category), special_ad_category_country (list<adcampaigngroup_special_ad_category_country>), spend_cap (unsigned int), start_time (datetime), status (adcampaigngroup_status), stop_time (datetime)
	return mcp.NewTool("campaign_post_",
		mcp.WithDescription("POST  for Campaign"),
		mcp.WithString("campaign_id",
			mcp.Required(),
			mcp.Description("Facebook Campaign ID"),
		),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"adlabels": map[string]any{
					"type":        "array",
					"description": "adlabels parameter",
					"items":       map[string]any{"type": "object"},
				},
				"adset_bid_amounts": map[string]any{
					"type":        "object",
					"description": "adset_bid_amounts parameter",
				},
				"adset_budgets": map[string]any{
					"type":        "array",
					"description": "adset_budgets parameter",
					"items":       map[string]any{"type": "object"},
				},
				"bid_strategy": map[string]any{
					"type":        "string",
					"description": "bid_strategy parameter",
					"enum":        []string{"COST_CAP", "LOWEST_COST_WITHOUT_CAP", "LOWEST_COST_WITH_BID_CAP", "LOWEST_COST_WITH_MIN_ROAS"},
				},
				"budget_rebalance_flag": map[string]any{
					"type":        "boolean",
					"description": "budget_rebalance_flag parameter",
				},
				"daily_budget": map[string]any{
					"type":        "integer",
					"description": "daily_budget parameter",
				},
				"execution_options": map[string]any{
					"type":        "array",
					"description": "execution_options parameter",
					"enum":        []string{"include_recommendations", "validate_only"},
					"items":       map[string]any{"type": "string"},
				},
				"is_skadnetwork_attribution": map[string]any{
					"type":        "boolean",
					"description": "is_skadnetwork_attribution parameter",
				},
				"iterative_split_test_configs": map[string]any{
					"type":        "array",
					"description": "iterative_split_test_configs parameter",
					"items":       map[string]any{"type": "object"},
				},
				"lifetime_budget": map[string]any{
					"type":        "integer",
					"description": "lifetime_budget parameter",
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
				},
				"objective": map[string]any{
					"type":        "string",
					"description": "objective parameter",
					"enum":        []string{"APP_INSTALLS", "BRAND_AWARENESS", "CONVERSIONS", "EVENT_RESPONSES", "LEAD_GENERATION", "LINK_CLICKS", "LOCAL_AWARENESS", "MESSAGES", "OFFER_CLAIMS", "OUTCOME_APP_PROMOTION", "OUTCOME_AWARENESS", "OUTCOME_ENGAGEMENT", "OUTCOME_LEADS", "OUTCOME_SALES", "OUTCOME_TRAFFIC", "PAGE_LIKES", "POST_ENGAGEMENT", "PRODUCT_CATALOG_SALES", "REACH", "STORE_VISITS", "VIDEO_VIEWS"},
				},
				"pacing_type": map[string]any{
					"type":        "array",
					"description": "pacing_type parameter",
					"items":       map[string]any{"type": "string"},
				},
				"promoted_object": map[string]any{
					"type":        "object",
					"description": "promoted_object parameter",
				},
				"smart_promotion_type": map[string]any{
					"type":        "string",
					"description": "smart_promotion_type parameter",
					"enum":        []string{"GUIDED_CREATION", "SMART_APP_PROMOTION"},
				},
				"special_ad_categories": map[string]any{
					"type":        "array",
					"description": "special_ad_categories parameter",
					"enum":        []string{"CREDIT", "EMPLOYMENT", "FINANCIAL_PRODUCTS_SERVICES", "HOUSING", "ISSUES_ELECTIONS_POLITICS", "NONE", "ONLINE_GAMBLING_AND_GAMING"},
					"items":       map[string]any{"type": "string"},
				},
				"special_ad_category": map[string]any{
					"type":        "string",
					"description": "special_ad_category parameter",
					"enum":        []string{"CREDIT", "EMPLOYMENT", "FINANCIAL_PRODUCTS_SERVICES", "HOUSING", "ISSUES_ELECTIONS_POLITICS", "NONE", "ONLINE_GAMBLING_AND_GAMING"},
				},
				"special_ad_category_country": map[string]any{
					"type":        "array",
					"description": "special_ad_category_country parameter",
					"enum":        []string{"CREDIT", "EMPLOYMENT", "FINANCIAL_PRODUCTS_SERVICES", "HOUSING", "ISSUES_ELECTIONS_POLITICS", "NONE", "ONLINE_GAMBLING_AND_GAMING"},
					"items":       map[string]any{"type": "string"},
				},
				"spend_cap": map[string]any{
					"type":        "integer",
					"description": "spend_cap parameter",
				},
				"start_time": map[string]any{
					"type":        "string",
					"description": "start_time parameter",
				},
				"status": map[string]any{
					"type":        "string",
					"description": "status parameter",
					"enum":        []string{"ACTIVE", "ARCHIVED", "DELETED", "PAUSED"},
				},
				"stop_time": map[string]any{
					"type":        "string",
					"description": "stop_time parameter",
				},
			}),
			mcp.Description("Parameters object containing: adlabels (array<object>), adset_bid_amounts (object), adset_budgets (array<object>), bid_strategy (adcampaigngroup_bid_strategy) [COST_CAP, LOWEST_COST_WITHOUT_CAP, LOWEST_COST_WITH_BID_CAP, LOWEST_COST_WITH_MIN_ROAS], budget_rebalance_flag (boolean), daily_budget (integer), execution_options (array<adcampaigngroup_execution_options>) [include_recommendations, validate_only], is_skadnetwork_attribution (boolean), iterative_split_test_configs (array<object>), lifetime_budget (integer), name (string), objective (adcampaigngroup_objective) [APP_INSTALLS, BRAND_AWARENESS, CONVERSIONS, EVENT_RESPONSES, LEAD_GENERATION, ...], pacing_type (array<string>), promoted_object (object), smart_promotion_type (adcampaigngroup_smart_promotion_type) [GUIDED_CREATION, SMART_APP_PROMOTION], special_ad_categories (array<adcampaigngroup_special_ad_categories>) [CREDIT, EMPLOYMENT, FINANCIAL_PRODUCTS_SERVICES, HOUSING, ISSUES_ELECTIONS_POLITICS, ...], special_ad_category (adcampaigngroup_special_ad_category) [CREDIT, EMPLOYMENT, FINANCIAL_PRODUCTS_SERVICES, HOUSING, ISSUES_ELECTIONS_POLITICS, ...], special_ad_category_country (array<adcampaigngroup_special_ad_category_country>) [CREDIT, EMPLOYMENT, FINANCIAL_PRODUCTS_SERVICES, HOUSING, ISSUES_ELECTIONS_POLITICS, ...], spend_cap (integer), start_time (datetime), status (adcampaigngroup_status) [ACTIVE, ARCHIVED, DELETED, PAUSED], stop_time (datetime)"),
		),
	)
}

// HandleCampaign_post_ handles the campaign_post_ tool with context-based auth
func HandleCampaign_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: campaign_id
	campaign_id, err := request.RequireString("campaign_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter campaign_id: %v", err)), nil
	}
	args["campaign_id"] = campaign_id

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Call the API method
	result, err := Campaign_post_(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute campaign_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Campaign_post_ performs POST  for Campaign
func Campaign_post_(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	// Extract campaign_id for URL construction
	campaignId, ok := args["campaign_id"].(string)
	if !ok {
		return nil, fmt.Errorf("campaign_id is required for campaign_post_")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s", campaignId)

	urlParams := url.Values{}
	urlParams.Set("access_token", accessToken)

	if val, ok := args["campaign_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "campaign_id" != "campaign_id" {
			urlParams.Set("campaign_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "campaign_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
