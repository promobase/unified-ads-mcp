// Code generated by codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"unified-ads-mcp/internal/facebook/generated/common"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// campaign_create_insights_reportArgs defines the typed arguments for campaign_create_insights_report
type campaign_create_insights_reportArgs struct {
	ID                           string                   `json:"id" jsonschema:"required,description=Campaign ID,pattern=^[0-9]+$"`
	ActionAttributionWindows     []string                 `json:"action_attribution_windows,omitempty" jsonschema:"description=Action Attribution Windows"`
	ActionBreakdowns             []string                 `json:"action_breakdowns,omitempty" jsonschema:"description=Action Breakdowns"`
	ActionReportTime             string                   `json:"action_report_time,omitempty" jsonschema:"description=Action Report Time"`
	Breakdowns                   []string                 `json:"breakdowns,omitempty" jsonschema:"description=Breakdowns"`
	DatePreset                   string                   `json:"date_preset,omitempty" jsonschema:"description=Date Preset"`
	DefaultSummary               bool                     `json:"default_summary,omitempty" jsonschema:"description=Default Summary"`
	ExportColumns                []string                 `json:"export_columns,omitempty" jsonschema:"description=Export Columns"`
	ExportFormat                 string                   `json:"export_format,omitempty" jsonschema:"description=Export Format"`
	ExportName                   string                   `json:"export_name,omitempty" jsonschema:"description=Export Name"`
	Fields                       []string                 `json:"fields,omitempty" jsonschema:"description=Fields"`
	Filtering                    []map[string]interface{} `json:"filtering,omitempty" jsonschema:"description=Filtering"`
	Level                        string                   `json:"level,omitempty" jsonschema:"description=Level"`
	Limit                        int                      `json:"limit,omitempty" jsonschema:"description=Limit"`
	ProductIdLimit               int                      `json:"product_id_limit,omitempty" jsonschema:"description=Product ID Limit,pattern=^[0-9]+$"`
	Sort                         []string                 `json:"sort,omitempty" jsonschema:"description=Sort"`
	Summary                      []string                 `json:"summary,omitempty" jsonschema:"description=Summary"`
	SummaryActionBreakdowns      []string                 `json:"summary_action_breakdowns,omitempty" jsonschema:"description=Summary Action Breakdowns"`
	TimeIncrement                string                   `json:"time_increment,omitempty" jsonschema:"description=Time Increment"`
	TimeRange                    map[string]interface{}   `json:"time_range,omitempty" jsonschema:"description=Time Range"`
	TimeRanges                   []map[string]interface{} `json:"time_ranges,omitempty" jsonschema:"description=Time Ranges"`
	UseAccountAttributionSetting bool                     `json:"use_account_attribution_setting,omitempty" jsonschema:"description=Use Account Attribution Setting"`
	UseUnifiedAttributionSetting bool                     `json:"use_unified_attribution_setting,omitempty" jsonschema:"description=Use Unified Attribution Setting"`
}

// RegisterCampaignCreateInsightsReportHandler registers the campaign_create_insights_report tool
func RegisterCampaignCreateInsightsReportHandler(s *server.MCPServer) error {
	tool := mcp.NewToolWithRawSchema(
		"campaign_create_insights_report",
		"Generate an insights report for this Campaign Returns AdReportRun.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"action_attribution_windows":{"description":"Action Attribution Windows","items":{"type":"string"},"type":"array"},"action_breakdowns":{"description":"Action Breakdowns","items":{"type":"string"},"type":"array"},"action_report_time":{"description":"Action Report Time (enum: adcampaigngroupinsights_action_report_time_enum_param)","enum":["conversion","impression","lifetime","mixed"],"type":"string"},"breakdowns":{"description":"Breakdowns","items":{"type":"string"},"type":"array"},"date_preset":{"description":"Date Preset (enum: adcampaigngroupinsights_date_preset_enum_param)","enum":["data_maximum","last_14d","last_28d","last_30d","last_3d","last_7d","last_90d","last_month","last_quarter","last_week_mon_sun","last_week_sun_sat","last_year","maximum","this_month","this_quarter","this_week_mon_today","this_week_sun_today","this_year","today","yesterday"],"type":"string"},"default_summary":{"description":"Default Summary","type":"boolean"},"export_columns":{"description":"Export Columns","items":{"type":"string"},"type":"array"},"export_format":{"description":"Export Format","type":"string"},"export_name":{"description":"Export Name","type":"string"},"fields":{"description":"Fields","items":{"type":"string"},"type":"array"},"filtering":{"description":"Filtering","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"Campaign ID","pattern":"^[0-9]+$","type":"string"},"level":{"description":"Level (enum: adcampaigngroupinsights_level_enum_param)","enum":["account","ad","adset","campaign"],"type":"string"},"limit":{"description":"Limit","type":"integer"},"product_id_limit":{"description":"Product ID Limit","pattern":"^[0-9]+$","type":"integer"},"sort":{"description":"Sort","items":{"type":"string"},"type":"array"},"summary":{"description":"Summary","items":{"type":"string"},"type":"array"},"summary_action_breakdowns":{"description":"Summary Action Breakdowns","items":{"type":"string"},"type":"array"},"time_increment":{"description":"Time Increment","type":"string"},"time_range":{"description":"Time Range","type":"string"},"time_ranges":{"description":"Time Ranges","items":{"additionalProperties":true,"type":"object"},"type":"array"},"use_account_attribution_setting":{"description":"Use Account Attribution Setting","type":"boolean"},"use_unified_attribution_setting":{"description":"Use Unified Attribution Setting","type":"boolean"}},"required":["id"],"type":"object"}`),
	)

	s.AddTool(tool, CampaignCreateInsightsReportHandler)
	return nil
}

// CampaignCreateInsightsReportHandler handles the campaign_create_insights_report tool
func CampaignCreateInsightsReportHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	var args campaign_create_insights_reportArgs
	if err := request.BindArguments(&args); err != nil {
		return common.HandleBindError(err)
	}
	endpoint := fmt.Sprintf("/%s/insights", args.ID)
	// Prepare request body
	body := make(map[string]interface{})
	if len(args.ActionAttributionWindows) > 0 {
		body["action_attribution_windows"] = args.ActionAttributionWindows
	}
	if len(args.ActionBreakdowns) > 0 {
		body["action_breakdowns"] = args.ActionBreakdowns
	}
	if args.ActionReportTime != "" {
		body["action_report_time"] = args.ActionReportTime
	}
	if len(args.Breakdowns) > 0 {
		body["breakdowns"] = args.Breakdowns
	}
	if args.DatePreset != "" {
		body["date_preset"] = args.DatePreset
	}
	body["default_summary"] = args.DefaultSummary
	if len(args.ExportColumns) > 0 {
		body["export_columns"] = args.ExportColumns
	}
	if args.ExportFormat != "" {
		body["export_format"] = args.ExportFormat
	}
	if args.ExportName != "" {
		body["export_name"] = args.ExportName
	}
	if len(args.Fields) > 0 {
		body["fields"] = args.Fields
	}
	if len(args.Filtering) > 0 {
		body["filtering"] = args.Filtering
	}
	if args.Level != "" {
		body["level"] = args.Level
	}
	if args.Limit > 0 {
		body["limit"] = args.Limit
	}
	if args.ProductIdLimit > 0 {
		body["product_id_limit"] = args.ProductIdLimit
	}
	if len(args.Sort) > 0 {
		body["sort"] = args.Sort
	}
	if len(args.Summary) > 0 {
		body["summary"] = args.Summary
	}
	if len(args.SummaryActionBreakdowns) > 0 {
		body["summary_action_breakdowns"] = args.SummaryActionBreakdowns
	}
	if args.TimeIncrement != "" {
		body["time_increment"] = args.TimeIncrement
	}
	body["time_range"] = args.TimeRange
	if len(args.TimeRanges) > 0 {
		body["time_ranges"] = args.TimeRanges
	}
	body["use_account_attribution_setting"] = args.UseAccountAttributionSetting
	body["use_unified_attribution_setting"] = args.UseUnifiedAttributionSetting

	result, err := common.MakeGraphAPIRequest(ctx, "POST", endpoint, nil, body)

	if err != nil {
		return common.HandleAPIError(err)
	}

	return &mcp.CallToolResult{
		Content: []mcp.Content{
			mcp.NewTextContent(string(result)),
		},
	}, nil
}
