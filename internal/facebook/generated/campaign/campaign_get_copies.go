// Code generated by Facebook Business API codegen. DO NOT EDIT.

package campaign

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolCampaign_get_copies returns the MCP tool definition for campaign_get_copies
func ToolCampaign_get_copies() mcp.Tool {
	// Available fields for Campaign: account_id, adlabels, advantage_state_info, bid_strategy, boosted_object_id, brand_lift_studies, budget_rebalance_flag, budget_remaining, buying_type, campaign_group_active_time, can_create_brand_lift_study, can_use_spend_cap, configured_status, created_time, daily_budget, effective_status, has_secondary_skadnetwork_reporting, id, is_budget_schedule_enabled, is_skadnetwork_attribution, issues_info, last_budget_toggling_time, lifetime_budget, name, objective, pacing_type, primary_attribution, promoted_object, recommendations, smart_promotion_type, source_campaign, source_campaign_id, source_recommendation_type, special_ad_categories, special_ad_category, special_ad_category_country, spend_cap, start_time, status, stop_time, topline_id, updated_time
	// Params object accepts: date_preset (adcampaigngroupcopies_date_preset_enum_param), effective_status (list<adcampaigngroupcopies_effective_status_enum_param>), is_completed (bool), time_range (map)
	return mcp.NewTool("campaign_get_copies",
		mcp.WithDescription("GET copies for Campaign"),
		mcp.WithString("campaign_id",
			mcp.Required(),
			mcp.Description("Facebook Campaign ID"),
		),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"date_preset": map[string]any{
					"type":        "string",
					"description": "date_preset parameter",
					"enum":        []string{"data_maximum", "last_14d", "last_28d", "last_30d", "last_3d", "last_7d", "last_90d", "last_month", "last_quarter", "last_week_mon_sun", "last_week_sun_sat", "last_year", "maximum", "this_month", "this_quarter", "this_week_mon_today", "this_week_sun_today", "this_year", "today", "yesterday"},
				},
				"effective_status": map[string]any{
					"type":        "array",
					"description": "effective_status parameter",
					"enum":        []string{"ACTIVE", "ADSET_PAUSED", "ARCHIVED", "CAMPAIGN_PAUSED", "DELETED", "DISAPPROVED", "IN_PROCESS", "PAUSED", "PENDING_BILLING_INFO", "PENDING_REVIEW", "PREAPPROVED", "WITH_ISSUES"},
					"items":       map[string]any{"type": "string"},
				},
				"is_completed": map[string]any{
					"type":        "boolean",
					"description": "is_completed parameter",
				},
				"time_range": map[string]any{
					"type":        "object",
					"description": "time_range parameter",
				},
			}),
			mcp.Description("Parameters object containing: date_preset (enum) [data_maximum, last_14d, last_28d, last_30d, last_3d, ...], effective_status (array<enum>) [ACTIVE, ADSET_PAUSED, ARCHIVED, CAMPAIGN_PAUSED, DELETED, ...], is_completed (boolean), time_range (object)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for Campaign objects. Available fields: account_id, adlabels, advantage_state_info, bid_strategy, boosted_object_id, brand_lift_studies, budget_rebalance_flag, budget_remaining, buying_type, campaign_group_active_time, can_create_brand_lift_study, can_use_spend_cap, configured_status, created_time, daily_budget (and 27 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleCampaign_get_copies handles the campaign_get_copies tool with context-based auth
func HandleCampaign_get_copies(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: campaign_id
	if err := utils.ParseRequiredString(request, "campaign_id", args); err != nil {
		return mcp.NewToolResultError(err.Error()), nil
	}

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Optional: fields
	utils.ParseFieldsArray(request, args)

	// Optional: limit
	utils.ParseOptionalInt(request, "limit", args)

	// Optional: after
	utils.ParseOptionalString(request, "after", args)

	// Optional: before
	utils.ParseOptionalString(request, "before", args)

	// Call the API method
	result, err := Campaign_get_copies(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute campaign_get_copies: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Campaign_get_copies performs GET copies for Campaign
func Campaign_get_copies(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	// Extract campaign_id for URL construction
	campaignId, ok := args["campaign_id"].(string)
	if !ok {
		return nil, fmt.Errorf("campaign_id is required for campaign_get_copies")
	}

	baseURL = fmt.Sprintf("%s/%s/copies", FacebookGraphAPIBaseURL, campaignId)

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{
		"campaign_id",
	}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("GET", baseURL, urlParams)
}
