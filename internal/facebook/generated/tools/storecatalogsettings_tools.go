// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetStoreCatalogSettingsTools returns MCP tools for StoreCatalogSettings
func GetStoreCatalogSettingsTools() []mcp.Tool {
	var tools []mcp.Tool

	// storecatalogsettings_delete_ tool
	storecatalogsettings_delete_Tool := mcp.NewTool("storecatalogsettings_delete_",
		mcp.WithDescription("DELETE  for StoreCatalogSettings"),
	)
	tools = append(tools, storecatalogsettings_delete_Tool)

	// storecatalogsettings_get_ tool
	storecatalogsettings_get_Tool := mcp.NewTool("storecatalogsettings_get_",
		mcp.WithDescription("GET  for StoreCatalogSettings"),
	)
	tools = append(tools, storecatalogsettings_get_Tool)

	return tools
}

// StoreCatalogSettings handlers

// HandleStorecatalogsettings_delete_ handles the storecatalogsettings_delete_ tool with context-based auth
func HandleStorecatalogsettings_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewStoreCatalogSettingsClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Storecatalogsettings_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute storecatalogsettings_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleStorecatalogsettings_get_ handles the storecatalogsettings_get_ tool with context-based auth
func HandleStorecatalogsettings_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewStoreCatalogSettingsClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Storecatalogsettings_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute storecatalogsettings_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
