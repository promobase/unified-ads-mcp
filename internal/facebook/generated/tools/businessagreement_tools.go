// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetBusinessAgreementTools returns MCP tools for BusinessAgreement
func GetBusinessAgreementTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool


	// facebook_businessagreement_get_ tool
	facebook_businessagreement_get_Tool := mcp.NewTool("facebook_businessagreement_get_",
		mcp.WithDescription("GET  for BusinessAgreement"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_businessagreement_get_Tool)

	// facebook_businessagreement_post_ tool
	facebook_businessagreement_post_Tool := mcp.NewTool("facebook_businessagreement_post_",
		mcp.WithDescription("POST  for BusinessAgreement"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithNumber("asset_id",
			mcp.Description("asset_id parameter for "),
		),
		mcp.WithString("request_status",
			mcp.Description("request_status parameter for "),
			mcp.Enum("APPROVE", "CANCELED", "DECLINE", "EXPIRED", "IN_PROGRESS", "PENDING", "PENDING_EMAIL_VERIFICATION", "PENDING_INTEGRITY_REVIEW"),
		),
	)
	tools = append(tools, facebook_businessagreement_post_Tool)


	return tools
}

// BusinessAgreement handlers


// HandleFacebook_businessagreement_get_ handles the facebook_businessagreement_get_ tool
func HandleFacebook_businessagreement_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAgreementClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_businessagreement_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessagreement_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_businessagreement_post_ handles the facebook_businessagreement_post_ tool
func HandleFacebook_businessagreement_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAgreementClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: asset_id
	if val := request.GetInt("asset_id", 0); val != 0 {
		args["asset_id"] = val
	}

	// Optional: request_status
	if val := request.GetString("request_status", ""); val != "" {
		args["request_status"] = val
	}



	// Call the client method
	result, err := client.Facebook_businessagreement_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessagreement_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

