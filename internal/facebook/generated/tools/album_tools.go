// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetAlbumTools returns MCP tools for Album
func GetAlbumTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool

	// facebook_album_get_comments tool
	facebook_album_get_commentsTool := mcp.NewTool("facebook_album_get_comments",
		mcp.WithDescription("GET comments for Album"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("filter",
			mcp.Description("filter parameter for comments"),
			mcp.Enum("stream", "toplevel"),
		),
		mcp.WithString("live_filter",
			mcp.Description("live_filter parameter for comments"),
			mcp.Enum("filter_low_quality", "no_filter"),
		),
		mcp.WithString("order",
			mcp.Description("order parameter for comments"),
			mcp.Enum("chronological", "reverse_chronological"),
		),
		mcp.WithString("since",
			mcp.Description("since parameter for comments"),
		),
	)
	tools = append(tools, facebook_album_get_commentsTool)

	// facebook_album_post_comments tool
	facebook_album_post_commentsTool := mcp.NewTool("facebook_album_post_comments",
		mcp.WithDescription("POST comments for Album"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("attachment_id",
			mcp.Description("attachment_id parameter for comments"),
		),
		mcp.WithString("attachment_share_url",
			mcp.Description("attachment_share_url parameter for comments"),
		),
		mcp.WithString("attachment_url",
			mcp.Description("attachment_url parameter for comments"),
		),
		mcp.WithString("comment_privacy_value",
			mcp.Description("comment_privacy_value parameter for comments"),
			mcp.Enum("DECLINED_BY_ADMIN_ASSISTANT", "DEFAULT_PRIVACY", "FRIENDS_AND_POST_OWNER", "FRIENDS_ONLY", "GRAPHQL_MULTIPLE_VALUE_HACK_DO_NOT_USE", "OWNER_OR_COMMENTER", "PENDING_APPROVAL", "REMOVED_BY_ADMIN_ASSISTANT", "SIDE_CONVERSATION", "SIDE_CONVERSATION_AND_POST_OWNER", "SPOTLIGHT_TAB"),
		),
		mcp.WithString("facepile_mentioned_ids",
			mcp.Description("facepile_mentioned_ids parameter for comments"),
		),
		mcp.WithString("feedback_source",
			mcp.Description("feedback_source parameter for comments"),
		),
		mcp.WithBoolean("is_offline",
			mcp.Description("is_offline parameter for comments"),
		),
		mcp.WithString("message",
			mcp.Description("message parameter for comments"),
		),
		mcp.WithString("nectar_module",
			mcp.Description("nectar_module parameter for comments"),
		),
		mcp.WithString("object_id",
			mcp.Description("object_id parameter for comments"),
		),
		mcp.WithString("parent_comment_id",
			mcp.Description("parent_comment_id parameter for comments"),
		),
		mcp.WithString("text",
			mcp.Description("text parameter for comments"),
		),
		mcp.WithString("tracking",
			mcp.Description("tracking parameter for comments"),
		),
	)
	tools = append(tools, facebook_album_post_commentsTool)

	// facebook_album_get_likes tool
	facebook_album_get_likesTool := mcp.NewTool("facebook_album_get_likes",
		mcp.WithDescription("GET likes for Album"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_album_get_likesTool)

	// facebook_album_post_likes tool
	facebook_album_post_likesTool := mcp.NewTool("facebook_album_post_likes",
		mcp.WithDescription("POST likes for Album"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("feedback_source",
			mcp.Description("feedback_source parameter for likes"),
		),
		mcp.WithString("nectar_module",
			mcp.Description("nectar_module parameter for likes"),
		),
		mcp.WithBoolean("notify",
			mcp.Description("notify parameter for likes"),
		),
		mcp.WithString("tracking",
			mcp.Description("tracking parameter for likes"),
		),
	)
	tools = append(tools, facebook_album_post_likesTool)

	// facebook_album_get_photos tool
	facebook_album_get_photosTool := mcp.NewTool("facebook_album_get_photos",
		mcp.WithDescription("GET photos for Album"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_album_get_photosTool)

	// facebook_album_post_photos tool
	facebook_album_post_photosTool := mcp.NewTool("facebook_album_post_photos",
		mcp.WithDescription("POST photos for Album"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("aid",
			mcp.Description("aid parameter for photos"),
		),
		mcp.WithBoolean("allow_spherical_photo",
			mcp.Description("allow_spherical_photo parameter for photos"),
		),
		mcp.WithString("alt_text_custom",
			mcp.Description("alt_text_custom parameter for photos"),
		),
		mcp.WithString("android_key_hash",
			mcp.Description("android_key_hash parameter for photos"),
		),
		mcp.WithString("application_id",
			mcp.Description("application_id parameter for photos"),
		),
		mcp.WithNumber("attempt",
			mcp.Description("attempt parameter for photos"),
		),
		mcp.WithBoolean("audience_exp",
			mcp.Description("audience_exp parameter for photos"),
		),
		mcp.WithString("backdated_time",
			mcp.Description("backdated_time parameter for photos"),
		),
		mcp.WithString("backdated_time_granularity",
			mcp.Description("backdated_time_granularity parameter for photos"),
			mcp.Enum("day", "hour", "min", "month", "none", "year"),
		),
		mcp.WithString("caption",
			mcp.Description("caption parameter for photos"),
		),
		mcp.WithString("composer_session_id",
			mcp.Description("composer_session_id parameter for photos"),
		),
		mcp.WithNumber("direct_share_status",
			mcp.Description("direct_share_status parameter for photos"),
		),
		mcp.WithString("feed_targeting",
			mcp.Description("feed_targeting parameter for photos"),
		),
		mcp.WithNumber("filter_type",
			mcp.Description("filter_type parameter for photos"),
		),
		mcp.WithBoolean("full_res_is_coming_later",
			mcp.Description("full_res_is_coming_later parameter for photos"),
		),
		mcp.WithNumber("initial_view_heading_override_degrees",
			mcp.Description("initial_view_heading_override_degrees parameter for photos"),
		),
		mcp.WithNumber("initial_view_pitch_override_degrees",
			mcp.Description("initial_view_pitch_override_degrees parameter for photos"),
		),
		mcp.WithNumber("initial_view_vertical_fov_override_degrees",
			mcp.Description("initial_view_vertical_fov_override_degrees parameter for photos"),
		),
		mcp.WithString("ios_bundle_id",
			mcp.Description("ios_bundle_id parameter for photos"),
		),
		mcp.WithBoolean("is_explicit_location",
			mcp.Description("is_explicit_location parameter for photos"),
		),
		mcp.WithBoolean("is_explicit_place",
			mcp.Description("is_explicit_place parameter for photos"),
		),
		mcp.WithBoolean("manual_privacy",
			mcp.Description("manual_privacy parameter for photos"),
		),
		mcp.WithString("message",
			mcp.Description("message parameter for photos"),
		),
		mcp.WithString("name",
			mcp.Description("name parameter for photos"),
		),
		mcp.WithBoolean("no_story",
			mcp.Description("no_story parameter for photos"),
		),
		mcp.WithNumber("offline_id",
			mcp.Description("offline_id parameter for photos"),
		),
		mcp.WithString("og_action_type_id",
			mcp.Description("og_action_type_id parameter for photos"),
		),
		mcp.WithString("og_icon_id",
			mcp.Description("og_icon_id parameter for photos"),
		),
		mcp.WithString("og_object_id",
			mcp.Description("og_object_id parameter for photos"),
		),
		mcp.WithString("og_phrase",
			mcp.Description("og_phrase parameter for photos"),
		),
		mcp.WithBoolean("og_set_profile_badge",
			mcp.Description("og_set_profile_badge parameter for photos"),
		),
		mcp.WithString("og_suggestion_mechanism",
			mcp.Description("og_suggestion_mechanism parameter for photos"),
		),
		mcp.WithString("place",
			mcp.Description("place parameter for photos"),
		),
		mcp.WithString("privacy",
			mcp.Description("privacy parameter for photos"),
		),
		mcp.WithNumber("profile_id",
			mcp.Description("profile_id parameter for photos"),
		),
		mcp.WithString("provenance_info",
			mcp.Description("provenance_info parameter for photos"),
		),
		mcp.WithString("proxied_app_id",
			mcp.Description("proxied_app_id parameter for photos"),
		),
		mcp.WithBoolean("published",
			mcp.Description("published parameter for photos"),
		),
		mcp.WithString("qn",
			mcp.Description("qn parameter for photos"),
		),
		mcp.WithString("spherical_metadata",
			mcp.Description("spherical_metadata parameter for photos"),
		),
		mcp.WithString("sponsor_id",
			mcp.Description("sponsor_id parameter for photos"),
		),
		mcp.WithNumber("sponsor_relationship",
			mcp.Description("sponsor_relationship parameter for photos"),
		),
		mcp.WithString("tags",
			mcp.Description("tags parameter for photos"),
		),
		mcp.WithNumber("target_id",
			mcp.Description("target_id parameter for photos"),
		),
		mcp.WithString("targeting",
			mcp.Description("targeting parameter for photos"),
		),
		mcp.WithNumber("time_since_original_post",
			mcp.Description("time_since_original_post parameter for photos"),
		),
		mcp.WithNumber("uid",
			mcp.Description("uid parameter for photos"),
		),
		mcp.WithString("unpublished_content_type",
			mcp.Description("unpublished_content_type parameter for photos"),
			mcp.Enum("ADS_POST", "DRAFT", "INLINE_CREATED", "PUBLISHED", "REVIEWABLE_BRANDED_CONTENT", "SCHEDULED", "SCHEDULED_RECURRING"),
		),
		mcp.WithString("url",
			mcp.Description("url parameter for photos"),
		),
		mcp.WithBoolean("user_selected_tags",
			mcp.Description("user_selected_tags parameter for photos"),
		),
		mcp.WithString("vault_image_id",
			mcp.Description("vault_image_id parameter for photos"),
		),
	)
	tools = append(tools, facebook_album_post_photosTool)

	// facebook_album_get_picture tool
	facebook_album_get_pictureTool := mcp.NewTool("facebook_album_get_picture",
		mcp.WithDescription("GET picture for Album"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithBoolean("redirect",
			mcp.Description("redirect parameter for picture"),
		),
		mcp.WithString("type",
			mcp.Description("type parameter for picture"),
			mcp.Enum("album", "small", "thumbnail"),
		),
	)
	tools = append(tools, facebook_album_get_pictureTool)

	// facebook_album_get_ tool
	facebook_album_get_Tool := mcp.NewTool("facebook_album_get_",
		mcp.WithDescription("GET  for Album"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_album_get_Tool)

	return tools
}

// Album handlers

// HandleFacebook_album_get_comments handles the facebook_album_get_comments tool
func HandleFacebook_album_get_comments(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAlbumClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: filter
	if val := request.GetString("filter", ""); val != "" {
		args["filter"] = val
	}

	// Optional: live_filter
	if val := request.GetString("live_filter", ""); val != "" {
		args["live_filter"] = val
	}

	// Optional: order
	if val := request.GetString("order", ""); val != "" {
		args["order"] = val
	}

	// Optional: since
	if val := request.GetString("since", ""); val != "" {
		args["since"] = val
	}

	// Call the client method
	result, err := client.Facebook_album_get_comments(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_album_get_comments: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_album_post_comments handles the facebook_album_post_comments tool
func HandleFacebook_album_post_comments(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAlbumClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: attachment_id
	if val := request.GetString("attachment_id", ""); val != "" {
		args["attachment_id"] = val
	}

	// Optional: attachment_share_url
	if val := request.GetString("attachment_share_url", ""); val != "" {
		args["attachment_share_url"] = val
	}

	// Optional: attachment_url
	if val := request.GetString("attachment_url", ""); val != "" {
		args["attachment_url"] = val
	}

	// Optional: comment_privacy_value
	if val := request.GetString("comment_privacy_value", ""); val != "" {
		args["comment_privacy_value"] = val
	}

	// Optional: facepile_mentioned_ids
	// array type - using string
	if val := request.GetString("facepile_mentioned_ids", ""); val != "" {
		args["facepile_mentioned_ids"] = val
	}

	// Optional: feedback_source
	if val := request.GetString("feedback_source", ""); val != "" {
		args["feedback_source"] = val
	}

	// Optional: is_offline
	if val := request.GetBool("is_offline", false); val {
		args["is_offline"] = val
	}

	// Optional: message
	if val := request.GetString("message", ""); val != "" {
		args["message"] = val
	}

	// Optional: nectar_module
	if val := request.GetString("nectar_module", ""); val != "" {
		args["nectar_module"] = val
	}

	// Optional: object_id
	if val := request.GetString("object_id", ""); val != "" {
		args["object_id"] = val
	}

	// Optional: parent_comment_id
	// object type - using string
	if val := request.GetString("parent_comment_id", ""); val != "" {
		args["parent_comment_id"] = val
	}

	// Optional: text
	if val := request.GetString("text", ""); val != "" {
		args["text"] = val
	}

	// Optional: tracking
	if val := request.GetString("tracking", ""); val != "" {
		args["tracking"] = val
	}

	// Call the client method
	result, err := client.Facebook_album_post_comments(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_album_post_comments: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_album_get_likes handles the facebook_album_get_likes tool
func HandleFacebook_album_get_likes(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAlbumClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_album_get_likes(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_album_get_likes: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_album_post_likes handles the facebook_album_post_likes tool
func HandleFacebook_album_post_likes(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAlbumClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: feedback_source
	if val := request.GetString("feedback_source", ""); val != "" {
		args["feedback_source"] = val
	}

	// Optional: nectar_module
	if val := request.GetString("nectar_module", ""); val != "" {
		args["nectar_module"] = val
	}

	// Optional: notify
	if val := request.GetBool("notify", false); val {
		args["notify"] = val
	}

	// Optional: tracking
	if val := request.GetString("tracking", ""); val != "" {
		args["tracking"] = val
	}

	// Call the client method
	result, err := client.Facebook_album_post_likes(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_album_post_likes: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_album_get_photos handles the facebook_album_get_photos tool
func HandleFacebook_album_get_photos(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAlbumClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_album_get_photos(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_album_get_photos: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_album_post_photos handles the facebook_album_post_photos tool
func HandleFacebook_album_post_photos(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAlbumClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: aid
	if val := request.GetString("aid", ""); val != "" {
		args["aid"] = val
	}

	// Optional: allow_spherical_photo
	if val := request.GetBool("allow_spherical_photo", false); val {
		args["allow_spherical_photo"] = val
	}

	// Optional: alt_text_custom
	if val := request.GetString("alt_text_custom", ""); val != "" {
		args["alt_text_custom"] = val
	}

	// Optional: android_key_hash
	if val := request.GetString("android_key_hash", ""); val != "" {
		args["android_key_hash"] = val
	}

	// Optional: application_id
	if val := request.GetString("application_id", ""); val != "" {
		args["application_id"] = val
	}

	// Optional: attempt
	if val := request.GetInt("attempt", 0); val != 0 {
		args["attempt"] = val
	}

	// Optional: audience_exp
	if val := request.GetBool("audience_exp", false); val {
		args["audience_exp"] = val
	}

	// Optional: backdated_time
	if val := request.GetString("backdated_time", ""); val != "" {
		args["backdated_time"] = val
	}

	// Optional: backdated_time_granularity
	if val := request.GetString("backdated_time_granularity", ""); val != "" {
		args["backdated_time_granularity"] = val
	}

	// Optional: caption
	if val := request.GetString("caption", ""); val != "" {
		args["caption"] = val
	}

	// Optional: composer_session_id
	if val := request.GetString("composer_session_id", ""); val != "" {
		args["composer_session_id"] = val
	}

	// Optional: direct_share_status
	if val := request.GetInt("direct_share_status", 0); val != 0 {
		args["direct_share_status"] = val
	}

	// Optional: feed_targeting
	// object type - using string
	if val := request.GetString("feed_targeting", ""); val != "" {
		args["feed_targeting"] = val
	}

	// Optional: filter_type
	if val := request.GetInt("filter_type", 0); val != 0 {
		args["filter_type"] = val
	}

	// Optional: full_res_is_coming_later
	if val := request.GetBool("full_res_is_coming_later", false); val {
		args["full_res_is_coming_later"] = val
	}

	// Optional: initial_view_heading_override_degrees
	if val := request.GetInt("initial_view_heading_override_degrees", 0); val != 0 {
		args["initial_view_heading_override_degrees"] = val
	}

	// Optional: initial_view_pitch_override_degrees
	if val := request.GetInt("initial_view_pitch_override_degrees", 0); val != 0 {
		args["initial_view_pitch_override_degrees"] = val
	}

	// Optional: initial_view_vertical_fov_override_degrees
	if val := request.GetInt("initial_view_vertical_fov_override_degrees", 0); val != 0 {
		args["initial_view_vertical_fov_override_degrees"] = val
	}

	// Optional: ios_bundle_id
	if val := request.GetString("ios_bundle_id", ""); val != "" {
		args["ios_bundle_id"] = val
	}

	// Optional: is_explicit_location
	if val := request.GetBool("is_explicit_location", false); val {
		args["is_explicit_location"] = val
	}

	// Optional: is_explicit_place
	if val := request.GetBool("is_explicit_place", false); val {
		args["is_explicit_place"] = val
	}

	// Optional: manual_privacy
	if val := request.GetBool("manual_privacy", false); val {
		args["manual_privacy"] = val
	}

	// Optional: message
	if val := request.GetString("message", ""); val != "" {
		args["message"] = val
	}

	// Optional: name
	if val := request.GetString("name", ""); val != "" {
		args["name"] = val
	}

	// Optional: no_story
	if val := request.GetBool("no_story", false); val {
		args["no_story"] = val
	}

	// Optional: offline_id
	if val := request.GetInt("offline_id", 0); val != 0 {
		args["offline_id"] = val
	}

	// Optional: og_action_type_id
	if val := request.GetString("og_action_type_id", ""); val != "" {
		args["og_action_type_id"] = val
	}

	// Optional: og_icon_id
	if val := request.GetString("og_icon_id", ""); val != "" {
		args["og_icon_id"] = val
	}

	// Optional: og_object_id
	if val := request.GetString("og_object_id", ""); val != "" {
		args["og_object_id"] = val
	}

	// Optional: og_phrase
	if val := request.GetString("og_phrase", ""); val != "" {
		args["og_phrase"] = val
	}

	// Optional: og_set_profile_badge
	if val := request.GetBool("og_set_profile_badge", false); val {
		args["og_set_profile_badge"] = val
	}

	// Optional: og_suggestion_mechanism
	if val := request.GetString("og_suggestion_mechanism", ""); val != "" {
		args["og_suggestion_mechanism"] = val
	}

	// Optional: place
	// object type - using string
	if val := request.GetString("place", ""); val != "" {
		args["place"] = val
	}

	// Optional: privacy
	if val := request.GetString("privacy", ""); val != "" {
		args["privacy"] = val
	}

	// Optional: profile_id
	if val := request.GetInt("profile_id", 0); val != 0 {
		args["profile_id"] = val
	}

	// Optional: provenance_info
	if val := request.GetString("provenance_info", ""); val != "" {
		args["provenance_info"] = val
	}

	// Optional: proxied_app_id
	if val := request.GetString("proxied_app_id", ""); val != "" {
		args["proxied_app_id"] = val
	}

	// Optional: published
	if val := request.GetBool("published", false); val {
		args["published"] = val
	}

	// Optional: qn
	if val := request.GetString("qn", ""); val != "" {
		args["qn"] = val
	}

	// Optional: spherical_metadata
	if val := request.GetString("spherical_metadata", ""); val != "" {
		args["spherical_metadata"] = val
	}

	// Optional: sponsor_id
	if val := request.GetString("sponsor_id", ""); val != "" {
		args["sponsor_id"] = val
	}

	// Optional: sponsor_relationship
	if val := request.GetInt("sponsor_relationship", 0); val != 0 {
		args["sponsor_relationship"] = val
	}

	// Optional: tags
	// array type - using string
	if val := request.GetString("tags", ""); val != "" {
		args["tags"] = val
	}

	// Optional: target_id
	if val := request.GetInt("target_id", 0); val != 0 {
		args["target_id"] = val
	}

	// Optional: targeting
	// object type - using string
	if val := request.GetString("targeting", ""); val != "" {
		args["targeting"] = val
	}

	// Optional: time_since_original_post
	if val := request.GetInt("time_since_original_post", 0); val != 0 {
		args["time_since_original_post"] = val
	}

	// Optional: uid
	if val := request.GetInt("uid", 0); val != 0 {
		args["uid"] = val
	}

	// Optional: unpublished_content_type
	if val := request.GetString("unpublished_content_type", ""); val != "" {
		args["unpublished_content_type"] = val
	}

	// Optional: url
	if val := request.GetString("url", ""); val != "" {
		args["url"] = val
	}

	// Optional: user_selected_tags
	if val := request.GetBool("user_selected_tags", false); val {
		args["user_selected_tags"] = val
	}

	// Optional: vault_image_id
	if val := request.GetString("vault_image_id", ""); val != "" {
		args["vault_image_id"] = val
	}

	// Call the client method
	result, err := client.Facebook_album_post_photos(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_album_post_photos: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_album_get_picture handles the facebook_album_get_picture tool
func HandleFacebook_album_get_picture(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAlbumClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: redirect
	if val := request.GetBool("redirect", false); val {
		args["redirect"] = val
	}

	// Optional: type
	if val := request.GetString("type", ""); val != "" {
		args["type"] = val
	}

	// Call the client method
	result, err := client.Facebook_album_get_picture(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_album_get_picture: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_album_get_ handles the facebook_album_get_ tool
func HandleFacebook_album_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAlbumClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_album_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_album_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
