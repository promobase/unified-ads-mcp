// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetAdRuleTools returns MCP tools for AdRule
func GetAdRuleTools() []mcp.Tool {
	var tools []mcp.Tool

	// adrule_post_execute tool
	adrule_post_executeTool := mcp.NewTool("adrule_post_execute",
		mcp.WithDescription("POST execute for AdRule"),
	)
	tools = append(tools, adrule_post_executeTool)

	// adrule_get_history tool
	// Available fields for AdRuleHistory: evaluation_spec, exception_code, exception_message, execution_spec, is_manual, results, schedule_spec, timestamp
	// Params object accepts: action (adrulehistory_action_enum_param), hide_no_changes (bool), object_id (string)
	adrule_get_historyTool := mcp.NewTool("adrule_get_history",
		mcp.WithDescription("GET history for AdRule"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"action": map[string]any{
					"type":        "string",
					"description": "action parameter",
					"enum":        []string{"BUDGET_NOT_REDISTRIBUTED", "CHANGED_BID", "CHANGED_BUDGET", "CONSOLIDATE_ASC_FRAGMENTATION", "CONSOLIDATE_FRAGMENTATION", "CONVERT_ASC_CP_SINGLE_INSTANCE", "EMAIL", "ENABLE_ADVANTAGE_CAMPAIGN_BUDGET", "ENABLE_ADVANTAGE_PLUS_AUDIENCE", "ENABLE_ADVANTAGE_PLUS_CREATIVE", "ENABLE_ADVANTAGE_PLUS_PLACEMENTS", "ENABLE_AUTOFLOW", "ENABLE_GEN_UNCROP", "ENABLE_LANDING_PAGE_VIEWS", "ENABLE_MUSIC", "ENABLE_REELS_PLACEMENTS", "ENABLE_SEMANTIC_BASED_AUDIENCE_EXPANSION", "ENABLE_SHOPS_ADS", "ENDPOINT_PINGED", "ERROR", "FACEBOOK_NOTIFICATION_SENT", "MESSAGE_SENT", "NOT_CHANGED", "PAUSED", "UNPAUSED"},
				},
				"hide_no_changes": map[string]any{
					"type":        "boolean",
					"description": "hide_no_changes parameter",
				},
				"object_id": map[string]any{
					"type":        "string",
					"description": "object_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: action (enum) [BUDGET_NOT_REDISTRIBUTED, CHANGED_BID, CHANGED_BUDGET, CONSOLIDATE_ASC_FRAGMENTATION, CONSOLIDATE_FRAGMENTATION, ...], hide_no_changes (boolean), object_id (string)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for AdRuleHistory objects. Available fields: evaluation_spec, exception_code, exception_message, execution_spec, is_manual, results, schedule_spec, timestamp"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, adrule_get_historyTool)

	// adrule_post_preview tool
	adrule_post_previewTool := mcp.NewTool("adrule_post_preview",
		mcp.WithDescription("POST preview for AdRule"),
	)
	tools = append(tools, adrule_post_previewTool)

	// adrule_delete_ tool
	adrule_delete_Tool := mcp.NewTool("adrule_delete_",
		mcp.WithDescription("DELETE  for AdRule"),
	)
	tools = append(tools, adrule_delete_Tool)

	// adrule_get_ tool
	// Available fields for AdRule: account_id, created_by, created_time, disable_error_code, evaluation_spec, execution_spec, id, name, schedule_spec, status, updated_time
	adrule_get_Tool := mcp.NewTool("adrule_get_",
		mcp.WithDescription("GET  for AdRule"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for AdRule objects. Available fields: account_id, created_by, created_time, disable_error_code, evaluation_spec, execution_spec, id, name, schedule_spec, status, updated_time"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, adrule_get_Tool)

	// adrule_post_ tool
	// Params object accepts: evaluation_spec (Object), execution_spec (Object), name (string), schedule_spec (Object), status (adrule_status)
	adrule_post_Tool := mcp.NewTool("adrule_post_",
		mcp.WithDescription("POST  for AdRule"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"evaluation_spec": map[string]any{
					"type":        "object",
					"description": "evaluation_spec parameter",
				},
				"execution_spec": map[string]any{
					"type":        "object",
					"description": "execution_spec parameter",
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
				},
				"schedule_spec": map[string]any{
					"type":        "object",
					"description": "schedule_spec parameter",
				},
				"status": map[string]any{
					"type":        "string",
					"description": "status parameter",
					"enum":        []string{"DELETED", "DISABLED", "ENABLED", "HAS_ISSUES"},
				},
			}),
			mcp.Description("Parameters object containing: evaluation_spec (object), execution_spec (object), name (string), schedule_spec (object), status (adrule_status) [DELETED, DISABLED, ENABLED, HAS_ISSUES]"),
		),
	)
	tools = append(tools, adrule_post_Tool)

	return tools
}

// AdRule handlers

// HandleAdrule_post_execute handles the adrule_post_execute tool with context-based auth
func HandleAdrule_post_execute(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdRuleClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Adrule_post_execute(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adrule_post_execute: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAdrule_get_history handles the adrule_get_history tool with context-based auth
func HandleAdrule_get_history(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdRuleClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Adrule_get_history(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adrule_get_history: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAdrule_post_preview handles the adrule_post_preview tool with context-based auth
func HandleAdrule_post_preview(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdRuleClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Adrule_post_preview(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adrule_post_preview: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAdrule_delete_ handles the adrule_delete_ tool with context-based auth
func HandleAdrule_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdRuleClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Adrule_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adrule_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAdrule_get_ handles the adrule_get_ tool with context-based auth
func HandleAdrule_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdRuleClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Adrule_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adrule_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAdrule_post_ handles the adrule_post_ tool with context-based auth
func HandleAdrule_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdRuleClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Call the client method
	result, err := client.Adrule_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adrule_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
