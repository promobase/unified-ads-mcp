// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetAdRuleTools returns MCP tools for AdRule
func GetAdRuleTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool


	// facebook_adrule_post_execute tool
	facebook_adrule_post_executeTool := mcp.NewTool("facebook_adrule_post_execute",
		mcp.WithDescription("POST execute for AdRule"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_adrule_post_executeTool)

	// facebook_adrule_get_history tool
	facebook_adrule_get_historyTool := mcp.NewTool("facebook_adrule_get_history",
		mcp.WithDescription("GET history for AdRule"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("action",
			mcp.Description("action parameter for history"),
			mcp.Enum("BUDGET_NOT_REDISTRIBUTED", "CHANGED_BID", "CHANGED_BUDGET", "CONSOLIDATE_ASC_FRAGMENTATION", "CONSOLIDATE_FRAGMENTATION", "CONVERT_ASC_CP_SINGLE_INSTANCE", "EMAIL", "ENABLE_ADVANTAGE_CAMPAIGN_BUDGET", "ENABLE_ADVANTAGE_PLUS_AUDIENCE", "ENABLE_ADVANTAGE_PLUS_CREATIVE", "ENABLE_ADVANTAGE_PLUS_PLACEMENTS", "ENABLE_AUTOFLOW", "ENABLE_GEN_UNCROP", "ENABLE_LANDING_PAGE_VIEWS", "ENABLE_MUSIC", "ENABLE_REELS_PLACEMENTS", "ENABLE_SEMANTIC_BASED_AUDIENCE_EXPANSION", "ENABLE_SHOPS_ADS", "ENDPOINT_PINGED", "ERROR", "FACEBOOK_NOTIFICATION_SENT", "MESSAGE_SENT", "NOT_CHANGED", "PAUSED", "UNPAUSED"),
		),
		mcp.WithBoolean("hide_no_changes",
			mcp.Description("hide_no_changes parameter for history"),
		),
		mcp.WithString("object_id",
			mcp.Description("object_id parameter for history"),
		),
	)
	tools = append(tools, facebook_adrule_get_historyTool)

	// facebook_adrule_post_preview tool
	facebook_adrule_post_previewTool := mcp.NewTool("facebook_adrule_post_preview",
		mcp.WithDescription("POST preview for AdRule"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_adrule_post_previewTool)

	// facebook_adrule_delete_ tool
	facebook_adrule_delete_Tool := mcp.NewTool("facebook_adrule_delete_",
		mcp.WithDescription("DELETE  for AdRule"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_adrule_delete_Tool)

	// facebook_adrule_get_ tool
	facebook_adrule_get_Tool := mcp.NewTool("facebook_adrule_get_",
		mcp.WithDescription("GET  for AdRule"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_adrule_get_Tool)

	// facebook_adrule_post_ tool
	facebook_adrule_post_Tool := mcp.NewTool("facebook_adrule_post_",
		mcp.WithDescription("POST  for AdRule"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("evaluation_spec",
			mcp.Description("evaluation_spec parameter for "),
		),
		mcp.WithString("execution_spec",
			mcp.Description("execution_spec parameter for "),
		),
		mcp.WithString("name",
			mcp.Description("name parameter for "),
		),
		mcp.WithString("schedule_spec",
			mcp.Description("schedule_spec parameter for "),
		),
		mcp.WithString("status",
			mcp.Description("status parameter for "),
			mcp.Enum("DELETED", "DISABLED", "ENABLED", "HAS_ISSUES"),
		),
	)
	tools = append(tools, facebook_adrule_post_Tool)


	return tools
}

// AdRule handlers


// HandleFacebook_adrule_post_execute handles the facebook_adrule_post_execute tool
func HandleFacebook_adrule_post_execute(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAdRuleClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_adrule_post_execute(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_adrule_post_execute: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_adrule_get_history handles the facebook_adrule_get_history tool
func HandleFacebook_adrule_get_history(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAdRuleClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: action
	if val := request.GetString("action", ""); val != "" {
		args["action"] = val
	}

	// Optional: hide_no_changes
	if val := request.GetBool("hide_no_changes", false); val {
		args["hide_no_changes"] = val
	}

	// Optional: object_id
	if val := request.GetString("object_id", ""); val != "" {
		args["object_id"] = val
	}



	// Call the client method
	result, err := client.Facebook_adrule_get_history(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_adrule_get_history: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_adrule_post_preview handles the facebook_adrule_post_preview tool
func HandleFacebook_adrule_post_preview(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAdRuleClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_adrule_post_preview(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_adrule_post_preview: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_adrule_delete_ handles the facebook_adrule_delete_ tool
func HandleFacebook_adrule_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAdRuleClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_adrule_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_adrule_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_adrule_get_ handles the facebook_adrule_get_ tool
func HandleFacebook_adrule_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAdRuleClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_adrule_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_adrule_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_adrule_post_ handles the facebook_adrule_post_ tool
func HandleFacebook_adrule_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAdRuleClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: evaluation_spec
	// object type - using string
	if val := request.GetString("evaluation_spec", ""); val != "" {
		args["evaluation_spec"] = val
	}

	// Optional: execution_spec
	// object type - using string
	if val := request.GetString("execution_spec", ""); val != "" {
		args["execution_spec"] = val
	}

	// Optional: name
	if val := request.GetString("name", ""); val != "" {
		args["name"] = val
	}

	// Optional: schedule_spec
	// object type - using string
	if val := request.GetString("schedule_spec", ""); val != "" {
		args["schedule_spec"] = val
	}

	// Optional: status
	if val := request.GetString("status", ""); val != "" {
		args["status"] = val
	}



	// Call the client method
	result, err := client.Facebook_adrule_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_adrule_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

