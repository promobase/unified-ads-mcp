// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetApplicationTools returns MCP tools for Application
func GetApplicationTools() []mcp.Tool {
	var tools []mcp.Tool

	// application_delete_accounts tool
	application_delete_accountsTool := mcp.NewTool("application_delete_accounts",
		mcp.WithDescription("DELETE accounts for Application"),
		mcp.WithString("type",
			mcp.Description("type parameter for accounts"),
			mcp.Enum("test-users"),
		),
		mcp.WithNumber("uid",
			mcp.Required(),
			mcp.Description("uid parameter for accounts"),
		),
	)
	tools = append(tools, application_delete_accountsTool)

	// application_get_accounts tool
	application_get_accountsTool := mcp.NewTool("application_get_accounts",
		mcp.WithDescription("GET accounts for Application"),
		mcp.WithString("type",
			mcp.Description("type parameter for accounts"),
			mcp.Enum("test-users"),
		),
	)
	tools = append(tools, application_get_accountsTool)

	// application_post_accounts tool
	application_post_accountsTool := mcp.NewTool("application_post_accounts",
		mcp.WithDescription("POST accounts for Application"),
		mcp.WithBoolean("installed",
			mcp.Description("installed parameter for accounts"),
		),
		mcp.WithBoolean("minor",
			mcp.Description("minor parameter for accounts"),
		),
		mcp.WithString("name",
			mcp.Description("name parameter for accounts"),
		),
		mcp.WithString("owner_access_token",
			mcp.Description("owner_access_token parameter for accounts"),
		),
		mcp.WithString("permissions",
			mcp.Description("permissions parameter for accounts"),
		),
		mcp.WithString("type",
			mcp.Description("type parameter for accounts"),
			mcp.Enum("test-users"),
		),
		mcp.WithNumber("uid",
			mcp.Description("uid parameter for accounts"),
		),
	)
	tools = append(tools, application_post_accountsTool)

	// application_post_activities tool
	application_post_activitiesTool := mcp.NewTool("application_post_activities",
		mcp.WithDescription("POST activities for Application"),
		mcp.WithString("advertiser_id",
			mcp.Description("advertiser_id parameter for activities"),
		),
		mcp.WithBoolean("advertiser_tracking_enabled",
			mcp.Description("advertiser_tracking_enabled parameter for activities"),
		),
		mcp.WithString("anon_id",
			mcp.Description("anon_id parameter for activities"),
		),
		mcp.WithString("app_user_id",
			mcp.Description("app_user_id parameter for activities"),
		),
		mcp.WithBoolean("application_tracking_enabled",
			mcp.Description("application_tracking_enabled parameter for activities"),
		),
		mcp.WithString("attribution",
			mcp.Description("attribution parameter for activities"),
		),
		mcp.WithString("attribution_referrer",
			mcp.Description("attribution_referrer parameter for activities"),
		),
		mcp.WithString("attribution_sources",
			mcp.Description("attribution_sources parameter for activities"),
		),
		mcp.WithBoolean("auto_publish",
			mcp.Description("auto_publish parameter for activities"),
		),
		mcp.WithString("bundle_id",
			mcp.Description("bundle_id parameter for activities"),
		),
		mcp.WithString("bundle_short_version",
			mcp.Description("bundle_short_version parameter for activities"),
		),
		mcp.WithString("bundle_version",
			mcp.Description("bundle_version parameter for activities"),
		),
		mcp.WithString("campaign_ids",
			mcp.Description("campaign_ids parameter for activities"),
		),
		mcp.WithString("click_id",
			mcp.Description("click_id parameter for activities"),
		),
		mcp.WithBoolean("consider_views",
			mcp.Description("consider_views parameter for activities"),
		),
		mcp.WithString("custom_events",
			mcp.Description("custom_events parameter for activities"),
		),
		mcp.WithString("custom_events_file",
			mcp.Description("custom_events_file parameter for activities"),
		),
		mcp.WithString("data_processing_options",
			mcp.Description("data_processing_options parameter for activities"),
		),
		mcp.WithNumber("data_processing_options_country",
			mcp.Description("data_processing_options_country parameter for activities"),
		),
		mcp.WithNumber("data_processing_options_state",
			mcp.Description("data_processing_options_state parameter for activities"),
		),
		mcp.WithString("device_token",
			mcp.Description("device_token parameter for activities"),
		),
		mcp.WithString("event",
			mcp.Required(),
			mcp.Description("event parameter for activities"),
			mcp.Enum("CUSTOM_APP_EVENTS", "DEFERRED_APP_LINK", "MOBILE_APP_INSTALL"),
		),
		mcp.WithString("event_id",
			mcp.Description("event_id parameter for activities"),
		),
		mcp.WithString("extinfo",
			mcp.Description("extinfo parameter for activities"),
		),
		mcp.WithString("google_install_referrer",
			mcp.Description("google_install_referrer parameter for activities"),
		),
		mcp.WithBoolean("include_dwell_data",
			mcp.Description("include_dwell_data parameter for activities"),
		),
		mcp.WithBoolean("include_video_data",
			mcp.Description("include_video_data parameter for activities"),
		),
		mcp.WithString("install_id",
			mcp.Description("install_id parameter for activities"),
		),
		mcp.WithString("install_referrer",
			mcp.Description("install_referrer parameter for activities"),
		),
		mcp.WithNumber("install_timestamp",
			mcp.Description("install_timestamp parameter for activities"),
		),
		mcp.WithString("installer_package",
			mcp.Description("installer_package parameter for activities"),
		),
		mcp.WithBoolean("is_fb",
			mcp.Description("is_fb parameter for activities"),
		),
		mcp.WithBoolean("limited_data_use",
			mcp.Description("limited_data_use parameter for activities"),
		),
		mcp.WithString("meta_install_referrer",
			mcp.Description("meta_install_referrer parameter for activities"),
		),
		mcp.WithString("migration_bundle",
			mcp.Description("migration_bundle parameter for activities"),
		),
		mcp.WithString("operational_parameters",
			mcp.Description("operational_parameters parameter for activities"),
		),
		mcp.WithNumber("page_id",
			mcp.Description("page_id parameter for activities"),
		),
		mcp.WithNumber("page_scoped_user_id",
			mcp.Description("page_scoped_user_id parameter for activities"),
		),
		mcp.WithString("receipt_data",
			mcp.Description("receipt_data parameter for activities"),
		),
		mcp.WithString("sdk_version",
			mcp.Description("sdk_version parameter for activities"),
		),
		mcp.WithString("ud",
			mcp.Description("ud parameter for activities"),
		),
		mcp.WithString("url_schemes",
			mcp.Description("url_schemes parameter for activities"),
		),
		mcp.WithString("user_id",
			mcp.Description("user_id parameter for activities"),
		),
		mcp.WithString("user_id_type",
			mcp.Description("user_id_type parameter for activities"),
			mcp.Enum("INSTANT_GAMES_PLAYER_ID"),
		),
		mcp.WithString("vendor_id",
			mcp.Description("vendor_id parameter for activities"),
		),
		mcp.WithString("windows_attribution_id",
			mcp.Description("windows_attribution_id parameter for activities"),
		),
	)
	tools = append(tools, application_post_activitiesTool)

	// application_get_ad_placement_groups tool
	application_get_ad_placement_groupsTool := mcp.NewTool("application_get_ad_placement_groups",
		mcp.WithDescription("GET ad_placement_groups for Application"),
	)
	tools = append(tools, application_get_ad_placement_groupsTool)

	// application_get_adnetwork_placements tool
	application_get_adnetwork_placementsTool := mcp.NewTool("application_get_adnetwork_placements",
		mcp.WithDescription("GET adnetwork_placements for Application"),
		mcp.WithString("request_id",
			mcp.Description("request_id parameter for adnetwork_placements"),
		),
	)
	tools = append(tools, application_get_adnetwork_placementsTool)

	// application_get_adnetworkanalytics tool
	application_get_adnetworkanalyticsTool := mcp.NewTool("application_get_adnetworkanalytics",
		mcp.WithDescription("GET adnetworkanalytics for Application"),
		mcp.WithString("aggregation_period",
			mcp.Description("aggregation_period parameter for adnetworkanalytics"),
			mcp.Enum("DAY", "TOTAL"),
		),
		mcp.WithString("breakdowns",
			mcp.Description("breakdowns parameter for adnetworkanalytics"),
			mcp.Enum("AD_SERVER_CAMPAIGN_ID", "AD_SPACE", "AGE", "APP", "CLICKED_VIEW_TAG", "COUNTRY", "DEAL", "DEAL_AD", "DEAL_PAGE", "DELIVERY_METHOD", "DISPLAY_FORMAT", "FAIL_REASON", "GENDER", "INSTANT_ARTICLE_ID", "INSTANT_ARTICLE_PAGE_ID", "IS_DEAL_BACKFILL", "PLACEMENT", "PLACEMENT_NAME", "PLATFORM", "PROPERTY", "SDK_VERSION"),
		),
		mcp.WithString("filters",
			mcp.Description("filters parameter for adnetworkanalytics"),
		),
		mcp.WithNumber("limit",
			mcp.Description("limit parameter for adnetworkanalytics"),
		),
		mcp.WithString("metrics",
			mcp.Required(),
			mcp.Description("metrics parameter for adnetworkanalytics"),
			mcp.Enum("FB_AD_NETWORK_BIDDING_BID_RATE", "FB_AD_NETWORK_BIDDING_REQUEST", "FB_AD_NETWORK_BIDDING_RESPONSE", "FB_AD_NETWORK_BIDDING_REVENUE", "FB_AD_NETWORK_BIDDING_WIN_RATE", "FB_AD_NETWORK_CLICK", "FB_AD_NETWORK_CPM", "FB_AD_NETWORK_CTR", "FB_AD_NETWORK_FILLED_REQUEST", "FB_AD_NETWORK_FILL_RATE", "FB_AD_NETWORK_IMP", "FB_AD_NETWORK_IMPRESSION_RATE", "FB_AD_NETWORK_REQUEST", "FB_AD_NETWORK_REVENUE", "FB_AD_NETWORK_SHOW_RATE", "FB_AD_NETWORK_VIDEO_GUARANTEE_REVENUE", "FB_AD_NETWORK_VIDEO_MRC", "FB_AD_NETWORK_VIDEO_MRC_RATE", "FB_AD_NETWORK_VIDEO_VIEW", "FB_AD_NETWORK_VIDEO_VIEW_RATE"),
		),
		mcp.WithString("ordering_column",
			mcp.Description("ordering_column parameter for adnetworkanalytics"),
			mcp.Enum("METRIC", "TIME", "VALUE"),
		),
		mcp.WithString("ordering_type",
			mcp.Description("ordering_type parameter for adnetworkanalytics"),
			mcp.Enum("ASCENDING", "DESCENDING"),
		),
		mcp.WithBoolean("should_include_until",
			mcp.Description("should_include_until parameter for adnetworkanalytics"),
		),
		mcp.WithString("since",
			mcp.Description("since parameter for adnetworkanalytics"),
		),
		mcp.WithString("until",
			mcp.Description("until parameter for adnetworkanalytics"),
		),
	)
	tools = append(tools, application_get_adnetworkanalyticsTool)

	// application_post_adnetworkanalytics tool
	application_post_adnetworkanalyticsTool := mcp.NewTool("application_post_adnetworkanalytics",
		mcp.WithDescription("POST adnetworkanalytics for Application"),
		mcp.WithString("aggregation_period",
			mcp.Description("aggregation_period parameter for adnetworkanalytics"),
			mcp.Enum("DAY", "TOTAL"),
		),
		mcp.WithString("breakdowns",
			mcp.Description("breakdowns parameter for adnetworkanalytics"),
			mcp.Enum("AD_SERVER_CAMPAIGN_ID", "AD_SPACE", "AGE", "APP", "CLICKED_VIEW_TAG", "COUNTRY", "DEAL", "DEAL_AD", "DEAL_PAGE", "DELIVERY_METHOD", "DISPLAY_FORMAT", "FAIL_REASON", "GENDER", "INSTANT_ARTICLE_ID", "INSTANT_ARTICLE_PAGE_ID", "IS_DEAL_BACKFILL", "PLACEMENT", "PLACEMENT_NAME", "PLATFORM", "PROPERTY", "SDK_VERSION"),
		),
		mcp.WithString("filters",
			mcp.Description("filters parameter for adnetworkanalytics"),
		),
		mcp.WithNumber("limit",
			mcp.Description("limit parameter for adnetworkanalytics"),
		),
		mcp.WithString("metrics",
			mcp.Required(),
			mcp.Description("metrics parameter for adnetworkanalytics"),
			mcp.Enum("FB_AD_NETWORK_BIDDING_BID_RATE", "FB_AD_NETWORK_BIDDING_REQUEST", "FB_AD_NETWORK_BIDDING_RESPONSE", "FB_AD_NETWORK_BIDDING_REVENUE", "FB_AD_NETWORK_BIDDING_WIN_RATE", "FB_AD_NETWORK_CLICK", "FB_AD_NETWORK_CPM", "FB_AD_NETWORK_CTR", "FB_AD_NETWORK_FILLED_REQUEST", "FB_AD_NETWORK_FILL_RATE", "FB_AD_NETWORK_IMP", "FB_AD_NETWORK_IMPRESSION_RATE", "FB_AD_NETWORK_REQUEST", "FB_AD_NETWORK_REVENUE", "FB_AD_NETWORK_SHOW_RATE", "FB_AD_NETWORK_VIDEO_GUARANTEE_REVENUE", "FB_AD_NETWORK_VIDEO_MRC", "FB_AD_NETWORK_VIDEO_MRC_RATE", "FB_AD_NETWORK_VIDEO_VIEW", "FB_AD_NETWORK_VIDEO_VIEW_RATE"),
		),
		mcp.WithString("ordering_column",
			mcp.Description("ordering_column parameter for adnetworkanalytics"),
			mcp.Enum("METRIC", "TIME", "VALUE"),
		),
		mcp.WithString("ordering_type",
			mcp.Description("ordering_type parameter for adnetworkanalytics"),
			mcp.Enum("ASCENDING", "DESCENDING"),
		),
		mcp.WithString("since",
			mcp.Description("since parameter for adnetworkanalytics"),
		),
		mcp.WithString("until",
			mcp.Description("until parameter for adnetworkanalytics"),
		),
	)
	tools = append(tools, application_post_adnetworkanalyticsTool)

	// application_get_adnetworkanalytics_results tool
	application_get_adnetworkanalytics_resultsTool := mcp.NewTool("application_get_adnetworkanalytics_results",
		mcp.WithDescription("GET adnetworkanalytics_results for Application"),
		mcp.WithString("query_ids",
			mcp.Description("query_ids parameter for adnetworkanalytics_results"),
		),
	)
	tools = append(tools, application_get_adnetworkanalytics_resultsTool)

	// application_get_aem_attribution tool
	application_get_aem_attributionTool := mcp.NewTool("application_get_aem_attribution",
		mcp.WithDescription("GET aem_attribution for Application"),
		mcp.WithString("advertiser_ids",
			mcp.Description("advertiser_ids parameter for aem_attribution"),
		),
		mcp.WithString("fb_content_data",
			mcp.Description("fb_content_data parameter for aem_attribution"),
		),
	)
	tools = append(tools, application_get_aem_attributionTool)

	// application_get_aem_conversion_configs tool
	application_get_aem_conversion_configsTool := mcp.NewTool("application_get_aem_conversion_configs",
		mcp.WithDescription("GET aem_conversion_configs for Application"),
		mcp.WithString("advertiser_ids",
			mcp.Description("advertiser_ids parameter for aem_conversion_configs"),
		),
	)
	tools = append(tools, application_get_aem_conversion_configsTool)

	// application_get_aem_conversion_filter tool
	application_get_aem_conversion_filterTool := mcp.NewTool("application_get_aem_conversion_filter",
		mcp.WithDescription("GET aem_conversion_filter for Application"),
		mcp.WithString("catalog_id",
			mcp.Description("catalog_id parameter for aem_conversion_filter"),
		),
		mcp.WithString("fb_content_ids",
			mcp.Description("fb_content_ids parameter for aem_conversion_filter"),
		),
	)
	tools = append(tools, application_get_aem_conversion_filterTool)

	// application_post_aem_conversions tool
	application_post_aem_conversionsTool := mcp.NewTool("application_post_aem_conversions",
		mcp.WithDescription("POST aem_conversions for Application"),
		mcp.WithString("aem_conversions",
			mcp.Required(),
			mcp.Description("aem_conversions parameter for aem_conversions"),
		),
	)
	tools = append(tools, application_post_aem_conversionsTool)

	// application_post_aem_skan_readiness tool
	application_post_aem_skan_readinessTool := mcp.NewTool("application_post_aem_skan_readiness",
		mcp.WithDescription("POST aem_skan_readiness for Application"),
		mcp.WithNumber("app_id",
			mcp.Required(),
			mcp.Description("app_id parameter for aem_skan_readiness"),
		),
		mcp.WithBoolean("is_aem_ready",
			mcp.Description("is_aem_ready parameter for aem_skan_readiness"),
		),
		mcp.WithBoolean("is_app_aem_install_ready",
			mcp.Description("is_app_aem_install_ready parameter for aem_skan_readiness"),
		),
		mcp.WithBoolean("is_app_aem_ready",
			mcp.Description("is_app_aem_ready parameter for aem_skan_readiness"),
		),
		mcp.WithBoolean("is_skan_ready",
			mcp.Description("is_skan_ready parameter for aem_skan_readiness"),
		),
		mcp.WithString("message",
			mcp.Description("message parameter for aem_skan_readiness"),
		),
	)
	tools = append(tools, application_post_aem_skan_readinessTool)

	// application_get_agencies tool
	application_get_agenciesTool := mcp.NewTool("application_get_agencies",
		mcp.WithDescription("GET agencies for Application"),
	)
	tools = append(tools, application_get_agenciesTool)

	// application_post_aggregate_revenue tool
	application_post_aggregate_revenueTool := mcp.NewTool("application_post_aggregate_revenue",
		mcp.WithDescription("POST aggregate_revenue for Application"),
		mcp.WithString("ecpms",
			mcp.Description("ecpms parameter for aggregate_revenue"),
		),
		mcp.WithString("query_ids",
			mcp.Description("query_ids parameter for aggregate_revenue"),
		),
		mcp.WithString("request_id",
			mcp.Description("request_id parameter for aggregate_revenue"),
		),
		mcp.WithBoolean("sync_api",
			mcp.Description("sync_api parameter for aggregate_revenue"),
		),
	)
	tools = append(tools, application_post_aggregate_revenueTool)

	// application_get_android_dialog_configs tool
	application_get_android_dialog_configsTool := mcp.NewTool("application_get_android_dialog_configs",
		mcp.WithDescription("GET android_dialog_configs for Application"),
	)
	tools = append(tools, application_get_android_dialog_configsTool)

	// application_get_app_capi_settings tool
	application_get_app_capi_settingsTool := mcp.NewTool("application_get_app_capi_settings",
		mcp.WithDescription("GET app_capi_settings for Application"),
	)
	tools = append(tools, application_get_app_capi_settingsTool)

	// application_get_app_event_types tool
	application_get_app_event_typesTool := mcp.NewTool("application_get_app_event_types",
		mcp.WithDescription("GET app_event_types for Application"),
	)
	tools = append(tools, application_get_app_event_typesTool)

	// application_post_app_indexing tool
	application_post_app_indexingTool := mcp.NewTool("application_post_app_indexing",
		mcp.WithDescription("POST app_indexing for Application"),
		mcp.WithString("app_version",
			mcp.Required(),
			mcp.Description("app_version parameter for app_indexing"),
		),
		mcp.WithString("device_session_id",
			mcp.Description("device_session_id parameter for app_indexing"),
		),
		mcp.WithString("extra_info",
			mcp.Description("extra_info parameter for app_indexing"),
		),
		mcp.WithString("platform",
			mcp.Required(),
			mcp.Description("platform parameter for app_indexing"),
			mcp.Enum("ANDROID", "IOS"),
		),
		mcp.WithString("request_type",
			mcp.Description("request_type parameter for app_indexing"),
			mcp.Enum("APP_INDEXING", "BUTTON_SAMPLING", "PLUGIN"),
		),
		mcp.WithString("tree",
			mcp.Required(),
			mcp.Description("tree parameter for app_indexing"),
		),
	)
	tools = append(tools, application_post_app_indexingTool)

	// application_post_app_indexing_session tool
	application_post_app_indexing_sessionTool := mcp.NewTool("application_post_app_indexing_session",
		mcp.WithDescription("POST app_indexing_session for Application"),
		mcp.WithString("device_session_id",
			mcp.Required(),
			mcp.Description("device_session_id parameter for app_indexing_session"),
		),
		mcp.WithString("extinfo",
			mcp.Description("extinfo parameter for app_indexing_session"),
		),
	)
	tools = append(tools, application_post_app_indexing_sessionTool)

	// application_get_app_installed_groups tool
	application_get_app_installed_groupsTool := mcp.NewTool("application_get_app_installed_groups",
		mcp.WithDescription("GET app_installed_groups for Application"),
		mcp.WithString("group_id",
			mcp.Description("group_id parameter for app_installed_groups"),
		),
	)
	tools = append(tools, application_get_app_installed_groupsTool)

	// application_post_app_push_device_token tool
	application_post_app_push_device_tokenTool := mcp.NewTool("application_post_app_push_device_token",
		mcp.WithDescription("POST app_push_device_token for Application"),
		mcp.WithString("device_id",
			mcp.Required(),
			mcp.Description("device_id parameter for app_push_device_token"),
		),
		mcp.WithString("device_token",
			mcp.Required(),
			mcp.Description("device_token parameter for app_push_device_token"),
		),
		mcp.WithString("platform",
			mcp.Description("platform parameter for app_push_device_token"),
			mcp.Enum("ANDROID", "IOS", "UNKNOWN"),
		),
	)
	tools = append(tools, application_post_app_push_device_tokenTool)

	// application_get_appassets tool
	application_get_appassetsTool := mcp.NewTool("application_get_appassets",
		mcp.WithDescription("GET appassets for Application"),
	)
	tools = append(tools, application_get_appassetsTool)

	// application_post_assets tool
	application_post_assetsTool := mcp.NewTool("application_post_assets",
		mcp.WithDescription("POST assets for Application"),
		mcp.WithString("asset",
			mcp.Required(),
			mcp.Description("asset parameter for assets"),
		),
		mcp.WithString("comment",
			mcp.Description("comment parameter for assets"),
		),
		mcp.WithString("type",
			mcp.Required(),
			mcp.Description("type parameter for assets"),
		),
	)
	tools = append(tools, application_post_assetsTool)

	// application_get_authorized_adaccounts tool
	application_get_authorized_adaccountsTool := mcp.NewTool("application_get_authorized_adaccounts",
		mcp.WithDescription("GET authorized_adaccounts for Application"),
		mcp.WithString("business",
			mcp.Description("business parameter for authorized_adaccounts"),
		),
	)
	tools = append(tools, application_get_authorized_adaccountsTool)

	// application_get_button_auto_detection_device_selection tool
	application_get_button_auto_detection_device_selectionTool := mcp.NewTool("application_get_button_auto_detection_device_selection",
		mcp.WithDescription("GET button_auto_detection_device_selection for Application"),
		mcp.WithString("device_id",
			mcp.Description("device_id parameter for button_auto_detection_device_selection"),
		),
	)
	tools = append(tools, application_get_button_auto_detection_device_selectionTool)

	// application_get_cloudbridge_settings tool
	application_get_cloudbridge_settingsTool := mcp.NewTool("application_get_cloudbridge_settings",
		mcp.WithDescription("GET cloudbridge_settings for Application"),
	)
	tools = append(tools, application_get_cloudbridge_settingsTool)

	// application_post_codeless_event_mappings tool
	application_post_codeless_event_mappingsTool := mcp.NewTool("application_post_codeless_event_mappings",
		mcp.WithDescription("POST codeless_event_mappings for Application"),
		mcp.WithString("mappings",
			mcp.Required(),
			mcp.Description("mappings parameter for codeless_event_mappings"),
		),
		mcp.WithString("mutation_method",
			mcp.Required(),
			mcp.Description("mutation_method parameter for codeless_event_mappings"),
			mcp.Enum("ADD", "DELETE", "REPLACE"),
		),
		mcp.WithString("platform",
			mcp.Required(),
			mcp.Description("platform parameter for codeless_event_mappings"),
			mcp.Enum("ANDROID", "IOS"),
		),
		mcp.WithString("post_method",
			mcp.Description("post_method parameter for codeless_event_mappings"),
			mcp.Enum("CODELESS", "EYMT"),
		),
	)
	tools = append(tools, application_post_codeless_event_mappingsTool)

	// application_get_connected_client_businesses tool
	application_get_connected_client_businessesTool := mcp.NewTool("application_get_connected_client_businesses",
		mcp.WithDescription("GET connected_client_businesses for Application"),
	)
	tools = append(tools, application_get_connected_client_businessesTool)

	// application_get_da_checks tool
	application_get_da_checksTool := mcp.NewTool("application_get_da_checks",
		mcp.WithDescription("GET da_checks for Application"),
		mcp.WithString("checks",
			mcp.Description("checks parameter for da_checks"),
		),
		mcp.WithString("connection_method",
			mcp.Description("connection_method parameter for da_checks"),
			mcp.Enum("ALL", "APP", "BROWSER", "SERVER"),
		),
	)
	tools = append(tools, application_get_da_checksTool)

	// application_post_domain_reports tool
	application_post_domain_reportsTool := mcp.NewTool("application_post_domain_reports",
		mcp.WithDescription("POST domain_reports for Application"),
		mcp.WithString("tracking_domains",
			mcp.Required(),
			mcp.Description("tracking_domains parameter for domain_reports"),
		),
	)
	tools = append(tools, application_post_domain_reportsTool)

	// application_get_iap_purchases tool
	application_get_iap_purchasesTool := mcp.NewTool("application_get_iap_purchases",
		mcp.WithDescription("GET iap_purchases for Application"),
		mcp.WithString("order_id",
			mcp.Required(),
			mcp.Description("order_id parameter for iap_purchases"),
		),
	)
	tools = append(tools, application_get_iap_purchasesTool)

	// application_get_ios_dialog_configs tool
	application_get_ios_dialog_configsTool := mcp.NewTool("application_get_ios_dialog_configs",
		mcp.WithDescription("GET ios_dialog_configs for Application"),
	)
	tools = append(tools, application_get_ios_dialog_configsTool)

	// application_get_linked_dataset tool
	application_get_linked_datasetTool := mcp.NewTool("application_get_linked_dataset",
		mcp.WithDescription("GET linked_dataset for Application"),
	)
	tools = append(tools, application_get_linked_datasetTool)

	// application_get_message_templates tool
	application_get_message_templatesTool := mcp.NewTool("application_get_message_templates",
		mcp.WithDescription("GET message_templates for Application"),
		mcp.WithString("template_id",
			mcp.Description("template_id parameter for message_templates"),
		),
	)
	tools = append(tools, application_get_message_templatesTool)

	// application_post_mmp_auditing tool
	application_post_mmp_auditingTool := mcp.NewTool("application_post_mmp_auditing",
		mcp.WithDescription("POST mmp_auditing for Application"),
		mcp.WithString("advertiser_id",
			mcp.Description("advertiser_id parameter for mmp_auditing"),
		),
		mcp.WithString("attribution",
			mcp.Description("attribution parameter for mmp_auditing"),
		),
		mcp.WithString("attribution_method",
			mcp.Description("attribution_method parameter for mmp_auditing"),
		),
		mcp.WithString("attribution_model",
			mcp.Description("attribution_model parameter for mmp_auditing"),
		),
		mcp.WithString("attribution_referrer",
			mcp.Description("attribution_referrer parameter for mmp_auditing"),
		),
		mcp.WithString("auditing_token",
			mcp.Description("auditing_token parameter for mmp_auditing"),
		),
		mcp.WithNumber("click_attr_window",
			mcp.Description("click_attr_window parameter for mmp_auditing"),
		),
		mcp.WithString("custom_events",
			mcp.Description("custom_events parameter for mmp_auditing"),
		),
		mcp.WithString("decline_reason",
			mcp.Description("decline_reason parameter for mmp_auditing"),
		),
		mcp.WithString("device_os",
			mcp.Description("device_os parameter for mmp_auditing"),
		),
		mcp.WithString("engagement_type",
			mcp.Description("engagement_type parameter for mmp_auditing"),
		),
		mcp.WithString("event",
			mcp.Required(),
			mcp.Description("event parameter for mmp_auditing"),
		),
		mcp.WithString("event_id",
			mcp.Description("event_id parameter for mmp_auditing"),
		),
		mcp.WithNumber("event_reported_time",
			mcp.Description("event_reported_time parameter for mmp_auditing"),
		),
		mcp.WithNumber("fb_ad_id",
			mcp.Description("fb_ad_id parameter for mmp_auditing"),
		),
		mcp.WithNumber("fb_adgroup_id",
			mcp.Description("fb_adgroup_id parameter for mmp_auditing"),
		),
		mcp.WithNumber("fb_click_time",
			mcp.Description("fb_click_time parameter for mmp_auditing"),
		),
		mcp.WithNumber("fb_view_time",
			mcp.Description("fb_view_time parameter for mmp_auditing"),
		),
		mcp.WithString("google_install_referrer",
			mcp.Description("google_install_referrer parameter for mmp_auditing"),
		),
		mcp.WithNumber("inactivity_window_hours",
			mcp.Description("inactivity_window_hours parameter for mmp_auditing"),
		),
		mcp.WithString("install_id",
			mcp.Description("install_id parameter for mmp_auditing"),
		),
		mcp.WithBoolean("is_fb",
			mcp.Required(),
			mcp.Description("is_fb parameter for mmp_auditing"),
		),
		mcp.WithString("meta_install_referrer",
			mcp.Description("meta_install_referrer parameter for mmp_auditing"),
		),
		mcp.WithBoolean("used_install_referrer",
			mcp.Description("used_install_referrer parameter for mmp_auditing"),
		),
		mcp.WithNumber("view_attr_window",
			mcp.Description("view_attr_window parameter for mmp_auditing"),
		),
	)
	tools = append(tools, application_post_mmp_auditingTool)

	// application_get_mobile_sdk_gk tool
	application_get_mobile_sdk_gkTool := mcp.NewTool("application_get_mobile_sdk_gk",
		mcp.WithDescription("GET mobile_sdk_gk for Application"),
		mcp.WithString("device_id",
			mcp.Description("device_id parameter for mobile_sdk_gk"),
		),
		mcp.WithString("extinfo",
			mcp.Description("extinfo parameter for mobile_sdk_gk"),
		),
		mcp.WithString("os_version",
			mcp.Description("os_version parameter for mobile_sdk_gk"),
		),
		mcp.WithString("platform",
			mcp.Required(),
			mcp.Description("platform parameter for mobile_sdk_gk"),
			mcp.Enum("ANDROID", "IOS"),
		),
		mcp.WithString("sdk_version",
			mcp.Required(),
			mcp.Description("sdk_version parameter for mobile_sdk_gk"),
		),
	)
	tools = append(tools, application_get_mobile_sdk_gkTool)

	// application_get_monetized_digital_store_objects tool
	application_get_monetized_digital_store_objectsTool := mcp.NewTool("application_get_monetized_digital_store_objects",
		mcp.WithDescription("GET monetized_digital_store_objects for Application"),
	)
	tools = append(tools, application_get_monetized_digital_store_objectsTool)

	// application_post_monetized_digital_store_objects tool
	application_post_monetized_digital_store_objectsTool := mcp.NewTool("application_post_monetized_digital_store_objects",
		mcp.WithDescription("POST monetized_digital_store_objects for Application"),
		mcp.WithString("content_id",
			mcp.Required(),
			mcp.Description("content_id parameter for monetized_digital_store_objects"),
		),
		mcp.WithString("store",
			mcp.Required(),
			mcp.Description("store parameter for monetized_digital_store_objects"),
		),
	)
	tools = append(tools, application_post_monetized_digital_store_objectsTool)

	// application_get_object_types tool
	application_get_object_typesTool := mcp.NewTool("application_get_object_types",
		mcp.WithDescription("GET object_types for Application"),
	)
	tools = append(tools, application_get_object_typesTool)

	// application_get_objects tool
	application_get_objectsTool := mcp.NewTool("application_get_objects",
		mcp.WithDescription("GET objects for Application"),
	)
	tools = append(tools, application_get_objectsTool)

	// application_post_occludespopups tool
	application_post_occludespopupsTool := mcp.NewTool("application_post_occludespopups",
		mcp.WithDescription("POST occludespopups for Application"),
		mcp.WithBoolean("flash",
			mcp.Description("flash parameter for occludespopups"),
		),
		mcp.WithBoolean("unity",
			mcp.Description("unity parameter for occludespopups"),
		),
	)
	tools = append(tools, application_post_occludespopupsTool)

	// application_get_permissions tool
	application_get_permissionsTool := mcp.NewTool("application_get_permissions",
		mcp.WithDescription("GET permissions for Application"),
		mcp.WithString("android_key_hash",
			mcp.Description("android_key_hash parameter for permissions"),
		),
		mcp.WithString("ios_bundle_id",
			mcp.Description("ios_bundle_id parameter for permissions"),
		),
		mcp.WithString("permission",
			mcp.Description("permission parameter for permissions"),
		),
		mcp.WithNumber("proxied_app_id",
			mcp.Description("proxied_app_id parameter for permissions"),
		),
		mcp.WithString("status",
			mcp.Description("status parameter for permissions"),
			mcp.Enum("live", "unapproved"),
		),
	)
	tools = append(tools, application_get_permissionsTool)

	// application_get_products tool
	application_get_productsTool := mcp.NewTool("application_get_products",
		mcp.WithDescription("GET products for Application"),
		mcp.WithString("product_ids",
			mcp.Description("product_ids parameter for products"),
		),
	)
	tools = append(tools, application_get_productsTool)

	// application_get_purchases tool
	application_get_purchasesTool := mcp.NewTool("application_get_purchases",
		mcp.WithDescription("GET purchases for Application"),
	)
	tools = append(tools, application_get_purchasesTool)

	// application_get_roles tool
	application_get_rolesTool := mcp.NewTool("application_get_roles",
		mcp.WithDescription("GET roles for Application"),
	)
	tools = append(tools, application_get_rolesTool)

	// application_get_server_domain_infos tool
	application_get_server_domain_infosTool := mcp.NewTool("application_get_server_domain_infos",
		mcp.WithDescription("GET server_domain_infos for Application"),
	)
	tools = append(tools, application_get_server_domain_infosTool)

	// application_get_sgw_dataset_status tool
	application_get_sgw_dataset_statusTool := mcp.NewTool("application_get_sgw_dataset_status",
		mcp.WithDescription("GET sgw_dataset_status for Application"),
		mcp.WithNumber("dataset_id",
			mcp.Required(),
			mcp.Description("dataset_id parameter for sgw_dataset_status"),
		),
	)
	tools = append(tools, application_get_sgw_dataset_statusTool)

	// application_get_sgw_install_deferral_link tool
	application_get_sgw_install_deferral_linkTool := mcp.NewTool("application_get_sgw_install_deferral_link",
		mcp.WithDescription("GET sgw_install_deferral_link for Application"),
		mcp.WithString("client_ip",
			mcp.Description("client_ip parameter for sgw_install_deferral_link"),
		),
		mcp.WithNumber("dataset_id",
			mcp.Required(),
			mcp.Description("dataset_id parameter for sgw_install_deferral_link"),
		),
	)
	tools = append(tools, application_get_sgw_install_deferral_linkTool)

	// application_get_subscribed_domains tool
	application_get_subscribed_domainsTool := mcp.NewTool("application_get_subscribed_domains",
		mcp.WithDescription("GET subscribed_domains for Application"),
	)
	tools = append(tools, application_get_subscribed_domainsTool)

	// application_post_subscribed_domains tool
	application_post_subscribed_domainsTool := mcp.NewTool("application_post_subscribed_domains",
		mcp.WithDescription("POST subscribed_domains for Application"),
		mcp.WithString("subscribe",
			mcp.Description("subscribe parameter for subscribed_domains"),
		),
		mcp.WithString("unsubscribe",
			mcp.Description("unsubscribe parameter for subscribed_domains"),
		),
	)
	tools = append(tools, application_post_subscribed_domainsTool)

	// application_get_subscribed_domains_phishing tool
	application_get_subscribed_domains_phishingTool := mcp.NewTool("application_get_subscribed_domains_phishing",
		mcp.WithDescription("GET subscribed_domains_phishing for Application"),
	)
	tools = append(tools, application_get_subscribed_domains_phishingTool)

	// application_post_subscribed_domains_phishing tool
	application_post_subscribed_domains_phishingTool := mcp.NewTool("application_post_subscribed_domains_phishing",
		mcp.WithDescription("POST subscribed_domains_phishing for Application"),
		mcp.WithString("subscribe",
			mcp.Description("subscribe parameter for subscribed_domains_phishing"),
		),
		mcp.WithString("unsubscribe",
			mcp.Description("unsubscribe parameter for subscribed_domains_phishing"),
		),
	)
	tools = append(tools, application_post_subscribed_domains_phishingTool)

	// application_delete_subscriptions tool
	application_delete_subscriptionsTool := mcp.NewTool("application_delete_subscriptions",
		mcp.WithDescription("DELETE subscriptions for Application"),
		mcp.WithString("fields",
			mcp.Description("fields parameter for subscriptions"),
		),
		mcp.WithString("object",
			mcp.Description("object parameter for subscriptions"),
		),
	)
	tools = append(tools, application_delete_subscriptionsTool)

	// application_get_subscriptions tool
	application_get_subscriptionsTool := mcp.NewTool("application_get_subscriptions",
		mcp.WithDescription("GET subscriptions for Application"),
	)
	tools = append(tools, application_get_subscriptionsTool)

	// application_post_subscriptions tool
	application_post_subscriptionsTool := mcp.NewTool("application_post_subscriptions",
		mcp.WithDescription("POST subscriptions for Application"),
		mcp.WithString("callback_url",
			mcp.Description("callback_url parameter for subscriptions"),
		),
		mcp.WithString("fields",
			mcp.Description("fields parameter for subscriptions"),
		),
		mcp.WithBoolean("include_values",
			mcp.Description("include_values parameter for subscriptions"),
		),
		mcp.WithString("object",
			mcp.Required(),
			mcp.Description("object parameter for subscriptions"),
		),
		mcp.WithString("verify_token",
			mcp.Description("verify_token parameter for subscriptions"),
		),
	)
	tools = append(tools, application_post_subscriptionsTool)

	// application_post_uploads tool
	application_post_uploadsTool := mcp.NewTool("application_post_uploads",
		mcp.WithDescription("POST uploads for Application"),
		mcp.WithNumber("file_length",
			mcp.Description("file_length parameter for uploads"),
		),
		mcp.WithString("file_name",
			mcp.Description("file_name parameter for uploads"),
		),
		mcp.WithString("file_type",
			mcp.Description("file_type parameter for uploads"),
		),
		mcp.WithString("session_type",
			mcp.Description("session_type parameter for uploads"),
			mcp.Enum("attachment"),
		),
	)
	tools = append(tools, application_post_uploadsTool)

	// application_post_whatsapp_business_solution tool
	application_post_whatsapp_business_solutionTool := mcp.NewTool("application_post_whatsapp_business_solution",
		mcp.WithDescription("POST whatsapp_business_solution for Application"),
		mcp.WithString("owner_permissions",
			mcp.Required(),
			mcp.Description("owner_permissions parameter for whatsapp_business_solution"),
			mcp.Enum("DEVELOP", "MANAGE", "MANAGE_EXTENSIONS", "MANAGE_PHONE", "MANAGE_PHONE_ASSETS", "MANAGE_TEMPLATES", "MESSAGING", "VIEW_COST", "VIEW_PHONE_ASSETS", "VIEW_TEMPLATES"),
		),
		mcp.WithString("partner_app_id",
			mcp.Required(),
			mcp.Description("partner_app_id parameter for whatsapp_business_solution"),
		),
		mcp.WithString("partner_permissions",
			mcp.Required(),
			mcp.Description("partner_permissions parameter for whatsapp_business_solution"),
			mcp.Enum("DEVELOP", "MANAGE", "MANAGE_EXTENSIONS", "MANAGE_PHONE", "MANAGE_PHONE_ASSETS", "MANAGE_TEMPLATES", "MESSAGING", "VIEW_COST", "VIEW_PHONE_ASSETS", "VIEW_TEMPLATES"),
		),
		mcp.WithString("solution_name",
			mcp.Required(),
			mcp.Description("solution_name parameter for whatsapp_business_solution"),
		),
	)
	tools = append(tools, application_post_whatsapp_business_solutionTool)

	// application_get_whatsapp_business_solutions tool
	application_get_whatsapp_business_solutionsTool := mcp.NewTool("application_get_whatsapp_business_solutions",
		mcp.WithDescription("GET whatsapp_business_solutions for Application"),
		mcp.WithString("role",
			mcp.Description("role parameter for whatsapp_business_solutions"),
			mcp.Enum("OWNER", "PARTNER"),
		),
	)
	tools = append(tools, application_get_whatsapp_business_solutionsTool)

	// application_get_ tool
	application_get_Tool := mcp.NewTool("application_get_",
		mcp.WithDescription("GET  for Application"),
		mcp.WithString("advertiser_id",
			mcp.Description("advertiser_id parameter for "),
		),
	)
	tools = append(tools, application_get_Tool)

	// application_post_ tool
	application_post_Tool := mcp.NewTool("application_post_",
		mcp.WithDescription("POST  for Application"),
		mcp.WithBoolean("allow_cycle_app_secret",
			mcp.Description("allow_cycle_app_secret parameter for "),
		),
		mcp.WithString("an_platforms",
			mcp.Description("an_platforms parameter for "),
			mcp.Enum("ANDROID", "DESKTOP", "GALAXY", "INSTANT_ARTICLES", "IOS", "MOBILE_WEB", "OCULUS", "UNKNOWN", "XIAOMI"),
		),
		mcp.WithString("app_domains",
			mcp.Description("app_domains parameter for "),
		),
		mcp.WithString("app_name",
			mcp.Description("app_name parameter for "),
		),
		mcp.WithBoolean("app_type",
			mcp.Description("app_type parameter for "),
		),
		mcp.WithString("auth_dialog_headline",
			mcp.Description("auth_dialog_headline parameter for "),
		),
		mcp.WithString("auth_dialog_perms_explanation",
			mcp.Description("auth_dialog_perms_explanation parameter for "),
		),
		mcp.WithBoolean("auth_referral_enabled",
			mcp.Description("auth_referral_enabled parameter for "),
		),
		mcp.WithString("auth_referral_extended_perms",
			mcp.Description("auth_referral_extended_perms parameter for "),
		),
		mcp.WithString("auth_referral_friend_perms",
			mcp.Description("auth_referral_friend_perms parameter for "),
		),
		mcp.WithString("auth_referral_response_type",
			mcp.Description("auth_referral_response_type parameter for "),
		),
		mcp.WithString("auth_referral_user_perms",
			mcp.Description("auth_referral_user_perms parameter for "),
		),
		mcp.WithBoolean("canvas_fluid_height",
			mcp.Description("canvas_fluid_height parameter for "),
		),
		mcp.WithBoolean("canvas_fluid_width",
			mcp.Description("canvas_fluid_width parameter for "),
		),
		mcp.WithString("canvas_url",
			mcp.Description("canvas_url parameter for "),
		),
		mcp.WithString("contact_email",
			mcp.Description("contact_email parameter for "),
		),
		mcp.WithString("deauth_callback_url",
			mcp.Description("deauth_callback_url parameter for "),
		),
		mcp.WithString("mobile_web_url",
			mcp.Description("mobile_web_url parameter for "),
		),
		mcp.WithString("namespace",
			mcp.Description("namespace parameter for "),
		),
		mcp.WithString("page_tab_default_name",
			mcp.Description("page_tab_default_name parameter for "),
		),
		mcp.WithString("privacy_policy_url",
			mcp.Description("privacy_policy_url parameter for "),
		),
		mcp.WithString("restrictions",
			mcp.Description("restrictions parameter for "),
		),
		mcp.WithString("secure_canvas_url",
			mcp.Description("secure_canvas_url parameter for "),
		),
		mcp.WithString("secure_page_tab_url",
			mcp.Description("secure_page_tab_url parameter for "),
		),
		mcp.WithString("server_ip_whitelist",
			mcp.Description("server_ip_whitelist parameter for "),
		),
		mcp.WithString("terms_of_service_url",
			mcp.Description("terms_of_service_url parameter for "),
		),
		mcp.WithString("url_scheme_suffix",
			mcp.Description("url_scheme_suffix parameter for "),
		),
		mcp.WithString("user_support_email",
			mcp.Description("user_support_email parameter for "),
		),
		mcp.WithString("user_support_url",
			mcp.Description("user_support_url parameter for "),
		),
		mcp.WithString("website_url",
			mcp.Description("website_url parameter for "),
		),
	)
	tools = append(tools, application_post_Tool)

	return tools
}

// Application handlers

// HandleApplication_delete_accounts handles the application_delete_accounts tool with context-based auth
func HandleApplication_delete_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: type
	if val := request.GetString("type", ""); val != "" {
		args["type"] = val
	}

	// Required: uid
	uid, err := request.RequireInt("uid")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter uid: %v", err)), nil
	}
	args["uid"] = uid

	// Call the client method
	result, err := client.Application_delete_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_delete_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_accounts handles the application_get_accounts tool with context-based auth
func HandleApplication_get_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: type
	if val := request.GetString("type", ""); val != "" {
		args["type"] = val
	}

	// Call the client method
	result, err := client.Application_get_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_post_accounts handles the application_post_accounts tool with context-based auth
func HandleApplication_post_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: installed
	if val := request.GetBool("installed", false); val {
		args["installed"] = val
	}

	// Optional: minor
	if val := request.GetBool("minor", false); val {
		args["minor"] = val
	}

	// Optional: name
	if val := request.GetString("name", ""); val != "" {
		args["name"] = val
	}

	// Optional: owner_access_token
	if val := request.GetString("owner_access_token", ""); val != "" {
		args["owner_access_token"] = val
	}

	// Optional: permissions
	// array type - using string
	if val := request.GetString("permissions", ""); val != "" {
		args["permissions"] = val
	}

	// Optional: type
	if val := request.GetString("type", ""); val != "" {
		args["type"] = val
	}

	// Optional: uid
	if val := request.GetInt("uid", 0); val != 0 {
		args["uid"] = val
	}

	// Call the client method
	result, err := client.Application_post_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_post_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_post_activities handles the application_post_activities tool with context-based auth
func HandleApplication_post_activities(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: advertiser_id
	if val := request.GetString("advertiser_id", ""); val != "" {
		args["advertiser_id"] = val
	}

	// Optional: advertiser_tracking_enabled
	if val := request.GetBool("advertiser_tracking_enabled", false); val {
		args["advertiser_tracking_enabled"] = val
	}

	// Optional: anon_id
	if val := request.GetString("anon_id", ""); val != "" {
		args["anon_id"] = val
	}

	// Optional: app_user_id
	if val := request.GetString("app_user_id", ""); val != "" {
		args["app_user_id"] = val
	}

	// Optional: application_tracking_enabled
	if val := request.GetBool("application_tracking_enabled", false); val {
		args["application_tracking_enabled"] = val
	}

	// Optional: attribution
	if val := request.GetString("attribution", ""); val != "" {
		args["attribution"] = val
	}

	// Optional: attribution_referrer
	if val := request.GetString("attribution_referrer", ""); val != "" {
		args["attribution_referrer"] = val
	}

	// Optional: attribution_sources
	// array type - using string
	if val := request.GetString("attribution_sources", ""); val != "" {
		args["attribution_sources"] = val
	}

	// Optional: auto_publish
	if val := request.GetBool("auto_publish", false); val {
		args["auto_publish"] = val
	}

	// Optional: bundle_id
	if val := request.GetString("bundle_id", ""); val != "" {
		args["bundle_id"] = val
	}

	// Optional: bundle_short_version
	if val := request.GetString("bundle_short_version", ""); val != "" {
		args["bundle_short_version"] = val
	}

	// Optional: bundle_version
	if val := request.GetString("bundle_version", ""); val != "" {
		args["bundle_version"] = val
	}

	// Optional: campaign_ids
	if val := request.GetString("campaign_ids", ""); val != "" {
		args["campaign_ids"] = val
	}

	// Optional: click_id
	if val := request.GetString("click_id", ""); val != "" {
		args["click_id"] = val
	}

	// Optional: consider_views
	if val := request.GetBool("consider_views", false); val {
		args["consider_views"] = val
	}

	// Optional: custom_events
	// array type - using string
	if val := request.GetString("custom_events", ""); val != "" {
		args["custom_events"] = val
	}

	// Optional: custom_events_file
	if val := request.GetString("custom_events_file", ""); val != "" {
		args["custom_events_file"] = val
	}

	// Optional: data_processing_options
	// array type - using string
	if val := request.GetString("data_processing_options", ""); val != "" {
		args["data_processing_options"] = val
	}

	// Optional: data_processing_options_country
	if val := request.GetInt("data_processing_options_country", 0); val != 0 {
		args["data_processing_options_country"] = val
	}

	// Optional: data_processing_options_state
	if val := request.GetInt("data_processing_options_state", 0); val != 0 {
		args["data_processing_options_state"] = val
	}

	// Optional: device_token
	if val := request.GetString("device_token", ""); val != "" {
		args["device_token"] = val
	}

	// Required: event
	event, err := request.RequireString("event")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter event: %v", err)), nil
	}
	args["event"] = event

	// Optional: event_id
	if val := request.GetString("event_id", ""); val != "" {
		args["event_id"] = val
	}

	// Optional: extinfo
	// object type - using string
	if val := request.GetString("extinfo", ""); val != "" {
		args["extinfo"] = val
	}

	// Optional: google_install_referrer
	if val := request.GetString("google_install_referrer", ""); val != "" {
		args["google_install_referrer"] = val
	}

	// Optional: include_dwell_data
	if val := request.GetBool("include_dwell_data", false); val {
		args["include_dwell_data"] = val
	}

	// Optional: include_video_data
	if val := request.GetBool("include_video_data", false); val {
		args["include_video_data"] = val
	}

	// Optional: install_id
	if val := request.GetString("install_id", ""); val != "" {
		args["install_id"] = val
	}

	// Optional: install_referrer
	if val := request.GetString("install_referrer", ""); val != "" {
		args["install_referrer"] = val
	}

	// Optional: install_timestamp
	if val := request.GetInt("install_timestamp", 0); val != 0 {
		args["install_timestamp"] = val
	}

	// Optional: installer_package
	if val := request.GetString("installer_package", ""); val != "" {
		args["installer_package"] = val
	}

	// Optional: is_fb
	if val := request.GetBool("is_fb", false); val {
		args["is_fb"] = val
	}

	// Optional: limited_data_use
	if val := request.GetBool("limited_data_use", false); val {
		args["limited_data_use"] = val
	}

	// Optional: meta_install_referrer
	if val := request.GetString("meta_install_referrer", ""); val != "" {
		args["meta_install_referrer"] = val
	}

	// Optional: migration_bundle
	if val := request.GetString("migration_bundle", ""); val != "" {
		args["migration_bundle"] = val
	}

	// Optional: operational_parameters
	// array type - using string
	if val := request.GetString("operational_parameters", ""); val != "" {
		args["operational_parameters"] = val
	}

	// Optional: page_id
	if val := request.GetInt("page_id", 0); val != 0 {
		args["page_id"] = val
	}

	// Optional: page_scoped_user_id
	if val := request.GetInt("page_scoped_user_id", 0); val != 0 {
		args["page_scoped_user_id"] = val
	}

	// Optional: receipt_data
	if val := request.GetString("receipt_data", ""); val != "" {
		args["receipt_data"] = val
	}

	// Optional: sdk_version
	if val := request.GetString("sdk_version", ""); val != "" {
		args["sdk_version"] = val
	}

	// Optional: ud
	if val := request.GetString("ud", ""); val != "" {
		args["ud"] = val
	}

	// Optional: url_schemes
	// array type - using string
	if val := request.GetString("url_schemes", ""); val != "" {
		args["url_schemes"] = val
	}

	// Optional: user_id
	if val := request.GetString("user_id", ""); val != "" {
		args["user_id"] = val
	}

	// Optional: user_id_type
	if val := request.GetString("user_id_type", ""); val != "" {
		args["user_id_type"] = val
	}

	// Optional: vendor_id
	if val := request.GetString("vendor_id", ""); val != "" {
		args["vendor_id"] = val
	}

	// Optional: windows_attribution_id
	if val := request.GetString("windows_attribution_id", ""); val != "" {
		args["windows_attribution_id"] = val
	}

	// Call the client method
	result, err := client.Application_post_activities(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_post_activities: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_ad_placement_groups handles the application_get_ad_placement_groups tool with context-based auth
func HandleApplication_get_ad_placement_groups(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Application_get_ad_placement_groups(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_ad_placement_groups: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_adnetwork_placements handles the application_get_adnetwork_placements tool with context-based auth
func HandleApplication_get_adnetwork_placements(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: request_id
	if val := request.GetString("request_id", ""); val != "" {
		args["request_id"] = val
	}

	// Call the client method
	result, err := client.Application_get_adnetwork_placements(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_adnetwork_placements: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_adnetworkanalytics handles the application_get_adnetworkanalytics tool with context-based auth
func HandleApplication_get_adnetworkanalytics(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: aggregation_period
	if val := request.GetString("aggregation_period", ""); val != "" {
		args["aggregation_period"] = val
	}

	// Optional: breakdowns
	// array type - using string
	if val := request.GetString("breakdowns", ""); val != "" {
		args["breakdowns"] = val
	}

	// Optional: filters
	// array type - using string
	if val := request.GetString("filters", ""); val != "" {
		args["filters"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Required: metrics
	metrics, err := request.RequireString("metrics")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter metrics: %v", err)), nil
	}
	args["metrics"] = metrics

	// Optional: ordering_column
	if val := request.GetString("ordering_column", ""); val != "" {
		args["ordering_column"] = val
	}

	// Optional: ordering_type
	if val := request.GetString("ordering_type", ""); val != "" {
		args["ordering_type"] = val
	}

	// Optional: should_include_until
	if val := request.GetBool("should_include_until", false); val {
		args["should_include_until"] = val
	}

	// Optional: since
	if val := request.GetString("since", ""); val != "" {
		args["since"] = val
	}

	// Optional: until
	if val := request.GetString("until", ""); val != "" {
		args["until"] = val
	}

	// Call the client method
	result, err := client.Application_get_adnetworkanalytics(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_adnetworkanalytics: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_post_adnetworkanalytics handles the application_post_adnetworkanalytics tool with context-based auth
func HandleApplication_post_adnetworkanalytics(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: aggregation_period
	if val := request.GetString("aggregation_period", ""); val != "" {
		args["aggregation_period"] = val
	}

	// Optional: breakdowns
	// array type - using string
	if val := request.GetString("breakdowns", ""); val != "" {
		args["breakdowns"] = val
	}

	// Optional: filters
	// array type - using string
	if val := request.GetString("filters", ""); val != "" {
		args["filters"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Required: metrics
	metrics, err := request.RequireString("metrics")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter metrics: %v", err)), nil
	}
	args["metrics"] = metrics

	// Optional: ordering_column
	if val := request.GetString("ordering_column", ""); val != "" {
		args["ordering_column"] = val
	}

	// Optional: ordering_type
	if val := request.GetString("ordering_type", ""); val != "" {
		args["ordering_type"] = val
	}

	// Optional: since
	if val := request.GetString("since", ""); val != "" {
		args["since"] = val
	}

	// Optional: until
	if val := request.GetString("until", ""); val != "" {
		args["until"] = val
	}

	// Call the client method
	result, err := client.Application_post_adnetworkanalytics(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_post_adnetworkanalytics: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_adnetworkanalytics_results handles the application_get_adnetworkanalytics_results tool with context-based auth
func HandleApplication_get_adnetworkanalytics_results(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: query_ids
	// array type - using string
	if val := request.GetString("query_ids", ""); val != "" {
		args["query_ids"] = val
	}

	// Call the client method
	result, err := client.Application_get_adnetworkanalytics_results(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_adnetworkanalytics_results: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_aem_attribution handles the application_get_aem_attribution tool with context-based auth
func HandleApplication_get_aem_attribution(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: advertiser_ids
	// array type - using string
	if val := request.GetString("advertiser_ids", ""); val != "" {
		args["advertiser_ids"] = val
	}

	// Optional: fb_content_data
	if val := request.GetString("fb_content_data", ""); val != "" {
		args["fb_content_data"] = val
	}

	// Call the client method
	result, err := client.Application_get_aem_attribution(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_aem_attribution: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_aem_conversion_configs handles the application_get_aem_conversion_configs tool with context-based auth
func HandleApplication_get_aem_conversion_configs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: advertiser_ids
	// array type - using string
	if val := request.GetString("advertiser_ids", ""); val != "" {
		args["advertiser_ids"] = val
	}

	// Call the client method
	result, err := client.Application_get_aem_conversion_configs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_aem_conversion_configs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_aem_conversion_filter handles the application_get_aem_conversion_filter tool with context-based auth
func HandleApplication_get_aem_conversion_filter(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: catalog_id
	if val := request.GetString("catalog_id", ""); val != "" {
		args["catalog_id"] = val
	}

	// Optional: fb_content_ids
	if val := request.GetString("fb_content_ids", ""); val != "" {
		args["fb_content_ids"] = val
	}

	// Call the client method
	result, err := client.Application_get_aem_conversion_filter(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_aem_conversion_filter: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_post_aem_conversions handles the application_post_aem_conversions tool with context-based auth
func HandleApplication_post_aem_conversions(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: aem_conversions
	aem_conversions, err := request.RequireString("aem_conversions")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter aem_conversions: %v", err)), nil
	}
	args["aem_conversions"] = aem_conversions

	// Call the client method
	result, err := client.Application_post_aem_conversions(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_post_aem_conversions: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_post_aem_skan_readiness handles the application_post_aem_skan_readiness tool with context-based auth
func HandleApplication_post_aem_skan_readiness(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: app_id
	app_id, err := request.RequireInt("app_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter app_id: %v", err)), nil
	}
	args["app_id"] = app_id

	// Optional: is_aem_ready
	if val := request.GetBool("is_aem_ready", false); val {
		args["is_aem_ready"] = val
	}

	// Optional: is_app_aem_install_ready
	if val := request.GetBool("is_app_aem_install_ready", false); val {
		args["is_app_aem_install_ready"] = val
	}

	// Optional: is_app_aem_ready
	if val := request.GetBool("is_app_aem_ready", false); val {
		args["is_app_aem_ready"] = val
	}

	// Optional: is_skan_ready
	if val := request.GetBool("is_skan_ready", false); val {
		args["is_skan_ready"] = val
	}

	// Optional: message
	if val := request.GetString("message", ""); val != "" {
		args["message"] = val
	}

	// Call the client method
	result, err := client.Application_post_aem_skan_readiness(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_post_aem_skan_readiness: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_agencies handles the application_get_agencies tool with context-based auth
func HandleApplication_get_agencies(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Application_get_agencies(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_agencies: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_post_aggregate_revenue handles the application_post_aggregate_revenue tool with context-based auth
func HandleApplication_post_aggregate_revenue(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: ecpms
	// array type - using string
	if val := request.GetString("ecpms", ""); val != "" {
		args["ecpms"] = val
	}

	// Optional: query_ids
	// array type - using string
	if val := request.GetString("query_ids", ""); val != "" {
		args["query_ids"] = val
	}

	// Optional: request_id
	if val := request.GetString("request_id", ""); val != "" {
		args["request_id"] = val
	}

	// Optional: sync_api
	if val := request.GetBool("sync_api", false); val {
		args["sync_api"] = val
	}

	// Call the client method
	result, err := client.Application_post_aggregate_revenue(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_post_aggregate_revenue: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_android_dialog_configs handles the application_get_android_dialog_configs tool with context-based auth
func HandleApplication_get_android_dialog_configs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Application_get_android_dialog_configs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_android_dialog_configs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_app_capi_settings handles the application_get_app_capi_settings tool with context-based auth
func HandleApplication_get_app_capi_settings(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Application_get_app_capi_settings(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_app_capi_settings: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_app_event_types handles the application_get_app_event_types tool with context-based auth
func HandleApplication_get_app_event_types(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Application_get_app_event_types(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_app_event_types: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_post_app_indexing handles the application_post_app_indexing tool with context-based auth
func HandleApplication_post_app_indexing(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: app_version
	app_version, err := request.RequireString("app_version")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter app_version: %v", err)), nil
	}
	args["app_version"] = app_version

	// Optional: device_session_id
	if val := request.GetString("device_session_id", ""); val != "" {
		args["device_session_id"] = val
	}

	// Optional: extra_info
	if val := request.GetString("extra_info", ""); val != "" {
		args["extra_info"] = val
	}

	// Required: platform
	platform, err := request.RequireString("platform")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter platform: %v", err)), nil
	}
	args["platform"] = platform

	// Optional: request_type
	if val := request.GetString("request_type", ""); val != "" {
		args["request_type"] = val
	}

	// Required: tree
	tree, err := request.RequireString("tree")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter tree: %v", err)), nil
	}
	args["tree"] = tree

	// Call the client method
	result, err := client.Application_post_app_indexing(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_post_app_indexing: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_post_app_indexing_session handles the application_post_app_indexing_session tool with context-based auth
func HandleApplication_post_app_indexing_session(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: device_session_id
	device_session_id, err := request.RequireString("device_session_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter device_session_id: %v", err)), nil
	}
	args["device_session_id"] = device_session_id

	// Optional: extinfo
	if val := request.GetString("extinfo", ""); val != "" {
		args["extinfo"] = val
	}

	// Call the client method
	result, err := client.Application_post_app_indexing_session(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_post_app_indexing_session: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_app_installed_groups handles the application_get_app_installed_groups tool with context-based auth
func HandleApplication_get_app_installed_groups(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: group_id
	if val := request.GetString("group_id", ""); val != "" {
		args["group_id"] = val
	}

	// Call the client method
	result, err := client.Application_get_app_installed_groups(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_app_installed_groups: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_post_app_push_device_token handles the application_post_app_push_device_token tool with context-based auth
func HandleApplication_post_app_push_device_token(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: device_id
	device_id, err := request.RequireString("device_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter device_id: %v", err)), nil
	}
	args["device_id"] = device_id

	// Required: device_token
	device_token, err := request.RequireString("device_token")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter device_token: %v", err)), nil
	}
	args["device_token"] = device_token

	// Optional: platform
	if val := request.GetString("platform", ""); val != "" {
		args["platform"] = val
	}

	// Call the client method
	result, err := client.Application_post_app_push_device_token(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_post_app_push_device_token: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_appassets handles the application_get_appassets tool with context-based auth
func HandleApplication_get_appassets(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Application_get_appassets(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_appassets: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_post_assets handles the application_post_assets tool with context-based auth
func HandleApplication_post_assets(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: asset
	asset, err := request.RequireString("asset")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter asset: %v", err)), nil
	}
	args["asset"] = asset

	// Optional: comment
	if val := request.GetString("comment", ""); val != "" {
		args["comment"] = val
	}

	// Required: type
	type_, err := request.RequireString("type")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter type: %v", err)), nil
	}
	args["type"] = type_

	// Call the client method
	result, err := client.Application_post_assets(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_post_assets: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_authorized_adaccounts handles the application_get_authorized_adaccounts tool with context-based auth
func HandleApplication_get_authorized_adaccounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: business
	if val := request.GetString("business", ""); val != "" {
		args["business"] = val
	}

	// Call the client method
	result, err := client.Application_get_authorized_adaccounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_authorized_adaccounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_button_auto_detection_device_selection handles the application_get_button_auto_detection_device_selection tool with context-based auth
func HandleApplication_get_button_auto_detection_device_selection(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: device_id
	if val := request.GetString("device_id", ""); val != "" {
		args["device_id"] = val
	}

	// Call the client method
	result, err := client.Application_get_button_auto_detection_device_selection(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_button_auto_detection_device_selection: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_cloudbridge_settings handles the application_get_cloudbridge_settings tool with context-based auth
func HandleApplication_get_cloudbridge_settings(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Application_get_cloudbridge_settings(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_cloudbridge_settings: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_post_codeless_event_mappings handles the application_post_codeless_event_mappings tool with context-based auth
func HandleApplication_post_codeless_event_mappings(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: mappings
	mappings, err := request.RequireString("mappings")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter mappings: %v", err)), nil
	}
	args["mappings"] = mappings

	// Required: mutation_method
	mutation_method, err := request.RequireString("mutation_method")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter mutation_method: %v", err)), nil
	}
	args["mutation_method"] = mutation_method

	// Required: platform
	platform, err := request.RequireString("platform")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter platform: %v", err)), nil
	}
	args["platform"] = platform

	// Optional: post_method
	if val := request.GetString("post_method", ""); val != "" {
		args["post_method"] = val
	}

	// Call the client method
	result, err := client.Application_post_codeless_event_mappings(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_post_codeless_event_mappings: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_connected_client_businesses handles the application_get_connected_client_businesses tool with context-based auth
func HandleApplication_get_connected_client_businesses(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Application_get_connected_client_businesses(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_connected_client_businesses: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_da_checks handles the application_get_da_checks tool with context-based auth
func HandleApplication_get_da_checks(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: checks
	// array type - using string
	if val := request.GetString("checks", ""); val != "" {
		args["checks"] = val
	}

	// Optional: connection_method
	if val := request.GetString("connection_method", ""); val != "" {
		args["connection_method"] = val
	}

	// Call the client method
	result, err := client.Application_get_da_checks(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_da_checks: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_post_domain_reports handles the application_post_domain_reports tool with context-based auth
func HandleApplication_post_domain_reports(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: tracking_domains
	tracking_domains, err := request.RequireString("tracking_domains")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter tracking_domains: %v", err)), nil
	}
	args["tracking_domains"] = tracking_domains

	// Call the client method
	result, err := client.Application_post_domain_reports(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_post_domain_reports: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_iap_purchases handles the application_get_iap_purchases tool with context-based auth
func HandleApplication_get_iap_purchases(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: order_id
	order_id, err := request.RequireString("order_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter order_id: %v", err)), nil
	}
	args["order_id"] = order_id

	// Call the client method
	result, err := client.Application_get_iap_purchases(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_iap_purchases: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_ios_dialog_configs handles the application_get_ios_dialog_configs tool with context-based auth
func HandleApplication_get_ios_dialog_configs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Application_get_ios_dialog_configs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_ios_dialog_configs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_linked_dataset handles the application_get_linked_dataset tool with context-based auth
func HandleApplication_get_linked_dataset(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Application_get_linked_dataset(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_linked_dataset: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_message_templates handles the application_get_message_templates tool with context-based auth
func HandleApplication_get_message_templates(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: template_id
	if val := request.GetString("template_id", ""); val != "" {
		args["template_id"] = val
	}

	// Call the client method
	result, err := client.Application_get_message_templates(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_message_templates: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_post_mmp_auditing handles the application_post_mmp_auditing tool with context-based auth
func HandleApplication_post_mmp_auditing(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: advertiser_id
	if val := request.GetString("advertiser_id", ""); val != "" {
		args["advertiser_id"] = val
	}

	// Optional: attribution
	if val := request.GetString("attribution", ""); val != "" {
		args["attribution"] = val
	}

	// Optional: attribution_method
	if val := request.GetString("attribution_method", ""); val != "" {
		args["attribution_method"] = val
	}

	// Optional: attribution_model
	if val := request.GetString("attribution_model", ""); val != "" {
		args["attribution_model"] = val
	}

	// Optional: attribution_referrer
	if val := request.GetString("attribution_referrer", ""); val != "" {
		args["attribution_referrer"] = val
	}

	// Optional: auditing_token
	if val := request.GetString("auditing_token", ""); val != "" {
		args["auditing_token"] = val
	}

	// Optional: click_attr_window
	if val := request.GetInt("click_attr_window", 0); val != 0 {
		args["click_attr_window"] = val
	}

	// Optional: custom_events
	// array type - using string
	if val := request.GetString("custom_events", ""); val != "" {
		args["custom_events"] = val
	}

	// Optional: decline_reason
	if val := request.GetString("decline_reason", ""); val != "" {
		args["decline_reason"] = val
	}

	// Optional: device_os
	if val := request.GetString("device_os", ""); val != "" {
		args["device_os"] = val
	}

	// Optional: engagement_type
	if val := request.GetString("engagement_type", ""); val != "" {
		args["engagement_type"] = val
	}

	// Required: event
	event, err := request.RequireString("event")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter event: %v", err)), nil
	}
	args["event"] = event

	// Optional: event_id
	if val := request.GetString("event_id", ""); val != "" {
		args["event_id"] = val
	}

	// Optional: event_reported_time
	if val := request.GetInt("event_reported_time", 0); val != 0 {
		args["event_reported_time"] = val
	}

	// Optional: fb_ad_id
	if val := request.GetInt("fb_ad_id", 0); val != 0 {
		args["fb_ad_id"] = val
	}

	// Optional: fb_adgroup_id
	if val := request.GetInt("fb_adgroup_id", 0); val != 0 {
		args["fb_adgroup_id"] = val
	}

	// Optional: fb_click_time
	if val := request.GetInt("fb_click_time", 0); val != 0 {
		args["fb_click_time"] = val
	}

	// Optional: fb_view_time
	if val := request.GetInt("fb_view_time", 0); val != 0 {
		args["fb_view_time"] = val
	}

	// Optional: google_install_referrer
	if val := request.GetString("google_install_referrer", ""); val != "" {
		args["google_install_referrer"] = val
	}

	// Optional: inactivity_window_hours
	if val := request.GetInt("inactivity_window_hours", 0); val != 0 {
		args["inactivity_window_hours"] = val
	}

	// Optional: install_id
	if val := request.GetString("install_id", ""); val != "" {
		args["install_id"] = val
	}

	// Required: is_fb
	is_fb, err := request.RequireBool("is_fb")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter is_fb: %v", err)), nil
	}
	args["is_fb"] = is_fb

	// Optional: meta_install_referrer
	if val := request.GetString("meta_install_referrer", ""); val != "" {
		args["meta_install_referrer"] = val
	}

	// Optional: used_install_referrer
	if val := request.GetBool("used_install_referrer", false); val {
		args["used_install_referrer"] = val
	}

	// Optional: view_attr_window
	if val := request.GetInt("view_attr_window", 0); val != 0 {
		args["view_attr_window"] = val
	}

	// Call the client method
	result, err := client.Application_post_mmp_auditing(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_post_mmp_auditing: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_mobile_sdk_gk handles the application_get_mobile_sdk_gk tool with context-based auth
func HandleApplication_get_mobile_sdk_gk(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: device_id
	if val := request.GetString("device_id", ""); val != "" {
		args["device_id"] = val
	}

	// Optional: extinfo
	// object type - using string
	if val := request.GetString("extinfo", ""); val != "" {
		args["extinfo"] = val
	}

	// Optional: os_version
	if val := request.GetString("os_version", ""); val != "" {
		args["os_version"] = val
	}

	// Required: platform
	platform, err := request.RequireString("platform")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter platform: %v", err)), nil
	}
	args["platform"] = platform

	// Required: sdk_version
	sdk_version, err := request.RequireString("sdk_version")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter sdk_version: %v", err)), nil
	}
	args["sdk_version"] = sdk_version

	// Call the client method
	result, err := client.Application_get_mobile_sdk_gk(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_mobile_sdk_gk: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_monetized_digital_store_objects handles the application_get_monetized_digital_store_objects tool with context-based auth
func HandleApplication_get_monetized_digital_store_objects(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Application_get_monetized_digital_store_objects(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_monetized_digital_store_objects: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_post_monetized_digital_store_objects handles the application_post_monetized_digital_store_objects tool with context-based auth
func HandleApplication_post_monetized_digital_store_objects(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: content_id
	content_id, err := request.RequireString("content_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter content_id: %v", err)), nil
	}
	args["content_id"] = content_id

	// Required: store
	store, err := request.RequireString("store")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter store: %v", err)), nil
	}
	args["store"] = store

	// Call the client method
	result, err := client.Application_post_monetized_digital_store_objects(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_post_monetized_digital_store_objects: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_object_types handles the application_get_object_types tool with context-based auth
func HandleApplication_get_object_types(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Application_get_object_types(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_object_types: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_objects handles the application_get_objects tool with context-based auth
func HandleApplication_get_objects(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Application_get_objects(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_objects: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_post_occludespopups handles the application_post_occludespopups tool with context-based auth
func HandleApplication_post_occludespopups(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: flash
	if val := request.GetBool("flash", false); val {
		args["flash"] = val
	}

	// Optional: unity
	if val := request.GetBool("unity", false); val {
		args["unity"] = val
	}

	// Call the client method
	result, err := client.Application_post_occludespopups(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_post_occludespopups: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_permissions handles the application_get_permissions tool with context-based auth
func HandleApplication_get_permissions(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: android_key_hash
	if val := request.GetString("android_key_hash", ""); val != "" {
		args["android_key_hash"] = val
	}

	// Optional: ios_bundle_id
	if val := request.GetString("ios_bundle_id", ""); val != "" {
		args["ios_bundle_id"] = val
	}

	// Optional: permission
	// array type - using string
	if val := request.GetString("permission", ""); val != "" {
		args["permission"] = val
	}

	// Optional: proxied_app_id
	if val := request.GetInt("proxied_app_id", 0); val != 0 {
		args["proxied_app_id"] = val
	}

	// Optional: status
	// array type - using string
	if val := request.GetString("status", ""); val != "" {
		args["status"] = val
	}

	// Call the client method
	result, err := client.Application_get_permissions(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_permissions: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_products handles the application_get_products tool with context-based auth
func HandleApplication_get_products(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: product_ids
	// array type - using string
	if val := request.GetString("product_ids", ""); val != "" {
		args["product_ids"] = val
	}

	// Call the client method
	result, err := client.Application_get_products(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_products: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_purchases handles the application_get_purchases tool with context-based auth
func HandleApplication_get_purchases(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Application_get_purchases(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_purchases: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_roles handles the application_get_roles tool with context-based auth
func HandleApplication_get_roles(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Application_get_roles(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_roles: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_server_domain_infos handles the application_get_server_domain_infos tool with context-based auth
func HandleApplication_get_server_domain_infos(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Application_get_server_domain_infos(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_server_domain_infos: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_sgw_dataset_status handles the application_get_sgw_dataset_status tool with context-based auth
func HandleApplication_get_sgw_dataset_status(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: dataset_id
	dataset_id, err := request.RequireInt("dataset_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter dataset_id: %v", err)), nil
	}
	args["dataset_id"] = dataset_id

	// Call the client method
	result, err := client.Application_get_sgw_dataset_status(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_sgw_dataset_status: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_sgw_install_deferral_link handles the application_get_sgw_install_deferral_link tool with context-based auth
func HandleApplication_get_sgw_install_deferral_link(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: client_ip
	if val := request.GetString("client_ip", ""); val != "" {
		args["client_ip"] = val
	}

	// Required: dataset_id
	dataset_id, err := request.RequireInt("dataset_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter dataset_id: %v", err)), nil
	}
	args["dataset_id"] = dataset_id

	// Call the client method
	result, err := client.Application_get_sgw_install_deferral_link(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_sgw_install_deferral_link: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_subscribed_domains handles the application_get_subscribed_domains tool with context-based auth
func HandleApplication_get_subscribed_domains(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Application_get_subscribed_domains(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_subscribed_domains: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_post_subscribed_domains handles the application_post_subscribed_domains tool with context-based auth
func HandleApplication_post_subscribed_domains(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: subscribe
	// array type - using string
	if val := request.GetString("subscribe", ""); val != "" {
		args["subscribe"] = val
	}

	// Optional: unsubscribe
	// array type - using string
	if val := request.GetString("unsubscribe", ""); val != "" {
		args["unsubscribe"] = val
	}

	// Call the client method
	result, err := client.Application_post_subscribed_domains(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_post_subscribed_domains: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_subscribed_domains_phishing handles the application_get_subscribed_domains_phishing tool with context-based auth
func HandleApplication_get_subscribed_domains_phishing(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Application_get_subscribed_domains_phishing(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_subscribed_domains_phishing: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_post_subscribed_domains_phishing handles the application_post_subscribed_domains_phishing tool with context-based auth
func HandleApplication_post_subscribed_domains_phishing(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: subscribe
	// array type - using string
	if val := request.GetString("subscribe", ""); val != "" {
		args["subscribe"] = val
	}

	// Optional: unsubscribe
	// array type - using string
	if val := request.GetString("unsubscribe", ""); val != "" {
		args["unsubscribe"] = val
	}

	// Call the client method
	result, err := client.Application_post_subscribed_domains_phishing(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_post_subscribed_domains_phishing: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_delete_subscriptions handles the application_delete_subscriptions tool with context-based auth
func HandleApplication_delete_subscriptions(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// array type - using string
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: object
	if val := request.GetString("object", ""); val != "" {
		args["object"] = val
	}

	// Call the client method
	result, err := client.Application_delete_subscriptions(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_delete_subscriptions: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_subscriptions handles the application_get_subscriptions tool with context-based auth
func HandleApplication_get_subscriptions(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Application_get_subscriptions(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_subscriptions: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_post_subscriptions handles the application_post_subscriptions tool with context-based auth
func HandleApplication_post_subscriptions(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: callback_url
	if val := request.GetString("callback_url", ""); val != "" {
		args["callback_url"] = val
	}

	// Optional: fields
	// array type - using string
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: include_values
	if val := request.GetBool("include_values", false); val {
		args["include_values"] = val
	}

	// Required: object
	object, err := request.RequireString("object")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter object: %v", err)), nil
	}
	args["object"] = object

	// Optional: verify_token
	if val := request.GetString("verify_token", ""); val != "" {
		args["verify_token"] = val
	}

	// Call the client method
	result, err := client.Application_post_subscriptions(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_post_subscriptions: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_post_uploads handles the application_post_uploads tool with context-based auth
func HandleApplication_post_uploads(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: file_length
	if val := request.GetInt("file_length", 0); val != 0 {
		args["file_length"] = val
	}

	// Optional: file_name
	// object type - using string
	if val := request.GetString("file_name", ""); val != "" {
		args["file_name"] = val
	}

	// Optional: file_type
	// object type - using string
	if val := request.GetString("file_type", ""); val != "" {
		args["file_type"] = val
	}

	// Optional: session_type
	if val := request.GetString("session_type", ""); val != "" {
		args["session_type"] = val
	}

	// Call the client method
	result, err := client.Application_post_uploads(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_post_uploads: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_post_whatsapp_business_solution handles the application_post_whatsapp_business_solution tool with context-based auth
func HandleApplication_post_whatsapp_business_solution(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: owner_permissions
	owner_permissions, err := request.RequireString("owner_permissions")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter owner_permissions: %v", err)), nil
	}
	args["owner_permissions"] = owner_permissions

	// Required: partner_app_id
	partner_app_id, err := request.RequireString("partner_app_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter partner_app_id: %v", err)), nil
	}
	args["partner_app_id"] = partner_app_id

	// Required: partner_permissions
	partner_permissions, err := request.RequireString("partner_permissions")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter partner_permissions: %v", err)), nil
	}
	args["partner_permissions"] = partner_permissions

	// Required: solution_name
	solution_name, err := request.RequireString("solution_name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter solution_name: %v", err)), nil
	}
	args["solution_name"] = solution_name

	// Call the client method
	result, err := client.Application_post_whatsapp_business_solution(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_post_whatsapp_business_solution: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_whatsapp_business_solutions handles the application_get_whatsapp_business_solutions tool with context-based auth
func HandleApplication_get_whatsapp_business_solutions(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: role
	if val := request.GetString("role", ""); val != "" {
		args["role"] = val
	}

	// Call the client method
	result, err := client.Application_get_whatsapp_business_solutions(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_whatsapp_business_solutions: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_get_ handles the application_get_ tool with context-based auth
func HandleApplication_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: advertiser_id
	if val := request.GetString("advertiser_id", ""); val != "" {
		args["advertiser_id"] = val
	}

	// Call the client method
	result, err := client.Application_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleApplication_post_ handles the application_post_ tool with context-based auth
func HandleApplication_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewApplicationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: allow_cycle_app_secret
	if val := request.GetBool("allow_cycle_app_secret", false); val {
		args["allow_cycle_app_secret"] = val
	}

	// Optional: an_platforms
	// array type - using string
	if val := request.GetString("an_platforms", ""); val != "" {
		args["an_platforms"] = val
	}

	// Optional: app_domains
	// array type - using string
	if val := request.GetString("app_domains", ""); val != "" {
		args["app_domains"] = val
	}

	// Optional: app_name
	if val := request.GetString("app_name", ""); val != "" {
		args["app_name"] = val
	}

	// Optional: app_type
	if val := request.GetBool("app_type", false); val {
		args["app_type"] = val
	}

	// Optional: auth_dialog_headline
	if val := request.GetString("auth_dialog_headline", ""); val != "" {
		args["auth_dialog_headline"] = val
	}

	// Optional: auth_dialog_perms_explanation
	if val := request.GetString("auth_dialog_perms_explanation", ""); val != "" {
		args["auth_dialog_perms_explanation"] = val
	}

	// Optional: auth_referral_enabled
	if val := request.GetBool("auth_referral_enabled", false); val {
		args["auth_referral_enabled"] = val
	}

	// Optional: auth_referral_extended_perms
	// array type - using string
	if val := request.GetString("auth_referral_extended_perms", ""); val != "" {
		args["auth_referral_extended_perms"] = val
	}

	// Optional: auth_referral_friend_perms
	// array type - using string
	if val := request.GetString("auth_referral_friend_perms", ""); val != "" {
		args["auth_referral_friend_perms"] = val
	}

	// Optional: auth_referral_response_type
	if val := request.GetString("auth_referral_response_type", ""); val != "" {
		args["auth_referral_response_type"] = val
	}

	// Optional: auth_referral_user_perms
	// array type - using string
	if val := request.GetString("auth_referral_user_perms", ""); val != "" {
		args["auth_referral_user_perms"] = val
	}

	// Optional: canvas_fluid_height
	if val := request.GetBool("canvas_fluid_height", false); val {
		args["canvas_fluid_height"] = val
	}

	// Optional: canvas_fluid_width
	if val := request.GetBool("canvas_fluid_width", false); val {
		args["canvas_fluid_width"] = val
	}

	// Optional: canvas_url
	if val := request.GetString("canvas_url", ""); val != "" {
		args["canvas_url"] = val
	}

	// Optional: contact_email
	if val := request.GetString("contact_email", ""); val != "" {
		args["contact_email"] = val
	}

	// Optional: deauth_callback_url
	if val := request.GetString("deauth_callback_url", ""); val != "" {
		args["deauth_callback_url"] = val
	}

	// Optional: mobile_web_url
	if val := request.GetString("mobile_web_url", ""); val != "" {
		args["mobile_web_url"] = val
	}

	// Optional: namespace
	if val := request.GetString("namespace", ""); val != "" {
		args["namespace"] = val
	}

	// Optional: page_tab_default_name
	if val := request.GetString("page_tab_default_name", ""); val != "" {
		args["page_tab_default_name"] = val
	}

	// Optional: privacy_policy_url
	if val := request.GetString("privacy_policy_url", ""); val != "" {
		args["privacy_policy_url"] = val
	}

	// Optional: restrictions
	if val := request.GetString("restrictions", ""); val != "" {
		args["restrictions"] = val
	}

	// Optional: secure_canvas_url
	if val := request.GetString("secure_canvas_url", ""); val != "" {
		args["secure_canvas_url"] = val
	}

	// Optional: secure_page_tab_url
	if val := request.GetString("secure_page_tab_url", ""); val != "" {
		args["secure_page_tab_url"] = val
	}

	// Optional: server_ip_whitelist
	// array type - using string
	if val := request.GetString("server_ip_whitelist", ""); val != "" {
		args["server_ip_whitelist"] = val
	}

	// Optional: terms_of_service_url
	if val := request.GetString("terms_of_service_url", ""); val != "" {
		args["terms_of_service_url"] = val
	}

	// Optional: url_scheme_suffix
	if val := request.GetString("url_scheme_suffix", ""); val != "" {
		args["url_scheme_suffix"] = val
	}

	// Optional: user_support_email
	if val := request.GetString("user_support_email", ""); val != "" {
		args["user_support_email"] = val
	}

	// Optional: user_support_url
	if val := request.GetString("user_support_url", ""); val != "" {
		args["user_support_url"] = val
	}

	// Optional: website_url
	if val := request.GetString("website_url", ""); val != "" {
		args["website_url"] = val
	}

	// Call the client method
	result, err := client.Application_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
