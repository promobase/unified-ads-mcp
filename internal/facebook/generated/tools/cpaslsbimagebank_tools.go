// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetCPASLsbImageBankTools returns MCP tools for CPASLsbImageBank
func GetCPASLsbImageBankTools() []mcp.Tool {
	var tools []mcp.Tool

	// cpaslsbimagebank_get_backup_images tool
	cpaslsbimagebank_get_backup_imagesTool := mcp.NewTool("cpaslsbimagebank_get_backup_images",
		mcp.WithDescription("GET backup_images for CPASLsbImageBank"),
	)
	tools = append(tools, cpaslsbimagebank_get_backup_imagesTool)

	// cpaslsbimagebank_get_ tool
	cpaslsbimagebank_get_Tool := mcp.NewTool("cpaslsbimagebank_get_",
		mcp.WithDescription("GET  for CPASLsbImageBank"),
	)
	tools = append(tools, cpaslsbimagebank_get_Tool)

	// cpaslsbimagebank_post_ tool
	cpaslsbimagebank_post_Tool := mcp.NewTool("cpaslsbimagebank_post_",
		mcp.WithDescription("POST  for CPASLsbImageBank"),
		mcp.WithString("backup_image_urls",
			mcp.Required(),
			mcp.Description("backup_image_urls parameter for "),
		),
	)
	tools = append(tools, cpaslsbimagebank_post_Tool)

	return tools
}

// CPASLsbImageBank handlers

// HandleCpaslsbimagebank_get_backup_images handles the cpaslsbimagebank_get_backup_images tool with context-based auth
func HandleCpaslsbimagebank_get_backup_images(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewCPASLsbImageBankClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Cpaslsbimagebank_get_backup_images(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute cpaslsbimagebank_get_backup_images: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleCpaslsbimagebank_get_ handles the cpaslsbimagebank_get_ tool with context-based auth
func HandleCpaslsbimagebank_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewCPASLsbImageBankClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Cpaslsbimagebank_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute cpaslsbimagebank_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleCpaslsbimagebank_post_ handles the cpaslsbimagebank_post_ tool with context-based auth
func HandleCpaslsbimagebank_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewCPASLsbImageBankClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: backup_image_urls
	backup_image_urls, err := request.RequireString("backup_image_urls")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter backup_image_urls: %v", err)), nil
	}
	args["backup_image_urls"] = backup_image_urls

	// Call the client method
	result, err := client.Cpaslsbimagebank_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute cpaslsbimagebank_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
