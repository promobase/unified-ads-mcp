// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetHighDemandPeriodTools returns MCP tools for HighDemandPeriod
func GetHighDemandPeriodTools() []mcp.Tool {
	var tools []mcp.Tool

	// highdemandperiod_delete_ tool
	highdemandperiod_delete_Tool := mcp.NewTool("highdemandperiod_delete_",
		mcp.WithDescription("DELETE  for HighDemandPeriod"),
	)
	tools = append(tools, highdemandperiod_delete_Tool)

	// highdemandperiod_get_ tool
	// Available fields for HighDemandPeriod: ad_object_id, budget_value, budget_value_type, id, recurrence_type, time_end, time_start, weekly_schedule
	highdemandperiod_get_Tool := mcp.NewTool("highdemandperiod_get_",
		mcp.WithDescription("GET  for HighDemandPeriod"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for HighDemandPeriod objects. Available fields: ad_object_id, budget_value, budget_value_type, id, recurrence_type, time_end, time_start, weekly_schedule"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, highdemandperiod_get_Tool)

	// highdemandperiod_post_ tool
	// Params object accepts: budget_value (unsigned int), budget_value_type (highdemandperiod_budget_value_type), time_end (unsigned int), time_start (unsigned int)
	highdemandperiod_post_Tool := mcp.NewTool("highdemandperiod_post_",
		mcp.WithDescription("POST  for HighDemandPeriod"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"budget_value": map[string]any{
					"type":        "integer",
					"description": "budget_value parameter",
				},
				"budget_value_type": map[string]any{
					"type":        "string",
					"description": "budget_value_type parameter",
					"enum":        []string{"ABSOLUTE", "MULTIPLIER"},
				},
				"time_end": map[string]any{
					"type":        "integer",
					"description": "time_end parameter",
				},
				"time_start": map[string]any{
					"type":        "integer",
					"description": "time_start parameter",
				},
			}),
			mcp.Description("Parameters object containing: budget_value (integer), budget_value_type (highdemandperiod_budget_value_type) [ABSOLUTE, MULTIPLIER], time_end (integer), time_start (integer)"),
		),
	)
	tools = append(tools, highdemandperiod_post_Tool)

	return tools
}

// HighDemandPeriod handlers

// HandleHighdemandperiod_delete_ handles the highdemandperiod_delete_ tool with context-based auth
func HandleHighdemandperiod_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewHighDemandPeriodClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Highdemandperiod_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute highdemandperiod_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleHighdemandperiod_get_ handles the highdemandperiod_get_ tool with context-based auth
func HandleHighdemandperiod_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewHighDemandPeriodClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Highdemandperiod_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute highdemandperiod_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleHighdemandperiod_post_ handles the highdemandperiod_post_ tool with context-based auth
func HandleHighdemandperiod_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewHighDemandPeriodClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Call the client method
	result, err := client.Highdemandperiod_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute highdemandperiod_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
