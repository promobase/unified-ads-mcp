// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetCustomAudienceTools returns MCP tools for CustomAudience
func GetCustomAudienceTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool


	// facebook_customaudience_delete_adaccounts tool
	facebook_customaudience_delete_adaccountsTool := mcp.NewTool("facebook_customaudience_delete_adaccounts",
		mcp.WithDescription("DELETE adaccounts for CustomAudience"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("adaccounts",
			mcp.Description("adaccounts parameter for adaccounts"),
		),
	)
	tools = append(tools, facebook_customaudience_delete_adaccountsTool)

	// facebook_customaudience_get_adaccounts tool
	facebook_customaudience_get_adaccountsTool := mcp.NewTool("facebook_customaudience_get_adaccounts",
		mcp.WithDescription("GET adaccounts for CustomAudience"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("permissions",
			mcp.Description("permissions parameter for adaccounts"),
		),
	)
	tools = append(tools, facebook_customaudience_get_adaccountsTool)

	// facebook_customaudience_post_adaccounts tool
	facebook_customaudience_post_adaccountsTool := mcp.NewTool("facebook_customaudience_post_adaccounts",
		mcp.WithDescription("POST adaccounts for CustomAudience"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("adaccounts",
			mcp.Description("adaccounts parameter for adaccounts"),
		),
		mcp.WithString("permissions",
			mcp.Description("permissions parameter for adaccounts"),
		),
		mcp.WithString("relationship_type",
			mcp.Description("relationship_type parameter for adaccounts"),
		),
		mcp.WithBoolean("replace",
			mcp.Description("replace parameter for adaccounts"),
		),
	)
	tools = append(tools, facebook_customaudience_post_adaccountsTool)

	// facebook_customaudience_get_ads tool
	facebook_customaudience_get_adsTool := mcp.NewTool("facebook_customaudience_get_ads",
		mcp.WithDescription("GET ads for CustomAudience"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("effective_status",
			mcp.Description("effective_status parameter for ads"),
		),
		mcp.WithString("status",
			mcp.Description("status parameter for ads"),
		),
	)
	tools = append(tools, facebook_customaudience_get_adsTool)

	// facebook_customaudience_get_health tool
	facebook_customaudience_get_healthTool := mcp.NewTool("facebook_customaudience_get_health",
		mcp.WithDescription("GET health for CustomAudience"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("calculated_date",
			mcp.Description("calculated_date parameter for health"),
		),
		mcp.WithString("processed_date",
			mcp.Description("processed_date parameter for health"),
		),
		mcp.WithNumber("value_aggregation_duration",
			mcp.Description("value_aggregation_duration parameter for health"),
		),
		mcp.WithString("value_country",
			mcp.Description("value_country parameter for health"),
		),
		mcp.WithString("value_currency",
			mcp.Description("value_currency parameter for health"),
		),
		mcp.WithNumber("value_version",
			mcp.Description("value_version parameter for health"),
		),
	)
	tools = append(tools, facebook_customaudience_get_healthTool)

	// facebook_customaudience_get_salts tool
	facebook_customaudience_get_saltsTool := mcp.NewTool("facebook_customaudience_get_salts",
		mcp.WithDescription("GET salts for CustomAudience"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("params",
			mcp.Description("params parameter for salts"),
		),
	)
	tools = append(tools, facebook_customaudience_get_saltsTool)

	// facebook_customaudience_post_salts tool
	facebook_customaudience_post_saltsTool := mcp.NewTool("facebook_customaudience_post_salts",
		mcp.WithDescription("POST salts for CustomAudience"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("salt",
			mcp.Required(),
			mcp.Description("salt parameter for salts"),
		),
		mcp.WithString("valid_from",
			mcp.Required(),
			mcp.Description("valid_from parameter for salts"),
		),
		mcp.WithString("valid_to",
			mcp.Required(),
			mcp.Description("valid_to parameter for salts"),
		),
	)
	tools = append(tools, facebook_customaudience_post_saltsTool)

	// facebook_customaudience_get_sessions tool
	facebook_customaudience_get_sessionsTool := mcp.NewTool("facebook_customaudience_get_sessions",
		mcp.WithDescription("GET sessions for CustomAudience"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithNumber("session_id",
			mcp.Description("session_id parameter for sessions"),
		),
	)
	tools = append(tools, facebook_customaudience_get_sessionsTool)

	// facebook_customaudience_get_shared_account_info tool
	facebook_customaudience_get_shared_account_infoTool := mcp.NewTool("facebook_customaudience_get_shared_account_info",
		mcp.WithDescription("GET shared_account_info for CustomAudience"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_customaudience_get_shared_account_infoTool)

	// facebook_customaudience_delete_users tool
	facebook_customaudience_delete_usersTool := mcp.NewTool("facebook_customaudience_delete_users",
		mcp.WithDescription("DELETE users for CustomAudience"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("namespace",
			mcp.Description("namespace parameter for users"),
		),
		mcp.WithString("payload",
			mcp.Description("payload parameter for users"),
		),
		mcp.WithString("session",
			mcp.Description("session parameter for users"),
		),
	)
	tools = append(tools, facebook_customaudience_delete_usersTool)

	// facebook_customaudience_post_users tool
	facebook_customaudience_post_usersTool := mcp.NewTool("facebook_customaudience_post_users",
		mcp.WithDescription("POST users for CustomAudience"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("namespace",
			mcp.Description("namespace parameter for users"),
		),
		mcp.WithString("payload",
			mcp.Description("payload parameter for users"),
		),
		mcp.WithString("session",
			mcp.Description("session parameter for users"),
		),
	)
	tools = append(tools, facebook_customaudience_post_usersTool)

	// facebook_customaudience_post_usersreplace tool
	facebook_customaudience_post_usersreplaceTool := mcp.NewTool("facebook_customaudience_post_usersreplace",
		mcp.WithDescription("POST usersreplace for CustomAudience"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("namespace",
			mcp.Description("namespace parameter for usersreplace"),
		),
		mcp.WithString("payload",
			mcp.Required(),
			mcp.Description("payload parameter for usersreplace"),
		),
		mcp.WithString("session",
			mcp.Required(),
			mcp.Description("session parameter for usersreplace"),
		),
	)
	tools = append(tools, facebook_customaudience_post_usersreplaceTool)

	// facebook_customaudience_delete_ tool
	facebook_customaudience_delete_Tool := mcp.NewTool("facebook_customaudience_delete_",
		mcp.WithDescription("DELETE  for CustomAudience"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_customaudience_delete_Tool)

	// facebook_customaudience_get_ tool
	facebook_customaudience_get_Tool := mcp.NewTool("facebook_customaudience_get_",
		mcp.WithDescription("GET  for CustomAudience"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("ad_account_id",
			mcp.Description("ad_account_id parameter for "),
		),
		mcp.WithString("special_ad_categories",
			mcp.Description("special_ad_categories parameter for "),
		),
		mcp.WithString("special_ad_category_countries",
			mcp.Description("special_ad_category_countries parameter for "),
		),
		mcp.WithString("target_countries",
			mcp.Description("target_countries parameter for "),
		),
	)
	tools = append(tools, facebook_customaudience_get_Tool)

	// facebook_customaudience_post_ tool
	facebook_customaudience_post_Tool := mcp.NewTool("facebook_customaudience_post_",
		mcp.WithDescription("POST  for CustomAudience"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("allowed_domains",
			mcp.Description("allowed_domains parameter for "),
		),
		mcp.WithString("claim_objective",
			mcp.Description("claim_objective parameter for "),
			mcp.Enum("AUTOMOTIVE_MODEL", "COLLABORATIVE_ADS", "HOME_LISTING", "MEDIA_TITLE", "PRODUCT", "TRAVEL", "VEHICLE", "VEHICLE_OFFER"),
		),
		mcp.WithString("content_type",
			mcp.Description("content_type parameter for "),
			mcp.Enum("AUTOMOTIVE_MODEL", "DESTINATION", "FLIGHT", "GENERIC", "HOME_LISTING", "HOTEL", "LOCAL_SERVICE_BUSINESS", "MEDIA_TITLE", "OFFLINE_PRODUCT", "PRODUCT", "VEHICLE", "VEHICLE_OFFER"),
		),
		mcp.WithString("countries",
			mcp.Description("countries parameter for "),
		),
		mcp.WithString("customer_file_source",
			mcp.Description("customer_file_source parameter for "),
			mcp.Enum("BOTH_USER_AND_PARTNER_PROVIDED", "PARTNER_PROVIDED_ONLY", "USER_PROVIDED_ONLY"),
		),
		mcp.WithString("description",
			mcp.Description("description parameter for "),
		),
		mcp.WithBoolean("enable_fetch_or_create",
			mcp.Description("enable_fetch_or_create parameter for "),
		),
		mcp.WithString("event_source_group",
			mcp.Description("event_source_group parameter for "),
		),
		mcp.WithString("event_sources",
			mcp.Description("event_sources parameter for "),
		),
		mcp.WithString("exclusions",
			mcp.Description("exclusions parameter for "),
		),
		mcp.WithString("inclusions",
			mcp.Description("inclusions parameter for "),
		),
		mcp.WithString("lookalike_spec",
			mcp.Description("lookalike_spec parameter for "),
		),
		mcp.WithString("name",
			mcp.Description("name parameter for "),
		),
		mcp.WithString("opt_out_link",
			mcp.Description("opt_out_link parameter for "),
		),
		mcp.WithNumber("parent_audience_id",
			mcp.Description("parent_audience_id parameter for "),
		),
		mcp.WithString("product_set_id",
			mcp.Description("product_set_id parameter for "),
		),
		mcp.WithNumber("retention_days",
			mcp.Description("retention_days parameter for "),
		),
		mcp.WithNumber("rev_share_policy_id",
			mcp.Description("rev_share_policy_id parameter for "),
		),
		mcp.WithString("rule",
			mcp.Description("rule parameter for "),
		),
		mcp.WithString("rule_aggregation",
			mcp.Description("rule_aggregation parameter for "),
		),
		mcp.WithString("tags",
			mcp.Description("tags parameter for "),
		),
		mcp.WithBoolean("use_in_campaigns",
			mcp.Description("use_in_campaigns parameter for "),
		),
	)
	tools = append(tools, facebook_customaudience_post_Tool)


	return tools
}

// CustomAudience handlers


// HandleFacebook_customaudience_delete_adaccounts handles the facebook_customaudience_delete_adaccounts tool
func HandleFacebook_customaudience_delete_adaccounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCustomAudienceClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: adaccounts
	// array type - using string
	if val := request.GetString("adaccounts", ""); val != "" {
		args["adaccounts"] = val
	}



	// Call the client method
	result, err := client.Facebook_customaudience_delete_adaccounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_customaudience_delete_adaccounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_customaudience_get_adaccounts handles the facebook_customaudience_get_adaccounts tool
func HandleFacebook_customaudience_get_adaccounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCustomAudienceClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: permissions
	if val := request.GetString("permissions", ""); val != "" {
		args["permissions"] = val
	}



	// Call the client method
	result, err := client.Facebook_customaudience_get_adaccounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_customaudience_get_adaccounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_customaudience_post_adaccounts handles the facebook_customaudience_post_adaccounts tool
func HandleFacebook_customaudience_post_adaccounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCustomAudienceClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: adaccounts
	// array type - using string
	if val := request.GetString("adaccounts", ""); val != "" {
		args["adaccounts"] = val
	}

	// Optional: permissions
	if val := request.GetString("permissions", ""); val != "" {
		args["permissions"] = val
	}

	// Optional: relationship_type
	// array type - using string
	if val := request.GetString("relationship_type", ""); val != "" {
		args["relationship_type"] = val
	}

	// Optional: replace
	if val := request.GetBool("replace", false); val {
		args["replace"] = val
	}



	// Call the client method
	result, err := client.Facebook_customaudience_post_adaccounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_customaudience_post_adaccounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_customaudience_get_ads handles the facebook_customaudience_get_ads tool
func HandleFacebook_customaudience_get_ads(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCustomAudienceClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: effective_status
	// array type - using string
	if val := request.GetString("effective_status", ""); val != "" {
		args["effective_status"] = val
	}

	// Optional: status
	// array type - using string
	if val := request.GetString("status", ""); val != "" {
		args["status"] = val
	}



	// Call the client method
	result, err := client.Facebook_customaudience_get_ads(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_customaudience_get_ads: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_customaudience_get_health handles the facebook_customaudience_get_health tool
func HandleFacebook_customaudience_get_health(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCustomAudienceClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: calculated_date
	if val := request.GetString("calculated_date", ""); val != "" {
		args["calculated_date"] = val
	}

	// Optional: processed_date
	if val := request.GetString("processed_date", ""); val != "" {
		args["processed_date"] = val
	}

	// Optional: value_aggregation_duration
	if val := request.GetInt("value_aggregation_duration", 0); val != 0 {
		args["value_aggregation_duration"] = val
	}

	// Optional: value_country
	if val := request.GetString("value_country", ""); val != "" {
		args["value_country"] = val
	}

	// Optional: value_currency
	if val := request.GetString("value_currency", ""); val != "" {
		args["value_currency"] = val
	}

	// Optional: value_version
	if val := request.GetInt("value_version", 0); val != 0 {
		args["value_version"] = val
	}



	// Call the client method
	result, err := client.Facebook_customaudience_get_health(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_customaudience_get_health: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_customaudience_get_salts handles the facebook_customaudience_get_salts tool
func HandleFacebook_customaudience_get_salts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCustomAudienceClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// array type - using string
	if val := request.GetString("params", ""); val != "" {
		args["params"] = val
	}



	// Call the client method
	result, err := client.Facebook_customaudience_get_salts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_customaudience_get_salts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_customaudience_post_salts handles the facebook_customaudience_post_salts tool
func HandleFacebook_customaudience_post_salts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCustomAudienceClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: salt
	salt, err := request.RequireString("salt")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter salt: %v", err)), nil
	}
	args["salt"] = salt

	// Required: valid_from
	valid_from, err := request.RequireString("valid_from")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter valid_from: %v", err)), nil
	}
	args["valid_from"] = valid_from

	// Required: valid_to
	valid_to, err := request.RequireString("valid_to")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter valid_to: %v", err)), nil
	}
	args["valid_to"] = valid_to



	// Call the client method
	result, err := client.Facebook_customaudience_post_salts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_customaudience_post_salts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_customaudience_get_sessions handles the facebook_customaudience_get_sessions tool
func HandleFacebook_customaudience_get_sessions(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCustomAudienceClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: session_id
	if val := request.GetInt("session_id", 0); val != 0 {
		args["session_id"] = val
	}



	// Call the client method
	result, err := client.Facebook_customaudience_get_sessions(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_customaudience_get_sessions: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_customaudience_get_shared_account_info handles the facebook_customaudience_get_shared_account_info tool
func HandleFacebook_customaudience_get_shared_account_info(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCustomAudienceClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_customaudience_get_shared_account_info(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_customaudience_get_shared_account_info: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_customaudience_delete_users handles the facebook_customaudience_delete_users tool
func HandleFacebook_customaudience_delete_users(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCustomAudienceClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: namespace
	if val := request.GetString("namespace", ""); val != "" {
		args["namespace"] = val
	}

	// Optional: payload
	// object type - using string
	if val := request.GetString("payload", ""); val != "" {
		args["payload"] = val
	}

	// Optional: session
	// object type - using string
	if val := request.GetString("session", ""); val != "" {
		args["session"] = val
	}



	// Call the client method
	result, err := client.Facebook_customaudience_delete_users(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_customaudience_delete_users: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_customaudience_post_users handles the facebook_customaudience_post_users tool
func HandleFacebook_customaudience_post_users(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCustomAudienceClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: namespace
	if val := request.GetString("namespace", ""); val != "" {
		args["namespace"] = val
	}

	// Optional: payload
	// object type - using string
	if val := request.GetString("payload", ""); val != "" {
		args["payload"] = val
	}

	// Optional: session
	// object type - using string
	if val := request.GetString("session", ""); val != "" {
		args["session"] = val
	}



	// Call the client method
	result, err := client.Facebook_customaudience_post_users(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_customaudience_post_users: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_customaudience_post_usersreplace handles the facebook_customaudience_post_usersreplace tool
func HandleFacebook_customaudience_post_usersreplace(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCustomAudienceClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: namespace
	if val := request.GetString("namespace", ""); val != "" {
		args["namespace"] = val
	}

	// Required: payload
	payload, err := request.RequireString("payload")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter payload: %v", err)), nil
	}
	args["payload"] = payload

	// Required: session
	session, err := request.RequireString("session")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter session: %v", err)), nil
	}
	args["session"] = session



	// Call the client method
	result, err := client.Facebook_customaudience_post_usersreplace(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_customaudience_post_usersreplace: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_customaudience_delete_ handles the facebook_customaudience_delete_ tool
func HandleFacebook_customaudience_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCustomAudienceClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_customaudience_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_customaudience_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_customaudience_get_ handles the facebook_customaudience_get_ tool
func HandleFacebook_customaudience_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCustomAudienceClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: ad_account_id
	if val := request.GetString("ad_account_id", ""); val != "" {
		args["ad_account_id"] = val
	}

	// Optional: special_ad_categories
	// array type - using string
	if val := request.GetString("special_ad_categories", ""); val != "" {
		args["special_ad_categories"] = val
	}

	// Optional: special_ad_category_countries
	// array type - using string
	if val := request.GetString("special_ad_category_countries", ""); val != "" {
		args["special_ad_category_countries"] = val
	}

	// Optional: target_countries
	// array type - using string
	if val := request.GetString("target_countries", ""); val != "" {
		args["target_countries"] = val
	}



	// Call the client method
	result, err := client.Facebook_customaudience_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_customaudience_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_customaudience_post_ handles the facebook_customaudience_post_ tool
func HandleFacebook_customaudience_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCustomAudienceClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: allowed_domains
	// array type - using string
	if val := request.GetString("allowed_domains", ""); val != "" {
		args["allowed_domains"] = val
	}

	// Optional: claim_objective
	if val := request.GetString("claim_objective", ""); val != "" {
		args["claim_objective"] = val
	}

	// Optional: content_type
	if val := request.GetString("content_type", ""); val != "" {
		args["content_type"] = val
	}

	// Optional: countries
	if val := request.GetString("countries", ""); val != "" {
		args["countries"] = val
	}

	// Optional: customer_file_source
	if val := request.GetString("customer_file_source", ""); val != "" {
		args["customer_file_source"] = val
	}

	// Optional: description
	if val := request.GetString("description", ""); val != "" {
		args["description"] = val
	}

	// Optional: enable_fetch_or_create
	if val := request.GetBool("enable_fetch_or_create", false); val {
		args["enable_fetch_or_create"] = val
	}

	// Optional: event_source_group
	if val := request.GetString("event_source_group", ""); val != "" {
		args["event_source_group"] = val
	}

	// Optional: event_sources
	// array type - using string
	if val := request.GetString("event_sources", ""); val != "" {
		args["event_sources"] = val
	}

	// Optional: exclusions
	// array type - using string
	if val := request.GetString("exclusions", ""); val != "" {
		args["exclusions"] = val
	}

	// Optional: inclusions
	// array type - using string
	if val := request.GetString("inclusions", ""); val != "" {
		args["inclusions"] = val
	}

	// Optional: lookalike_spec
	if val := request.GetString("lookalike_spec", ""); val != "" {
		args["lookalike_spec"] = val
	}

	// Optional: name
	if val := request.GetString("name", ""); val != "" {
		args["name"] = val
	}

	// Optional: opt_out_link
	if val := request.GetString("opt_out_link", ""); val != "" {
		args["opt_out_link"] = val
	}

	// Optional: parent_audience_id
	if val := request.GetInt("parent_audience_id", 0); val != 0 {
		args["parent_audience_id"] = val
	}

	// Optional: product_set_id
	if val := request.GetString("product_set_id", ""); val != "" {
		args["product_set_id"] = val
	}

	// Optional: retention_days
	if val := request.GetInt("retention_days", 0); val != 0 {
		args["retention_days"] = val
	}

	// Optional: rev_share_policy_id
	if val := request.GetInt("rev_share_policy_id", 0); val != 0 {
		args["rev_share_policy_id"] = val
	}

	// Optional: rule
	if val := request.GetString("rule", ""); val != "" {
		args["rule"] = val
	}

	// Optional: rule_aggregation
	if val := request.GetString("rule_aggregation", ""); val != "" {
		args["rule_aggregation"] = val
	}

	// Optional: tags
	// array type - using string
	if val := request.GetString("tags", ""); val != "" {
		args["tags"] = val
	}

	// Optional: use_in_campaigns
	if val := request.GetBool("use_in_campaigns", false); val {
		args["use_in_campaigns"] = val
	}



	// Call the client method
	result, err := client.Facebook_customaudience_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_customaudience_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

