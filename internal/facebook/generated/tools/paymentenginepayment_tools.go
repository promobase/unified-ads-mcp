// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetPaymentEnginePaymentTools returns MCP tools for PaymentEnginePayment
func GetPaymentEnginePaymentTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool

	// facebook_paymentenginepayment_post_dispute tool
	facebook_paymentenginepayment_post_disputeTool := mcp.NewTool("facebook_paymentenginepayment_post_dispute",
		mcp.WithDescription("POST dispute for PaymentEnginePayment"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("reason",
			mcp.Required(),
			mcp.Description("reason parameter for dispute"),
			mcp.Enum("BANNED_USER", "DENIED_REFUND", "GRANTED_REPLACEMENT_ITEM"),
		),
	)
	tools = append(tools, facebook_paymentenginepayment_post_disputeTool)

	// facebook_paymentenginepayment_post_refunds tool
	facebook_paymentenginepayment_post_refundsTool := mcp.NewTool("facebook_paymentenginepayment_post_refunds",
		mcp.WithDescription("POST refunds for PaymentEnginePayment"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithNumber("amount",
			mcp.Required(),
			mcp.Description("amount parameter for refunds"),
		),
		mcp.WithString("currency",
			mcp.Required(),
			mcp.Description("currency parameter for refunds"),
		),
		mcp.WithString("reason",
			mcp.Description("reason parameter for refunds"),
			mcp.Enum("CUSTOMER_SERVICE", "FRIENDLY_FRAUD", "MALICIOUS_FRAUD"),
		),
	)
	tools = append(tools, facebook_paymentenginepayment_post_refundsTool)

	// facebook_paymentenginepayment_get_ tool
	facebook_paymentenginepayment_get_Tool := mcp.NewTool("facebook_paymentenginepayment_get_",
		mcp.WithDescription("GET  for PaymentEnginePayment"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_paymentenginepayment_get_Tool)

	return tools
}

// PaymentEnginePayment handlers

// HandleFacebook_paymentenginepayment_post_dispute handles the facebook_paymentenginepayment_post_dispute tool
func HandleFacebook_paymentenginepayment_post_dispute(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewPaymentEnginePaymentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: reason
	reason, err := request.RequireString("reason")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter reason: %v", err)), nil
	}
	args["reason"] = reason

	// Call the client method
	result, err := client.Facebook_paymentenginepayment_post_dispute(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_paymentenginepayment_post_dispute: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_paymentenginepayment_post_refunds handles the facebook_paymentenginepayment_post_refunds tool
func HandleFacebook_paymentenginepayment_post_refunds(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewPaymentEnginePaymentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: amount
	amount, err := request.RequireFloat("amount")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter amount: %v", err)), nil
	}
	args["amount"] = amount

	// Required: currency
	currency, err := request.RequireString("currency")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter currency: %v", err)), nil
	}
	args["currency"] = currency

	// Optional: reason
	if val := request.GetString("reason", ""); val != "" {
		args["reason"] = val
	}

	// Call the client method
	result, err := client.Facebook_paymentenginepayment_post_refunds(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_paymentenginepayment_post_refunds: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_paymentenginepayment_get_ handles the facebook_paymentenginepayment_get_ tool
func HandleFacebook_paymentenginepayment_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewPaymentEnginePaymentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_paymentenginepayment_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_paymentenginepayment_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
