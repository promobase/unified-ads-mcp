// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetPaymentEnginePaymentTools returns MCP tools for PaymentEnginePayment
func GetPaymentEnginePaymentTools() []mcp.Tool {
	var tools []mcp.Tool


	// paymentenginepayment_post_dispute tool
	// Params object accepts: reason (paymentenginepaymentdispute_reason_enum_param)
	paymentenginepayment_post_disputeTool := mcp.NewTool("paymentenginepayment_post_dispute",
		mcp.WithDescription("POST dispute for PaymentEnginePayment"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"reason": map[string]any{
					"type": "string",
					"description": "reason parameter",
					"required": true,
					"enum": []string{ "BANNED_USER", "DENIED_REFUND", "GRANTED_REPLACEMENT_ITEM" },
				},
			}),
			mcp.Description("Parameters object containing: reason (enum) [BANNED_USER, DENIED_REFUND, GRANTED_REPLACEMENT_ITEM] [required]"),
		),
	)
	tools = append(tools, paymentenginepayment_post_disputeTool)

	// paymentenginepayment_post_refunds tool
	// Params object accepts: amount (float), currency (string), reason (paymentenginepaymentrefunds_reason_enum_param)
	paymentenginepayment_post_refundsTool := mcp.NewTool("paymentenginepayment_post_refunds",
		mcp.WithDescription("POST refunds for PaymentEnginePayment"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"amount": map[string]any{
					"type": "number",
					"description": "amount parameter",
					"required": true,
				},
				"currency": map[string]any{
					"type": "string",
					"description": "currency parameter",
					"required": true,
				},
				"reason": map[string]any{
					"type": "string",
					"description": "reason parameter",
					"enum": []string{ "CUSTOMER_SERVICE", "FRIENDLY_FRAUD", "MALICIOUS_FRAUD" },
				},
			}),
			mcp.Description("Parameters object containing: amount (number) [required], currency (string) [required], reason (enum) [CUSTOMER_SERVICE, FRIENDLY_FRAUD, MALICIOUS_FRAUD]"),
		),
	)
	tools = append(tools, paymentenginepayment_post_refundsTool)

	// paymentenginepayment_get_ tool
	// Available fields for PaymentEnginePayment: actions, application, country, created_time, disputes, fraud_status, fulfillment_status, id, is_from_ad, is_from_page_post, items, payout_foreign_exchange_rate, phone_support_eligible, platform, refundable_amount, request_id, tax, tax_country, test, user
	paymentenginepayment_get_Tool := mcp.NewTool("paymentenginepayment_get_",
		mcp.WithDescription("GET  for PaymentEnginePayment"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for PaymentEnginePayment objects. Available fields: actions, application, country, created_time, disputes, fraud_status, fulfillment_status, id, is_from_ad, is_from_page_post, items, payout_foreign_exchange_rate, phone_support_eligible, platform, refundable_amount (and 5 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, paymentenginepayment_get_Tool)


	return tools
}

// PaymentEnginePayment handlers


// HandlePaymentenginepayment_post_dispute handles the paymentenginepayment_post_dispute tool with context-based auth
func HandlePaymentenginepayment_post_dispute(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPaymentEnginePaymentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}



	// Call the client method
	result, err := client.Paymentenginepayment_post_dispute(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute paymentenginepayment_post_dispute: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandlePaymentenginepayment_post_refunds handles the paymentenginepayment_post_refunds tool with context-based auth
func HandlePaymentenginepayment_post_refunds(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPaymentEnginePaymentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}



	// Call the client method
	result, err := client.Paymentenginepayment_post_refunds(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute paymentenginepayment_post_refunds: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandlePaymentenginepayment_get_ handles the paymentenginepayment_get_ tool with context-based auth
func HandlePaymentenginepayment_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPaymentEnginePaymentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Paymentenginepayment_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute paymentenginepayment_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

