// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetAdLabelTools returns MCP tools for AdLabel
func GetAdLabelTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool

	// facebook_adlabel_get_adcreatives tool
	facebook_adlabel_get_adcreativesTool := mcp.NewTool("facebook_adlabel_get_adcreatives",
		mcp.WithDescription("GET adcreatives for AdLabel"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_adlabel_get_adcreativesTool)

	// facebook_adlabel_get_ads tool
	facebook_adlabel_get_adsTool := mcp.NewTool("facebook_adlabel_get_ads",
		mcp.WithDescription("GET ads for AdLabel"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_adlabel_get_adsTool)

	// facebook_adlabel_get_adsets tool
	facebook_adlabel_get_adsetsTool := mcp.NewTool("facebook_adlabel_get_adsets",
		mcp.WithDescription("GET adsets for AdLabel"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_adlabel_get_adsetsTool)

	// facebook_adlabel_get_campaigns tool
	facebook_adlabel_get_campaignsTool := mcp.NewTool("facebook_adlabel_get_campaigns",
		mcp.WithDescription("GET campaigns for AdLabel"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_adlabel_get_campaignsTool)

	// facebook_adlabel_delete_ tool
	facebook_adlabel_delete_Tool := mcp.NewTool("facebook_adlabel_delete_",
		mcp.WithDescription("DELETE  for AdLabel"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_adlabel_delete_Tool)

	// facebook_adlabel_get_ tool
	facebook_adlabel_get_Tool := mcp.NewTool("facebook_adlabel_get_",
		mcp.WithDescription("GET  for AdLabel"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_adlabel_get_Tool)

	// facebook_adlabel_post_ tool
	facebook_adlabel_post_Tool := mcp.NewTool("facebook_adlabel_post_",
		mcp.WithDescription("POST  for AdLabel"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("name",
			mcp.Required(),
			mcp.Description("name parameter for "),
		),
	)
	tools = append(tools, facebook_adlabel_post_Tool)

	return tools
}

// AdLabel handlers

// HandleFacebook_adlabel_get_adcreatives handles the facebook_adlabel_get_adcreatives tool
func HandleFacebook_adlabel_get_adcreatives(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAdLabelClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_adlabel_get_adcreatives(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_adlabel_get_adcreatives: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_adlabel_get_ads handles the facebook_adlabel_get_ads tool
func HandleFacebook_adlabel_get_ads(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAdLabelClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_adlabel_get_ads(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_adlabel_get_ads: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_adlabel_get_adsets handles the facebook_adlabel_get_adsets tool
func HandleFacebook_adlabel_get_adsets(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAdLabelClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_adlabel_get_adsets(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_adlabel_get_adsets: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_adlabel_get_campaigns handles the facebook_adlabel_get_campaigns tool
func HandleFacebook_adlabel_get_campaigns(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAdLabelClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_adlabel_get_campaigns(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_adlabel_get_campaigns: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_adlabel_delete_ handles the facebook_adlabel_delete_ tool
func HandleFacebook_adlabel_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAdLabelClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_adlabel_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_adlabel_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_adlabel_get_ handles the facebook_adlabel_get_ tool
func HandleFacebook_adlabel_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAdLabelClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_adlabel_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_adlabel_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_adlabel_post_ handles the facebook_adlabel_post_ tool
func HandleFacebook_adlabel_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAdLabelClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: name
	name, err := request.RequireString("name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter name: %v", err)), nil
	}
	args["name"] = name

	// Call the client method
	result, err := client.Facebook_adlabel_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_adlabel_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
