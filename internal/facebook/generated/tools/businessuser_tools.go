// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetBusinessUserTools returns MCP tools for BusinessUser
func GetBusinessUserTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool

	// facebook_businessuser_get_assigned_ad_accounts tool
	facebook_businessuser_get_assigned_ad_accountsTool := mcp.NewTool("facebook_businessuser_get_assigned_ad_accounts",
		mcp.WithDescription("GET assigned_ad_accounts for BusinessUser"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_businessuser_get_assigned_ad_accountsTool)

	// facebook_businessuser_get_assigned_business_asset_groups tool
	facebook_businessuser_get_assigned_business_asset_groupsTool := mcp.NewTool("facebook_businessuser_get_assigned_business_asset_groups",
		mcp.WithDescription("GET assigned_business_asset_groups for BusinessUser"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("contained_asset_id",
			mcp.Description("contained_asset_id parameter for assigned_business_asset_groups"),
		),
	)
	tools = append(tools, facebook_businessuser_get_assigned_business_asset_groupsTool)

	// facebook_businessuser_get_assigned_pages tool
	facebook_businessuser_get_assigned_pagesTool := mcp.NewTool("facebook_businessuser_get_assigned_pages",
		mcp.WithDescription("GET assigned_pages for BusinessUser"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("pages",
			mcp.Description("pages parameter for assigned_pages"),
		),
	)
	tools = append(tools, facebook_businessuser_get_assigned_pagesTool)

	// facebook_businessuser_get_assigned_product_catalogs tool
	facebook_businessuser_get_assigned_product_catalogsTool := mcp.NewTool("facebook_businessuser_get_assigned_product_catalogs",
		mcp.WithDescription("GET assigned_product_catalogs for BusinessUser"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_businessuser_get_assigned_product_catalogsTool)

	// facebook_businessuser_delete_ tool
	facebook_businessuser_delete_Tool := mcp.NewTool("facebook_businessuser_delete_",
		mcp.WithDescription("DELETE  for BusinessUser"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_businessuser_delete_Tool)

	// facebook_businessuser_get_ tool
	facebook_businessuser_get_Tool := mcp.NewTool("facebook_businessuser_get_",
		mcp.WithDescription("GET  for BusinessUser"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_businessuser_get_Tool)

	// facebook_businessuser_post_ tool
	facebook_businessuser_post_Tool := mcp.NewTool("facebook_businessuser_post_",
		mcp.WithDescription("POST  for BusinessUser"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithBoolean("clear_pending_email",
			mcp.Description("clear_pending_email parameter for "),
		),
		mcp.WithString("email",
			mcp.Description("email parameter for "),
		),
		mcp.WithString("first_name",
			mcp.Description("first_name parameter for "),
		),
		mcp.WithString("last_name",
			mcp.Description("last_name parameter for "),
		),
		mcp.WithString("pending_email",
			mcp.Description("pending_email parameter for "),
		),
		mcp.WithString("role",
			mcp.Description("role parameter for "),
			mcp.Enum("ADMIN", "ADS_RIGHTS_REVIEWER", "DEFAULT", "DEVELOPER", "EMPLOYEE", "FINANCE_ANALYST", "FINANCE_EDIT", "FINANCE_EDITOR", "FINANCE_VIEW", "MANAGE", "PARTNER_CENTER_ADMIN", "PARTNER_CENTER_ANALYST", "PARTNER_CENTER_EDUCATION", "PARTNER_CENTER_MARKETING", "PARTNER_CENTER_OPERATIONS"),
		),
		mcp.WithBoolean("skip_verification_email",
			mcp.Description("skip_verification_email parameter for "),
		),
		mcp.WithString("tasks",
			mcp.Description("tasks parameter for "),
			mcp.Enum("ADMIN", "ADS_RIGHTS_REVIEWER", "DEFAULT", "DEVELOPER", "EMPLOYEE", "FINANCE_ANALYST", "FINANCE_EDIT", "FINANCE_EDITOR", "FINANCE_VIEW", "MANAGE", "PARTNER_CENTER_ADMIN", "PARTNER_CENTER_ANALYST", "PARTNER_CENTER_EDUCATION", "PARTNER_CENTER_MARKETING", "PARTNER_CENTER_OPERATIONS"),
		),
		mcp.WithString("title",
			mcp.Description("title parameter for "),
		),
	)
	tools = append(tools, facebook_businessuser_post_Tool)

	return tools
}

// BusinessUser handlers

// HandleFacebook_businessuser_get_assigned_ad_accounts handles the facebook_businessuser_get_assigned_ad_accounts tool
func HandleFacebook_businessuser_get_assigned_ad_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessUserClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_businessuser_get_assigned_ad_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessuser_get_assigned_ad_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessuser_get_assigned_business_asset_groups handles the facebook_businessuser_get_assigned_business_asset_groups tool
func HandleFacebook_businessuser_get_assigned_business_asset_groups(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessUserClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: contained_asset_id
	if val := request.GetString("contained_asset_id", ""); val != "" {
		args["contained_asset_id"] = val
	}

	// Call the client method
	result, err := client.Facebook_businessuser_get_assigned_business_asset_groups(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessuser_get_assigned_business_asset_groups: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessuser_get_assigned_pages handles the facebook_businessuser_get_assigned_pages tool
func HandleFacebook_businessuser_get_assigned_pages(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessUserClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: pages
	// array type - using string
	if val := request.GetString("pages", ""); val != "" {
		args["pages"] = val
	}

	// Call the client method
	result, err := client.Facebook_businessuser_get_assigned_pages(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessuser_get_assigned_pages: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessuser_get_assigned_product_catalogs handles the facebook_businessuser_get_assigned_product_catalogs tool
func HandleFacebook_businessuser_get_assigned_product_catalogs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessUserClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_businessuser_get_assigned_product_catalogs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessuser_get_assigned_product_catalogs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessuser_delete_ handles the facebook_businessuser_delete_ tool
func HandleFacebook_businessuser_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessUserClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_businessuser_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessuser_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessuser_get_ handles the facebook_businessuser_get_ tool
func HandleFacebook_businessuser_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessUserClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_businessuser_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessuser_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessuser_post_ handles the facebook_businessuser_post_ tool
func HandleFacebook_businessuser_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessUserClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: clear_pending_email
	if val := request.GetBool("clear_pending_email", false); val {
		args["clear_pending_email"] = val
	}

	// Optional: email
	if val := request.GetString("email", ""); val != "" {
		args["email"] = val
	}

	// Optional: first_name
	if val := request.GetString("first_name", ""); val != "" {
		args["first_name"] = val
	}

	// Optional: last_name
	if val := request.GetString("last_name", ""); val != "" {
		args["last_name"] = val
	}

	// Optional: pending_email
	if val := request.GetString("pending_email", ""); val != "" {
		args["pending_email"] = val
	}

	// Optional: role
	if val := request.GetString("role", ""); val != "" {
		args["role"] = val
	}

	// Optional: skip_verification_email
	if val := request.GetBool("skip_verification_email", false); val {
		args["skip_verification_email"] = val
	}

	// Optional: tasks
	// array type - using string
	if val := request.GetString("tasks", ""); val != "" {
		args["tasks"] = val
	}

	// Optional: title
	if val := request.GetString("title", ""); val != "" {
		args["title"] = val
	}

	// Call the client method
	result, err := client.Facebook_businessuser_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessuser_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
