// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetVideoListTools returns MCP tools for VideoList
func GetVideoListTools() []mcp.Tool {
	var tools []mcp.Tool

	// videolist_get_videos tool
	videolist_get_videosTool := mcp.NewTool("videolist_get_videos",
		mcp.WithDescription("GET videos for VideoList"),
	)
	tools = append(tools, videolist_get_videosTool)

	// videolist_get_ tool
	videolist_get_Tool := mcp.NewTool("videolist_get_",
		mcp.WithDescription("GET  for VideoList"),
	)
	tools = append(tools, videolist_get_Tool)

	return tools
}

// VideoList handlers

// HandleVideolist_get_videos handles the videolist_get_videos tool with context-based auth
func HandleVideolist_get_videos(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewVideoListClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Videolist_get_videos(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute videolist_get_videos: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleVideolist_get_ handles the videolist_get_ tool with context-based auth
func HandleVideolist_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewVideoListClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Videolist_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute videolist_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
