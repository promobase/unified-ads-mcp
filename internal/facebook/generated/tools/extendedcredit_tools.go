// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetExtendedCreditTools returns MCP tools for ExtendedCredit
func GetExtendedCreditTools() []mcp.Tool {
	var tools []mcp.Tool

	// extendedcredit_get_extended_credit_invoice_groups tool
	// Available fields for ExtendedCreditInvoiceGroup: auto_enroll, bill_to_address, customer_po_number, email, emails, id, liable_address, name, sold_to_address
	extendedcredit_get_extended_credit_invoice_groupsTool := mcp.NewTool("extendedcredit_get_extended_credit_invoice_groups",
		mcp.WithDescription("GET extended_credit_invoice_groups for ExtendedCredit"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for ExtendedCreditInvoiceGroup objects. Available fields: auto_enroll, bill_to_address, customer_po_number, email, emails, id, liable_address, name, sold_to_address"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, extendedcredit_get_extended_credit_invoice_groupsTool)

	// extendedcredit_post_extended_credit_invoice_groups tool
	// Params object accepts: emails (list<string>), name (string)
	extendedcredit_post_extended_credit_invoice_groupsTool := mcp.NewTool("extendedcredit_post_extended_credit_invoice_groups",
		mcp.WithDescription("POST extended_credit_invoice_groups for ExtendedCredit"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"emails": map[string]any{
					"type":        "array",
					"description": "emails parameter",
					"required":    true,
					"items":       map[string]any{"type": "string"},
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: emails (array<string>) [required], name (string) [required]"),
		),
	)
	tools = append(tools, extendedcredit_post_extended_credit_invoice_groupsTool)

	// extendedcredit_get_owning_credit_allocation_configs tool
	// Available fields for ExtendedCreditAllocationConfig: currency_amount, id, liability_type, owning_business, owning_credential, partition_type, receiving_business, receiving_credential, request_status, send_bill_to
	// Params object accepts: receiving_business_id (string)
	extendedcredit_get_owning_credit_allocation_configsTool := mcp.NewTool("extendedcredit_get_owning_credit_allocation_configs",
		mcp.WithDescription("GET owning_credit_allocation_configs for ExtendedCredit"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"receiving_business_id": map[string]any{
					"type":        "string",
					"description": "receiving_business_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: receiving_business_id (string)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for ExtendedCreditAllocationConfig objects. Available fields: currency_amount, id, liability_type, owning_business, owning_credential, partition_type, receiving_business, receiving_credential, request_status, send_bill_to"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, extendedcredit_get_owning_credit_allocation_configsTool)

	// extendedcredit_post_owning_credit_allocation_configs tool
	// Params object accepts: amount (Object), liability_type (extendedcreditowning_credit_allocation_configs_liability_type_enum_param), partition_type (extendedcreditowning_credit_allocation_configs_partition_type_enum_param), receiving_business_id (string), send_bill_to (extendedcreditowning_credit_allocation_configs_send_bill_to_enum_param)
	extendedcredit_post_owning_credit_allocation_configsTool := mcp.NewTool("extendedcredit_post_owning_credit_allocation_configs",
		mcp.WithDescription("POST owning_credit_allocation_configs for ExtendedCredit"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"amount": map[string]any{
					"type":        "object",
					"description": "amount parameter",
				},
				"liability_type": map[string]any{
					"type":        "string",
					"description": "liability_type parameter",
					"enum":        []string{"", "MSA", "Normal", "Sequential"},
				},
				"partition_type": map[string]any{
					"type":        "string",
					"description": "partition_type parameter",
					"enum":        []string{"AUTH", "FIXED", "FIXED_WITHOUT_PARTITION"},
				},
				"receiving_business_id": map[string]any{
					"type":        "string",
					"description": "receiving_business_id parameter",
					"required":    true,
				},
				"send_bill_to": map[string]any{
					"type":        "string",
					"description": "send_bill_to parameter",
					"enum":        []string{"", "Advertiser", "Agency"},
				},
			}),
			mcp.Description("Parameters object containing: amount (object), liability_type (enum) [, MSA, Normal, Sequential], partition_type (enum) [AUTH, FIXED, FIXED_WITHOUT_PARTITION], receiving_business_id (string) [required], send_bill_to (enum) [, Advertiser, Agency]"),
		),
	)
	tools = append(tools, extendedcredit_post_owning_credit_allocation_configsTool)

	// extendedcredit_post_whatsapp_credit_attach tool
	// Params object accepts: waba_currency (string), waba_id (string)
	extendedcredit_post_whatsapp_credit_attachTool := mcp.NewTool("extendedcredit_post_whatsapp_credit_attach",
		mcp.WithDescription("POST whatsapp_credit_attach for ExtendedCredit"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"waba_currency": map[string]any{
					"type":        "string",
					"description": "waba_currency parameter",
					"required":    true,
				},
				"waba_id": map[string]any{
					"type":        "string",
					"description": "waba_id parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: waba_currency (string) [required], waba_id (string) [required]"),
		),
	)
	tools = append(tools, extendedcredit_post_whatsapp_credit_attachTool)

	// extendedcredit_post_whatsapp_credit_sharing tool
	// Params object accepts: receiving_business_id (string)
	extendedcredit_post_whatsapp_credit_sharingTool := mcp.NewTool("extendedcredit_post_whatsapp_credit_sharing",
		mcp.WithDescription("POST whatsapp_credit_sharing for ExtendedCredit"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"receiving_business_id": map[string]any{
					"type":        "string",
					"description": "receiving_business_id parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: receiving_business_id (string) [required]"),
		),
	)
	tools = append(tools, extendedcredit_post_whatsapp_credit_sharingTool)

	// extendedcredit_post_whatsapp_credit_sharing_and_attach tool
	// Params object accepts: waba_currency (string), waba_id (string)
	extendedcredit_post_whatsapp_credit_sharing_and_attachTool := mcp.NewTool("extendedcredit_post_whatsapp_credit_sharing_and_attach",
		mcp.WithDescription("POST whatsapp_credit_sharing_and_attach for ExtendedCredit"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"waba_currency": map[string]any{
					"type":        "string",
					"description": "waba_currency parameter",
					"required":    true,
				},
				"waba_id": map[string]any{
					"type":        "string",
					"description": "waba_id parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: waba_currency (string) [required], waba_id (string) [required]"),
		),
	)
	tools = append(tools, extendedcredit_post_whatsapp_credit_sharing_and_attachTool)

	// extendedcredit_get_ tool
	// Available fields for ExtendedCredit: allocated_amount, balance, credit_available, credit_type, id, is_access_revoked, is_automated_experience, legal_entity_name, liable_address, liable_biz_name, max_balance, online_max_balance, owner_business, owner_business_name, partition_from, receiving_credit_allocation_config, send_bill_to_address, send_bill_to_biz_name, sold_to_address
	extendedcredit_get_Tool := mcp.NewTool("extendedcredit_get_",
		mcp.WithDescription("GET  for ExtendedCredit"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for ExtendedCredit objects. Available fields: allocated_amount, balance, credit_available, credit_type, id, is_access_revoked, is_automated_experience, legal_entity_name, liable_address, liable_biz_name, max_balance, online_max_balance, owner_business, owner_business_name, partition_from (and 4 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, extendedcredit_get_Tool)

	return tools
}

// ExtendedCredit handlers

// HandleExtendedcredit_get_extended_credit_invoice_groups handles the extendedcredit_get_extended_credit_invoice_groups tool with context-based auth
func HandleExtendedcredit_get_extended_credit_invoice_groups(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewExtendedCreditClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Extendedcredit_get_extended_credit_invoice_groups(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcredit_get_extended_credit_invoice_groups: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleExtendedcredit_post_extended_credit_invoice_groups handles the extendedcredit_post_extended_credit_invoice_groups tool with context-based auth
func HandleExtendedcredit_post_extended_credit_invoice_groups(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewExtendedCreditClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the client method
	result, err := client.Extendedcredit_post_extended_credit_invoice_groups(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcredit_post_extended_credit_invoice_groups: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleExtendedcredit_get_owning_credit_allocation_configs handles the extendedcredit_get_owning_credit_allocation_configs tool with context-based auth
func HandleExtendedcredit_get_owning_credit_allocation_configs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewExtendedCreditClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Extendedcredit_get_owning_credit_allocation_configs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcredit_get_owning_credit_allocation_configs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleExtendedcredit_post_owning_credit_allocation_configs handles the extendedcredit_post_owning_credit_allocation_configs tool with context-based auth
func HandleExtendedcredit_post_owning_credit_allocation_configs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewExtendedCreditClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the client method
	result, err := client.Extendedcredit_post_owning_credit_allocation_configs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcredit_post_owning_credit_allocation_configs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleExtendedcredit_post_whatsapp_credit_attach handles the extendedcredit_post_whatsapp_credit_attach tool with context-based auth
func HandleExtendedcredit_post_whatsapp_credit_attach(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewExtendedCreditClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the client method
	result, err := client.Extendedcredit_post_whatsapp_credit_attach(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcredit_post_whatsapp_credit_attach: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleExtendedcredit_post_whatsapp_credit_sharing handles the extendedcredit_post_whatsapp_credit_sharing tool with context-based auth
func HandleExtendedcredit_post_whatsapp_credit_sharing(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewExtendedCreditClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the client method
	result, err := client.Extendedcredit_post_whatsapp_credit_sharing(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcredit_post_whatsapp_credit_sharing: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleExtendedcredit_post_whatsapp_credit_sharing_and_attach handles the extendedcredit_post_whatsapp_credit_sharing_and_attach tool with context-based auth
func HandleExtendedcredit_post_whatsapp_credit_sharing_and_attach(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewExtendedCreditClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the client method
	result, err := client.Extendedcredit_post_whatsapp_credit_sharing_and_attach(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcredit_post_whatsapp_credit_sharing_and_attach: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleExtendedcredit_get_ handles the extendedcredit_get_ tool with context-based auth
func HandleExtendedcredit_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewExtendedCreditClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Extendedcredit_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcredit_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
