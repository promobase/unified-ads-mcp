// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetExtendedCreditTools returns MCP tools for ExtendedCredit
func GetExtendedCreditTools() []mcp.Tool {
	var tools []mcp.Tool

	// extendedcredit_get_extended_credit_invoice_groups tool
	// Available fields for ExtendedCreditInvoiceGroup: auto_enroll, bill_to_address, customer_po_number, email, emails, id, liable_address, name, sold_to_address
	extendedcredit_get_extended_credit_invoice_groupsTool := mcp.NewTool("extendedcredit_get_extended_credit_invoice_groups",
		mcp.WithDescription("GET extended_credit_invoice_groups for ExtendedCredit"),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for ExtendedCreditInvoiceGroup objects. Available fields: auto_enroll, bill_to_address, customer_po_number, email, emails, id, liable_address, name, sold_to_address"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, extendedcredit_get_extended_credit_invoice_groupsTool)

	// extendedcredit_post_extended_credit_invoice_groups tool
	extendedcredit_post_extended_credit_invoice_groupsTool := mcp.NewTool("extendedcredit_post_extended_credit_invoice_groups",
		mcp.WithDescription("POST extended_credit_invoice_groups for ExtendedCredit"),
		mcp.WithString("emails",
			mcp.Required(),
			mcp.Description("emails parameter for extended_credit_invoice_groups"),
		),
		mcp.WithString("name",
			mcp.Required(),
			mcp.Description("name parameter for extended_credit_invoice_groups"),
		),
	)
	tools = append(tools, extendedcredit_post_extended_credit_invoice_groupsTool)

	// extendedcredit_get_owning_credit_allocation_configs tool
	// Available fields for ExtendedCreditAllocationConfig: currency_amount, id, liability_type, owning_business, owning_credential, partition_type, receiving_business, receiving_credential, request_status, send_bill_to
	extendedcredit_get_owning_credit_allocation_configsTool := mcp.NewTool("extendedcredit_get_owning_credit_allocation_configs",
		mcp.WithDescription("GET owning_credit_allocation_configs for ExtendedCredit"),
		mcp.WithString("receiving_business_id",
			mcp.Description("receiving_business_id parameter for owning_credit_allocation_configs"),
		),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for ExtendedCreditAllocationConfig objects. Available fields: currency_amount, id, liability_type, owning_business, owning_credential, partition_type, receiving_business, receiving_credential, request_status, send_bill_to"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, extendedcredit_get_owning_credit_allocation_configsTool)

	// extendedcredit_post_owning_credit_allocation_configs tool
	extendedcredit_post_owning_credit_allocation_configsTool := mcp.NewTool("extendedcredit_post_owning_credit_allocation_configs",
		mcp.WithDescription("POST owning_credit_allocation_configs for ExtendedCredit"),
		mcp.WithString("amount",
			mcp.Description("amount parameter for owning_credit_allocation_configs"),
		),
		mcp.WithString("liability_type",
			mcp.Description("liability_type parameter for owning_credit_allocation_configs"),
			mcp.Enum("", "MSA", "Normal", "Sequential"),
		),
		mcp.WithString("partition_type",
			mcp.Description("partition_type parameter for owning_credit_allocation_configs"),
			mcp.Enum("AUTH", "FIXED", "FIXED_WITHOUT_PARTITION"),
		),
		mcp.WithString("receiving_business_id",
			mcp.Required(),
			mcp.Description("receiving_business_id parameter for owning_credit_allocation_configs"),
		),
		mcp.WithString("send_bill_to",
			mcp.Description("send_bill_to parameter for owning_credit_allocation_configs"),
			mcp.Enum("", "Advertiser", "Agency"),
		),
	)
	tools = append(tools, extendedcredit_post_owning_credit_allocation_configsTool)

	// extendedcredit_post_whatsapp_credit_attach tool
	extendedcredit_post_whatsapp_credit_attachTool := mcp.NewTool("extendedcredit_post_whatsapp_credit_attach",
		mcp.WithDescription("POST whatsapp_credit_attach for ExtendedCredit"),
		mcp.WithString("waba_currency",
			mcp.Required(),
			mcp.Description("waba_currency parameter for whatsapp_credit_attach"),
		),
		mcp.WithString("waba_id",
			mcp.Required(),
			mcp.Description("waba_id parameter for whatsapp_credit_attach"),
		),
	)
	tools = append(tools, extendedcredit_post_whatsapp_credit_attachTool)

	// extendedcredit_post_whatsapp_credit_sharing tool
	extendedcredit_post_whatsapp_credit_sharingTool := mcp.NewTool("extendedcredit_post_whatsapp_credit_sharing",
		mcp.WithDescription("POST whatsapp_credit_sharing for ExtendedCredit"),
		mcp.WithString("receiving_business_id",
			mcp.Required(),
			mcp.Description("receiving_business_id parameter for whatsapp_credit_sharing"),
		),
	)
	tools = append(tools, extendedcredit_post_whatsapp_credit_sharingTool)

	// extendedcredit_post_whatsapp_credit_sharing_and_attach tool
	extendedcredit_post_whatsapp_credit_sharing_and_attachTool := mcp.NewTool("extendedcredit_post_whatsapp_credit_sharing_and_attach",
		mcp.WithDescription("POST whatsapp_credit_sharing_and_attach for ExtendedCredit"),
		mcp.WithString("waba_currency",
			mcp.Required(),
			mcp.Description("waba_currency parameter for whatsapp_credit_sharing_and_attach"),
		),
		mcp.WithString("waba_id",
			mcp.Required(),
			mcp.Description("waba_id parameter for whatsapp_credit_sharing_and_attach"),
		),
	)
	tools = append(tools, extendedcredit_post_whatsapp_credit_sharing_and_attachTool)

	// extendedcredit_get_ tool
	// Available fields for ExtendedCredit: allocated_amount, balance, credit_available, credit_type, id, is_access_revoked, is_automated_experience, legal_entity_name, liable_address, liable_biz_name, max_balance, online_max_balance, owner_business, owner_business_name, partition_from, receiving_credit_allocation_config, send_bill_to_address, send_bill_to_biz_name, sold_to_address
	extendedcredit_get_Tool := mcp.NewTool("extendedcredit_get_",
		mcp.WithDescription("GET  for ExtendedCredit"),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for ExtendedCredit objects. Available fields: allocated_amount, balance, credit_available, credit_type, id, is_access_revoked, is_automated_experience, legal_entity_name, liable_address, liable_biz_name, max_balance, online_max_balance, owner_business, owner_business_name, partition_from (and 4 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, extendedcredit_get_Tool)

	return tools
}

// ExtendedCredit handlers

// HandleExtendedcredit_get_extended_credit_invoice_groups handles the extendedcredit_get_extended_credit_invoice_groups tool with context-based auth
func HandleExtendedcredit_get_extended_credit_invoice_groups(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewExtendedCreditClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Extendedcredit_get_extended_credit_invoice_groups(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcredit_get_extended_credit_invoice_groups: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleExtendedcredit_post_extended_credit_invoice_groups handles the extendedcredit_post_extended_credit_invoice_groups tool with context-based auth
func HandleExtendedcredit_post_extended_credit_invoice_groups(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewExtendedCreditClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: emails
	emails, err := request.RequireString("emails")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter emails: %v", err)), nil
	}
	args["emails"] = emails

	// Required: name
	name, err := request.RequireString("name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter name: %v", err)), nil
	}
	args["name"] = name

	// Call the client method
	result, err := client.Extendedcredit_post_extended_credit_invoice_groups(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcredit_post_extended_credit_invoice_groups: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleExtendedcredit_get_owning_credit_allocation_configs handles the extendedcredit_get_owning_credit_allocation_configs tool with context-based auth
func HandleExtendedcredit_get_owning_credit_allocation_configs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewExtendedCreditClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: receiving_business_id
	if val := request.GetString("receiving_business_id", ""); val != "" {
		args["receiving_business_id"] = val
	}

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Extendedcredit_get_owning_credit_allocation_configs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcredit_get_owning_credit_allocation_configs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleExtendedcredit_post_owning_credit_allocation_configs handles the extendedcredit_post_owning_credit_allocation_configs tool with context-based auth
func HandleExtendedcredit_post_owning_credit_allocation_configs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewExtendedCreditClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: amount
	// object type - using string
	if val := request.GetString("amount", ""); val != "" {
		args["amount"] = val
	}

	// Optional: liability_type
	if val := request.GetString("liability_type", ""); val != "" {
		args["liability_type"] = val
	}

	// Optional: partition_type
	if val := request.GetString("partition_type", ""); val != "" {
		args["partition_type"] = val
	}

	// Required: receiving_business_id
	receiving_business_id, err := request.RequireString("receiving_business_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter receiving_business_id: %v", err)), nil
	}
	args["receiving_business_id"] = receiving_business_id

	// Optional: send_bill_to
	if val := request.GetString("send_bill_to", ""); val != "" {
		args["send_bill_to"] = val
	}

	// Call the client method
	result, err := client.Extendedcredit_post_owning_credit_allocation_configs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcredit_post_owning_credit_allocation_configs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleExtendedcredit_post_whatsapp_credit_attach handles the extendedcredit_post_whatsapp_credit_attach tool with context-based auth
func HandleExtendedcredit_post_whatsapp_credit_attach(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewExtendedCreditClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: waba_currency
	waba_currency, err := request.RequireString("waba_currency")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter waba_currency: %v", err)), nil
	}
	args["waba_currency"] = waba_currency

	// Required: waba_id
	waba_id, err := request.RequireString("waba_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter waba_id: %v", err)), nil
	}
	args["waba_id"] = waba_id

	// Call the client method
	result, err := client.Extendedcredit_post_whatsapp_credit_attach(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcredit_post_whatsapp_credit_attach: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleExtendedcredit_post_whatsapp_credit_sharing handles the extendedcredit_post_whatsapp_credit_sharing tool with context-based auth
func HandleExtendedcredit_post_whatsapp_credit_sharing(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewExtendedCreditClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: receiving_business_id
	receiving_business_id, err := request.RequireString("receiving_business_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter receiving_business_id: %v", err)), nil
	}
	args["receiving_business_id"] = receiving_business_id

	// Call the client method
	result, err := client.Extendedcredit_post_whatsapp_credit_sharing(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcredit_post_whatsapp_credit_sharing: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleExtendedcredit_post_whatsapp_credit_sharing_and_attach handles the extendedcredit_post_whatsapp_credit_sharing_and_attach tool with context-based auth
func HandleExtendedcredit_post_whatsapp_credit_sharing_and_attach(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewExtendedCreditClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: waba_currency
	waba_currency, err := request.RequireString("waba_currency")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter waba_currency: %v", err)), nil
	}
	args["waba_currency"] = waba_currency

	// Required: waba_id
	waba_id, err := request.RequireString("waba_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter waba_id: %v", err)), nil
	}
	args["waba_id"] = waba_id

	// Call the client method
	result, err := client.Extendedcredit_post_whatsapp_credit_sharing_and_attach(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcredit_post_whatsapp_credit_sharing_and_attach: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleExtendedcredit_get_ handles the extendedcredit_get_ tool with context-based auth
func HandleExtendedcredit_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewExtendedCreditClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Extendedcredit_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcredit_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
