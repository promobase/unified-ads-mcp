// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetExtendedCreditTools returns MCP tools for ExtendedCredit
func GetExtendedCreditTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool

	// facebook_extendedcredit_get_extended_credit_invoice_groups tool
	facebook_extendedcredit_get_extended_credit_invoice_groupsTool := mcp.NewTool("facebook_extendedcredit_get_extended_credit_invoice_groups",
		mcp.WithDescription("GET extended_credit_invoice_groups for ExtendedCredit"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_extendedcredit_get_extended_credit_invoice_groupsTool)

	// facebook_extendedcredit_post_extended_credit_invoice_groups tool
	facebook_extendedcredit_post_extended_credit_invoice_groupsTool := mcp.NewTool("facebook_extendedcredit_post_extended_credit_invoice_groups",
		mcp.WithDescription("POST extended_credit_invoice_groups for ExtendedCredit"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("emails",
			mcp.Required(),
			mcp.Description("emails parameter for extended_credit_invoice_groups"),
		),
		mcp.WithString("name",
			mcp.Required(),
			mcp.Description("name parameter for extended_credit_invoice_groups"),
		),
	)
	tools = append(tools, facebook_extendedcredit_post_extended_credit_invoice_groupsTool)

	// facebook_extendedcredit_get_owning_credit_allocation_configs tool
	facebook_extendedcredit_get_owning_credit_allocation_configsTool := mcp.NewTool("facebook_extendedcredit_get_owning_credit_allocation_configs",
		mcp.WithDescription("GET owning_credit_allocation_configs for ExtendedCredit"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("receiving_business_id",
			mcp.Description("receiving_business_id parameter for owning_credit_allocation_configs"),
		),
	)
	tools = append(tools, facebook_extendedcredit_get_owning_credit_allocation_configsTool)

	// facebook_extendedcredit_post_owning_credit_allocation_configs tool
	facebook_extendedcredit_post_owning_credit_allocation_configsTool := mcp.NewTool("facebook_extendedcredit_post_owning_credit_allocation_configs",
		mcp.WithDescription("POST owning_credit_allocation_configs for ExtendedCredit"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("amount",
			mcp.Description("amount parameter for owning_credit_allocation_configs"),
		),
		mcp.WithString("liability_type",
			mcp.Description("liability_type parameter for owning_credit_allocation_configs"),
			mcp.Enum("", "MSA", "Normal", "Sequential"),
		),
		mcp.WithString("partition_type",
			mcp.Description("partition_type parameter for owning_credit_allocation_configs"),
			mcp.Enum("AUTH", "FIXED", "FIXED_WITHOUT_PARTITION"),
		),
		mcp.WithString("receiving_business_id",
			mcp.Required(),
			mcp.Description("receiving_business_id parameter for owning_credit_allocation_configs"),
		),
		mcp.WithString("send_bill_to",
			mcp.Description("send_bill_to parameter for owning_credit_allocation_configs"),
			mcp.Enum("", "Advertiser", "Agency"),
		),
	)
	tools = append(tools, facebook_extendedcredit_post_owning_credit_allocation_configsTool)

	// facebook_extendedcredit_post_whatsapp_credit_attach tool
	facebook_extendedcredit_post_whatsapp_credit_attachTool := mcp.NewTool("facebook_extendedcredit_post_whatsapp_credit_attach",
		mcp.WithDescription("POST whatsapp_credit_attach for ExtendedCredit"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("waba_currency",
			mcp.Required(),
			mcp.Description("waba_currency parameter for whatsapp_credit_attach"),
		),
		mcp.WithString("waba_id",
			mcp.Required(),
			mcp.Description("waba_id parameter for whatsapp_credit_attach"),
		),
	)
	tools = append(tools, facebook_extendedcredit_post_whatsapp_credit_attachTool)

	// facebook_extendedcredit_post_whatsapp_credit_sharing tool
	facebook_extendedcredit_post_whatsapp_credit_sharingTool := mcp.NewTool("facebook_extendedcredit_post_whatsapp_credit_sharing",
		mcp.WithDescription("POST whatsapp_credit_sharing for ExtendedCredit"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("receiving_business_id",
			mcp.Required(),
			mcp.Description("receiving_business_id parameter for whatsapp_credit_sharing"),
		),
	)
	tools = append(tools, facebook_extendedcredit_post_whatsapp_credit_sharingTool)

	// facebook_extendedcredit_post_whatsapp_credit_sharing_and_attach tool
	facebook_extendedcredit_post_whatsapp_credit_sharing_and_attachTool := mcp.NewTool("facebook_extendedcredit_post_whatsapp_credit_sharing_and_attach",
		mcp.WithDescription("POST whatsapp_credit_sharing_and_attach for ExtendedCredit"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("waba_currency",
			mcp.Required(),
			mcp.Description("waba_currency parameter for whatsapp_credit_sharing_and_attach"),
		),
		mcp.WithString("waba_id",
			mcp.Required(),
			mcp.Description("waba_id parameter for whatsapp_credit_sharing_and_attach"),
		),
	)
	tools = append(tools, facebook_extendedcredit_post_whatsapp_credit_sharing_and_attachTool)

	// facebook_extendedcredit_get_ tool
	facebook_extendedcredit_get_Tool := mcp.NewTool("facebook_extendedcredit_get_",
		mcp.WithDescription("GET  for ExtendedCredit"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_extendedcredit_get_Tool)

	return tools
}

// ExtendedCredit handlers

// HandleFacebook_extendedcredit_get_extended_credit_invoice_groups handles the facebook_extendedcredit_get_extended_credit_invoice_groups tool
func HandleFacebook_extendedcredit_get_extended_credit_invoice_groups(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewExtendedCreditClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_extendedcredit_get_extended_credit_invoice_groups(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_extendedcredit_get_extended_credit_invoice_groups: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_extendedcredit_post_extended_credit_invoice_groups handles the facebook_extendedcredit_post_extended_credit_invoice_groups tool
func HandleFacebook_extendedcredit_post_extended_credit_invoice_groups(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewExtendedCreditClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: emails
	emails, err := request.RequireString("emails")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter emails: %v", err)), nil
	}
	args["emails"] = emails

	// Required: name
	name, err := request.RequireString("name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter name: %v", err)), nil
	}
	args["name"] = name

	// Call the client method
	result, err := client.Facebook_extendedcredit_post_extended_credit_invoice_groups(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_extendedcredit_post_extended_credit_invoice_groups: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_extendedcredit_get_owning_credit_allocation_configs handles the facebook_extendedcredit_get_owning_credit_allocation_configs tool
func HandleFacebook_extendedcredit_get_owning_credit_allocation_configs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewExtendedCreditClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: receiving_business_id
	if val := request.GetString("receiving_business_id", ""); val != "" {
		args["receiving_business_id"] = val
	}

	// Call the client method
	result, err := client.Facebook_extendedcredit_get_owning_credit_allocation_configs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_extendedcredit_get_owning_credit_allocation_configs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_extendedcredit_post_owning_credit_allocation_configs handles the facebook_extendedcredit_post_owning_credit_allocation_configs tool
func HandleFacebook_extendedcredit_post_owning_credit_allocation_configs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewExtendedCreditClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: amount
	// object type - using string
	if val := request.GetString("amount", ""); val != "" {
		args["amount"] = val
	}

	// Optional: liability_type
	if val := request.GetString("liability_type", ""); val != "" {
		args["liability_type"] = val
	}

	// Optional: partition_type
	if val := request.GetString("partition_type", ""); val != "" {
		args["partition_type"] = val
	}

	// Required: receiving_business_id
	receiving_business_id, err := request.RequireString("receiving_business_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter receiving_business_id: %v", err)), nil
	}
	args["receiving_business_id"] = receiving_business_id

	// Optional: send_bill_to
	if val := request.GetString("send_bill_to", ""); val != "" {
		args["send_bill_to"] = val
	}

	// Call the client method
	result, err := client.Facebook_extendedcredit_post_owning_credit_allocation_configs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_extendedcredit_post_owning_credit_allocation_configs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_extendedcredit_post_whatsapp_credit_attach handles the facebook_extendedcredit_post_whatsapp_credit_attach tool
func HandleFacebook_extendedcredit_post_whatsapp_credit_attach(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewExtendedCreditClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: waba_currency
	waba_currency, err := request.RequireString("waba_currency")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter waba_currency: %v", err)), nil
	}
	args["waba_currency"] = waba_currency

	// Required: waba_id
	waba_id, err := request.RequireString("waba_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter waba_id: %v", err)), nil
	}
	args["waba_id"] = waba_id

	// Call the client method
	result, err := client.Facebook_extendedcredit_post_whatsapp_credit_attach(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_extendedcredit_post_whatsapp_credit_attach: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_extendedcredit_post_whatsapp_credit_sharing handles the facebook_extendedcredit_post_whatsapp_credit_sharing tool
func HandleFacebook_extendedcredit_post_whatsapp_credit_sharing(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewExtendedCreditClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: receiving_business_id
	receiving_business_id, err := request.RequireString("receiving_business_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter receiving_business_id: %v", err)), nil
	}
	args["receiving_business_id"] = receiving_business_id

	// Call the client method
	result, err := client.Facebook_extendedcredit_post_whatsapp_credit_sharing(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_extendedcredit_post_whatsapp_credit_sharing: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_extendedcredit_post_whatsapp_credit_sharing_and_attach handles the facebook_extendedcredit_post_whatsapp_credit_sharing_and_attach tool
func HandleFacebook_extendedcredit_post_whatsapp_credit_sharing_and_attach(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewExtendedCreditClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: waba_currency
	waba_currency, err := request.RequireString("waba_currency")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter waba_currency: %v", err)), nil
	}
	args["waba_currency"] = waba_currency

	// Required: waba_id
	waba_id, err := request.RequireString("waba_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter waba_id: %v", err)), nil
	}
	args["waba_id"] = waba_id

	// Call the client method
	result, err := client.Facebook_extendedcredit_post_whatsapp_credit_sharing_and_attach(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_extendedcredit_post_whatsapp_credit_sharing_and_attach: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_extendedcredit_get_ handles the facebook_extendedcredit_get_ tool
func HandleFacebook_extendedcredit_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewExtendedCreditClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_extendedcredit_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_extendedcredit_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
