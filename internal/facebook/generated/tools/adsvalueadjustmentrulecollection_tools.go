// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetAdsValueAdjustmentRuleCollectionTools returns MCP tools for AdsValueAdjustmentRuleCollection
func GetAdsValueAdjustmentRuleCollectionTools() []mcp.Tool {
	var tools []mcp.Tool

	// adsvalueadjustmentrulecollection_post_delete_rule_set tool
	adsvalueadjustmentrulecollection_post_delete_rule_setTool := mcp.NewTool("adsvalueadjustmentrulecollection_post_delete_rule_set",
		mcp.WithDescription("POST delete_rule_set for AdsValueAdjustmentRuleCollection"),
	)
	tools = append(tools, adsvalueadjustmentrulecollection_post_delete_rule_setTool)

	// adsvalueadjustmentrulecollection_get_rules tool
	adsvalueadjustmentrulecollection_get_rulesTool := mcp.NewTool("adsvalueadjustmentrulecollection_get_rules",
		mcp.WithDescription("GET rules for AdsValueAdjustmentRuleCollection"),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, adsvalueadjustmentrulecollection_get_rulesTool)

	// adsvalueadjustmentrulecollection_get_ tool
	// Available fields for AdsValueAdjustmentRuleCollection: id, is_default_setting, name, product_type, status
	adsvalueadjustmentrulecollection_get_Tool := mcp.NewTool("adsvalueadjustmentrulecollection_get_",
		mcp.WithDescription("GET  for AdsValueAdjustmentRuleCollection"),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for AdsValueAdjustmentRuleCollection objects. Available fields: id, is_default_setting, name, product_type, status"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, adsvalueadjustmentrulecollection_get_Tool)

	// adsvalueadjustmentrulecollection_post_ tool
	adsvalueadjustmentrulecollection_post_Tool := mcp.NewTool("adsvalueadjustmentrulecollection_post_",
		mcp.WithDescription("POST  for AdsValueAdjustmentRuleCollection"),
		mcp.WithBoolean("is_default_setting",
			mcp.Description("is_default_setting parameter for "),
		),
		mcp.WithString("name",
			mcp.Required(),
			mcp.Description("name parameter for "),
		),
		mcp.WithString("rules",
			mcp.Required(),
			mcp.Description("rules parameter for "),
		),
	)
	tools = append(tools, adsvalueadjustmentrulecollection_post_Tool)

	return tools
}

// AdsValueAdjustmentRuleCollection handlers

// HandleAdsvalueadjustmentrulecollection_post_delete_rule_set handles the adsvalueadjustmentrulecollection_post_delete_rule_set tool with context-based auth
func HandleAdsvalueadjustmentrulecollection_post_delete_rule_set(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdsValueAdjustmentRuleCollectionClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Adsvalueadjustmentrulecollection_post_delete_rule_set(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adsvalueadjustmentrulecollection_post_delete_rule_set: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAdsvalueadjustmentrulecollection_get_rules handles the adsvalueadjustmentrulecollection_get_rules tool with context-based auth
func HandleAdsvalueadjustmentrulecollection_get_rules(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdsValueAdjustmentRuleCollectionClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Adsvalueadjustmentrulecollection_get_rules(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adsvalueadjustmentrulecollection_get_rules: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAdsvalueadjustmentrulecollection_get_ handles the adsvalueadjustmentrulecollection_get_ tool with context-based auth
func HandleAdsvalueadjustmentrulecollection_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdsValueAdjustmentRuleCollectionClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Adsvalueadjustmentrulecollection_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adsvalueadjustmentrulecollection_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAdsvalueadjustmentrulecollection_post_ handles the adsvalueadjustmentrulecollection_post_ tool with context-based auth
func HandleAdsvalueadjustmentrulecollection_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdsValueAdjustmentRuleCollectionClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: is_default_setting
	if val := request.GetBool("is_default_setting", false); val {
		args["is_default_setting"] = val
	}

	// Required: name
	name, err := request.RequireString("name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter name: %v", err)), nil
	}
	args["name"] = name

	// Required: rules
	rules, err := request.RequireString("rules")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter rules: %v", err)), nil
	}
	args["rules"] = rules

	// Call the client method
	result, err := client.Adsvalueadjustmentrulecollection_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adsvalueadjustmentrulecollection_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
