// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetMediaFingerprintTools returns MCP tools for MediaFingerprint
func GetMediaFingerprintTools() []mcp.Tool {
	var tools []mcp.Tool

	// mediafingerprint_get_ tool
	mediafingerprint_get_Tool := mcp.NewTool("mediafingerprint_get_",
		mcp.WithDescription("GET  for MediaFingerprint"),
	)
	tools = append(tools, mediafingerprint_get_Tool)

	// mediafingerprint_post_ tool
	mediafingerprint_post_Tool := mcp.NewTool("mediafingerprint_post_",
		mcp.WithDescription("POST  for MediaFingerprint"),
		mcp.WithString("metadata",
			mcp.Description("metadata parameter for "),
		),
		mcp.WithString("source",
			mcp.Description("source parameter for "),
		),
		mcp.WithString("title",
			mcp.Description("title parameter for "),
		),
		mcp.WithString("universal_content_id",
			mcp.Description("universal_content_id parameter for "),
		),
	)
	tools = append(tools, mediafingerprint_post_Tool)

	return tools
}

// MediaFingerprint handlers

// HandleMediafingerprint_get_ handles the mediafingerprint_get_ tool with context-based auth
func HandleMediafingerprint_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewMediaFingerprintClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Mediafingerprint_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute mediafingerprint_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleMediafingerprint_post_ handles the mediafingerprint_post_ tool with context-based auth
func HandleMediafingerprint_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewMediaFingerprintClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: metadata
	if val := request.GetString("metadata", ""); val != "" {
		args["metadata"] = val
	}

	// Optional: source
	if val := request.GetString("source", ""); val != "" {
		args["source"] = val
	}

	// Optional: title
	if val := request.GetString("title", ""); val != "" {
		args["title"] = val
	}

	// Optional: universal_content_id
	if val := request.GetString("universal_content_id", ""); val != "" {
		args["universal_content_id"] = val
	}

	// Call the client method
	result, err := client.Mediafingerprint_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute mediafingerprint_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
