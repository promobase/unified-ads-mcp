// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetPageUserMessageThreadLabelTools returns MCP tools for PageUserMessageThreadLabel
func GetPageUserMessageThreadLabelTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool

	// pageusermessagethreadlabel_delete_label tool
	pageusermessagethreadlabel_delete_labelTool := mcp.NewTool("pageusermessagethreadlabel_delete_label",
		mcp.WithDescription("DELETE label for PageUserMessageThreadLabel"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithNumber("user",
			mcp.Required(),
			mcp.Description("user parameter for label"),
		),
	)
	tools = append(tools, pageusermessagethreadlabel_delete_labelTool)

	// pageusermessagethreadlabel_post_label tool
	pageusermessagethreadlabel_post_labelTool := mcp.NewTool("pageusermessagethreadlabel_post_label",
		mcp.WithDescription("POST label for PageUserMessageThreadLabel"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithNumber("user",
			mcp.Required(),
			mcp.Description("user parameter for label"),
		),
	)
	tools = append(tools, pageusermessagethreadlabel_post_labelTool)

	// pageusermessagethreadlabel_delete_ tool
	pageusermessagethreadlabel_delete_Tool := mcp.NewTool("pageusermessagethreadlabel_delete_",
		mcp.WithDescription("DELETE  for PageUserMessageThreadLabel"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, pageusermessagethreadlabel_delete_Tool)

	// pageusermessagethreadlabel_get_ tool
	pageusermessagethreadlabel_get_Tool := mcp.NewTool("pageusermessagethreadlabel_get_",
		mcp.WithDescription("GET  for PageUserMessageThreadLabel"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, pageusermessagethreadlabel_get_Tool)

	return tools
}

// PageUserMessageThreadLabel handlers

// HandlePageusermessagethreadlabel_delete_label handles the pageusermessagethreadlabel_delete_label tool
func HandlePageusermessagethreadlabel_delete_label(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewPageUserMessageThreadLabelClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: user
	user, err := request.RequireInt("user")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter user: %v", err)), nil
	}
	args["user"] = user

	// Call the client method
	result, err := client.Pageusermessagethreadlabel_delete_label(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pageusermessagethreadlabel_delete_label: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePageusermessagethreadlabel_post_label handles the pageusermessagethreadlabel_post_label tool
func HandlePageusermessagethreadlabel_post_label(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewPageUserMessageThreadLabelClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: user
	user, err := request.RequireInt("user")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter user: %v", err)), nil
	}
	args["user"] = user

	// Call the client method
	result, err := client.Pageusermessagethreadlabel_post_label(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pageusermessagethreadlabel_post_label: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePageusermessagethreadlabel_delete_ handles the pageusermessagethreadlabel_delete_ tool
func HandlePageusermessagethreadlabel_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewPageUserMessageThreadLabelClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Pageusermessagethreadlabel_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pageusermessagethreadlabel_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePageusermessagethreadlabel_get_ handles the pageusermessagethreadlabel_get_ tool
func HandlePageusermessagethreadlabel_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewPageUserMessageThreadLabelClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Pageusermessagethreadlabel_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pageusermessagethreadlabel_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
