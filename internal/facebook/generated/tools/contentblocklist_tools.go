// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetContentBlockListTools returns MCP tools for ContentBlockList
func GetContentBlockListTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool


	// facebook_contentblocklist_get_applied_ad_accounts tool
	facebook_contentblocklist_get_applied_ad_accountsTool := mcp.NewTool("facebook_contentblocklist_get_applied_ad_accounts",
		mcp.WithDescription("GET applied_ad_accounts for ContentBlockList"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_contentblocklist_get_applied_ad_accountsTool)

	// facebook_contentblocklist_get_facebook_content tool
	facebook_contentblocklist_get_facebook_contentTool := mcp.NewTool("facebook_contentblocklist_get_facebook_content",
		mcp.WithDescription("GET facebook_content for ContentBlockList"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_contentblocklist_get_facebook_contentTool)

	// facebook_contentblocklist_get_instagram_content tool
	facebook_contentblocklist_get_instagram_contentTool := mcp.NewTool("facebook_contentblocklist_get_instagram_content",
		mcp.WithDescription("GET instagram_content for ContentBlockList"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_contentblocklist_get_instagram_contentTool)

	// facebook_contentblocklist_get_ tool
	facebook_contentblocklist_get_Tool := mcp.NewTool("facebook_contentblocklist_get_",
		mcp.WithDescription("GET  for ContentBlockList"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_contentblocklist_get_Tool)


	return tools
}

// ContentBlockList handlers


// HandleFacebook_contentblocklist_get_applied_ad_accounts handles the facebook_contentblocklist_get_applied_ad_accounts tool
func HandleFacebook_contentblocklist_get_applied_ad_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewContentBlockListClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_contentblocklist_get_applied_ad_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_contentblocklist_get_applied_ad_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_contentblocklist_get_facebook_content handles the facebook_contentblocklist_get_facebook_content tool
func HandleFacebook_contentblocklist_get_facebook_content(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewContentBlockListClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_contentblocklist_get_facebook_content(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_contentblocklist_get_facebook_content: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_contentblocklist_get_instagram_content handles the facebook_contentblocklist_get_instagram_content tool
func HandleFacebook_contentblocklist_get_instagram_content(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewContentBlockListClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_contentblocklist_get_instagram_content(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_contentblocklist_get_instagram_content: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_contentblocklist_get_ handles the facebook_contentblocklist_get_ tool
func HandleFacebook_contentblocklist_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewContentBlockListClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_contentblocklist_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_contentblocklist_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

