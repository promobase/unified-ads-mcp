// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetEventSourceGroupTools returns MCP tools for EventSourceGroup
func GetEventSourceGroupTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool

	// facebook_eventsourcegroup_get_shared_accounts tool
	facebook_eventsourcegroup_get_shared_accountsTool := mcp.NewTool("facebook_eventsourcegroup_get_shared_accounts",
		mcp.WithDescription("GET shared_accounts for EventSourceGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_eventsourcegroup_get_shared_accountsTool)

	// facebook_eventsourcegroup_post_shared_accounts tool
	facebook_eventsourcegroup_post_shared_accountsTool := mcp.NewTool("facebook_eventsourcegroup_post_shared_accounts",
		mcp.WithDescription("POST shared_accounts for EventSourceGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("accounts",
			mcp.Required(),
			mcp.Description("accounts parameter for shared_accounts"),
		),
	)
	tools = append(tools, facebook_eventsourcegroup_post_shared_accountsTool)

	// facebook_eventsourcegroup_get_ tool
	facebook_eventsourcegroup_get_Tool := mcp.NewTool("facebook_eventsourcegroup_get_",
		mcp.WithDescription("GET  for EventSourceGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_eventsourcegroup_get_Tool)

	// facebook_eventsourcegroup_post_ tool
	facebook_eventsourcegroup_post_Tool := mcp.NewTool("facebook_eventsourcegroup_post_",
		mcp.WithDescription("POST  for EventSourceGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("event_sources",
			mcp.Required(),
			mcp.Description("event_sources parameter for "),
		),
		mcp.WithString("name",
			mcp.Required(),
			mcp.Description("name parameter for "),
		),
	)
	tools = append(tools, facebook_eventsourcegroup_post_Tool)

	return tools
}

// EventSourceGroup handlers

// HandleFacebook_eventsourcegroup_get_shared_accounts handles the facebook_eventsourcegroup_get_shared_accounts tool
func HandleFacebook_eventsourcegroup_get_shared_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewEventSourceGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_eventsourcegroup_get_shared_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_eventsourcegroup_get_shared_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_eventsourcegroup_post_shared_accounts handles the facebook_eventsourcegroup_post_shared_accounts tool
func HandleFacebook_eventsourcegroup_post_shared_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewEventSourceGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: accounts
	accounts, err := request.RequireString("accounts")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter accounts: %v", err)), nil
	}
	args["accounts"] = accounts

	// Call the client method
	result, err := client.Facebook_eventsourcegroup_post_shared_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_eventsourcegroup_post_shared_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_eventsourcegroup_get_ handles the facebook_eventsourcegroup_get_ tool
func HandleFacebook_eventsourcegroup_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewEventSourceGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_eventsourcegroup_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_eventsourcegroup_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_eventsourcegroup_post_ handles the facebook_eventsourcegroup_post_ tool
func HandleFacebook_eventsourcegroup_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewEventSourceGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: event_sources
	event_sources, err := request.RequireString("event_sources")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter event_sources: %v", err)), nil
	}
	args["event_sources"] = event_sources

	// Required: name
	name, err := request.RequireString("name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter name: %v", err)), nil
	}
	args["name"] = name

	// Call the client method
	result, err := client.Facebook_eventsourcegroup_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_eventsourcegroup_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
