// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetIGMediaTools returns MCP tools for IGMedia
func GetIGMediaTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool

	// facebook_igmedia_get_boost_ads_list tool
	facebook_igmedia_get_boost_ads_listTool := mcp.NewTool("facebook_igmedia_get_boost_ads_list",
		mcp.WithDescription("GET boost_ads_list for IGMedia"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_igmedia_get_boost_ads_listTool)

	// facebook_igmedia_get_branded_content_partner_promote tool
	facebook_igmedia_get_branded_content_partner_promoteTool := mcp.NewTool("facebook_igmedia_get_branded_content_partner_promote",
		mcp.WithDescription("GET branded_content_partner_promote for IGMedia"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_igmedia_get_branded_content_partner_promoteTool)

	// facebook_igmedia_post_branded_content_partner_promote tool
	facebook_igmedia_post_branded_content_partner_promoteTool := mcp.NewTool("facebook_igmedia_post_branded_content_partner_promote",
		mcp.WithDescription("POST branded_content_partner_promote for IGMedia"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithBoolean("permission",
			mcp.Required(),
			mcp.Description("permission parameter for branded_content_partner_promote"),
		),
		mcp.WithNumber("sponsor_id",
			mcp.Required(),
			mcp.Description("sponsor_id parameter for branded_content_partner_promote"),
		),
	)
	tools = append(tools, facebook_igmedia_post_branded_content_partner_promoteTool)

	// facebook_igmedia_get_children tool
	facebook_igmedia_get_childrenTool := mcp.NewTool("facebook_igmedia_get_children",
		mcp.WithDescription("GET children for IGMedia"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_igmedia_get_childrenTool)

	// facebook_igmedia_get_collaborators tool
	facebook_igmedia_get_collaboratorsTool := mcp.NewTool("facebook_igmedia_get_collaborators",
		mcp.WithDescription("GET collaborators for IGMedia"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_igmedia_get_collaboratorsTool)

	// facebook_igmedia_get_comments tool
	facebook_igmedia_get_commentsTool := mcp.NewTool("facebook_igmedia_get_comments",
		mcp.WithDescription("GET comments for IGMedia"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_igmedia_get_commentsTool)

	// facebook_igmedia_post_comments tool
	facebook_igmedia_post_commentsTool := mcp.NewTool("facebook_igmedia_post_comments",
		mcp.WithDescription("POST comments for IGMedia"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("ad_id",
			mcp.Description("ad_id parameter for comments"),
		),
		mcp.WithString("message",
			mcp.Description("message parameter for comments"),
		),
	)
	tools = append(tools, facebook_igmedia_post_commentsTool)

	// facebook_igmedia_get_insights tool
	facebook_igmedia_get_insightsTool := mcp.NewTool("facebook_igmedia_get_insights",
		mcp.WithDescription("GET insights for IGMedia"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("breakdown",
			mcp.Description("breakdown parameter for insights"),
			mcp.Enum("action_type", "follow_type", "story_navigation_action_type", "surface_type"),
		),
		mcp.WithString("metric",
			mcp.Required(),
			mcp.Description("metric parameter for insights"),
			mcp.Enum("clips_replays_count", "comments", "content_views", "follows", "ig_reels_aggregated_all_plays_count", "ig_reels_avg_watch_time", "ig_reels_video_view_total_time", "impressions", "likes", "navigation", "plays", "profile_activity", "profile_visits", "quotes", "reach", "replies", "reposts", "saved", "shares", "thread_replies", "thread_shares", "threads_media_clicks", "threads_views", "total_interactions", "views"),
		),
		mcp.WithString("period",
			mcp.Description("period parameter for insights"),
			mcp.Enum("day", "days_28", "lifetime", "month", "total_over_range", "week"),
		),
	)
	tools = append(tools, facebook_igmedia_get_insightsTool)

	// facebook_igmedia_delete_partnership_ad_code tool
	facebook_igmedia_delete_partnership_ad_codeTool := mcp.NewTool("facebook_igmedia_delete_partnership_ad_code",
		mcp.WithDescription("DELETE partnership_ad_code for IGMedia"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_igmedia_delete_partnership_ad_codeTool)

	// facebook_igmedia_post_partnership_ad_code tool
	facebook_igmedia_post_partnership_ad_codeTool := mcp.NewTool("facebook_igmedia_post_partnership_ad_code",
		mcp.WithDescription("POST partnership_ad_code for IGMedia"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_igmedia_post_partnership_ad_codeTool)

	// facebook_igmedia_get_product_tags tool
	facebook_igmedia_get_product_tagsTool := mcp.NewTool("facebook_igmedia_get_product_tags",
		mcp.WithDescription("GET product_tags for IGMedia"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_igmedia_get_product_tagsTool)

	// facebook_igmedia_post_product_tags tool
	facebook_igmedia_post_product_tagsTool := mcp.NewTool("facebook_igmedia_post_product_tags",
		mcp.WithDescription("POST product_tags for IGMedia"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithNumber("child_index",
			mcp.Description("child_index parameter for product_tags"),
		),
		mcp.WithString("updated_tags",
			mcp.Required(),
			mcp.Description("updated_tags parameter for product_tags"),
		),
	)
	tools = append(tools, facebook_igmedia_post_product_tagsTool)

	// facebook_igmedia_get_ tool
	facebook_igmedia_get_Tool := mcp.NewTool("facebook_igmedia_get_",
		mcp.WithDescription("GET  for IGMedia"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithNumber("ad_account_id",
			mcp.Description("ad_account_id parameter for "),
		),
		mcp.WithString("boostable_media_callsite",
			mcp.Description("boostable_media_callsite parameter for "),
			mcp.Enum("ADS_MANAGER_L1_EDITOR_DYNAMIC_ADS_WITH_EXISTING_POST"),
		),
		mcp.WithString("business_id",
			mcp.Description("business_id parameter for "),
		),
		mcp.WithString("primary_fb_page_id",
			mcp.Description("primary_fb_page_id parameter for "),
		),
		mcp.WithString("primary_ig_user_id",
			mcp.Description("primary_ig_user_id parameter for "),
		),
		mcp.WithString("secondary_fb_page_id",
			mcp.Description("secondary_fb_page_id parameter for "),
		),
		mcp.WithString("secondary_ig_user_id",
			mcp.Description("secondary_ig_user_id parameter for "),
		),
	)
	tools = append(tools, facebook_igmedia_get_Tool)

	// facebook_igmedia_post_ tool
	facebook_igmedia_post_Tool := mcp.NewTool("facebook_igmedia_post_",
		mcp.WithDescription("POST  for IGMedia"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithBoolean("comment_enabled",
			mcp.Required(),
			mcp.Description("comment_enabled parameter for "),
		),
	)
	tools = append(tools, facebook_igmedia_post_Tool)

	return tools
}

// IGMedia handlers

// HandleFacebook_igmedia_get_boost_ads_list handles the facebook_igmedia_get_boost_ads_list tool
func HandleFacebook_igmedia_get_boost_ads_list(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_igmedia_get_boost_ads_list(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_igmedia_get_boost_ads_list: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_igmedia_get_branded_content_partner_promote handles the facebook_igmedia_get_branded_content_partner_promote tool
func HandleFacebook_igmedia_get_branded_content_partner_promote(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_igmedia_get_branded_content_partner_promote(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_igmedia_get_branded_content_partner_promote: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_igmedia_post_branded_content_partner_promote handles the facebook_igmedia_post_branded_content_partner_promote tool
func HandleFacebook_igmedia_post_branded_content_partner_promote(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: permission
	permission, err := request.RequireBool("permission")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter permission: %v", err)), nil
	}
	args["permission"] = permission

	// Required: sponsor_id
	sponsor_id, err := request.RequireInt("sponsor_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter sponsor_id: %v", err)), nil
	}
	args["sponsor_id"] = sponsor_id

	// Call the client method
	result, err := client.Facebook_igmedia_post_branded_content_partner_promote(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_igmedia_post_branded_content_partner_promote: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_igmedia_get_children handles the facebook_igmedia_get_children tool
func HandleFacebook_igmedia_get_children(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_igmedia_get_children(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_igmedia_get_children: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_igmedia_get_collaborators handles the facebook_igmedia_get_collaborators tool
func HandleFacebook_igmedia_get_collaborators(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_igmedia_get_collaborators(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_igmedia_get_collaborators: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_igmedia_get_comments handles the facebook_igmedia_get_comments tool
func HandleFacebook_igmedia_get_comments(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_igmedia_get_comments(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_igmedia_get_comments: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_igmedia_post_comments handles the facebook_igmedia_post_comments tool
func HandleFacebook_igmedia_post_comments(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: ad_id
	if val := request.GetString("ad_id", ""); val != "" {
		args["ad_id"] = val
	}

	// Optional: message
	if val := request.GetString("message", ""); val != "" {
		args["message"] = val
	}

	// Call the client method
	result, err := client.Facebook_igmedia_post_comments(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_igmedia_post_comments: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_igmedia_get_insights handles the facebook_igmedia_get_insights tool
func HandleFacebook_igmedia_get_insights(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: breakdown
	// array type - using string
	if val := request.GetString("breakdown", ""); val != "" {
		args["breakdown"] = val
	}

	// Required: metric
	metric, err := request.RequireString("metric")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter metric: %v", err)), nil
	}
	args["metric"] = metric

	// Optional: period
	// array type - using string
	if val := request.GetString("period", ""); val != "" {
		args["period"] = val
	}

	// Call the client method
	result, err := client.Facebook_igmedia_get_insights(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_igmedia_get_insights: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_igmedia_delete_partnership_ad_code handles the facebook_igmedia_delete_partnership_ad_code tool
func HandleFacebook_igmedia_delete_partnership_ad_code(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_igmedia_delete_partnership_ad_code(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_igmedia_delete_partnership_ad_code: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_igmedia_post_partnership_ad_code handles the facebook_igmedia_post_partnership_ad_code tool
func HandleFacebook_igmedia_post_partnership_ad_code(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_igmedia_post_partnership_ad_code(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_igmedia_post_partnership_ad_code: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_igmedia_get_product_tags handles the facebook_igmedia_get_product_tags tool
func HandleFacebook_igmedia_get_product_tags(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_igmedia_get_product_tags(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_igmedia_get_product_tags: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_igmedia_post_product_tags handles the facebook_igmedia_post_product_tags tool
func HandleFacebook_igmedia_post_product_tags(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: child_index
	if val := request.GetInt("child_index", 0); val != 0 {
		args["child_index"] = val
	}

	// Required: updated_tags
	updated_tags, err := request.RequireString("updated_tags")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter updated_tags: %v", err)), nil
	}
	args["updated_tags"] = updated_tags

	// Call the client method
	result, err := client.Facebook_igmedia_post_product_tags(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_igmedia_post_product_tags: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_igmedia_get_ handles the facebook_igmedia_get_ tool
func HandleFacebook_igmedia_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: ad_account_id
	if val := request.GetInt("ad_account_id", 0); val != 0 {
		args["ad_account_id"] = val
	}

	// Optional: boostable_media_callsite
	if val := request.GetString("boostable_media_callsite", ""); val != "" {
		args["boostable_media_callsite"] = val
	}

	// Optional: business_id
	if val := request.GetString("business_id", ""); val != "" {
		args["business_id"] = val
	}

	// Optional: primary_fb_page_id
	if val := request.GetString("primary_fb_page_id", ""); val != "" {
		args["primary_fb_page_id"] = val
	}

	// Optional: primary_ig_user_id
	if val := request.GetString("primary_ig_user_id", ""); val != "" {
		args["primary_ig_user_id"] = val
	}

	// Optional: secondary_fb_page_id
	if val := request.GetString("secondary_fb_page_id", ""); val != "" {
		args["secondary_fb_page_id"] = val
	}

	// Optional: secondary_ig_user_id
	if val := request.GetString("secondary_ig_user_id", ""); val != "" {
		args["secondary_ig_user_id"] = val
	}

	// Call the client method
	result, err := client.Facebook_igmedia_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_igmedia_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_igmedia_post_ handles the facebook_igmedia_post_ tool
func HandleFacebook_igmedia_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: comment_enabled
	comment_enabled, err := request.RequireBool("comment_enabled")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter comment_enabled: %v", err)), nil
	}
	args["comment_enabled"] = comment_enabled

	// Call the client method
	result, err := client.Facebook_igmedia_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_igmedia_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
