// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetIGMediaTools returns MCP tools for IGMedia
func GetIGMediaTools() []mcp.Tool {
	var tools []mcp.Tool

	// igmedia_get_boost_ads_list tool
	// Available fields for IGBoostMediaAd: ad_id, ad_status
	igmedia_get_boost_ads_listTool := mcp.NewTool("igmedia_get_boost_ads_list",
		mcp.WithDescription("GET boost_ads_list for IGMedia"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for IGBoostMediaAd objects. Available fields: ad_id, ad_status"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, igmedia_get_boost_ads_listTool)

	// igmedia_get_branded_content_partner_promote tool
	// Available fields for BrandedContentShadowIGUserID: id
	igmedia_get_branded_content_partner_promoteTool := mcp.NewTool("igmedia_get_branded_content_partner_promote",
		mcp.WithDescription("GET branded_content_partner_promote for IGMedia"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for BrandedContentShadowIGUserID objects. Available fields: id"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, igmedia_get_branded_content_partner_promoteTool)

	// igmedia_post_branded_content_partner_promote tool
	// Params object accepts: permission (bool), sponsor_id (unsigned int)
	igmedia_post_branded_content_partner_promoteTool := mcp.NewTool("igmedia_post_branded_content_partner_promote",
		mcp.WithDescription("POST branded_content_partner_promote for IGMedia"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"permission": map[string]any{
					"type":        "boolean",
					"description": "permission parameter",
					"required":    true,
				},
				"sponsor_id": map[string]any{
					"type":        "integer",
					"description": "sponsor_id parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: permission (boolean) [required], sponsor_id (integer) [required]"),
		),
	)
	tools = append(tools, igmedia_post_branded_content_partner_promoteTool)

	// igmedia_get_children tool
	// Available fields for IGMedia: alt_text, boost_eligibility_info, caption, comments_count, copyright_check_information, id, ig_id, is_comment_enabled, is_shared_to_feed, legacy_instagram_media_id, like_count, media_product_type, media_type, media_url, owner, permalink, shortcode, thumbnail_url, timestamp, username, view_count
	igmedia_get_childrenTool := mcp.NewTool("igmedia_get_children",
		mcp.WithDescription("GET children for IGMedia"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for IGMedia objects. Available fields: alt_text, boost_eligibility_info, caption, comments_count, copyright_check_information, id, ig_id, is_comment_enabled, is_shared_to_feed, legacy_instagram_media_id, like_count, media_product_type, media_type, media_url, owner (and 6 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, igmedia_get_childrenTool)

	// igmedia_get_collaborators tool
	// Available fields for ShadowIGMediaCollaborators: id, invite_status, username
	igmedia_get_collaboratorsTool := mcp.NewTool("igmedia_get_collaborators",
		mcp.WithDescription("GET collaborators for IGMedia"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for ShadowIGMediaCollaborators objects. Available fields: id, invite_status, username"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, igmedia_get_collaboratorsTool)

	// igmedia_get_comments tool
	// Available fields for IGComment: from, hidden, id, legacy_instagram_comment_id, like_count, media, parent_id, text, timestamp, user, username
	igmedia_get_commentsTool := mcp.NewTool("igmedia_get_comments",
		mcp.WithDescription("GET comments for IGMedia"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for IGComment objects. Available fields: from, hidden, id, legacy_instagram_comment_id, like_count, media, parent_id, text, timestamp, user, username"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, igmedia_get_commentsTool)

	// igmedia_post_comments tool
	// Params object accepts: ad_id (string), message (string)
	igmedia_post_commentsTool := mcp.NewTool("igmedia_post_comments",
		mcp.WithDescription("POST comments for IGMedia"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"ad_id": map[string]any{
					"type":        "string",
					"description": "ad_id parameter",
				},
				"message": map[string]any{
					"type":        "string",
					"description": "message parameter",
				},
			}),
			mcp.Description("Parameters object containing: ad_id (string), message (string)"),
		),
	)
	tools = append(tools, igmedia_post_commentsTool)

	// igmedia_get_insights tool
	// Available fields for InstagramInsightsResult: description, id, name, period, title, total_value, values
	// Params object accepts: breakdown (list<shadowigmediainsights_breakdown_enum_param>), metric (list<shadowigmediainsights_metric_enum_param>), period (list<shadowigmediainsights_period_enum_param>)
	igmedia_get_insightsTool := mcp.NewTool("igmedia_get_insights",
		mcp.WithDescription("GET insights for IGMedia"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"breakdown": map[string]any{
					"type":        "array",
					"description": "breakdown parameter",
					"enum":        []string{"action_type", "follow_type", "story_navigation_action_type", "surface_type"},
					"items":       map[string]any{"type": "string"},
				},
				"metric": map[string]any{
					"type":        "array",
					"description": "metric parameter",
					"required":    true,
					"enum":        []string{"clips_replays_count", "comments", "content_views", "follows", "ig_reels_aggregated_all_plays_count", "ig_reels_avg_watch_time", "ig_reels_video_view_total_time", "impressions", "likes", "navigation", "plays", "profile_activity", "profile_visits", "quotes", "reach", "replies", "reposts", "saved", "shares", "thread_replies", "thread_shares", "threads_media_clicks", "threads_views", "total_interactions", "views"},
					"items":       map[string]any{"type": "string"},
				},
				"period": map[string]any{
					"type":        "array",
					"description": "period parameter",
					"enum":        []string{"day", "days_28", "lifetime", "month", "total_over_range", "week"},
					"items":       map[string]any{"type": "string"},
				},
			}),
			mcp.Description("Parameters object containing: breakdown (array<enum>) [action_type, follow_type, story_navigation_action_type, surface_type], metric (array<enum>) [clips_replays_count, comments, content_views, follows, ig_reels_aggregated_all_plays_count, ...] [required], period (array<enum>) [day, days_28, lifetime, month, total_over_range, ...]"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for InstagramInsightsResult objects. Available fields: description, id, name, period, title, total_value, values"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, igmedia_get_insightsTool)

	// igmedia_delete_partnership_ad_code tool
	igmedia_delete_partnership_ad_codeTool := mcp.NewTool("igmedia_delete_partnership_ad_code",
		mcp.WithDescription("DELETE partnership_ad_code for IGMedia"),
	)
	tools = append(tools, igmedia_delete_partnership_ad_codeTool)

	// igmedia_post_partnership_ad_code tool
	igmedia_post_partnership_ad_codeTool := mcp.NewTool("igmedia_post_partnership_ad_code",
		mcp.WithDescription("POST partnership_ad_code for IGMedia"),
	)
	tools = append(tools, igmedia_post_partnership_ad_codeTool)

	// igmedia_get_product_tags tool
	// Available fields for ShadowIGMediaProductTags: image_url, is_checkout, merchant_id, name, price_string, product_id, review_status, stripped_price_string, stripped_sale_price_string, x, y
	igmedia_get_product_tagsTool := mcp.NewTool("igmedia_get_product_tags",
		mcp.WithDescription("GET product_tags for IGMedia"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for ShadowIGMediaProductTags objects. Available fields: image_url, is_checkout, merchant_id, name, price_string, product_id, review_status, stripped_price_string, stripped_sale_price_string, x, y"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, igmedia_get_product_tagsTool)

	// igmedia_post_product_tags tool
	// Params object accepts: child_index (unsigned int), updated_tags (list<map>)
	igmedia_post_product_tagsTool := mcp.NewTool("igmedia_post_product_tags",
		mcp.WithDescription("POST product_tags for IGMedia"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"child_index": map[string]any{
					"type":        "integer",
					"description": "child_index parameter",
				},
				"updated_tags": map[string]any{
					"type":        "array",
					"description": "updated_tags parameter",
					"required":    true,
					"items":       map[string]any{"type": "object"},
				},
			}),
			mcp.Description("Parameters object containing: child_index (integer), updated_tags (array<object>) [required]"),
		),
	)
	tools = append(tools, igmedia_post_product_tagsTool)

	// igmedia_get_ tool
	// Available fields for IGMedia: alt_text, boost_eligibility_info, caption, comments_count, copyright_check_information, id, ig_id, is_comment_enabled, is_shared_to_feed, legacy_instagram_media_id, like_count, media_product_type, media_type, media_url, owner, permalink, shortcode, thumbnail_url, timestamp, username, view_count
	// Params object accepts: ad_account_id (unsigned int), boostable_media_callsite (shadowigmedia_boostable_media_callsite), business_id (string), primary_fb_page_id (string), primary_ig_user_id (string), secondary_fb_page_id (string), secondary_ig_user_id (string)
	igmedia_get_Tool := mcp.NewTool("igmedia_get_",
		mcp.WithDescription("GET  for IGMedia"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"ad_account_id": map[string]any{
					"type":        "integer",
					"description": "ad_account_id parameter",
				},
				"boostable_media_callsite": map[string]any{
					"type":        "string",
					"description": "boostable_media_callsite parameter",
					"enum":        []string{"ADS_MANAGER_L1_EDITOR_DYNAMIC_ADS_WITH_EXISTING_POST"},
				},
				"business_id": map[string]any{
					"type":        "string",
					"description": "business_id parameter",
				},
				"primary_fb_page_id": map[string]any{
					"type":        "string",
					"description": "primary_fb_page_id parameter",
				},
				"primary_ig_user_id": map[string]any{
					"type":        "string",
					"description": "primary_ig_user_id parameter",
				},
				"secondary_fb_page_id": map[string]any{
					"type":        "string",
					"description": "secondary_fb_page_id parameter",
				},
				"secondary_ig_user_id": map[string]any{
					"type":        "string",
					"description": "secondary_ig_user_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: ad_account_id (integer), boostable_media_callsite (shadowigmedia_boostable_media_callsite) [ADS_MANAGER_L1_EDITOR_DYNAMIC_ADS_WITH_EXISTING_POST], business_id (string), primary_fb_page_id (string), primary_ig_user_id (string), secondary_fb_page_id (string), secondary_ig_user_id (string)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for IGMedia objects. Available fields: alt_text, boost_eligibility_info, caption, comments_count, copyright_check_information, id, ig_id, is_comment_enabled, is_shared_to_feed, legacy_instagram_media_id, like_count, media_product_type, media_type, media_url, owner (and 6 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, igmedia_get_Tool)

	// igmedia_post_ tool
	// Params object accepts: comment_enabled (bool)
	igmedia_post_Tool := mcp.NewTool("igmedia_post_",
		mcp.WithDescription("POST  for IGMedia"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"comment_enabled": map[string]any{
					"type":        "boolean",
					"description": "comment_enabled parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: comment_enabled (boolean) [required]"),
		),
	)
	tools = append(tools, igmedia_post_Tool)

	return tools
}

// IGMedia handlers

// HandleIgmedia_get_boost_ads_list handles the igmedia_get_boost_ads_list tool with context-based auth
func HandleIgmedia_get_boost_ads_list(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Igmedia_get_boost_ads_list(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute igmedia_get_boost_ads_list: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleIgmedia_get_branded_content_partner_promote handles the igmedia_get_branded_content_partner_promote tool with context-based auth
func HandleIgmedia_get_branded_content_partner_promote(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Igmedia_get_branded_content_partner_promote(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute igmedia_get_branded_content_partner_promote: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleIgmedia_post_branded_content_partner_promote handles the igmedia_post_branded_content_partner_promote tool with context-based auth
func HandleIgmedia_post_branded_content_partner_promote(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the client method
	result, err := client.Igmedia_post_branded_content_partner_promote(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute igmedia_post_branded_content_partner_promote: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleIgmedia_get_children handles the igmedia_get_children tool with context-based auth
func HandleIgmedia_get_children(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Igmedia_get_children(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute igmedia_get_children: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleIgmedia_get_collaborators handles the igmedia_get_collaborators tool with context-based auth
func HandleIgmedia_get_collaborators(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Igmedia_get_collaborators(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute igmedia_get_collaborators: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleIgmedia_get_comments handles the igmedia_get_comments tool with context-based auth
func HandleIgmedia_get_comments(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Igmedia_get_comments(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute igmedia_get_comments: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleIgmedia_post_comments handles the igmedia_post_comments tool with context-based auth
func HandleIgmedia_post_comments(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Call the client method
	result, err := client.Igmedia_post_comments(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute igmedia_post_comments: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleIgmedia_get_insights handles the igmedia_get_insights tool with context-based auth
func HandleIgmedia_get_insights(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Igmedia_get_insights(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute igmedia_get_insights: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleIgmedia_delete_partnership_ad_code handles the igmedia_delete_partnership_ad_code tool with context-based auth
func HandleIgmedia_delete_partnership_ad_code(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Igmedia_delete_partnership_ad_code(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute igmedia_delete_partnership_ad_code: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleIgmedia_post_partnership_ad_code handles the igmedia_post_partnership_ad_code tool with context-based auth
func HandleIgmedia_post_partnership_ad_code(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Igmedia_post_partnership_ad_code(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute igmedia_post_partnership_ad_code: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleIgmedia_get_product_tags handles the igmedia_get_product_tags tool with context-based auth
func HandleIgmedia_get_product_tags(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Igmedia_get_product_tags(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute igmedia_get_product_tags: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleIgmedia_post_product_tags handles the igmedia_post_product_tags tool with context-based auth
func HandleIgmedia_post_product_tags(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the client method
	result, err := client.Igmedia_post_product_tags(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute igmedia_post_product_tags: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleIgmedia_get_ handles the igmedia_get_ tool with context-based auth
func HandleIgmedia_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Igmedia_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute igmedia_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleIgmedia_post_ handles the igmedia_post_ tool with context-based auth
func HandleIgmedia_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewIGMediaClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the client method
	result, err := client.Igmedia_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute igmedia_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
