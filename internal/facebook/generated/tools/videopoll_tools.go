// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetVideoPollTools returns MCP tools for VideoPoll
func GetVideoPollTools() []mcp.Tool {
	var tools []mcp.Tool


	// videopoll_get_poll_options tool
	videopoll_get_poll_optionsTool := mcp.NewTool("videopoll_get_poll_options",
		mcp.WithDescription("GET poll_options for VideoPoll"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, videopoll_get_poll_optionsTool)

	// videopoll_get_ tool
	// Available fields for VideoPoll: close_after_voting, default_open, id, question, show_gradient, show_results, status
	videopoll_get_Tool := mcp.NewTool("videopoll_get_",
		mcp.WithDescription("GET  for VideoPoll"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for VideoPoll objects. Available fields: close_after_voting, default_open, id, question, show_gradient, show_results, status"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, videopoll_get_Tool)

	// videopoll_post_ tool
	// Params object accepts: action (videopoll_action), close_after_voting (bool), default_open (bool), show_gradient (bool), show_results (bool)
	videopoll_post_Tool := mcp.NewTool("videopoll_post_",
		mcp.WithDescription("POST  for VideoPoll"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"action": map[string]any{
					"type": "string",
					"description": "action parameter",
					"required": true,
					"enum": []string{ "ATTACH_TO_VIDEO", "CLOSE", "DELETE_POLL", "SHOW_RESULTS", "SHOW_VOTING" },
				},
				"close_after_voting": map[string]any{
					"type": "boolean",
					"description": "close_after_voting parameter",
				},
				"default_open": map[string]any{
					"type": "boolean",
					"description": "default_open parameter",
				},
				"show_gradient": map[string]any{
					"type": "boolean",
					"description": "show_gradient parameter",
				},
				"show_results": map[string]any{
					"type": "boolean",
					"description": "show_results parameter",
				},
			}),
			mcp.Description("Parameters object containing: action (videopoll_action) [ATTACH_TO_VIDEO, CLOSE, DELETE_POLL, SHOW_RESULTS, SHOW_VOTING] [required], close_after_voting (boolean), default_open (boolean), show_gradient (boolean), show_results (boolean)"),
		),
	)
	tools = append(tools, videopoll_post_Tool)


	return tools
}

// VideoPoll handlers


// HandleVideopoll_get_poll_options handles the videopoll_get_poll_options tool with context-based auth
func HandleVideopoll_get_poll_options(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewVideoPollClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Videopoll_get_poll_options(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute videopoll_get_poll_options: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleVideopoll_get_ handles the videopoll_get_ tool with context-based auth
func HandleVideopoll_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewVideoPollClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Videopoll_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute videopoll_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleVideopoll_post_ handles the videopoll_post_ tool with context-based auth
func HandleVideopoll_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewVideoPollClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}



	// Call the client method
	result, err := client.Videopoll_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute videopoll_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

