// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetAdToplineDetailTools returns MCP tools for AdToplineDetail
func GetAdToplineDetailTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool


	// adtoplinedetail_get_ tool
	adtoplinedetail_get_Tool := mcp.NewTool("adtoplinedetail_get_",
		mcp.WithDescription("GET  for AdToplineDetail"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, adtoplinedetail_get_Tool)


	return tools
}

// AdToplineDetail handlers


// HandleAdtoplinedetail_get_ handles the adtoplinedetail_get_ tool
func HandleAdtoplinedetail_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAdToplineDetailClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Adtoplinedetail_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adtoplinedetail_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

