// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetCampaignTools returns MCP tools for Campaign
func GetCampaignTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool

	// campaign_get_ad_studies tool
	campaign_get_ad_studiesTool := mcp.NewTool("campaign_get_ad_studies",
		mcp.WithDescription("GET ad_studies for Campaign"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, campaign_get_ad_studiesTool)

	// campaign_post_adlabels tool
	campaign_post_adlabelsTool := mcp.NewTool("campaign_post_adlabels",
		mcp.WithDescription("POST adlabels for Campaign"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("adlabels",
			mcp.Required(),
			mcp.Description("adlabels parameter for adlabels"),
		),
		mcp.WithString("execution_options",
			mcp.Description("execution_options parameter for adlabels"),
			mcp.Enum("validate_only"),
		),
	)
	tools = append(tools, campaign_post_adlabelsTool)

	// campaign_get_adrules_governed tool
	campaign_get_adrules_governedTool := mcp.NewTool("campaign_get_adrules_governed",
		mcp.WithDescription("GET adrules_governed for Campaign"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithBoolean("pass_evaluation",
			mcp.Description("pass_evaluation parameter for adrules_governed"),
		),
	)
	tools = append(tools, campaign_get_adrules_governedTool)

	// campaign_get_ads tool
	campaign_get_adsTool := mcp.NewTool("campaign_get_ads",
		mcp.WithDescription("GET ads for Campaign"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("date_preset",
			mcp.Description("date_preset parameter for ads"),
			mcp.Enum("data_maximum", "last_14d", "last_28d", "last_30d", "last_3d", "last_7d", "last_90d", "last_month", "last_quarter", "last_week_mon_sun", "last_week_sun_sat", "last_year", "maximum", "this_month", "this_quarter", "this_week_mon_today", "this_week_sun_today", "this_year", "today", "yesterday"),
		),
		mcp.WithString("effective_status",
			mcp.Description("effective_status parameter for ads"),
		),
		mcp.WithString("time_range",
			mcp.Description("time_range parameter for ads"),
		),
		mcp.WithNumber("updated_since",
			mcp.Description("updated_since parameter for ads"),
		),
	)
	tools = append(tools, campaign_get_adsTool)

	// campaign_get_adsets tool
	campaign_get_adsetsTool := mcp.NewTool("campaign_get_adsets",
		mcp.WithDescription("GET adsets for Campaign"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("date_preset",
			mcp.Description("date_preset parameter for adsets"),
			mcp.Enum("data_maximum", "last_14d", "last_28d", "last_30d", "last_3d", "last_7d", "last_90d", "last_month", "last_quarter", "last_week_mon_sun", "last_week_sun_sat", "last_year", "maximum", "this_month", "this_quarter", "this_week_mon_today", "this_week_sun_today", "this_year", "today", "yesterday"),
		),
		mcp.WithString("effective_status",
			mcp.Description("effective_status parameter for adsets"),
			mcp.Enum("ACTIVE", "ADSET_PAUSED", "ARCHIVED", "CAMPAIGN_PAUSED", "DELETED", "DISAPPROVED", "IN_PROCESS", "PAUSED", "PENDING_BILLING_INFO", "PENDING_REVIEW", "PREAPPROVED", "WITH_ISSUES"),
		),
		mcp.WithBoolean("is_completed",
			mcp.Description("is_completed parameter for adsets"),
		),
		mcp.WithString("time_range",
			mcp.Description("time_range parameter for adsets"),
		),
	)
	tools = append(tools, campaign_get_adsetsTool)

	// campaign_post_budget_schedules tool
	campaign_post_budget_schedulesTool := mcp.NewTool("campaign_post_budget_schedules",
		mcp.WithDescription("POST budget_schedules for Campaign"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithNumber("budget_value",
			mcp.Required(),
			mcp.Description("budget_value parameter for budget_schedules"),
		),
		mcp.WithString("budget_value_type",
			mcp.Required(),
			mcp.Description("budget_value_type parameter for budget_schedules"),
			mcp.Enum("ABSOLUTE", "MULTIPLIER"),
		),
		mcp.WithNumber("time_end",
			mcp.Required(),
			mcp.Description("time_end parameter for budget_schedules"),
		),
		mcp.WithNumber("time_start",
			mcp.Required(),
			mcp.Description("time_start parameter for budget_schedules"),
		),
	)
	tools = append(tools, campaign_post_budget_schedulesTool)

	// campaign_get_copies tool
	campaign_get_copiesTool := mcp.NewTool("campaign_get_copies",
		mcp.WithDescription("GET copies for Campaign"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("date_preset",
			mcp.Description("date_preset parameter for copies"),
			mcp.Enum("data_maximum", "last_14d", "last_28d", "last_30d", "last_3d", "last_7d", "last_90d", "last_month", "last_quarter", "last_week_mon_sun", "last_week_sun_sat", "last_year", "maximum", "this_month", "this_quarter", "this_week_mon_today", "this_week_sun_today", "this_year", "today", "yesterday"),
		),
		mcp.WithString("effective_status",
			mcp.Description("effective_status parameter for copies"),
			mcp.Enum("ACTIVE", "ADSET_PAUSED", "ARCHIVED", "CAMPAIGN_PAUSED", "DELETED", "DISAPPROVED", "IN_PROCESS", "PAUSED", "PENDING_BILLING_INFO", "PENDING_REVIEW", "PREAPPROVED", "WITH_ISSUES"),
		),
		mcp.WithBoolean("is_completed",
			mcp.Description("is_completed parameter for copies"),
		),
		mcp.WithString("time_range",
			mcp.Description("time_range parameter for copies"),
		),
	)
	tools = append(tools, campaign_get_copiesTool)

	// campaign_post_copies tool
	campaign_post_copiesTool := mcp.NewTool("campaign_post_copies",
		mcp.WithDescription("POST copies for Campaign"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithBoolean("deep_copy",
			mcp.Description("deep_copy parameter for copies"),
		),
		mcp.WithString("end_time",
			mcp.Description("end_time parameter for copies"),
		),
		mcp.WithString("rename_options",
			mcp.Description("rename_options parameter for copies"),
		),
		mcp.WithString("start_time",
			mcp.Description("start_time parameter for copies"),
		),
		mcp.WithString("status_option",
			mcp.Description("status_option parameter for copies"),
			mcp.Enum("ACTIVE", "INHERITED_FROM_SOURCE", "PAUSED"),
		),
	)
	tools = append(tools, campaign_post_copiesTool)

	// campaign_get_insights tool
	campaign_get_insightsTool := mcp.NewTool("campaign_get_insights",
		mcp.WithDescription("GET insights for Campaign"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("action_attribution_windows",
			mcp.Description("action_attribution_windows parameter for insights"),
			mcp.Enum("1d_click", "1d_ev", "1d_view", "28d_click", "28d_view", "28d_view_all_conversions", "28d_view_first_conversion", "7d_click", "7d_view", "7d_view_all_conversions", "7d_view_first_conversion", "dda", "default", "skan_click", "skan_click_second_postback", "skan_click_third_postback", "skan_view", "skan_view_second_postback", "skan_view_third_postback"),
		),
		mcp.WithString("action_breakdowns",
			mcp.Description("action_breakdowns parameter for insights"),
			mcp.Enum("action_canvas_component_name", "action_carousel_card_id", "action_carousel_card_name", "action_destination", "action_device", "action_reaction", "action_target_id", "action_type", "action_video_sound", "action_video_type", "conversion_destination", "matched_persona_id", "matched_persona_name", "signal_source_bucket", "standard_event_content_type"),
		),
		mcp.WithString("action_report_time",
			mcp.Description("action_report_time parameter for insights"),
			mcp.Enum("conversion", "impression", "lifetime", "mixed"),
		),
		mcp.WithString("breakdowns",
			mcp.Description("breakdowns parameter for insights"),
			mcp.Enum("ad_extension_domain", "ad_extension_url", "ad_format_asset", "age", "app_id", "body_asset", "breakdown_ad_objective", "breakdown_reporting_ad_id", "call_to_action_asset", "coarse_conversion_value", "comscore_market", "comscore_market_code", "conversion_destination", "country", "creative_relaxation_asset_type", "description_asset", "device_platform", "dma", "fidelity_type", "flexible_format_asset_type", "frequency_value", "gen_ai_asset_type", "gender", "hourly_stats_aggregated_by_advertiser_time_zone", "hourly_stats_aggregated_by_audience_time_zone", "hsid", "image_asset", "impression_device", "impression_view_time_advertiser_hour_v2", "is_auto_advance", "is_conversion_id_modeled", "is_rendered_as_delayed_skip_ad", "landing_destination", "link_url_asset", "marketing_messages_btn_name", "mdsa_landing_destination", "media_asset_url", "media_creator", "media_destination_url", "media_format", "media_origin_url", "media_text_content", "media_type", "mmm", "place_page_id", "platform_position", "postback_sequence_index", "product_id", "publisher_platform", "redownload", "region", "signal_source_bucket", "skan_campaign_id", "skan_conversion_id", "skan_version", "sot_attribution_model_type", "sot_attribution_window", "sot_channel", "sot_event_type", "sot_source", "standard_event_content_type", "title_asset", "user_persona_id", "user_persona_name", "video_asset"),
		),
		mcp.WithString("date_preset",
			mcp.Description("date_preset parameter for insights"),
			mcp.Enum("data_maximum", "last_14d", "last_28d", "last_30d", "last_3d", "last_7d", "last_90d", "last_month", "last_quarter", "last_week_mon_sun", "last_week_sun_sat", "last_year", "maximum", "this_month", "this_quarter", "this_week_mon_today", "this_week_sun_today", "this_year", "today", "yesterday"),
		),
		mcp.WithBoolean("default_summary",
			mcp.Description("default_summary parameter for insights"),
		),
		mcp.WithString("export_columns",
			mcp.Description("export_columns parameter for insights"),
		),
		mcp.WithString("export_format",
			mcp.Description("export_format parameter for insights"),
		),
		mcp.WithString("export_name",
			mcp.Description("export_name parameter for insights"),
		),
		mcp.WithString("fields",
			mcp.Description("fields parameter for insights"),
		),
		mcp.WithString("filtering",
			mcp.Description("filtering parameter for insights"),
		),
		mcp.WithString("level",
			mcp.Description("level parameter for insights"),
			mcp.Enum("account", "ad", "adset", "campaign"),
		),
		mcp.WithNumber("limit",
			mcp.Description("limit parameter for insights"),
		),
		mcp.WithNumber("product_id_limit",
			mcp.Description("product_id_limit parameter for insights"),
		),
		mcp.WithString("sort",
			mcp.Description("sort parameter for insights"),
		),
		mcp.WithString("summary",
			mcp.Description("summary parameter for insights"),
		),
		mcp.WithString("summary_action_breakdowns",
			mcp.Description("summary_action_breakdowns parameter for insights"),
			mcp.Enum("action_canvas_component_name", "action_carousel_card_id", "action_carousel_card_name", "action_destination", "action_device", "action_reaction", "action_target_id", "action_type", "action_video_sound", "action_video_type", "conversion_destination", "matched_persona_id", "matched_persona_name", "signal_source_bucket", "standard_event_content_type"),
		),
		mcp.WithString("time_increment",
			mcp.Description("time_increment parameter for insights"),
		),
		mcp.WithString("time_range",
			mcp.Description("time_range parameter for insights"),
		),
		mcp.WithString("time_ranges",
			mcp.Description("time_ranges parameter for insights"),
		),
		mcp.WithBoolean("use_account_attribution_setting",
			mcp.Description("use_account_attribution_setting parameter for insights"),
		),
		mcp.WithBoolean("use_unified_attribution_setting",
			mcp.Description("use_unified_attribution_setting parameter for insights"),
		),
	)
	tools = append(tools, campaign_get_insightsTool)

	// campaign_post_insights tool
	campaign_post_insightsTool := mcp.NewTool("campaign_post_insights",
		mcp.WithDescription("POST insights for Campaign"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("action_attribution_windows",
			mcp.Description("action_attribution_windows parameter for insights"),
			mcp.Enum("1d_click", "1d_ev", "1d_view", "28d_click", "28d_view", "28d_view_all_conversions", "28d_view_first_conversion", "7d_click", "7d_view", "7d_view_all_conversions", "7d_view_first_conversion", "dda", "default", "skan_click", "skan_click_second_postback", "skan_click_third_postback", "skan_view", "skan_view_second_postback", "skan_view_third_postback"),
		),
		mcp.WithString("action_breakdowns",
			mcp.Description("action_breakdowns parameter for insights"),
			mcp.Enum("action_canvas_component_name", "action_carousel_card_id", "action_carousel_card_name", "action_destination", "action_device", "action_reaction", "action_target_id", "action_type", "action_video_sound", "action_video_type", "conversion_destination", "matched_persona_id", "matched_persona_name", "signal_source_bucket", "standard_event_content_type"),
		),
		mcp.WithString("action_report_time",
			mcp.Description("action_report_time parameter for insights"),
			mcp.Enum("conversion", "impression", "lifetime", "mixed"),
		),
		mcp.WithString("breakdowns",
			mcp.Description("breakdowns parameter for insights"),
			mcp.Enum("ad_extension_domain", "ad_extension_url", "ad_format_asset", "age", "app_id", "body_asset", "breakdown_ad_objective", "breakdown_reporting_ad_id", "call_to_action_asset", "coarse_conversion_value", "comscore_market", "comscore_market_code", "conversion_destination", "country", "creative_relaxation_asset_type", "description_asset", "device_platform", "dma", "fidelity_type", "flexible_format_asset_type", "frequency_value", "gen_ai_asset_type", "gender", "hourly_stats_aggregated_by_advertiser_time_zone", "hourly_stats_aggregated_by_audience_time_zone", "hsid", "image_asset", "impression_device", "impression_view_time_advertiser_hour_v2", "is_auto_advance", "is_conversion_id_modeled", "is_rendered_as_delayed_skip_ad", "landing_destination", "link_url_asset", "marketing_messages_btn_name", "mdsa_landing_destination", "media_asset_url", "media_creator", "media_destination_url", "media_format", "media_origin_url", "media_text_content", "media_type", "mmm", "place_page_id", "platform_position", "postback_sequence_index", "product_id", "publisher_platform", "redownload", "region", "signal_source_bucket", "skan_campaign_id", "skan_conversion_id", "skan_version", "sot_attribution_model_type", "sot_attribution_window", "sot_channel", "sot_event_type", "sot_source", "standard_event_content_type", "title_asset", "user_persona_id", "user_persona_name", "video_asset"),
		),
		mcp.WithString("date_preset",
			mcp.Description("date_preset parameter for insights"),
			mcp.Enum("data_maximum", "last_14d", "last_28d", "last_30d", "last_3d", "last_7d", "last_90d", "last_month", "last_quarter", "last_week_mon_sun", "last_week_sun_sat", "last_year", "maximum", "this_month", "this_quarter", "this_week_mon_today", "this_week_sun_today", "this_year", "today", "yesterday"),
		),
		mcp.WithBoolean("default_summary",
			mcp.Description("default_summary parameter for insights"),
		),
		mcp.WithString("export_columns",
			mcp.Description("export_columns parameter for insights"),
		),
		mcp.WithString("export_format",
			mcp.Description("export_format parameter for insights"),
		),
		mcp.WithString("export_name",
			mcp.Description("export_name parameter for insights"),
		),
		mcp.WithString("fields",
			mcp.Description("fields parameter for insights"),
		),
		mcp.WithString("filtering",
			mcp.Description("filtering parameter for insights"),
		),
		mcp.WithString("level",
			mcp.Description("level parameter for insights"),
			mcp.Enum("account", "ad", "adset", "campaign"),
		),
		mcp.WithNumber("limit",
			mcp.Description("limit parameter for insights"),
		),
		mcp.WithNumber("product_id_limit",
			mcp.Description("product_id_limit parameter for insights"),
		),
		mcp.WithString("sort",
			mcp.Description("sort parameter for insights"),
		),
		mcp.WithString("summary",
			mcp.Description("summary parameter for insights"),
		),
		mcp.WithString("summary_action_breakdowns",
			mcp.Description("summary_action_breakdowns parameter for insights"),
			mcp.Enum("action_canvas_component_name", "action_carousel_card_id", "action_carousel_card_name", "action_destination", "action_device", "action_reaction", "action_target_id", "action_type", "action_video_sound", "action_video_type", "conversion_destination", "matched_persona_id", "matched_persona_name", "signal_source_bucket", "standard_event_content_type"),
		),
		mcp.WithString("time_increment",
			mcp.Description("time_increment parameter for insights"),
		),
		mcp.WithString("time_range",
			mcp.Description("time_range parameter for insights"),
		),
		mcp.WithString("time_ranges",
			mcp.Description("time_ranges parameter for insights"),
		),
		mcp.WithBoolean("use_account_attribution_setting",
			mcp.Description("use_account_attribution_setting parameter for insights"),
		),
		mcp.WithBoolean("use_unified_attribution_setting",
			mcp.Description("use_unified_attribution_setting parameter for insights"),
		),
	)
	tools = append(tools, campaign_post_insightsTool)

	// campaign_delete_ tool
	campaign_delete_Tool := mcp.NewTool("campaign_delete_",
		mcp.WithDescription("DELETE  for Campaign"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, campaign_delete_Tool)

	// campaign_get_ tool
	campaign_get_Tool := mcp.NewTool("campaign_get_",
		mcp.WithDescription("GET  for Campaign"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("am_call_tags",
			mcp.Description("am_call_tags parameter for "),
		),
		mcp.WithString("date_preset",
			mcp.Description("date_preset parameter for "),
			mcp.Enum("data_maximum", "last_14d", "last_28d", "last_30d", "last_3d", "last_7d", "last_90d", "last_month", "last_quarter", "last_week_mon_sun", "last_week_sun_sat", "last_year", "maximum", "this_month", "this_quarter", "this_week_mon_today", "this_week_sun_today", "this_year", "today", "yesterday"),
		),
		mcp.WithBoolean("from_adtable",
			mcp.Description("from_adtable parameter for "),
		),
		mcp.WithString("time_range",
			mcp.Description("time_range parameter for "),
		),
	)
	tools = append(tools, campaign_get_Tool)

	// campaign_post_ tool
	campaign_post_Tool := mcp.NewTool("campaign_post_",
		mcp.WithDescription("POST  for Campaign"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("adlabels",
			mcp.Description("adlabels parameter for "),
		),
		mcp.WithString("adset_bid_amounts",
			mcp.Description("adset_bid_amounts parameter for "),
		),
		mcp.WithString("adset_budgets",
			mcp.Description("adset_budgets parameter for "),
		),
		mcp.WithString("bid_strategy",
			mcp.Description("bid_strategy parameter for "),
			mcp.Enum("COST_CAP", "LOWEST_COST_WITHOUT_CAP", "LOWEST_COST_WITH_BID_CAP", "LOWEST_COST_WITH_MIN_ROAS"),
		),
		mcp.WithBoolean("budget_rebalance_flag",
			mcp.Description("budget_rebalance_flag parameter for "),
		),
		mcp.WithNumber("daily_budget",
			mcp.Description("daily_budget parameter for "),
		),
		mcp.WithString("execution_options",
			mcp.Description("execution_options parameter for "),
			mcp.Enum("include_recommendations", "validate_only"),
		),
		mcp.WithBoolean("is_skadnetwork_attribution",
			mcp.Description("is_skadnetwork_attribution parameter for "),
		),
		mcp.WithString("iterative_split_test_configs",
			mcp.Description("iterative_split_test_configs parameter for "),
		),
		mcp.WithNumber("lifetime_budget",
			mcp.Description("lifetime_budget parameter for "),
		),
		mcp.WithString("name",
			mcp.Description("name parameter for "),
		),
		mcp.WithString("objective",
			mcp.Description("objective parameter for "),
			mcp.Enum("APP_INSTALLS", "BRAND_AWARENESS", "CONVERSIONS", "EVENT_RESPONSES", "LEAD_GENERATION", "LINK_CLICKS", "LOCAL_AWARENESS", "MESSAGES", "OFFER_CLAIMS", "OUTCOME_APP_PROMOTION", "OUTCOME_AWARENESS", "OUTCOME_ENGAGEMENT", "OUTCOME_LEADS", "OUTCOME_SALES", "OUTCOME_TRAFFIC", "PAGE_LIKES", "POST_ENGAGEMENT", "PRODUCT_CATALOG_SALES", "REACH", "STORE_VISITS", "VIDEO_VIEWS"),
		),
		mcp.WithString("pacing_type",
			mcp.Description("pacing_type parameter for "),
		),
		mcp.WithString("promoted_object",
			mcp.Description("promoted_object parameter for "),
		),
		mcp.WithString("smart_promotion_type",
			mcp.Description("smart_promotion_type parameter for "),
			mcp.Enum("GUIDED_CREATION", "SMART_APP_PROMOTION"),
		),
		mcp.WithString("special_ad_categories",
			mcp.Description("special_ad_categories parameter for "),
			mcp.Enum("CREDIT", "EMPLOYMENT", "FINANCIAL_PRODUCTS_SERVICES", "HOUSING", "ISSUES_ELECTIONS_POLITICS", "NONE", "ONLINE_GAMBLING_AND_GAMING"),
		),
		mcp.WithString("special_ad_category",
			mcp.Description("special_ad_category parameter for "),
			mcp.Enum("CREDIT", "EMPLOYMENT", "FINANCIAL_PRODUCTS_SERVICES", "HOUSING", "ISSUES_ELECTIONS_POLITICS", "NONE", "ONLINE_GAMBLING_AND_GAMING"),
		),
		mcp.WithString("special_ad_category_country",
			mcp.Description("special_ad_category_country parameter for "),
			mcp.Enum("CREDIT", "EMPLOYMENT", "FINANCIAL_PRODUCTS_SERVICES", "HOUSING", "ISSUES_ELECTIONS_POLITICS", "NONE", "ONLINE_GAMBLING_AND_GAMING"),
		),
		mcp.WithNumber("spend_cap",
			mcp.Description("spend_cap parameter for "),
		),
		mcp.WithString("start_time",
			mcp.Description("start_time parameter for "),
		),
		mcp.WithString("status",
			mcp.Description("status parameter for "),
			mcp.Enum("ACTIVE", "ARCHIVED", "DELETED", "PAUSED"),
		),
		mcp.WithString("stop_time",
			mcp.Description("stop_time parameter for "),
		),
	)
	tools = append(tools, campaign_post_Tool)

	return tools
}

// Campaign handlers

// HandleCampaign_get_ad_studies handles the campaign_get_ad_studies tool
func HandleCampaign_get_ad_studies(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCampaignClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Campaign_get_ad_studies(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute campaign_get_ad_studies: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleCampaign_post_adlabels handles the campaign_post_adlabels tool
func HandleCampaign_post_adlabels(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCampaignClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: adlabels
	adlabels, err := request.RequireString("adlabels")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter adlabels: %v", err)), nil
	}
	args["adlabels"] = adlabels

	// Optional: execution_options
	// array type - using string
	if val := request.GetString("execution_options", ""); val != "" {
		args["execution_options"] = val
	}

	// Call the client method
	result, err := client.Campaign_post_adlabels(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute campaign_post_adlabels: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleCampaign_get_adrules_governed handles the campaign_get_adrules_governed tool
func HandleCampaign_get_adrules_governed(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCampaignClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: pass_evaluation
	if val := request.GetBool("pass_evaluation", false); val {
		args["pass_evaluation"] = val
	}

	// Call the client method
	result, err := client.Campaign_get_adrules_governed(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute campaign_get_adrules_governed: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleCampaign_get_ads handles the campaign_get_ads tool
func HandleCampaign_get_ads(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCampaignClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: date_preset
	if val := request.GetString("date_preset", ""); val != "" {
		args["date_preset"] = val
	}

	// Optional: effective_status
	// array type - using string
	if val := request.GetString("effective_status", ""); val != "" {
		args["effective_status"] = val
	}

	// Optional: time_range
	if val := request.GetString("time_range", ""); val != "" {
		args["time_range"] = val
	}

	// Optional: updated_since
	if val := request.GetInt("updated_since", 0); val != 0 {
		args["updated_since"] = val
	}

	// Call the client method
	result, err := client.Campaign_get_ads(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute campaign_get_ads: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleCampaign_get_adsets handles the campaign_get_adsets tool
func HandleCampaign_get_adsets(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCampaignClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: date_preset
	if val := request.GetString("date_preset", ""); val != "" {
		args["date_preset"] = val
	}

	// Optional: effective_status
	// array type - using string
	if val := request.GetString("effective_status", ""); val != "" {
		args["effective_status"] = val
	}

	// Optional: is_completed
	if val := request.GetBool("is_completed", false); val {
		args["is_completed"] = val
	}

	// Optional: time_range
	if val := request.GetString("time_range", ""); val != "" {
		args["time_range"] = val
	}

	// Call the client method
	result, err := client.Campaign_get_adsets(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute campaign_get_adsets: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleCampaign_post_budget_schedules handles the campaign_post_budget_schedules tool
func HandleCampaign_post_budget_schedules(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCampaignClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: budget_value
	budget_value, err := request.RequireInt("budget_value")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter budget_value: %v", err)), nil
	}
	args["budget_value"] = budget_value

	// Required: budget_value_type
	budget_value_type, err := request.RequireString("budget_value_type")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter budget_value_type: %v", err)), nil
	}
	args["budget_value_type"] = budget_value_type

	// Required: time_end
	time_end, err := request.RequireInt("time_end")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter time_end: %v", err)), nil
	}
	args["time_end"] = time_end

	// Required: time_start
	time_start, err := request.RequireInt("time_start")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter time_start: %v", err)), nil
	}
	args["time_start"] = time_start

	// Call the client method
	result, err := client.Campaign_post_budget_schedules(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute campaign_post_budget_schedules: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleCampaign_get_copies handles the campaign_get_copies tool
func HandleCampaign_get_copies(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCampaignClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: date_preset
	if val := request.GetString("date_preset", ""); val != "" {
		args["date_preset"] = val
	}

	// Optional: effective_status
	// array type - using string
	if val := request.GetString("effective_status", ""); val != "" {
		args["effective_status"] = val
	}

	// Optional: is_completed
	if val := request.GetBool("is_completed", false); val {
		args["is_completed"] = val
	}

	// Optional: time_range
	if val := request.GetString("time_range", ""); val != "" {
		args["time_range"] = val
	}

	// Call the client method
	result, err := client.Campaign_get_copies(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute campaign_get_copies: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleCampaign_post_copies handles the campaign_post_copies tool
func HandleCampaign_post_copies(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCampaignClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: deep_copy
	if val := request.GetBool("deep_copy", false); val {
		args["deep_copy"] = val
	}

	// Optional: end_time
	if val := request.GetString("end_time", ""); val != "" {
		args["end_time"] = val
	}

	// Optional: rename_options
	// object type - using string
	if val := request.GetString("rename_options", ""); val != "" {
		args["rename_options"] = val
	}

	// Optional: start_time
	if val := request.GetString("start_time", ""); val != "" {
		args["start_time"] = val
	}

	// Optional: status_option
	if val := request.GetString("status_option", ""); val != "" {
		args["status_option"] = val
	}

	// Call the client method
	result, err := client.Campaign_post_copies(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute campaign_post_copies: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleCampaign_get_insights handles the campaign_get_insights tool
func HandleCampaign_get_insights(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCampaignClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: action_attribution_windows
	// array type - using string
	if val := request.GetString("action_attribution_windows", ""); val != "" {
		args["action_attribution_windows"] = val
	}

	// Optional: action_breakdowns
	// array type - using string
	if val := request.GetString("action_breakdowns", ""); val != "" {
		args["action_breakdowns"] = val
	}

	// Optional: action_report_time
	if val := request.GetString("action_report_time", ""); val != "" {
		args["action_report_time"] = val
	}

	// Optional: breakdowns
	// array type - using string
	if val := request.GetString("breakdowns", ""); val != "" {
		args["breakdowns"] = val
	}

	// Optional: date_preset
	if val := request.GetString("date_preset", ""); val != "" {
		args["date_preset"] = val
	}

	// Optional: default_summary
	if val := request.GetBool("default_summary", false); val {
		args["default_summary"] = val
	}

	// Optional: export_columns
	// array type - using string
	if val := request.GetString("export_columns", ""); val != "" {
		args["export_columns"] = val
	}

	// Optional: export_format
	if val := request.GetString("export_format", ""); val != "" {
		args["export_format"] = val
	}

	// Optional: export_name
	if val := request.GetString("export_name", ""); val != "" {
		args["export_name"] = val
	}

	// Optional: fields
	// array type - using string
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: filtering
	// array type - using string
	if val := request.GetString("filtering", ""); val != "" {
		args["filtering"] = val
	}

	// Optional: level
	if val := request.GetString("level", ""); val != "" {
		args["level"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: product_id_limit
	if val := request.GetInt("product_id_limit", 0); val != 0 {
		args["product_id_limit"] = val
	}

	// Optional: sort
	// array type - using string
	if val := request.GetString("sort", ""); val != "" {
		args["sort"] = val
	}

	// Optional: summary
	// array type - using string
	if val := request.GetString("summary", ""); val != "" {
		args["summary"] = val
	}

	// Optional: summary_action_breakdowns
	// array type - using string
	if val := request.GetString("summary_action_breakdowns", ""); val != "" {
		args["summary_action_breakdowns"] = val
	}

	// Optional: time_increment
	if val := request.GetString("time_increment", ""); val != "" {
		args["time_increment"] = val
	}

	// Optional: time_range
	if val := request.GetString("time_range", ""); val != "" {
		args["time_range"] = val
	}

	// Optional: time_ranges
	// array type - using string
	if val := request.GetString("time_ranges", ""); val != "" {
		args["time_ranges"] = val
	}

	// Optional: use_account_attribution_setting
	if val := request.GetBool("use_account_attribution_setting", false); val {
		args["use_account_attribution_setting"] = val
	}

	// Optional: use_unified_attribution_setting
	if val := request.GetBool("use_unified_attribution_setting", false); val {
		args["use_unified_attribution_setting"] = val
	}

	// Call the client method
	result, err := client.Campaign_get_insights(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute campaign_get_insights: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleCampaign_post_insights handles the campaign_post_insights tool
func HandleCampaign_post_insights(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCampaignClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: action_attribution_windows
	// array type - using string
	if val := request.GetString("action_attribution_windows", ""); val != "" {
		args["action_attribution_windows"] = val
	}

	// Optional: action_breakdowns
	// array type - using string
	if val := request.GetString("action_breakdowns", ""); val != "" {
		args["action_breakdowns"] = val
	}

	// Optional: action_report_time
	if val := request.GetString("action_report_time", ""); val != "" {
		args["action_report_time"] = val
	}

	// Optional: breakdowns
	// array type - using string
	if val := request.GetString("breakdowns", ""); val != "" {
		args["breakdowns"] = val
	}

	// Optional: date_preset
	if val := request.GetString("date_preset", ""); val != "" {
		args["date_preset"] = val
	}

	// Optional: default_summary
	if val := request.GetBool("default_summary", false); val {
		args["default_summary"] = val
	}

	// Optional: export_columns
	// array type - using string
	if val := request.GetString("export_columns", ""); val != "" {
		args["export_columns"] = val
	}

	// Optional: export_format
	if val := request.GetString("export_format", ""); val != "" {
		args["export_format"] = val
	}

	// Optional: export_name
	if val := request.GetString("export_name", ""); val != "" {
		args["export_name"] = val
	}

	// Optional: fields
	// array type - using string
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: filtering
	// array type - using string
	if val := request.GetString("filtering", ""); val != "" {
		args["filtering"] = val
	}

	// Optional: level
	if val := request.GetString("level", ""); val != "" {
		args["level"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: product_id_limit
	if val := request.GetInt("product_id_limit", 0); val != 0 {
		args["product_id_limit"] = val
	}

	// Optional: sort
	// array type - using string
	if val := request.GetString("sort", ""); val != "" {
		args["sort"] = val
	}

	// Optional: summary
	// array type - using string
	if val := request.GetString("summary", ""); val != "" {
		args["summary"] = val
	}

	// Optional: summary_action_breakdowns
	// array type - using string
	if val := request.GetString("summary_action_breakdowns", ""); val != "" {
		args["summary_action_breakdowns"] = val
	}

	// Optional: time_increment
	if val := request.GetString("time_increment", ""); val != "" {
		args["time_increment"] = val
	}

	// Optional: time_range
	if val := request.GetString("time_range", ""); val != "" {
		args["time_range"] = val
	}

	// Optional: time_ranges
	// array type - using string
	if val := request.GetString("time_ranges", ""); val != "" {
		args["time_ranges"] = val
	}

	// Optional: use_account_attribution_setting
	if val := request.GetBool("use_account_attribution_setting", false); val {
		args["use_account_attribution_setting"] = val
	}

	// Optional: use_unified_attribution_setting
	if val := request.GetBool("use_unified_attribution_setting", false); val {
		args["use_unified_attribution_setting"] = val
	}

	// Call the client method
	result, err := client.Campaign_post_insights(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute campaign_post_insights: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleCampaign_delete_ handles the campaign_delete_ tool
func HandleCampaign_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCampaignClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Campaign_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute campaign_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleCampaign_get_ handles the campaign_get_ tool
func HandleCampaign_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCampaignClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: am_call_tags
	if val := request.GetString("am_call_tags", ""); val != "" {
		args["am_call_tags"] = val
	}

	// Optional: date_preset
	if val := request.GetString("date_preset", ""); val != "" {
		args["date_preset"] = val
	}

	// Optional: from_adtable
	if val := request.GetBool("from_adtable", false); val {
		args["from_adtable"] = val
	}

	// Optional: time_range
	if val := request.GetString("time_range", ""); val != "" {
		args["time_range"] = val
	}

	// Call the client method
	result, err := client.Campaign_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute campaign_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleCampaign_post_ handles the campaign_post_ tool
func HandleCampaign_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCampaignClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: adlabels
	// array type - using string
	if val := request.GetString("adlabels", ""); val != "" {
		args["adlabels"] = val
	}

	// Optional: adset_bid_amounts
	if val := request.GetString("adset_bid_amounts", ""); val != "" {
		args["adset_bid_amounts"] = val
	}

	// Optional: adset_budgets
	// array type - using string
	if val := request.GetString("adset_budgets", ""); val != "" {
		args["adset_budgets"] = val
	}

	// Optional: bid_strategy
	if val := request.GetString("bid_strategy", ""); val != "" {
		args["bid_strategy"] = val
	}

	// Optional: budget_rebalance_flag
	if val := request.GetBool("budget_rebalance_flag", false); val {
		args["budget_rebalance_flag"] = val
	}

	// Optional: daily_budget
	if val := request.GetInt("daily_budget", 0); val != 0 {
		args["daily_budget"] = val
	}

	// Optional: execution_options
	// array type - using string
	if val := request.GetString("execution_options", ""); val != "" {
		args["execution_options"] = val
	}

	// Optional: is_skadnetwork_attribution
	if val := request.GetBool("is_skadnetwork_attribution", false); val {
		args["is_skadnetwork_attribution"] = val
	}

	// Optional: iterative_split_test_configs
	// array type - using string
	if val := request.GetString("iterative_split_test_configs", ""); val != "" {
		args["iterative_split_test_configs"] = val
	}

	// Optional: lifetime_budget
	if val := request.GetInt("lifetime_budget", 0); val != 0 {
		args["lifetime_budget"] = val
	}

	// Optional: name
	if val := request.GetString("name", ""); val != "" {
		args["name"] = val
	}

	// Optional: objective
	if val := request.GetString("objective", ""); val != "" {
		args["objective"] = val
	}

	// Optional: pacing_type
	// array type - using string
	if val := request.GetString("pacing_type", ""); val != "" {
		args["pacing_type"] = val
	}

	// Optional: promoted_object
	// object type - using string
	if val := request.GetString("promoted_object", ""); val != "" {
		args["promoted_object"] = val
	}

	// Optional: smart_promotion_type
	if val := request.GetString("smart_promotion_type", ""); val != "" {
		args["smart_promotion_type"] = val
	}

	// Optional: special_ad_categories
	// array type - using string
	if val := request.GetString("special_ad_categories", ""); val != "" {
		args["special_ad_categories"] = val
	}

	// Optional: special_ad_category
	if val := request.GetString("special_ad_category", ""); val != "" {
		args["special_ad_category"] = val
	}

	// Optional: special_ad_category_country
	// array type - using string
	if val := request.GetString("special_ad_category_country", ""); val != "" {
		args["special_ad_category_country"] = val
	}

	// Optional: spend_cap
	if val := request.GetInt("spend_cap", 0); val != 0 {
		args["spend_cap"] = val
	}

	// Optional: start_time
	if val := request.GetString("start_time", ""); val != "" {
		args["start_time"] = val
	}

	// Optional: status
	if val := request.GetString("status", ""); val != "" {
		args["status"] = val
	}

	// Optional: stop_time
	if val := request.GetString("stop_time", ""); val != "" {
		args["stop_time"] = val
	}

	// Call the client method
	result, err := client.Campaign_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute campaign_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
