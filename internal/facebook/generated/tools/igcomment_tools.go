// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetIGCommentTools returns MCP tools for IGComment
func GetIGCommentTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool


	// facebook_igcomment_get_replies tool
	facebook_igcomment_get_repliesTool := mcp.NewTool("facebook_igcomment_get_replies",
		mcp.WithDescription("GET replies for IGComment"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_igcomment_get_repliesTool)

	// facebook_igcomment_post_replies tool
	facebook_igcomment_post_repliesTool := mcp.NewTool("facebook_igcomment_post_replies",
		mcp.WithDescription("POST replies for IGComment"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("message",
			mcp.Description("message parameter for replies"),
		),
	)
	tools = append(tools, facebook_igcomment_post_repliesTool)

	// facebook_igcomment_delete_ tool
	facebook_igcomment_delete_Tool := mcp.NewTool("facebook_igcomment_delete_",
		mcp.WithDescription("DELETE  for IGComment"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("ad_id",
			mcp.Description("ad_id parameter for "),
		),
	)
	tools = append(tools, facebook_igcomment_delete_Tool)

	// facebook_igcomment_get_ tool
	facebook_igcomment_get_Tool := mcp.NewTool("facebook_igcomment_get_",
		mcp.WithDescription("GET  for IGComment"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_igcomment_get_Tool)

	// facebook_igcomment_post_ tool
	facebook_igcomment_post_Tool := mcp.NewTool("facebook_igcomment_post_",
		mcp.WithDescription("POST  for IGComment"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("ad_id",
			mcp.Description("ad_id parameter for "),
		),
		mcp.WithBoolean("hide",
			mcp.Required(),
			mcp.Description("hide parameter for "),
		),
	)
	tools = append(tools, facebook_igcomment_post_Tool)


	return tools
}

// IGComment handlers


// HandleFacebook_igcomment_get_replies handles the facebook_igcomment_get_replies tool
func HandleFacebook_igcomment_get_replies(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewIGCommentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_igcomment_get_replies(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_igcomment_get_replies: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_igcomment_post_replies handles the facebook_igcomment_post_replies tool
func HandleFacebook_igcomment_post_replies(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewIGCommentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: message
	if val := request.GetString("message", ""); val != "" {
		args["message"] = val
	}



	// Call the client method
	result, err := client.Facebook_igcomment_post_replies(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_igcomment_post_replies: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_igcomment_delete_ handles the facebook_igcomment_delete_ tool
func HandleFacebook_igcomment_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewIGCommentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: ad_id
	if val := request.GetString("ad_id", ""); val != "" {
		args["ad_id"] = val
	}



	// Call the client method
	result, err := client.Facebook_igcomment_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_igcomment_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_igcomment_get_ handles the facebook_igcomment_get_ tool
func HandleFacebook_igcomment_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewIGCommentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_igcomment_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_igcomment_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_igcomment_post_ handles the facebook_igcomment_post_ tool
func HandleFacebook_igcomment_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewIGCommentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: ad_id
	if val := request.GetString("ad_id", ""); val != "" {
		args["ad_id"] = val
	}

	// Required: hide
	hide, err := request.RequireBool("hide")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter hide: %v", err)), nil
	}
	args["hide"] = hide



	// Call the client method
	result, err := client.Facebook_igcomment_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_igcomment_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

