// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetIGCommentTools returns MCP tools for IGComment
func GetIGCommentTools() []mcp.Tool {
	var tools []mcp.Tool


	// igcomment_get_replies tool
	// Available fields for IGComment: from, hidden, id, legacy_instagram_comment_id, like_count, media, parent_id, text, timestamp, user, username
	igcomment_get_repliesTool := mcp.NewTool("igcomment_get_replies",
		mcp.WithDescription("GET replies for IGComment"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for IGComment objects. Available fields: from, hidden, id, legacy_instagram_comment_id, like_count, media, parent_id, text, timestamp, user, username"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, igcomment_get_repliesTool)

	// igcomment_post_replies tool
	// Params object accepts: message (string)
	igcomment_post_repliesTool := mcp.NewTool("igcomment_post_replies",
		mcp.WithDescription("POST replies for IGComment"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"message": map[string]any{
					"type": "string",
					"description": "message parameter",
				},
			}),
			mcp.Description("Parameters object containing: message (string)"),
		),
	)
	tools = append(tools, igcomment_post_repliesTool)

	// igcomment_delete_ tool
	// Params object accepts: ad_id (string)
	igcomment_delete_Tool := mcp.NewTool("igcomment_delete_",
		mcp.WithDescription("DELETE  for IGComment"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"ad_id": map[string]any{
					"type": "string",
					"description": "ad_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: ad_id (string)"),
		),
	)
	tools = append(tools, igcomment_delete_Tool)

	// igcomment_get_ tool
	// Available fields for IGComment: from, hidden, id, legacy_instagram_comment_id, like_count, media, parent_id, text, timestamp, user, username
	igcomment_get_Tool := mcp.NewTool("igcomment_get_",
		mcp.WithDescription("GET  for IGComment"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for IGComment objects. Available fields: from, hidden, id, legacy_instagram_comment_id, like_count, media, parent_id, text, timestamp, user, username"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, igcomment_get_Tool)

	// igcomment_post_ tool
	// Params object accepts: ad_id (string), hide (bool)
	igcomment_post_Tool := mcp.NewTool("igcomment_post_",
		mcp.WithDescription("POST  for IGComment"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"ad_id": map[string]any{
					"type": "string",
					"description": "ad_id parameter",
				},
				"hide": map[string]any{
					"type": "boolean",
					"description": "hide parameter",
					"required": true,
				},
			}),
			mcp.Description("Parameters object containing: ad_id (string), hide (boolean) [required]"),
		),
	)
	tools = append(tools, igcomment_post_Tool)


	return tools
}

// IGComment handlers


// HandleIgcomment_get_replies handles the igcomment_get_replies tool with context-based auth
func HandleIgcomment_get_replies(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewIGCommentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Igcomment_get_replies(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute igcomment_get_replies: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleIgcomment_post_replies handles the igcomment_post_replies tool with context-based auth
func HandleIgcomment_post_replies(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewIGCommentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the client method
	result, err := client.Igcomment_post_replies(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute igcomment_post_replies: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleIgcomment_delete_ handles the igcomment_delete_ tool with context-based auth
func HandleIgcomment_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewIGCommentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the client method
	result, err := client.Igcomment_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute igcomment_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleIgcomment_get_ handles the igcomment_get_ tool with context-based auth
func HandleIgcomment_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewIGCommentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Igcomment_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute igcomment_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleIgcomment_post_ handles the igcomment_post_ tool with context-based auth
func HandleIgcomment_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewIGCommentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}



	// Call the client method
	result, err := client.Igcomment_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute igcomment_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

