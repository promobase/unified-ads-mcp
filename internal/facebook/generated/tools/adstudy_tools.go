// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetAdStudyTools returns MCP tools for AdStudy
func GetAdStudyTools() []mcp.Tool {
	var tools []mcp.Tool


	// adstudy_get_cells tool
	// Available fields for AdStudyCell: ad_entities_count, control_percentage, id, name, treatment_percentage
	adstudy_get_cellsTool := mcp.NewTool("adstudy_get_cells",
		mcp.WithDescription("GET cells for AdStudy"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for AdStudyCell objects. Available fields: ad_entities_count, control_percentage, id, name, treatment_percentage"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, adstudy_get_cellsTool)

	// adstudy_post_checkpoint tool
	// Params object accepts: checkpoint_data (string), checkpoint_name (string), component (string), instance_id (string), run_id (string)
	adstudy_post_checkpointTool := mcp.NewTool("adstudy_post_checkpoint",
		mcp.WithDescription("POST checkpoint for AdStudy"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"checkpoint_data": map[string]any{
					"type": "string",
					"description": "checkpoint_data parameter",
					"required": true,
				},
				"checkpoint_name": map[string]any{
					"type": "string",
					"description": "checkpoint_name parameter",
					"required": true,
				},
				"component": map[string]any{
					"type": "string",
					"description": "component parameter",
					"required": true,
				},
				"instance_id": map[string]any{
					"type": "string",
					"description": "instance_id parameter",
				},
				"run_id": map[string]any{
					"type": "string",
					"description": "run_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: checkpoint_data (string) [required], checkpoint_name (string) [required], component (string) [required], instance_id (string), run_id (string)"),
		),
	)
	tools = append(tools, adstudy_post_checkpointTool)

	// adstudy_get_instances tool
	// Available fields for PrivateLiftStudyInstance: breakdown_key, created_time, feature_list, id, issuer_certificate, latest_status_update_time, run_id, server_hostnames, server_ips, status, tier
	adstudy_get_instancesTool := mcp.NewTool("adstudy_get_instances",
		mcp.WithDescription("GET instances for AdStudy"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for PrivateLiftStudyInstance objects. Available fields: breakdown_key, created_time, feature_list, id, issuer_certificate, latest_status_update_time, run_id, server_hostnames, server_ips, status, tier"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, adstudy_get_instancesTool)

	// adstudy_post_instances tool
	// Params object accepts: breakdown_key (map), run_id (string)
	adstudy_post_instancesTool := mcp.NewTool("adstudy_post_instances",
		mcp.WithDescription("POST instances for AdStudy"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"breakdown_key": map[string]any{
					"type": "object",
					"description": "breakdown_key parameter",
					"required": true,
				},
				"run_id": map[string]any{
					"type": "string",
					"description": "run_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: breakdown_key (object) [required], run_id (string)"),
		),
	)
	tools = append(tools, adstudy_post_instancesTool)

	// adstudy_get_objectives tool
	// Available fields for AdStudyObjective: id, is_primary, last_updated_results, name, results, type
	adstudy_get_objectivesTool := mcp.NewTool("adstudy_get_objectives",
		mcp.WithDescription("GET objectives for AdStudy"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for AdStudyObjective objects. Available fields: id, is_primary, last_updated_results, name, results, type"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, adstudy_get_objectivesTool)

	// adstudy_delete_ tool
	adstudy_delete_Tool := mcp.NewTool("adstudy_delete_",
		mcp.WithDescription("DELETE  for AdStudy"),
	)
	tools = append(tools, adstudy_delete_Tool)

	// adstudy_get_ tool
	// Available fields for AdStudy: business, canceled_time, client_business, cooldown_start_time, created_by, created_time, description, end_time, id, measurement_contact, name, observation_end_time, results_first_available_date, sales_contact, start_time, type, updated_by, updated_time
	adstudy_get_Tool := mcp.NewTool("adstudy_get_",
		mcp.WithDescription("GET  for AdStudy"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for AdStudy objects. Available fields: business, canceled_time, client_business, cooldown_start_time, created_by, created_time, description, end_time, id, measurement_contact, name, observation_end_time, results_first_available_date, sales_contact, start_time (and 3 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, adstudy_get_Tool)

	// adstudy_post_ tool
	// Params object accepts: cells (list<Object>), client_business (string), confidence_level (float), cooldown_start_time (int), description (string), end_time (int), name (string), objectives (list<Object>), observation_end_time (int), start_time (int), type (adstudy_type), viewers (list<int>)
	adstudy_post_Tool := mcp.NewTool("adstudy_post_",
		mcp.WithDescription("POST  for AdStudy"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"cells": map[string]any{
					"type": "array",
					"description": "cells parameter",
					"items": map[string]any{"type": "object"},
				},
				"client_business": map[string]any{
					"type": "string",
					"description": "client_business parameter",
				},
				"confidence_level": map[string]any{
					"type": "number",
					"description": "confidence_level parameter",
				},
				"cooldown_start_time": map[string]any{
					"type": "integer",
					"description": "cooldown_start_time parameter",
				},
				"description": map[string]any{
					"type": "string",
					"description": "description parameter",
				},
				"end_time": map[string]any{
					"type": "integer",
					"description": "end_time parameter",
				},
				"name": map[string]any{
					"type": "string",
					"description": "name parameter",
				},
				"objectives": map[string]any{
					"type": "array",
					"description": "objectives parameter",
					"items": map[string]any{"type": "object"},
				},
				"observation_end_time": map[string]any{
					"type": "integer",
					"description": "observation_end_time parameter",
				},
				"start_time": map[string]any{
					"type": "integer",
					"description": "start_time parameter",
				},
				"type": map[string]any{
					"type": "string",
					"description": "type parameter",
					"enum": []string{ "BACKEND_AB_TESTING", "CONTINUOUS_LIFT_CONFIG", "GEO_LIFT", "LIFT", "SPLIT_TEST" },
				},
				"viewers": map[string]any{
					"type": "array",
					"description": "viewers parameter",
					"items": map[string]any{"type": "integer"},
				},
			}),
			mcp.Description("Parameters object containing: cells (array<object>), client_business (string), confidence_level (number), cooldown_start_time (integer), description (string), end_time (integer), name (string), objectives (array<object>), observation_end_time (integer), start_time (integer), type (adstudy_type) [BACKEND_AB_TESTING, CONTINUOUS_LIFT_CONFIG, GEO_LIFT, LIFT, SPLIT_TEST], viewers (array<integer>)"),
		),
	)
	tools = append(tools, adstudy_post_Tool)


	return tools
}

// AdStudy handlers


// HandleAdstudy_get_cells handles the adstudy_get_cells tool with context-based auth
func HandleAdstudy_get_cells(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdStudyClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Adstudy_get_cells(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adstudy_get_cells: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleAdstudy_post_checkpoint handles the adstudy_post_checkpoint tool with context-based auth
func HandleAdstudy_post_checkpoint(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdStudyClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}



	// Call the client method
	result, err := client.Adstudy_post_checkpoint(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adstudy_post_checkpoint: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleAdstudy_get_instances handles the adstudy_get_instances tool with context-based auth
func HandleAdstudy_get_instances(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdStudyClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Adstudy_get_instances(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adstudy_get_instances: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleAdstudy_post_instances handles the adstudy_post_instances tool with context-based auth
func HandleAdstudy_post_instances(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdStudyClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}



	// Call the client method
	result, err := client.Adstudy_post_instances(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adstudy_post_instances: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleAdstudy_get_objectives handles the adstudy_get_objectives tool with context-based auth
func HandleAdstudy_get_objectives(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdStudyClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Adstudy_get_objectives(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adstudy_get_objectives: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleAdstudy_delete_ handles the adstudy_delete_ tool with context-based auth
func HandleAdstudy_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdStudyClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Adstudy_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adstudy_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleAdstudy_get_ handles the adstudy_get_ tool with context-based auth
func HandleAdstudy_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdStudyClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Adstudy_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adstudy_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleAdstudy_post_ handles the adstudy_post_ tool with context-based auth
func HandleAdstudy_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdStudyClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the client method
	result, err := client.Adstudy_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adstudy_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

