// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetSystemUserTools returns MCP tools for SystemUser
func GetSystemUserTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool


	// facebook_systemuser_get_assigned_ad_accounts tool
	facebook_systemuser_get_assigned_ad_accountsTool := mcp.NewTool("facebook_systemuser_get_assigned_ad_accounts",
		mcp.WithDescription("GET assigned_ad_accounts for SystemUser"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_systemuser_get_assigned_ad_accountsTool)

	// facebook_systemuser_get_assigned_business_asset_groups tool
	facebook_systemuser_get_assigned_business_asset_groupsTool := mcp.NewTool("facebook_systemuser_get_assigned_business_asset_groups",
		mcp.WithDescription("GET assigned_business_asset_groups for SystemUser"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("contained_asset_id",
			mcp.Description("contained_asset_id parameter for assigned_business_asset_groups"),
		),
	)
	tools = append(tools, facebook_systemuser_get_assigned_business_asset_groupsTool)

	// facebook_systemuser_get_assigned_pages tool
	facebook_systemuser_get_assigned_pagesTool := mcp.NewTool("facebook_systemuser_get_assigned_pages",
		mcp.WithDescription("GET assigned_pages for SystemUser"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("pages",
			mcp.Description("pages parameter for assigned_pages"),
		),
	)
	tools = append(tools, facebook_systemuser_get_assigned_pagesTool)

	// facebook_systemuser_get_assigned_product_catalogs tool
	facebook_systemuser_get_assigned_product_catalogsTool := mcp.NewTool("facebook_systemuser_get_assigned_product_catalogs",
		mcp.WithDescription("GET assigned_product_catalogs for SystemUser"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_systemuser_get_assigned_product_catalogsTool)

	// facebook_systemuser_get_ tool
	facebook_systemuser_get_Tool := mcp.NewTool("facebook_systemuser_get_",
		mcp.WithDescription("GET  for SystemUser"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_systemuser_get_Tool)


	return tools
}

// SystemUser handlers


// HandleFacebook_systemuser_get_assigned_ad_accounts handles the facebook_systemuser_get_assigned_ad_accounts tool
func HandleFacebook_systemuser_get_assigned_ad_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewSystemUserClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_systemuser_get_assigned_ad_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_systemuser_get_assigned_ad_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_systemuser_get_assigned_business_asset_groups handles the facebook_systemuser_get_assigned_business_asset_groups tool
func HandleFacebook_systemuser_get_assigned_business_asset_groups(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewSystemUserClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: contained_asset_id
	if val := request.GetString("contained_asset_id", ""); val != "" {
		args["contained_asset_id"] = val
	}



	// Call the client method
	result, err := client.Facebook_systemuser_get_assigned_business_asset_groups(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_systemuser_get_assigned_business_asset_groups: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_systemuser_get_assigned_pages handles the facebook_systemuser_get_assigned_pages tool
func HandleFacebook_systemuser_get_assigned_pages(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewSystemUserClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: pages
	// array type - using string
	if val := request.GetString("pages", ""); val != "" {
		args["pages"] = val
	}



	// Call the client method
	result, err := client.Facebook_systemuser_get_assigned_pages(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_systemuser_get_assigned_pages: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_systemuser_get_assigned_product_catalogs handles the facebook_systemuser_get_assigned_product_catalogs tool
func HandleFacebook_systemuser_get_assigned_product_catalogs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewSystemUserClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_systemuser_get_assigned_product_catalogs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_systemuser_get_assigned_product_catalogs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_systemuser_get_ handles the facebook_systemuser_get_ tool
func HandleFacebook_systemuser_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewSystemUserClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_systemuser_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_systemuser_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

