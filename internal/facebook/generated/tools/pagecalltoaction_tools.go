// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetPageCallToActionTools returns MCP tools for PageCallToAction
func GetPageCallToActionTools() []mcp.Tool {
	var tools []mcp.Tool

	// pagecalltoaction_delete_ tool
	pagecalltoaction_delete_Tool := mcp.NewTool("pagecalltoaction_delete_",
		mcp.WithDescription("DELETE  for PageCallToAction"),
	)
	tools = append(tools, pagecalltoaction_delete_Tool)

	// pagecalltoaction_get_ tool
	// Available fields for PageCallToAction: android_app, android_deeplink, android_destination_type, android_package_name, android_url, created_time, email_address, from, id, intl_number_with_plus, iphone_app, iphone_deeplink, iphone_destination_type, iphone_url, status, type, updated_time, web_destination_type, web_url
	pagecalltoaction_get_Tool := mcp.NewTool("pagecalltoaction_get_",
		mcp.WithDescription("GET  for PageCallToAction"),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for PageCallToAction objects. Available fields: android_app, android_deeplink, android_destination_type, android_package_name, android_url, created_time, email_address, from, id, intl_number_with_plus, iphone_app, iphone_deeplink, iphone_destination_type, iphone_url, status (and 4 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, pagecalltoaction_get_Tool)

	// pagecalltoaction_post_ tool
	pagecalltoaction_post_Tool := mcp.NewTool("pagecalltoaction_post_",
		mcp.WithDescription("POST  for PageCallToAction"),
		mcp.WithNumber("android_app_id",
			mcp.Description("android_app_id parameter for "),
		),
		mcp.WithString("android_destination_type",
			mcp.Description("android_destination_type parameter for "),
			mcp.Enum("APP_DEEPLINK", "BECOME_A_VOLUNTEER", "EMAIL", "FACEBOOK_APP", "FOLLOW", "MARKETPLACE_INVENTORY_PAGE", "MENU_ON_FACEBOOK", "MESSENGER", "MINI_SHOP", "MOBILE_CENTER", "NONE", "PHONE_CALL", "SHOP_ON_FACEBOOK", "WEBSITE"),
		),
		mcp.WithString("android_package_name",
			mcp.Description("android_package_name parameter for "),
		),
		mcp.WithString("android_url",
			mcp.Description("android_url parameter for "),
		),
		mcp.WithString("email_address",
			mcp.Description("email_address parameter for "),
		),
		mcp.WithString("intl_number_with_plus",
			mcp.Description("intl_number_with_plus parameter for "),
		),
		mcp.WithNumber("iphone_app_id",
			mcp.Description("iphone_app_id parameter for "),
		),
		mcp.WithString("iphone_destination_type",
			mcp.Description("iphone_destination_type parameter for "),
			mcp.Enum("APP_DEEPLINK", "BECOME_A_VOLUNTEER", "EMAIL", "FACEBOOK_APP", "FOLLOW", "MARKETPLACE_INVENTORY_PAGE", "MENU_ON_FACEBOOK", "MESSENGER", "MINI_SHOP", "NONE", "PHONE_CALL", "SHOP_ON_FACEBOOK", "WEBSITE"),
		),
		mcp.WithString("iphone_url",
			mcp.Description("iphone_url parameter for "),
		),
		mcp.WithString("type",
			mcp.Description("type parameter for "),
			mcp.Enum("BECOME_A_VOLUNTEER", "BOOK_APPOINTMENT", "BOOK_NOW", "BUY_TICKETS", "CALL_NOW", "CHARITY_DONATE", "CHECK_IN", "CONTACT_US", "CREATOR_STOREFRONT", "DONATE_NOW", "EMAIL", "FOLLOW_PAGE", "GET_DIRECTIONS", "GET_OFFER", "GET_OFFER_VIEW", "INTERESTED", "LEARN_MORE", "LISTEN", "LOCAL_DEV_PLATFORM", "MESSAGE", "MOBILE_CENTER", "OPEN_APP", "ORDER_FOOD", "PLAY_MUSIC", "PLAY_NOW", "PURCHASE_GIFT_CARDS", "REQUEST_APPOINTMENT", "REQUEST_QUOTE", "SHOP_NOW", "SHOP_ON_FACEBOOK", "SIGN_UP", "VIEW_INVENTORY", "VIEW_MENU", "VIEW_SHOP", "VISIT_GROUP", "WATCH_NOW", "WOODHENGE_SUPPORT"),
		),
		mcp.WithString("web_destination_type",
			mcp.Description("web_destination_type parameter for "),
			mcp.Enum("BECOME_A_VOLUNTEER", "BECOME_SUPPORTER", "EMAIL", "FOLLOW", "MESSENGER", "MOBILE_CENTER", "NONE", "SHOP_ON_FACEBOOK", "WEBSITE"),
		),
		mcp.WithString("web_url",
			mcp.Description("web_url parameter for "),
		),
	)
	tools = append(tools, pagecalltoaction_post_Tool)

	return tools
}

// PageCallToAction handlers

// HandlePagecalltoaction_delete_ handles the pagecalltoaction_delete_ tool with context-based auth
func HandlePagecalltoaction_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPageCallToActionClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Pagecalltoaction_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pagecalltoaction_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePagecalltoaction_get_ handles the pagecalltoaction_get_ tool with context-based auth
func HandlePagecalltoaction_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPageCallToActionClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Pagecalltoaction_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pagecalltoaction_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePagecalltoaction_post_ handles the pagecalltoaction_post_ tool with context-based auth
func HandlePagecalltoaction_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPageCallToActionClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: android_app_id
	if val := request.GetInt("android_app_id", 0); val != 0 {
		args["android_app_id"] = val
	}

	// Optional: android_destination_type
	if val := request.GetString("android_destination_type", ""); val != "" {
		args["android_destination_type"] = val
	}

	// Optional: android_package_name
	if val := request.GetString("android_package_name", ""); val != "" {
		args["android_package_name"] = val
	}

	// Optional: android_url
	if val := request.GetString("android_url", ""); val != "" {
		args["android_url"] = val
	}

	// Optional: email_address
	if val := request.GetString("email_address", ""); val != "" {
		args["email_address"] = val
	}

	// Optional: intl_number_with_plus
	if val := request.GetString("intl_number_with_plus", ""); val != "" {
		args["intl_number_with_plus"] = val
	}

	// Optional: iphone_app_id
	if val := request.GetInt("iphone_app_id", 0); val != 0 {
		args["iphone_app_id"] = val
	}

	// Optional: iphone_destination_type
	if val := request.GetString("iphone_destination_type", ""); val != "" {
		args["iphone_destination_type"] = val
	}

	// Optional: iphone_url
	if val := request.GetString("iphone_url", ""); val != "" {
		args["iphone_url"] = val
	}

	// Optional: type
	if val := request.GetString("type", ""); val != "" {
		args["type"] = val
	}

	// Optional: web_destination_type
	if val := request.GetString("web_destination_type", ""); val != "" {
		args["web_destination_type"] = val
	}

	// Optional: web_url
	if val := request.GetString("web_url", ""); val != "" {
		args["web_url"] = val
	}

	// Call the client method
	result, err := client.Pagecalltoaction_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pagecalltoaction_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
