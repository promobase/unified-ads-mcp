// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetPageCallToActionTools returns MCP tools for PageCallToAction
func GetPageCallToActionTools() []mcp.Tool {
	var tools []mcp.Tool


	// pagecalltoaction_delete_ tool
	pagecalltoaction_delete_Tool := mcp.NewTool("pagecalltoaction_delete_",
		mcp.WithDescription("DELETE  for PageCallToAction"),
	)
	tools = append(tools, pagecalltoaction_delete_Tool)

	// pagecalltoaction_get_ tool
	// Available fields for PageCallToAction: android_app, android_deeplink, android_destination_type, android_package_name, android_url, created_time, email_address, from, id, intl_number_with_plus, iphone_app, iphone_deeplink, iphone_destination_type, iphone_url, status, type, updated_time, web_destination_type, web_url
	pagecalltoaction_get_Tool := mcp.NewTool("pagecalltoaction_get_",
		mcp.WithDescription("GET  for PageCallToAction"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for PageCallToAction objects. Available fields: android_app, android_deeplink, android_destination_type, android_package_name, android_url, created_time, email_address, from, id, intl_number_with_plus, iphone_app, iphone_deeplink, iphone_destination_type, iphone_url, status (and 4 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, pagecalltoaction_get_Tool)

	// pagecalltoaction_post_ tool
	// Params object accepts: android_app_id (int), android_destination_type (pagecalltoaction_android_destination_type), android_package_name (string), android_url (string), email_address (string), intl_number_with_plus (string), iphone_app_id (int), iphone_destination_type (pagecalltoaction_iphone_destination_type), iphone_url (string), type (pagecalltoaction_type), web_destination_type (pagecalltoaction_web_destination_type), web_url (string)
	pagecalltoaction_post_Tool := mcp.NewTool("pagecalltoaction_post_",
		mcp.WithDescription("POST  for PageCallToAction"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"android_app_id": map[string]any{
					"type": "integer",
					"description": "android_app_id parameter",
				},
				"android_destination_type": map[string]any{
					"type": "string",
					"description": "android_destination_type parameter",
					"enum": []string{ "APP_DEEPLINK", "BECOME_A_VOLUNTEER", "EMAIL", "FACEBOOK_APP", "FOLLOW", "MARKETPLACE_INVENTORY_PAGE", "MENU_ON_FACEBOOK", "MESSENGER", "MINI_SHOP", "MOBILE_CENTER", "NONE", "PHONE_CALL", "SHOP_ON_FACEBOOK", "WEBSITE" },
				},
				"android_package_name": map[string]any{
					"type": "string",
					"description": "android_package_name parameter",
				},
				"android_url": map[string]any{
					"type": "string",
					"description": "android_url parameter",
				},
				"email_address": map[string]any{
					"type": "string",
					"description": "email_address parameter",
				},
				"intl_number_with_plus": map[string]any{
					"type": "string",
					"description": "intl_number_with_plus parameter",
				},
				"iphone_app_id": map[string]any{
					"type": "integer",
					"description": "iphone_app_id parameter",
				},
				"iphone_destination_type": map[string]any{
					"type": "string",
					"description": "iphone_destination_type parameter",
					"enum": []string{ "APP_DEEPLINK", "BECOME_A_VOLUNTEER", "EMAIL", "FACEBOOK_APP", "FOLLOW", "MARKETPLACE_INVENTORY_PAGE", "MENU_ON_FACEBOOK", "MESSENGER", "MINI_SHOP", "NONE", "PHONE_CALL", "SHOP_ON_FACEBOOK", "WEBSITE" },
				},
				"iphone_url": map[string]any{
					"type": "string",
					"description": "iphone_url parameter",
				},
				"type": map[string]any{
					"type": "string",
					"description": "type parameter",
					"enum": []string{ "BECOME_A_VOLUNTEER", "BOOK_APPOINTMENT", "BOOK_NOW", "BUY_TICKETS", "CALL_NOW", "CHARITY_DONATE", "CHECK_IN", "CONTACT_US", "CREATOR_STOREFRONT", "DONATE_NOW", "EMAIL", "FOLLOW_PAGE", "GET_DIRECTIONS", "GET_OFFER", "GET_OFFER_VIEW", "INTERESTED", "LEARN_MORE", "LISTEN", "LOCAL_DEV_PLATFORM", "MESSAGE", "MOBILE_CENTER", "OPEN_APP", "ORDER_FOOD", "PLAY_MUSIC", "PLAY_NOW", "PURCHASE_GIFT_CARDS", "REQUEST_APPOINTMENT", "REQUEST_QUOTE", "SHOP_NOW", "SHOP_ON_FACEBOOK", "SIGN_UP", "VIEW_INVENTORY", "VIEW_MENU", "VIEW_SHOP", "VISIT_GROUP", "WATCH_NOW", "WOODHENGE_SUPPORT" },
				},
				"web_destination_type": map[string]any{
					"type": "string",
					"description": "web_destination_type parameter",
					"enum": []string{ "BECOME_A_VOLUNTEER", "BECOME_SUPPORTER", "EMAIL", "FOLLOW", "MESSENGER", "MOBILE_CENTER", "NONE", "SHOP_ON_FACEBOOK", "WEBSITE" },
				},
				"web_url": map[string]any{
					"type": "string",
					"description": "web_url parameter",
				},
			}),
			mcp.Description("Parameters object containing: android_app_id (integer), android_destination_type (pagecalltoaction_android_destination_type) [APP_DEEPLINK, BECOME_A_VOLUNTEER, EMAIL, FACEBOOK_APP, FOLLOW, ...], android_package_name (string), android_url (string), email_address (string), intl_number_with_plus (string), iphone_app_id (integer), iphone_destination_type (pagecalltoaction_iphone_destination_type) [APP_DEEPLINK, BECOME_A_VOLUNTEER, EMAIL, FACEBOOK_APP, FOLLOW, ...], iphone_url (string), type (pagecalltoaction_type) [BECOME_A_VOLUNTEER, BOOK_APPOINTMENT, BOOK_NOW, BUY_TICKETS, CALL_NOW, ...], web_destination_type (pagecalltoaction_web_destination_type) [BECOME_A_VOLUNTEER, BECOME_SUPPORTER, EMAIL, FOLLOW, MESSENGER, ...], web_url (string)"),
		),
	)
	tools = append(tools, pagecalltoaction_post_Tool)


	return tools
}

// PageCallToAction handlers


// HandlePagecalltoaction_delete_ handles the pagecalltoaction_delete_ tool with context-based auth
func HandlePagecalltoaction_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPageCallToActionClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Pagecalltoaction_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pagecalltoaction_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandlePagecalltoaction_get_ handles the pagecalltoaction_get_ tool with context-based auth
func HandlePagecalltoaction_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPageCallToActionClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Pagecalltoaction_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pagecalltoaction_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandlePagecalltoaction_post_ handles the pagecalltoaction_post_ tool with context-based auth
func HandlePagecalltoaction_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPageCallToActionClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the client method
	result, err := client.Pagecalltoaction_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pagecalltoaction_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

