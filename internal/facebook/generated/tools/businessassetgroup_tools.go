// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetBusinessAssetGroupTools returns MCP tools for BusinessAssetGroup
func GetBusinessAssetGroupTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool

	// facebook_businessassetgroup_delete_assigned_users tool
	facebook_businessassetgroup_delete_assigned_usersTool := mcp.NewTool("facebook_businessassetgroup_delete_assigned_users",
		mcp.WithDescription("DELETE assigned_users for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithNumber("user",
			mcp.Required(),
			mcp.Description("user parameter for assigned_users"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_delete_assigned_usersTool)

	// facebook_businessassetgroup_get_assigned_users tool
	facebook_businessassetgroup_get_assigned_usersTool := mcp.NewTool("facebook_businessassetgroup_get_assigned_users",
		mcp.WithDescription("GET assigned_users for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("business",
			mcp.Required(),
			mcp.Description("business parameter for assigned_users"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_get_assigned_usersTool)

	// facebook_businessassetgroup_post_assigned_users tool
	facebook_businessassetgroup_post_assigned_usersTool := mcp.NewTool("facebook_businessassetgroup_post_assigned_users",
		mcp.WithDescription("POST assigned_users for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("adaccount_tasks",
			mcp.Description("adaccount_tasks parameter for assigned_users"),
			mcp.Enum("AA_ANALYZE", "ADVERTISE", "ANALYZE", "DRAFT", "MANAGE"),
		),
		mcp.WithString("offline_conversion_data_set_tasks",
			mcp.Description("offline_conversion_data_set_tasks parameter for assigned_users"),
			mcp.Enum("AA_ANALYZE", "ADVERTISE", "MANAGE", "UPLOAD", "VIEW"),
		),
		mcp.WithString("page_tasks",
			mcp.Description("page_tasks parameter for assigned_users"),
			mcp.Enum("ADVERTISE", "ANALYZE", "CASHIER_ROLE", "CREATE_CONTENT", "GLOBAL_STRUCTURE_MANAGEMENT", "MANAGE", "MANAGE_JOBS", "MANAGE_LEADS", "MESSAGING", "MODERATE", "MODERATE_COMMUNITY", "PAGES_MESSAGING", "PAGES_MESSAGING_SUBSCRIPTIONS", "PROFILE_PLUS_ADVERTISE", "PROFILE_PLUS_ANALYZE", "PROFILE_PLUS_CREATE_CONTENT", "PROFILE_PLUS_FACEBOOK_ACCESS", "PROFILE_PLUS_FULL_CONTROL", "PROFILE_PLUS_MANAGE", "PROFILE_PLUS_MANAGE_LEADS", "PROFILE_PLUS_MESSAGING", "PROFILE_PLUS_MODERATE", "PROFILE_PLUS_MODERATE_DELEGATE_COMMUNITY", "PROFILE_PLUS_REVENUE", "READ_PAGE_MAILBOXES", "VIEW_MONETIZATION_INSIGHTS"),
		),
		mcp.WithString("pixel_tasks",
			mcp.Description("pixel_tasks parameter for assigned_users"),
			mcp.Enum("AA_ANALYZE", "ADVERTISE", "ANALYZE", "EDIT", "UPLOAD"),
		),
		mcp.WithNumber("user",
			mcp.Required(),
			mcp.Description("user parameter for assigned_users"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_post_assigned_usersTool)

	// facebook_businessassetgroup_delete_contained_adaccounts tool
	facebook_businessassetgroup_delete_contained_adaccountsTool := mcp.NewTool("facebook_businessassetgroup_delete_contained_adaccounts",
		mcp.WithDescription("DELETE contained_adaccounts for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("asset_id",
			mcp.Required(),
			mcp.Description("asset_id parameter for contained_adaccounts"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_delete_contained_adaccountsTool)

	// facebook_businessassetgroup_get_contained_adaccounts tool
	facebook_businessassetgroup_get_contained_adaccountsTool := mcp.NewTool("facebook_businessassetgroup_get_contained_adaccounts",
		mcp.WithDescription("GET contained_adaccounts for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_get_contained_adaccountsTool)

	// facebook_businessassetgroup_post_contained_adaccounts tool
	facebook_businessassetgroup_post_contained_adaccountsTool := mcp.NewTool("facebook_businessassetgroup_post_contained_adaccounts",
		mcp.WithDescription("POST contained_adaccounts for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("asset_id",
			mcp.Required(),
			mcp.Description("asset_id parameter for contained_adaccounts"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_post_contained_adaccountsTool)

	// facebook_businessassetgroup_delete_contained_applications tool
	facebook_businessassetgroup_delete_contained_applicationsTool := mcp.NewTool("facebook_businessassetgroup_delete_contained_applications",
		mcp.WithDescription("DELETE contained_applications for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("asset_id",
			mcp.Required(),
			mcp.Description("asset_id parameter for contained_applications"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_delete_contained_applicationsTool)

	// facebook_businessassetgroup_get_contained_applications tool
	facebook_businessassetgroup_get_contained_applicationsTool := mcp.NewTool("facebook_businessassetgroup_get_contained_applications",
		mcp.WithDescription("GET contained_applications for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_get_contained_applicationsTool)

	// facebook_businessassetgroup_post_contained_applications tool
	facebook_businessassetgroup_post_contained_applicationsTool := mcp.NewTool("facebook_businessassetgroup_post_contained_applications",
		mcp.WithDescription("POST contained_applications for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("asset_id",
			mcp.Required(),
			mcp.Description("asset_id parameter for contained_applications"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_post_contained_applicationsTool)

	// facebook_businessassetgroup_delete_contained_custom_conversions tool
	facebook_businessassetgroup_delete_contained_custom_conversionsTool := mcp.NewTool("facebook_businessassetgroup_delete_contained_custom_conversions",
		mcp.WithDescription("DELETE contained_custom_conversions for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("asset_id",
			mcp.Required(),
			mcp.Description("asset_id parameter for contained_custom_conversions"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_delete_contained_custom_conversionsTool)

	// facebook_businessassetgroup_get_contained_custom_conversions tool
	facebook_businessassetgroup_get_contained_custom_conversionsTool := mcp.NewTool("facebook_businessassetgroup_get_contained_custom_conversions",
		mcp.WithDescription("GET contained_custom_conversions for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_get_contained_custom_conversionsTool)

	// facebook_businessassetgroup_post_contained_custom_conversions tool
	facebook_businessassetgroup_post_contained_custom_conversionsTool := mcp.NewTool("facebook_businessassetgroup_post_contained_custom_conversions",
		mcp.WithDescription("POST contained_custom_conversions for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("asset_id",
			mcp.Required(),
			mcp.Description("asset_id parameter for contained_custom_conversions"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_post_contained_custom_conversionsTool)

	// facebook_businessassetgroup_delete_contained_instagram_accounts tool
	facebook_businessassetgroup_delete_contained_instagram_accountsTool := mcp.NewTool("facebook_businessassetgroup_delete_contained_instagram_accounts",
		mcp.WithDescription("DELETE contained_instagram_accounts for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("asset_id",
			mcp.Required(),
			mcp.Description("asset_id parameter for contained_instagram_accounts"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_delete_contained_instagram_accountsTool)

	// facebook_businessassetgroup_get_contained_instagram_accounts tool
	facebook_businessassetgroup_get_contained_instagram_accountsTool := mcp.NewTool("facebook_businessassetgroup_get_contained_instagram_accounts",
		mcp.WithDescription("GET contained_instagram_accounts for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_get_contained_instagram_accountsTool)

	// facebook_businessassetgroup_post_contained_instagram_accounts tool
	facebook_businessassetgroup_post_contained_instagram_accountsTool := mcp.NewTool("facebook_businessassetgroup_post_contained_instagram_accounts",
		mcp.WithDescription("POST contained_instagram_accounts for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("asset_id",
			mcp.Required(),
			mcp.Description("asset_id parameter for contained_instagram_accounts"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_post_contained_instagram_accountsTool)

	// facebook_businessassetgroup_delete_contained_pages tool
	facebook_businessassetgroup_delete_contained_pagesTool := mcp.NewTool("facebook_businessassetgroup_delete_contained_pages",
		mcp.WithDescription("DELETE contained_pages for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("asset_id",
			mcp.Required(),
			mcp.Description("asset_id parameter for contained_pages"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_delete_contained_pagesTool)

	// facebook_businessassetgroup_get_contained_pages tool
	facebook_businessassetgroup_get_contained_pagesTool := mcp.NewTool("facebook_businessassetgroup_get_contained_pages",
		mcp.WithDescription("GET contained_pages for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_get_contained_pagesTool)

	// facebook_businessassetgroup_post_contained_pages tool
	facebook_businessassetgroup_post_contained_pagesTool := mcp.NewTool("facebook_businessassetgroup_post_contained_pages",
		mcp.WithDescription("POST contained_pages for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("asset_id",
			mcp.Required(),
			mcp.Description("asset_id parameter for contained_pages"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_post_contained_pagesTool)

	// facebook_businessassetgroup_delete_contained_pixels tool
	facebook_businessassetgroup_delete_contained_pixelsTool := mcp.NewTool("facebook_businessassetgroup_delete_contained_pixels",
		mcp.WithDescription("DELETE contained_pixels for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("asset_id",
			mcp.Required(),
			mcp.Description("asset_id parameter for contained_pixels"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_delete_contained_pixelsTool)

	// facebook_businessassetgroup_get_contained_pixels tool
	facebook_businessassetgroup_get_contained_pixelsTool := mcp.NewTool("facebook_businessassetgroup_get_contained_pixels",
		mcp.WithDescription("GET contained_pixels for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_get_contained_pixelsTool)

	// facebook_businessassetgroup_post_contained_pixels tool
	facebook_businessassetgroup_post_contained_pixelsTool := mcp.NewTool("facebook_businessassetgroup_post_contained_pixels",
		mcp.WithDescription("POST contained_pixels for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("asset_id",
			mcp.Required(),
			mcp.Description("asset_id parameter for contained_pixels"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_post_contained_pixelsTool)

	// facebook_businessassetgroup_delete_contained_product_catalogs tool
	facebook_businessassetgroup_delete_contained_product_catalogsTool := mcp.NewTool("facebook_businessassetgroup_delete_contained_product_catalogs",
		mcp.WithDescription("DELETE contained_product_catalogs for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("asset_id",
			mcp.Required(),
			mcp.Description("asset_id parameter for contained_product_catalogs"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_delete_contained_product_catalogsTool)

	// facebook_businessassetgroup_get_contained_product_catalogs tool
	facebook_businessassetgroup_get_contained_product_catalogsTool := mcp.NewTool("facebook_businessassetgroup_get_contained_product_catalogs",
		mcp.WithDescription("GET contained_product_catalogs for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_get_contained_product_catalogsTool)

	// facebook_businessassetgroup_post_contained_product_catalogs tool
	facebook_businessassetgroup_post_contained_product_catalogsTool := mcp.NewTool("facebook_businessassetgroup_post_contained_product_catalogs",
		mcp.WithDescription("POST contained_product_catalogs for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("asset_id",
			mcp.Required(),
			mcp.Description("asset_id parameter for contained_product_catalogs"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_post_contained_product_catalogsTool)

	// facebook_businessassetgroup_get_ tool
	facebook_businessassetgroup_get_Tool := mcp.NewTool("facebook_businessassetgroup_get_",
		mcp.WithDescription("GET  for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_businessassetgroup_get_Tool)

	// facebook_businessassetgroup_post_ tool
	facebook_businessassetgroup_post_Tool := mcp.NewTool("facebook_businessassetgroup_post_",
		mcp.WithDescription("POST  for BusinessAssetGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("name",
			mcp.Description("name parameter for "),
		),
	)
	tools = append(tools, facebook_businessassetgroup_post_Tool)

	return tools
}

// BusinessAssetGroup handlers

// HandleFacebook_businessassetgroup_delete_assigned_users handles the facebook_businessassetgroup_delete_assigned_users tool
func HandleFacebook_businessassetgroup_delete_assigned_users(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: user
	user, err := request.RequireInt("user")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter user: %v", err)), nil
	}
	args["user"] = user

	// Call the client method
	result, err := client.Facebook_businessassetgroup_delete_assigned_users(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_delete_assigned_users: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_get_assigned_users handles the facebook_businessassetgroup_get_assigned_users tool
func HandleFacebook_businessassetgroup_get_assigned_users(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: business
	business, err := request.RequireString("business")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter business: %v", err)), nil
	}
	args["business"] = business

	// Call the client method
	result, err := client.Facebook_businessassetgroup_get_assigned_users(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_get_assigned_users: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_post_assigned_users handles the facebook_businessassetgroup_post_assigned_users tool
func HandleFacebook_businessassetgroup_post_assigned_users(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: adaccount_tasks
	// array type - using string
	if val := request.GetString("adaccount_tasks", ""); val != "" {
		args["adaccount_tasks"] = val
	}

	// Optional: offline_conversion_data_set_tasks
	// array type - using string
	if val := request.GetString("offline_conversion_data_set_tasks", ""); val != "" {
		args["offline_conversion_data_set_tasks"] = val
	}

	// Optional: page_tasks
	// array type - using string
	if val := request.GetString("page_tasks", ""); val != "" {
		args["page_tasks"] = val
	}

	// Optional: pixel_tasks
	// array type - using string
	if val := request.GetString("pixel_tasks", ""); val != "" {
		args["pixel_tasks"] = val
	}

	// Required: user
	user, err := request.RequireInt("user")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter user: %v", err)), nil
	}
	args["user"] = user

	// Call the client method
	result, err := client.Facebook_businessassetgroup_post_assigned_users(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_post_assigned_users: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_delete_contained_adaccounts handles the facebook_businessassetgroup_delete_contained_adaccounts tool
func HandleFacebook_businessassetgroup_delete_contained_adaccounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: asset_id
	asset_id, err := request.RequireString("asset_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter asset_id: %v", err)), nil
	}
	args["asset_id"] = asset_id

	// Call the client method
	result, err := client.Facebook_businessassetgroup_delete_contained_adaccounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_delete_contained_adaccounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_get_contained_adaccounts handles the facebook_businessassetgroup_get_contained_adaccounts tool
func HandleFacebook_businessassetgroup_get_contained_adaccounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_businessassetgroup_get_contained_adaccounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_get_contained_adaccounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_post_contained_adaccounts handles the facebook_businessassetgroup_post_contained_adaccounts tool
func HandleFacebook_businessassetgroup_post_contained_adaccounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: asset_id
	asset_id, err := request.RequireString("asset_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter asset_id: %v", err)), nil
	}
	args["asset_id"] = asset_id

	// Call the client method
	result, err := client.Facebook_businessassetgroup_post_contained_adaccounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_post_contained_adaccounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_delete_contained_applications handles the facebook_businessassetgroup_delete_contained_applications tool
func HandleFacebook_businessassetgroup_delete_contained_applications(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: asset_id
	asset_id, err := request.RequireString("asset_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter asset_id: %v", err)), nil
	}
	args["asset_id"] = asset_id

	// Call the client method
	result, err := client.Facebook_businessassetgroup_delete_contained_applications(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_delete_contained_applications: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_get_contained_applications handles the facebook_businessassetgroup_get_contained_applications tool
func HandleFacebook_businessassetgroup_get_contained_applications(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_businessassetgroup_get_contained_applications(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_get_contained_applications: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_post_contained_applications handles the facebook_businessassetgroup_post_contained_applications tool
func HandleFacebook_businessassetgroup_post_contained_applications(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: asset_id
	asset_id, err := request.RequireString("asset_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter asset_id: %v", err)), nil
	}
	args["asset_id"] = asset_id

	// Call the client method
	result, err := client.Facebook_businessassetgroup_post_contained_applications(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_post_contained_applications: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_delete_contained_custom_conversions handles the facebook_businessassetgroup_delete_contained_custom_conversions tool
func HandleFacebook_businessassetgroup_delete_contained_custom_conversions(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: asset_id
	asset_id, err := request.RequireString("asset_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter asset_id: %v", err)), nil
	}
	args["asset_id"] = asset_id

	// Call the client method
	result, err := client.Facebook_businessassetgroup_delete_contained_custom_conversions(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_delete_contained_custom_conversions: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_get_contained_custom_conversions handles the facebook_businessassetgroup_get_contained_custom_conversions tool
func HandleFacebook_businessassetgroup_get_contained_custom_conversions(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_businessassetgroup_get_contained_custom_conversions(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_get_contained_custom_conversions: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_post_contained_custom_conversions handles the facebook_businessassetgroup_post_contained_custom_conversions tool
func HandleFacebook_businessassetgroup_post_contained_custom_conversions(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: asset_id
	asset_id, err := request.RequireString("asset_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter asset_id: %v", err)), nil
	}
	args["asset_id"] = asset_id

	// Call the client method
	result, err := client.Facebook_businessassetgroup_post_contained_custom_conversions(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_post_contained_custom_conversions: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_delete_contained_instagram_accounts handles the facebook_businessassetgroup_delete_contained_instagram_accounts tool
func HandleFacebook_businessassetgroup_delete_contained_instagram_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: asset_id
	asset_id, err := request.RequireString("asset_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter asset_id: %v", err)), nil
	}
	args["asset_id"] = asset_id

	// Call the client method
	result, err := client.Facebook_businessassetgroup_delete_contained_instagram_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_delete_contained_instagram_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_get_contained_instagram_accounts handles the facebook_businessassetgroup_get_contained_instagram_accounts tool
func HandleFacebook_businessassetgroup_get_contained_instagram_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_businessassetgroup_get_contained_instagram_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_get_contained_instagram_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_post_contained_instagram_accounts handles the facebook_businessassetgroup_post_contained_instagram_accounts tool
func HandleFacebook_businessassetgroup_post_contained_instagram_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: asset_id
	asset_id, err := request.RequireString("asset_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter asset_id: %v", err)), nil
	}
	args["asset_id"] = asset_id

	// Call the client method
	result, err := client.Facebook_businessassetgroup_post_contained_instagram_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_post_contained_instagram_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_delete_contained_pages handles the facebook_businessassetgroup_delete_contained_pages tool
func HandleFacebook_businessassetgroup_delete_contained_pages(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: asset_id
	asset_id, err := request.RequireString("asset_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter asset_id: %v", err)), nil
	}
	args["asset_id"] = asset_id

	// Call the client method
	result, err := client.Facebook_businessassetgroup_delete_contained_pages(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_delete_contained_pages: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_get_contained_pages handles the facebook_businessassetgroup_get_contained_pages tool
func HandleFacebook_businessassetgroup_get_contained_pages(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_businessassetgroup_get_contained_pages(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_get_contained_pages: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_post_contained_pages handles the facebook_businessassetgroup_post_contained_pages tool
func HandleFacebook_businessassetgroup_post_contained_pages(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: asset_id
	asset_id, err := request.RequireString("asset_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter asset_id: %v", err)), nil
	}
	args["asset_id"] = asset_id

	// Call the client method
	result, err := client.Facebook_businessassetgroup_post_contained_pages(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_post_contained_pages: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_delete_contained_pixels handles the facebook_businessassetgroup_delete_contained_pixels tool
func HandleFacebook_businessassetgroup_delete_contained_pixels(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: asset_id
	asset_id, err := request.RequireString("asset_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter asset_id: %v", err)), nil
	}
	args["asset_id"] = asset_id

	// Call the client method
	result, err := client.Facebook_businessassetgroup_delete_contained_pixels(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_delete_contained_pixels: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_get_contained_pixels handles the facebook_businessassetgroup_get_contained_pixels tool
func HandleFacebook_businessassetgroup_get_contained_pixels(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_businessassetgroup_get_contained_pixels(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_get_contained_pixels: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_post_contained_pixels handles the facebook_businessassetgroup_post_contained_pixels tool
func HandleFacebook_businessassetgroup_post_contained_pixels(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: asset_id
	asset_id, err := request.RequireString("asset_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter asset_id: %v", err)), nil
	}
	args["asset_id"] = asset_id

	// Call the client method
	result, err := client.Facebook_businessassetgroup_post_contained_pixels(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_post_contained_pixels: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_delete_contained_product_catalogs handles the facebook_businessassetgroup_delete_contained_product_catalogs tool
func HandleFacebook_businessassetgroup_delete_contained_product_catalogs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: asset_id
	asset_id, err := request.RequireString("asset_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter asset_id: %v", err)), nil
	}
	args["asset_id"] = asset_id

	// Call the client method
	result, err := client.Facebook_businessassetgroup_delete_contained_product_catalogs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_delete_contained_product_catalogs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_get_contained_product_catalogs handles the facebook_businessassetgroup_get_contained_product_catalogs tool
func HandleFacebook_businessassetgroup_get_contained_product_catalogs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_businessassetgroup_get_contained_product_catalogs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_get_contained_product_catalogs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_post_contained_product_catalogs handles the facebook_businessassetgroup_post_contained_product_catalogs tool
func HandleFacebook_businessassetgroup_post_contained_product_catalogs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: asset_id
	asset_id, err := request.RequireString("asset_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter asset_id: %v", err)), nil
	}
	args["asset_id"] = asset_id

	// Call the client method
	result, err := client.Facebook_businessassetgroup_post_contained_product_catalogs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_post_contained_product_catalogs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_get_ handles the facebook_businessassetgroup_get_ tool
func HandleFacebook_businessassetgroup_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_businessassetgroup_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_businessassetgroup_post_ handles the facebook_businessassetgroup_post_ tool
func HandleFacebook_businessassetgroup_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessAssetGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: name
	if val := request.GetString("name", ""); val != "" {
		args["name"] = val
	}

	// Call the client method
	result, err := client.Facebook_businessassetgroup_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_businessassetgroup_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
