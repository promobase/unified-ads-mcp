// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetGroupTools returns MCP tools for Group
func GetGroupTools() []mcp.Tool {
	var tools []mcp.Tool


	// group_delete_admins tool
	// Params object accepts: uid (int)
	group_delete_adminsTool := mcp.NewTool("group_delete_admins",
		mcp.WithDescription("DELETE admins for Group"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"uid": map[string]any{
					"type": "integer",
					"description": "uid parameter",
					"required": true,
				},
			}),
			mcp.Description("Parameters object containing: uid (integer) [required]"),
		),
	)
	tools = append(tools, group_delete_adminsTool)

	// group_post_admins tool
	// Params object accepts: uid (int)
	group_post_adminsTool := mcp.NewTool("group_post_admins",
		mcp.WithDescription("POST admins for Group"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"uid": map[string]any{
					"type": "integer",
					"description": "uid parameter",
					"required": true,
				},
			}),
			mcp.Description("Parameters object containing: uid (integer) [required]"),
		),
	)
	tools = append(tools, group_post_adminsTool)

	// group_get_albums tool
	// Available fields for Album: backdated_time, backdated_time_granularity, can_backdate, can_upload, count, cover_photo, created_time, description, edit_link, event, from, id, is_user_facing, link, location, modified_major, name, photo_count, place, privacy, type, updated_time, video_count
	group_get_albumsTool := mcp.NewTool("group_get_albums",
		mcp.WithDescription("GET albums for Group"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for Album objects. Available fields: backdated_time, backdated_time_granularity, can_backdate, can_upload, count, cover_photo, created_time, description, edit_link, event, from, id, is_user_facing, link, location (and 8 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, group_get_albumsTool)

	// group_get_docs tool
	group_get_docsTool := mcp.NewTool("group_get_docs",
		mcp.WithDescription("GET docs for Group"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, group_get_docsTool)

	// group_get_events tool
	// Available fields for Event: attending_count, can_guests_invite, category, cover, created_time, declined_count, description, discount_code_enabled, end_time, event_times, guest_list_enabled, id, interested_count, is_canceled, is_draft, is_online, is_page_owned, maybe_count, name, noreply_count, online_event_format, online_event_third_party_url, owner, parent_group, place, registration_setting, scheduled_publish_time, start_time, sub_categories, ticket_selling_status, ticket_setting, ticket_uri, ticket_uri_start_sales_time, ticketing_privacy_uri, ticketing_terms_uri, timezone, type, updated_time
	group_get_eventsTool := mcp.NewTool("group_get_events",
		mcp.WithDescription("GET events for Group"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for Event objects. Available fields: attending_count, can_guests_invite, category, cover, created_time, declined_count, description, discount_code_enabled, end_time, event_times, guest_list_enabled, id, interested_count, is_canceled, is_draft (and 23 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, group_get_eventsTool)

	// group_get_feed tool
	// Available fields for Post: actions, admin_creator, allowed_advertising_objectives, application, backdated_time, call_to_action, can_reply_privately, caption, child_attachments, comments_mirroring_domain, coordinates, created_time, description, event, expanded_height, expanded_width, feed_targeting, from, full_picture, height, icon, id, instagram_eligibility, is_app_share, is_eligible_for_promotion, is_expired, is_hidden, is_inline_created, is_instagram_eligible, is_popular, is_published, is_spherical, link, message, message_tags, multi_share_end_card, multi_share_optimized, name, object_id, parent_id, permalink_url, picture, place, privacy, promotable_id, promotion_status, properties, scheduled_publish_time, shares, source, status_type, story, story_tags, subscribed, target, targeting, timeline_visibility, type, updated_time, via, video_buying_eligibility, width
	// Params object accepts: include_hidden (bool), q (string), show_expired (bool), since (datetime), until (datetime), with (string)
	group_get_feedTool := mcp.NewTool("group_get_feed",
		mcp.WithDescription("GET feed for Group"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"include_hidden": map[string]any{
					"type": "boolean",
					"description": "include_hidden parameter",
				},
				"q": map[string]any{
					"type": "string",
					"description": "q parameter",
				},
				"show_expired": map[string]any{
					"type": "boolean",
					"description": "show_expired parameter",
				},
				"since": map[string]any{
					"type": "string",
					"description": "since parameter",
				},
				"until": map[string]any{
					"type": "string",
					"description": "until parameter",
				},
				"with": map[string]any{
					"type": "string",
					"description": "with parameter",
				},
			}),
			mcp.Description("Parameters object containing: include_hidden (boolean), q (string), show_expired (boolean), since (datetime), until (datetime), with (string)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for Post objects. Available fields: actions, admin_creator, allowed_advertising_objectives, application, backdated_time, call_to_action, can_reply_privately, caption, child_attachments, comments_mirroring_domain, coordinates, created_time, description, event, expanded_height (and 47 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, group_get_feedTool)

	// group_post_feed tool
	// Params object accepts: actions (Object), album_id (string), android_key_hash (string), application_id (string), asked_fun_fact_prompt_id (unsigned int), asset3d_id (string), associated_id (string), attach_place_suggestion (bool), attached_media (list<Object>), audience_exp (bool), backdated_time (datetime), backdated_time_granularity (groupfeed_backdated_time_granularity_enum_param), breaking_news (bool), breaking_news_expiration (unsigned int), call_to_action (Object), caption (string), child_attachments (list<Object>), client_mutation_id (string), composer_entry_picker (string), composer_entry_point (string), composer_entry_time (unsigned int), composer_session_events_log (string), composer_session_id (string), composer_source_surface (string), composer_type (string), connection_class (string), content_attachment (string), coordinates (Object), cta_link (string), cta_type (string), description (string), direct_share_status (unsigned int), expanded_height (unsigned int), expanded_width (unsigned int), feed_targeting (Object), formatting (groupfeed_formatting_enum_param), fun_fact_prompt_id (string), fun_fact_toastee_id (unsigned int), height (unsigned int), home_checkin_city_id (Object), image_crops (map), implicit_with_tags (list<int>), instant_game_entry_point_data (string), ios_bundle_id (string), is_backout_draft (bool), is_boost_intended (bool), is_explicit_location (bool), is_explicit_share (bool), is_group_linking_post (bool), is_photo_container (bool), link (string), location_source_id (string), manual_privacy (bool), message (string), multi_share_end_card (bool), multi_share_optimized (bool), name (string), nectar_module (string), object_attachment (string), og_action_type_id (string), og_hide_object_attachment (bool), og_icon_id (string), og_object_id (string), og_phrase (string), og_set_profile_badge (bool), og_suggestion_mechanism (string), page_recommendation (string), picture (string), place (Object), place_attachment_setting (groupfeed_place_attachment_setting_enum_param), place_list (string), place_list_data (list), post_surfaces_blacklist (list<groupfeed_post_surfaces_blacklist_enum_param>), posting_to_redspace (groupfeed_posting_to_redspace_enum_param), privacy (string), prompt_id (string), prompt_tracking_string (string), properties (Object), proxied_app_id (string), publish_event_id (unsigned int), published (bool), quote (string), ref (list<string>), referenceable_image_ids (list<string>), referral_id (string), scheduled_publish_time (datetime), source (string), sponsor_id (string), sponsor_relationship (unsigned int), suggested_place_id (Object), tags (list<int>), target_surface (groupfeed_target_surface_enum_param), targeting (Object), text_format_metadata (string), text_format_preset_id (string), text_only_place (string), thumbnail (file), time_since_original_post (unsigned int), title (string), tracking_info (string), unpublished_content_type (groupfeed_unpublished_content_type_enum_param), user_selected_tags (bool), video_start_time_ms (unsigned int), viewer_coordinates (Object), width (unsigned int)
	group_post_feedTool := mcp.NewTool("group_post_feed",
		mcp.WithDescription("POST feed for Group"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"actions": map[string]any{
					"type": "object",
					"description": "actions parameter",
				},
				"album_id": map[string]any{
					"type": "string",
					"description": "album_id parameter",
				},
				"android_key_hash": map[string]any{
					"type": "string",
					"description": "android_key_hash parameter",
				},
				"application_id": map[string]any{
					"type": "string",
					"description": "application_id parameter",
				},
				"asked_fun_fact_prompt_id": map[string]any{
					"type": "integer",
					"description": "asked_fun_fact_prompt_id parameter",
				},
				"asset3d_id": map[string]any{
					"type": "string",
					"description": "asset3d_id parameter",
				},
				"associated_id": map[string]any{
					"type": "string",
					"description": "associated_id parameter",
				},
				"attach_place_suggestion": map[string]any{
					"type": "boolean",
					"description": "attach_place_suggestion parameter",
				},
				"attached_media": map[string]any{
					"type": "array",
					"description": "attached_media parameter",
					"items": map[string]any{"type": "object"},
				},
				"audience_exp": map[string]any{
					"type": "boolean",
					"description": "audience_exp parameter",
				},
				"backdated_time": map[string]any{
					"type": "string",
					"description": "backdated_time parameter",
				},
				"backdated_time_granularity": map[string]any{
					"type": "string",
					"description": "backdated_time_granularity parameter",
					"enum": []string{ "day", "hour", "min", "month", "none", "year" },
				},
				"breaking_news": map[string]any{
					"type": "boolean",
					"description": "breaking_news parameter",
				},
				"breaking_news_expiration": map[string]any{
					"type": "integer",
					"description": "breaking_news_expiration parameter",
				},
				"call_to_action": map[string]any{
					"type": "object",
					"description": "call_to_action parameter",
				},
				"caption": map[string]any{
					"type": "string",
					"description": "caption parameter",
				},
				"child_attachments": map[string]any{
					"type": "array",
					"description": "child_attachments parameter",
					"items": map[string]any{"type": "object"},
				},
				"client_mutation_id": map[string]any{
					"type": "string",
					"description": "client_mutation_id parameter",
				},
				"composer_entry_picker": map[string]any{
					"type": "string",
					"description": "composer_entry_picker parameter",
				},
				"composer_entry_point": map[string]any{
					"type": "string",
					"description": "composer_entry_point parameter",
				},
				"composer_entry_time": map[string]any{
					"type": "integer",
					"description": "composer_entry_time parameter",
				},
				"composer_session_events_log": map[string]any{
					"type": "string",
					"description": "composer_session_events_log parameter",
				},
				"composer_session_id": map[string]any{
					"type": "string",
					"description": "composer_session_id parameter",
				},
				"composer_source_surface": map[string]any{
					"type": "string",
					"description": "composer_source_surface parameter",
				},
				"composer_type": map[string]any{
					"type": "string",
					"description": "composer_type parameter",
				},
				"connection_class": map[string]any{
					"type": "string",
					"description": "connection_class parameter",
				},
				"content_attachment": map[string]any{
					"type": "string",
					"description": "content_attachment parameter",
				},
				"coordinates": map[string]any{
					"type": "object",
					"description": "coordinates parameter",
				},
				"cta_link": map[string]any{
					"type": "string",
					"description": "cta_link parameter",
				},
				"cta_type": map[string]any{
					"type": "string",
					"description": "cta_type parameter",
				},
				"description": map[string]any{
					"type": "string",
					"description": "description parameter",
				},
				"direct_share_status": map[string]any{
					"type": "integer",
					"description": "direct_share_status parameter",
				},
				"expanded_height": map[string]any{
					"type": "integer",
					"description": "expanded_height parameter",
				},
				"expanded_width": map[string]any{
					"type": "integer",
					"description": "expanded_width parameter",
				},
				"feed_targeting": map[string]any{
					"type": "object",
					"description": "feed_targeting parameter",
				},
				"formatting": map[string]any{
					"type": "string",
					"description": "formatting parameter",
					"enum": []string{ "MARKDOWN", "PLAINTEXT" },
				},
				"fun_fact_prompt_id": map[string]any{
					"type": "string",
					"description": "fun_fact_prompt_id parameter",
				},
				"fun_fact_toastee_id": map[string]any{
					"type": "integer",
					"description": "fun_fact_toastee_id parameter",
				},
				"height": map[string]any{
					"type": "integer",
					"description": "height parameter",
				},
				"home_checkin_city_id": map[string]any{
					"type": "object",
					"description": "home_checkin_city_id parameter",
				},
				"image_crops": map[string]any{
					"type": "object",
					"description": "image_crops parameter",
				},
				"implicit_with_tags": map[string]any{
					"type": "array",
					"description": "implicit_with_tags parameter",
					"items": map[string]any{"type": "integer"},
				},
				"instant_game_entry_point_data": map[string]any{
					"type": "string",
					"description": "instant_game_entry_point_data parameter",
				},
				"ios_bundle_id": map[string]any{
					"type": "string",
					"description": "ios_bundle_id parameter",
				},
				"is_backout_draft": map[string]any{
					"type": "boolean",
					"description": "is_backout_draft parameter",
				},
				"is_boost_intended": map[string]any{
					"type": "boolean",
					"description": "is_boost_intended parameter",
				},
				"is_explicit_location": map[string]any{
					"type": "boolean",
					"description": "is_explicit_location parameter",
				},
				"is_explicit_share": map[string]any{
					"type": "boolean",
					"description": "is_explicit_share parameter",
				},
				"is_group_linking_post": map[string]any{
					"type": "boolean",
					"description": "is_group_linking_post parameter",
				},
				"is_photo_container": map[string]any{
					"type": "boolean",
					"description": "is_photo_container parameter",
				},
				"link": map[string]any{
					"type": "string",
					"description": "link parameter",
				},
				"location_source_id": map[string]any{
					"type": "string",
					"description": "location_source_id parameter",
				},
				"manual_privacy": map[string]any{
					"type": "boolean",
					"description": "manual_privacy parameter",
				},
				"message": map[string]any{
					"type": "string",
					"description": "message parameter",
				},
				"multi_share_end_card": map[string]any{
					"type": "boolean",
					"description": "multi_share_end_card parameter",
				},
				"multi_share_optimized": map[string]any{
					"type": "boolean",
					"description": "multi_share_optimized parameter",
				},
				"name": map[string]any{
					"type": "string",
					"description": "name parameter",
				},
				"nectar_module": map[string]any{
					"type": "string",
					"description": "nectar_module parameter",
				},
				"object_attachment": map[string]any{
					"type": "string",
					"description": "object_attachment parameter",
				},
				"og_action_type_id": map[string]any{
					"type": "string",
					"description": "og_action_type_id parameter",
				},
				"og_hide_object_attachment": map[string]any{
					"type": "boolean",
					"description": "og_hide_object_attachment parameter",
				},
				"og_icon_id": map[string]any{
					"type": "string",
					"description": "og_icon_id parameter",
				},
				"og_object_id": map[string]any{
					"type": "string",
					"description": "og_object_id parameter",
				},
				"og_phrase": map[string]any{
					"type": "string",
					"description": "og_phrase parameter",
				},
				"og_set_profile_badge": map[string]any{
					"type": "boolean",
					"description": "og_set_profile_badge parameter",
				},
				"og_suggestion_mechanism": map[string]any{
					"type": "string",
					"description": "og_suggestion_mechanism parameter",
				},
				"page_recommendation": map[string]any{
					"type": "string",
					"description": "page_recommendation parameter",
				},
				"picture": map[string]any{
					"type": "string",
					"description": "picture parameter",
				},
				"place": map[string]any{
					"type": "object",
					"description": "place parameter",
				},
				"place_attachment_setting": map[string]any{
					"type": "string",
					"description": "place_attachment_setting parameter",
					"enum": []string{ "1", "2" },
				},
				"place_list": map[string]any{
					"type": "string",
					"description": "place_list parameter",
				},
				"place_list_data": map[string]any{
					"type": "string",
					"description": "place_list_data parameter",
				},
				"post_surfaces_blacklist": map[string]any{
					"type": "array",
					"description": "post_surfaces_blacklist parameter",
					"enum": []string{ "1", "2", "3", "4", "5" },
					"items": map[string]any{"type": "string"},
				},
				"posting_to_redspace": map[string]any{
					"type": "string",
					"description": "posting_to_redspace parameter",
					"enum": []string{ "disabled", "enabled" },
				},
				"privacy": map[string]any{
					"type": "string",
					"description": "privacy parameter",
				},
				"prompt_id": map[string]any{
					"type": "string",
					"description": "prompt_id parameter",
				},
				"prompt_tracking_string": map[string]any{
					"type": "string",
					"description": "prompt_tracking_string parameter",
				},
				"properties": map[string]any{
					"type": "object",
					"description": "properties parameter",
				},
				"proxied_app_id": map[string]any{
					"type": "string",
					"description": "proxied_app_id parameter",
				},
				"publish_event_id": map[string]any{
					"type": "integer",
					"description": "publish_event_id parameter",
				},
				"published": map[string]any{
					"type": "boolean",
					"description": "published parameter",
				},
				"quote": map[string]any{
					"type": "string",
					"description": "quote parameter",
				},
				"ref": map[string]any{
					"type": "array",
					"description": "ref parameter",
					"items": map[string]any{"type": "string"},
				},
				"referenceable_image_ids": map[string]any{
					"type": "array",
					"description": "referenceable_image_ids parameter",
					"items": map[string]any{"type": "string"},
				},
				"referral_id": map[string]any{
					"type": "string",
					"description": "referral_id parameter",
				},
				"scheduled_publish_time": map[string]any{
					"type": "string",
					"description": "scheduled_publish_time parameter",
				},
				"source": map[string]any{
					"type": "string",
					"description": "source parameter",
				},
				"sponsor_id": map[string]any{
					"type": "string",
					"description": "sponsor_id parameter",
				},
				"sponsor_relationship": map[string]any{
					"type": "integer",
					"description": "sponsor_relationship parameter",
				},
				"suggested_place_id": map[string]any{
					"type": "object",
					"description": "suggested_place_id parameter",
				},
				"tags": map[string]any{
					"type": "array",
					"description": "tags parameter",
					"items": map[string]any{"type": "integer"},
				},
				"target_surface": map[string]any{
					"type": "string",
					"description": "target_surface parameter",
					"enum": []string{ "STORY", "TIMELINE" },
				},
				"targeting": map[string]any{
					"type": "object",
					"description": "targeting parameter",
				},
				"text_format_metadata": map[string]any{
					"type": "string",
					"description": "text_format_metadata parameter",
				},
				"text_format_preset_id": map[string]any{
					"type": "string",
					"description": "text_format_preset_id parameter",
				},
				"text_only_place": map[string]any{
					"type": "string",
					"description": "text_only_place parameter",
				},
				"thumbnail": map[string]any{
					"type": "string",
					"description": "thumbnail parameter",
				},
				"time_since_original_post": map[string]any{
					"type": "integer",
					"description": "time_since_original_post parameter",
				},
				"title": map[string]any{
					"type": "string",
					"description": "title parameter",
				},
				"tracking_info": map[string]any{
					"type": "string",
					"description": "tracking_info parameter",
				},
				"unpublished_content_type": map[string]any{
					"type": "string",
					"description": "unpublished_content_type parameter",
					"enum": []string{ "ADS_POST", "DRAFT", "INLINE_CREATED", "PUBLISHED", "REVIEWABLE_BRANDED_CONTENT", "SCHEDULED", "SCHEDULED_RECURRING" },
				},
				"user_selected_tags": map[string]any{
					"type": "boolean",
					"description": "user_selected_tags parameter",
				},
				"video_start_time_ms": map[string]any{
					"type": "integer",
					"description": "video_start_time_ms parameter",
				},
				"viewer_coordinates": map[string]any{
					"type": "object",
					"description": "viewer_coordinates parameter",
				},
				"width": map[string]any{
					"type": "integer",
					"description": "width parameter",
				},
			}),
			mcp.Description("Parameters object containing: actions (object), album_id (string), android_key_hash (string), application_id (string), asked_fun_fact_prompt_id (integer), asset3d_id (string), associated_id (string), attach_place_suggestion (boolean), attached_media (array<object>), audience_exp (boolean), backdated_time (datetime), backdated_time_granularity (enum) [day, hour, min, month, none, ...], breaking_news (boolean), breaking_news_expiration (integer), call_to_action (object), caption (string), child_attachments (array<object>), client_mutation_id (string), composer_entry_picker (string), composer_entry_point (string), composer_entry_time (integer), composer_session_events_log (string), composer_session_id (string), composer_source_surface (string), composer_type (string), connection_class (string), content_attachment (string), coordinates (object), cta_link (string), cta_type (string), description (string), direct_share_status (integer), expanded_height (integer), expanded_width (integer), feed_targeting (object), formatting (enum) [MARKDOWN, PLAINTEXT], fun_fact_prompt_id (string), fun_fact_toastee_id (integer), height (integer), home_checkin_city_id (object), image_crops (object), implicit_with_tags (array<integer>), instant_game_entry_point_data (string), ios_bundle_id (string), is_backout_draft (boolean), is_boost_intended (boolean), is_explicit_location (boolean), is_explicit_share (boolean), is_group_linking_post (boolean), is_photo_container (boolean), link (string), location_source_id (string), manual_privacy (boolean), message (string), multi_share_end_card (boolean), multi_share_optimized (boolean), name (string), nectar_module (string), object_attachment (string), og_action_type_id (string), og_hide_object_attachment (boolean), og_icon_id (string), og_object_id (string), og_phrase (string), og_set_profile_badge (boolean), og_suggestion_mechanism (string), page_recommendation (string), picture (string), place (object), place_attachment_setting (enum) [1, 2], place_list (string), place_list_data (list), post_surfaces_blacklist (array<enum>) [1, 2, 3, 4, 5], posting_to_redspace (enum) [disabled, enabled], privacy (string), prompt_id (string), prompt_tracking_string (string), properties (object), proxied_app_id (string), publish_event_id (integer), published (boolean), quote (string), ref (array<string>), referenceable_image_ids (array<string>), referral_id (string), scheduled_publish_time (datetime), source (string), sponsor_id (string), sponsor_relationship (integer), suggested_place_id (object), tags (array<integer>), target_surface (enum) [STORY, TIMELINE], targeting (object), text_format_metadata (string), text_format_preset_id (string), text_only_place (string), thumbnail (file), time_since_original_post (integer), title (string), tracking_info (string), unpublished_content_type (enum) [ADS_POST, DRAFT, INLINE_CREATED, PUBLISHED, REVIEWABLE_BRANDED_CONTENT, ...], user_selected_tags (boolean), video_start_time_ms (integer), viewer_coordinates (object), width (integer)"),
		),
	)
	tools = append(tools, group_post_feedTool)

	// group_get_files tool
	group_get_filesTool := mcp.NewTool("group_get_files",
		mcp.WithDescription("GET files for Group"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, group_get_filesTool)

	// group_get_groups tool
	// Available fields for Group: archived, cover, created_time, description, email, icon, id, install, link, member_count, member_request_count, name, parent, permissions, privacy, purpose, subdomain, updated_time, venue
	group_get_groupsTool := mcp.NewTool("group_get_groups",
		mcp.WithDescription("GET groups for Group"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for Group objects. Available fields: archived, cover, created_time, description, email, icon, id, install, link, member_count, member_request_count, name, parent, permissions, privacy (and 4 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, group_get_groupsTool)

	// group_post_groups tool
	// Params object accepts: admin (int), description (string), group_icon_id (string), group_type (groupgroups_group_type_enum_param), join_setting (groupgroups_join_setting_enum_param), name (string), parent_id (string), post_permissions (groupgroups_post_permissions_enum_param), post_requires_admin_approval (bool), privacy (string), ref (string)
	group_post_groupsTool := mcp.NewTool("group_post_groups",
		mcp.WithDescription("POST groups for Group"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"admin": map[string]any{
					"type": "integer",
					"description": "admin parameter",
				},
				"description": map[string]any{
					"type": "string",
					"description": "description parameter",
				},
				"group_icon_id": map[string]any{
					"type": "string",
					"description": "group_icon_id parameter",
				},
				"group_type": map[string]any{
					"type": "string",
					"description": "group_type parameter",
					"enum": []string{ "CASUAL", "COWORKERS", "CUSTOM", "FOR_SALE", "FOR_WORK", "GAME", "HEALTH_SUPPORT", "JOBS", "LEARNING", "NONE", "PARENTING", "STREAMER", "WORK_ANNOUNCEMENT", "WORK_DEMO_GROUP", "WORK_DISCUSSION", "WORK_EPHEMERAL", "WORK_FEEDBACK", "WORK_FOR_SALE", "WORK_GARDEN", "WORK_INTEGRITY", "WORK_LEARNING", "WORK_MENTORSHIP", "WORK_MULTI_COMPANY", "WORK_RECRUITING", "WORK_SOCIAL", "WORK_STAGES", "WORK_TEAM", "WORK_TEAMWORK" },
				},
				"join_setting": map[string]any{
					"type": "string",
					"description": "join_setting parameter",
					"enum": []string{ "ADMIN_ONLY", "ANYONE", "NONE" },
				},
				"name": map[string]any{
					"type": "string",
					"description": "name parameter",
					"required": true,
				},
				"parent_id": map[string]any{
					"type": "string",
					"description": "parent_id parameter",
				},
				"post_permissions": map[string]any{
					"type": "string",
					"description": "post_permissions parameter",
					"enum": []string{ "ADMIN_ONLY", "ANYONE", "NONE" },
				},
				"post_requires_admin_approval": map[string]any{
					"type": "boolean",
					"description": "post_requires_admin_approval parameter",
				},
				"privacy": map[string]any{
					"type": "string",
					"description": "privacy parameter",
				},
				"ref": map[string]any{
					"type": "string",
					"description": "ref parameter",
				},
			}),
			mcp.Description("Parameters object containing: admin (integer), description (string), group_icon_id (string), group_type (enum) [CASUAL, COWORKERS, CUSTOM, FOR_SALE, FOR_WORK, ...], join_setting (enum) [ADMIN_ONLY, ANYONE, NONE], name (string) [required], parent_id (string), post_permissions (enum) [ADMIN_ONLY, ANYONE, NONE], post_requires_admin_approval (boolean), privacy (string), ref (string)"),
		),
	)
	tools = append(tools, group_post_groupsTool)

	// group_get_live_videos tool
	// Available fields for LiveVideo: ad_break_config, ad_break_failure_reason, broadcast_start_time, copyright, creation_time, dash_ingest_url, dash_preview_url, description, embed_html, from, id, ingest_streams, is_manual_mode, is_reference_only, live_views, overlay_url, permalink_url, planned_start_time, recommended_encoder_settings, seconds_left, secure_stream_url, status, stream_url, targeting, title, total_views, video
	// Params object accepts: broadcast_status (list<grouplive_videos_broadcast_status_enum_param>), source (grouplive_videos_source_enum_param)
	group_get_live_videosTool := mcp.NewTool("group_get_live_videos",
		mcp.WithDescription("GET live_videos for Group"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"broadcast_status": map[string]any{
					"type": "array",
					"description": "broadcast_status parameter",
					"enum": []string{ "LIVE", "LIVE_STOPPED", "PROCESSING", "SCHEDULED_CANCELED", "SCHEDULED_EXPIRED", "SCHEDULED_LIVE", "SCHEDULED_UNPUBLISHED", "UNPUBLISHED", "VOD" },
					"items": map[string]any{"type": "string"},
				},
				"source": map[string]any{
					"type": "string",
					"description": "source parameter",
					"enum": []string{ "owner", "target" },
				},
			}),
			mcp.Description("Parameters object containing: broadcast_status (array<enum>) [LIVE, LIVE_STOPPED, PROCESSING, SCHEDULED_CANCELED, SCHEDULED_EXPIRED, ...], source (enum) [owner, target]"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for LiveVideo objects. Available fields: ad_break_config, ad_break_failure_reason, broadcast_start_time, copyright, creation_time, dash_ingest_url, dash_preview_url, description, embed_html, from, id, ingest_streams, is_manual_mode, is_reference_only, live_views (and 12 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, group_get_live_videosTool)

	// group_post_live_videos tool
	// Params object accepts: content_tags (list<string>), description (string), enable_backup_ingest (bool), encoding_settings (string), event_params (Object), fisheye_video_cropped (bool), front_z_rotation (float), is_audio_only (bool), is_spherical (bool), original_fov (unsigned int), privacy (string), projection (grouplive_videos_projection_enum_param), published (bool), schedule_custom_profile_image (file), spatial_audio_format (grouplive_videos_spatial_audio_format_enum_param), status (grouplive_videos_status_enum_param), stereoscopic_mode (grouplive_videos_stereoscopic_mode_enum_param), stop_on_delete_stream (bool), stream_type (grouplive_videos_stream_type_enum_param), title (string)
	group_post_live_videosTool := mcp.NewTool("group_post_live_videos",
		mcp.WithDescription("POST live_videos for Group"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"content_tags": map[string]any{
					"type": "array",
					"description": "content_tags parameter",
					"items": map[string]any{"type": "string"},
				},
				"description": map[string]any{
					"type": "string",
					"description": "description parameter",
				},
				"enable_backup_ingest": map[string]any{
					"type": "boolean",
					"description": "enable_backup_ingest parameter",
				},
				"encoding_settings": map[string]any{
					"type": "string",
					"description": "encoding_settings parameter",
				},
				"event_params": map[string]any{
					"type": "object",
					"description": "event_params parameter",
				},
				"fisheye_video_cropped": map[string]any{
					"type": "boolean",
					"description": "fisheye_video_cropped parameter",
				},
				"front_z_rotation": map[string]any{
					"type": "number",
					"description": "front_z_rotation parameter",
				},
				"is_audio_only": map[string]any{
					"type": "boolean",
					"description": "is_audio_only parameter",
				},
				"is_spherical": map[string]any{
					"type": "boolean",
					"description": "is_spherical parameter",
				},
				"original_fov": map[string]any{
					"type": "integer",
					"description": "original_fov parameter",
				},
				"privacy": map[string]any{
					"type": "string",
					"description": "privacy parameter",
				},
				"projection": map[string]any{
					"type": "string",
					"description": "projection parameter",
					"enum": []string{ "CUBEMAP", "EQUIRECTANGULAR", "HALF_EQUIRECTANGULAR" },
				},
				"published": map[string]any{
					"type": "boolean",
					"description": "published parameter",
				},
				"schedule_custom_profile_image": map[string]any{
					"type": "string",
					"description": "schedule_custom_profile_image parameter",
				},
				"spatial_audio_format": map[string]any{
					"type": "string",
					"description": "spatial_audio_format parameter",
					"enum": []string{ "ambiX_4" },
				},
				"status": map[string]any{
					"type": "string",
					"description": "status parameter",
					"enum": []string{ "LIVE_NOW", "SCHEDULED_CANCELED", "SCHEDULED_LIVE", "SCHEDULED_UNPUBLISHED", "UNPUBLISHED" },
				},
				"stereoscopic_mode": map[string]any{
					"type": "string",
					"description": "stereoscopic_mode parameter",
					"enum": []string{ "LEFT_RIGHT", "MONO", "TOP_BOTTOM" },
				},
				"stop_on_delete_stream": map[string]any{
					"type": "boolean",
					"description": "stop_on_delete_stream parameter",
				},
				"stream_type": map[string]any{
					"type": "string",
					"description": "stream_type parameter",
					"enum": []string{ "AMBIENT", "REGULAR" },
				},
				"title": map[string]any{
					"type": "string",
					"description": "title parameter",
				},
			}),
			mcp.Description("Parameters object containing: content_tags (array<string>), description (string), enable_backup_ingest (boolean), encoding_settings (string), event_params (object), fisheye_video_cropped (boolean), front_z_rotation (number), is_audio_only (boolean), is_spherical (boolean), original_fov (integer), privacy (string), projection (enum) [CUBEMAP, EQUIRECTANGULAR, HALF_EQUIRECTANGULAR], published (boolean), schedule_custom_profile_image (file), spatial_audio_format (enum) [ambiX_4], status (enum) [LIVE_NOW, SCHEDULED_CANCELED, SCHEDULED_LIVE, SCHEDULED_UNPUBLISHED, UNPUBLISHED], stereoscopic_mode (enum) [LEFT_RIGHT, MONO, TOP_BOTTOM], stop_on_delete_stream (boolean), stream_type (enum) [AMBIENT, REGULAR], title (string)"),
		),
	)
	tools = append(tools, group_post_live_videosTool)

	// group_delete_members tool
	// Params object accepts: email (string), member (int)
	group_delete_membersTool := mcp.NewTool("group_delete_members",
		mcp.WithDescription("DELETE members for Group"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"email": map[string]any{
					"type": "string",
					"description": "email parameter",
				},
				"member": map[string]any{
					"type": "integer",
					"description": "member parameter",
				},
			}),
			mcp.Description("Parameters object containing: email (string), member (integer)"),
		),
	)
	tools = append(tools, group_delete_membersTool)

	// group_post_members tool
	// Params object accepts: email (string), from (int), member (int), rate (unsigned int), source (string)
	group_post_membersTool := mcp.NewTool("group_post_members",
		mcp.WithDescription("POST members for Group"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"email": map[string]any{
					"type": "string",
					"description": "email parameter",
				},
				"from": map[string]any{
					"type": "integer",
					"description": "from parameter",
				},
				"member": map[string]any{
					"type": "integer",
					"description": "member parameter",
				},
				"rate": map[string]any{
					"type": "integer",
					"description": "rate parameter",
				},
				"source": map[string]any{
					"type": "string",
					"description": "source parameter",
				},
			}),
			mcp.Description("Parameters object containing: email (string), from (integer), member (integer), rate (integer), source (string)"),
		),
	)
	tools = append(tools, group_post_membersTool)

	// group_get_opted_in_members tool
	// Available fields for User: about, age_range, avatar_2d_profile_picture, birthday, client_business_id, community, cover, currency, education, email, favorite_athletes, favorite_teams, first_name, gender, hometown, id, id_for_avatars, inspirational_people, install_type, installed, is_guest_user, is_work_account, languages, last_name, link, local_news_megaphone_dismiss_status, local_news_subscription_status, locale, location, meeting_for, middle_name, name, name_format, payment_pricepoints, political, profile_pic, quotes, relationship_status, religion, shared_login_upgrade_required_by, short_name, significant_other, sports, supports_donate_button_in_live_video, third_party_id, timezone, token_for_business, updated_time, verified, video_upload_limits, website
	group_get_opted_in_membersTool := mcp.NewTool("group_get_opted_in_members",
		mcp.WithDescription("GET opted_in_members for Group"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for User objects. Available fields: about, age_range, avatar_2d_profile_picture, birthday, client_business_id, community, cover, currency, education, email, favorite_athletes, favorite_teams, first_name, gender, hometown (and 36 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, group_get_opted_in_membersTool)

	// group_post_photos tool
	// Params object accepts: aid (string), allow_spherical_photo (bool), alt_text_custom (string), android_key_hash (string), application_id (string), attempt (unsigned int), audience_exp (bool), backdated_time (datetime), backdated_time_granularity (groupphotos_backdated_time_granularity_enum_param), caption (string), composer_session_id (string), direct_share_status (unsigned int), feed_targeting (Object), filter_type (unsigned int), full_res_is_coming_later (bool), initial_view_heading_override_degrees (unsigned int), initial_view_pitch_override_degrees (unsigned int), initial_view_vertical_fov_override_degrees (unsigned int), ios_bundle_id (string), is_explicit_location (bool), is_explicit_place (bool), manual_privacy (bool), message (string), name (string), no_story (bool), offline_id (unsigned int), og_action_type_id (string), og_icon_id (string), og_object_id (string), og_phrase (string), og_set_profile_badge (bool), og_suggestion_mechanism (string), place (Object), privacy (string), profile_id (int), provenance_info (map), proxied_app_id (string), published (bool), qn (string), spherical_metadata (map), sponsor_id (string), sponsor_relationship (unsigned int), tags (list<Object>), target_id (int), targeting (Object), time_since_original_post (unsigned int), uid (int), unpublished_content_type (groupphotos_unpublished_content_type_enum_param), url (string), user_selected_tags (bool), vault_image_id (string)
	group_post_photosTool := mcp.NewTool("group_post_photos",
		mcp.WithDescription("POST photos for Group"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"aid": map[string]any{
					"type": "string",
					"description": "aid parameter",
				},
				"allow_spherical_photo": map[string]any{
					"type": "boolean",
					"description": "allow_spherical_photo parameter",
				},
				"alt_text_custom": map[string]any{
					"type": "string",
					"description": "alt_text_custom parameter",
				},
				"android_key_hash": map[string]any{
					"type": "string",
					"description": "android_key_hash parameter",
				},
				"application_id": map[string]any{
					"type": "string",
					"description": "application_id parameter",
				},
				"attempt": map[string]any{
					"type": "integer",
					"description": "attempt parameter",
				},
				"audience_exp": map[string]any{
					"type": "boolean",
					"description": "audience_exp parameter",
				},
				"backdated_time": map[string]any{
					"type": "string",
					"description": "backdated_time parameter",
				},
				"backdated_time_granularity": map[string]any{
					"type": "string",
					"description": "backdated_time_granularity parameter",
					"enum": []string{ "day", "hour", "min", "month", "none", "year" },
				},
				"caption": map[string]any{
					"type": "string",
					"description": "caption parameter",
				},
				"composer_session_id": map[string]any{
					"type": "string",
					"description": "composer_session_id parameter",
				},
				"direct_share_status": map[string]any{
					"type": "integer",
					"description": "direct_share_status parameter",
				},
				"feed_targeting": map[string]any{
					"type": "object",
					"description": "feed_targeting parameter",
				},
				"filter_type": map[string]any{
					"type": "integer",
					"description": "filter_type parameter",
				},
				"full_res_is_coming_later": map[string]any{
					"type": "boolean",
					"description": "full_res_is_coming_later parameter",
				},
				"initial_view_heading_override_degrees": map[string]any{
					"type": "integer",
					"description": "initial_view_heading_override_degrees parameter",
				},
				"initial_view_pitch_override_degrees": map[string]any{
					"type": "integer",
					"description": "initial_view_pitch_override_degrees parameter",
				},
				"initial_view_vertical_fov_override_degrees": map[string]any{
					"type": "integer",
					"description": "initial_view_vertical_fov_override_degrees parameter",
				},
				"ios_bundle_id": map[string]any{
					"type": "string",
					"description": "ios_bundle_id parameter",
				},
				"is_explicit_location": map[string]any{
					"type": "boolean",
					"description": "is_explicit_location parameter",
				},
				"is_explicit_place": map[string]any{
					"type": "boolean",
					"description": "is_explicit_place parameter",
				},
				"manual_privacy": map[string]any{
					"type": "boolean",
					"description": "manual_privacy parameter",
				},
				"message": map[string]any{
					"type": "string",
					"description": "message parameter",
				},
				"name": map[string]any{
					"type": "string",
					"description": "name parameter",
				},
				"no_story": map[string]any{
					"type": "boolean",
					"description": "no_story parameter",
				},
				"offline_id": map[string]any{
					"type": "integer",
					"description": "offline_id parameter",
				},
				"og_action_type_id": map[string]any{
					"type": "string",
					"description": "og_action_type_id parameter",
				},
				"og_icon_id": map[string]any{
					"type": "string",
					"description": "og_icon_id parameter",
				},
				"og_object_id": map[string]any{
					"type": "string",
					"description": "og_object_id parameter",
				},
				"og_phrase": map[string]any{
					"type": "string",
					"description": "og_phrase parameter",
				},
				"og_set_profile_badge": map[string]any{
					"type": "boolean",
					"description": "og_set_profile_badge parameter",
				},
				"og_suggestion_mechanism": map[string]any{
					"type": "string",
					"description": "og_suggestion_mechanism parameter",
				},
				"place": map[string]any{
					"type": "object",
					"description": "place parameter",
				},
				"privacy": map[string]any{
					"type": "string",
					"description": "privacy parameter",
				},
				"profile_id": map[string]any{
					"type": "integer",
					"description": "profile_id parameter",
				},
				"provenance_info": map[string]any{
					"type": "object",
					"description": "provenance_info parameter",
				},
				"proxied_app_id": map[string]any{
					"type": "string",
					"description": "proxied_app_id parameter",
				},
				"published": map[string]any{
					"type": "boolean",
					"description": "published parameter",
				},
				"qn": map[string]any{
					"type": "string",
					"description": "qn parameter",
				},
				"spherical_metadata": map[string]any{
					"type": "object",
					"description": "spherical_metadata parameter",
				},
				"sponsor_id": map[string]any{
					"type": "string",
					"description": "sponsor_id parameter",
				},
				"sponsor_relationship": map[string]any{
					"type": "integer",
					"description": "sponsor_relationship parameter",
				},
				"tags": map[string]any{
					"type": "array",
					"description": "tags parameter",
					"items": map[string]any{"type": "object"},
				},
				"target_id": map[string]any{
					"type": "integer",
					"description": "target_id parameter",
				},
				"targeting": map[string]any{
					"type": "object",
					"description": "targeting parameter",
				},
				"time_since_original_post": map[string]any{
					"type": "integer",
					"description": "time_since_original_post parameter",
				},
				"uid": map[string]any{
					"type": "integer",
					"description": "uid parameter",
				},
				"unpublished_content_type": map[string]any{
					"type": "string",
					"description": "unpublished_content_type parameter",
					"enum": []string{ "ADS_POST", "DRAFT", "INLINE_CREATED", "PUBLISHED", "REVIEWABLE_BRANDED_CONTENT", "SCHEDULED", "SCHEDULED_RECURRING" },
				},
				"url": map[string]any{
					"type": "string",
					"description": "url parameter",
				},
				"user_selected_tags": map[string]any{
					"type": "boolean",
					"description": "user_selected_tags parameter",
				},
				"vault_image_id": map[string]any{
					"type": "string",
					"description": "vault_image_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: aid (string), allow_spherical_photo (boolean), alt_text_custom (string), android_key_hash (string), application_id (string), attempt (integer), audience_exp (boolean), backdated_time (datetime), backdated_time_granularity (enum) [day, hour, min, month, none, ...], caption (string), composer_session_id (string), direct_share_status (integer), feed_targeting (object), filter_type (integer), full_res_is_coming_later (boolean), initial_view_heading_override_degrees (integer), initial_view_pitch_override_degrees (integer), initial_view_vertical_fov_override_degrees (integer), ios_bundle_id (string), is_explicit_location (boolean), is_explicit_place (boolean), manual_privacy (boolean), message (string), name (string), no_story (boolean), offline_id (integer), og_action_type_id (string), og_icon_id (string), og_object_id (string), og_phrase (string), og_set_profile_badge (boolean), og_suggestion_mechanism (string), place (object), privacy (string), profile_id (integer), provenance_info (object), proxied_app_id (string), published (boolean), qn (string), spherical_metadata (object), sponsor_id (string), sponsor_relationship (integer), tags (array<object>), target_id (integer), targeting (object), time_since_original_post (integer), uid (integer), unpublished_content_type (enum) [ADS_POST, DRAFT, INLINE_CREATED, PUBLISHED, REVIEWABLE_BRANDED_CONTENT, ...], url (string), user_selected_tags (boolean), vault_image_id (string)"),
		),
	)
	tools = append(tools, group_post_photosTool)

	// group_get_picture tool
	// Available fields for ProfilePictureSource: bottom, cache_key, height, is_silhouette, left, right, top, url, width
	// Params object accepts: height (int), redirect (bool), type (grouppicture_type_enum_param), width (int)
	group_get_pictureTool := mcp.NewTool("group_get_picture",
		mcp.WithDescription("GET picture for Group"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"height": map[string]any{
					"type": "integer",
					"description": "height parameter",
				},
				"redirect": map[string]any{
					"type": "boolean",
					"description": "redirect parameter",
				},
				"type": map[string]any{
					"type": "string",
					"description": "type parameter",
					"enum": []string{ "album", "large", "normal", "small", "square" },
				},
				"width": map[string]any{
					"type": "integer",
					"description": "width parameter",
				},
			}),
			mcp.Description("Parameters object containing: height (integer), redirect (boolean), type (enum) [album, large, normal, small, square], width (integer)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for ProfilePictureSource objects. Available fields: bottom, cache_key, height, is_silhouette, left, right, top, url, width"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, group_get_pictureTool)

	// group_get_videos tool
	// Available fields for AdVideo: ad_breaks, admin_creator, audio_isrc, backdated_time, backdated_time_granularity, boost_eligibility_info, content_category, content_tags, copyright, copyright_check_information, copyright_monitoring_status, created_time, custom_labels, description, embed_html, embeddable, event, expiration, format, from, icon, id, is_crosspost_video, is_crossposting_eligible, is_episode, is_instagram_eligible, is_reference_only, length, live_audience_count, live_status, music_video_copyright, permalink_url, picture, place, post_id, post_views, premiere_living_room_status, privacy, published, scheduled_publish_time, source, spherical, status, title, universal_video_id, updated_time, views
	// Params object accepts: type (groupvideos_type_enum_param)
	group_get_videosTool := mcp.NewTool("group_get_videos",
		mcp.WithDescription("GET videos for Group"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"type": map[string]any{
					"type": "string",
					"description": "type parameter",
					"enum": []string{ "tagged", "uploaded" },
				},
			}),
			mcp.Description("Parameters object containing: type (enum) [tagged, uploaded]"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for AdVideo objects. Available fields: ad_breaks, admin_creator, audio_isrc, backdated_time, backdated_time_granularity, boost_eligibility_info, content_category, content_tags, copyright, copyright_check_information, copyright_monitoring_status, created_time, custom_labels, description, embed_html (and 32 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, group_get_videosTool)

	// group_post_videos tool
	// Params object accepts: application_id (string), asked_fun_fact_prompt_id (unsigned int), audio_story_wave_animation_handle (string), composer_entry_picker (string), composer_entry_point (string), composer_entry_time (unsigned int), composer_session_events_log (string), composer_session_id (string), composer_source_surface (string), composer_type (string), container_type (groupvideos_container_type_enum_param), content_category (groupvideos_content_category_enum_param), creative_tools (string), description (string), embeddable (bool), end_offset (unsigned int), fbuploader_video_file_chunk (string), file_size (unsigned int), file_url (string), fisheye_video_cropped (bool), formatting (groupvideos_formatting_enum_param), fov (unsigned int), front_z_rotation (float), fun_fact_prompt_id (string), fun_fact_toastee_id (unsigned int), guide (list<list<unsigned int>>), guide_enabled (bool), initial_heading (unsigned int), initial_pitch (unsigned int), instant_game_entry_point_data (string), is_boost_intended (bool), is_explicit_share (bool), is_group_linking_post (bool), is_partnership_ad (bool), is_voice_clip (bool), location_source_id (string), manual_privacy (bool), og_action_type_id (string), og_icon_id (string), og_object_id (string), og_phrase (string), og_suggestion_mechanism (string), original_fov (unsigned int), original_projection_type (groupvideos_original_projection_type_enum_param), partnership_ad_ad_code (string), publish_event_id (unsigned int), published (bool), referenced_sticker_id (string), replace_video_id (string), scheduled_publish_time (unsigned int), slideshow_spec (map), source (string), source_instagram_media_id (string), spherical (bool), start_offset (unsigned int), swap_mode (groupvideos_swap_mode_enum_param), text_format_metadata (string), thumb (file), time_since_original_post (unsigned int), title (string), transcode_setting_properties (string), unpublished_content_type (groupvideos_unpublished_content_type_enum_param), upload_phase (groupvideos_upload_phase_enum_param), upload_session_id (string), upload_setting_properties (string), video_file_chunk (string), video_id_original (string), video_start_time_ms (unsigned int), waterfall_id (string)
	group_post_videosTool := mcp.NewTool("group_post_videos",
		mcp.WithDescription("POST videos for Group"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"application_id": map[string]any{
					"type": "string",
					"description": "application_id parameter",
				},
				"asked_fun_fact_prompt_id": map[string]any{
					"type": "integer",
					"description": "asked_fun_fact_prompt_id parameter",
				},
				"audio_story_wave_animation_handle": map[string]any{
					"type": "string",
					"description": "audio_story_wave_animation_handle parameter",
				},
				"composer_entry_picker": map[string]any{
					"type": "string",
					"description": "composer_entry_picker parameter",
				},
				"composer_entry_point": map[string]any{
					"type": "string",
					"description": "composer_entry_point parameter",
				},
				"composer_entry_time": map[string]any{
					"type": "integer",
					"description": "composer_entry_time parameter",
				},
				"composer_session_events_log": map[string]any{
					"type": "string",
					"description": "composer_session_events_log parameter",
				},
				"composer_session_id": map[string]any{
					"type": "string",
					"description": "composer_session_id parameter",
				},
				"composer_source_surface": map[string]any{
					"type": "string",
					"description": "composer_source_surface parameter",
				},
				"composer_type": map[string]any{
					"type": "string",
					"description": "composer_type parameter",
				},
				"container_type": map[string]any{
					"type": "string",
					"description": "container_type parameter",
					"enum": []string{ "ACO_VIDEO_VARIATION", "ADS_AI_GENERATED", "AD_BREAK_PREVIEW", "AD_DERIVATIVE", "AD_LIBRARY_WATERMARK", "ALBUM_MULTIMEDIA_POST", "ALOHA_SUPERFRAME", "APP_REREVIEW_SCREENCAST", "APP_REVIEW_SCREENCAST", "ASSET_MANAGER", "ATLAS_VIDEO", "AUDIO_BROADCAST", "AUDIO_COMMENT", "BROADCAST", "CANVAS", "CMS_MEDIA_MANAGER", "CONTAINED_POST_ATTACHMENT", "CONTAINED_POST_AUDIO_BROADCAST", "CONTAINED_POST_COPYRIGHT_REFERENCE_BROADCAST", "COPYRIGHT_REFERENCE_BROADCAST", "COPYRIGHT_REFERENCE_IG_XPOST_VIDEO", "COPYRIGHT_REFERENCE_VIDEO", "CREATION_ML_PRECREATION", "CREATOR_FAN_CHALLENGE", "CREATOR_STOREFRONT_PERSONALIZED_VIDEO", "DATAGENIX_VIDEO", "DCO_AD_ASSET_FEED", "DCO_AUTOGEN_VIDEO", "DCO_TRIMMED_VIDEO", "DIM_SUM", "DIRECTED_POST_ATTACHMENT", "DIRECT_INBOX", "DROPS_SHOPPING_EVENT_PAGE", "DYNAMIC_ITEM_VIDEO", "DYNAMIC_TEMPLATE_VIDEO", "EVENT_COVER_VIDEO", "EVENT_TOUR", "FACECAST_DVR", "FB_AVATAR_ANIMATED_SATP", "FB_COLLECTIBLE_VIDEO", "FB_SHORTS", "FB_SHORTS_CONTENT_REMIXABLE", "FB_SHORTS_GROUP_POST", "FB_SHORTS_LINKED_PRODUCT", "FB_SHORTS_PMV_POST", "FB_SHORTS_POST", "FB_SHORTS_REMIX_POST", "FUNDRAISER_COVER_VIDEO", "GAME_CLIP", "GIF_TO_VIDEO", "GOODWILL_ANNIVERSARY_DEPRECATED", "GOODWILL_ANNIVERSARY_PROMOTION_DEPRECATED", "GOODWILL_VIDEO_CONTAINED_SHARE", "GOODWILL_VIDEO_PROMOTION", "GOODWILL_VIDEO_SHARE", "GOODWILL_VIDEO_TOKEN_REQUIRED", "GROUP_POST", "HEURISTIC_CLUSTER_VIDEO", "HIGHLIGHT_CLIP_VIDEO", "HORIZON_WORLDS_TV", "HUDDLE_BROADCAST", "IG_REELS_XPV", "IG_STORIES_READER", "INJECTABLE", "INSPIRATION_VIDEO", "INSTAGRAM_VIDEO_COPY", "INSTANT_APPLICATION_PREVIEW", "INSTANT_ARTICLE", "ISSUE_MODULE", "LEARN", "LEGACY", "LEGACY_CONTAINED_POST_BROADCAST", "LIVE_AUDIO_ROOM_BROADCAST", "LIVE_CLIP_PREVIEW", "LIVE_CLIP_WORKCHAT", "LIVE_CREATIVE_KIT_VIDEO", "LIVE_PHOTO", "LOOK_NOW_DEPRECATED", "MARKETPLACE_LISTING_VIDEO", "MARKETPLACE_PRE_RECORDED_VIDEO", "MOMENTS_VIDEO", "MUSIC_CLIP", "MUSIC_CLIP_IN_COMMENT", "MUSIC_CLIP_IN_LIGHTWEIGHT_STATUS", "MUSIC_CLIP_IN_MSGR_NOTE", "MUSIC_CLIP_IN_POLL_OPTION", "MUSIC_CLIP_ON_DATING_PROFILE", "NEO_ASYNC_GAME_VIDEO", "NEW_CONTAINED_POST_BROADCAST", "NO_STORY", "OCULUS_CREATOR_PORTAL", "OCULUS_VENUES_BROADCAST", "ORIGINALITY_SELF_ADVOCACY", "PAGES_COVER_VIDEO", "PAGE_REVIEW_SCREENCAST", "PAGE_SLIDESHOW_VIDEO", "PAID_CONTENT_PREVIEW", "PAID_CONTENT_VIDEO", "PAID_CONTENT_VIDEO__POST", "PIXELCLOUD", "PODCAST_HIGHLIGHT", "PODCAST_ML_PREVIEW", "PODCAST_ML_PREVIEW_NO_NEWSFEED_STORY", "PODCAST_RSS", "PODCAST_RSS_EPHEMERAL", "PODCAST_RSS_NO_NEWSFEED_STORY", "PODCAST_VOICES", "PODCAST_VOICES_NO_NEWSFEED_STORY", "PREMIERE_SOURCE", "PREMIUM_MUSIC_VIDEO_CLIP", "PREMIUM_MUSIC_VIDEO_CROPPED_CLIP", "PREMIUM_MUSIC_VIDEO_NO_NEWSFEED_STORY", "PREMIUM_MUSIC_VIDEO_WITH_NEWSFEED_STORY", "PRIVATE_GALLERY_VIDEO", "PRODUCT_VIDEO", "PROFILE_COVER_VIDEO", "PROFILE_INTRO_CARD", "PROFILE_VIDEO", "PROTON", "QUICK_CLIP_WORKPLACE_POST", "QUICK_PROMOTION", "REPLACE_VIDEO", "SALES_CLIENT_INTERACTION", "SHOWREEL_NATIVE_DUMMY_VIDEO", "SLIDESHOW_ANIMOTO", "SLIDESHOW_SHAKR", "SLIDESHOW_VARIATION_VIDEO", "SOUND_PLATFORM_STREAM", "SRT_ATTACHMENT", "STORIES_VIDEO", "STORYLINE", "STORYLINE_WITH_EXTERNAL_MUSIC", "STORY_ARCHIVE_VIDEO", "STORY_CARD_TEMPLATE", "STREAM_HIGHLIGHTS_VIDEO", "TAROT_DIGEST", "TEMPORARY_UNLISTED", "TEMP_VIDEO_COPYRIGHT_SCAN", "UNLISTED", "UNLISTED_OCULUS", "VIDEO_COMMENT", "VIDEO_COMPOSITION_VARIATION", "VIDEO_CREATIVE_EDITOR_AUTOGEN_AD_VIDEO", "VIDEO_SUPERRES", "VOICES_ARTICLE_VIDEO", "VU_GENERATED_VIDEO", "WOODHENGE", "WORK_KNOWLEDGE_VIDEO", "YOUR_DAY" },
				},
				"content_category": map[string]any{
					"type": "string",
					"description": "content_category parameter",
					"enum": []string{ "BEAUTY_FASHION", "BUSINESS", "CARS_TRUCKS", "COMEDY", "CUTE_ANIMALS", "ENTERTAINMENT", "FAMILY", "FOOD_HEALTH", "HOME", "LIFESTYLE", "MUSIC", "NEWS", "OTHER", "POLITICS", "SCIENCE", "SPORTS", "TECHNOLOGY", "VIDEO_GAMING" },
				},
				"creative_tools": map[string]any{
					"type": "string",
					"description": "creative_tools parameter",
				},
				"description": map[string]any{
					"type": "string",
					"description": "description parameter",
				},
				"embeddable": map[string]any{
					"type": "boolean",
					"description": "embeddable parameter",
				},
				"end_offset": map[string]any{
					"type": "integer",
					"description": "end_offset parameter",
				},
				"fbuploader_video_file_chunk": map[string]any{
					"type": "string",
					"description": "fbuploader_video_file_chunk parameter",
				},
				"file_size": map[string]any{
					"type": "integer",
					"description": "file_size parameter",
				},
				"file_url": map[string]any{
					"type": "string",
					"description": "file_url parameter",
				},
				"fisheye_video_cropped": map[string]any{
					"type": "boolean",
					"description": "fisheye_video_cropped parameter",
				},
				"formatting": map[string]any{
					"type": "string",
					"description": "formatting parameter",
					"enum": []string{ "MARKDOWN", "PLAINTEXT" },
				},
				"fov": map[string]any{
					"type": "integer",
					"description": "fov parameter",
				},
				"front_z_rotation": map[string]any{
					"type": "number",
					"description": "front_z_rotation parameter",
				},
				"fun_fact_prompt_id": map[string]any{
					"type": "string",
					"description": "fun_fact_prompt_id parameter",
				},
				"fun_fact_toastee_id": map[string]any{
					"type": "integer",
					"description": "fun_fact_toastee_id parameter",
				},
				"guide": map[string]any{
					"type": "array",
					"description": "guide parameter",
					"items": map[string]any{"type": "array"},
				},
				"guide_enabled": map[string]any{
					"type": "boolean",
					"description": "guide_enabled parameter",
				},
				"initial_heading": map[string]any{
					"type": "integer",
					"description": "initial_heading parameter",
				},
				"initial_pitch": map[string]any{
					"type": "integer",
					"description": "initial_pitch parameter",
				},
				"instant_game_entry_point_data": map[string]any{
					"type": "string",
					"description": "instant_game_entry_point_data parameter",
				},
				"is_boost_intended": map[string]any{
					"type": "boolean",
					"description": "is_boost_intended parameter",
				},
				"is_explicit_share": map[string]any{
					"type": "boolean",
					"description": "is_explicit_share parameter",
				},
				"is_group_linking_post": map[string]any{
					"type": "boolean",
					"description": "is_group_linking_post parameter",
				},
				"is_partnership_ad": map[string]any{
					"type": "boolean",
					"description": "is_partnership_ad parameter",
				},
				"is_voice_clip": map[string]any{
					"type": "boolean",
					"description": "is_voice_clip parameter",
				},
				"location_source_id": map[string]any{
					"type": "string",
					"description": "location_source_id parameter",
				},
				"manual_privacy": map[string]any{
					"type": "boolean",
					"description": "manual_privacy parameter",
				},
				"og_action_type_id": map[string]any{
					"type": "string",
					"description": "og_action_type_id parameter",
				},
				"og_icon_id": map[string]any{
					"type": "string",
					"description": "og_icon_id parameter",
				},
				"og_object_id": map[string]any{
					"type": "string",
					"description": "og_object_id parameter",
				},
				"og_phrase": map[string]any{
					"type": "string",
					"description": "og_phrase parameter",
				},
				"og_suggestion_mechanism": map[string]any{
					"type": "string",
					"description": "og_suggestion_mechanism parameter",
				},
				"original_fov": map[string]any{
					"type": "integer",
					"description": "original_fov parameter",
				},
				"original_projection_type": map[string]any{
					"type": "string",
					"description": "original_projection_type parameter",
					"enum": []string{ "cubemap", "equirectangular", "half_equirectangular" },
				},
				"partnership_ad_ad_code": map[string]any{
					"type": "string",
					"description": "partnership_ad_ad_code parameter",
				},
				"publish_event_id": map[string]any{
					"type": "integer",
					"description": "publish_event_id parameter",
				},
				"published": map[string]any{
					"type": "boolean",
					"description": "published parameter",
				},
				"referenced_sticker_id": map[string]any{
					"type": "string",
					"description": "referenced_sticker_id parameter",
				},
				"replace_video_id": map[string]any{
					"type": "string",
					"description": "replace_video_id parameter",
				},
				"scheduled_publish_time": map[string]any{
					"type": "integer",
					"description": "scheduled_publish_time parameter",
				},
				"slideshow_spec": map[string]any{
					"type": "object",
					"description": "slideshow_spec parameter",
				},
				"source": map[string]any{
					"type": "string",
					"description": "source parameter",
				},
				"source_instagram_media_id": map[string]any{
					"type": "string",
					"description": "source_instagram_media_id parameter",
				},
				"spherical": map[string]any{
					"type": "boolean",
					"description": "spherical parameter",
				},
				"start_offset": map[string]any{
					"type": "integer",
					"description": "start_offset parameter",
				},
				"swap_mode": map[string]any{
					"type": "string",
					"description": "swap_mode parameter",
					"enum": []string{ "replace" },
				},
				"text_format_metadata": map[string]any{
					"type": "string",
					"description": "text_format_metadata parameter",
				},
				"thumb": map[string]any{
					"type": "string",
					"description": "thumb parameter",
				},
				"time_since_original_post": map[string]any{
					"type": "integer",
					"description": "time_since_original_post parameter",
				},
				"title": map[string]any{
					"type": "string",
					"description": "title parameter",
				},
				"transcode_setting_properties": map[string]any{
					"type": "string",
					"description": "transcode_setting_properties parameter",
				},
				"unpublished_content_type": map[string]any{
					"type": "string",
					"description": "unpublished_content_type parameter",
					"enum": []string{ "ADS_POST", "DRAFT", "INLINE_CREATED", "PUBLISHED", "REVIEWABLE_BRANDED_CONTENT", "SCHEDULED", "SCHEDULED_RECURRING" },
				},
				"upload_phase": map[string]any{
					"type": "string",
					"description": "upload_phase parameter",
					"enum": []string{ "cancel", "finish", "start", "transfer" },
				},
				"upload_session_id": map[string]any{
					"type": "string",
					"description": "upload_session_id parameter",
				},
				"upload_setting_properties": map[string]any{
					"type": "string",
					"description": "upload_setting_properties parameter",
				},
				"video_file_chunk": map[string]any{
					"type": "string",
					"description": "video_file_chunk parameter",
				},
				"video_id_original": map[string]any{
					"type": "string",
					"description": "video_id_original parameter",
				},
				"video_start_time_ms": map[string]any{
					"type": "integer",
					"description": "video_start_time_ms parameter",
				},
				"waterfall_id": map[string]any{
					"type": "string",
					"description": "waterfall_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: application_id (string), asked_fun_fact_prompt_id (integer), audio_story_wave_animation_handle (string), composer_entry_picker (string), composer_entry_point (string), composer_entry_time (integer), composer_session_events_log (string), composer_session_id (string), composer_source_surface (string), composer_type (string), container_type (enum) [ACO_VIDEO_VARIATION, ADS_AI_GENERATED, AD_BREAK_PREVIEW, AD_DERIVATIVE, AD_LIBRARY_WATERMARK, ...], content_category (enum) [BEAUTY_FASHION, BUSINESS, CARS_TRUCKS, COMEDY, CUTE_ANIMALS, ...], creative_tools (string), description (string), embeddable (boolean), end_offset (integer), fbuploader_video_file_chunk (string), file_size (integer), file_url (string), fisheye_video_cropped (boolean), formatting (enum) [MARKDOWN, PLAINTEXT], fov (integer), front_z_rotation (number), fun_fact_prompt_id (string), fun_fact_toastee_id (integer), guide (array<array<integer>>), guide_enabled (boolean), initial_heading (integer), initial_pitch (integer), instant_game_entry_point_data (string), is_boost_intended (boolean), is_explicit_share (boolean), is_group_linking_post (boolean), is_partnership_ad (boolean), is_voice_clip (boolean), location_source_id (string), manual_privacy (boolean), og_action_type_id (string), og_icon_id (string), og_object_id (string), og_phrase (string), og_suggestion_mechanism (string), original_fov (integer), original_projection_type (enum) [cubemap, equirectangular, half_equirectangular], partnership_ad_ad_code (string), publish_event_id (integer), published (boolean), referenced_sticker_id (string), replace_video_id (string), scheduled_publish_time (integer), slideshow_spec (object), source (string), source_instagram_media_id (string), spherical (boolean), start_offset (integer), swap_mode (enum) [replace], text_format_metadata (string), thumb (file), time_since_original_post (integer), title (string), transcode_setting_properties (string), unpublished_content_type (enum) [ADS_POST, DRAFT, INLINE_CREATED, PUBLISHED, REVIEWABLE_BRANDED_CONTENT, ...], upload_phase (enum) [cancel, finish, start, transfer], upload_session_id (string), upload_setting_properties (string), video_file_chunk (string), video_id_original (string), video_start_time_ms (integer), waterfall_id (string)"),
		),
	)
	tools = append(tools, group_post_videosTool)

	// group_get_ tool
	// Available fields for Group: archived, cover, created_time, description, email, icon, id, install, link, member_count, member_request_count, name, parent, permissions, privacy, purpose, subdomain, updated_time, venue
	// Params object accepts: icon_size (group_icon_size)
	group_get_Tool := mcp.NewTool("group_get_",
		mcp.WithDescription("GET  for Group"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"icon_size": map[string]any{
					"type": "string",
					"description": "icon_size parameter",
					"enum": []string{ "16", "34", "50", "68" },
				},
			}),
			mcp.Description("Parameters object containing: icon_size (group_icon_size) [16, 34, 50, 68]"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for Group objects. Available fields: archived, cover, created_time, description, email, icon, id, install, link, member_count, member_request_count, name, parent, permissions, privacy (and 4 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, group_get_Tool)

	// group_post_ tool
	// Params object accepts: cover (string), cover_url (string), description (string), focus_x (float), focus_y (float), group_icon (string), is_official_group (bool), join_setting (group_join_setting), name (string), no_feed_story (bool), offset_y (int), post_permissions (group_post_permissions), post_requires_admin_approval (bool), privacy (string), purpose (group_purpose), update_view_time (bool)
	group_post_Tool := mcp.NewTool("group_post_",
		mcp.WithDescription("POST  for Group"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"cover": map[string]any{
					"type": "string",
					"description": "cover parameter",
				},
				"cover_url": map[string]any{
					"type": "string",
					"description": "cover_url parameter",
				},
				"description": map[string]any{
					"type": "string",
					"description": "description parameter",
				},
				"focus_x": map[string]any{
					"type": "number",
					"description": "focus_x parameter",
				},
				"focus_y": map[string]any{
					"type": "number",
					"description": "focus_y parameter",
				},
				"group_icon": map[string]any{
					"type": "string",
					"description": "group_icon parameter",
				},
				"is_official_group": map[string]any{
					"type": "boolean",
					"description": "is_official_group parameter",
				},
				"join_setting": map[string]any{
					"type": "string",
					"description": "join_setting parameter",
					"enum": []string{ "ADMIN_ONLY", "ANYONE", "NONE" },
				},
				"name": map[string]any{
					"type": "string",
					"description": "name parameter",
				},
				"no_feed_story": map[string]any{
					"type": "boolean",
					"description": "no_feed_story parameter",
				},
				"offset_y": map[string]any{
					"type": "integer",
					"description": "offset_y parameter",
				},
				"post_permissions": map[string]any{
					"type": "string",
					"description": "post_permissions parameter",
					"enum": []string{ "ADMIN_ONLY", "ANYONE", "NONE" },
				},
				"post_requires_admin_approval": map[string]any{
					"type": "boolean",
					"description": "post_requires_admin_approval parameter",
				},
				"privacy": map[string]any{
					"type": "string",
					"description": "privacy parameter",
				},
				"purpose": map[string]any{
					"type": "string",
					"description": "purpose parameter",
					"enum": []string{ "CASUAL", "COWORKERS", "CUSTOM", "FOR_SALE", "FOR_WORK", "GAME", "HEALTH_SUPPORT", "JOBS", "LEARNING", "NONE", "PARENTING", "STREAMER", "WORK_ANNOUNCEMENT", "WORK_DEMO_GROUP", "WORK_DISCUSSION", "WORK_EPHEMERAL", "WORK_FEEDBACK", "WORK_FOR_SALE", "WORK_GARDEN", "WORK_INTEGRITY", "WORK_LEARNING", "WORK_MENTORSHIP", "WORK_MULTI_COMPANY", "WORK_RECRUITING", "WORK_SOCIAL", "WORK_STAGES", "WORK_TEAM", "WORK_TEAMWORK" },
				},
				"update_view_time": map[string]any{
					"type": "boolean",
					"description": "update_view_time parameter",
				},
			}),
			mcp.Description("Parameters object containing: cover (string), cover_url (string), description (string), focus_x (number), focus_y (number), group_icon (string), is_official_group (boolean), join_setting (group_join_setting) [ADMIN_ONLY, ANYONE, NONE], name (string), no_feed_story (boolean), offset_y (integer), post_permissions (group_post_permissions) [ADMIN_ONLY, ANYONE, NONE], post_requires_admin_approval (boolean), privacy (string), purpose (group_purpose) [CASUAL, COWORKERS, CUSTOM, FOR_SALE, FOR_WORK, ...], update_view_time (boolean)"),
		),
	)
	tools = append(tools, group_post_Tool)


	return tools
}

// Group handlers


// HandleGroup_delete_admins handles the group_delete_admins tool with context-based auth
func HandleGroup_delete_admins(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}



	// Call the client method
	result, err := client.Group_delete_admins(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute group_delete_admins: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleGroup_post_admins handles the group_post_admins tool with context-based auth
func HandleGroup_post_admins(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}



	// Call the client method
	result, err := client.Group_post_admins(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute group_post_admins: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleGroup_get_albums handles the group_get_albums tool with context-based auth
func HandleGroup_get_albums(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Group_get_albums(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute group_get_albums: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleGroup_get_docs handles the group_get_docs tool with context-based auth
func HandleGroup_get_docs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Group_get_docs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute group_get_docs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleGroup_get_events handles the group_get_events tool with context-based auth
func HandleGroup_get_events(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Group_get_events(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute group_get_events: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleGroup_get_feed handles the group_get_feed tool with context-based auth
func HandleGroup_get_feed(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Group_get_feed(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute group_get_feed: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleGroup_post_feed handles the group_post_feed tool with context-based auth
func HandleGroup_post_feed(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the client method
	result, err := client.Group_post_feed(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute group_post_feed: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleGroup_get_files handles the group_get_files tool with context-based auth
func HandleGroup_get_files(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Group_get_files(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute group_get_files: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleGroup_get_groups handles the group_get_groups tool with context-based auth
func HandleGroup_get_groups(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Group_get_groups(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute group_get_groups: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleGroup_post_groups handles the group_post_groups tool with context-based auth
func HandleGroup_post_groups(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}



	// Call the client method
	result, err := client.Group_post_groups(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute group_post_groups: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleGroup_get_live_videos handles the group_get_live_videos tool with context-based auth
func HandleGroup_get_live_videos(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Group_get_live_videos(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute group_get_live_videos: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleGroup_post_live_videos handles the group_post_live_videos tool with context-based auth
func HandleGroup_post_live_videos(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the client method
	result, err := client.Group_post_live_videos(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute group_post_live_videos: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleGroup_delete_members handles the group_delete_members tool with context-based auth
func HandleGroup_delete_members(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the client method
	result, err := client.Group_delete_members(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute group_delete_members: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleGroup_post_members handles the group_post_members tool with context-based auth
func HandleGroup_post_members(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the client method
	result, err := client.Group_post_members(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute group_post_members: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleGroup_get_opted_in_members handles the group_get_opted_in_members tool with context-based auth
func HandleGroup_get_opted_in_members(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Group_get_opted_in_members(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute group_get_opted_in_members: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleGroup_post_photos handles the group_post_photos tool with context-based auth
func HandleGroup_post_photos(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the client method
	result, err := client.Group_post_photos(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute group_post_photos: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleGroup_get_picture handles the group_get_picture tool with context-based auth
func HandleGroup_get_picture(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Group_get_picture(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute group_get_picture: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleGroup_get_videos handles the group_get_videos tool with context-based auth
func HandleGroup_get_videos(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Group_get_videos(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute group_get_videos: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleGroup_post_videos handles the group_post_videos tool with context-based auth
func HandleGroup_post_videos(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the client method
	result, err := client.Group_post_videos(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute group_post_videos: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleGroup_get_ handles the group_get_ tool with context-based auth
func HandleGroup_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Group_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute group_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleGroup_post_ handles the group_post_ tool with context-based auth
func HandleGroup_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the client method
	result, err := client.Group_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute group_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

