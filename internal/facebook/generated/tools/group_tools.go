// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetGroupTools returns MCP tools for Group
func GetGroupTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool


	// facebook_group_delete_admins tool
	facebook_group_delete_adminsTool := mcp.NewTool("facebook_group_delete_admins",
		mcp.WithDescription("DELETE admins for Group"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithNumber("uid",
			mcp.Required(),
			mcp.Description("uid parameter for admins"),
		),
	)
	tools = append(tools, facebook_group_delete_adminsTool)

	// facebook_group_post_admins tool
	facebook_group_post_adminsTool := mcp.NewTool("facebook_group_post_admins",
		mcp.WithDescription("POST admins for Group"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithNumber("uid",
			mcp.Required(),
			mcp.Description("uid parameter for admins"),
		),
	)
	tools = append(tools, facebook_group_post_adminsTool)

	// facebook_group_get_albums tool
	facebook_group_get_albumsTool := mcp.NewTool("facebook_group_get_albums",
		mcp.WithDescription("GET albums for Group"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_group_get_albumsTool)

	// facebook_group_get_docs tool
	facebook_group_get_docsTool := mcp.NewTool("facebook_group_get_docs",
		mcp.WithDescription("GET docs for Group"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_group_get_docsTool)

	// facebook_group_get_events tool
	facebook_group_get_eventsTool := mcp.NewTool("facebook_group_get_events",
		mcp.WithDescription("GET events for Group"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_group_get_eventsTool)

	// facebook_group_get_feed tool
	facebook_group_get_feedTool := mcp.NewTool("facebook_group_get_feed",
		mcp.WithDescription("GET feed for Group"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithBoolean("include_hidden",
			mcp.Description("include_hidden parameter for feed"),
		),
		mcp.WithString("q",
			mcp.Description("q parameter for feed"),
		),
		mcp.WithBoolean("show_expired",
			mcp.Description("show_expired parameter for feed"),
		),
		mcp.WithString("since",
			mcp.Description("since parameter for feed"),
		),
		mcp.WithString("until",
			mcp.Description("until parameter for feed"),
		),
		mcp.WithString("with",
			mcp.Description("with parameter for feed"),
		),
	)
	tools = append(tools, facebook_group_get_feedTool)

	// facebook_group_post_feed tool
	facebook_group_post_feedTool := mcp.NewTool("facebook_group_post_feed",
		mcp.WithDescription("POST feed for Group"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("actions",
			mcp.Description("actions parameter for feed"),
		),
		mcp.WithString("album_id",
			mcp.Description("album_id parameter for feed"),
		),
		mcp.WithString("android_key_hash",
			mcp.Description("android_key_hash parameter for feed"),
		),
		mcp.WithString("application_id",
			mcp.Description("application_id parameter for feed"),
		),
		mcp.WithNumber("asked_fun_fact_prompt_id",
			mcp.Description("asked_fun_fact_prompt_id parameter for feed"),
		),
		mcp.WithString("asset3d_id",
			mcp.Description("asset3d_id parameter for feed"),
		),
		mcp.WithString("associated_id",
			mcp.Description("associated_id parameter for feed"),
		),
		mcp.WithBoolean("attach_place_suggestion",
			mcp.Description("attach_place_suggestion parameter for feed"),
		),
		mcp.WithString("attached_media",
			mcp.Description("attached_media parameter for feed"),
		),
		mcp.WithBoolean("audience_exp",
			mcp.Description("audience_exp parameter for feed"),
		),
		mcp.WithString("backdated_time",
			mcp.Description("backdated_time parameter for feed"),
		),
		mcp.WithString("backdated_time_granularity",
			mcp.Description("backdated_time_granularity parameter for feed"),
			mcp.Enum("day", "hour", "min", "month", "none", "year"),
		),
		mcp.WithBoolean("breaking_news",
			mcp.Description("breaking_news parameter for feed"),
		),
		mcp.WithNumber("breaking_news_expiration",
			mcp.Description("breaking_news_expiration parameter for feed"),
		),
		mcp.WithString("call_to_action",
			mcp.Description("call_to_action parameter for feed"),
		),
		mcp.WithString("caption",
			mcp.Description("caption parameter for feed"),
		),
		mcp.WithString("child_attachments",
			mcp.Description("child_attachments parameter for feed"),
		),
		mcp.WithString("client_mutation_id",
			mcp.Description("client_mutation_id parameter for feed"),
		),
		mcp.WithString("composer_entry_picker",
			mcp.Description("composer_entry_picker parameter for feed"),
		),
		mcp.WithString("composer_entry_point",
			mcp.Description("composer_entry_point parameter for feed"),
		),
		mcp.WithNumber("composer_entry_time",
			mcp.Description("composer_entry_time parameter for feed"),
		),
		mcp.WithString("composer_session_events_log",
			mcp.Description("composer_session_events_log parameter for feed"),
		),
		mcp.WithString("composer_session_id",
			mcp.Description("composer_session_id parameter for feed"),
		),
		mcp.WithString("composer_source_surface",
			mcp.Description("composer_source_surface parameter for feed"),
		),
		mcp.WithString("composer_type",
			mcp.Description("composer_type parameter for feed"),
		),
		mcp.WithString("connection_class",
			mcp.Description("connection_class parameter for feed"),
		),
		mcp.WithString("content_attachment",
			mcp.Description("content_attachment parameter for feed"),
		),
		mcp.WithString("coordinates",
			mcp.Description("coordinates parameter for feed"),
		),
		mcp.WithString("cta_link",
			mcp.Description("cta_link parameter for feed"),
		),
		mcp.WithString("cta_type",
			mcp.Description("cta_type parameter for feed"),
		),
		mcp.WithString("description",
			mcp.Description("description parameter for feed"),
		),
		mcp.WithNumber("direct_share_status",
			mcp.Description("direct_share_status parameter for feed"),
		),
		mcp.WithNumber("expanded_height",
			mcp.Description("expanded_height parameter for feed"),
		),
		mcp.WithNumber("expanded_width",
			mcp.Description("expanded_width parameter for feed"),
		),
		mcp.WithString("feed_targeting",
			mcp.Description("feed_targeting parameter for feed"),
		),
		mcp.WithString("formatting",
			mcp.Description("formatting parameter for feed"),
			mcp.Enum("MARKDOWN", "PLAINTEXT"),
		),
		mcp.WithString("fun_fact_prompt_id",
			mcp.Description("fun_fact_prompt_id parameter for feed"),
		),
		mcp.WithNumber("fun_fact_toastee_id",
			mcp.Description("fun_fact_toastee_id parameter for feed"),
		),
		mcp.WithNumber("height",
			mcp.Description("height parameter for feed"),
		),
		mcp.WithString("home_checkin_city_id",
			mcp.Description("home_checkin_city_id parameter for feed"),
		),
		mcp.WithString("image_crops",
			mcp.Description("image_crops parameter for feed"),
		),
		mcp.WithString("implicit_with_tags",
			mcp.Description("implicit_with_tags parameter for feed"),
		),
		mcp.WithString("instant_game_entry_point_data",
			mcp.Description("instant_game_entry_point_data parameter for feed"),
		),
		mcp.WithString("ios_bundle_id",
			mcp.Description("ios_bundle_id parameter for feed"),
		),
		mcp.WithBoolean("is_backout_draft",
			mcp.Description("is_backout_draft parameter for feed"),
		),
		mcp.WithBoolean("is_boost_intended",
			mcp.Description("is_boost_intended parameter for feed"),
		),
		mcp.WithBoolean("is_explicit_location",
			mcp.Description("is_explicit_location parameter for feed"),
		),
		mcp.WithBoolean("is_explicit_share",
			mcp.Description("is_explicit_share parameter for feed"),
		),
		mcp.WithBoolean("is_group_linking_post",
			mcp.Description("is_group_linking_post parameter for feed"),
		),
		mcp.WithBoolean("is_photo_container",
			mcp.Description("is_photo_container parameter for feed"),
		),
		mcp.WithString("link",
			mcp.Description("link parameter for feed"),
		),
		mcp.WithString("location_source_id",
			mcp.Description("location_source_id parameter for feed"),
		),
		mcp.WithBoolean("manual_privacy",
			mcp.Description("manual_privacy parameter for feed"),
		),
		mcp.WithString("message",
			mcp.Description("message parameter for feed"),
		),
		mcp.WithBoolean("multi_share_end_card",
			mcp.Description("multi_share_end_card parameter for feed"),
		),
		mcp.WithBoolean("multi_share_optimized",
			mcp.Description("multi_share_optimized parameter for feed"),
		),
		mcp.WithString("name",
			mcp.Description("name parameter for feed"),
		),
		mcp.WithString("nectar_module",
			mcp.Description("nectar_module parameter for feed"),
		),
		mcp.WithString("object_attachment",
			mcp.Description("object_attachment parameter for feed"),
		),
		mcp.WithString("og_action_type_id",
			mcp.Description("og_action_type_id parameter for feed"),
		),
		mcp.WithBoolean("og_hide_object_attachment",
			mcp.Description("og_hide_object_attachment parameter for feed"),
		),
		mcp.WithString("og_icon_id",
			mcp.Description("og_icon_id parameter for feed"),
		),
		mcp.WithString("og_object_id",
			mcp.Description("og_object_id parameter for feed"),
		),
		mcp.WithString("og_phrase",
			mcp.Description("og_phrase parameter for feed"),
		),
		mcp.WithBoolean("og_set_profile_badge",
			mcp.Description("og_set_profile_badge parameter for feed"),
		),
		mcp.WithString("og_suggestion_mechanism",
			mcp.Description("og_suggestion_mechanism parameter for feed"),
		),
		mcp.WithString("page_recommendation",
			mcp.Description("page_recommendation parameter for feed"),
		),
		mcp.WithString("picture",
			mcp.Description("picture parameter for feed"),
		),
		mcp.WithString("place",
			mcp.Description("place parameter for feed"),
		),
		mcp.WithString("place_attachment_setting",
			mcp.Description("place_attachment_setting parameter for feed"),
			mcp.Enum("1", "2"),
		),
		mcp.WithString("place_list",
			mcp.Description("place_list parameter for feed"),
		),
		mcp.WithString("place_list_data",
			mcp.Description("place_list_data parameter for feed"),
		),
		mcp.WithString("post_surfaces_blacklist",
			mcp.Description("post_surfaces_blacklist parameter for feed"),
			mcp.Enum("1", "2", "3", "4", "5"),
		),
		mcp.WithString("posting_to_redspace",
			mcp.Description("posting_to_redspace parameter for feed"),
			mcp.Enum("disabled", "enabled"),
		),
		mcp.WithString("privacy",
			mcp.Description("privacy parameter for feed"),
		),
		mcp.WithString("prompt_id",
			mcp.Description("prompt_id parameter for feed"),
		),
		mcp.WithString("prompt_tracking_string",
			mcp.Description("prompt_tracking_string parameter for feed"),
		),
		mcp.WithString("properties",
			mcp.Description("properties parameter for feed"),
		),
		mcp.WithString("proxied_app_id",
			mcp.Description("proxied_app_id parameter for feed"),
		),
		mcp.WithNumber("publish_event_id",
			mcp.Description("publish_event_id parameter for feed"),
		),
		mcp.WithBoolean("published",
			mcp.Description("published parameter for feed"),
		),
		mcp.WithString("quote",
			mcp.Description("quote parameter for feed"),
		),
		mcp.WithString("ref",
			mcp.Description("ref parameter for feed"),
		),
		mcp.WithString("referenceable_image_ids",
			mcp.Description("referenceable_image_ids parameter for feed"),
		),
		mcp.WithString("referral_id",
			mcp.Description("referral_id parameter for feed"),
		),
		mcp.WithString("scheduled_publish_time",
			mcp.Description("scheduled_publish_time parameter for feed"),
		),
		mcp.WithString("source",
			mcp.Description("source parameter for feed"),
		),
		mcp.WithString("sponsor_id",
			mcp.Description("sponsor_id parameter for feed"),
		),
		mcp.WithNumber("sponsor_relationship",
			mcp.Description("sponsor_relationship parameter for feed"),
		),
		mcp.WithString("suggested_place_id",
			mcp.Description("suggested_place_id parameter for feed"),
		),
		mcp.WithString("tags",
			mcp.Description("tags parameter for feed"),
		),
		mcp.WithString("target_surface",
			mcp.Description("target_surface parameter for feed"),
			mcp.Enum("STORY", "TIMELINE"),
		),
		mcp.WithString("targeting",
			mcp.Description("targeting parameter for feed"),
		),
		mcp.WithString("text_format_metadata",
			mcp.Description("text_format_metadata parameter for feed"),
		),
		mcp.WithString("text_format_preset_id",
			mcp.Description("text_format_preset_id parameter for feed"),
		),
		mcp.WithString("text_only_place",
			mcp.Description("text_only_place parameter for feed"),
		),
		mcp.WithString("thumbnail",
			mcp.Description("thumbnail parameter for feed"),
		),
		mcp.WithNumber("time_since_original_post",
			mcp.Description("time_since_original_post parameter for feed"),
		),
		mcp.WithString("title",
			mcp.Description("title parameter for feed"),
		),
		mcp.WithString("tracking_info",
			mcp.Description("tracking_info parameter for feed"),
		),
		mcp.WithString("unpublished_content_type",
			mcp.Description("unpublished_content_type parameter for feed"),
			mcp.Enum("ADS_POST", "DRAFT", "INLINE_CREATED", "PUBLISHED", "REVIEWABLE_BRANDED_CONTENT", "SCHEDULED", "SCHEDULED_RECURRING"),
		),
		mcp.WithBoolean("user_selected_tags",
			mcp.Description("user_selected_tags parameter for feed"),
		),
		mcp.WithNumber("video_start_time_ms",
			mcp.Description("video_start_time_ms parameter for feed"),
		),
		mcp.WithString("viewer_coordinates",
			mcp.Description("viewer_coordinates parameter for feed"),
		),
		mcp.WithNumber("width",
			mcp.Description("width parameter for feed"),
		),
	)
	tools = append(tools, facebook_group_post_feedTool)

	// facebook_group_get_files tool
	facebook_group_get_filesTool := mcp.NewTool("facebook_group_get_files",
		mcp.WithDescription("GET files for Group"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_group_get_filesTool)

	// facebook_group_get_groups tool
	facebook_group_get_groupsTool := mcp.NewTool("facebook_group_get_groups",
		mcp.WithDescription("GET groups for Group"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_group_get_groupsTool)

	// facebook_group_post_groups tool
	facebook_group_post_groupsTool := mcp.NewTool("facebook_group_post_groups",
		mcp.WithDescription("POST groups for Group"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithNumber("admin",
			mcp.Description("admin parameter for groups"),
		),
		mcp.WithString("description",
			mcp.Description("description parameter for groups"),
		),
		mcp.WithString("group_icon_id",
			mcp.Description("group_icon_id parameter for groups"),
		),
		mcp.WithString("group_type",
			mcp.Description("group_type parameter for groups"),
			mcp.Enum("CASUAL", "COWORKERS", "CUSTOM", "FOR_SALE", "FOR_WORK", "GAME", "HEALTH_SUPPORT", "JOBS", "LEARNING", "NONE", "PARENTING", "STREAMER", "WORK_ANNOUNCEMENT", "WORK_DEMO_GROUP", "WORK_DISCUSSION", "WORK_EPHEMERAL", "WORK_FEEDBACK", "WORK_FOR_SALE", "WORK_GARDEN", "WORK_INTEGRITY", "WORK_LEARNING", "WORK_MENTORSHIP", "WORK_MULTI_COMPANY", "WORK_RECRUITING", "WORK_SOCIAL", "WORK_STAGES", "WORK_TEAM", "WORK_TEAMWORK"),
		),
		mcp.WithString("join_setting",
			mcp.Description("join_setting parameter for groups"),
			mcp.Enum("ADMIN_ONLY", "ANYONE", "NONE"),
		),
		mcp.WithString("name",
			mcp.Required(),
			mcp.Description("name parameter for groups"),
		),
		mcp.WithString("parent_id",
			mcp.Description("parent_id parameter for groups"),
		),
		mcp.WithString("post_permissions",
			mcp.Description("post_permissions parameter for groups"),
			mcp.Enum("ADMIN_ONLY", "ANYONE", "NONE"),
		),
		mcp.WithBoolean("post_requires_admin_approval",
			mcp.Description("post_requires_admin_approval parameter for groups"),
		),
		mcp.WithString("privacy",
			mcp.Description("privacy parameter for groups"),
		),
		mcp.WithString("ref",
			mcp.Description("ref parameter for groups"),
		),
	)
	tools = append(tools, facebook_group_post_groupsTool)

	// facebook_group_get_live_videos tool
	facebook_group_get_live_videosTool := mcp.NewTool("facebook_group_get_live_videos",
		mcp.WithDescription("GET live_videos for Group"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("broadcast_status",
			mcp.Description("broadcast_status parameter for live_videos"),
			mcp.Enum("LIVE", "LIVE_STOPPED", "PROCESSING", "SCHEDULED_CANCELED", "SCHEDULED_EXPIRED", "SCHEDULED_LIVE", "SCHEDULED_UNPUBLISHED", "UNPUBLISHED", "VOD"),
		),
		mcp.WithString("source",
			mcp.Description("source parameter for live_videos"),
			mcp.Enum("owner", "target"),
		),
	)
	tools = append(tools, facebook_group_get_live_videosTool)

	// facebook_group_post_live_videos tool
	facebook_group_post_live_videosTool := mcp.NewTool("facebook_group_post_live_videos",
		mcp.WithDescription("POST live_videos for Group"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("content_tags",
			mcp.Description("content_tags parameter for live_videos"),
		),
		mcp.WithString("description",
			mcp.Description("description parameter for live_videos"),
		),
		mcp.WithBoolean("enable_backup_ingest",
			mcp.Description("enable_backup_ingest parameter for live_videos"),
		),
		mcp.WithString("encoding_settings",
			mcp.Description("encoding_settings parameter for live_videos"),
		),
		mcp.WithString("event_params",
			mcp.Description("event_params parameter for live_videos"),
		),
		mcp.WithBoolean("fisheye_video_cropped",
			mcp.Description("fisheye_video_cropped parameter for live_videos"),
		),
		mcp.WithNumber("front_z_rotation",
			mcp.Description("front_z_rotation parameter for live_videos"),
		),
		mcp.WithBoolean("is_audio_only",
			mcp.Description("is_audio_only parameter for live_videos"),
		),
		mcp.WithBoolean("is_spherical",
			mcp.Description("is_spherical parameter for live_videos"),
		),
		mcp.WithNumber("original_fov",
			mcp.Description("original_fov parameter for live_videos"),
		),
		mcp.WithString("privacy",
			mcp.Description("privacy parameter for live_videos"),
		),
		mcp.WithString("projection",
			mcp.Description("projection parameter for live_videos"),
			mcp.Enum("CUBEMAP", "EQUIRECTANGULAR", "HALF_EQUIRECTANGULAR"),
		),
		mcp.WithBoolean("published",
			mcp.Description("published parameter for live_videos"),
		),
		mcp.WithString("schedule_custom_profile_image",
			mcp.Description("schedule_custom_profile_image parameter for live_videos"),
		),
		mcp.WithString("spatial_audio_format",
			mcp.Description("spatial_audio_format parameter for live_videos"),
			mcp.Enum("ambiX_4"),
		),
		mcp.WithString("status",
			mcp.Description("status parameter for live_videos"),
			mcp.Enum("LIVE_NOW", "SCHEDULED_CANCELED", "SCHEDULED_LIVE", "SCHEDULED_UNPUBLISHED", "UNPUBLISHED"),
		),
		mcp.WithString("stereoscopic_mode",
			mcp.Description("stereoscopic_mode parameter for live_videos"),
			mcp.Enum("LEFT_RIGHT", "MONO", "TOP_BOTTOM"),
		),
		mcp.WithBoolean("stop_on_delete_stream",
			mcp.Description("stop_on_delete_stream parameter for live_videos"),
		),
		mcp.WithString("stream_type",
			mcp.Description("stream_type parameter for live_videos"),
			mcp.Enum("AMBIENT", "REGULAR"),
		),
		mcp.WithString("title",
			mcp.Description("title parameter for live_videos"),
		),
	)
	tools = append(tools, facebook_group_post_live_videosTool)

	// facebook_group_delete_members tool
	facebook_group_delete_membersTool := mcp.NewTool("facebook_group_delete_members",
		mcp.WithDescription("DELETE members for Group"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("email",
			mcp.Description("email parameter for members"),
		),
		mcp.WithNumber("member",
			mcp.Description("member parameter for members"),
		),
	)
	tools = append(tools, facebook_group_delete_membersTool)

	// facebook_group_post_members tool
	facebook_group_post_membersTool := mcp.NewTool("facebook_group_post_members",
		mcp.WithDescription("POST members for Group"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("email",
			mcp.Description("email parameter for members"),
		),
		mcp.WithNumber("from",
			mcp.Description("from parameter for members"),
		),
		mcp.WithNumber("member",
			mcp.Description("member parameter for members"),
		),
		mcp.WithNumber("rate",
			mcp.Description("rate parameter for members"),
		),
		mcp.WithString("source",
			mcp.Description("source parameter for members"),
		),
	)
	tools = append(tools, facebook_group_post_membersTool)

	// facebook_group_get_opted_in_members tool
	facebook_group_get_opted_in_membersTool := mcp.NewTool("facebook_group_get_opted_in_members",
		mcp.WithDescription("GET opted_in_members for Group"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_group_get_opted_in_membersTool)

	// facebook_group_post_photos tool
	facebook_group_post_photosTool := mcp.NewTool("facebook_group_post_photos",
		mcp.WithDescription("POST photos for Group"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("aid",
			mcp.Description("aid parameter for photos"),
		),
		mcp.WithBoolean("allow_spherical_photo",
			mcp.Description("allow_spherical_photo parameter for photos"),
		),
		mcp.WithString("alt_text_custom",
			mcp.Description("alt_text_custom parameter for photos"),
		),
		mcp.WithString("android_key_hash",
			mcp.Description("android_key_hash parameter for photos"),
		),
		mcp.WithString("application_id",
			mcp.Description("application_id parameter for photos"),
		),
		mcp.WithNumber("attempt",
			mcp.Description("attempt parameter for photos"),
		),
		mcp.WithBoolean("audience_exp",
			mcp.Description("audience_exp parameter for photos"),
		),
		mcp.WithString("backdated_time",
			mcp.Description("backdated_time parameter for photos"),
		),
		mcp.WithString("backdated_time_granularity",
			mcp.Description("backdated_time_granularity parameter for photos"),
			mcp.Enum("day", "hour", "min", "month", "none", "year"),
		),
		mcp.WithString("caption",
			mcp.Description("caption parameter for photos"),
		),
		mcp.WithString("composer_session_id",
			mcp.Description("composer_session_id parameter for photos"),
		),
		mcp.WithNumber("direct_share_status",
			mcp.Description("direct_share_status parameter for photos"),
		),
		mcp.WithString("feed_targeting",
			mcp.Description("feed_targeting parameter for photos"),
		),
		mcp.WithNumber("filter_type",
			mcp.Description("filter_type parameter for photos"),
		),
		mcp.WithBoolean("full_res_is_coming_later",
			mcp.Description("full_res_is_coming_later parameter for photos"),
		),
		mcp.WithNumber("initial_view_heading_override_degrees",
			mcp.Description("initial_view_heading_override_degrees parameter for photos"),
		),
		mcp.WithNumber("initial_view_pitch_override_degrees",
			mcp.Description("initial_view_pitch_override_degrees parameter for photos"),
		),
		mcp.WithNumber("initial_view_vertical_fov_override_degrees",
			mcp.Description("initial_view_vertical_fov_override_degrees parameter for photos"),
		),
		mcp.WithString("ios_bundle_id",
			mcp.Description("ios_bundle_id parameter for photos"),
		),
		mcp.WithBoolean("is_explicit_location",
			mcp.Description("is_explicit_location parameter for photos"),
		),
		mcp.WithBoolean("is_explicit_place",
			mcp.Description("is_explicit_place parameter for photos"),
		),
		mcp.WithBoolean("manual_privacy",
			mcp.Description("manual_privacy parameter for photos"),
		),
		mcp.WithString("message",
			mcp.Description("message parameter for photos"),
		),
		mcp.WithString("name",
			mcp.Description("name parameter for photos"),
		),
		mcp.WithBoolean("no_story",
			mcp.Description("no_story parameter for photos"),
		),
		mcp.WithNumber("offline_id",
			mcp.Description("offline_id parameter for photos"),
		),
		mcp.WithString("og_action_type_id",
			mcp.Description("og_action_type_id parameter for photos"),
		),
		mcp.WithString("og_icon_id",
			mcp.Description("og_icon_id parameter for photos"),
		),
		mcp.WithString("og_object_id",
			mcp.Description("og_object_id parameter for photos"),
		),
		mcp.WithString("og_phrase",
			mcp.Description("og_phrase parameter for photos"),
		),
		mcp.WithBoolean("og_set_profile_badge",
			mcp.Description("og_set_profile_badge parameter for photos"),
		),
		mcp.WithString("og_suggestion_mechanism",
			mcp.Description("og_suggestion_mechanism parameter for photos"),
		),
		mcp.WithString("place",
			mcp.Description("place parameter for photos"),
		),
		mcp.WithString("privacy",
			mcp.Description("privacy parameter for photos"),
		),
		mcp.WithNumber("profile_id",
			mcp.Description("profile_id parameter for photos"),
		),
		mcp.WithString("provenance_info",
			mcp.Description("provenance_info parameter for photos"),
		),
		mcp.WithString("proxied_app_id",
			mcp.Description("proxied_app_id parameter for photos"),
		),
		mcp.WithBoolean("published",
			mcp.Description("published parameter for photos"),
		),
		mcp.WithString("qn",
			mcp.Description("qn parameter for photos"),
		),
		mcp.WithString("spherical_metadata",
			mcp.Description("spherical_metadata parameter for photos"),
		),
		mcp.WithString("sponsor_id",
			mcp.Description("sponsor_id parameter for photos"),
		),
		mcp.WithNumber("sponsor_relationship",
			mcp.Description("sponsor_relationship parameter for photos"),
		),
		mcp.WithString("tags",
			mcp.Description("tags parameter for photos"),
		),
		mcp.WithNumber("target_id",
			mcp.Description("target_id parameter for photos"),
		),
		mcp.WithString("targeting",
			mcp.Description("targeting parameter for photos"),
		),
		mcp.WithNumber("time_since_original_post",
			mcp.Description("time_since_original_post parameter for photos"),
		),
		mcp.WithNumber("uid",
			mcp.Description("uid parameter for photos"),
		),
		mcp.WithString("unpublished_content_type",
			mcp.Description("unpublished_content_type parameter for photos"),
			mcp.Enum("ADS_POST", "DRAFT", "INLINE_CREATED", "PUBLISHED", "REVIEWABLE_BRANDED_CONTENT", "SCHEDULED", "SCHEDULED_RECURRING"),
		),
		mcp.WithString("url",
			mcp.Description("url parameter for photos"),
		),
		mcp.WithBoolean("user_selected_tags",
			mcp.Description("user_selected_tags parameter for photos"),
		),
		mcp.WithString("vault_image_id",
			mcp.Description("vault_image_id parameter for photos"),
		),
	)
	tools = append(tools, facebook_group_post_photosTool)

	// facebook_group_get_picture tool
	facebook_group_get_pictureTool := mcp.NewTool("facebook_group_get_picture",
		mcp.WithDescription("GET picture for Group"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithNumber("height",
			mcp.Description("height parameter for picture"),
		),
		mcp.WithBoolean("redirect",
			mcp.Description("redirect parameter for picture"),
		),
		mcp.WithString("type",
			mcp.Description("type parameter for picture"),
			mcp.Enum("album", "large", "normal", "small", "square"),
		),
		mcp.WithNumber("width",
			mcp.Description("width parameter for picture"),
		),
	)
	tools = append(tools, facebook_group_get_pictureTool)

	// facebook_group_get_videos tool
	facebook_group_get_videosTool := mcp.NewTool("facebook_group_get_videos",
		mcp.WithDescription("GET videos for Group"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("type",
			mcp.Description("type parameter for videos"),
			mcp.Enum("tagged", "uploaded"),
		),
	)
	tools = append(tools, facebook_group_get_videosTool)

	// facebook_group_post_videos tool
	facebook_group_post_videosTool := mcp.NewTool("facebook_group_post_videos",
		mcp.WithDescription("POST videos for Group"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("application_id",
			mcp.Description("application_id parameter for videos"),
		),
		mcp.WithNumber("asked_fun_fact_prompt_id",
			mcp.Description("asked_fun_fact_prompt_id parameter for videos"),
		),
		mcp.WithString("audio_story_wave_animation_handle",
			mcp.Description("audio_story_wave_animation_handle parameter for videos"),
		),
		mcp.WithString("composer_entry_picker",
			mcp.Description("composer_entry_picker parameter for videos"),
		),
		mcp.WithString("composer_entry_point",
			mcp.Description("composer_entry_point parameter for videos"),
		),
		mcp.WithNumber("composer_entry_time",
			mcp.Description("composer_entry_time parameter for videos"),
		),
		mcp.WithString("composer_session_events_log",
			mcp.Description("composer_session_events_log parameter for videos"),
		),
		mcp.WithString("composer_session_id",
			mcp.Description("composer_session_id parameter for videos"),
		),
		mcp.WithString("composer_source_surface",
			mcp.Description("composer_source_surface parameter for videos"),
		),
		mcp.WithString("composer_type",
			mcp.Description("composer_type parameter for videos"),
		),
		mcp.WithString("container_type",
			mcp.Description("container_type parameter for videos"),
			mcp.Enum("ACO_VIDEO_VARIATION", "ADS_AI_GENERATED", "AD_BREAK_PREVIEW", "AD_DERIVATIVE", "AD_LIBRARY_WATERMARK", "ALBUM_MULTIMEDIA_POST", "ALOHA_SUPERFRAME", "APP_REREVIEW_SCREENCAST", "APP_REVIEW_SCREENCAST", "ASSET_MANAGER", "ATLAS_VIDEO", "AUDIO_BROADCAST", "AUDIO_COMMENT", "BROADCAST", "CANVAS", "CMS_MEDIA_MANAGER", "CONTAINED_POST_ATTACHMENT", "CONTAINED_POST_AUDIO_BROADCAST", "CONTAINED_POST_COPYRIGHT_REFERENCE_BROADCAST", "COPYRIGHT_REFERENCE_BROADCAST", "COPYRIGHT_REFERENCE_IG_XPOST_VIDEO", "COPYRIGHT_REFERENCE_VIDEO", "CREATION_ML_PRECREATION", "CREATOR_FAN_CHALLENGE", "CREATOR_STOREFRONT_PERSONALIZED_VIDEO", "DATAGENIX_VIDEO", "DCO_AD_ASSET_FEED", "DCO_AUTOGEN_VIDEO", "DCO_TRIMMED_VIDEO", "DIM_SUM", "DIRECTED_POST_ATTACHMENT", "DIRECT_INBOX", "DROPS_SHOPPING_EVENT_PAGE", "DYNAMIC_ITEM_VIDEO", "DYNAMIC_TEMPLATE_VIDEO", "EVENT_COVER_VIDEO", "EVENT_TOUR", "FACECAST_DVR", "FB_AVATAR_ANIMATED_SATP", "FB_COLLECTIBLE_VIDEO", "FB_SHORTS", "FB_SHORTS_CONTENT_REMIXABLE", "FB_SHORTS_GROUP_POST", "FB_SHORTS_LINKED_PRODUCT", "FB_SHORTS_PMV_POST", "FB_SHORTS_POST", "FB_SHORTS_REMIX_POST", "FUNDRAISER_COVER_VIDEO", "GAME_CLIP", "GIF_TO_VIDEO", "GOODWILL_ANNIVERSARY_DEPRECATED", "GOODWILL_ANNIVERSARY_PROMOTION_DEPRECATED", "GOODWILL_VIDEO_CONTAINED_SHARE", "GOODWILL_VIDEO_PROMOTION", "GOODWILL_VIDEO_SHARE", "GOODWILL_VIDEO_TOKEN_REQUIRED", "GROUP_POST", "HEURISTIC_CLUSTER_VIDEO", "HIGHLIGHT_CLIP_VIDEO", "HORIZON_WORLDS_TV", "HUDDLE_BROADCAST", "IG_REELS_XPV", "IG_STORIES_READER", "INJECTABLE", "INSPIRATION_VIDEO", "INSTAGRAM_VIDEO_COPY", "INSTANT_APPLICATION_PREVIEW", "INSTANT_ARTICLE", "ISSUE_MODULE", "LEARN", "LEGACY", "LEGACY_CONTAINED_POST_BROADCAST", "LIVE_AUDIO_ROOM_BROADCAST", "LIVE_CLIP_PREVIEW", "LIVE_CLIP_WORKCHAT", "LIVE_CREATIVE_KIT_VIDEO", "LIVE_PHOTO", "LOOK_NOW_DEPRECATED", "MARKETPLACE_LISTING_VIDEO", "MARKETPLACE_PRE_RECORDED_VIDEO", "MOMENTS_VIDEO", "MUSIC_CLIP", "MUSIC_CLIP_IN_COMMENT", "MUSIC_CLIP_IN_LIGHTWEIGHT_STATUS", "MUSIC_CLIP_IN_MSGR_NOTE", "MUSIC_CLIP_IN_POLL_OPTION", "MUSIC_CLIP_ON_DATING_PROFILE", "NEO_ASYNC_GAME_VIDEO", "NEW_CONTAINED_POST_BROADCAST", "NO_STORY", "OCULUS_CREATOR_PORTAL", "OCULUS_VENUES_BROADCAST", "ORIGINALITY_SELF_ADVOCACY", "PAGES_COVER_VIDEO", "PAGE_REVIEW_SCREENCAST", "PAGE_SLIDESHOW_VIDEO", "PAID_CONTENT_PREVIEW", "PAID_CONTENT_VIDEO", "PAID_CONTENT_VIDEO__POST", "PIXELCLOUD", "PODCAST_HIGHLIGHT", "PODCAST_ML_PREVIEW", "PODCAST_ML_PREVIEW_NO_NEWSFEED_STORY", "PODCAST_RSS", "PODCAST_RSS_EPHEMERAL", "PODCAST_RSS_NO_NEWSFEED_STORY", "PODCAST_VOICES", "PODCAST_VOICES_NO_NEWSFEED_STORY", "PREMIERE_SOURCE", "PREMIUM_MUSIC_VIDEO_CLIP", "PREMIUM_MUSIC_VIDEO_CROPPED_CLIP", "PREMIUM_MUSIC_VIDEO_NO_NEWSFEED_STORY", "PREMIUM_MUSIC_VIDEO_WITH_NEWSFEED_STORY", "PRIVATE_GALLERY_VIDEO", "PRODUCT_VIDEO", "PROFILE_COVER_VIDEO", "PROFILE_INTRO_CARD", "PROFILE_VIDEO", "PROTON", "QUICK_CLIP_WORKPLACE_POST", "QUICK_PROMOTION", "REPLACE_VIDEO", "SALES_CLIENT_INTERACTION", "SHOWREEL_NATIVE_DUMMY_VIDEO", "SLIDESHOW_ANIMOTO", "SLIDESHOW_SHAKR", "SLIDESHOW_VARIATION_VIDEO", "SOUND_PLATFORM_STREAM", "SRT_ATTACHMENT", "STORIES_VIDEO", "STORYLINE", "STORYLINE_WITH_EXTERNAL_MUSIC", "STORY_ARCHIVE_VIDEO", "STORY_CARD_TEMPLATE", "STREAM_HIGHLIGHTS_VIDEO", "TAROT_DIGEST", "TEMPORARY_UNLISTED", "TEMP_VIDEO_COPYRIGHT_SCAN", "UNLISTED", "UNLISTED_OCULUS", "VIDEO_COMMENT", "VIDEO_COMPOSITION_VARIATION", "VIDEO_CREATIVE_EDITOR_AUTOGEN_AD_VIDEO", "VIDEO_SUPERRES", "VOICES_ARTICLE_VIDEO", "VU_GENERATED_VIDEO", "WOODHENGE", "WORK_KNOWLEDGE_VIDEO", "YOUR_DAY"),
		),
		mcp.WithString("content_category",
			mcp.Description("content_category parameter for videos"),
			mcp.Enum("BEAUTY_FASHION", "BUSINESS", "CARS_TRUCKS", "COMEDY", "CUTE_ANIMALS", "ENTERTAINMENT", "FAMILY", "FOOD_HEALTH", "HOME", "LIFESTYLE", "MUSIC", "NEWS", "OTHER", "POLITICS", "SCIENCE", "SPORTS", "TECHNOLOGY", "VIDEO_GAMING"),
		),
		mcp.WithString("creative_tools",
			mcp.Description("creative_tools parameter for videos"),
		),
		mcp.WithString("description",
			mcp.Description("description parameter for videos"),
		),
		mcp.WithBoolean("embeddable",
			mcp.Description("embeddable parameter for videos"),
		),
		mcp.WithNumber("end_offset",
			mcp.Description("end_offset parameter for videos"),
		),
		mcp.WithString("fbuploader_video_file_chunk",
			mcp.Description("fbuploader_video_file_chunk parameter for videos"),
		),
		mcp.WithNumber("file_size",
			mcp.Description("file_size parameter for videos"),
		),
		mcp.WithString("file_url",
			mcp.Description("file_url parameter for videos"),
		),
		mcp.WithBoolean("fisheye_video_cropped",
			mcp.Description("fisheye_video_cropped parameter for videos"),
		),
		mcp.WithString("formatting",
			mcp.Description("formatting parameter for videos"),
			mcp.Enum("MARKDOWN", "PLAINTEXT"),
		),
		mcp.WithNumber("fov",
			mcp.Description("fov parameter for videos"),
		),
		mcp.WithNumber("front_z_rotation",
			mcp.Description("front_z_rotation parameter for videos"),
		),
		mcp.WithString("fun_fact_prompt_id",
			mcp.Description("fun_fact_prompt_id parameter for videos"),
		),
		mcp.WithNumber("fun_fact_toastee_id",
			mcp.Description("fun_fact_toastee_id parameter for videos"),
		),
		mcp.WithString("guide",
			mcp.Description("guide parameter for videos"),
		),
		mcp.WithBoolean("guide_enabled",
			mcp.Description("guide_enabled parameter for videos"),
		),
		mcp.WithNumber("initial_heading",
			mcp.Description("initial_heading parameter for videos"),
		),
		mcp.WithNumber("initial_pitch",
			mcp.Description("initial_pitch parameter for videos"),
		),
		mcp.WithString("instant_game_entry_point_data",
			mcp.Description("instant_game_entry_point_data parameter for videos"),
		),
		mcp.WithBoolean("is_boost_intended",
			mcp.Description("is_boost_intended parameter for videos"),
		),
		mcp.WithBoolean("is_explicit_share",
			mcp.Description("is_explicit_share parameter for videos"),
		),
		mcp.WithBoolean("is_group_linking_post",
			mcp.Description("is_group_linking_post parameter for videos"),
		),
		mcp.WithBoolean("is_partnership_ad",
			mcp.Description("is_partnership_ad parameter for videos"),
		),
		mcp.WithBoolean("is_voice_clip",
			mcp.Description("is_voice_clip parameter for videos"),
		),
		mcp.WithString("location_source_id",
			mcp.Description("location_source_id parameter for videos"),
		),
		mcp.WithBoolean("manual_privacy",
			mcp.Description("manual_privacy parameter for videos"),
		),
		mcp.WithString("og_action_type_id",
			mcp.Description("og_action_type_id parameter for videos"),
		),
		mcp.WithString("og_icon_id",
			mcp.Description("og_icon_id parameter for videos"),
		),
		mcp.WithString("og_object_id",
			mcp.Description("og_object_id parameter for videos"),
		),
		mcp.WithString("og_phrase",
			mcp.Description("og_phrase parameter for videos"),
		),
		mcp.WithString("og_suggestion_mechanism",
			mcp.Description("og_suggestion_mechanism parameter for videos"),
		),
		mcp.WithNumber("original_fov",
			mcp.Description("original_fov parameter for videos"),
		),
		mcp.WithString("original_projection_type",
			mcp.Description("original_projection_type parameter for videos"),
			mcp.Enum("cubemap", "equirectangular", "half_equirectangular"),
		),
		mcp.WithString("partnership_ad_ad_code",
			mcp.Description("partnership_ad_ad_code parameter for videos"),
		),
		mcp.WithNumber("publish_event_id",
			mcp.Description("publish_event_id parameter for videos"),
		),
		mcp.WithBoolean("published",
			mcp.Description("published parameter for videos"),
		),
		mcp.WithString("referenced_sticker_id",
			mcp.Description("referenced_sticker_id parameter for videos"),
		),
		mcp.WithString("replace_video_id",
			mcp.Description("replace_video_id parameter for videos"),
		),
		mcp.WithNumber("scheduled_publish_time",
			mcp.Description("scheduled_publish_time parameter for videos"),
		),
		mcp.WithString("slideshow_spec",
			mcp.Description("slideshow_spec parameter for videos"),
		),
		mcp.WithString("source",
			mcp.Description("source parameter for videos"),
		),
		mcp.WithString("source_instagram_media_id",
			mcp.Description("source_instagram_media_id parameter for videos"),
		),
		mcp.WithBoolean("spherical",
			mcp.Description("spherical parameter for videos"),
		),
		mcp.WithNumber("start_offset",
			mcp.Description("start_offset parameter for videos"),
		),
		mcp.WithString("swap_mode",
			mcp.Description("swap_mode parameter for videos"),
			mcp.Enum("replace"),
		),
		mcp.WithString("text_format_metadata",
			mcp.Description("text_format_metadata parameter for videos"),
		),
		mcp.WithString("thumb",
			mcp.Description("thumb parameter for videos"),
		),
		mcp.WithNumber("time_since_original_post",
			mcp.Description("time_since_original_post parameter for videos"),
		),
		mcp.WithString("title",
			mcp.Description("title parameter for videos"),
		),
		mcp.WithString("transcode_setting_properties",
			mcp.Description("transcode_setting_properties parameter for videos"),
		),
		mcp.WithString("unpublished_content_type",
			mcp.Description("unpublished_content_type parameter for videos"),
			mcp.Enum("ADS_POST", "DRAFT", "INLINE_CREATED", "PUBLISHED", "REVIEWABLE_BRANDED_CONTENT", "SCHEDULED", "SCHEDULED_RECURRING"),
		),
		mcp.WithString("upload_phase",
			mcp.Description("upload_phase parameter for videos"),
			mcp.Enum("cancel", "finish", "start", "transfer"),
		),
		mcp.WithString("upload_session_id",
			mcp.Description("upload_session_id parameter for videos"),
		),
		mcp.WithString("upload_setting_properties",
			mcp.Description("upload_setting_properties parameter for videos"),
		),
		mcp.WithString("video_file_chunk",
			mcp.Description("video_file_chunk parameter for videos"),
		),
		mcp.WithString("video_id_original",
			mcp.Description("video_id_original parameter for videos"),
		),
		mcp.WithNumber("video_start_time_ms",
			mcp.Description("video_start_time_ms parameter for videos"),
		),
		mcp.WithString("waterfall_id",
			mcp.Description("waterfall_id parameter for videos"),
		),
	)
	tools = append(tools, facebook_group_post_videosTool)

	// facebook_group_get_ tool
	facebook_group_get_Tool := mcp.NewTool("facebook_group_get_",
		mcp.WithDescription("GET  for Group"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("icon_size",
			mcp.Description("icon_size parameter for "),
			mcp.Enum("16", "34", "50", "68"),
		),
	)
	tools = append(tools, facebook_group_get_Tool)

	// facebook_group_post_ tool
	facebook_group_post_Tool := mcp.NewTool("facebook_group_post_",
		mcp.WithDescription("POST  for Group"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("cover",
			mcp.Description("cover parameter for "),
		),
		mcp.WithString("cover_url",
			mcp.Description("cover_url parameter for "),
		),
		mcp.WithString("description",
			mcp.Description("description parameter for "),
		),
		mcp.WithNumber("focus_x",
			mcp.Description("focus_x parameter for "),
		),
		mcp.WithNumber("focus_y",
			mcp.Description("focus_y parameter for "),
		),
		mcp.WithString("group_icon",
			mcp.Description("group_icon parameter for "),
		),
		mcp.WithBoolean("is_official_group",
			mcp.Description("is_official_group parameter for "),
		),
		mcp.WithString("join_setting",
			mcp.Description("join_setting parameter for "),
			mcp.Enum("ADMIN_ONLY", "ANYONE", "NONE"),
		),
		mcp.WithString("name",
			mcp.Description("name parameter for "),
		),
		mcp.WithBoolean("no_feed_story",
			mcp.Description("no_feed_story parameter for "),
		),
		mcp.WithNumber("offset_y",
			mcp.Description("offset_y parameter for "),
		),
		mcp.WithString("post_permissions",
			mcp.Description("post_permissions parameter for "),
			mcp.Enum("ADMIN_ONLY", "ANYONE", "NONE"),
		),
		mcp.WithBoolean("post_requires_admin_approval",
			mcp.Description("post_requires_admin_approval parameter for "),
		),
		mcp.WithString("privacy",
			mcp.Description("privacy parameter for "),
		),
		mcp.WithString("purpose",
			mcp.Description("purpose parameter for "),
			mcp.Enum("CASUAL", "COWORKERS", "CUSTOM", "FOR_SALE", "FOR_WORK", "GAME", "HEALTH_SUPPORT", "JOBS", "LEARNING", "NONE", "PARENTING", "STREAMER", "WORK_ANNOUNCEMENT", "WORK_DEMO_GROUP", "WORK_DISCUSSION", "WORK_EPHEMERAL", "WORK_FEEDBACK", "WORK_FOR_SALE", "WORK_GARDEN", "WORK_INTEGRITY", "WORK_LEARNING", "WORK_MENTORSHIP", "WORK_MULTI_COMPANY", "WORK_RECRUITING", "WORK_SOCIAL", "WORK_STAGES", "WORK_TEAM", "WORK_TEAMWORK"),
		),
		mcp.WithBoolean("update_view_time",
			mcp.Description("update_view_time parameter for "),
		),
	)
	tools = append(tools, facebook_group_post_Tool)


	return tools
}

// Group handlers


// HandleFacebook_group_delete_admins handles the facebook_group_delete_admins tool
func HandleFacebook_group_delete_admins(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: uid
	uid, err := request.RequireInt("uid")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter uid: %v", err)), nil
	}
	args["uid"] = uid



	// Call the client method
	result, err := client.Facebook_group_delete_admins(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_group_delete_admins: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_group_post_admins handles the facebook_group_post_admins tool
func HandleFacebook_group_post_admins(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: uid
	uid, err := request.RequireInt("uid")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter uid: %v", err)), nil
	}
	args["uid"] = uid



	// Call the client method
	result, err := client.Facebook_group_post_admins(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_group_post_admins: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_group_get_albums handles the facebook_group_get_albums tool
func HandleFacebook_group_get_albums(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_group_get_albums(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_group_get_albums: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_group_get_docs handles the facebook_group_get_docs tool
func HandleFacebook_group_get_docs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_group_get_docs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_group_get_docs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_group_get_events handles the facebook_group_get_events tool
func HandleFacebook_group_get_events(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_group_get_events(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_group_get_events: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_group_get_feed handles the facebook_group_get_feed tool
func HandleFacebook_group_get_feed(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: include_hidden
	if val := request.GetBool("include_hidden", false); val {
		args["include_hidden"] = val
	}

	// Optional: q
	if val := request.GetString("q", ""); val != "" {
		args["q"] = val
	}

	// Optional: show_expired
	if val := request.GetBool("show_expired", false); val {
		args["show_expired"] = val
	}

	// Optional: since
	if val := request.GetString("since", ""); val != "" {
		args["since"] = val
	}

	// Optional: until
	if val := request.GetString("until", ""); val != "" {
		args["until"] = val
	}

	// Optional: with
	if val := request.GetString("with", ""); val != "" {
		args["with"] = val
	}



	// Call the client method
	result, err := client.Facebook_group_get_feed(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_group_get_feed: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_group_post_feed handles the facebook_group_post_feed tool
func HandleFacebook_group_post_feed(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: actions
	// object type - using string
	if val := request.GetString("actions", ""); val != "" {
		args["actions"] = val
	}

	// Optional: album_id
	if val := request.GetString("album_id", ""); val != "" {
		args["album_id"] = val
	}

	// Optional: android_key_hash
	if val := request.GetString("android_key_hash", ""); val != "" {
		args["android_key_hash"] = val
	}

	// Optional: application_id
	if val := request.GetString("application_id", ""); val != "" {
		args["application_id"] = val
	}

	// Optional: asked_fun_fact_prompt_id
	if val := request.GetInt("asked_fun_fact_prompt_id", 0); val != 0 {
		args["asked_fun_fact_prompt_id"] = val
	}

	// Optional: asset3d_id
	if val := request.GetString("asset3d_id", ""); val != "" {
		args["asset3d_id"] = val
	}

	// Optional: associated_id
	if val := request.GetString("associated_id", ""); val != "" {
		args["associated_id"] = val
	}

	// Optional: attach_place_suggestion
	if val := request.GetBool("attach_place_suggestion", false); val {
		args["attach_place_suggestion"] = val
	}

	// Optional: attached_media
	// array type - using string
	if val := request.GetString("attached_media", ""); val != "" {
		args["attached_media"] = val
	}

	// Optional: audience_exp
	if val := request.GetBool("audience_exp", false); val {
		args["audience_exp"] = val
	}

	// Optional: backdated_time
	if val := request.GetString("backdated_time", ""); val != "" {
		args["backdated_time"] = val
	}

	// Optional: backdated_time_granularity
	if val := request.GetString("backdated_time_granularity", ""); val != "" {
		args["backdated_time_granularity"] = val
	}

	// Optional: breaking_news
	if val := request.GetBool("breaking_news", false); val {
		args["breaking_news"] = val
	}

	// Optional: breaking_news_expiration
	if val := request.GetInt("breaking_news_expiration", 0); val != 0 {
		args["breaking_news_expiration"] = val
	}

	// Optional: call_to_action
	// object type - using string
	if val := request.GetString("call_to_action", ""); val != "" {
		args["call_to_action"] = val
	}

	// Optional: caption
	if val := request.GetString("caption", ""); val != "" {
		args["caption"] = val
	}

	// Optional: child_attachments
	// array type - using string
	if val := request.GetString("child_attachments", ""); val != "" {
		args["child_attachments"] = val
	}

	// Optional: client_mutation_id
	if val := request.GetString("client_mutation_id", ""); val != "" {
		args["client_mutation_id"] = val
	}

	// Optional: composer_entry_picker
	if val := request.GetString("composer_entry_picker", ""); val != "" {
		args["composer_entry_picker"] = val
	}

	// Optional: composer_entry_point
	if val := request.GetString("composer_entry_point", ""); val != "" {
		args["composer_entry_point"] = val
	}

	// Optional: composer_entry_time
	if val := request.GetInt("composer_entry_time", 0); val != 0 {
		args["composer_entry_time"] = val
	}

	// Optional: composer_session_events_log
	if val := request.GetString("composer_session_events_log", ""); val != "" {
		args["composer_session_events_log"] = val
	}

	// Optional: composer_session_id
	if val := request.GetString("composer_session_id", ""); val != "" {
		args["composer_session_id"] = val
	}

	// Optional: composer_source_surface
	if val := request.GetString("composer_source_surface", ""); val != "" {
		args["composer_source_surface"] = val
	}

	// Optional: composer_type
	if val := request.GetString("composer_type", ""); val != "" {
		args["composer_type"] = val
	}

	// Optional: connection_class
	if val := request.GetString("connection_class", ""); val != "" {
		args["connection_class"] = val
	}

	// Optional: content_attachment
	if val := request.GetString("content_attachment", ""); val != "" {
		args["content_attachment"] = val
	}

	// Optional: coordinates
	// object type - using string
	if val := request.GetString("coordinates", ""); val != "" {
		args["coordinates"] = val
	}

	// Optional: cta_link
	if val := request.GetString("cta_link", ""); val != "" {
		args["cta_link"] = val
	}

	// Optional: cta_type
	if val := request.GetString("cta_type", ""); val != "" {
		args["cta_type"] = val
	}

	// Optional: description
	if val := request.GetString("description", ""); val != "" {
		args["description"] = val
	}

	// Optional: direct_share_status
	if val := request.GetInt("direct_share_status", 0); val != 0 {
		args["direct_share_status"] = val
	}

	// Optional: expanded_height
	if val := request.GetInt("expanded_height", 0); val != 0 {
		args["expanded_height"] = val
	}

	// Optional: expanded_width
	if val := request.GetInt("expanded_width", 0); val != 0 {
		args["expanded_width"] = val
	}

	// Optional: feed_targeting
	// object type - using string
	if val := request.GetString("feed_targeting", ""); val != "" {
		args["feed_targeting"] = val
	}

	// Optional: formatting
	if val := request.GetString("formatting", ""); val != "" {
		args["formatting"] = val
	}

	// Optional: fun_fact_prompt_id
	if val := request.GetString("fun_fact_prompt_id", ""); val != "" {
		args["fun_fact_prompt_id"] = val
	}

	// Optional: fun_fact_toastee_id
	if val := request.GetInt("fun_fact_toastee_id", 0); val != 0 {
		args["fun_fact_toastee_id"] = val
	}

	// Optional: height
	if val := request.GetInt("height", 0); val != 0 {
		args["height"] = val
	}

	// Optional: home_checkin_city_id
	// object type - using string
	if val := request.GetString("home_checkin_city_id", ""); val != "" {
		args["home_checkin_city_id"] = val
	}

	// Optional: image_crops
	if val := request.GetString("image_crops", ""); val != "" {
		args["image_crops"] = val
	}

	// Optional: implicit_with_tags
	// array type - using string
	if val := request.GetString("implicit_with_tags", ""); val != "" {
		args["implicit_with_tags"] = val
	}

	// Optional: instant_game_entry_point_data
	if val := request.GetString("instant_game_entry_point_data", ""); val != "" {
		args["instant_game_entry_point_data"] = val
	}

	// Optional: ios_bundle_id
	if val := request.GetString("ios_bundle_id", ""); val != "" {
		args["ios_bundle_id"] = val
	}

	// Optional: is_backout_draft
	if val := request.GetBool("is_backout_draft", false); val {
		args["is_backout_draft"] = val
	}

	// Optional: is_boost_intended
	if val := request.GetBool("is_boost_intended", false); val {
		args["is_boost_intended"] = val
	}

	// Optional: is_explicit_location
	if val := request.GetBool("is_explicit_location", false); val {
		args["is_explicit_location"] = val
	}

	// Optional: is_explicit_share
	if val := request.GetBool("is_explicit_share", false); val {
		args["is_explicit_share"] = val
	}

	// Optional: is_group_linking_post
	if val := request.GetBool("is_group_linking_post", false); val {
		args["is_group_linking_post"] = val
	}

	// Optional: is_photo_container
	if val := request.GetBool("is_photo_container", false); val {
		args["is_photo_container"] = val
	}

	// Optional: link
	if val := request.GetString("link", ""); val != "" {
		args["link"] = val
	}

	// Optional: location_source_id
	if val := request.GetString("location_source_id", ""); val != "" {
		args["location_source_id"] = val
	}

	// Optional: manual_privacy
	if val := request.GetBool("manual_privacy", false); val {
		args["manual_privacy"] = val
	}

	// Optional: message
	if val := request.GetString("message", ""); val != "" {
		args["message"] = val
	}

	// Optional: multi_share_end_card
	if val := request.GetBool("multi_share_end_card", false); val {
		args["multi_share_end_card"] = val
	}

	// Optional: multi_share_optimized
	if val := request.GetBool("multi_share_optimized", false); val {
		args["multi_share_optimized"] = val
	}

	// Optional: name
	if val := request.GetString("name", ""); val != "" {
		args["name"] = val
	}

	// Optional: nectar_module
	if val := request.GetString("nectar_module", ""); val != "" {
		args["nectar_module"] = val
	}

	// Optional: object_attachment
	if val := request.GetString("object_attachment", ""); val != "" {
		args["object_attachment"] = val
	}

	// Optional: og_action_type_id
	if val := request.GetString("og_action_type_id", ""); val != "" {
		args["og_action_type_id"] = val
	}

	// Optional: og_hide_object_attachment
	if val := request.GetBool("og_hide_object_attachment", false); val {
		args["og_hide_object_attachment"] = val
	}

	// Optional: og_icon_id
	if val := request.GetString("og_icon_id", ""); val != "" {
		args["og_icon_id"] = val
	}

	// Optional: og_object_id
	if val := request.GetString("og_object_id", ""); val != "" {
		args["og_object_id"] = val
	}

	// Optional: og_phrase
	if val := request.GetString("og_phrase", ""); val != "" {
		args["og_phrase"] = val
	}

	// Optional: og_set_profile_badge
	if val := request.GetBool("og_set_profile_badge", false); val {
		args["og_set_profile_badge"] = val
	}

	// Optional: og_suggestion_mechanism
	if val := request.GetString("og_suggestion_mechanism", ""); val != "" {
		args["og_suggestion_mechanism"] = val
	}

	// Optional: page_recommendation
	if val := request.GetString("page_recommendation", ""); val != "" {
		args["page_recommendation"] = val
	}

	// Optional: picture
	if val := request.GetString("picture", ""); val != "" {
		args["picture"] = val
	}

	// Optional: place
	// object type - using string
	if val := request.GetString("place", ""); val != "" {
		args["place"] = val
	}

	// Optional: place_attachment_setting
	if val := request.GetString("place_attachment_setting", ""); val != "" {
		args["place_attachment_setting"] = val
	}

	// Optional: place_list
	if val := request.GetString("place_list", ""); val != "" {
		args["place_list"] = val
	}

	// Optional: place_list_data
	if val := request.GetString("place_list_data", ""); val != "" {
		args["place_list_data"] = val
	}

	// Optional: post_surfaces_blacklist
	// array type - using string
	if val := request.GetString("post_surfaces_blacklist", ""); val != "" {
		args["post_surfaces_blacklist"] = val
	}

	// Optional: posting_to_redspace
	if val := request.GetString("posting_to_redspace", ""); val != "" {
		args["posting_to_redspace"] = val
	}

	// Optional: privacy
	if val := request.GetString("privacy", ""); val != "" {
		args["privacy"] = val
	}

	// Optional: prompt_id
	if val := request.GetString("prompt_id", ""); val != "" {
		args["prompt_id"] = val
	}

	// Optional: prompt_tracking_string
	if val := request.GetString("prompt_tracking_string", ""); val != "" {
		args["prompt_tracking_string"] = val
	}

	// Optional: properties
	// object type - using string
	if val := request.GetString("properties", ""); val != "" {
		args["properties"] = val
	}

	// Optional: proxied_app_id
	if val := request.GetString("proxied_app_id", ""); val != "" {
		args["proxied_app_id"] = val
	}

	// Optional: publish_event_id
	if val := request.GetInt("publish_event_id", 0); val != 0 {
		args["publish_event_id"] = val
	}

	// Optional: published
	if val := request.GetBool("published", false); val {
		args["published"] = val
	}

	// Optional: quote
	if val := request.GetString("quote", ""); val != "" {
		args["quote"] = val
	}

	// Optional: ref
	// array type - using string
	if val := request.GetString("ref", ""); val != "" {
		args["ref"] = val
	}

	// Optional: referenceable_image_ids
	// array type - using string
	if val := request.GetString("referenceable_image_ids", ""); val != "" {
		args["referenceable_image_ids"] = val
	}

	// Optional: referral_id
	if val := request.GetString("referral_id", ""); val != "" {
		args["referral_id"] = val
	}

	// Optional: scheduled_publish_time
	if val := request.GetString("scheduled_publish_time", ""); val != "" {
		args["scheduled_publish_time"] = val
	}

	// Optional: source
	if val := request.GetString("source", ""); val != "" {
		args["source"] = val
	}

	// Optional: sponsor_id
	if val := request.GetString("sponsor_id", ""); val != "" {
		args["sponsor_id"] = val
	}

	// Optional: sponsor_relationship
	if val := request.GetInt("sponsor_relationship", 0); val != 0 {
		args["sponsor_relationship"] = val
	}

	// Optional: suggested_place_id
	// object type - using string
	if val := request.GetString("suggested_place_id", ""); val != "" {
		args["suggested_place_id"] = val
	}

	// Optional: tags
	// array type - using string
	if val := request.GetString("tags", ""); val != "" {
		args["tags"] = val
	}

	// Optional: target_surface
	if val := request.GetString("target_surface", ""); val != "" {
		args["target_surface"] = val
	}

	// Optional: targeting
	// object type - using string
	if val := request.GetString("targeting", ""); val != "" {
		args["targeting"] = val
	}

	// Optional: text_format_metadata
	if val := request.GetString("text_format_metadata", ""); val != "" {
		args["text_format_metadata"] = val
	}

	// Optional: text_format_preset_id
	if val := request.GetString("text_format_preset_id", ""); val != "" {
		args["text_format_preset_id"] = val
	}

	// Optional: text_only_place
	if val := request.GetString("text_only_place", ""); val != "" {
		args["text_only_place"] = val
	}

	// Optional: thumbnail
	if val := request.GetString("thumbnail", ""); val != "" {
		args["thumbnail"] = val
	}

	// Optional: time_since_original_post
	if val := request.GetInt("time_since_original_post", 0); val != 0 {
		args["time_since_original_post"] = val
	}

	// Optional: title
	if val := request.GetString("title", ""); val != "" {
		args["title"] = val
	}

	// Optional: tracking_info
	if val := request.GetString("tracking_info", ""); val != "" {
		args["tracking_info"] = val
	}

	// Optional: unpublished_content_type
	if val := request.GetString("unpublished_content_type", ""); val != "" {
		args["unpublished_content_type"] = val
	}

	// Optional: user_selected_tags
	if val := request.GetBool("user_selected_tags", false); val {
		args["user_selected_tags"] = val
	}

	// Optional: video_start_time_ms
	if val := request.GetInt("video_start_time_ms", 0); val != 0 {
		args["video_start_time_ms"] = val
	}

	// Optional: viewer_coordinates
	// object type - using string
	if val := request.GetString("viewer_coordinates", ""); val != "" {
		args["viewer_coordinates"] = val
	}

	// Optional: width
	if val := request.GetInt("width", 0); val != 0 {
		args["width"] = val
	}



	// Call the client method
	result, err := client.Facebook_group_post_feed(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_group_post_feed: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_group_get_files handles the facebook_group_get_files tool
func HandleFacebook_group_get_files(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_group_get_files(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_group_get_files: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_group_get_groups handles the facebook_group_get_groups tool
func HandleFacebook_group_get_groups(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_group_get_groups(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_group_get_groups: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_group_post_groups handles the facebook_group_post_groups tool
func HandleFacebook_group_post_groups(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: admin
	if val := request.GetInt("admin", 0); val != 0 {
		args["admin"] = val
	}

	// Optional: description
	if val := request.GetString("description", ""); val != "" {
		args["description"] = val
	}

	// Optional: group_icon_id
	if val := request.GetString("group_icon_id", ""); val != "" {
		args["group_icon_id"] = val
	}

	// Optional: group_type
	if val := request.GetString("group_type", ""); val != "" {
		args["group_type"] = val
	}

	// Optional: join_setting
	if val := request.GetString("join_setting", ""); val != "" {
		args["join_setting"] = val
	}

	// Required: name
	name, err := request.RequireString("name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter name: %v", err)), nil
	}
	args["name"] = name

	// Optional: parent_id
	if val := request.GetString("parent_id", ""); val != "" {
		args["parent_id"] = val
	}

	// Optional: post_permissions
	if val := request.GetString("post_permissions", ""); val != "" {
		args["post_permissions"] = val
	}

	// Optional: post_requires_admin_approval
	if val := request.GetBool("post_requires_admin_approval", false); val {
		args["post_requires_admin_approval"] = val
	}

	// Optional: privacy
	if val := request.GetString("privacy", ""); val != "" {
		args["privacy"] = val
	}

	// Optional: ref
	if val := request.GetString("ref", ""); val != "" {
		args["ref"] = val
	}



	// Call the client method
	result, err := client.Facebook_group_post_groups(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_group_post_groups: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_group_get_live_videos handles the facebook_group_get_live_videos tool
func HandleFacebook_group_get_live_videos(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: broadcast_status
	// array type - using string
	if val := request.GetString("broadcast_status", ""); val != "" {
		args["broadcast_status"] = val
	}

	// Optional: source
	if val := request.GetString("source", ""); val != "" {
		args["source"] = val
	}



	// Call the client method
	result, err := client.Facebook_group_get_live_videos(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_group_get_live_videos: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_group_post_live_videos handles the facebook_group_post_live_videos tool
func HandleFacebook_group_post_live_videos(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: content_tags
	// array type - using string
	if val := request.GetString("content_tags", ""); val != "" {
		args["content_tags"] = val
	}

	// Optional: description
	if val := request.GetString("description", ""); val != "" {
		args["description"] = val
	}

	// Optional: enable_backup_ingest
	if val := request.GetBool("enable_backup_ingest", false); val {
		args["enable_backup_ingest"] = val
	}

	// Optional: encoding_settings
	if val := request.GetString("encoding_settings", ""); val != "" {
		args["encoding_settings"] = val
	}

	// Optional: event_params
	// object type - using string
	if val := request.GetString("event_params", ""); val != "" {
		args["event_params"] = val
	}

	// Optional: fisheye_video_cropped
	if val := request.GetBool("fisheye_video_cropped", false); val {
		args["fisheye_video_cropped"] = val
	}

	// Optional: front_z_rotation
	if val := request.GetFloat("front_z_rotation", 0); val != 0 {
		args["front_z_rotation"] = val
	}

	// Optional: is_audio_only
	if val := request.GetBool("is_audio_only", false); val {
		args["is_audio_only"] = val
	}

	// Optional: is_spherical
	if val := request.GetBool("is_spherical", false); val {
		args["is_spherical"] = val
	}

	// Optional: original_fov
	if val := request.GetInt("original_fov", 0); val != 0 {
		args["original_fov"] = val
	}

	// Optional: privacy
	if val := request.GetString("privacy", ""); val != "" {
		args["privacy"] = val
	}

	// Optional: projection
	if val := request.GetString("projection", ""); val != "" {
		args["projection"] = val
	}

	// Optional: published
	if val := request.GetBool("published", false); val {
		args["published"] = val
	}

	// Optional: schedule_custom_profile_image
	if val := request.GetString("schedule_custom_profile_image", ""); val != "" {
		args["schedule_custom_profile_image"] = val
	}

	// Optional: spatial_audio_format
	if val := request.GetString("spatial_audio_format", ""); val != "" {
		args["spatial_audio_format"] = val
	}

	// Optional: status
	if val := request.GetString("status", ""); val != "" {
		args["status"] = val
	}

	// Optional: stereoscopic_mode
	if val := request.GetString("stereoscopic_mode", ""); val != "" {
		args["stereoscopic_mode"] = val
	}

	// Optional: stop_on_delete_stream
	if val := request.GetBool("stop_on_delete_stream", false); val {
		args["stop_on_delete_stream"] = val
	}

	// Optional: stream_type
	if val := request.GetString("stream_type", ""); val != "" {
		args["stream_type"] = val
	}

	// Optional: title
	if val := request.GetString("title", ""); val != "" {
		args["title"] = val
	}



	// Call the client method
	result, err := client.Facebook_group_post_live_videos(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_group_post_live_videos: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_group_delete_members handles the facebook_group_delete_members tool
func HandleFacebook_group_delete_members(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: email
	if val := request.GetString("email", ""); val != "" {
		args["email"] = val
	}

	// Optional: member
	if val := request.GetInt("member", 0); val != 0 {
		args["member"] = val
	}



	// Call the client method
	result, err := client.Facebook_group_delete_members(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_group_delete_members: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_group_post_members handles the facebook_group_post_members tool
func HandleFacebook_group_post_members(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: email
	if val := request.GetString("email", ""); val != "" {
		args["email"] = val
	}

	// Optional: from
	if val := request.GetInt("from", 0); val != 0 {
		args["from"] = val
	}

	// Optional: member
	if val := request.GetInt("member", 0); val != 0 {
		args["member"] = val
	}

	// Optional: rate
	if val := request.GetInt("rate", 0); val != 0 {
		args["rate"] = val
	}

	// Optional: source
	if val := request.GetString("source", ""); val != "" {
		args["source"] = val
	}



	// Call the client method
	result, err := client.Facebook_group_post_members(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_group_post_members: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_group_get_opted_in_members handles the facebook_group_get_opted_in_members tool
func HandleFacebook_group_get_opted_in_members(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_group_get_opted_in_members(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_group_get_opted_in_members: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_group_post_photos handles the facebook_group_post_photos tool
func HandleFacebook_group_post_photos(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: aid
	if val := request.GetString("aid", ""); val != "" {
		args["aid"] = val
	}

	// Optional: allow_spherical_photo
	if val := request.GetBool("allow_spherical_photo", false); val {
		args["allow_spherical_photo"] = val
	}

	// Optional: alt_text_custom
	if val := request.GetString("alt_text_custom", ""); val != "" {
		args["alt_text_custom"] = val
	}

	// Optional: android_key_hash
	if val := request.GetString("android_key_hash", ""); val != "" {
		args["android_key_hash"] = val
	}

	// Optional: application_id
	if val := request.GetString("application_id", ""); val != "" {
		args["application_id"] = val
	}

	// Optional: attempt
	if val := request.GetInt("attempt", 0); val != 0 {
		args["attempt"] = val
	}

	// Optional: audience_exp
	if val := request.GetBool("audience_exp", false); val {
		args["audience_exp"] = val
	}

	// Optional: backdated_time
	if val := request.GetString("backdated_time", ""); val != "" {
		args["backdated_time"] = val
	}

	// Optional: backdated_time_granularity
	if val := request.GetString("backdated_time_granularity", ""); val != "" {
		args["backdated_time_granularity"] = val
	}

	// Optional: caption
	if val := request.GetString("caption", ""); val != "" {
		args["caption"] = val
	}

	// Optional: composer_session_id
	if val := request.GetString("composer_session_id", ""); val != "" {
		args["composer_session_id"] = val
	}

	// Optional: direct_share_status
	if val := request.GetInt("direct_share_status", 0); val != 0 {
		args["direct_share_status"] = val
	}

	// Optional: feed_targeting
	// object type - using string
	if val := request.GetString("feed_targeting", ""); val != "" {
		args["feed_targeting"] = val
	}

	// Optional: filter_type
	if val := request.GetInt("filter_type", 0); val != 0 {
		args["filter_type"] = val
	}

	// Optional: full_res_is_coming_later
	if val := request.GetBool("full_res_is_coming_later", false); val {
		args["full_res_is_coming_later"] = val
	}

	// Optional: initial_view_heading_override_degrees
	if val := request.GetInt("initial_view_heading_override_degrees", 0); val != 0 {
		args["initial_view_heading_override_degrees"] = val
	}

	// Optional: initial_view_pitch_override_degrees
	if val := request.GetInt("initial_view_pitch_override_degrees", 0); val != 0 {
		args["initial_view_pitch_override_degrees"] = val
	}

	// Optional: initial_view_vertical_fov_override_degrees
	if val := request.GetInt("initial_view_vertical_fov_override_degrees", 0); val != 0 {
		args["initial_view_vertical_fov_override_degrees"] = val
	}

	// Optional: ios_bundle_id
	if val := request.GetString("ios_bundle_id", ""); val != "" {
		args["ios_bundle_id"] = val
	}

	// Optional: is_explicit_location
	if val := request.GetBool("is_explicit_location", false); val {
		args["is_explicit_location"] = val
	}

	// Optional: is_explicit_place
	if val := request.GetBool("is_explicit_place", false); val {
		args["is_explicit_place"] = val
	}

	// Optional: manual_privacy
	if val := request.GetBool("manual_privacy", false); val {
		args["manual_privacy"] = val
	}

	// Optional: message
	if val := request.GetString("message", ""); val != "" {
		args["message"] = val
	}

	// Optional: name
	if val := request.GetString("name", ""); val != "" {
		args["name"] = val
	}

	// Optional: no_story
	if val := request.GetBool("no_story", false); val {
		args["no_story"] = val
	}

	// Optional: offline_id
	if val := request.GetInt("offline_id", 0); val != 0 {
		args["offline_id"] = val
	}

	// Optional: og_action_type_id
	if val := request.GetString("og_action_type_id", ""); val != "" {
		args["og_action_type_id"] = val
	}

	// Optional: og_icon_id
	if val := request.GetString("og_icon_id", ""); val != "" {
		args["og_icon_id"] = val
	}

	// Optional: og_object_id
	if val := request.GetString("og_object_id", ""); val != "" {
		args["og_object_id"] = val
	}

	// Optional: og_phrase
	if val := request.GetString("og_phrase", ""); val != "" {
		args["og_phrase"] = val
	}

	// Optional: og_set_profile_badge
	if val := request.GetBool("og_set_profile_badge", false); val {
		args["og_set_profile_badge"] = val
	}

	// Optional: og_suggestion_mechanism
	if val := request.GetString("og_suggestion_mechanism", ""); val != "" {
		args["og_suggestion_mechanism"] = val
	}

	// Optional: place
	// object type - using string
	if val := request.GetString("place", ""); val != "" {
		args["place"] = val
	}

	// Optional: privacy
	if val := request.GetString("privacy", ""); val != "" {
		args["privacy"] = val
	}

	// Optional: profile_id
	if val := request.GetInt("profile_id", 0); val != 0 {
		args["profile_id"] = val
	}

	// Optional: provenance_info
	if val := request.GetString("provenance_info", ""); val != "" {
		args["provenance_info"] = val
	}

	// Optional: proxied_app_id
	if val := request.GetString("proxied_app_id", ""); val != "" {
		args["proxied_app_id"] = val
	}

	// Optional: published
	if val := request.GetBool("published", false); val {
		args["published"] = val
	}

	// Optional: qn
	if val := request.GetString("qn", ""); val != "" {
		args["qn"] = val
	}

	// Optional: spherical_metadata
	if val := request.GetString("spherical_metadata", ""); val != "" {
		args["spherical_metadata"] = val
	}

	// Optional: sponsor_id
	if val := request.GetString("sponsor_id", ""); val != "" {
		args["sponsor_id"] = val
	}

	// Optional: sponsor_relationship
	if val := request.GetInt("sponsor_relationship", 0); val != 0 {
		args["sponsor_relationship"] = val
	}

	// Optional: tags
	// array type - using string
	if val := request.GetString("tags", ""); val != "" {
		args["tags"] = val
	}

	// Optional: target_id
	if val := request.GetInt("target_id", 0); val != 0 {
		args["target_id"] = val
	}

	// Optional: targeting
	// object type - using string
	if val := request.GetString("targeting", ""); val != "" {
		args["targeting"] = val
	}

	// Optional: time_since_original_post
	if val := request.GetInt("time_since_original_post", 0); val != 0 {
		args["time_since_original_post"] = val
	}

	// Optional: uid
	if val := request.GetInt("uid", 0); val != 0 {
		args["uid"] = val
	}

	// Optional: unpublished_content_type
	if val := request.GetString("unpublished_content_type", ""); val != "" {
		args["unpublished_content_type"] = val
	}

	// Optional: url
	if val := request.GetString("url", ""); val != "" {
		args["url"] = val
	}

	// Optional: user_selected_tags
	if val := request.GetBool("user_selected_tags", false); val {
		args["user_selected_tags"] = val
	}

	// Optional: vault_image_id
	if val := request.GetString("vault_image_id", ""); val != "" {
		args["vault_image_id"] = val
	}



	// Call the client method
	result, err := client.Facebook_group_post_photos(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_group_post_photos: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_group_get_picture handles the facebook_group_get_picture tool
func HandleFacebook_group_get_picture(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: height
	if val := request.GetInt("height", 0); val != 0 {
		args["height"] = val
	}

	// Optional: redirect
	if val := request.GetBool("redirect", false); val {
		args["redirect"] = val
	}

	// Optional: type
	if val := request.GetString("type", ""); val != "" {
		args["type"] = val
	}

	// Optional: width
	if val := request.GetInt("width", 0); val != 0 {
		args["width"] = val
	}



	// Call the client method
	result, err := client.Facebook_group_get_picture(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_group_get_picture: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_group_get_videos handles the facebook_group_get_videos tool
func HandleFacebook_group_get_videos(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: type
	if val := request.GetString("type", ""); val != "" {
		args["type"] = val
	}



	// Call the client method
	result, err := client.Facebook_group_get_videos(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_group_get_videos: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_group_post_videos handles the facebook_group_post_videos tool
func HandleFacebook_group_post_videos(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: application_id
	if val := request.GetString("application_id", ""); val != "" {
		args["application_id"] = val
	}

	// Optional: asked_fun_fact_prompt_id
	if val := request.GetInt("asked_fun_fact_prompt_id", 0); val != 0 {
		args["asked_fun_fact_prompt_id"] = val
	}

	// Optional: audio_story_wave_animation_handle
	if val := request.GetString("audio_story_wave_animation_handle", ""); val != "" {
		args["audio_story_wave_animation_handle"] = val
	}

	// Optional: composer_entry_picker
	if val := request.GetString("composer_entry_picker", ""); val != "" {
		args["composer_entry_picker"] = val
	}

	// Optional: composer_entry_point
	if val := request.GetString("composer_entry_point", ""); val != "" {
		args["composer_entry_point"] = val
	}

	// Optional: composer_entry_time
	if val := request.GetInt("composer_entry_time", 0); val != 0 {
		args["composer_entry_time"] = val
	}

	// Optional: composer_session_events_log
	if val := request.GetString("composer_session_events_log", ""); val != "" {
		args["composer_session_events_log"] = val
	}

	// Optional: composer_session_id
	if val := request.GetString("composer_session_id", ""); val != "" {
		args["composer_session_id"] = val
	}

	// Optional: composer_source_surface
	if val := request.GetString("composer_source_surface", ""); val != "" {
		args["composer_source_surface"] = val
	}

	// Optional: composer_type
	if val := request.GetString("composer_type", ""); val != "" {
		args["composer_type"] = val
	}

	// Optional: container_type
	if val := request.GetString("container_type", ""); val != "" {
		args["container_type"] = val
	}

	// Optional: content_category
	if val := request.GetString("content_category", ""); val != "" {
		args["content_category"] = val
	}

	// Optional: creative_tools
	if val := request.GetString("creative_tools", ""); val != "" {
		args["creative_tools"] = val
	}

	// Optional: description
	if val := request.GetString("description", ""); val != "" {
		args["description"] = val
	}

	// Optional: embeddable
	if val := request.GetBool("embeddable", false); val {
		args["embeddable"] = val
	}

	// Optional: end_offset
	if val := request.GetInt("end_offset", 0); val != 0 {
		args["end_offset"] = val
	}

	// Optional: fbuploader_video_file_chunk
	if val := request.GetString("fbuploader_video_file_chunk", ""); val != "" {
		args["fbuploader_video_file_chunk"] = val
	}

	// Optional: file_size
	if val := request.GetInt("file_size", 0); val != 0 {
		args["file_size"] = val
	}

	// Optional: file_url
	if val := request.GetString("file_url", ""); val != "" {
		args["file_url"] = val
	}

	// Optional: fisheye_video_cropped
	if val := request.GetBool("fisheye_video_cropped", false); val {
		args["fisheye_video_cropped"] = val
	}

	// Optional: formatting
	if val := request.GetString("formatting", ""); val != "" {
		args["formatting"] = val
	}

	// Optional: fov
	if val := request.GetInt("fov", 0); val != 0 {
		args["fov"] = val
	}

	// Optional: front_z_rotation
	if val := request.GetFloat("front_z_rotation", 0); val != 0 {
		args["front_z_rotation"] = val
	}

	// Optional: fun_fact_prompt_id
	if val := request.GetString("fun_fact_prompt_id", ""); val != "" {
		args["fun_fact_prompt_id"] = val
	}

	// Optional: fun_fact_toastee_id
	if val := request.GetInt("fun_fact_toastee_id", 0); val != 0 {
		args["fun_fact_toastee_id"] = val
	}

	// Optional: guide
	// array type - using string
	if val := request.GetString("guide", ""); val != "" {
		args["guide"] = val
	}

	// Optional: guide_enabled
	if val := request.GetBool("guide_enabled", false); val {
		args["guide_enabled"] = val
	}

	// Optional: initial_heading
	if val := request.GetInt("initial_heading", 0); val != 0 {
		args["initial_heading"] = val
	}

	// Optional: initial_pitch
	if val := request.GetInt("initial_pitch", 0); val != 0 {
		args["initial_pitch"] = val
	}

	// Optional: instant_game_entry_point_data
	if val := request.GetString("instant_game_entry_point_data", ""); val != "" {
		args["instant_game_entry_point_data"] = val
	}

	// Optional: is_boost_intended
	if val := request.GetBool("is_boost_intended", false); val {
		args["is_boost_intended"] = val
	}

	// Optional: is_explicit_share
	if val := request.GetBool("is_explicit_share", false); val {
		args["is_explicit_share"] = val
	}

	// Optional: is_group_linking_post
	if val := request.GetBool("is_group_linking_post", false); val {
		args["is_group_linking_post"] = val
	}

	// Optional: is_partnership_ad
	if val := request.GetBool("is_partnership_ad", false); val {
		args["is_partnership_ad"] = val
	}

	// Optional: is_voice_clip
	if val := request.GetBool("is_voice_clip", false); val {
		args["is_voice_clip"] = val
	}

	// Optional: location_source_id
	if val := request.GetString("location_source_id", ""); val != "" {
		args["location_source_id"] = val
	}

	// Optional: manual_privacy
	if val := request.GetBool("manual_privacy", false); val {
		args["manual_privacy"] = val
	}

	// Optional: og_action_type_id
	if val := request.GetString("og_action_type_id", ""); val != "" {
		args["og_action_type_id"] = val
	}

	// Optional: og_icon_id
	if val := request.GetString("og_icon_id", ""); val != "" {
		args["og_icon_id"] = val
	}

	// Optional: og_object_id
	if val := request.GetString("og_object_id", ""); val != "" {
		args["og_object_id"] = val
	}

	// Optional: og_phrase
	if val := request.GetString("og_phrase", ""); val != "" {
		args["og_phrase"] = val
	}

	// Optional: og_suggestion_mechanism
	if val := request.GetString("og_suggestion_mechanism", ""); val != "" {
		args["og_suggestion_mechanism"] = val
	}

	// Optional: original_fov
	if val := request.GetInt("original_fov", 0); val != 0 {
		args["original_fov"] = val
	}

	// Optional: original_projection_type
	if val := request.GetString("original_projection_type", ""); val != "" {
		args["original_projection_type"] = val
	}

	// Optional: partnership_ad_ad_code
	if val := request.GetString("partnership_ad_ad_code", ""); val != "" {
		args["partnership_ad_ad_code"] = val
	}

	// Optional: publish_event_id
	if val := request.GetInt("publish_event_id", 0); val != 0 {
		args["publish_event_id"] = val
	}

	// Optional: published
	if val := request.GetBool("published", false); val {
		args["published"] = val
	}

	// Optional: referenced_sticker_id
	if val := request.GetString("referenced_sticker_id", ""); val != "" {
		args["referenced_sticker_id"] = val
	}

	// Optional: replace_video_id
	if val := request.GetString("replace_video_id", ""); val != "" {
		args["replace_video_id"] = val
	}

	// Optional: scheduled_publish_time
	if val := request.GetInt("scheduled_publish_time", 0); val != 0 {
		args["scheduled_publish_time"] = val
	}

	// Optional: slideshow_spec
	if val := request.GetString("slideshow_spec", ""); val != "" {
		args["slideshow_spec"] = val
	}

	// Optional: source
	if val := request.GetString("source", ""); val != "" {
		args["source"] = val
	}

	// Optional: source_instagram_media_id
	if val := request.GetString("source_instagram_media_id", ""); val != "" {
		args["source_instagram_media_id"] = val
	}

	// Optional: spherical
	if val := request.GetBool("spherical", false); val {
		args["spherical"] = val
	}

	// Optional: start_offset
	if val := request.GetInt("start_offset", 0); val != 0 {
		args["start_offset"] = val
	}

	// Optional: swap_mode
	if val := request.GetString("swap_mode", ""); val != "" {
		args["swap_mode"] = val
	}

	// Optional: text_format_metadata
	if val := request.GetString("text_format_metadata", ""); val != "" {
		args["text_format_metadata"] = val
	}

	// Optional: thumb
	if val := request.GetString("thumb", ""); val != "" {
		args["thumb"] = val
	}

	// Optional: time_since_original_post
	if val := request.GetInt("time_since_original_post", 0); val != 0 {
		args["time_since_original_post"] = val
	}

	// Optional: title
	if val := request.GetString("title", ""); val != "" {
		args["title"] = val
	}

	// Optional: transcode_setting_properties
	if val := request.GetString("transcode_setting_properties", ""); val != "" {
		args["transcode_setting_properties"] = val
	}

	// Optional: unpublished_content_type
	if val := request.GetString("unpublished_content_type", ""); val != "" {
		args["unpublished_content_type"] = val
	}

	// Optional: upload_phase
	if val := request.GetString("upload_phase", ""); val != "" {
		args["upload_phase"] = val
	}

	// Optional: upload_session_id
	if val := request.GetString("upload_session_id", ""); val != "" {
		args["upload_session_id"] = val
	}

	// Optional: upload_setting_properties
	if val := request.GetString("upload_setting_properties", ""); val != "" {
		args["upload_setting_properties"] = val
	}

	// Optional: video_file_chunk
	if val := request.GetString("video_file_chunk", ""); val != "" {
		args["video_file_chunk"] = val
	}

	// Optional: video_id_original
	if val := request.GetString("video_id_original", ""); val != "" {
		args["video_id_original"] = val
	}

	// Optional: video_start_time_ms
	if val := request.GetInt("video_start_time_ms", 0); val != 0 {
		args["video_start_time_ms"] = val
	}

	// Optional: waterfall_id
	if val := request.GetString("waterfall_id", ""); val != "" {
		args["waterfall_id"] = val
	}



	// Call the client method
	result, err := client.Facebook_group_post_videos(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_group_post_videos: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_group_get_ handles the facebook_group_get_ tool
func HandleFacebook_group_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: icon_size
	if val := request.GetString("icon_size", ""); val != "" {
		args["icon_size"] = val
	}



	// Call the client method
	result, err := client.Facebook_group_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_group_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_group_post_ handles the facebook_group_post_ tool
func HandleFacebook_group_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: cover
	if val := request.GetString("cover", ""); val != "" {
		args["cover"] = val
	}

	// Optional: cover_url
	if val := request.GetString("cover_url", ""); val != "" {
		args["cover_url"] = val
	}

	// Optional: description
	if val := request.GetString("description", ""); val != "" {
		args["description"] = val
	}

	// Optional: focus_x
	if val := request.GetFloat("focus_x", 0); val != 0 {
		args["focus_x"] = val
	}

	// Optional: focus_y
	if val := request.GetFloat("focus_y", 0); val != 0 {
		args["focus_y"] = val
	}

	// Optional: group_icon
	if val := request.GetString("group_icon", ""); val != "" {
		args["group_icon"] = val
	}

	// Optional: is_official_group
	if val := request.GetBool("is_official_group", false); val {
		args["is_official_group"] = val
	}

	// Optional: join_setting
	if val := request.GetString("join_setting", ""); val != "" {
		args["join_setting"] = val
	}

	// Optional: name
	if val := request.GetString("name", ""); val != "" {
		args["name"] = val
	}

	// Optional: no_feed_story
	if val := request.GetBool("no_feed_story", false); val {
		args["no_feed_story"] = val
	}

	// Optional: offset_y
	if val := request.GetInt("offset_y", 0); val != 0 {
		args["offset_y"] = val
	}

	// Optional: post_permissions
	if val := request.GetString("post_permissions", ""); val != "" {
		args["post_permissions"] = val
	}

	// Optional: post_requires_admin_approval
	if val := request.GetBool("post_requires_admin_approval", false); val {
		args["post_requires_admin_approval"] = val
	}

	// Optional: privacy
	if val := request.GetString("privacy", ""); val != "" {
		args["privacy"] = val
	}

	// Optional: purpose
	if val := request.GetString("purpose", ""); val != "" {
		args["purpose"] = val
	}

	// Optional: update_view_time
	if val := request.GetBool("update_view_time", false); val {
		args["update_view_time"] = val
	}



	// Call the client method
	result, err := client.Facebook_group_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_group_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

