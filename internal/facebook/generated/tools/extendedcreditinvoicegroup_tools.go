// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetExtendedCreditInvoiceGroupTools returns MCP tools for ExtendedCreditInvoiceGroup
func GetExtendedCreditInvoiceGroupTools() []mcp.Tool {
	var tools []mcp.Tool


	// extendedcreditinvoicegroup_delete_ad_accounts tool
	// Params object accepts: ad_account_id (string)
	extendedcreditinvoicegroup_delete_ad_accountsTool := mcp.NewTool("extendedcreditinvoicegroup_delete_ad_accounts",
		mcp.WithDescription("DELETE ad_accounts for ExtendedCreditInvoiceGroup"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"ad_account_id": map[string]any{
					"type": "string",
					"description": "ad_account_id parameter",
					"required": true,
				},
			}),
			mcp.Description("Parameters object containing: ad_account_id (string) [required]"),
		),
	)
	tools = append(tools, extendedcreditinvoicegroup_delete_ad_accountsTool)

	// extendedcreditinvoicegroup_get_ad_accounts tool
	// Available fields for AdAccount: account_id, account_status, ad_account_promotable_objects, age, agency_client_declaration, all_capabilities, amount_spent, attribution_spec, balance, brand_safety_content_filter_levels, business, business_city, business_country_code, business_name, business_state, business_street, business_street2, business_zip, can_create_brand_lift_study, capabilities, created_time, currency, custom_audience_info, default_dsa_beneficiary, default_dsa_payor, disable_reason, end_advertiser, end_advertiser_name, existing_customers, expired_funding_source_details, extended_credit_invoice_group, failed_delivery_checks, fb_entity, funding_source, funding_source_details, has_migrated_permissions, has_page_authorized_adaccount, id, io_number, is_attribution_spec_system_default, is_ba_skip_delayed_eligible, is_direct_deals_enabled, is_in_3ds_authorization_enabled_market, is_notifications_enabled, is_personal, is_prepay_account, is_tax_id_required, liable_address, line_numbers, media_agency, min_campaign_group_spend_cap, min_daily_budget, name, offsite_pixels_tos_accepted, owner, owner_business, partner, rf_spec, send_bill_to_address, show_checkout_experience, sold_to_address, spend_cap, tax_id, tax_id_status, tax_id_type, timezone_id, timezone_name, timezone_offset_hours_utc, tos_accepted, user_access_expire_time, user_tasks, user_tos_accepted, viewable_business
	extendedcreditinvoicegroup_get_ad_accountsTool := mcp.NewTool("extendedcreditinvoicegroup_get_ad_accounts",
		mcp.WithDescription("GET ad_accounts for ExtendedCreditInvoiceGroup"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for AdAccount objects. Available fields: account_id, account_status, ad_account_promotable_objects, age, agency_client_declaration, all_capabilities, amount_spent, attribution_spec, balance, brand_safety_content_filter_levels, business, business_city, business_country_code, business_name, business_state (and 58 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, extendedcreditinvoicegroup_get_ad_accountsTool)

	// extendedcreditinvoicegroup_post_ad_accounts tool
	// Params object accepts: ad_account_id (string)
	extendedcreditinvoicegroup_post_ad_accountsTool := mcp.NewTool("extendedcreditinvoicegroup_post_ad_accounts",
		mcp.WithDescription("POST ad_accounts for ExtendedCreditInvoiceGroup"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"ad_account_id": map[string]any{
					"type": "string",
					"description": "ad_account_id parameter",
					"required": true,
				},
			}),
			mcp.Description("Parameters object containing: ad_account_id (string) [required]"),
		),
	)
	tools = append(tools, extendedcreditinvoicegroup_post_ad_accountsTool)

	// extendedcreditinvoicegroup_delete_ tool
	extendedcreditinvoicegroup_delete_Tool := mcp.NewTool("extendedcreditinvoicegroup_delete_",
		mcp.WithDescription("DELETE  for ExtendedCreditInvoiceGroup"),
	)
	tools = append(tools, extendedcreditinvoicegroup_delete_Tool)

	// extendedcreditinvoicegroup_get_ tool
	// Available fields for ExtendedCreditInvoiceGroup: auto_enroll, bill_to_address, customer_po_number, email, emails, id, liable_address, name, sold_to_address
	extendedcreditinvoicegroup_get_Tool := mcp.NewTool("extendedcreditinvoicegroup_get_",
		mcp.WithDescription("GET  for ExtendedCreditInvoiceGroup"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for ExtendedCreditInvoiceGroup objects. Available fields: auto_enroll, bill_to_address, customer_po_number, email, emails, id, liable_address, name, sold_to_address"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, extendedcreditinvoicegroup_get_Tool)

	// extendedcreditinvoicegroup_post_ tool
	// Params object accepts: emails (list<string>), name (string)
	extendedcreditinvoicegroup_post_Tool := mcp.NewTool("extendedcreditinvoicegroup_post_",
		mcp.WithDescription("POST  for ExtendedCreditInvoiceGroup"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"emails": map[string]any{
					"type": "array",
					"description": "emails parameter",
					"items": map[string]any{"type": "string"},
				},
				"name": map[string]any{
					"type": "string",
					"description": "name parameter",
				},
			}),
			mcp.Description("Parameters object containing: emails (array<string>), name (string)"),
		),
	)
	tools = append(tools, extendedcreditinvoicegroup_post_Tool)


	return tools
}

// ExtendedCreditInvoiceGroup handlers


// HandleExtendedcreditinvoicegroup_delete_ad_accounts handles the extendedcreditinvoicegroup_delete_ad_accounts tool with context-based auth
func HandleExtendedcreditinvoicegroup_delete_ad_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewExtendedCreditInvoiceGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}



	// Call the client method
	result, err := client.Extendedcreditinvoicegroup_delete_ad_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcreditinvoicegroup_delete_ad_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleExtendedcreditinvoicegroup_get_ad_accounts handles the extendedcreditinvoicegroup_get_ad_accounts tool with context-based auth
func HandleExtendedcreditinvoicegroup_get_ad_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewExtendedCreditInvoiceGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Extendedcreditinvoicegroup_get_ad_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcreditinvoicegroup_get_ad_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleExtendedcreditinvoicegroup_post_ad_accounts handles the extendedcreditinvoicegroup_post_ad_accounts tool with context-based auth
func HandleExtendedcreditinvoicegroup_post_ad_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewExtendedCreditInvoiceGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}



	// Call the client method
	result, err := client.Extendedcreditinvoicegroup_post_ad_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcreditinvoicegroup_post_ad_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleExtendedcreditinvoicegroup_delete_ handles the extendedcreditinvoicegroup_delete_ tool with context-based auth
func HandleExtendedcreditinvoicegroup_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewExtendedCreditInvoiceGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Extendedcreditinvoicegroup_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcreditinvoicegroup_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleExtendedcreditinvoicegroup_get_ handles the extendedcreditinvoicegroup_get_ tool with context-based auth
func HandleExtendedcreditinvoicegroup_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewExtendedCreditInvoiceGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Extendedcreditinvoicegroup_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcreditinvoicegroup_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleExtendedcreditinvoicegroup_post_ handles the extendedcreditinvoicegroup_post_ tool with context-based auth
func HandleExtendedcreditinvoicegroup_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewExtendedCreditInvoiceGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the client method
	result, err := client.Extendedcreditinvoicegroup_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcreditinvoicegroup_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

