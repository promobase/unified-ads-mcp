// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetExtendedCreditInvoiceGroupTools returns MCP tools for ExtendedCreditInvoiceGroup
func GetExtendedCreditInvoiceGroupTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool

	// extendedcreditinvoicegroup_delete_ad_accounts tool
	extendedcreditinvoicegroup_delete_ad_accountsTool := mcp.NewTool("extendedcreditinvoicegroup_delete_ad_accounts",
		mcp.WithDescription("DELETE ad_accounts for ExtendedCreditInvoiceGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("ad_account_id",
			mcp.Required(),
			mcp.Description("ad_account_id parameter for ad_accounts"),
		),
	)
	tools = append(tools, extendedcreditinvoicegroup_delete_ad_accountsTool)

	// extendedcreditinvoicegroup_get_ad_accounts tool
	extendedcreditinvoicegroup_get_ad_accountsTool := mcp.NewTool("extendedcreditinvoicegroup_get_ad_accounts",
		mcp.WithDescription("GET ad_accounts for ExtendedCreditInvoiceGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, extendedcreditinvoicegroup_get_ad_accountsTool)

	// extendedcreditinvoicegroup_post_ad_accounts tool
	extendedcreditinvoicegroup_post_ad_accountsTool := mcp.NewTool("extendedcreditinvoicegroup_post_ad_accounts",
		mcp.WithDescription("POST ad_accounts for ExtendedCreditInvoiceGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("ad_account_id",
			mcp.Required(),
			mcp.Description("ad_account_id parameter for ad_accounts"),
		),
	)
	tools = append(tools, extendedcreditinvoicegroup_post_ad_accountsTool)

	// extendedcreditinvoicegroup_delete_ tool
	extendedcreditinvoicegroup_delete_Tool := mcp.NewTool("extendedcreditinvoicegroup_delete_",
		mcp.WithDescription("DELETE  for ExtendedCreditInvoiceGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, extendedcreditinvoicegroup_delete_Tool)

	// extendedcreditinvoicegroup_get_ tool
	extendedcreditinvoicegroup_get_Tool := mcp.NewTool("extendedcreditinvoicegroup_get_",
		mcp.WithDescription("GET  for ExtendedCreditInvoiceGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, extendedcreditinvoicegroup_get_Tool)

	// extendedcreditinvoicegroup_post_ tool
	extendedcreditinvoicegroup_post_Tool := mcp.NewTool("extendedcreditinvoicegroup_post_",
		mcp.WithDescription("POST  for ExtendedCreditInvoiceGroup"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("emails",
			mcp.Description("emails parameter for "),
		),
		mcp.WithString("name",
			mcp.Description("name parameter for "),
		),
	)
	tools = append(tools, extendedcreditinvoicegroup_post_Tool)

	return tools
}

// ExtendedCreditInvoiceGroup handlers

// HandleExtendedcreditinvoicegroup_delete_ad_accounts handles the extendedcreditinvoicegroup_delete_ad_accounts tool
func HandleExtendedcreditinvoicegroup_delete_ad_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewExtendedCreditInvoiceGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: ad_account_id
	ad_account_id, err := request.RequireString("ad_account_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter ad_account_id: %v", err)), nil
	}
	args["ad_account_id"] = ad_account_id

	// Call the client method
	result, err := client.Extendedcreditinvoicegroup_delete_ad_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcreditinvoicegroup_delete_ad_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleExtendedcreditinvoicegroup_get_ad_accounts handles the extendedcreditinvoicegroup_get_ad_accounts tool
func HandleExtendedcreditinvoicegroup_get_ad_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewExtendedCreditInvoiceGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Extendedcreditinvoicegroup_get_ad_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcreditinvoicegroup_get_ad_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleExtendedcreditinvoicegroup_post_ad_accounts handles the extendedcreditinvoicegroup_post_ad_accounts tool
func HandleExtendedcreditinvoicegroup_post_ad_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewExtendedCreditInvoiceGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: ad_account_id
	ad_account_id, err := request.RequireString("ad_account_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter ad_account_id: %v", err)), nil
	}
	args["ad_account_id"] = ad_account_id

	// Call the client method
	result, err := client.Extendedcreditinvoicegroup_post_ad_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcreditinvoicegroup_post_ad_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleExtendedcreditinvoicegroup_delete_ handles the extendedcreditinvoicegroup_delete_ tool
func HandleExtendedcreditinvoicegroup_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewExtendedCreditInvoiceGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Extendedcreditinvoicegroup_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcreditinvoicegroup_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleExtendedcreditinvoicegroup_get_ handles the extendedcreditinvoicegroup_get_ tool
func HandleExtendedcreditinvoicegroup_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewExtendedCreditInvoiceGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Extendedcreditinvoicegroup_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcreditinvoicegroup_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleExtendedcreditinvoicegroup_post_ handles the extendedcreditinvoicegroup_post_ tool
func HandleExtendedcreditinvoicegroup_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewExtendedCreditInvoiceGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: emails
	// array type - using string
	if val := request.GetString("emails", ""); val != "" {
		args["emails"] = val
	}

	// Optional: name
	if val := request.GetString("name", ""); val != "" {
		args["name"] = val
	}

	// Call the client method
	result, err := client.Extendedcreditinvoicegroup_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcreditinvoicegroup_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
