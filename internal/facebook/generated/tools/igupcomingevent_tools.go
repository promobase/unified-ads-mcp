// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetIGUpcomingEventTools returns MCP tools for IGUpcomingEvent
func GetIGUpcomingEventTools() []mcp.Tool {
	var tools []mcp.Tool

	// igupcomingevent_get_ tool
	// Available fields for IGUpcomingEvent: end_time, id, notification_subtypes, notification_target_time, start_time, title
	igupcomingevent_get_Tool := mcp.NewTool("igupcomingevent_get_",
		mcp.WithDescription("GET  for IGUpcomingEvent"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for IGUpcomingEvent objects. Available fields: end_time, id, notification_subtypes, notification_target_time, start_time, title"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, igupcomingevent_get_Tool)

	// igupcomingevent_post_ tool
	// Params object accepts: end_time (datetime), notification_subtypes (list<igupcomingevent_notification_subtypes>), notification_target_time (igupcomingevent_notification_target_time), start_time (datetime), title (string)
	igupcomingevent_post_Tool := mcp.NewTool("igupcomingevent_post_",
		mcp.WithDescription("POST  for IGUpcomingEvent"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"end_time": map[string]any{
					"type":        "string",
					"description": "end_time parameter",
				},
				"notification_subtypes": map[string]any{
					"type":        "array",
					"description": "notification_subtypes parameter",
					"enum":        []string{"AFTER_EVENT_1DAY", "AFTER_EVENT_2DAY", "AFTER_EVENT_3DAY", "AFTER_EVENT_4DAY", "AFTER_EVENT_5DAY", "AFTER_EVENT_6DAY", "AFTER_EVENT_7DAY", "BEFORE_EVENT_15MIN", "BEFORE_EVENT_1DAY", "BEFORE_EVENT_1HOUR", "BEFORE_EVENT_2DAY", "EVENT_START", "RESCHEDULED"},
					"items":       map[string]any{"type": "string"},
				},
				"notification_target_time": map[string]any{
					"type":        "string",
					"description": "notification_target_time parameter",
					"enum":        []string{"EVENT_END", "EVENT_START"},
				},
				"start_time": map[string]any{
					"type":        "string",
					"description": "start_time parameter",
					"required":    true,
				},
				"title": map[string]any{
					"type":        "string",
					"description": "title parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: end_time (datetime), notification_subtypes (array<igupcomingevent_notification_subtypes>) [AFTER_EVENT_1DAY, AFTER_EVENT_2DAY, AFTER_EVENT_3DAY, AFTER_EVENT_4DAY, AFTER_EVENT_5DAY, ...], notification_target_time (igupcomingevent_notification_target_time) [EVENT_END, EVENT_START], start_time (datetime) [required], title (string) [required]"),
		),
	)
	tools = append(tools, igupcomingevent_post_Tool)

	return tools
}

// IGUpcomingEvent handlers

// HandleIgupcomingevent_get_ handles the igupcomingevent_get_ tool with context-based auth
func HandleIgupcomingevent_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewIGUpcomingEventClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Igupcomingevent_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute igupcomingevent_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleIgupcomingevent_post_ handles the igupcomingevent_post_ tool with context-based auth
func HandleIgupcomingevent_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewIGUpcomingEventClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the client method
	result, err := client.Igupcomingevent_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute igupcomingevent_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
