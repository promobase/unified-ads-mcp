// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetAvatarTools returns MCP tools for Avatar
func GetAvatarTools() []mcp.Tool {
	var tools []mcp.Tool

	// avatar_get_models tool
	avatar_get_modelsTool := mcp.NewTool("avatar_get_models",
		mcp.WithDescription("GET models for Avatar"),
		mcp.WithString("client_name",
			mcp.Description("client_name parameter for models"),
		),
		mcp.WithString("client_version",
			mcp.Description("client_version parameter for models"),
		),
		mcp.WithString("config_id",
			mcp.Description("config_id parameter for models"),
		),
		mcp.WithBoolean("force_generate",
			mcp.Description("force_generate parameter for models"),
		),
		mcp.WithString("platform",
			mcp.Description("platform parameter for models"),
		),
		mcp.WithString("profile",
			mcp.Required(),
			mcp.Description("profile parameter for models"),
		),
		mcp.WithString("sdk_version",
			mcp.Description("sdk_version parameter for models"),
		),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, avatar_get_modelsTool)

	// avatar_get_ tool
	// Available fields for Avatar: id
	avatar_get_Tool := mcp.NewTool("avatar_get_",
		mcp.WithDescription("GET  for Avatar"),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for Avatar objects. Available fields: id"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, avatar_get_Tool)

	return tools
}

// Avatar handlers

// HandleAvatar_get_models handles the avatar_get_models tool with context-based auth
func HandleAvatar_get_models(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAvatarClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: client_name
	if val := request.GetString("client_name", ""); val != "" {
		args["client_name"] = val
	}

	// Optional: client_version
	if val := request.GetString("client_version", ""); val != "" {
		args["client_version"] = val
	}

	// Optional: config_id
	if val := request.GetString("config_id", ""); val != "" {
		args["config_id"] = val
	}

	// Optional: force_generate
	if val := request.GetBool("force_generate", false); val {
		args["force_generate"] = val
	}

	// Optional: platform
	if val := request.GetString("platform", ""); val != "" {
		args["platform"] = val
	}

	// Required: profile
	profile, err := request.RequireString("profile")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter profile: %v", err)), nil
	}
	args["profile"] = profile

	// Optional: sdk_version
	if val := request.GetString("sdk_version", ""); val != "" {
		args["sdk_version"] = val
	}

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Avatar_get_models(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute avatar_get_models: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAvatar_get_ handles the avatar_get_ tool with context-based auth
func HandleAvatar_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAvatarClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Avatar_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute avatar_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
