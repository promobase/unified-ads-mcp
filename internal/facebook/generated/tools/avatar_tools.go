// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetAvatarTools returns MCP tools for Avatar
func GetAvatarTools() []mcp.Tool {
	var tools []mcp.Tool


	// avatar_get_models tool
	// Params object accepts: client_name (string), client_version (string), config_id (string), force_generate (bool), platform (string), profile (string), sdk_version (string)
	avatar_get_modelsTool := mcp.NewTool("avatar_get_models",
		mcp.WithDescription("GET models for Avatar"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"client_name": map[string]any{
					"type": "string",
					"description": "client_name parameter",
				},
				"client_version": map[string]any{
					"type": "string",
					"description": "client_version parameter",
				},
				"config_id": map[string]any{
					"type": "string",
					"description": "config_id parameter",
				},
				"force_generate": map[string]any{
					"type": "boolean",
					"description": "force_generate parameter",
				},
				"platform": map[string]any{
					"type": "string",
					"description": "platform parameter",
				},
				"profile": map[string]any{
					"type": "string",
					"description": "profile parameter",
					"required": true,
				},
				"sdk_version": map[string]any{
					"type": "string",
					"description": "sdk_version parameter",
				},
			}),
			mcp.Description("Parameters object containing: client_name (string), client_version (string), config_id (string), force_generate (boolean), platform (string), profile (string) [required], sdk_version (string)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, avatar_get_modelsTool)

	// avatar_get_ tool
	// Available fields for Avatar: id
	avatar_get_Tool := mcp.NewTool("avatar_get_",
		mcp.WithDescription("GET  for Avatar"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for Avatar objects. Available fields: id"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, avatar_get_Tool)


	return tools
}

// Avatar handlers


// HandleAvatar_get_models handles the avatar_get_models tool with context-based auth
func HandleAvatar_get_models(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAvatarClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Avatar_get_models(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute avatar_get_models: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleAvatar_get_ handles the avatar_get_ tool with context-based auth
func HandleAvatar_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAvatarClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Avatar_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute avatar_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

