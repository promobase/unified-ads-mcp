// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetWhatsAppBusinessAccountTools returns MCP tools for WhatsAppBusinessAccount
func GetWhatsAppBusinessAccountTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool


	// whatsappbusinessaccount_get_activities tool
	whatsappbusinessaccount_get_activitiesTool := mcp.NewTool("whatsappbusinessaccount_get_activities",
		mcp.WithDescription("GET activities for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_activitiesTool)

	// whatsappbusinessaccount_delete_assigned_users tool
	whatsappbusinessaccount_delete_assigned_usersTool := mcp.NewTool("whatsappbusinessaccount_delete_assigned_users",
		mcp.WithDescription("DELETE assigned_users for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithNumber("user",
			mcp.Required(),
			mcp.Description("user parameter for assigned_users"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_delete_assigned_usersTool)

	// whatsappbusinessaccount_get_assigned_users tool
	whatsappbusinessaccount_get_assigned_usersTool := mcp.NewTool("whatsappbusinessaccount_get_assigned_users",
		mcp.WithDescription("GET assigned_users for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("business",
			mcp.Required(),
			mcp.Description("business parameter for assigned_users"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_assigned_usersTool)

	// whatsappbusinessaccount_post_assigned_users tool
	whatsappbusinessaccount_post_assigned_usersTool := mcp.NewTool("whatsappbusinessaccount_post_assigned_users",
		mcp.WithDescription("POST assigned_users for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("tasks",
			mcp.Required(),
			mcp.Description("tasks parameter for assigned_users"),
			mcp.Enum("DEVELOP", "MANAGE", "MANAGE_EXTENSIONS", "MANAGE_PHONE", "MANAGE_PHONE_ASSETS", "MANAGE_TEMPLATES", "MESSAGING", "VIEW_COST", "VIEW_PHONE_ASSETS", "VIEW_TEMPLATES"),
		),
		mcp.WithNumber("user",
			mcp.Required(),
			mcp.Description("user parameter for assigned_users"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_assigned_usersTool)

	// whatsappbusinessaccount_get_audiences tool
	whatsappbusinessaccount_get_audiencesTool := mcp.NewTool("whatsappbusinessaccount_get_audiences",
		mcp.WithDescription("GET audiences for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_audiencesTool)

	// whatsappbusinessaccount_get_call_analytics tool
	whatsappbusinessaccount_get_call_analyticsTool := mcp.NewTool("whatsappbusinessaccount_get_call_analytics",
		mcp.WithDescription("GET call_analytics for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("country_codes",
			mcp.Description("country_codes parameter for call_analytics"),
		),
		mcp.WithString("dimensions",
			mcp.Description("dimensions parameter for call_analytics"),
			mcp.Enum("COUNTRY", "DIRECTION", "PHONE", "TIER", "UNKNOWN"),
		),
		mcp.WithString("directions",
			mcp.Description("directions parameter for call_analytics"),
			mcp.Enum("BUSINESS_INITIATED", "UNKNOWN", "USER_INITIATED"),
		),
		mcp.WithNumber("end",
			mcp.Required(),
			mcp.Description("end parameter for call_analytics"),
		),
		mcp.WithString("granularity",
			mcp.Required(),
			mcp.Description("granularity parameter for call_analytics"),
			mcp.Enum("DAILY", "HALF_HOUR", "MONTHLY"),
		),
		mcp.WithString("metric_types",
			mcp.Description("metric_types parameter for call_analytics"),
			mcp.Enum("AVERAGE_DURATION", "COST", "COUNT", "UNKNOWN"),
		),
		mcp.WithString("phone_numbers",
			mcp.Description("phone_numbers parameter for call_analytics"),
		),
		mcp.WithNumber("start",
			mcp.Required(),
			mcp.Description("start parameter for call_analytics"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_call_analyticsTool)

	// whatsappbusinessaccount_get_conversation_analytics tool
	whatsappbusinessaccount_get_conversation_analyticsTool := mcp.NewTool("whatsappbusinessaccount_get_conversation_analytics",
		mcp.WithDescription("GET conversation_analytics for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("conversation_categories",
			mcp.Description("conversation_categories parameter for conversation_analytics"),
			mcp.Enum("AUTHENTICATION", "AUTHENTICATION_INTERNATIONAL", "MARKETING", "MARKETING_LITE", "SERVICE", "UTILITY"),
		),
		mcp.WithString("conversation_directions",
			mcp.Description("conversation_directions parameter for conversation_analytics"),
			mcp.Enum("BUSINESS_INITIATED", "UNKNOWN", "USER_INITIATED"),
		),
		mcp.WithString("conversation_types",
			mcp.Description("conversation_types parameter for conversation_analytics"),
			mcp.Enum("FREE_ENTRY_POINT", "FREE_TIER", "REGULAR", "UNKNOWN"),
		),
		mcp.WithString("country_codes",
			mcp.Description("country_codes parameter for conversation_analytics"),
		),
		mcp.WithString("dimensions",
			mcp.Description("dimensions parameter for conversation_analytics"),
			mcp.Enum("CONVERSATION_CATEGORY", "CONVERSATION_DIRECTION", "CONVERSATION_TYPE", "COUNTRY", "PHONE", "UNKNOWN"),
		),
		mcp.WithNumber("end",
			mcp.Required(),
			mcp.Description("end parameter for conversation_analytics"),
		),
		mcp.WithString("granularity",
			mcp.Required(),
			mcp.Description("granularity parameter for conversation_analytics"),
			mcp.Enum("DAILY", "HALF_HOUR", "MONTHLY"),
		),
		mcp.WithString("metric_types",
			mcp.Description("metric_types parameter for conversation_analytics"),
			mcp.Enum("CONVERSATION", "COST", "UNKNOWN"),
		),
		mcp.WithString("phone_numbers",
			mcp.Description("phone_numbers parameter for conversation_analytics"),
		),
		mcp.WithNumber("start",
			mcp.Required(),
			mcp.Description("start parameter for conversation_analytics"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_conversation_analyticsTool)

	// whatsappbusinessaccount_get_dataset tool
	whatsappbusinessaccount_get_datasetTool := mcp.NewTool("whatsappbusinessaccount_get_dataset",
		mcp.WithDescription("GET dataset for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_datasetTool)

	// whatsappbusinessaccount_post_dataset tool
	whatsappbusinessaccount_post_datasetTool := mcp.NewTool("whatsappbusinessaccount_post_dataset",
		mcp.WithDescription("POST dataset for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("dataset_name",
			mcp.Description("dataset_name parameter for dataset"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_datasetTool)

	// whatsappbusinessaccount_get_flows tool
	whatsappbusinessaccount_get_flowsTool := mcp.NewTool("whatsappbusinessaccount_get_flows",
		mcp.WithDescription("GET flows for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_flowsTool)

	// whatsappbusinessaccount_post_flows tool
	whatsappbusinessaccount_post_flowsTool := mcp.NewTool("whatsappbusinessaccount_post_flows",
		mcp.WithDescription("POST flows for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("categories",
			mcp.Required(),
			mcp.Description("categories parameter for flows"),
			mcp.Enum("APPOINTMENT_BOOKING", "CONTACT_US", "CUSTOMER_SUPPORT", "LEAD_GENERATION", "OTHER", "SHOPPING", "SIGN_IN", "SIGN_UP", "SURVEY"),
		),
		mcp.WithString("clone_flow_id",
			mcp.Description("clone_flow_id parameter for flows"),
		),
		mcp.WithString("endpoint_uri",
			mcp.Description("endpoint_uri parameter for flows"),
		),
		mcp.WithString("flow_json",
			mcp.Description("flow_json parameter for flows"),
		),
		mcp.WithString("name",
			mcp.Required(),
			mcp.Description("name parameter for flows"),
		),
		mcp.WithBoolean("publish",
			mcp.Description("publish parameter for flows"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_flowsTool)

	// whatsappbusinessaccount_post_generate_payment_configuration_oauth_link tool
	whatsappbusinessaccount_post_generate_payment_configuration_oauth_linkTool := mcp.NewTool("whatsappbusinessaccount_post_generate_payment_configuration_oauth_link",
		mcp.WithDescription("POST generate_payment_configuration_oauth_link for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("configuration_name",
			mcp.Required(),
			mcp.Description("configuration_name parameter for generate_payment_configuration_oauth_link"),
		),
		mcp.WithString("redirect_url",
			mcp.Description("redirect_url parameter for generate_payment_configuration_oauth_link"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_generate_payment_configuration_oauth_linkTool)

	// whatsappbusinessaccount_get_message_campaigns tool
	whatsappbusinessaccount_get_message_campaignsTool := mcp.NewTool("whatsappbusinessaccount_get_message_campaigns",
		mcp.WithDescription("GET message_campaigns for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_message_campaignsTool)

	// whatsappbusinessaccount_get_message_template_previews tool
	whatsappbusinessaccount_get_message_template_previewsTool := mcp.NewTool("whatsappbusinessaccount_get_message_template_previews",
		mcp.WithDescription("GET message_template_previews for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithBoolean("add_security_recommendation",
			mcp.Description("add_security_recommendation parameter for message_template_previews"),
		),
		mcp.WithString("button_types",
			mcp.Description("button_types parameter for message_template_previews"),
			mcp.Enum("OTP"),
		),
		mcp.WithString("category",
			mcp.Required(),
			mcp.Description("category parameter for message_template_previews"),
			mcp.Enum("AUTHENTICATION"),
		),
		mcp.WithNumber("code_expiration_minutes",
			mcp.Description("code_expiration_minutes parameter for message_template_previews"),
		),
		mcp.WithString("languages",
			mcp.Description("languages parameter for message_template_previews"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_message_template_previewsTool)

	// whatsappbusinessaccount_delete_message_templates tool
	whatsappbusinessaccount_delete_message_templatesTool := mcp.NewTool("whatsappbusinessaccount_delete_message_templates",
		mcp.WithDescription("DELETE message_templates for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("hsm_id",
			mcp.Description("hsm_id parameter for message_templates"),
		),
		mcp.WithString("name",
			mcp.Required(),
			mcp.Description("name parameter for message_templates"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_delete_message_templatesTool)

	// whatsappbusinessaccount_get_message_templates tool
	whatsappbusinessaccount_get_message_templatesTool := mcp.NewTool("whatsappbusinessaccount_get_message_templates",
		mcp.WithDescription("GET message_templates for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("category",
			mcp.Description("category parameter for message_templates"),
			mcp.Enum("AUTHENTICATION", "MARKETING", "UTILITY"),
		),
		mcp.WithString("content",
			mcp.Description("content parameter for message_templates"),
		),
		mcp.WithString("language",
			mcp.Description("language parameter for message_templates"),
		),
		mcp.WithString("name",
			mcp.Description("name parameter for message_templates"),
		),
		mcp.WithString("name_or_content",
			mcp.Description("name_or_content parameter for message_templates"),
		),
		mcp.WithString("quality_score",
			mcp.Description("quality_score parameter for message_templates"),
			mcp.Enum("GREEN", "RED", "UNKNOWN", "YELLOW"),
		),
		mcp.WithString("status",
			mcp.Description("status parameter for message_templates"),
			mcp.Enum("APPROVED", "ARCHIVED", "DELETED", "DISABLED", "IN_APPEAL", "LIMIT_EXCEEDED", "PAUSED", "PENDING", "PENDING_DELETION", "REJECTED"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_message_templatesTool)

	// whatsappbusinessaccount_post_message_templates tool
	whatsappbusinessaccount_post_message_templatesTool := mcp.NewTool("whatsappbusinessaccount_post_message_templates",
		mcp.WithDescription("POST message_templates for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithBoolean("allow_category_change",
			mcp.Description("allow_category_change parameter for message_templates"),
		),
		mcp.WithString("category",
			mcp.Required(),
			mcp.Description("category parameter for message_templates"),
			mcp.Enum("AUTHENTICATION", "MARKETING", "UTILITY"),
		),
		mcp.WithString("components",
			mcp.Description("components parameter for message_templates"),
		),
		mcp.WithBoolean("cta_url_link_tracking_opted_out",
			mcp.Description("cta_url_link_tracking_opted_out parameter for message_templates"),
		),
		mcp.WithString("degrees_of_freedom_spec",
			mcp.Description("degrees_of_freedom_spec parameter for message_templates"),
		),
		mcp.WithString("display_format",
			mcp.Description("display_format parameter for message_templates"),
			mcp.Enum("ORDER_DETAILS"),
		),
		mcp.WithString("language",
			mcp.Required(),
			mcp.Description("language parameter for message_templates"),
		),
		mcp.WithString("library_template_body_inputs",
			mcp.Description("library_template_body_inputs parameter for message_templates"),
		),
		mcp.WithString("library_template_button_inputs",
			mcp.Description("library_template_button_inputs parameter for message_templates"),
		),
		mcp.WithString("library_template_name",
			mcp.Description("library_template_name parameter for message_templates"),
		),
		mcp.WithNumber("message_send_ttl_seconds",
			mcp.Description("message_send_ttl_seconds parameter for message_templates"),
		),
		mcp.WithString("name",
			mcp.Required(),
			mcp.Description("name parameter for message_templates"),
		),
		mcp.WithString("parameter_format",
			mcp.Description("parameter_format parameter for message_templates"),
			mcp.Enum("NAMED", "POSITIONAL"),
		),
		mcp.WithString("sub_category",
			mcp.Description("sub_category parameter for message_templates"),
			mcp.Enum("ORDER_DETAILS", "ORDER_STATUS"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_message_templatesTool)

	// whatsappbusinessaccount_post_migrate_flows tool
	whatsappbusinessaccount_post_migrate_flowsTool := mcp.NewTool("whatsappbusinessaccount_post_migrate_flows",
		mcp.WithDescription("POST migrate_flows for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("source_flow_names",
			mcp.Description("source_flow_names parameter for migrate_flows"),
		),
		mcp.WithString("source_waba_id",
			mcp.Required(),
			mcp.Description("source_waba_id parameter for migrate_flows"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_migrate_flowsTool)

	// whatsappbusinessaccount_post_migrate_message_templates tool
	whatsappbusinessaccount_post_migrate_message_templatesTool := mcp.NewTool("whatsappbusinessaccount_post_migrate_message_templates",
		mcp.WithDescription("POST migrate_message_templates for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithNumber("page_number",
			mcp.Description("page_number parameter for migrate_message_templates"),
		),
		mcp.WithString("source_waba_id",
			mcp.Required(),
			mcp.Description("source_waba_id parameter for migrate_message_templates"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_migrate_message_templatesTool)

	// whatsappbusinessaccount_delete_payment_configuration tool
	whatsappbusinessaccount_delete_payment_configurationTool := mcp.NewTool("whatsappbusinessaccount_delete_payment_configuration",
		mcp.WithDescription("DELETE payment_configuration for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("configuration_name",
			mcp.Required(),
			mcp.Description("configuration_name parameter for payment_configuration"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_delete_payment_configurationTool)

	// whatsappbusinessaccount_get_payment_configuration tool
	whatsappbusinessaccount_get_payment_configurationTool := mcp.NewTool("whatsappbusinessaccount_get_payment_configuration",
		mcp.WithDescription("GET payment_configuration for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("configuration_name",
			mcp.Required(),
			mcp.Description("configuration_name parameter for payment_configuration"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_payment_configurationTool)

	// whatsappbusinessaccount_post_payment_configuration tool
	whatsappbusinessaccount_post_payment_configurationTool := mcp.NewTool("whatsappbusinessaccount_post_payment_configuration",
		mcp.WithDescription("POST payment_configuration for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("configuration_name",
			mcp.Required(),
			mcp.Description("configuration_name parameter for payment_configuration"),
		),
		mcp.WithString("data_endpoint_url",
			mcp.Description("data_endpoint_url parameter for payment_configuration"),
		),
		mcp.WithString("merchant_category_code",
			mcp.Description("merchant_category_code parameter for payment_configuration"),
		),
		mcp.WithString("merchant_vpa",
			mcp.Description("merchant_vpa parameter for payment_configuration"),
		),
		mcp.WithString("provider_name",
			mcp.Description("provider_name parameter for payment_configuration"),
			mcp.Enum("BILLDESK", "PAYU", "RAZORPAY", "UPI_VPA", "ZAAKPAY"),
		),
		mcp.WithString("purpose_code",
			mcp.Description("purpose_code parameter for payment_configuration"),
		),
		mcp.WithString("redirect_url",
			mcp.Description("redirect_url parameter for payment_configuration"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_payment_configurationTool)

	// whatsappbusinessaccount_get_payment_configurations tool
	whatsappbusinessaccount_get_payment_configurationsTool := mcp.NewTool("whatsappbusinessaccount_get_payment_configurations",
		mcp.WithDescription("GET payment_configurations for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_payment_configurationsTool)

	// whatsappbusinessaccount_get_phone_numbers tool
	whatsappbusinessaccount_get_phone_numbersTool := mcp.NewTool("whatsappbusinessaccount_get_phone_numbers",
		mcp.WithDescription("GET phone_numbers for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_phone_numbersTool)

	// whatsappbusinessaccount_post_phone_numbers tool
	whatsappbusinessaccount_post_phone_numbersTool := mcp.NewTool("whatsappbusinessaccount_post_phone_numbers",
		mcp.WithDescription("POST phone_numbers for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("cc",
			mcp.Description("cc parameter for phone_numbers"),
		),
		mcp.WithBoolean("migrate_phone_number",
			mcp.Description("migrate_phone_number parameter for phone_numbers"),
		),
		mcp.WithString("phone_number",
			mcp.Description("phone_number parameter for phone_numbers"),
		),
		mcp.WithString("preverified_id",
			mcp.Description("preverified_id parameter for phone_numbers"),
		),
		mcp.WithString("verified_name",
			mcp.Description("verified_name parameter for phone_numbers"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_phone_numbersTool)

	// whatsappbusinessaccount_get_pricing_analytics tool
	whatsappbusinessaccount_get_pricing_analyticsTool := mcp.NewTool("whatsappbusinessaccount_get_pricing_analytics",
		mcp.WithDescription("GET pricing_analytics for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("country_codes",
			mcp.Description("country_codes parameter for pricing_analytics"),
		),
		mcp.WithString("dimensions",
			mcp.Description("dimensions parameter for pricing_analytics"),
			mcp.Enum("COUNTRY", "PHONE", "PRICING_CATEGORY", "PRICING_TYPE", "TIER"),
		),
		mcp.WithNumber("end",
			mcp.Required(),
			mcp.Description("end parameter for pricing_analytics"),
		),
		mcp.WithString("granularity",
			mcp.Required(),
			mcp.Description("granularity parameter for pricing_analytics"),
			mcp.Enum("DAILY", "HALF_HOUR", "MONTHLY"),
		),
		mcp.WithString("metric_types",
			mcp.Description("metric_types parameter for pricing_analytics"),
			mcp.Enum("COST", "VOLUME"),
		),
		mcp.WithString("phone_numbers",
			mcp.Description("phone_numbers parameter for pricing_analytics"),
		),
		mcp.WithString("pricing_categories",
			mcp.Description("pricing_categories parameter for pricing_analytics"),
			mcp.Enum("AUTHENTICATION", "AUTHENTICATION_INTERNATIONAL", "GROUP_MARKETING", "GROUP_SERVICE", "GROUP_UTILITY", "MARKETING", "MARKETING_LITE", "SERVICE", "UTILITY"),
		),
		mcp.WithString("pricing_types",
			mcp.Description("pricing_types parameter for pricing_analytics"),
			mcp.Enum("FREE_CUSTOMER_SERVICE", "FREE_ENTRY_POINT", "REGULAR"),
		),
		mcp.WithNumber("start",
			mcp.Required(),
			mcp.Description("start parameter for pricing_analytics"),
		),
		mcp.WithString("tiers",
			mcp.Description("tiers parameter for pricing_analytics"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_pricing_analyticsTool)

	// whatsappbusinessaccount_delete_product_catalogs tool
	whatsappbusinessaccount_delete_product_catalogsTool := mcp.NewTool("whatsappbusinessaccount_delete_product_catalogs",
		mcp.WithDescription("DELETE product_catalogs for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("catalog_id",
			mcp.Required(),
			mcp.Description("catalog_id parameter for product_catalogs"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_delete_product_catalogsTool)

	// whatsappbusinessaccount_get_product_catalogs tool
	whatsappbusinessaccount_get_product_catalogsTool := mcp.NewTool("whatsappbusinessaccount_get_product_catalogs",
		mcp.WithDescription("GET product_catalogs for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_product_catalogsTool)

	// whatsappbusinessaccount_post_product_catalogs tool
	whatsappbusinessaccount_post_product_catalogsTool := mcp.NewTool("whatsappbusinessaccount_post_product_catalogs",
		mcp.WithDescription("POST product_catalogs for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("catalog_id",
			mcp.Required(),
			mcp.Description("catalog_id parameter for product_catalogs"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_product_catalogsTool)

	// whatsappbusinessaccount_get_schedules tool
	whatsappbusinessaccount_get_schedulesTool := mcp.NewTool("whatsappbusinessaccount_get_schedules",
		mcp.WithDescription("GET schedules for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_schedulesTool)

	// whatsappbusinessaccount_post_set_obo_mobility_intent tool
	whatsappbusinessaccount_post_set_obo_mobility_intentTool := mcp.NewTool("whatsappbusinessaccount_post_set_obo_mobility_intent",
		mcp.WithDescription("POST set_obo_mobility_intent for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("solution_id",
			mcp.Description("solution_id parameter for set_obo_mobility_intent"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_set_obo_mobility_intentTool)

	// whatsappbusinessaccount_post_set_solution_migration_intent tool
	whatsappbusinessaccount_post_set_solution_migration_intentTool := mcp.NewTool("whatsappbusinessaccount_post_set_solution_migration_intent",
		mcp.WithDescription("POST set_solution_migration_intent for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("app_id",
			mcp.Description("app_id parameter for set_solution_migration_intent"),
		),
		mcp.WithString("solution_id",
			mcp.Description("solution_id parameter for set_solution_migration_intent"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_set_solution_migration_intentTool)

	// whatsappbusinessaccount_get_solutions tool
	whatsappbusinessaccount_get_solutionsTool := mcp.NewTool("whatsappbusinessaccount_get_solutions",
		mcp.WithDescription("GET solutions for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_solutionsTool)

	// whatsappbusinessaccount_delete_subscribed_apps tool
	whatsappbusinessaccount_delete_subscribed_appsTool := mcp.NewTool("whatsappbusinessaccount_delete_subscribed_apps",
		mcp.WithDescription("DELETE subscribed_apps for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_delete_subscribed_appsTool)

	// whatsappbusinessaccount_get_subscribed_apps tool
	whatsappbusinessaccount_get_subscribed_appsTool := mcp.NewTool("whatsappbusinessaccount_get_subscribed_apps",
		mcp.WithDescription("GET subscribed_apps for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_subscribed_appsTool)

	// whatsappbusinessaccount_post_subscribed_apps tool
	whatsappbusinessaccount_post_subscribed_appsTool := mcp.NewTool("whatsappbusinessaccount_post_subscribed_apps",
		mcp.WithDescription("POST subscribed_apps for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("override_callback_uri",
			mcp.Description("override_callback_uri parameter for subscribed_apps"),
		),
		mcp.WithString("verify_token",
			mcp.Description("verify_token parameter for subscribed_apps"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_subscribed_appsTool)

	// whatsappbusinessaccount_get_template_analytics tool
	whatsappbusinessaccount_get_template_analyticsTool := mcp.NewTool("whatsappbusinessaccount_get_template_analytics",
		mcp.WithDescription("GET template_analytics for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("end",
			mcp.Required(),
			mcp.Description("end parameter for template_analytics"),
		),
		mcp.WithString("granularity",
			mcp.Required(),
			mcp.Description("granularity parameter for template_analytics"),
			mcp.Enum("DAILY"),
		),
		mcp.WithString("metric_types",
			mcp.Description("metric_types parameter for template_analytics"),
			mcp.Enum("CLICKED", "COST", "DELIVERED", "READ", "REPLIED", "SENT"),
		),
		mcp.WithString("product_type",
			mcp.Description("product_type parameter for template_analytics"),
			mcp.Enum("CLOUD_API", "MARKETING_MESSAGES_LITE_API"),
		),
		mcp.WithString("start",
			mcp.Required(),
			mcp.Description("start parameter for template_analytics"),
		),
		mcp.WithString("template_ids",
			mcp.Required(),
			mcp.Description("template_ids parameter for template_analytics"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_template_analyticsTool)

	// whatsappbusinessaccount_get_template_group_analytics tool
	whatsappbusinessaccount_get_template_group_analyticsTool := mcp.NewTool("whatsappbusinessaccount_get_template_group_analytics",
		mcp.WithDescription("GET template_group_analytics for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("end",
			mcp.Required(),
			mcp.Description("end parameter for template_group_analytics"),
		),
		mcp.WithString("granularity",
			mcp.Required(),
			mcp.Description("granularity parameter for template_group_analytics"),
			mcp.Enum("DAILY"),
		),
		mcp.WithString("metric_types",
			mcp.Description("metric_types parameter for template_group_analytics"),
			mcp.Enum("CLICKED", "COST", "DELIVERED", "READ", "REPLIED", "SENT"),
		),
		mcp.WithString("start",
			mcp.Required(),
			mcp.Description("start parameter for template_group_analytics"),
		),
		mcp.WithString("template_group_ids",
			mcp.Required(),
			mcp.Description("template_group_ids parameter for template_group_analytics"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_template_group_analyticsTool)

	// whatsappbusinessaccount_get_template_groups tool
	whatsappbusinessaccount_get_template_groupsTool := mcp.NewTool("whatsappbusinessaccount_get_template_groups",
		mcp.WithDescription("GET template_groups for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_template_groupsTool)

	// whatsappbusinessaccount_post_template_groups tool
	whatsappbusinessaccount_post_template_groupsTool := mcp.NewTool("whatsappbusinessaccount_post_template_groups",
		mcp.WithDescription("POST template_groups for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("description",
			mcp.Required(),
			mcp.Description("description parameter for template_groups"),
		),
		mcp.WithString("name",
			mcp.Required(),
			mcp.Description("name parameter for template_groups"),
		),
		mcp.WithString("whatsapp_business_templates",
			mcp.Required(),
			mcp.Description("whatsapp_business_templates parameter for template_groups"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_template_groupsTool)

	// whatsappbusinessaccount_get_template_performance_metrics tool
	whatsappbusinessaccount_get_template_performance_metricsTool := mcp.NewTool("whatsappbusinessaccount_get_template_performance_metrics",
		mcp.WithDescription("GET template_performance_metrics for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("name",
			mcp.Description("name parameter for template_performance_metrics"),
		),
		mcp.WithString("template_id",
			mcp.Description("template_id parameter for template_performance_metrics"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_template_performance_metricsTool)

	// whatsappbusinessaccount_post_upsert_message_templates tool
	whatsappbusinessaccount_post_upsert_message_templatesTool := mcp.NewTool("whatsappbusinessaccount_post_upsert_message_templates",
		mcp.WithDescription("POST upsert_message_templates for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("category",
			mcp.Required(),
			mcp.Description("category parameter for upsert_message_templates"),
			mcp.Enum("AUTHENTICATION"),
		),
		mcp.WithString("components",
			mcp.Required(),
			mcp.Description("components parameter for upsert_message_templates"),
		),
		mcp.WithString("languages",
			mcp.Required(),
			mcp.Description("languages parameter for upsert_message_templates"),
		),
		mcp.WithNumber("message_send_ttl_seconds",
			mcp.Description("message_send_ttl_seconds parameter for upsert_message_templates"),
		),
		mcp.WithString("name",
			mcp.Required(),
			mcp.Description("name parameter for upsert_message_templates"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_upsert_message_templatesTool)

	// whatsappbusinessaccount_get_welcome_message_sequences tool
	whatsappbusinessaccount_get_welcome_message_sequencesTool := mcp.NewTool("whatsappbusinessaccount_get_welcome_message_sequences",
		mcp.WithDescription("GET welcome_message_sequences for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("app_id",
			mcp.Description("app_id parameter for welcome_message_sequences"),
		),
		mcp.WithString("sequence_id",
			mcp.Description("sequence_id parameter for welcome_message_sequences"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_welcome_message_sequencesTool)

	// whatsappbusinessaccount_get_ tool
	whatsappbusinessaccount_get_Tool := mcp.NewTool("whatsappbusinessaccount_get_",
		mcp.WithDescription("GET  for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_Tool)

	// whatsappbusinessaccount_post_ tool
	whatsappbusinessaccount_post_Tool := mcp.NewTool("whatsappbusinessaccount_post_",
		mcp.WithDescription("POST  for WhatsAppBusinessAccount"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithBoolean("is_enabled_for_insights",
			mcp.Description("is_enabled_for_insights parameter for "),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_Tool)


	return tools
}

// WhatsAppBusinessAccount handlers


// HandleWhatsappbusinessaccount_get_activities handles the whatsappbusinessaccount_get_activities tool
func HandleWhatsappbusinessaccount_get_activities(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_activities(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_activities: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_delete_assigned_users handles the whatsappbusinessaccount_delete_assigned_users tool
func HandleWhatsappbusinessaccount_delete_assigned_users(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: user
	user, err := request.RequireInt("user")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter user: %v", err)), nil
	}
	args["user"] = user



	// Call the client method
	result, err := client.Whatsappbusinessaccount_delete_assigned_users(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_delete_assigned_users: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_get_assigned_users handles the whatsappbusinessaccount_get_assigned_users tool
func HandleWhatsappbusinessaccount_get_assigned_users(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: business
	business, err := request.RequireString("business")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter business: %v", err)), nil
	}
	args["business"] = business



	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_assigned_users(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_assigned_users: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_post_assigned_users handles the whatsappbusinessaccount_post_assigned_users tool
func HandleWhatsappbusinessaccount_post_assigned_users(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: tasks
	tasks, err := request.RequireString("tasks")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter tasks: %v", err)), nil
	}
	args["tasks"] = tasks

	// Required: user
	user, err := request.RequireInt("user")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter user: %v", err)), nil
	}
	args["user"] = user



	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_assigned_users(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_assigned_users: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_get_audiences handles the whatsappbusinessaccount_get_audiences tool
func HandleWhatsappbusinessaccount_get_audiences(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_audiences(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_audiences: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_get_call_analytics handles the whatsappbusinessaccount_get_call_analytics tool
func HandleWhatsappbusinessaccount_get_call_analytics(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: country_codes
	// array type - using string
	if val := request.GetString("country_codes", ""); val != "" {
		args["country_codes"] = val
	}

	// Optional: dimensions
	// array type - using string
	if val := request.GetString("dimensions", ""); val != "" {
		args["dimensions"] = val
	}

	// Optional: directions
	// array type - using string
	if val := request.GetString("directions", ""); val != "" {
		args["directions"] = val
	}

	// Required: end
	end, err := request.RequireInt("end")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter end: %v", err)), nil
	}
	args["end"] = end

	// Required: granularity
	granularity, err := request.RequireString("granularity")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter granularity: %v", err)), nil
	}
	args["granularity"] = granularity

	// Optional: metric_types
	// array type - using string
	if val := request.GetString("metric_types", ""); val != "" {
		args["metric_types"] = val
	}

	// Optional: phone_numbers
	// array type - using string
	if val := request.GetString("phone_numbers", ""); val != "" {
		args["phone_numbers"] = val
	}

	// Required: start
	start, err := request.RequireInt("start")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter start: %v", err)), nil
	}
	args["start"] = start



	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_call_analytics(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_call_analytics: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_get_conversation_analytics handles the whatsappbusinessaccount_get_conversation_analytics tool
func HandleWhatsappbusinessaccount_get_conversation_analytics(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: conversation_categories
	// array type - using string
	if val := request.GetString("conversation_categories", ""); val != "" {
		args["conversation_categories"] = val
	}

	// Optional: conversation_directions
	// array type - using string
	if val := request.GetString("conversation_directions", ""); val != "" {
		args["conversation_directions"] = val
	}

	// Optional: conversation_types
	// array type - using string
	if val := request.GetString("conversation_types", ""); val != "" {
		args["conversation_types"] = val
	}

	// Optional: country_codes
	// array type - using string
	if val := request.GetString("country_codes", ""); val != "" {
		args["country_codes"] = val
	}

	// Optional: dimensions
	// array type - using string
	if val := request.GetString("dimensions", ""); val != "" {
		args["dimensions"] = val
	}

	// Required: end
	end, err := request.RequireInt("end")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter end: %v", err)), nil
	}
	args["end"] = end

	// Required: granularity
	granularity, err := request.RequireString("granularity")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter granularity: %v", err)), nil
	}
	args["granularity"] = granularity

	// Optional: metric_types
	// array type - using string
	if val := request.GetString("metric_types", ""); val != "" {
		args["metric_types"] = val
	}

	// Optional: phone_numbers
	// array type - using string
	if val := request.GetString("phone_numbers", ""); val != "" {
		args["phone_numbers"] = val
	}

	// Required: start
	start, err := request.RequireInt("start")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter start: %v", err)), nil
	}
	args["start"] = start



	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_conversation_analytics(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_conversation_analytics: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_get_dataset handles the whatsappbusinessaccount_get_dataset tool
func HandleWhatsappbusinessaccount_get_dataset(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_dataset(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_dataset: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_post_dataset handles the whatsappbusinessaccount_post_dataset tool
func HandleWhatsappbusinessaccount_post_dataset(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: dataset_name
	if val := request.GetString("dataset_name", ""); val != "" {
		args["dataset_name"] = val
	}



	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_dataset(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_dataset: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_get_flows handles the whatsappbusinessaccount_get_flows tool
func HandleWhatsappbusinessaccount_get_flows(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_flows(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_flows: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_post_flows handles the whatsappbusinessaccount_post_flows tool
func HandleWhatsappbusinessaccount_post_flows(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: categories
	categories, err := request.RequireString("categories")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter categories: %v", err)), nil
	}
	args["categories"] = categories

	// Optional: clone_flow_id
	if val := request.GetString("clone_flow_id", ""); val != "" {
		args["clone_flow_id"] = val
	}

	// Optional: endpoint_uri
	if val := request.GetString("endpoint_uri", ""); val != "" {
		args["endpoint_uri"] = val
	}

	// Optional: flow_json
	if val := request.GetString("flow_json", ""); val != "" {
		args["flow_json"] = val
	}

	// Required: name
	name, err := request.RequireString("name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter name: %v", err)), nil
	}
	args["name"] = name

	// Optional: publish
	if val := request.GetBool("publish", false); val {
		args["publish"] = val
	}



	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_flows(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_flows: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_post_generate_payment_configuration_oauth_link handles the whatsappbusinessaccount_post_generate_payment_configuration_oauth_link tool
func HandleWhatsappbusinessaccount_post_generate_payment_configuration_oauth_link(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: configuration_name
	configuration_name, err := request.RequireString("configuration_name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter configuration_name: %v", err)), nil
	}
	args["configuration_name"] = configuration_name

	// Optional: redirect_url
	if val := request.GetString("redirect_url", ""); val != "" {
		args["redirect_url"] = val
	}



	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_generate_payment_configuration_oauth_link(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_generate_payment_configuration_oauth_link: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_get_message_campaigns handles the whatsappbusinessaccount_get_message_campaigns tool
func HandleWhatsappbusinessaccount_get_message_campaigns(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_message_campaigns(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_message_campaigns: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_get_message_template_previews handles the whatsappbusinessaccount_get_message_template_previews tool
func HandleWhatsappbusinessaccount_get_message_template_previews(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: add_security_recommendation
	if val := request.GetBool("add_security_recommendation", false); val {
		args["add_security_recommendation"] = val
	}

	// Optional: button_types
	// array type - using string
	if val := request.GetString("button_types", ""); val != "" {
		args["button_types"] = val
	}

	// Required: category
	category, err := request.RequireString("category")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter category: %v", err)), nil
	}
	args["category"] = category

	// Optional: code_expiration_minutes
	if val := request.GetInt("code_expiration_minutes", 0); val != 0 {
		args["code_expiration_minutes"] = val
	}

	// Optional: languages
	// array type - using string
	if val := request.GetString("languages", ""); val != "" {
		args["languages"] = val
	}



	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_message_template_previews(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_message_template_previews: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_delete_message_templates handles the whatsappbusinessaccount_delete_message_templates tool
func HandleWhatsappbusinessaccount_delete_message_templates(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: hsm_id
	if val := request.GetString("hsm_id", ""); val != "" {
		args["hsm_id"] = val
	}

	// Required: name
	name, err := request.RequireString("name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter name: %v", err)), nil
	}
	args["name"] = name



	// Call the client method
	result, err := client.Whatsappbusinessaccount_delete_message_templates(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_delete_message_templates: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_get_message_templates handles the whatsappbusinessaccount_get_message_templates tool
func HandleWhatsappbusinessaccount_get_message_templates(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: category
	// array type - using string
	if val := request.GetString("category", ""); val != "" {
		args["category"] = val
	}

	// Optional: content
	if val := request.GetString("content", ""); val != "" {
		args["content"] = val
	}

	// Optional: language
	// array type - using string
	if val := request.GetString("language", ""); val != "" {
		args["language"] = val
	}

	// Optional: name
	if val := request.GetString("name", ""); val != "" {
		args["name"] = val
	}

	// Optional: name_or_content
	if val := request.GetString("name_or_content", ""); val != "" {
		args["name_or_content"] = val
	}

	// Optional: quality_score
	// array type - using string
	if val := request.GetString("quality_score", ""); val != "" {
		args["quality_score"] = val
	}

	// Optional: status
	// array type - using string
	if val := request.GetString("status", ""); val != "" {
		args["status"] = val
	}



	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_message_templates(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_message_templates: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_post_message_templates handles the whatsappbusinessaccount_post_message_templates tool
func HandleWhatsappbusinessaccount_post_message_templates(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: allow_category_change
	if val := request.GetBool("allow_category_change", false); val {
		args["allow_category_change"] = val
	}

	// Required: category
	category, err := request.RequireString("category")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter category: %v", err)), nil
	}
	args["category"] = category

	// Optional: components
	// array type - using string
	if val := request.GetString("components", ""); val != "" {
		args["components"] = val
	}

	// Optional: cta_url_link_tracking_opted_out
	if val := request.GetBool("cta_url_link_tracking_opted_out", false); val {
		args["cta_url_link_tracking_opted_out"] = val
	}

	// Optional: degrees_of_freedom_spec
	if val := request.GetString("degrees_of_freedom_spec", ""); val != "" {
		args["degrees_of_freedom_spec"] = val
	}

	// Optional: display_format
	if val := request.GetString("display_format", ""); val != "" {
		args["display_format"] = val
	}

	// Required: language
	language, err := request.RequireString("language")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter language: %v", err)), nil
	}
	args["language"] = language

	// Optional: library_template_body_inputs
	if val := request.GetString("library_template_body_inputs", ""); val != "" {
		args["library_template_body_inputs"] = val
	}

	// Optional: library_template_button_inputs
	// array type - using string
	if val := request.GetString("library_template_button_inputs", ""); val != "" {
		args["library_template_button_inputs"] = val
	}

	// Optional: library_template_name
	if val := request.GetString("library_template_name", ""); val != "" {
		args["library_template_name"] = val
	}

	// Optional: message_send_ttl_seconds
	if val := request.GetInt("message_send_ttl_seconds", 0); val != 0 {
		args["message_send_ttl_seconds"] = val
	}

	// Required: name
	name, err := request.RequireString("name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter name: %v", err)), nil
	}
	args["name"] = name

	// Optional: parameter_format
	if val := request.GetString("parameter_format", ""); val != "" {
		args["parameter_format"] = val
	}

	// Optional: sub_category
	if val := request.GetString("sub_category", ""); val != "" {
		args["sub_category"] = val
	}



	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_message_templates(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_message_templates: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_post_migrate_flows handles the whatsappbusinessaccount_post_migrate_flows tool
func HandleWhatsappbusinessaccount_post_migrate_flows(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: source_flow_names
	// array type - using string
	if val := request.GetString("source_flow_names", ""); val != "" {
		args["source_flow_names"] = val
	}

	// Required: source_waba_id
	source_waba_id, err := request.RequireString("source_waba_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter source_waba_id: %v", err)), nil
	}
	args["source_waba_id"] = source_waba_id



	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_migrate_flows(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_migrate_flows: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_post_migrate_message_templates handles the whatsappbusinessaccount_post_migrate_message_templates tool
func HandleWhatsappbusinessaccount_post_migrate_message_templates(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: page_number
	if val := request.GetInt("page_number", 0); val != 0 {
		args["page_number"] = val
	}

	// Required: source_waba_id
	source_waba_id, err := request.RequireString("source_waba_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter source_waba_id: %v", err)), nil
	}
	args["source_waba_id"] = source_waba_id



	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_migrate_message_templates(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_migrate_message_templates: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_delete_payment_configuration handles the whatsappbusinessaccount_delete_payment_configuration tool
func HandleWhatsappbusinessaccount_delete_payment_configuration(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: configuration_name
	configuration_name, err := request.RequireString("configuration_name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter configuration_name: %v", err)), nil
	}
	args["configuration_name"] = configuration_name



	// Call the client method
	result, err := client.Whatsappbusinessaccount_delete_payment_configuration(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_delete_payment_configuration: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_get_payment_configuration handles the whatsappbusinessaccount_get_payment_configuration tool
func HandleWhatsappbusinessaccount_get_payment_configuration(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: configuration_name
	configuration_name, err := request.RequireString("configuration_name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter configuration_name: %v", err)), nil
	}
	args["configuration_name"] = configuration_name



	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_payment_configuration(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_payment_configuration: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_post_payment_configuration handles the whatsappbusinessaccount_post_payment_configuration tool
func HandleWhatsappbusinessaccount_post_payment_configuration(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: configuration_name
	configuration_name, err := request.RequireString("configuration_name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter configuration_name: %v", err)), nil
	}
	args["configuration_name"] = configuration_name

	// Optional: data_endpoint_url
	if val := request.GetString("data_endpoint_url", ""); val != "" {
		args["data_endpoint_url"] = val
	}

	// Optional: merchant_category_code
	if val := request.GetString("merchant_category_code", ""); val != "" {
		args["merchant_category_code"] = val
	}

	// Optional: merchant_vpa
	if val := request.GetString("merchant_vpa", ""); val != "" {
		args["merchant_vpa"] = val
	}

	// Optional: provider_name
	if val := request.GetString("provider_name", ""); val != "" {
		args["provider_name"] = val
	}

	// Optional: purpose_code
	if val := request.GetString("purpose_code", ""); val != "" {
		args["purpose_code"] = val
	}

	// Optional: redirect_url
	if val := request.GetString("redirect_url", ""); val != "" {
		args["redirect_url"] = val
	}



	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_payment_configuration(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_payment_configuration: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_get_payment_configurations handles the whatsappbusinessaccount_get_payment_configurations tool
func HandleWhatsappbusinessaccount_get_payment_configurations(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_payment_configurations(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_payment_configurations: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_get_phone_numbers handles the whatsappbusinessaccount_get_phone_numbers tool
func HandleWhatsappbusinessaccount_get_phone_numbers(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_phone_numbers(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_phone_numbers: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_post_phone_numbers handles the whatsappbusinessaccount_post_phone_numbers tool
func HandleWhatsappbusinessaccount_post_phone_numbers(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: cc
	if val := request.GetString("cc", ""); val != "" {
		args["cc"] = val
	}

	// Optional: migrate_phone_number
	if val := request.GetBool("migrate_phone_number", false); val {
		args["migrate_phone_number"] = val
	}

	// Optional: phone_number
	if val := request.GetString("phone_number", ""); val != "" {
		args["phone_number"] = val
	}

	// Optional: preverified_id
	if val := request.GetString("preverified_id", ""); val != "" {
		args["preverified_id"] = val
	}

	// Optional: verified_name
	if val := request.GetString("verified_name", ""); val != "" {
		args["verified_name"] = val
	}



	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_phone_numbers(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_phone_numbers: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_get_pricing_analytics handles the whatsappbusinessaccount_get_pricing_analytics tool
func HandleWhatsappbusinessaccount_get_pricing_analytics(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: country_codes
	// array type - using string
	if val := request.GetString("country_codes", ""); val != "" {
		args["country_codes"] = val
	}

	// Optional: dimensions
	// array type - using string
	if val := request.GetString("dimensions", ""); val != "" {
		args["dimensions"] = val
	}

	// Required: end
	end, err := request.RequireInt("end")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter end: %v", err)), nil
	}
	args["end"] = end

	// Required: granularity
	granularity, err := request.RequireString("granularity")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter granularity: %v", err)), nil
	}
	args["granularity"] = granularity

	// Optional: metric_types
	// array type - using string
	if val := request.GetString("metric_types", ""); val != "" {
		args["metric_types"] = val
	}

	// Optional: phone_numbers
	// array type - using string
	if val := request.GetString("phone_numbers", ""); val != "" {
		args["phone_numbers"] = val
	}

	// Optional: pricing_categories
	// array type - using string
	if val := request.GetString("pricing_categories", ""); val != "" {
		args["pricing_categories"] = val
	}

	// Optional: pricing_types
	// array type - using string
	if val := request.GetString("pricing_types", ""); val != "" {
		args["pricing_types"] = val
	}

	// Required: start
	start, err := request.RequireInt("start")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter start: %v", err)), nil
	}
	args["start"] = start

	// Optional: tiers
	// array type - using string
	if val := request.GetString("tiers", ""); val != "" {
		args["tiers"] = val
	}



	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_pricing_analytics(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_pricing_analytics: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_delete_product_catalogs handles the whatsappbusinessaccount_delete_product_catalogs tool
func HandleWhatsappbusinessaccount_delete_product_catalogs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: catalog_id
	catalog_id, err := request.RequireString("catalog_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter catalog_id: %v", err)), nil
	}
	args["catalog_id"] = catalog_id



	// Call the client method
	result, err := client.Whatsappbusinessaccount_delete_product_catalogs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_delete_product_catalogs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_get_product_catalogs handles the whatsappbusinessaccount_get_product_catalogs tool
func HandleWhatsappbusinessaccount_get_product_catalogs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_product_catalogs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_product_catalogs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_post_product_catalogs handles the whatsappbusinessaccount_post_product_catalogs tool
func HandleWhatsappbusinessaccount_post_product_catalogs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: catalog_id
	catalog_id, err := request.RequireString("catalog_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter catalog_id: %v", err)), nil
	}
	args["catalog_id"] = catalog_id



	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_product_catalogs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_product_catalogs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_get_schedules handles the whatsappbusinessaccount_get_schedules tool
func HandleWhatsappbusinessaccount_get_schedules(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_schedules(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_schedules: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_post_set_obo_mobility_intent handles the whatsappbusinessaccount_post_set_obo_mobility_intent tool
func HandleWhatsappbusinessaccount_post_set_obo_mobility_intent(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: solution_id
	if val := request.GetString("solution_id", ""); val != "" {
		args["solution_id"] = val
	}



	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_set_obo_mobility_intent(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_set_obo_mobility_intent: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_post_set_solution_migration_intent handles the whatsappbusinessaccount_post_set_solution_migration_intent tool
func HandleWhatsappbusinessaccount_post_set_solution_migration_intent(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: app_id
	if val := request.GetString("app_id", ""); val != "" {
		args["app_id"] = val
	}

	// Optional: solution_id
	if val := request.GetString("solution_id", ""); val != "" {
		args["solution_id"] = val
	}



	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_set_solution_migration_intent(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_set_solution_migration_intent: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_get_solutions handles the whatsappbusinessaccount_get_solutions tool
func HandleWhatsappbusinessaccount_get_solutions(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_solutions(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_solutions: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_delete_subscribed_apps handles the whatsappbusinessaccount_delete_subscribed_apps tool
func HandleWhatsappbusinessaccount_delete_subscribed_apps(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Whatsappbusinessaccount_delete_subscribed_apps(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_delete_subscribed_apps: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_get_subscribed_apps handles the whatsappbusinessaccount_get_subscribed_apps tool
func HandleWhatsappbusinessaccount_get_subscribed_apps(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_subscribed_apps(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_subscribed_apps: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_post_subscribed_apps handles the whatsappbusinessaccount_post_subscribed_apps tool
func HandleWhatsappbusinessaccount_post_subscribed_apps(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: override_callback_uri
	if val := request.GetString("override_callback_uri", ""); val != "" {
		args["override_callback_uri"] = val
	}

	// Optional: verify_token
	if val := request.GetString("verify_token", ""); val != "" {
		args["verify_token"] = val
	}



	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_subscribed_apps(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_subscribed_apps: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_get_template_analytics handles the whatsappbusinessaccount_get_template_analytics tool
func HandleWhatsappbusinessaccount_get_template_analytics(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: end
	end, err := request.RequireString("end")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter end: %v", err)), nil
	}
	args["end"] = end

	// Required: granularity
	granularity, err := request.RequireString("granularity")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter granularity: %v", err)), nil
	}
	args["granularity"] = granularity

	// Optional: metric_types
	// array type - using string
	if val := request.GetString("metric_types", ""); val != "" {
		args["metric_types"] = val
	}

	// Optional: product_type
	if val := request.GetString("product_type", ""); val != "" {
		args["product_type"] = val
	}

	// Required: start
	start, err := request.RequireString("start")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter start: %v", err)), nil
	}
	args["start"] = start

	// Required: template_ids
	template_ids, err := request.RequireString("template_ids")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter template_ids: %v", err)), nil
	}
	args["template_ids"] = template_ids



	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_template_analytics(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_template_analytics: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_get_template_group_analytics handles the whatsappbusinessaccount_get_template_group_analytics tool
func HandleWhatsappbusinessaccount_get_template_group_analytics(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: end
	end, err := request.RequireString("end")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter end: %v", err)), nil
	}
	args["end"] = end

	// Required: granularity
	granularity, err := request.RequireString("granularity")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter granularity: %v", err)), nil
	}
	args["granularity"] = granularity

	// Optional: metric_types
	// array type - using string
	if val := request.GetString("metric_types", ""); val != "" {
		args["metric_types"] = val
	}

	// Required: start
	start, err := request.RequireString("start")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter start: %v", err)), nil
	}
	args["start"] = start

	// Required: template_group_ids
	template_group_ids, err := request.RequireString("template_group_ids")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter template_group_ids: %v", err)), nil
	}
	args["template_group_ids"] = template_group_ids



	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_template_group_analytics(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_template_group_analytics: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_get_template_groups handles the whatsappbusinessaccount_get_template_groups tool
func HandleWhatsappbusinessaccount_get_template_groups(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_template_groups(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_template_groups: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_post_template_groups handles the whatsappbusinessaccount_post_template_groups tool
func HandleWhatsappbusinessaccount_post_template_groups(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: description
	description, err := request.RequireString("description")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter description: %v", err)), nil
	}
	args["description"] = description

	// Required: name
	name, err := request.RequireString("name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter name: %v", err)), nil
	}
	args["name"] = name

	// Required: whatsapp_business_templates
	whatsapp_business_templates, err := request.RequireString("whatsapp_business_templates")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter whatsapp_business_templates: %v", err)), nil
	}
	args["whatsapp_business_templates"] = whatsapp_business_templates



	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_template_groups(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_template_groups: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_get_template_performance_metrics handles the whatsappbusinessaccount_get_template_performance_metrics tool
func HandleWhatsappbusinessaccount_get_template_performance_metrics(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: name
	if val := request.GetString("name", ""); val != "" {
		args["name"] = val
	}

	// Optional: template_id
	if val := request.GetString("template_id", ""); val != "" {
		args["template_id"] = val
	}



	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_template_performance_metrics(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_template_performance_metrics: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_post_upsert_message_templates handles the whatsappbusinessaccount_post_upsert_message_templates tool
func HandleWhatsappbusinessaccount_post_upsert_message_templates(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: category
	category, err := request.RequireString("category")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter category: %v", err)), nil
	}
	args["category"] = category

	// Required: components
	components, err := request.RequireString("components")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter components: %v", err)), nil
	}
	args["components"] = components

	// Required: languages
	languages, err := request.RequireString("languages")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter languages: %v", err)), nil
	}
	args["languages"] = languages

	// Optional: message_send_ttl_seconds
	if val := request.GetInt("message_send_ttl_seconds", 0); val != 0 {
		args["message_send_ttl_seconds"] = val
	}

	// Required: name
	name, err := request.RequireString("name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter name: %v", err)), nil
	}
	args["name"] = name



	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_upsert_message_templates(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_upsert_message_templates: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_get_welcome_message_sequences handles the whatsappbusinessaccount_get_welcome_message_sequences tool
func HandleWhatsappbusinessaccount_get_welcome_message_sequences(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: app_id
	if val := request.GetString("app_id", ""); val != "" {
		args["app_id"] = val
	}

	// Optional: sequence_id
	if val := request.GetString("sequence_id", ""); val != "" {
		args["sequence_id"] = val
	}



	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_welcome_message_sequences(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_welcome_message_sequences: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_get_ handles the whatsappbusinessaccount_get_ tool
func HandleWhatsappbusinessaccount_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinessaccount_post_ handles the whatsappbusinessaccount_post_ tool
func HandleWhatsappbusinessaccount_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: is_enabled_for_insights
	if val := request.GetBool("is_enabled_for_insights", false); val {
		args["is_enabled_for_insights"] = val
	}



	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

