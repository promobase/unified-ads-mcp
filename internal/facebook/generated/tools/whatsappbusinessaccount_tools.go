// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetWhatsAppBusinessAccountTools returns MCP tools for WhatsAppBusinessAccount
func GetWhatsAppBusinessAccountTools() []mcp.Tool {
	var tools []mcp.Tool

	// whatsappbusinessaccount_get_activities tool
	whatsappbusinessaccount_get_activitiesTool := mcp.NewTool("whatsappbusinessaccount_get_activities",
		mcp.WithDescription("GET activities for WhatsAppBusinessAccount"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_activitiesTool)

	// whatsappbusinessaccount_delete_assigned_users tool
	// Params object accepts: user (int)
	whatsappbusinessaccount_delete_assigned_usersTool := mcp.NewTool("whatsappbusinessaccount_delete_assigned_users",
		mcp.WithDescription("DELETE assigned_users for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"user": map[string]any{
					"type":        "integer",
					"description": "user parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: user (integer) [required]"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_delete_assigned_usersTool)

	// whatsappbusinessaccount_get_assigned_users tool
	// Available fields for AssignedUser: business, id, name, user_type
	// Params object accepts: business (string)
	whatsappbusinessaccount_get_assigned_usersTool := mcp.NewTool("whatsappbusinessaccount_get_assigned_users",
		mcp.WithDescription("GET assigned_users for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"business": map[string]any{
					"type":        "string",
					"description": "business parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: business (string) [required]"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for AssignedUser objects. Available fields: business, id, name, user_type"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_assigned_usersTool)

	// whatsappbusinessaccount_post_assigned_users tool
	// Params object accepts: tasks (list<whatsappbusinessaccountassigned_users_tasks_enum_param>), user (int)
	whatsappbusinessaccount_post_assigned_usersTool := mcp.NewTool("whatsappbusinessaccount_post_assigned_users",
		mcp.WithDescription("POST assigned_users for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"tasks": map[string]any{
					"type":        "array",
					"description": "tasks parameter",
					"required":    true,
					"enum":        []string{"DEVELOP", "MANAGE", "MANAGE_EXTENSIONS", "MANAGE_PHONE", "MANAGE_PHONE_ASSETS", "MANAGE_TEMPLATES", "MESSAGING", "VIEW_COST", "VIEW_PHONE_ASSETS", "VIEW_TEMPLATES"},
					"items":       map[string]any{"type": "string"},
				},
				"user": map[string]any{
					"type":        "integer",
					"description": "user parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: tasks (array<enum>) [DEVELOP, MANAGE, MANAGE_EXTENSIONS, MANAGE_PHONE, MANAGE_PHONE_ASSETS, ...] [required], user (integer) [required]"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_assigned_usersTool)

	// whatsappbusinessaccount_get_audiences tool
	whatsappbusinessaccount_get_audiencesTool := mcp.NewTool("whatsappbusinessaccount_get_audiences",
		mcp.WithDescription("GET audiences for WhatsAppBusinessAccount"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_audiencesTool)

	// whatsappbusinessaccount_get_call_analytics tool
	// Params object accepts: country_codes (list<string>), dimensions (list<whatsappbusinessaccountcall_analytics_dimensions_enum_param>), directions (list<whatsappbusinessaccountcall_analytics_directions_enum_param>), end (unsigned int), granularity (whatsappbusinessaccountcall_analytics_granularity_enum_param), metric_types (list<whatsappbusinessaccountcall_analytics_metric_types_enum_param>), phone_numbers (list<string>), start (unsigned int)
	whatsappbusinessaccount_get_call_analyticsTool := mcp.NewTool("whatsappbusinessaccount_get_call_analytics",
		mcp.WithDescription("GET call_analytics for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"country_codes": map[string]any{
					"type":        "array",
					"description": "country_codes parameter",
					"items":       map[string]any{"type": "string"},
				},
				"dimensions": map[string]any{
					"type":        "array",
					"description": "dimensions parameter",
					"enum":        []string{"COUNTRY", "DIRECTION", "PHONE", "TIER", "UNKNOWN"},
					"items":       map[string]any{"type": "string"},
				},
				"directions": map[string]any{
					"type":        "array",
					"description": "directions parameter",
					"enum":        []string{"BUSINESS_INITIATED", "UNKNOWN", "USER_INITIATED"},
					"items":       map[string]any{"type": "string"},
				},
				"end": map[string]any{
					"type":        "integer",
					"description": "end parameter",
					"required":    true,
				},
				"granularity": map[string]any{
					"type":        "string",
					"description": "granularity parameter",
					"required":    true,
					"enum":        []string{"DAILY", "HALF_HOUR", "MONTHLY"},
				},
				"metric_types": map[string]any{
					"type":        "array",
					"description": "metric_types parameter",
					"enum":        []string{"AVERAGE_DURATION", "COST", "COUNT", "UNKNOWN"},
					"items":       map[string]any{"type": "string"},
				},
				"phone_numbers": map[string]any{
					"type":        "array",
					"description": "phone_numbers parameter",
					"items":       map[string]any{"type": "string"},
				},
				"start": map[string]any{
					"type":        "integer",
					"description": "start parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: country_codes (array<string>), dimensions (array<enum>) [COUNTRY, DIRECTION, PHONE, TIER, UNKNOWN], directions (array<enum>) [BUSINESS_INITIATED, UNKNOWN, USER_INITIATED], end (integer) [required], granularity (enum) [DAILY, HALF_HOUR, MONTHLY] [required], metric_types (array<enum>) [AVERAGE_DURATION, COST, COUNT, UNKNOWN], phone_numbers (array<string>), start (integer) [required]"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_call_analyticsTool)

	// whatsappbusinessaccount_get_conversation_analytics tool
	// Params object accepts: conversation_categories (list<whatsappbusinessaccountconversation_analytics_conversation_categories_enum_param>), conversation_directions (list<whatsappbusinessaccountconversation_analytics_conversation_directions_enum_param>), conversation_types (list<whatsappbusinessaccountconversation_analytics_conversation_types_enum_param>), country_codes (list<string>), dimensions (list<whatsappbusinessaccountconversation_analytics_dimensions_enum_param>), end (unsigned int), granularity (whatsappbusinessaccountconversation_analytics_granularity_enum_param), metric_types (list<whatsappbusinessaccountconversation_analytics_metric_types_enum_param>), phone_numbers (list<string>), start (unsigned int)
	whatsappbusinessaccount_get_conversation_analyticsTool := mcp.NewTool("whatsappbusinessaccount_get_conversation_analytics",
		mcp.WithDescription("GET conversation_analytics for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"conversation_categories": map[string]any{
					"type":        "array",
					"description": "conversation_categories parameter",
					"enum":        []string{"AUTHENTICATION", "AUTHENTICATION_INTERNATIONAL", "MARKETING", "MARKETING_LITE", "SERVICE", "UTILITY"},
					"items":       map[string]any{"type": "string"},
				},
				"conversation_directions": map[string]any{
					"type":        "array",
					"description": "conversation_directions parameter",
					"enum":        []string{"BUSINESS_INITIATED", "UNKNOWN", "USER_INITIATED"},
					"items":       map[string]any{"type": "string"},
				},
				"conversation_types": map[string]any{
					"type":        "array",
					"description": "conversation_types parameter",
					"enum":        []string{"FREE_ENTRY_POINT", "FREE_TIER", "REGULAR", "UNKNOWN"},
					"items":       map[string]any{"type": "string"},
				},
				"country_codes": map[string]any{
					"type":        "array",
					"description": "country_codes parameter",
					"items":       map[string]any{"type": "string"},
				},
				"dimensions": map[string]any{
					"type":        "array",
					"description": "dimensions parameter",
					"enum":        []string{"CONVERSATION_CATEGORY", "CONVERSATION_DIRECTION", "CONVERSATION_TYPE", "COUNTRY", "PHONE", "UNKNOWN"},
					"items":       map[string]any{"type": "string"},
				},
				"end": map[string]any{
					"type":        "integer",
					"description": "end parameter",
					"required":    true,
				},
				"granularity": map[string]any{
					"type":        "string",
					"description": "granularity parameter",
					"required":    true,
					"enum":        []string{"DAILY", "HALF_HOUR", "MONTHLY"},
				},
				"metric_types": map[string]any{
					"type":        "array",
					"description": "metric_types parameter",
					"enum":        []string{"CONVERSATION", "COST", "UNKNOWN"},
					"items":       map[string]any{"type": "string"},
				},
				"phone_numbers": map[string]any{
					"type":        "array",
					"description": "phone_numbers parameter",
					"items":       map[string]any{"type": "string"},
				},
				"start": map[string]any{
					"type":        "integer",
					"description": "start parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: conversation_categories (array<enum>) [AUTHENTICATION, AUTHENTICATION_INTERNATIONAL, MARKETING, MARKETING_LITE, SERVICE, ...], conversation_directions (array<enum>) [BUSINESS_INITIATED, UNKNOWN, USER_INITIATED], conversation_types (array<enum>) [FREE_ENTRY_POINT, FREE_TIER, REGULAR, UNKNOWN], country_codes (array<string>), dimensions (array<enum>) [CONVERSATION_CATEGORY, CONVERSATION_DIRECTION, CONVERSATION_TYPE, COUNTRY, PHONE, ...], end (integer) [required], granularity (enum) [DAILY, HALF_HOUR, MONTHLY] [required], metric_types (array<enum>) [CONVERSATION, COST, UNKNOWN], phone_numbers (array<string>), start (integer) [required]"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_conversation_analyticsTool)

	// whatsappbusinessaccount_get_dataset tool
	// Available fields for Dataset: id, name
	whatsappbusinessaccount_get_datasetTool := mcp.NewTool("whatsappbusinessaccount_get_dataset",
		mcp.WithDescription("GET dataset for WhatsAppBusinessAccount"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for Dataset objects. Available fields: id, name"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_datasetTool)

	// whatsappbusinessaccount_post_dataset tool
	// Params object accepts: dataset_name (string)
	whatsappbusinessaccount_post_datasetTool := mcp.NewTool("whatsappbusinessaccount_post_dataset",
		mcp.WithDescription("POST dataset for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"dataset_name": map[string]any{
					"type":        "string",
					"description": "dataset_name parameter",
				},
			}),
			mcp.Description("Parameters object containing: dataset_name (string)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_datasetTool)

	// whatsappbusinessaccount_get_flows tool
	whatsappbusinessaccount_get_flowsTool := mcp.NewTool("whatsappbusinessaccount_get_flows",
		mcp.WithDescription("GET flows for WhatsAppBusinessAccount"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_flowsTool)

	// whatsappbusinessaccount_post_flows tool
	// Params object accepts: categories (list<whatsappbusinessaccountflows_categories_enum_param>), clone_flow_id (string), endpoint_uri (string), flow_json (string), name (string), publish (bool)
	whatsappbusinessaccount_post_flowsTool := mcp.NewTool("whatsappbusinessaccount_post_flows",
		mcp.WithDescription("POST flows for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"categories": map[string]any{
					"type":        "array",
					"description": "categories parameter",
					"required":    true,
					"enum":        []string{"APPOINTMENT_BOOKING", "CONTACT_US", "CUSTOMER_SUPPORT", "LEAD_GENERATION", "OTHER", "SHOPPING", "SIGN_IN", "SIGN_UP", "SURVEY"},
					"items":       map[string]any{"type": "string"},
				},
				"clone_flow_id": map[string]any{
					"type":        "string",
					"description": "clone_flow_id parameter",
				},
				"endpoint_uri": map[string]any{
					"type":        "string",
					"description": "endpoint_uri parameter",
				},
				"flow_json": map[string]any{
					"type":        "string",
					"description": "flow_json parameter",
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
					"required":    true,
				},
				"publish": map[string]any{
					"type":        "boolean",
					"description": "publish parameter",
				},
			}),
			mcp.Description("Parameters object containing: categories (array<enum>) [APPOINTMENT_BOOKING, CONTACT_US, CUSTOMER_SUPPORT, LEAD_GENERATION, OTHER, ...] [required], clone_flow_id (string), endpoint_uri (string), flow_json (string), name (string) [required], publish (boolean)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_flowsTool)

	// whatsappbusinessaccount_post_generate_payment_configuration_oauth_link tool
	// Params object accepts: configuration_name (string), redirect_url (string)
	whatsappbusinessaccount_post_generate_payment_configuration_oauth_linkTool := mcp.NewTool("whatsappbusinessaccount_post_generate_payment_configuration_oauth_link",
		mcp.WithDescription("POST generate_payment_configuration_oauth_link for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"configuration_name": map[string]any{
					"type":        "string",
					"description": "configuration_name parameter",
					"required":    true,
				},
				"redirect_url": map[string]any{
					"type":        "string",
					"description": "redirect_url parameter",
				},
			}),
			mcp.Description("Parameters object containing: configuration_name (string) [required], redirect_url (string)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_generate_payment_configuration_oauth_linkTool)

	// whatsappbusinessaccount_get_message_campaigns tool
	whatsappbusinessaccount_get_message_campaignsTool := mcp.NewTool("whatsappbusinessaccount_get_message_campaigns",
		mcp.WithDescription("GET message_campaigns for WhatsAppBusinessAccount"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_message_campaignsTool)

	// whatsappbusinessaccount_get_message_template_previews tool
	// Params object accepts: add_security_recommendation (bool), button_types (list<whatsappbusinessaccountmessage_template_previews_button_types_enum_param>), category (whatsappbusinessaccountmessage_template_previews_category_enum_param), code_expiration_minutes (unsigned int), languages (list<string>)
	whatsappbusinessaccount_get_message_template_previewsTool := mcp.NewTool("whatsappbusinessaccount_get_message_template_previews",
		mcp.WithDescription("GET message_template_previews for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"add_security_recommendation": map[string]any{
					"type":        "boolean",
					"description": "add_security_recommendation parameter",
				},
				"button_types": map[string]any{
					"type":        "array",
					"description": "button_types parameter",
					"enum":        []string{"OTP"},
					"items":       map[string]any{"type": "string"},
				},
				"category": map[string]any{
					"type":        "string",
					"description": "category parameter",
					"required":    true,
					"enum":        []string{"AUTHENTICATION"},
				},
				"code_expiration_minutes": map[string]any{
					"type":        "integer",
					"description": "code_expiration_minutes parameter",
				},
				"languages": map[string]any{
					"type":        "array",
					"description": "languages parameter",
					"items":       map[string]any{"type": "string"},
				},
			}),
			mcp.Description("Parameters object containing: add_security_recommendation (boolean), button_types (array<enum>) [OTP], category (enum) [AUTHENTICATION] [required], code_expiration_minutes (integer), languages (array<string>)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_message_template_previewsTool)

	// whatsappbusinessaccount_delete_message_templates tool
	// Params object accepts: hsm_id (string), name (string)
	whatsappbusinessaccount_delete_message_templatesTool := mcp.NewTool("whatsappbusinessaccount_delete_message_templates",
		mcp.WithDescription("DELETE message_templates for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"hsm_id": map[string]any{
					"type":        "string",
					"description": "hsm_id parameter",
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: hsm_id (string), name (string) [required]"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_delete_message_templatesTool)

	// whatsappbusinessaccount_get_message_templates tool
	// Params object accepts: category (list<whatsappbusinessaccountmessage_templates_category_enum_param>), content (string), language (list<string>), name (string), name_or_content (string), quality_score (list<whatsappbusinessaccountmessage_templates_quality_score_enum_param>), status (list<whatsappbusinessaccountmessage_templates_status_enum_param>)
	whatsappbusinessaccount_get_message_templatesTool := mcp.NewTool("whatsappbusinessaccount_get_message_templates",
		mcp.WithDescription("GET message_templates for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"category": map[string]any{
					"type":        "array",
					"description": "category parameter",
					"enum":        []string{"AUTHENTICATION", "MARKETING", "UTILITY"},
					"items":       map[string]any{"type": "string"},
				},
				"content": map[string]any{
					"type":        "string",
					"description": "content parameter",
				},
				"language": map[string]any{
					"type":        "array",
					"description": "language parameter",
					"items":       map[string]any{"type": "string"},
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
				},
				"name_or_content": map[string]any{
					"type":        "string",
					"description": "name_or_content parameter",
				},
				"quality_score": map[string]any{
					"type":        "array",
					"description": "quality_score parameter",
					"enum":        []string{"GREEN", "RED", "UNKNOWN", "YELLOW"},
					"items":       map[string]any{"type": "string"},
				},
				"status": map[string]any{
					"type":        "array",
					"description": "status parameter",
					"enum":        []string{"APPROVED", "ARCHIVED", "DELETED", "DISABLED", "IN_APPEAL", "LIMIT_EXCEEDED", "PAUSED", "PENDING", "PENDING_DELETION", "REJECTED"},
					"items":       map[string]any{"type": "string"},
				},
			}),
			mcp.Description("Parameters object containing: category (array<enum>) [AUTHENTICATION, MARKETING, UTILITY], content (string), language (array<string>), name (string), name_or_content (string), quality_score (array<enum>) [GREEN, RED, UNKNOWN, YELLOW], status (array<enum>) [APPROVED, ARCHIVED, DELETED, DISABLED, IN_APPEAL, ...]"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_message_templatesTool)

	// whatsappbusinessaccount_post_message_templates tool
	// Params object accepts: allow_category_change (bool), category (whatsappbusinessaccountmessage_templates_category_enum_param), components (list<map>), cta_url_link_tracking_opted_out (bool), degrees_of_freedom_spec (map), display_format (whatsappbusinessaccountmessage_templates_display_format_enum_param), language (string), library_template_body_inputs (map), library_template_button_inputs (list<map>), library_template_name (string), message_send_ttl_seconds (unsigned int), name (string), parameter_format (whatsappbusinessaccountmessage_templates_parameter_format_enum_param), sub_category (whatsappbusinessaccountmessage_templates_sub_category_enum_param)
	whatsappbusinessaccount_post_message_templatesTool := mcp.NewTool("whatsappbusinessaccount_post_message_templates",
		mcp.WithDescription("POST message_templates for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"allow_category_change": map[string]any{
					"type":        "boolean",
					"description": "allow_category_change parameter",
				},
				"category": map[string]any{
					"type":        "string",
					"description": "category parameter",
					"required":    true,
					"enum":        []string{"AUTHENTICATION", "MARKETING", "UTILITY"},
				},
				"components": map[string]any{
					"type":        "array",
					"description": "components parameter",
					"items":       map[string]any{"type": "object"},
				},
				"cta_url_link_tracking_opted_out": map[string]any{
					"type":        "boolean",
					"description": "cta_url_link_tracking_opted_out parameter",
				},
				"degrees_of_freedom_spec": map[string]any{
					"type":        "object",
					"description": "degrees_of_freedom_spec parameter",
				},
				"display_format": map[string]any{
					"type":        "string",
					"description": "display_format parameter",
					"enum":        []string{"ORDER_DETAILS"},
				},
				"language": map[string]any{
					"type":        "string",
					"description": "language parameter",
					"required":    true,
				},
				"library_template_body_inputs": map[string]any{
					"type":        "object",
					"description": "library_template_body_inputs parameter",
				},
				"library_template_button_inputs": map[string]any{
					"type":        "array",
					"description": "library_template_button_inputs parameter",
					"items":       map[string]any{"type": "object"},
				},
				"library_template_name": map[string]any{
					"type":        "string",
					"description": "library_template_name parameter",
				},
				"message_send_ttl_seconds": map[string]any{
					"type":        "integer",
					"description": "message_send_ttl_seconds parameter",
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
					"required":    true,
				},
				"parameter_format": map[string]any{
					"type":        "string",
					"description": "parameter_format parameter",
					"enum":        []string{"NAMED", "POSITIONAL"},
				},
				"sub_category": map[string]any{
					"type":        "string",
					"description": "sub_category parameter",
					"enum":        []string{"ORDER_DETAILS", "ORDER_STATUS"},
				},
			}),
			mcp.Description("Parameters object containing: allow_category_change (boolean), category (enum) [AUTHENTICATION, MARKETING, UTILITY] [required], components (array<object>), cta_url_link_tracking_opted_out (boolean), degrees_of_freedom_spec (object), display_format (enum) [ORDER_DETAILS], language (string) [required], library_template_body_inputs (object), library_template_button_inputs (array<object>), library_template_name (string), message_send_ttl_seconds (integer), name (string) [required], parameter_format (enum) [NAMED, POSITIONAL], sub_category (enum) [ORDER_DETAILS, ORDER_STATUS]"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_message_templatesTool)

	// whatsappbusinessaccount_post_migrate_flows tool
	// Params object accepts: source_flow_names (list<string>), source_waba_id (string)
	whatsappbusinessaccount_post_migrate_flowsTool := mcp.NewTool("whatsappbusinessaccount_post_migrate_flows",
		mcp.WithDescription("POST migrate_flows for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"source_flow_names": map[string]any{
					"type":        "array",
					"description": "source_flow_names parameter",
					"items":       map[string]any{"type": "string"},
				},
				"source_waba_id": map[string]any{
					"type":        "string",
					"description": "source_waba_id parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: source_flow_names (array<string>), source_waba_id (string) [required]"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_migrate_flowsTool)

	// whatsappbusinessaccount_post_migrate_message_templates tool
	// Params object accepts: page_number (unsigned int), source_waba_id (string)
	whatsappbusinessaccount_post_migrate_message_templatesTool := mcp.NewTool("whatsappbusinessaccount_post_migrate_message_templates",
		mcp.WithDescription("POST migrate_message_templates for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"page_number": map[string]any{
					"type":        "integer",
					"description": "page_number parameter",
				},
				"source_waba_id": map[string]any{
					"type":        "string",
					"description": "source_waba_id parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: page_number (integer), source_waba_id (string) [required]"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_migrate_message_templatesTool)

	// whatsappbusinessaccount_delete_payment_configuration tool
	// Params object accepts: configuration_name (string)
	whatsappbusinessaccount_delete_payment_configurationTool := mcp.NewTool("whatsappbusinessaccount_delete_payment_configuration",
		mcp.WithDescription("DELETE payment_configuration for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"configuration_name": map[string]any{
					"type":        "string",
					"description": "configuration_name parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: configuration_name (string) [required]"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_delete_payment_configurationTool)

	// whatsappbusinessaccount_get_payment_configuration tool
	// Params object accepts: configuration_name (string)
	whatsappbusinessaccount_get_payment_configurationTool := mcp.NewTool("whatsappbusinessaccount_get_payment_configuration",
		mcp.WithDescription("GET payment_configuration for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"configuration_name": map[string]any{
					"type":        "string",
					"description": "configuration_name parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: configuration_name (string) [required]"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_payment_configurationTool)

	// whatsappbusinessaccount_post_payment_configuration tool
	// Params object accepts: configuration_name (string), data_endpoint_url (string), merchant_category_code (string), merchant_vpa (string), provider_name (whatsappbusinessaccountpayment_configuration_provider_name_enum_param), purpose_code (string), redirect_url (string)
	whatsappbusinessaccount_post_payment_configurationTool := mcp.NewTool("whatsappbusinessaccount_post_payment_configuration",
		mcp.WithDescription("POST payment_configuration for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"configuration_name": map[string]any{
					"type":        "string",
					"description": "configuration_name parameter",
					"required":    true,
				},
				"data_endpoint_url": map[string]any{
					"type":        "string",
					"description": "data_endpoint_url parameter",
				},
				"merchant_category_code": map[string]any{
					"type":        "string",
					"description": "merchant_category_code parameter",
				},
				"merchant_vpa": map[string]any{
					"type":        "string",
					"description": "merchant_vpa parameter",
				},
				"provider_name": map[string]any{
					"type":        "string",
					"description": "provider_name parameter",
					"enum":        []string{"BILLDESK", "PAYU", "RAZORPAY", "UPI_VPA", "ZAAKPAY"},
				},
				"purpose_code": map[string]any{
					"type":        "string",
					"description": "purpose_code parameter",
				},
				"redirect_url": map[string]any{
					"type":        "string",
					"description": "redirect_url parameter",
				},
			}),
			mcp.Description("Parameters object containing: configuration_name (string) [required], data_endpoint_url (string), merchant_category_code (string), merchant_vpa (string), provider_name (enum) [BILLDESK, PAYU, RAZORPAY, UPI_VPA, ZAAKPAY], purpose_code (string), redirect_url (string)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_payment_configurationTool)

	// whatsappbusinessaccount_get_payment_configurations tool
	whatsappbusinessaccount_get_payment_configurationsTool := mcp.NewTool("whatsappbusinessaccount_get_payment_configurations",
		mcp.WithDescription("GET payment_configurations for WhatsAppBusinessAccount"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_payment_configurationsTool)

	// whatsappbusinessaccount_get_phone_numbers tool
	whatsappbusinessaccount_get_phone_numbersTool := mcp.NewTool("whatsappbusinessaccount_get_phone_numbers",
		mcp.WithDescription("GET phone_numbers for WhatsAppBusinessAccount"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_phone_numbersTool)

	// whatsappbusinessaccount_post_phone_numbers tool
	// Params object accepts: cc (string), migrate_phone_number (bool), phone_number (string), preverified_id (string), verified_name (string)
	whatsappbusinessaccount_post_phone_numbersTool := mcp.NewTool("whatsappbusinessaccount_post_phone_numbers",
		mcp.WithDescription("POST phone_numbers for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"cc": map[string]any{
					"type":        "string",
					"description": "cc parameter",
				},
				"migrate_phone_number": map[string]any{
					"type":        "boolean",
					"description": "migrate_phone_number parameter",
				},
				"phone_number": map[string]any{
					"type":        "string",
					"description": "phone_number parameter",
				},
				"preverified_id": map[string]any{
					"type":        "string",
					"description": "preverified_id parameter",
				},
				"verified_name": map[string]any{
					"type":        "string",
					"description": "verified_name parameter",
				},
			}),
			mcp.Description("Parameters object containing: cc (string), migrate_phone_number (boolean), phone_number (string), preverified_id (string), verified_name (string)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_phone_numbersTool)

	// whatsappbusinessaccount_get_pricing_analytics tool
	// Params object accepts: country_codes (list<string>), dimensions (list<whatsappbusinessaccountpricing_analytics_dimensions_enum_param>), end (unsigned int), granularity (whatsappbusinessaccountpricing_analytics_granularity_enum_param), metric_types (list<whatsappbusinessaccountpricing_analytics_metric_types_enum_param>), phone_numbers (list<string>), pricing_categories (list<whatsappbusinessaccountpricing_analytics_pricing_categories_enum_param>), pricing_types (list<whatsappbusinessaccountpricing_analytics_pricing_types_enum_param>), start (unsigned int), tiers (list<string>)
	whatsappbusinessaccount_get_pricing_analyticsTool := mcp.NewTool("whatsappbusinessaccount_get_pricing_analytics",
		mcp.WithDescription("GET pricing_analytics for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"country_codes": map[string]any{
					"type":        "array",
					"description": "country_codes parameter",
					"items":       map[string]any{"type": "string"},
				},
				"dimensions": map[string]any{
					"type":        "array",
					"description": "dimensions parameter",
					"enum":        []string{"COUNTRY", "PHONE", "PRICING_CATEGORY", "PRICING_TYPE", "TIER"},
					"items":       map[string]any{"type": "string"},
				},
				"end": map[string]any{
					"type":        "integer",
					"description": "end parameter",
					"required":    true,
				},
				"granularity": map[string]any{
					"type":        "string",
					"description": "granularity parameter",
					"required":    true,
					"enum":        []string{"DAILY", "HALF_HOUR", "MONTHLY"},
				},
				"metric_types": map[string]any{
					"type":        "array",
					"description": "metric_types parameter",
					"enum":        []string{"COST", "VOLUME"},
					"items":       map[string]any{"type": "string"},
				},
				"phone_numbers": map[string]any{
					"type":        "array",
					"description": "phone_numbers parameter",
					"items":       map[string]any{"type": "string"},
				},
				"pricing_categories": map[string]any{
					"type":        "array",
					"description": "pricing_categories parameter",
					"enum":        []string{"AUTHENTICATION", "AUTHENTICATION_INTERNATIONAL", "GROUP_MARKETING", "GROUP_SERVICE", "GROUP_UTILITY", "MARKETING", "MARKETING_LITE", "SERVICE", "UTILITY"},
					"items":       map[string]any{"type": "string"},
				},
				"pricing_types": map[string]any{
					"type":        "array",
					"description": "pricing_types parameter",
					"enum":        []string{"FREE_CUSTOMER_SERVICE", "FREE_ENTRY_POINT", "REGULAR"},
					"items":       map[string]any{"type": "string"},
				},
				"start": map[string]any{
					"type":        "integer",
					"description": "start parameter",
					"required":    true,
				},
				"tiers": map[string]any{
					"type":        "array",
					"description": "tiers parameter",
					"items":       map[string]any{"type": "string"},
				},
			}),
			mcp.Description("Parameters object containing: country_codes (array<string>), dimensions (array<enum>) [COUNTRY, PHONE, PRICING_CATEGORY, PRICING_TYPE, TIER], end (integer) [required], granularity (enum) [DAILY, HALF_HOUR, MONTHLY] [required], metric_types (array<enum>) [COST, VOLUME], phone_numbers (array<string>), pricing_categories (array<enum>) [AUTHENTICATION, AUTHENTICATION_INTERNATIONAL, GROUP_MARKETING, GROUP_SERVICE, GROUP_UTILITY, ...], pricing_types (array<enum>) [FREE_CUSTOMER_SERVICE, FREE_ENTRY_POINT, REGULAR], start (integer) [required], tiers (array<string>)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_pricing_analyticsTool)

	// whatsappbusinessaccount_delete_product_catalogs tool
	// Params object accepts: catalog_id (string)
	whatsappbusinessaccount_delete_product_catalogsTool := mcp.NewTool("whatsappbusinessaccount_delete_product_catalogs",
		mcp.WithDescription("DELETE product_catalogs for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"catalog_id": map[string]any{
					"type":        "string",
					"description": "catalog_id parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: catalog_id (string) [required]"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_delete_product_catalogsTool)

	// whatsappbusinessaccount_get_product_catalogs tool
	// Available fields for ProductCatalog: ad_account_to_collaborative_ads_share_settings, agency_collaborative_ads_share_settings, business, catalog_store, commerce_merchant_settings, creator_user, da_display_settings, default_image_url, fallback_image_url, feed_count, id, is_catalog_segment, is_local_catalog, name, owner_business, product_count, store_catalog_settings, user_access_expire_time, vertical
	whatsappbusinessaccount_get_product_catalogsTool := mcp.NewTool("whatsappbusinessaccount_get_product_catalogs",
		mcp.WithDescription("GET product_catalogs for WhatsAppBusinessAccount"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for ProductCatalog objects. Available fields: ad_account_to_collaborative_ads_share_settings, agency_collaborative_ads_share_settings, business, catalog_store, commerce_merchant_settings, creator_user, da_display_settings, default_image_url, fallback_image_url, feed_count, id, is_catalog_segment, is_local_catalog, name, owner_business (and 4 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_product_catalogsTool)

	// whatsappbusinessaccount_post_product_catalogs tool
	// Params object accepts: catalog_id (string)
	whatsappbusinessaccount_post_product_catalogsTool := mcp.NewTool("whatsappbusinessaccount_post_product_catalogs",
		mcp.WithDescription("POST product_catalogs for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"catalog_id": map[string]any{
					"type":        "string",
					"description": "catalog_id parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: catalog_id (string) [required]"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_product_catalogsTool)

	// whatsappbusinessaccount_get_schedules tool
	whatsappbusinessaccount_get_schedulesTool := mcp.NewTool("whatsappbusinessaccount_get_schedules",
		mcp.WithDescription("GET schedules for WhatsAppBusinessAccount"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_schedulesTool)

	// whatsappbusinessaccount_post_set_obo_mobility_intent tool
	// Params object accepts: solution_id (string)
	whatsappbusinessaccount_post_set_obo_mobility_intentTool := mcp.NewTool("whatsappbusinessaccount_post_set_obo_mobility_intent",
		mcp.WithDescription("POST set_obo_mobility_intent for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"solution_id": map[string]any{
					"type":        "string",
					"description": "solution_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: solution_id (string)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_set_obo_mobility_intentTool)

	// whatsappbusinessaccount_post_set_solution_migration_intent tool
	// Params object accepts: app_id (string), solution_id (string)
	whatsappbusinessaccount_post_set_solution_migration_intentTool := mcp.NewTool("whatsappbusinessaccount_post_set_solution_migration_intent",
		mcp.WithDescription("POST set_solution_migration_intent for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"app_id": map[string]any{
					"type":        "string",
					"description": "app_id parameter",
				},
				"solution_id": map[string]any{
					"type":        "string",
					"description": "solution_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: app_id (string), solution_id (string)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_set_solution_migration_intentTool)

	// whatsappbusinessaccount_get_solutions tool
	whatsappbusinessaccount_get_solutionsTool := mcp.NewTool("whatsappbusinessaccount_get_solutions",
		mcp.WithDescription("GET solutions for WhatsAppBusinessAccount"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_solutionsTool)

	// whatsappbusinessaccount_delete_subscribed_apps tool
	whatsappbusinessaccount_delete_subscribed_appsTool := mcp.NewTool("whatsappbusinessaccount_delete_subscribed_apps",
		mcp.WithDescription("DELETE subscribed_apps for WhatsAppBusinessAccount"),
	)
	tools = append(tools, whatsappbusinessaccount_delete_subscribed_appsTool)

	// whatsappbusinessaccount_get_subscribed_apps tool
	whatsappbusinessaccount_get_subscribed_appsTool := mcp.NewTool("whatsappbusinessaccount_get_subscribed_apps",
		mcp.WithDescription("GET subscribed_apps for WhatsAppBusinessAccount"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_subscribed_appsTool)

	// whatsappbusinessaccount_post_subscribed_apps tool
	// Params object accepts: override_callback_uri (string), verify_token (string)
	whatsappbusinessaccount_post_subscribed_appsTool := mcp.NewTool("whatsappbusinessaccount_post_subscribed_apps",
		mcp.WithDescription("POST subscribed_apps for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"override_callback_uri": map[string]any{
					"type":        "string",
					"description": "override_callback_uri parameter",
				},
				"verify_token": map[string]any{
					"type":        "string",
					"description": "verify_token parameter",
				},
			}),
			mcp.Description("Parameters object containing: override_callback_uri (string), verify_token (string)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_subscribed_appsTool)

	// whatsappbusinessaccount_get_template_analytics tool
	// Params object accepts: end (datetime), granularity (whatsappbusinessaccounttemplate_analytics_granularity_enum_param), metric_types (list<whatsappbusinessaccounttemplate_analytics_metric_types_enum_param>), product_type (whatsappbusinessaccounttemplate_analytics_product_type_enum_param), start (datetime), template_ids (list<string>)
	whatsappbusinessaccount_get_template_analyticsTool := mcp.NewTool("whatsappbusinessaccount_get_template_analytics",
		mcp.WithDescription("GET template_analytics for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"end": map[string]any{
					"type":        "string",
					"description": "end parameter",
					"required":    true,
				},
				"granularity": map[string]any{
					"type":        "string",
					"description": "granularity parameter",
					"required":    true,
					"enum":        []string{"DAILY"},
				},
				"metric_types": map[string]any{
					"type":        "array",
					"description": "metric_types parameter",
					"enum":        []string{"CLICKED", "COST", "DELIVERED", "READ", "REPLIED", "SENT"},
					"items":       map[string]any{"type": "string"},
				},
				"product_type": map[string]any{
					"type":        "string",
					"description": "product_type parameter",
					"enum":        []string{"CLOUD_API", "MARKETING_MESSAGES_LITE_API"},
				},
				"start": map[string]any{
					"type":        "string",
					"description": "start parameter",
					"required":    true,
				},
				"template_ids": map[string]any{
					"type":        "array",
					"description": "template_ids parameter",
					"required":    true,
					"items":       map[string]any{"type": "string"},
				},
			}),
			mcp.Description("Parameters object containing: end (datetime) [required], granularity (enum) [DAILY] [required], metric_types (array<enum>) [CLICKED, COST, DELIVERED, READ, REPLIED, ...], product_type (enum) [CLOUD_API, MARKETING_MESSAGES_LITE_API], start (datetime) [required], template_ids (array<string>) [required]"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_template_analyticsTool)

	// whatsappbusinessaccount_get_template_group_analytics tool
	// Params object accepts: end (datetime), granularity (whatsappbusinessaccounttemplate_group_analytics_granularity_enum_param), metric_types (list<whatsappbusinessaccounttemplate_group_analytics_metric_types_enum_param>), start (datetime), template_group_ids (list<string>)
	whatsappbusinessaccount_get_template_group_analyticsTool := mcp.NewTool("whatsappbusinessaccount_get_template_group_analytics",
		mcp.WithDescription("GET template_group_analytics for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"end": map[string]any{
					"type":        "string",
					"description": "end parameter",
					"required":    true,
				},
				"granularity": map[string]any{
					"type":        "string",
					"description": "granularity parameter",
					"required":    true,
					"enum":        []string{"DAILY"},
				},
				"metric_types": map[string]any{
					"type":        "array",
					"description": "metric_types parameter",
					"enum":        []string{"CLICKED", "COST", "DELIVERED", "READ", "REPLIED", "SENT"},
					"items":       map[string]any{"type": "string"},
				},
				"start": map[string]any{
					"type":        "string",
					"description": "start parameter",
					"required":    true,
				},
				"template_group_ids": map[string]any{
					"type":        "array",
					"description": "template_group_ids parameter",
					"required":    true,
					"items":       map[string]any{"type": "string"},
				},
			}),
			mcp.Description("Parameters object containing: end (datetime) [required], granularity (enum) [DAILY] [required], metric_types (array<enum>) [CLICKED, COST, DELIVERED, READ, REPLIED, ...], start (datetime) [required], template_group_ids (array<string>) [required]"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_template_group_analyticsTool)

	// whatsappbusinessaccount_get_template_groups tool
	whatsappbusinessaccount_get_template_groupsTool := mcp.NewTool("whatsappbusinessaccount_get_template_groups",
		mcp.WithDescription("GET template_groups for WhatsAppBusinessAccount"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_template_groupsTool)

	// whatsappbusinessaccount_post_template_groups tool
	// Params object accepts: description (string), name (string), whatsapp_business_templates (list<string>)
	whatsappbusinessaccount_post_template_groupsTool := mcp.NewTool("whatsappbusinessaccount_post_template_groups",
		mcp.WithDescription("POST template_groups for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"description": map[string]any{
					"type":        "string",
					"description": "description parameter",
					"required":    true,
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
					"required":    true,
				},
				"whatsapp_business_templates": map[string]any{
					"type":        "array",
					"description": "whatsapp_business_templates parameter",
					"required":    true,
					"items":       map[string]any{"type": "string"},
				},
			}),
			mcp.Description("Parameters object containing: description (string) [required], name (string) [required], whatsapp_business_templates (array<string>) [required]"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_template_groupsTool)

	// whatsappbusinessaccount_get_template_performance_metrics tool
	// Params object accepts: name (string), template_id (string)
	whatsappbusinessaccount_get_template_performance_metricsTool := mcp.NewTool("whatsappbusinessaccount_get_template_performance_metrics",
		mcp.WithDescription("GET template_performance_metrics for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
				},
				"template_id": map[string]any{
					"type":        "string",
					"description": "template_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: name (string), template_id (string)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_template_performance_metricsTool)

	// whatsappbusinessaccount_post_upsert_message_templates tool
	// Params object accepts: category (whatsappbusinessaccountupsert_message_templates_category_enum_param), components (list<map>), languages (list<string>), message_send_ttl_seconds (unsigned int), name (string)
	whatsappbusinessaccount_post_upsert_message_templatesTool := mcp.NewTool("whatsappbusinessaccount_post_upsert_message_templates",
		mcp.WithDescription("POST upsert_message_templates for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"category": map[string]any{
					"type":        "string",
					"description": "category parameter",
					"required":    true,
					"enum":        []string{"AUTHENTICATION"},
				},
				"components": map[string]any{
					"type":        "array",
					"description": "components parameter",
					"required":    true,
					"items":       map[string]any{"type": "object"},
				},
				"languages": map[string]any{
					"type":        "array",
					"description": "languages parameter",
					"required":    true,
					"items":       map[string]any{"type": "string"},
				},
				"message_send_ttl_seconds": map[string]any{
					"type":        "integer",
					"description": "message_send_ttl_seconds parameter",
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: category (enum) [AUTHENTICATION] [required], components (array<object>) [required], languages (array<string>) [required], message_send_ttl_seconds (integer), name (string) [required]"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_upsert_message_templatesTool)

	// whatsappbusinessaccount_get_welcome_message_sequences tool
	// Available fields for CTXPartnerAppWelcomeMessageFlow: compatible_platforms, eligible_platforms, id, is_ig_only_flow, is_used_in_ad, last_update_time, name, welcome_message_flow, welcome_message_sequence
	// Params object accepts: app_id (string), sequence_id (string)
	whatsappbusinessaccount_get_welcome_message_sequencesTool := mcp.NewTool("whatsappbusinessaccount_get_welcome_message_sequences",
		mcp.WithDescription("GET welcome_message_sequences for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"app_id": map[string]any{
					"type":        "string",
					"description": "app_id parameter",
				},
				"sequence_id": map[string]any{
					"type":        "string",
					"description": "sequence_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: app_id (string), sequence_id (string)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for CTXPartnerAppWelcomeMessageFlow objects. Available fields: compatible_platforms, eligible_platforms, id, is_ig_only_flow, is_used_in_ad, last_update_time, name, welcome_message_flow, welcome_message_sequence"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_welcome_message_sequencesTool)

	// whatsappbusinessaccount_get_ tool
	// Available fields for WhatsAppBusinessAccount: account_review_status, analytics, auth_international_rate_eligibility, business_verification_status, country, creation_time, currency, health_status, id, is_enabled_for_insights, is_shared_with_partners, linked_commerce_account, marketing_messages_lite_api_status, message_template_namespace, name, on_behalf_of_business_info, owner_business, owner_business_info, ownership_type, primary_business_location, primary_funding_id, purchase_order_number, status, timezone_id
	whatsappbusinessaccount_get_Tool := mcp.NewTool("whatsappbusinessaccount_get_",
		mcp.WithDescription("GET  for WhatsAppBusinessAccount"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for WhatsAppBusinessAccount objects. Available fields: account_review_status, analytics, auth_international_rate_eligibility, business_verification_status, country, creation_time, currency, health_status, id, is_enabled_for_insights, is_shared_with_partners, linked_commerce_account, marketing_messages_lite_api_status, message_template_namespace, name (and 9 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_get_Tool)

	// whatsappbusinessaccount_post_ tool
	// Params object accepts: is_enabled_for_insights (bool)
	whatsappbusinessaccount_post_Tool := mcp.NewTool("whatsappbusinessaccount_post_",
		mcp.WithDescription("POST  for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"is_enabled_for_insights": map[string]any{
					"type":        "boolean",
					"description": "is_enabled_for_insights parameter",
				},
			}),
			mcp.Description("Parameters object containing: is_enabled_for_insights (boolean)"),
		),
	)
	tools = append(tools, whatsappbusinessaccount_post_Tool)

	return tools
}

// WhatsAppBusinessAccount handlers

// HandleWhatsappbusinessaccount_get_activities handles the whatsappbusinessaccount_get_activities tool with context-based auth
func HandleWhatsappbusinessaccount_get_activities(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_activities(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_activities: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_delete_assigned_users handles the whatsappbusinessaccount_delete_assigned_users tool with context-based auth
func HandleWhatsappbusinessaccount_delete_assigned_users(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_delete_assigned_users(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_delete_assigned_users: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_get_assigned_users handles the whatsappbusinessaccount_get_assigned_users tool with context-based auth
func HandleWhatsappbusinessaccount_get_assigned_users(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_assigned_users(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_assigned_users: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_post_assigned_users handles the whatsappbusinessaccount_post_assigned_users tool with context-based auth
func HandleWhatsappbusinessaccount_post_assigned_users(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_assigned_users(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_assigned_users: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_get_audiences handles the whatsappbusinessaccount_get_audiences tool with context-based auth
func HandleWhatsappbusinessaccount_get_audiences(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_audiences(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_audiences: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_get_call_analytics handles the whatsappbusinessaccount_get_call_analytics tool with context-based auth
func HandleWhatsappbusinessaccount_get_call_analytics(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_call_analytics(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_call_analytics: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_get_conversation_analytics handles the whatsappbusinessaccount_get_conversation_analytics tool with context-based auth
func HandleWhatsappbusinessaccount_get_conversation_analytics(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_conversation_analytics(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_conversation_analytics: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_get_dataset handles the whatsappbusinessaccount_get_dataset tool with context-based auth
func HandleWhatsappbusinessaccount_get_dataset(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_dataset(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_dataset: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_post_dataset handles the whatsappbusinessaccount_post_dataset tool with context-based auth
func HandleWhatsappbusinessaccount_post_dataset(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_dataset(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_dataset: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_get_flows handles the whatsappbusinessaccount_get_flows tool with context-based auth
func HandleWhatsappbusinessaccount_get_flows(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_flows(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_flows: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_post_flows handles the whatsappbusinessaccount_post_flows tool with context-based auth
func HandleWhatsappbusinessaccount_post_flows(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_flows(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_flows: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_post_generate_payment_configuration_oauth_link handles the whatsappbusinessaccount_post_generate_payment_configuration_oauth_link tool with context-based auth
func HandleWhatsappbusinessaccount_post_generate_payment_configuration_oauth_link(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_generate_payment_configuration_oauth_link(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_generate_payment_configuration_oauth_link: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_get_message_campaigns handles the whatsappbusinessaccount_get_message_campaigns tool with context-based auth
func HandleWhatsappbusinessaccount_get_message_campaigns(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_message_campaigns(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_message_campaigns: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_get_message_template_previews handles the whatsappbusinessaccount_get_message_template_previews tool with context-based auth
func HandleWhatsappbusinessaccount_get_message_template_previews(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_message_template_previews(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_message_template_previews: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_delete_message_templates handles the whatsappbusinessaccount_delete_message_templates tool with context-based auth
func HandleWhatsappbusinessaccount_delete_message_templates(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_delete_message_templates(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_delete_message_templates: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_get_message_templates handles the whatsappbusinessaccount_get_message_templates tool with context-based auth
func HandleWhatsappbusinessaccount_get_message_templates(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_message_templates(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_message_templates: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_post_message_templates handles the whatsappbusinessaccount_post_message_templates tool with context-based auth
func HandleWhatsappbusinessaccount_post_message_templates(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_message_templates(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_message_templates: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_post_migrate_flows handles the whatsappbusinessaccount_post_migrate_flows tool with context-based auth
func HandleWhatsappbusinessaccount_post_migrate_flows(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_migrate_flows(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_migrate_flows: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_post_migrate_message_templates handles the whatsappbusinessaccount_post_migrate_message_templates tool with context-based auth
func HandleWhatsappbusinessaccount_post_migrate_message_templates(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_migrate_message_templates(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_migrate_message_templates: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_delete_payment_configuration handles the whatsappbusinessaccount_delete_payment_configuration tool with context-based auth
func HandleWhatsappbusinessaccount_delete_payment_configuration(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_delete_payment_configuration(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_delete_payment_configuration: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_get_payment_configuration handles the whatsappbusinessaccount_get_payment_configuration tool with context-based auth
func HandleWhatsappbusinessaccount_get_payment_configuration(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_payment_configuration(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_payment_configuration: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_post_payment_configuration handles the whatsappbusinessaccount_post_payment_configuration tool with context-based auth
func HandleWhatsappbusinessaccount_post_payment_configuration(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_payment_configuration(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_payment_configuration: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_get_payment_configurations handles the whatsappbusinessaccount_get_payment_configurations tool with context-based auth
func HandleWhatsappbusinessaccount_get_payment_configurations(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_payment_configurations(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_payment_configurations: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_get_phone_numbers handles the whatsappbusinessaccount_get_phone_numbers tool with context-based auth
func HandleWhatsappbusinessaccount_get_phone_numbers(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_phone_numbers(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_phone_numbers: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_post_phone_numbers handles the whatsappbusinessaccount_post_phone_numbers tool with context-based auth
func HandleWhatsappbusinessaccount_post_phone_numbers(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_phone_numbers(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_phone_numbers: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_get_pricing_analytics handles the whatsappbusinessaccount_get_pricing_analytics tool with context-based auth
func HandleWhatsappbusinessaccount_get_pricing_analytics(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_pricing_analytics(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_pricing_analytics: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_delete_product_catalogs handles the whatsappbusinessaccount_delete_product_catalogs tool with context-based auth
func HandleWhatsappbusinessaccount_delete_product_catalogs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_delete_product_catalogs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_delete_product_catalogs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_get_product_catalogs handles the whatsappbusinessaccount_get_product_catalogs tool with context-based auth
func HandleWhatsappbusinessaccount_get_product_catalogs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_product_catalogs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_product_catalogs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_post_product_catalogs handles the whatsappbusinessaccount_post_product_catalogs tool with context-based auth
func HandleWhatsappbusinessaccount_post_product_catalogs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_product_catalogs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_product_catalogs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_get_schedules handles the whatsappbusinessaccount_get_schedules tool with context-based auth
func HandleWhatsappbusinessaccount_get_schedules(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_schedules(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_schedules: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_post_set_obo_mobility_intent handles the whatsappbusinessaccount_post_set_obo_mobility_intent tool with context-based auth
func HandleWhatsappbusinessaccount_post_set_obo_mobility_intent(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_set_obo_mobility_intent(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_set_obo_mobility_intent: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_post_set_solution_migration_intent handles the whatsappbusinessaccount_post_set_solution_migration_intent tool with context-based auth
func HandleWhatsappbusinessaccount_post_set_solution_migration_intent(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_set_solution_migration_intent(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_set_solution_migration_intent: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_get_solutions handles the whatsappbusinessaccount_get_solutions tool with context-based auth
func HandleWhatsappbusinessaccount_get_solutions(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_solutions(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_solutions: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_delete_subscribed_apps handles the whatsappbusinessaccount_delete_subscribed_apps tool with context-based auth
func HandleWhatsappbusinessaccount_delete_subscribed_apps(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Whatsappbusinessaccount_delete_subscribed_apps(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_delete_subscribed_apps: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_get_subscribed_apps handles the whatsappbusinessaccount_get_subscribed_apps tool with context-based auth
func HandleWhatsappbusinessaccount_get_subscribed_apps(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_subscribed_apps(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_subscribed_apps: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_post_subscribed_apps handles the whatsappbusinessaccount_post_subscribed_apps tool with context-based auth
func HandleWhatsappbusinessaccount_post_subscribed_apps(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_subscribed_apps(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_subscribed_apps: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_get_template_analytics handles the whatsappbusinessaccount_get_template_analytics tool with context-based auth
func HandleWhatsappbusinessaccount_get_template_analytics(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_template_analytics(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_template_analytics: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_get_template_group_analytics handles the whatsappbusinessaccount_get_template_group_analytics tool with context-based auth
func HandleWhatsappbusinessaccount_get_template_group_analytics(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_template_group_analytics(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_template_group_analytics: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_get_template_groups handles the whatsappbusinessaccount_get_template_groups tool with context-based auth
func HandleWhatsappbusinessaccount_get_template_groups(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_template_groups(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_template_groups: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_post_template_groups handles the whatsappbusinessaccount_post_template_groups tool with context-based auth
func HandleWhatsappbusinessaccount_post_template_groups(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_template_groups(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_template_groups: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_get_template_performance_metrics handles the whatsappbusinessaccount_get_template_performance_metrics tool with context-based auth
func HandleWhatsappbusinessaccount_get_template_performance_metrics(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_template_performance_metrics(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_template_performance_metrics: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_post_upsert_message_templates handles the whatsappbusinessaccount_post_upsert_message_templates tool with context-based auth
func HandleWhatsappbusinessaccount_post_upsert_message_templates(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_upsert_message_templates(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_upsert_message_templates: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_get_welcome_message_sequences handles the whatsappbusinessaccount_get_welcome_message_sequences tool with context-based auth
func HandleWhatsappbusinessaccount_get_welcome_message_sequences(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_welcome_message_sequences(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_welcome_message_sequences: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_get_ handles the whatsappbusinessaccount_get_ tool with context-based auth
func HandleWhatsappbusinessaccount_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleWhatsappbusinessaccount_post_ handles the whatsappbusinessaccount_post_ tool with context-based auth
func HandleWhatsappbusinessaccount_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessAccountClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Call the client method
	result, err := client.Whatsappbusinessaccount_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
