// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetCanvasTools returns MCP tools for Canvas
func GetCanvasTools() []mcp.Tool {
	var tools []mcp.Tool

	// canvas_get_preview tool
	// Available fields for CanvasPreview: body
	canvas_get_previewTool := mcp.NewTool("canvas_get_preview",
		mcp.WithDescription("GET preview for Canvas"),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for CanvasPreview objects. Available fields: body"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, canvas_get_previewTool)

	// canvas_get_previews tool
	// Available fields for TextWithEntities: text
	canvas_get_previewsTool := mcp.NewTool("canvas_get_previews",
		mcp.WithDescription("GET previews for Canvas"),
		mcp.WithString("user_ids",
			mcp.Description("user_ids parameter for previews"),
		),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for TextWithEntities objects. Available fields: text"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, canvas_get_previewsTool)

	// canvas_get_ tool
	// Available fields for Canvas: background_color, body_elements, business_id, canvas_link, collection_hero_image, collection_hero_video, collection_thumbnails, dynamic_setting, element_payload, elements, fb_body_elements, id, is_hidden, is_published, last_editor, linked_documents, name, owner, property_list, source_template, store_url, style_list, tags, ui_property_list, unused_body_elements, update_time, use_retailer_item_ids
	canvas_get_Tool := mcp.NewTool("canvas_get_",
		mcp.WithDescription("GET  for Canvas"),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for Canvas objects. Available fields: background_color, body_elements, business_id, canvas_link, collection_hero_image, collection_hero_video, collection_thumbnails, dynamic_setting, element_payload, elements, fb_body_elements, id, is_hidden, is_published, last_editor (and 12 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, canvas_get_Tool)

	// canvas_post_ tool
	canvas_post_Tool := mcp.NewTool("canvas_post_",
		mcp.WithDescription("POST  for Canvas"),
		mcp.WithString("background_color",
			mcp.Description("background_color parameter for "),
		),
		mcp.WithString("body_element_ids",
			mcp.Description("body_element_ids parameter for "),
		),
		mcp.WithBoolean("enable_swipe_to_open",
			mcp.Description("enable_swipe_to_open parameter for "),
		),
		mcp.WithBoolean("is_hidden",
			mcp.Description("is_hidden parameter for "),
		),
		mcp.WithBoolean("is_published",
			mcp.Description("is_published parameter for "),
		),
		mcp.WithString("name",
			mcp.Description("name parameter for "),
		),
		mcp.WithString("source_template_id",
			mcp.Description("source_template_id parameter for "),
		),
	)
	tools = append(tools, canvas_post_Tool)

	return tools
}

// Canvas handlers

// HandleCanvas_get_preview handles the canvas_get_preview tool with context-based auth
func HandleCanvas_get_preview(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewCanvasClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Canvas_get_preview(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute canvas_get_preview: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleCanvas_get_previews handles the canvas_get_previews tool with context-based auth
func HandleCanvas_get_previews(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewCanvasClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: user_ids
	// array type - using string
	if val := request.GetString("user_ids", ""); val != "" {
		args["user_ids"] = val
	}

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Canvas_get_previews(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute canvas_get_previews: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleCanvas_get_ handles the canvas_get_ tool with context-based auth
func HandleCanvas_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewCanvasClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Canvas_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute canvas_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleCanvas_post_ handles the canvas_post_ tool with context-based auth
func HandleCanvas_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewCanvasClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: background_color
	if val := request.GetString("background_color", ""); val != "" {
		args["background_color"] = val
	}

	// Optional: body_element_ids
	// array type - using string
	if val := request.GetString("body_element_ids", ""); val != "" {
		args["body_element_ids"] = val
	}

	// Optional: enable_swipe_to_open
	if val := request.GetBool("enable_swipe_to_open", false); val {
		args["enable_swipe_to_open"] = val
	}

	// Optional: is_hidden
	if val := request.GetBool("is_hidden", false); val {
		args["is_hidden"] = val
	}

	// Optional: is_published
	if val := request.GetBool("is_published", false); val {
		args["is_published"] = val
	}

	// Optional: name
	if val := request.GetString("name", ""); val != "" {
		args["name"] = val
	}

	// Optional: source_template_id
	if val := request.GetString("source_template_id", ""); val != "" {
		args["source_template_id"] = val
	}

	// Call the client method
	result, err := client.Canvas_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute canvas_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
