// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetCanvasTools returns MCP tools for Canvas
func GetCanvasTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool


	// facebook_canvas_get_preview tool
	facebook_canvas_get_previewTool := mcp.NewTool("facebook_canvas_get_preview",
		mcp.WithDescription("GET preview for Canvas"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_canvas_get_previewTool)

	// facebook_canvas_get_previews tool
	facebook_canvas_get_previewsTool := mcp.NewTool("facebook_canvas_get_previews",
		mcp.WithDescription("GET previews for Canvas"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("user_ids",
			mcp.Description("user_ids parameter for previews"),
		),
	)
	tools = append(tools, facebook_canvas_get_previewsTool)

	// facebook_canvas_get_ tool
	facebook_canvas_get_Tool := mcp.NewTool("facebook_canvas_get_",
		mcp.WithDescription("GET  for Canvas"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_canvas_get_Tool)

	// facebook_canvas_post_ tool
	facebook_canvas_post_Tool := mcp.NewTool("facebook_canvas_post_",
		mcp.WithDescription("POST  for Canvas"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("background_color",
			mcp.Description("background_color parameter for "),
		),
		mcp.WithString("body_element_ids",
			mcp.Description("body_element_ids parameter for "),
		),
		mcp.WithBoolean("enable_swipe_to_open",
			mcp.Description("enable_swipe_to_open parameter for "),
		),
		mcp.WithBoolean("is_hidden",
			mcp.Description("is_hidden parameter for "),
		),
		mcp.WithBoolean("is_published",
			mcp.Description("is_published parameter for "),
		),
		mcp.WithString("name",
			mcp.Description("name parameter for "),
		),
		mcp.WithString("source_template_id",
			mcp.Description("source_template_id parameter for "),
		),
	)
	tools = append(tools, facebook_canvas_post_Tool)


	return tools
}

// Canvas handlers


// HandleFacebook_canvas_get_preview handles the facebook_canvas_get_preview tool
func HandleFacebook_canvas_get_preview(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCanvasClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_canvas_get_preview(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_canvas_get_preview: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_canvas_get_previews handles the facebook_canvas_get_previews tool
func HandleFacebook_canvas_get_previews(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCanvasClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: user_ids
	// array type - using string
	if val := request.GetString("user_ids", ""); val != "" {
		args["user_ids"] = val
	}



	// Call the client method
	result, err := client.Facebook_canvas_get_previews(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_canvas_get_previews: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_canvas_get_ handles the facebook_canvas_get_ tool
func HandleFacebook_canvas_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCanvasClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_canvas_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_canvas_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_canvas_post_ handles the facebook_canvas_post_ tool
func HandleFacebook_canvas_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCanvasClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: background_color
	if val := request.GetString("background_color", ""); val != "" {
		args["background_color"] = val
	}

	// Optional: body_element_ids
	// array type - using string
	if val := request.GetString("body_element_ids", ""); val != "" {
		args["body_element_ids"] = val
	}

	// Optional: enable_swipe_to_open
	if val := request.GetBool("enable_swipe_to_open", false); val {
		args["enable_swipe_to_open"] = val
	}

	// Optional: is_hidden
	if val := request.GetBool("is_hidden", false); val {
		args["is_hidden"] = val
	}

	// Optional: is_published
	if val := request.GetBool("is_published", false); val {
		args["is_published"] = val
	}

	// Optional: name
	if val := request.GetString("name", ""); val != "" {
		args["name"] = val
	}

	// Optional: source_template_id
	if val := request.GetString("source_template_id", ""); val != "" {
		args["source_template_id"] = val
	}



	// Call the client method
	result, err := client.Facebook_canvas_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_canvas_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

