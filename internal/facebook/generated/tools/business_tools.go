// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetBusinessTools returns MCP tools for Business
func GetBusinessTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool


	// business_post_access_token tool
	business_post_access_tokenTool := mcp.NewTool("business_post_access_token",
		mcp.WithDescription("POST access_token for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("app_id",
			mcp.Required(),
			mcp.Description("app_id parameter for access_token"),
		),
		mcp.WithString("fbe_external_business_id",
			mcp.Description("fbe_external_business_id parameter for access_token"),
		),
		mcp.WithString("scope",
			mcp.Required(),
			mcp.Description("scope parameter for access_token"),
		),
		mcp.WithString("system_user_name",
			mcp.Description("system_user_name parameter for access_token"),
		),
	)
	tools = append(tools, business_post_access_tokenTool)

	// business_get_ad_account_infos tool
	business_get_ad_account_infosTool := mcp.NewTool("business_get_ad_account_infos",
		mcp.WithDescription("GET ad_account_infos for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("ad_account_id",
			mcp.Description("ad_account_id parameter for ad_account_infos"),
		),
		mcp.WithString("parent_advertiser_id",
			mcp.Description("parent_advertiser_id parameter for ad_account_infos"),
		),
		mcp.WithString("user_id",
			mcp.Description("user_id parameter for ad_account_infos"),
		),
	)
	tools = append(tools, business_get_ad_account_infosTool)

	// business_delete_ad_accounts tool
	business_delete_ad_accountsTool := mcp.NewTool("business_delete_ad_accounts",
		mcp.WithDescription("DELETE ad_accounts for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("adaccount_id",
			mcp.Required(),
			mcp.Description("adaccount_id parameter for ad_accounts"),
		),
	)
	tools = append(tools, business_delete_ad_accountsTool)

	// business_post_ad_review_requests tool
	business_post_ad_review_requestsTool := mcp.NewTool("business_post_ad_review_requests",
		mcp.WithDescription("POST ad_review_requests for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("ad_account_ids",
			mcp.Description("ad_account_ids parameter for ad_review_requests"),
		),
	)
	tools = append(tools, business_post_ad_review_requestsTool)

	// business_get_ad_studies tool
	business_get_ad_studiesTool := mcp.NewTool("business_get_ad_studies",
		mcp.WithDescription("GET ad_studies for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_ad_studiesTool)

	// business_post_ad_studies tool
	business_post_ad_studiesTool := mcp.NewTool("business_post_ad_studies",
		mcp.WithDescription("POST ad_studies for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("cells",
			mcp.Required(),
			mcp.Description("cells parameter for ad_studies"),
		),
		mcp.WithString("client_business",
			mcp.Description("client_business parameter for ad_studies"),
		),
		mcp.WithNumber("confidence_level",
			mcp.Description("confidence_level parameter for ad_studies"),
		),
		mcp.WithNumber("cooldown_start_time",
			mcp.Description("cooldown_start_time parameter for ad_studies"),
		),
		mcp.WithString("description",
			mcp.Description("description parameter for ad_studies"),
		),
		mcp.WithNumber("end_time",
			mcp.Required(),
			mcp.Description("end_time parameter for ad_studies"),
		),
		mcp.WithString("name",
			mcp.Required(),
			mcp.Description("name parameter for ad_studies"),
		),
		mcp.WithString("objectives",
			mcp.Description("objectives parameter for ad_studies"),
		),
		mcp.WithNumber("observation_end_time",
			mcp.Description("observation_end_time parameter for ad_studies"),
		),
		mcp.WithNumber("start_time",
			mcp.Required(),
			mcp.Description("start_time parameter for ad_studies"),
		),
		mcp.WithString("type",
			mcp.Description("type parameter for ad_studies"),
			mcp.Enum("BACKEND_AB_TESTING", "CONTINUOUS_LIFT_CONFIG", "GEO_LIFT", "LIFT", "SPLIT_TEST"),
		),
		mcp.WithString("viewers",
			mcp.Description("viewers parameter for ad_studies"),
		),
	)
	tools = append(tools, business_post_ad_studiesTool)

	// business_post_adaccount tool
	business_post_adaccountTool := mcp.NewTool("business_post_adaccount",
		mcp.WithDescription("POST adaccount for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithBoolean("ad_account_created_from_bm_flag",
			mcp.Description("ad_account_created_from_bm_flag parameter for adaccount"),
		),
		mcp.WithString("currency",
			mcp.Required(),
			mcp.Description("currency parameter for adaccount"),
		),
		mcp.WithString("end_advertiser",
			mcp.Required(),
			mcp.Description("end_advertiser parameter for adaccount"),
		),
		mcp.WithString("funding_id",
			mcp.Description("funding_id parameter for adaccount"),
		),
		mcp.WithBoolean("invoice",
			mcp.Description("invoice parameter for adaccount"),
		),
		mcp.WithString("invoice_group_id",
			mcp.Description("invoice_group_id parameter for adaccount"),
		),
		mcp.WithString("invoicing_emails",
			mcp.Description("invoicing_emails parameter for adaccount"),
		),
		mcp.WithBoolean("io",
			mcp.Description("io parameter for adaccount"),
		),
		mcp.WithString("media_agency",
			mcp.Required(),
			mcp.Description("media_agency parameter for adaccount"),
		),
		mcp.WithString("name",
			mcp.Required(),
			mcp.Description("name parameter for adaccount"),
		),
		mcp.WithString("partner",
			mcp.Required(),
			mcp.Description("partner parameter for adaccount"),
		),
		mcp.WithString("po_number",
			mcp.Description("po_number parameter for adaccount"),
		),
		mcp.WithNumber("timezone_id",
			mcp.Required(),
			mcp.Description("timezone_id parameter for adaccount"),
		),
	)
	tools = append(tools, business_post_adaccountTool)

	// business_post_add_phone_numbers tool
	business_post_add_phone_numbersTool := mcp.NewTool("business_post_add_phone_numbers",
		mcp.WithDescription("POST add_phone_numbers for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("phone_number",
			mcp.Required(),
			mcp.Description("phone_number parameter for add_phone_numbers"),
		),
	)
	tools = append(tools, business_post_add_phone_numbersTool)

	// business_post_adnetwork_applications tool
	business_post_adnetwork_applicationsTool := mcp.NewTool("business_post_adnetwork_applications",
		mcp.WithDescription("POST adnetwork_applications for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("name",
			mcp.Required(),
			mcp.Description("name parameter for adnetwork_applications"),
		),
	)
	tools = append(tools, business_post_adnetwork_applicationsTool)

	// business_get_adnetworkanalytics tool
	business_get_adnetworkanalyticsTool := mcp.NewTool("business_get_adnetworkanalytics",
		mcp.WithDescription("GET adnetworkanalytics for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("aggregation_period",
			mcp.Description("aggregation_period parameter for adnetworkanalytics"),
			mcp.Enum("DAY", "TOTAL"),
		),
		mcp.WithString("breakdowns",
			mcp.Description("breakdowns parameter for adnetworkanalytics"),
			mcp.Enum("AD_SERVER_CAMPAIGN_ID", "AD_SPACE", "AGE", "APP", "CLICKED_VIEW_TAG", "COUNTRY", "DEAL", "DEAL_AD", "DEAL_PAGE", "DELIVERY_METHOD", "DISPLAY_FORMAT", "FAIL_REASON", "GENDER", "INSTANT_ARTICLE_ID", "INSTANT_ARTICLE_PAGE_ID", "IS_DEAL_BACKFILL", "PLACEMENT", "PLACEMENT_NAME", "PLATFORM", "PROPERTY", "SDK_VERSION"),
		),
		mcp.WithString("filters",
			mcp.Description("filters parameter for adnetworkanalytics"),
		),
		mcp.WithNumber("limit",
			mcp.Description("limit parameter for adnetworkanalytics"),
		),
		mcp.WithString("metrics",
			mcp.Required(),
			mcp.Description("metrics parameter for adnetworkanalytics"),
			mcp.Enum("FB_AD_NETWORK_BIDDING_BID_RATE", "FB_AD_NETWORK_BIDDING_REQUEST", "FB_AD_NETWORK_BIDDING_RESPONSE", "FB_AD_NETWORK_BIDDING_REVENUE", "FB_AD_NETWORK_BIDDING_WIN_RATE", "FB_AD_NETWORK_CLICK", "FB_AD_NETWORK_CPM", "FB_AD_NETWORK_CTR", "FB_AD_NETWORK_FILLED_REQUEST", "FB_AD_NETWORK_FILL_RATE", "FB_AD_NETWORK_IMP", "FB_AD_NETWORK_IMPRESSION_RATE", "FB_AD_NETWORK_REQUEST", "FB_AD_NETWORK_REVENUE", "FB_AD_NETWORK_SHOW_RATE", "FB_AD_NETWORK_VIDEO_GUARANTEE_REVENUE", "FB_AD_NETWORK_VIDEO_MRC", "FB_AD_NETWORK_VIDEO_MRC_RATE", "FB_AD_NETWORK_VIDEO_VIEW", "FB_AD_NETWORK_VIDEO_VIEW_RATE"),
		),
		mcp.WithString("ordering_column",
			mcp.Description("ordering_column parameter for adnetworkanalytics"),
			mcp.Enum("METRIC", "TIME", "VALUE"),
		),
		mcp.WithString("ordering_type",
			mcp.Description("ordering_type parameter for adnetworkanalytics"),
			mcp.Enum("ASCENDING", "DESCENDING"),
		),
		mcp.WithBoolean("should_include_until",
			mcp.Description("should_include_until parameter for adnetworkanalytics"),
		),
		mcp.WithString("since",
			mcp.Description("since parameter for adnetworkanalytics"),
		),
		mcp.WithString("until",
			mcp.Description("until parameter for adnetworkanalytics"),
		),
	)
	tools = append(tools, business_get_adnetworkanalyticsTool)

	// business_post_adnetworkanalytics tool
	business_post_adnetworkanalyticsTool := mcp.NewTool("business_post_adnetworkanalytics",
		mcp.WithDescription("POST adnetworkanalytics for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("aggregation_period",
			mcp.Description("aggregation_period parameter for adnetworkanalytics"),
			mcp.Enum("DAY", "TOTAL"),
		),
		mcp.WithString("breakdowns",
			mcp.Description("breakdowns parameter for adnetworkanalytics"),
			mcp.Enum("AD_SERVER_CAMPAIGN_ID", "AD_SPACE", "AGE", "APP", "CLICKED_VIEW_TAG", "COUNTRY", "DEAL", "DEAL_AD", "DEAL_PAGE", "DELIVERY_METHOD", "DISPLAY_FORMAT", "FAIL_REASON", "GENDER", "INSTANT_ARTICLE_ID", "INSTANT_ARTICLE_PAGE_ID", "IS_DEAL_BACKFILL", "PLACEMENT", "PLACEMENT_NAME", "PLATFORM", "PROPERTY", "SDK_VERSION"),
		),
		mcp.WithString("filters",
			mcp.Description("filters parameter for adnetworkanalytics"),
		),
		mcp.WithNumber("limit",
			mcp.Description("limit parameter for adnetworkanalytics"),
		),
		mcp.WithString("metrics",
			mcp.Required(),
			mcp.Description("metrics parameter for adnetworkanalytics"),
			mcp.Enum("FB_AD_NETWORK_BIDDING_BID_RATE", "FB_AD_NETWORK_BIDDING_REQUEST", "FB_AD_NETWORK_BIDDING_RESPONSE", "FB_AD_NETWORK_BIDDING_REVENUE", "FB_AD_NETWORK_BIDDING_WIN_RATE", "FB_AD_NETWORK_CLICK", "FB_AD_NETWORK_CPM", "FB_AD_NETWORK_CTR", "FB_AD_NETWORK_FILLED_REQUEST", "FB_AD_NETWORK_FILL_RATE", "FB_AD_NETWORK_IMP", "FB_AD_NETWORK_IMPRESSION_RATE", "FB_AD_NETWORK_REQUEST", "FB_AD_NETWORK_REVENUE", "FB_AD_NETWORK_SHOW_RATE", "FB_AD_NETWORK_VIDEO_GUARANTEE_REVENUE", "FB_AD_NETWORK_VIDEO_MRC", "FB_AD_NETWORK_VIDEO_MRC_RATE", "FB_AD_NETWORK_VIDEO_VIEW", "FB_AD_NETWORK_VIDEO_VIEW_RATE"),
		),
		mcp.WithString("ordering_column",
			mcp.Description("ordering_column parameter for adnetworkanalytics"),
			mcp.Enum("METRIC", "TIME", "VALUE"),
		),
		mcp.WithString("ordering_type",
			mcp.Description("ordering_type parameter for adnetworkanalytics"),
			mcp.Enum("ASCENDING", "DESCENDING"),
		),
		mcp.WithString("since",
			mcp.Description("since parameter for adnetworkanalytics"),
		),
		mcp.WithString("until",
			mcp.Description("until parameter for adnetworkanalytics"),
		),
	)
	tools = append(tools, business_post_adnetworkanalyticsTool)

	// business_get_adnetworkanalytics_results tool
	business_get_adnetworkanalytics_resultsTool := mcp.NewTool("business_get_adnetworkanalytics_results",
		mcp.WithDescription("GET adnetworkanalytics_results for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("query_ids",
			mcp.Description("query_ids parameter for adnetworkanalytics_results"),
		),
	)
	tools = append(tools, business_get_adnetworkanalytics_resultsTool)

	// business_get_ads_dataset tool
	business_get_ads_datasetTool := mcp.NewTool("business_get_ads_dataset",
		mcp.WithDescription("GET ads_dataset for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("id_filter",
			mcp.Description("id_filter parameter for ads_dataset"),
		),
		mcp.WithString("name_filter",
			mcp.Description("name_filter parameter for ads_dataset"),
		),
		mcp.WithString("sort_by",
			mcp.Description("sort_by parameter for ads_dataset"),
			mcp.Enum("LAST_FIRED_TIME", "NAME"),
		),
	)
	tools = append(tools, business_get_ads_datasetTool)

	// business_post_ads_dataset tool
	business_post_ads_datasetTool := mcp.NewTool("business_post_ads_dataset",
		mcp.WithDescription("POST ads_dataset for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("ad_account_id",
			mcp.Description("ad_account_id parameter for ads_dataset"),
		),
		mcp.WithString("app_id",
			mcp.Description("app_id parameter for ads_dataset"),
		),
		mcp.WithBoolean("is_crm",
			mcp.Description("is_crm parameter for ads_dataset"),
		),
		mcp.WithString("name",
			mcp.Required(),
			mcp.Description("name parameter for ads_dataset"),
		),
	)
	tools = append(tools, business_post_ads_datasetTool)

	// business_get_ads_reporting_mmm_reports tool
	business_get_ads_reporting_mmm_reportsTool := mcp.NewTool("business_get_ads_reporting_mmm_reports",
		mcp.WithDescription("GET ads_reporting_mmm_reports for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("filtering",
			mcp.Description("filtering parameter for ads_reporting_mmm_reports"),
		),
	)
	tools = append(tools, business_get_ads_reporting_mmm_reportsTool)

	// business_get_ads_reporting_mmm_schedulers tool
	business_get_ads_reporting_mmm_schedulersTool := mcp.NewTool("business_get_ads_reporting_mmm_schedulers",
		mcp.WithDescription("GET ads_reporting_mmm_schedulers for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_ads_reporting_mmm_schedulersTool)

	// business_get_adspixels tool
	business_get_adspixelsTool := mcp.NewTool("business_get_adspixels",
		mcp.WithDescription("GET adspixels for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("id_filter",
			mcp.Description("id_filter parameter for adspixels"),
		),
		mcp.WithString("name_filter",
			mcp.Description("name_filter parameter for adspixels"),
		),
		mcp.WithString("sort_by",
			mcp.Description("sort_by parameter for adspixels"),
			mcp.Enum("LAST_FIRED_TIME", "NAME"),
		),
	)
	tools = append(tools, business_get_adspixelsTool)

	// business_post_adspixels tool
	business_post_adspixelsTool := mcp.NewTool("business_post_adspixels",
		mcp.WithDescription("POST adspixels for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithBoolean("is_crm",
			mcp.Description("is_crm parameter for adspixels"),
		),
		mcp.WithString("name",
			mcp.Required(),
			mcp.Description("name parameter for adspixels"),
		),
	)
	tools = append(tools, business_post_adspixelsTool)

	// business_delete_agencies tool
	business_delete_agenciesTool := mcp.NewTool("business_delete_agencies",
		mcp.WithDescription("DELETE agencies for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("business",
			mcp.Required(),
			mcp.Description("business parameter for agencies"),
		),
	)
	tools = append(tools, business_delete_agenciesTool)

	// business_get_agencies tool
	business_get_agenciesTool := mcp.NewTool("business_get_agencies",
		mcp.WithDescription("GET agencies for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_agenciesTool)

	// business_get_an_placements tool
	business_get_an_placementsTool := mcp.NewTool("business_get_an_placements",
		mcp.WithDescription("GET an_placements for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_an_placementsTool)

	// business_post_block_list_drafts tool
	business_post_block_list_draftsTool := mcp.NewTool("business_post_block_list_drafts",
		mcp.WithDescription("POST block_list_drafts for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("publisher_urls_file",
			mcp.Required(),
			mcp.Description("publisher_urls_file parameter for block_list_drafts"),
		),
	)
	tools = append(tools, business_post_block_list_draftsTool)

	// business_post_bm_review_requests tool
	business_post_bm_review_requestsTool := mcp.NewTool("business_post_bm_review_requests",
		mcp.WithDescription("POST bm_review_requests for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("business_manager_ids",
			mcp.Required(),
			mcp.Description("business_manager_ids parameter for bm_review_requests"),
		),
	)
	tools = append(tools, business_post_bm_review_requestsTool)

	// business_get_business_asset_groups tool
	business_get_business_asset_groupsTool := mcp.NewTool("business_get_business_asset_groups",
		mcp.WithDescription("GET business_asset_groups for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_business_asset_groupsTool)

	// business_get_business_invoices tool
	business_get_business_invoicesTool := mcp.NewTool("business_get_business_invoices",
		mcp.WithDescription("GET business_invoices for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("end_date",
			mcp.Description("end_date parameter for business_invoices"),
		),
		mcp.WithString("invoice_id",
			mcp.Description("invoice_id parameter for business_invoices"),
		),
		mcp.WithString("issue_end_date",
			mcp.Description("issue_end_date parameter for business_invoices"),
		),
		mcp.WithString("issue_start_date",
			mcp.Description("issue_start_date parameter for business_invoices"),
		),
		mcp.WithNumber("root_id",
			mcp.Description("root_id parameter for business_invoices"),
		),
		mcp.WithString("start_date",
			mcp.Description("start_date parameter for business_invoices"),
		),
		mcp.WithString("type",
			mcp.Description("type parameter for business_invoices"),
			mcp.Enum("CM", "DM", "INV", "PRO_FORMA"),
		),
	)
	tools = append(tools, business_get_business_invoicesTool)

	// business_get_business_users tool
	business_get_business_usersTool := mcp.NewTool("business_get_business_users",
		mcp.WithDescription("GET business_users for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_business_usersTool)

	// business_post_business_users tool
	business_post_business_usersTool := mcp.NewTool("business_post_business_users",
		mcp.WithDescription("POST business_users for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("email",
			mcp.Required(),
			mcp.Description("email parameter for business_users"),
		),
		mcp.WithString("invited_user_type",
			mcp.Description("invited_user_type parameter for business_users"),
			mcp.Enum("FB", "MWA"),
		),
		mcp.WithString("role",
			mcp.Description("role parameter for business_users"),
			mcp.Enum("ADMIN", "ADS_RIGHTS_REVIEWER", "DEFAULT", "DEVELOPER", "EMPLOYEE", "FINANCE_ANALYST", "FINANCE_EDIT", "FINANCE_EDITOR", "FINANCE_VIEW", "MANAGE", "PARTNER_CENTER_ADMIN", "PARTNER_CENTER_ANALYST", "PARTNER_CENTER_EDUCATION", "PARTNER_CENTER_MARKETING", "PARTNER_CENTER_OPERATIONS"),
		),
		mcp.WithString("tasks",
			mcp.Description("tasks parameter for business_users"),
			mcp.Enum("ADMIN", "ADS_RIGHTS_REVIEWER", "DEFAULT", "DEVELOPER", "EMPLOYEE", "FINANCE_ANALYST", "FINANCE_EDIT", "FINANCE_EDITOR", "FINANCE_VIEW", "MANAGE", "PARTNER_CENTER_ADMIN", "PARTNER_CENTER_ANALYST", "PARTNER_CENTER_EDUCATION", "PARTNER_CENTER_MARKETING", "PARTNER_CENTER_OPERATIONS"),
		),
	)
	tools = append(tools, business_post_business_usersTool)

	// business_get_businessprojects tool
	business_get_businessprojectsTool := mcp.NewTool("business_get_businessprojects",
		mcp.WithDescription("GET businessprojects for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_businessprojectsTool)

	// business_post_claim_custom_conversions tool
	business_post_claim_custom_conversionsTool := mcp.NewTool("business_post_claim_custom_conversions",
		mcp.WithDescription("POST claim_custom_conversions for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("custom_conversion_id",
			mcp.Required(),
			mcp.Description("custom_conversion_id parameter for claim_custom_conversions"),
		),
	)
	tools = append(tools, business_post_claim_custom_conversionsTool)

	// business_get_client_ad_accounts tool
	business_get_client_ad_accountsTool := mcp.NewTool("business_get_client_ad_accounts",
		mcp.WithDescription("GET client_ad_accounts for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("search_query",
			mcp.Description("search_query parameter for client_ad_accounts"),
		),
	)
	tools = append(tools, business_get_client_ad_accountsTool)

	// business_get_client_apps tool
	business_get_client_appsTool := mcp.NewTool("business_get_client_apps",
		mcp.WithDescription("GET client_apps for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_client_appsTool)

	// business_post_client_apps tool
	business_post_client_appsTool := mcp.NewTool("business_post_client_apps",
		mcp.WithDescription("POST client_apps for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("app_id",
			mcp.Required(),
			mcp.Description("app_id parameter for client_apps"),
		),
	)
	tools = append(tools, business_post_client_appsTool)

	// business_get_client_offsite_signal_container_business_objects tool
	business_get_client_offsite_signal_container_business_objectsTool := mcp.NewTool("business_get_client_offsite_signal_container_business_objects",
		mcp.WithDescription("GET client_offsite_signal_container_business_objects for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_client_offsite_signal_container_business_objectsTool)

	// business_get_client_pages tool
	business_get_client_pagesTool := mcp.NewTool("business_get_client_pages",
		mcp.WithDescription("GET client_pages for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_client_pagesTool)

	// business_post_client_pages tool
	business_post_client_pagesTool := mcp.NewTool("business_post_client_pages",
		mcp.WithDescription("POST client_pages for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithNumber("page_id",
			mcp.Required(),
			mcp.Description("page_id parameter for client_pages"),
		),
		mcp.WithString("permitted_tasks",
			mcp.Description("permitted_tasks parameter for client_pages"),
			mcp.Enum("ADVERTISE", "ANALYZE", "CASHIER_ROLE", "CREATE_CONTENT", "GLOBAL_STRUCTURE_MANAGEMENT", "MANAGE", "MANAGE_JOBS", "MANAGE_LEADS", "MESSAGING", "MODERATE", "MODERATE_COMMUNITY", "PAGES_MESSAGING", "PAGES_MESSAGING_SUBSCRIPTIONS", "PROFILE_PLUS_ADVERTISE", "PROFILE_PLUS_ANALYZE", "PROFILE_PLUS_CREATE_CONTENT", "PROFILE_PLUS_FACEBOOK_ACCESS", "PROFILE_PLUS_FULL_CONTROL", "PROFILE_PLUS_MANAGE", "PROFILE_PLUS_MANAGE_LEADS", "PROFILE_PLUS_MESSAGING", "PROFILE_PLUS_MODERATE", "PROFILE_PLUS_MODERATE_DELEGATE_COMMUNITY", "PROFILE_PLUS_REVENUE", "READ_PAGE_MAILBOXES", "VIEW_MONETIZATION_INSIGHTS"),
		),
	)
	tools = append(tools, business_post_client_pagesTool)

	// business_get_client_pixels tool
	business_get_client_pixelsTool := mcp.NewTool("business_get_client_pixels",
		mcp.WithDescription("GET client_pixels for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_client_pixelsTool)

	// business_get_client_product_catalogs tool
	business_get_client_product_catalogsTool := mcp.NewTool("business_get_client_product_catalogs",
		mcp.WithDescription("GET client_product_catalogs for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_client_product_catalogsTool)

	// business_get_client_whatsapp_business_accounts tool
	business_get_client_whatsapp_business_accountsTool := mcp.NewTool("business_get_client_whatsapp_business_accounts",
		mcp.WithDescription("GET client_whatsapp_business_accounts for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_client_whatsapp_business_accountsTool)

	// business_delete_clients tool
	business_delete_clientsTool := mcp.NewTool("business_delete_clients",
		mcp.WithDescription("DELETE clients for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("business",
			mcp.Required(),
			mcp.Description("business parameter for clients"),
		),
	)
	tools = append(tools, business_delete_clientsTool)

	// business_get_clients tool
	business_get_clientsTool := mcp.NewTool("business_get_clients",
		mcp.WithDescription("GET clients for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_clientsTool)

	// business_get_collaborative_ads_collaboration_requests tool
	business_get_collaborative_ads_collaboration_requestsTool := mcp.NewTool("business_get_collaborative_ads_collaboration_requests",
		mcp.WithDescription("GET collaborative_ads_collaboration_requests for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("status",
			mcp.Description("status parameter for collaborative_ads_collaboration_requests"),
		),
	)
	tools = append(tools, business_get_collaborative_ads_collaboration_requestsTool)

	// business_post_collaborative_ads_collaboration_requests tool
	business_post_collaborative_ads_collaboration_requestsTool := mcp.NewTool("business_post_collaborative_ads_collaboration_requests",
		mcp.WithDescription("POST collaborative_ads_collaboration_requests for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("brands",
			mcp.Required(),
			mcp.Description("brands parameter for collaborative_ads_collaboration_requests"),
		),
		mcp.WithString("contact_email",
			mcp.Required(),
			mcp.Description("contact_email parameter for collaborative_ads_collaboration_requests"),
		),
		mcp.WithString("contact_first_name",
			mcp.Required(),
			mcp.Description("contact_first_name parameter for collaborative_ads_collaboration_requests"),
		),
		mcp.WithString("contact_last_name",
			mcp.Required(),
			mcp.Description("contact_last_name parameter for collaborative_ads_collaboration_requests"),
		),
		mcp.WithString("phone_number",
			mcp.Description("phone_number parameter for collaborative_ads_collaboration_requests"),
		),
		mcp.WithString("receiver_business",
			mcp.Required(),
			mcp.Description("receiver_business parameter for collaborative_ads_collaboration_requests"),
		),
		mcp.WithString("requester_agency_or_brand",
			mcp.Required(),
			mcp.Description("requester_agency_or_brand parameter for collaborative_ads_collaboration_requests"),
			mcp.Enum("AGENCY", "BRAND", "MERCHANT"),
		),
		mcp.WithString("sender_client_business",
			mcp.Description("sender_client_business parameter for collaborative_ads_collaboration_requests"),
		),
	)
	tools = append(tools, business_post_collaborative_ads_collaboration_requestsTool)

	// business_get_collaborative_ads_suggested_partners tool
	business_get_collaborative_ads_suggested_partnersTool := mcp.NewTool("business_get_collaborative_ads_suggested_partners",
		mcp.WithDescription("GET collaborative_ads_suggested_partners for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_collaborative_ads_suggested_partnersTool)

	// business_get_commerce_merchant_settings tool
	business_get_commerce_merchant_settingsTool := mcp.NewTool("business_get_commerce_merchant_settings",
		mcp.WithDescription("GET commerce_merchant_settings for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_commerce_merchant_settingsTool)

	// business_get_cpas_business_setup_config tool
	business_get_cpas_business_setup_configTool := mcp.NewTool("business_get_cpas_business_setup_config",
		mcp.WithDescription("GET cpas_business_setup_config for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_cpas_business_setup_configTool)

	// business_post_cpas_business_setup_config tool
	business_post_cpas_business_setup_configTool := mcp.NewTool("business_post_cpas_business_setup_config",
		mcp.WithDescription("POST cpas_business_setup_config for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithBoolean("accepted_collab_ads_tos",
			mcp.Description("accepted_collab_ads_tos parameter for cpas_business_setup_config"),
		),
		mcp.WithString("ad_accounts",
			mcp.Description("ad_accounts parameter for cpas_business_setup_config"),
		),
		mcp.WithString("business_capabilities_status",
			mcp.Description("business_capabilities_status parameter for cpas_business_setup_config"),
		),
		mcp.WithString("capabilities_compliance_status",
			mcp.Description("capabilities_compliance_status parameter for cpas_business_setup_config"),
		),
	)
	tools = append(tools, business_post_cpas_business_setup_configTool)

	// business_get_cpas_merchant_config tool
	business_get_cpas_merchant_configTool := mcp.NewTool("business_get_cpas_merchant_config",
		mcp.WithDescription("GET cpas_merchant_config for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_cpas_merchant_configTool)

	// business_post_creative_folders tool
	business_post_creative_foldersTool := mcp.NewTool("business_post_creative_folders",
		mcp.WithDescription("POST creative_folders for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("description",
			mcp.Description("description parameter for creative_folders"),
		),
		mcp.WithString("name",
			mcp.Required(),
			mcp.Description("name parameter for creative_folders"),
		),
		mcp.WithString("parent_folder_id",
			mcp.Description("parent_folder_id parameter for creative_folders"),
		),
	)
	tools = append(tools, business_post_creative_foldersTool)

	// business_get_creditcards tool
	business_get_creditcardsTool := mcp.NewTool("business_get_creditcards",
		mcp.WithDescription("GET creditcards for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_creditcardsTool)

	// business_post_customconversions tool
	business_post_customconversionsTool := mcp.NewTool("business_post_customconversions",
		mcp.WithDescription("POST customconversions for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("action_source_type",
			mcp.Description("action_source_type parameter for customconversions"),
			mcp.Enum("app", "business_messaging", "chat", "email", "other", "phone_call", "physical_store", "system_generated", "website"),
		),
		mcp.WithString("advanced_rule",
			mcp.Description("advanced_rule parameter for customconversions"),
		),
		mcp.WithString("custom_event_type",
			mcp.Required(),
			mcp.Description("custom_event_type parameter for customconversions"),
			mcp.Enum("ADD_PAYMENT_INFO", "ADD_TO_CART", "ADD_TO_WISHLIST", "COMPLETE_REGISTRATION", "CONTACT", "CONTENT_VIEW", "CUSTOMIZE_PRODUCT", "DONATE", "FACEBOOK_SELECTED", "FIND_LOCATION", "INITIATED_CHECKOUT", "LEAD", "LISTING_INTERACTION", "OTHER", "PURCHASE", "SCHEDULE", "SEARCH", "START_TRIAL", "SUBMIT_APPLICATION", "SUBSCRIBE"),
		),
		mcp.WithNumber("default_conversion_value",
			mcp.Description("default_conversion_value parameter for customconversions"),
		),
		mcp.WithString("description",
			mcp.Description("description parameter for customconversions"),
		),
		mcp.WithString("event_source_id",
			mcp.Description("event_source_id parameter for customconversions"),
		),
		mcp.WithString("name",
			mcp.Required(),
			mcp.Description("name parameter for customconversions"),
		),
		mcp.WithString("rule",
			mcp.Description("rule parameter for customconversions"),
		),
	)
	tools = append(tools, business_post_customconversionsTool)

	// business_get_event_source_groups tool
	business_get_event_source_groupsTool := mcp.NewTool("business_get_event_source_groups",
		mcp.WithDescription("GET event_source_groups for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_event_source_groupsTool)

	// business_post_event_source_groups tool
	business_post_event_source_groupsTool := mcp.NewTool("business_post_event_source_groups",
		mcp.WithDescription("POST event_source_groups for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("event_sources",
			mcp.Required(),
			mcp.Description("event_sources parameter for event_source_groups"),
		),
		mcp.WithString("name",
			mcp.Required(),
			mcp.Description("name parameter for event_source_groups"),
		),
	)
	tools = append(tools, business_post_event_source_groupsTool)

	// business_get_extendedcreditapplications tool
	business_get_extendedcreditapplicationsTool := mcp.NewTool("business_get_extendedcreditapplications",
		mcp.WithDescription("GET extendedcreditapplications for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithBoolean("only_show_pending",
			mcp.Description("only_show_pending parameter for extendedcreditapplications"),
		),
	)
	tools = append(tools, business_get_extendedcreditapplicationsTool)

	// business_get_extendedcredits tool
	business_get_extendedcreditsTool := mcp.NewTool("business_get_extendedcredits",
		mcp.WithDescription("GET extendedcredits for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithBoolean("order_by_is_owned_credential",
			mcp.Description("order_by_is_owned_credential parameter for extendedcredits"),
		),
	)
	tools = append(tools, business_get_extendedcreditsTool)

	// business_post_images tool
	business_post_imagesTool := mcp.NewTool("business_post_images",
		mcp.WithDescription("POST images for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithBoolean("ad_placements_validation_only",
			mcp.Description("ad_placements_validation_only parameter for images"),
		),
		mcp.WithString("bytes",
			mcp.Description("bytes parameter for images"),
		),
		mcp.WithString("creative_folder_id",
			mcp.Required(),
			mcp.Description("creative_folder_id parameter for images"),
		),
		mcp.WithString("name",
			mcp.Description("name parameter for images"),
		),
		mcp.WithString("validation_ad_placements",
			mcp.Description("validation_ad_placements parameter for images"),
			mcp.Enum("AUDIENCE_NETWORK_INSTREAM_VIDEO", "AUDIENCE_NETWORK_INSTREAM_VIDEO_MOBILE", "AUDIENCE_NETWORK_REWARDED_VIDEO", "DESKTOP_FEED_STANDARD", "FACEBOOK_STORY_MOBILE", "FACEBOOK_STORY_STICKER_MOBILE", "INSTAGRAM_STANDARD", "INSTAGRAM_STORY", "INSTANT_ARTICLE_STANDARD", "INSTREAM_BANNER_DESKTOP", "INSTREAM_BANNER_MOBILE", "INSTREAM_VIDEO_DESKTOP", "INSTREAM_VIDEO_IMAGE", "INSTREAM_VIDEO_MOBILE", "MESSENGER_MOBILE_INBOX_MEDIA", "MESSENGER_MOBILE_STORY_MEDIA", "MOBILE_FEED_STANDARD", "MOBILE_FULLWIDTH", "MOBILE_INTERSTITIAL", "MOBILE_MEDIUM_RECTANGLE", "MOBILE_NATIVE", "RIGHT_COLUMN_STANDARD", "SUGGESTED_VIDEO_MOBILE"),
		),
	)
	tools = append(tools, business_post_imagesTool)

	// business_get_initiated_audience_sharing_requests tool
	business_get_initiated_audience_sharing_requestsTool := mcp.NewTool("business_get_initiated_audience_sharing_requests",
		mcp.WithDescription("GET initiated_audience_sharing_requests for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("recipient_id",
			mcp.Description("recipient_id parameter for initiated_audience_sharing_requests"),
		),
		mcp.WithString("request_status",
			mcp.Description("request_status parameter for initiated_audience_sharing_requests"),
			mcp.Enum("APPROVE", "CANCELED", "DECLINE", "EXPIRED", "IN_PROGRESS", "PENDING", "PENDING_EMAIL_VERIFICATION", "PENDING_INTEGRITY_REVIEW"),
		),
	)
	tools = append(tools, business_get_initiated_audience_sharing_requestsTool)

	// business_delete_instagram_accounts tool
	business_delete_instagram_accountsTool := mcp.NewTool("business_delete_instagram_accounts",
		mcp.WithDescription("DELETE instagram_accounts for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("instagram_account",
			mcp.Required(),
			mcp.Description("instagram_account parameter for instagram_accounts"),
		),
	)
	tools = append(tools, business_delete_instagram_accountsTool)

	// business_get_instagram_accounts tool
	business_get_instagram_accountsTool := mcp.NewTool("business_get_instagram_accounts",
		mcp.WithDescription("GET instagram_accounts for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_instagram_accountsTool)

	// business_get_instagram_business_accounts tool
	business_get_instagram_business_accountsTool := mcp.NewTool("business_get_instagram_business_accounts",
		mcp.WithDescription("GET instagram_business_accounts for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_instagram_business_accountsTool)

	// business_delete_managed_businesses tool
	business_delete_managed_businessesTool := mcp.NewTool("business_delete_managed_businesses",
		mcp.WithDescription("DELETE managed_businesses for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("existing_client_business_id",
			mcp.Required(),
			mcp.Description("existing_client_business_id parameter for managed_businesses"),
		),
	)
	tools = append(tools, business_delete_managed_businessesTool)

	// business_post_managed_businesses tool
	business_post_managed_businessesTool := mcp.NewTool("business_post_managed_businesses",
		mcp.WithDescription("POST managed_businesses for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("child_business_external_id",
			mcp.Description("child_business_external_id parameter for managed_businesses"),
		),
		mcp.WithString("existing_client_business_id",
			mcp.Description("existing_client_business_id parameter for managed_businesses"),
		),
		mcp.WithString("name",
			mcp.Description("name parameter for managed_businesses"),
		),
		mcp.WithString("sales_rep_email",
			mcp.Description("sales_rep_email parameter for managed_businesses"),
		),
		mcp.WithString("survey_business_type",
			mcp.Description("survey_business_type parameter for managed_businesses"),
			mcp.Enum("ADVERTISER", "AGENCY", "APP_DEVELOPER", "PUBLISHER"),
		),
		mcp.WithNumber("survey_num_assets",
			mcp.Description("survey_num_assets parameter for managed_businesses"),
		),
		mcp.WithNumber("survey_num_people",
			mcp.Description("survey_num_people parameter for managed_businesses"),
		),
		mcp.WithString("timezone_id",
			mcp.Description("timezone_id parameter for managed_businesses"),
			mcp.Enum
		),
		mcp.WithString("vertical",
			mcp.Description("vertical parameter for managed_businesses"),
			mcp.Enum("ADVERTISING", "AUTOMOTIVE", "CONSUMER_PACKAGED_GOODS", "ECOMMERCE", "EDUCATION", "ENERGY_AND_UTILITIES", "ENTERTAINMENT_AND_MEDIA", "FINANCIAL_SERVICES", "GAMING", "GOVERNMENT_AND_POLITICS", "HEALTH", "LUXURY", "MARKETING", "NON_PROFIT", "NOT_SET", "ORGANIZATIONS_AND_ASSOCIATIONS", "OTHER", "PROFESSIONAL_SERVICES", "RESTAURANT", "RETAIL", "TECHNOLOGY", "TELECOM", "TRAVEL"),
		),
	)
	tools = append(tools, business_post_managed_businessesTool)

	// business_get_managed_partner_ads_funding_source_details tool
	business_get_managed_partner_ads_funding_source_detailsTool := mcp.NewTool("business_get_managed_partner_ads_funding_source_details",
		mcp.WithDescription("GET managed_partner_ads_funding_source_details for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("year_quarter",
			mcp.Description("year_quarter parameter for managed_partner_ads_funding_source_details"),
		),
	)
	tools = append(tools, business_get_managed_partner_ads_funding_source_detailsTool)

	// business_post_managed_partner_business_setup tool
	business_post_managed_partner_business_setupTool := mcp.NewTool("business_post_managed_partner_business_setup",
		mcp.WithDescription("POST managed_partner_business_setup for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("active_ad_account_id",
			mcp.Description("active_ad_account_id parameter for managed_partner_business_setup"),
		),
		mcp.WithNumber("active_page_id",
			mcp.Description("active_page_id parameter for managed_partner_business_setup"),
		),
		mcp.WithString("partner_facebook_page_url",
			mcp.Description("partner_facebook_page_url parameter for managed_partner_business_setup"),
		),
		mcp.WithString("partner_registration_countries",
			mcp.Description("partner_registration_countries parameter for managed_partner_business_setup"),
		),
		mcp.WithString("seller_email_address",
			mcp.Description("seller_email_address parameter for managed_partner_business_setup"),
		),
		mcp.WithString("seller_external_website_url",
			mcp.Description("seller_external_website_url parameter for managed_partner_business_setup"),
		),
		mcp.WithString("template",
			mcp.Description("template parameter for managed_partner_business_setup"),
		),
	)
	tools = append(tools, business_post_managed_partner_business_setupTool)

	// business_delete_managed_partner_businesses tool
	business_delete_managed_partner_businessesTool := mcp.NewTool("business_delete_managed_partner_businesses",
		mcp.WithDescription("DELETE managed_partner_businesses for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("child_business_external_id",
			mcp.Description("child_business_external_id parameter for managed_partner_businesses"),
		),
		mcp.WithString("child_business_id",
			mcp.Description("child_business_id parameter for managed_partner_businesses"),
		),
	)
	tools = append(tools, business_delete_managed_partner_businessesTool)

	// business_post_managed_partner_businesses tool
	business_post_managed_partner_businessesTool := mcp.NewTool("business_post_managed_partner_businesses",
		mcp.WithDescription("POST managed_partner_businesses for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("ad_account_currency",
			mcp.Description("ad_account_currency parameter for managed_partner_businesses"),
		),
		mcp.WithString("catalog_id",
			mcp.Required(),
			mcp.Description("catalog_id parameter for managed_partner_businesses"),
		),
		mcp.WithString("child_business_external_id",
			mcp.Description("child_business_external_id parameter for managed_partner_businesses"),
		),
		mcp.WithNumber("credit_limit",
			mcp.Description("credit_limit parameter for managed_partner_businesses"),
		),
		mcp.WithString("line_of_credit_id",
			mcp.Description("line_of_credit_id parameter for managed_partner_businesses"),
		),
		mcp.WithString("name",
			mcp.Required(),
			mcp.Description("name parameter for managed_partner_businesses"),
		),
		mcp.WithBoolean("no_ad_account",
			mcp.Description("no_ad_account parameter for managed_partner_businesses"),
		),
		mcp.WithString("page_name",
			mcp.Description("page_name parameter for managed_partner_businesses"),
		),
		mcp.WithString("page_profile_image_url",
			mcp.Description("page_profile_image_url parameter for managed_partner_businesses"),
		),
		mcp.WithString("partition_type",
			mcp.Description("partition_type parameter for managed_partner_businesses"),
			mcp.Enum("AUTH", "FIXED", "FIXED_WITHOUT_PARTITION"),
		),
		mcp.WithString("partner_facebook_page_url",
			mcp.Description("partner_facebook_page_url parameter for managed_partner_businesses"),
		),
		mcp.WithString("partner_registration_countries",
			mcp.Description("partner_registration_countries parameter for managed_partner_businesses"),
		),
		mcp.WithString("sales_rep_email",
			mcp.Description("sales_rep_email parameter for managed_partner_businesses"),
		),
		mcp.WithString("seller_external_website_url",
			mcp.Required(),
			mcp.Description("seller_external_website_url parameter for managed_partner_businesses"),
		),
		mcp.WithString("seller_targeting_countries",
			mcp.Required(),
			mcp.Description("seller_targeting_countries parameter for managed_partner_businesses"),
		),
		mcp.WithBoolean("skip_partner_page_creation",
			mcp.Description("skip_partner_page_creation parameter for managed_partner_businesses"),
		),
		mcp.WithString("survey_business_type",
			mcp.Description("survey_business_type parameter for managed_partner_businesses"),
			mcp.Enum("ADVERTISER", "AGENCY", "APP_DEVELOPER", "PUBLISHER"),
		),
		mcp.WithNumber("survey_num_assets",
			mcp.Description("survey_num_assets parameter for managed_partner_businesses"),
		),
		mcp.WithNumber("survey_num_people",
			mcp.Description("survey_num_people parameter for managed_partner_businesses"),
		),
		mcp.WithString("timezone_id",
			mcp.Description("timezone_id parameter for managed_partner_businesses"),
			mcp.Enum
		),
		mcp.WithString("vertical",
			mcp.Required(),
			mcp.Description("vertical parameter for managed_partner_businesses"),
			mcp.Enum("ADVERTISING", "AUTOMOTIVE", "CONSUMER_PACKAGED_GOODS", "ECOMMERCE", "EDUCATION", "ENERGY_AND_UTILITIES", "ENTERTAINMENT_AND_MEDIA", "FINANCIAL_SERVICES", "GAMING", "GOVERNMENT_AND_POLITICS", "HEALTH", "LUXURY", "MARKETING", "NON_PROFIT", "NOT_SET", "ORGANIZATIONS_AND_ASSOCIATIONS", "OTHER", "PROFESSIONAL_SERVICES", "RESTAURANT", "RETAIL", "TECHNOLOGY", "TELECOM", "TRAVEL"),
		),
	)
	tools = append(tools, business_post_managed_partner_businessesTool)

	// business_post_onboard_partners_to_mm_lite tool
	business_post_onboard_partners_to_mm_liteTool := mcp.NewTool("business_post_onboard_partners_to_mm_lite",
		mcp.WithDescription("POST onboard_partners_to_mm_lite for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("solution_id",
			mcp.Description("solution_id parameter for onboard_partners_to_mm_lite"),
		),
	)
	tools = append(tools, business_post_onboard_partners_to_mm_liteTool)

	// business_get_openbridge_configurations tool
	business_get_openbridge_configurationsTool := mcp.NewTool("business_get_openbridge_configurations",
		mcp.WithDescription("GET openbridge_configurations for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_openbridge_configurationsTool)

	// business_post_openbridge_configurations tool
	business_post_openbridge_configurationsTool := mcp.NewTool("business_post_openbridge_configurations",
		mcp.WithDescription("POST openbridge_configurations for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithBoolean("active",
			mcp.Description("active parameter for openbridge_configurations"),
		),
		mcp.WithString("cloud_provider",
			mcp.Description("cloud_provider parameter for openbridge_configurations"),
		),
		mcp.WithString("cloud_region",
			mcp.Description("cloud_region parameter for openbridge_configurations"),
		),
		mcp.WithString("destination_id",
			mcp.Description("destination_id parameter for openbridge_configurations"),
		),
		mcp.WithString("endpoint",
			mcp.Description("endpoint parameter for openbridge_configurations"),
		),
		mcp.WithString("fallback_domain",
			mcp.Description("fallback_domain parameter for openbridge_configurations"),
		),
		mcp.WithString("first_party_domain",
			mcp.Description("first_party_domain parameter for openbridge_configurations"),
		),
		mcp.WithNumber("host_business_id",
			mcp.Description("host_business_id parameter for openbridge_configurations"),
		),
		mcp.WithString("instance_id",
			mcp.Description("instance_id parameter for openbridge_configurations"),
		),
		mcp.WithString("instance_version",
			mcp.Description("instance_version parameter for openbridge_configurations"),
		),
		mcp.WithBoolean("is_sgw_instance",
			mcp.Description("is_sgw_instance parameter for openbridge_configurations"),
		),
		mcp.WithBoolean("is_sgw_pixel_from_meta_pixel",
			mcp.Description("is_sgw_pixel_from_meta_pixel parameter for openbridge_configurations"),
		),
		mcp.WithString("partner_name",
			mcp.Description("partner_name parameter for openbridge_configurations"),
		),
		mcp.WithNumber("pixel_id",
			mcp.Required(),
			mcp.Description("pixel_id parameter for openbridge_configurations"),
		),
		mcp.WithString("sgw_account_id",
			mcp.Description("sgw_account_id parameter for openbridge_configurations"),
		),
		mcp.WithString("sgw_instance_url",
			mcp.Description("sgw_instance_url parameter for openbridge_configurations"),
		),
		mcp.WithNumber("sgw_pixel_id",
			mcp.Description("sgw_pixel_id parameter for openbridge_configurations"),
		),
	)
	tools = append(tools, business_post_openbridge_configurationsTool)

	// business_get_owned_ad_accounts tool
	business_get_owned_ad_accountsTool := mcp.NewTool("business_get_owned_ad_accounts",
		mcp.WithDescription("GET owned_ad_accounts for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("search_query",
			mcp.Description("search_query parameter for owned_ad_accounts"),
		),
	)
	tools = append(tools, business_get_owned_ad_accountsTool)

	// business_post_owned_ad_accounts tool
	business_post_owned_ad_accountsTool := mcp.NewTool("business_post_owned_ad_accounts",
		mcp.WithDescription("POST owned_ad_accounts for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("adaccount_id",
			mcp.Required(),
			mcp.Description("adaccount_id parameter for owned_ad_accounts"),
		),
	)
	tools = append(tools, business_post_owned_ad_accountsTool)

	// business_get_owned_apps tool
	business_get_owned_appsTool := mcp.NewTool("business_get_owned_apps",
		mcp.WithDescription("GET owned_apps for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_owned_appsTool)

	// business_post_owned_apps tool
	business_post_owned_appsTool := mcp.NewTool("business_post_owned_apps",
		mcp.WithDescription("POST owned_apps for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("app_id",
			mcp.Required(),
			mcp.Description("app_id parameter for owned_apps"),
		),
	)
	tools = append(tools, business_post_owned_appsTool)

	// business_delete_owned_businesses tool
	business_delete_owned_businessesTool := mcp.NewTool("business_delete_owned_businesses",
		mcp.WithDescription("DELETE owned_businesses for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("client_id",
			mcp.Required(),
			mcp.Description("client_id parameter for owned_businesses"),
		),
	)
	tools = append(tools, business_delete_owned_businessesTool)

	// business_get_owned_businesses tool
	business_get_owned_businessesTool := mcp.NewTool("business_get_owned_businesses",
		mcp.WithDescription("GET owned_businesses for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("child_business_external_id",
			mcp.Description("child_business_external_id parameter for owned_businesses"),
		),
		mcp.WithNumber("client_user_id",
			mcp.Description("client_user_id parameter for owned_businesses"),
		),
	)
	tools = append(tools, business_get_owned_businessesTool)

	// business_post_owned_businesses tool
	business_post_owned_businessesTool := mcp.NewTool("business_post_owned_businesses",
		mcp.WithDescription("POST owned_businesses for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("child_business_external_id",
			mcp.Description("child_business_external_id parameter for owned_businesses"),
		),
		mcp.WithString("name",
			mcp.Required(),
			mcp.Description("name parameter for owned_businesses"),
		),
		mcp.WithString("page_permitted_tasks",
			mcp.Description("page_permitted_tasks parameter for owned_businesses"),
			mcp.Enum("ADVERTISE", "ANALYZE", "CASHIER_ROLE", "CREATE_CONTENT", "GLOBAL_STRUCTURE_MANAGEMENT", "MANAGE", "MANAGE_JOBS", "MANAGE_LEADS", "MESSAGING", "MODERATE", "MODERATE_COMMUNITY", "PAGES_MESSAGING", "PAGES_MESSAGING_SUBSCRIPTIONS", "PROFILE_PLUS_ADVERTISE", "PROFILE_PLUS_ANALYZE", "PROFILE_PLUS_CREATE_CONTENT", "PROFILE_PLUS_FACEBOOK_ACCESS", "PROFILE_PLUS_FULL_CONTROL", "PROFILE_PLUS_MANAGE", "PROFILE_PLUS_MANAGE_LEADS", "PROFILE_PLUS_MESSAGING", "PROFILE_PLUS_MODERATE", "PROFILE_PLUS_MODERATE_DELEGATE_COMMUNITY", "PROFILE_PLUS_REVENUE", "READ_PAGE_MAILBOXES", "VIEW_MONETIZATION_INSIGHTS"),
		),
		mcp.WithString("sales_rep_email",
			mcp.Description("sales_rep_email parameter for owned_businesses"),
		),
		mcp.WithString("shared_page_id",
			mcp.Description("shared_page_id parameter for owned_businesses"),
		),
		mcp.WithBoolean("should_generate_name",
			mcp.Description("should_generate_name parameter for owned_businesses"),
		),
		mcp.WithString("survey_business_type",
			mcp.Description("survey_business_type parameter for owned_businesses"),
			mcp.Enum("ADVERTISER", "AGENCY", "APP_DEVELOPER", "PUBLISHER"),
		),
		mcp.WithNumber("survey_num_assets",
			mcp.Description("survey_num_assets parameter for owned_businesses"),
		),
		mcp.WithNumber("survey_num_people",
			mcp.Description("survey_num_people parameter for owned_businesses"),
		),
		mcp.WithString("timezone_id",
			mcp.Description("timezone_id parameter for owned_businesses"),
			mcp.Enum
		),
		mcp.WithString("vertical",
			mcp.Required(),
			mcp.Description("vertical parameter for owned_businesses"),
			mcp.Enum("ADVERTISING", "AUTOMOTIVE", "CONSUMER_PACKAGED_GOODS", "ECOMMERCE", "EDUCATION", "ENERGY_AND_UTILITIES", "ENTERTAINMENT_AND_MEDIA", "FINANCIAL_SERVICES", "GAMING", "GOVERNMENT_AND_POLITICS", "HEALTH", "LUXURY", "MARKETING", "NON_PROFIT", "NOT_SET", "ORGANIZATIONS_AND_ASSOCIATIONS", "OTHER", "PROFESSIONAL_SERVICES", "RESTAURANT", "RETAIL", "TECHNOLOGY", "TELECOM", "TRAVEL"),
		),
	)
	tools = append(tools, business_post_owned_businessesTool)

	// business_get_owned_instagram_accounts tool
	business_get_owned_instagram_accountsTool := mcp.NewTool("business_get_owned_instagram_accounts",
		mcp.WithDescription("GET owned_instagram_accounts for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_owned_instagram_accountsTool)

	// business_get_owned_offsite_signal_container_business_objects tool
	business_get_owned_offsite_signal_container_business_objectsTool := mcp.NewTool("business_get_owned_offsite_signal_container_business_objects",
		mcp.WithDescription("GET owned_offsite_signal_container_business_objects for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_owned_offsite_signal_container_business_objectsTool)

	// business_get_owned_pages tool
	business_get_owned_pagesTool := mcp.NewTool("business_get_owned_pages",
		mcp.WithDescription("GET owned_pages for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_owned_pagesTool)

	// business_post_owned_pages tool
	business_post_owned_pagesTool := mcp.NewTool("business_post_owned_pages",
		mcp.WithDescription("POST owned_pages for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("code",
			mcp.Description("code parameter for owned_pages"),
		),
		mcp.WithString("entry_point",
			mcp.Description("entry_point parameter for owned_pages"),
		),
		mcp.WithNumber("page_id",
			mcp.Required(),
			mcp.Description("page_id parameter for owned_pages"),
		),
	)
	tools = append(tools, business_post_owned_pagesTool)

	// business_get_owned_pixels tool
	business_get_owned_pixelsTool := mcp.NewTool("business_get_owned_pixels",
		mcp.WithDescription("GET owned_pixels for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_owned_pixelsTool)

	// business_get_owned_product_catalogs tool
	business_get_owned_product_catalogsTool := mcp.NewTool("business_get_owned_product_catalogs",
		mcp.WithDescription("GET owned_product_catalogs for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_owned_product_catalogsTool)

	// business_post_owned_product_catalogs tool
	business_post_owned_product_catalogsTool := mcp.NewTool("business_post_owned_product_catalogs",
		mcp.WithDescription("POST owned_product_catalogs for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("additional_vertical_option",
			mcp.Description("additional_vertical_option parameter for owned_product_catalogs"),
			mcp.Enum("LOCAL_DA_CATALOG", "LOCAL_PRODUCTS"),
		),
		mcp.WithString("business_metadata",
			mcp.Description("business_metadata parameter for owned_product_catalogs"),
		),
		mcp.WithString("catalog_segment_filter",
			mcp.Description("catalog_segment_filter parameter for owned_product_catalogs"),
		),
		mcp.WithString("catalog_segment_product_set_id",
			mcp.Description("catalog_segment_product_set_id parameter for owned_product_catalogs"),
		),
		mcp.WithString("da_display_settings",
			mcp.Description("da_display_settings parameter for owned_product_catalogs"),
		),
		mcp.WithString("destination_catalog_settings",
			mcp.Description("destination_catalog_settings parameter for owned_product_catalogs"),
		),
		mcp.WithString("flight_catalog_settings",
			mcp.Description("flight_catalog_settings parameter for owned_product_catalogs"),
		),
		mcp.WithString("name",
			mcp.Required(),
			mcp.Description("name parameter for owned_product_catalogs"),
		),
		mcp.WithString("parent_catalog_id",
			mcp.Description("parent_catalog_id parameter for owned_product_catalogs"),
		),
		mcp.WithString("partner_integration",
			mcp.Description("partner_integration parameter for owned_product_catalogs"),
		),
		mcp.WithString("store_catalog_settings",
			mcp.Description("store_catalog_settings parameter for owned_product_catalogs"),
		),
		mcp.WithString("vertical",
			mcp.Description("vertical parameter for owned_product_catalogs"),
			mcp.Enum("adoptable_pets", "commerce", "destinations", "flights", "generic", "home_listings", "hotels", "local_service_businesses", "offer_items", "offline_commerce", "transactable_items", "vehicles"),
		),
	)
	tools = append(tools, business_post_owned_product_catalogsTool)

	// business_get_owned_whatsapp_business_accounts tool
	business_get_owned_whatsapp_business_accountsTool := mcp.NewTool("business_get_owned_whatsapp_business_accounts",
		mcp.WithDescription("GET owned_whatsapp_business_accounts for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_owned_whatsapp_business_accountsTool)

	// business_delete_pages tool
	business_delete_pagesTool := mcp.NewTool("business_delete_pages",
		mcp.WithDescription("DELETE pages for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithNumber("page_id",
			mcp.Required(),
			mcp.Description("page_id parameter for pages"),
		),
	)
	tools = append(tools, business_delete_pagesTool)

	// business_get_partner_account_linking tool
	business_get_partner_account_linkingTool := mcp.NewTool("business_get_partner_account_linking",
		mcp.WithDescription("GET partner_account_linking for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_partner_account_linkingTool)

	// business_post_partner_premium_options tool
	business_post_partner_premium_optionsTool := mcp.NewTool("business_post_partner_premium_options",
		mcp.WithDescription("POST partner_premium_options for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("catalog_segment_id",
			mcp.Description("catalog_segment_id parameter for partner_premium_options"),
		),
		mcp.WithBoolean("enable_basket_insight",
			mcp.Required(),
			mcp.Description("enable_basket_insight parameter for partner_premium_options"),
		),
		mcp.WithBoolean("enable_extended_audience_retargeting",
			mcp.Required(),
			mcp.Description("enable_extended_audience_retargeting parameter for partner_premium_options"),
		),
		mcp.WithString("partner_business_id",
			mcp.Required(),
			mcp.Description("partner_business_id parameter for partner_premium_options"),
		),
		mcp.WithString("retailer_custom_audience_config",
			mcp.Required(),
			mcp.Description("retailer_custom_audience_config parameter for partner_premium_options"),
		),
		mcp.WithString("vendor_id",
			mcp.Description("vendor_id parameter for partner_premium_options"),
		),
	)
	tools = append(tools, business_post_partner_premium_optionsTool)

	// business_get_passback_attribution_metadata_configs tool
	business_get_passback_attribution_metadata_configsTool := mcp.NewTool("business_get_passback_attribution_metadata_configs",
		mcp.WithDescription("GET passback_attribution_metadata_configs for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_passback_attribution_metadata_configsTool)

	// business_get_pending_client_ad_accounts tool
	business_get_pending_client_ad_accountsTool := mcp.NewTool("business_get_pending_client_ad_accounts",
		mcp.WithDescription("GET pending_client_ad_accounts for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_pending_client_ad_accountsTool)

	// business_get_pending_client_apps tool
	business_get_pending_client_appsTool := mcp.NewTool("business_get_pending_client_apps",
		mcp.WithDescription("GET pending_client_apps for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_pending_client_appsTool)

	// business_get_pending_client_pages tool
	business_get_pending_client_pagesTool := mcp.NewTool("business_get_pending_client_pages",
		mcp.WithDescription("GET pending_client_pages for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_pending_client_pagesTool)

	// business_get_pending_owned_ad_accounts tool
	business_get_pending_owned_ad_accountsTool := mcp.NewTool("business_get_pending_owned_ad_accounts",
		mcp.WithDescription("GET pending_owned_ad_accounts for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_pending_owned_ad_accountsTool)

	// business_get_pending_owned_pages tool
	business_get_pending_owned_pagesTool := mcp.NewTool("business_get_pending_owned_pages",
		mcp.WithDescription("GET pending_owned_pages for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_pending_owned_pagesTool)

	// business_get_pending_shared_offsite_signal_container_business_objects tool
	business_get_pending_shared_offsite_signal_container_business_objectsTool := mcp.NewTool("business_get_pending_shared_offsite_signal_container_business_objects",
		mcp.WithDescription("GET pending_shared_offsite_signal_container_business_objects for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_pending_shared_offsite_signal_container_business_objectsTool)

	// business_get_pending_users tool
	business_get_pending_usersTool := mcp.NewTool("business_get_pending_users",
		mcp.WithDescription("GET pending_users for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("email",
			mcp.Description("email parameter for pending_users"),
		),
	)
	tools = append(tools, business_get_pending_usersTool)

	// business_get_picture tool
	business_get_pictureTool := mcp.NewTool("business_get_picture",
		mcp.WithDescription("GET picture for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithNumber("height",
			mcp.Description("height parameter for picture"),
		),
		mcp.WithBoolean("redirect",
			mcp.Description("redirect parameter for picture"),
		),
		mcp.WithString("type",
			mcp.Description("type parameter for picture"),
			mcp.Enum("album", "large", "normal", "small", "square"),
		),
		mcp.WithNumber("width",
			mcp.Description("width parameter for picture"),
		),
	)
	tools = append(tools, business_get_pictureTool)

	// business_post_pixel_tos tool
	business_post_pixel_tosTool := mcp.NewTool("business_post_pixel_tos",
		mcp.WithDescription("POST pixel_tos for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_post_pixel_tosTool)

	// business_get_preverified_numbers tool
	business_get_preverified_numbersTool := mcp.NewTool("business_get_preverified_numbers",
		mcp.WithDescription("GET preverified_numbers for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("code_verification_status",
			mcp.Description("code_verification_status parameter for preverified_numbers"),
			mcp.Enum("EXPIRED", "NOT_VERIFIED", "VERIFIED"),
		),
		mcp.WithString("phone_number",
			mcp.Description("phone_number parameter for preverified_numbers"),
		),
	)
	tools = append(tools, business_get_preverified_numbersTool)

	// business_get_received_audience_sharing_requests tool
	business_get_received_audience_sharing_requestsTool := mcp.NewTool("business_get_received_audience_sharing_requests",
		mcp.WithDescription("GET received_audience_sharing_requests for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("initiator_id",
			mcp.Description("initiator_id parameter for received_audience_sharing_requests"),
		),
		mcp.WithString("request_status",
			mcp.Description("request_status parameter for received_audience_sharing_requests"),
			mcp.Enum("APPROVE", "CANCELED", "DECLINE", "EXPIRED", "IN_PROGRESS", "PENDING", "PENDING_EMAIL_VERIFICATION", "PENDING_INTEGRITY_REVIEW"),
		),
	)
	tools = append(tools, business_get_received_audience_sharing_requestsTool)

	// business_get_reseller_guidances tool
	business_get_reseller_guidancesTool := mcp.NewTool("business_get_reseller_guidances",
		mcp.WithDescription("GET reseller_guidances for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_reseller_guidancesTool)

	// business_get_self_certified_whatsapp_business_submissions tool
	business_get_self_certified_whatsapp_business_submissionsTool := mcp.NewTool("business_get_self_certified_whatsapp_business_submissions",
		mcp.WithDescription("GET self_certified_whatsapp_business_submissions for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("end_business_id",
			mcp.Description("end_business_id parameter for self_certified_whatsapp_business_submissions"),
		),
	)
	tools = append(tools, business_get_self_certified_whatsapp_business_submissionsTool)

	// business_post_self_certify_whatsapp_business tool
	business_post_self_certify_whatsapp_businessTool := mcp.NewTool("business_post_self_certify_whatsapp_business",
		mcp.WithDescription("POST self_certify_whatsapp_business for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("average_monthly_revenue_spend_with_partner",
			mcp.Description("average_monthly_revenue_spend_with_partner parameter for self_certify_whatsapp_business"),
		),
		mcp.WithString("business_documents",
			mcp.Required(),
			mcp.Description("business_documents parameter for self_certify_whatsapp_business"),
		),
		mcp.WithString("business_vertical",
			mcp.Description("business_vertical parameter for self_certify_whatsapp_business"),
			mcp.Enum("ADVERTISING", "AUTOMOTIVE", "CONSUMER_PACKAGED_GOODS", "ECOMMERCE", "EDUCATION", "ENERGY_AND_UTILITIES", "ENTERTAINMENT_AND_MEDIA", "FINANCIAL_SERVICES", "GAMING", "GOVERNMENT_AND_POLITICS", "HEALTH", "LUXURY", "MARKETING", "NON_PROFIT", "NOT_SET", "ORGANIZATIONS_AND_ASSOCIATIONS", "OTHER", "PROFESSIONAL_SERVICES", "RESTAURANT", "RETAIL", "TECHNOLOGY", "TELECOM", "TRAVEL"),
		),
		mcp.WithString("end_business_address",
			mcp.Description("end_business_address parameter for self_certify_whatsapp_business"),
		),
		mcp.WithString("end_business_id",
			mcp.Required(),
			mcp.Description("end_business_id parameter for self_certify_whatsapp_business"),
		),
		mcp.WithString("end_business_legal_name",
			mcp.Description("end_business_legal_name parameter for self_certify_whatsapp_business"),
		),
		mcp.WithString("end_business_trade_names",
			mcp.Description("end_business_trade_names parameter for self_certify_whatsapp_business"),
		),
		mcp.WithString("end_business_website",
			mcp.Description("end_business_website parameter for self_certify_whatsapp_business"),
		),
		mcp.WithNumber("num_billing_cycles_with_partner",
			mcp.Description("num_billing_cycles_with_partner parameter for self_certify_whatsapp_business"),
		),
	)
	tools = append(tools, business_post_self_certify_whatsapp_businessTool)

	// business_post_setup_managed_partner_adaccounts tool
	business_post_setup_managed_partner_adaccountsTool := mcp.NewTool("business_post_setup_managed_partner_adaccounts",
		mcp.WithDescription("POST setup_managed_partner_adaccounts for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("credit_line_id",
			mcp.Required(),
			mcp.Description("credit_line_id parameter for setup_managed_partner_adaccounts"),
		),
		mcp.WithString("marketplace_business_id",
			mcp.Required(),
			mcp.Description("marketplace_business_id parameter for setup_managed_partner_adaccounts"),
		),
		mcp.WithString("subvertical_v2",
			mcp.Required(),
			mcp.Description("subvertical_v2 parameter for setup_managed_partner_adaccounts"),
			mcp.Enum("ACCOUNTING_AND_TAX", "ACTIVITIES_AND_LEISURE", "AIR", "APPAREL_AND_ACCESSORIES", "ARTS_AND_HERITAGE_AND_EDUCATION", "AR_OR_VR_GAMING", "AUDIO_STREAMING", "AUTO", "AUTO_INSURANCE", "AUTO_RENTAL", "BABY", "BALLOT_INITIATIVE_OR_REFERENDUM", "BEAUTY", "BEAUTY_AND_FASHION", "BEER_AND_WINE_AND_LIQUOR_AND_MALT_BEVERAGES", "BOOKSTORES", "BROADCAST_TELEVISION", "BUSINESS_CONSULTANTS", "BUYING_AGENCY", "CABLE_AND_SATELLITE", "CABLE_TELEVISION", "CALL_CENTER_AND_MESSAGING_SERVICES", "CANDIDATE_OR_POLITICIAN", "CAREER", "CAREER_AND_TECH", "CASUAL_DINING", "CHRONIC_CONDITIONS_AND_MEDICAL_CAUSES", "CIVIC_INFLUENCERS", "CLINICAL_TRIALS", "COFFEE", "COMPUTER_AND_SOFTWARE_AND_HARDWARE", "CONSOLE_AND_CROSS_PLATFORM_GAMING", "CONSULTING", "CONSUMER_ELECTRONICS", "COUNSELING_AND_PSYCHOTHERAPY", "CREATIVE_AGENCY", "CREDIT_AND_FINANCING_AND_MORTAGES", "CRUISES_AND_MARINE", "CULTURE_AND_LIFESTYLE", "DATA_ANALYTICS_AND_DATA_MANAGEMENT", "DATING_AND_TECHNOLOGY_APPS", "DEPARTMENT_STORE", "DESKTOP_SOFTWARE", "DIETING_AND_FITNESS_PROGRAMS", "DIGITAL_NATIVE_EDUCATION_OR_TRAINING", "DRINKING_PLACES", "EDUCATION_RESOURCES", "ED_TECH", "ELEARNING_AND_MASSIVE_ONLINE_OPEN_COURSES", "ELECTION_COMMISSION", "ELECTRONICS_AND_APPLIANCES", "ENGINEERING_AND_DESIGN", "ENVIRONMENT_AND_ANIMAL_WELFARE", "ESPORTS", "EVENTS", "FARMING_AND_RANCHING", "FILE_STORAGE_AND_CLOUD_AND_DATA_SERVICES", "FINANCE", "FIN_TECH", "FISHING_AND_HUNTING_AND_FORESTRY_AND_LOGGING", "FITNESS", "FOOD", "FOOTWEAR", "FOR_PROFIT_COLLEGES_AND_UNIVERSITIES", "FULL_SERVICE_AGENCY", "GOVERNMENT_CONTROLLED_ENTITY", "GOVERNMENT_DEPARTMENT_OR_AGENCY", "GOVERNMENT_OFFICIAL", "GOVERNMENT_OWNED_MEDIA", "GROCERY_AND_DRUG_AND_CONVENIENCE", "HEAD_OF_STATE", "HEALTH_INSURANCE", "HEALTH_SYSTEMS_AND_PRACTITIONERS", "HEALTH_TECH", "HOME_AND_FURNITURE_AND_OFFICE", "HOME_IMPROVEMENT", "HOME_INSURANCE", "HOME_TECH", "HOTEL_AND_ACCOMODATION", "HOUSEHOLD_GOODS_DURABLE", "HOUSEHOLD_GOODS_NON_DURABLE", "HR_AND_FINANCIAL_MANAGEMENT", "HUMANITARIAN_OR_DISASTER_RELIEF", "INDEPENDENT_EXPENDITURE_GROUP", "INSURANCE_TECH", "INTERNATIONAL_ORGANIZATON", "INVESTMENT_BANK_AND_BROKERAGE", "ISSUE_ADVOCACY", "LEGAL", "LIFE_INSURANCE", "LOGISTICS_AND_TRANSPORTATION_AND_FLEET_MANAGEMENT", "MANUFACTURING", "MEDICAL_DEVICES_AND_SUPPLIES_AND_EQUIPMENT", "MEDSPA_AND_ELECTIVE_SURGERIES_AND_ALTERNATIVE_MEDICINE", "MINING_AND_QUARRYING", "MOBILE_GAMING", "MOVIES", "MUSEUMS_AND_PARKS_AND_LIBRARIES", "MUSIC", "NETWORK_SECURITY_PRODUCTS", "NEWS_AND_CURRENT_EVENTS", "NON_PRESCRIPTION", "NOT_FOR_PROFIT_COLLEGES_AND_UNIVERSITIES", "OFFICE", "OFFICE_OR_BUSINESS_SUPPLIES", "OIL_AND_GAS_AND_CONSUMABLE_FUEL", "ONLINE_ONLY_PUBLICATIONS", "PACKAGE_OR_FREIGHT_DELIVERY", "PARTY_INDEPENDENT_EXPENDITURE_GROUP_US", "PAYMENT_PROCESSING_AND_GATEWAY_SOLUTIONS", "PC_GAMING", "PEOPLE", "PERSONAL_CARE", "PET", "PHOTOGRAPHY_AND_FILMING_SERVICES", "PIZZA", "PLANNING_AGENCY", "POLITICAL_PARTY_OR_COMMITTEE", "PRESCRIPTION", "PROFESSIONAL_ASSOCIATIONS", "PROPERTY_AND_CASUALTY", "QUICK_SERVICE", "RADIO", "RAILROADS", "REAL_ESTATE", "REAL_MONEY_GAMING", "RECREATIONAL", "RELIGIOUS", "RESELLER", "RESIDENTIAL_AND_LONG_TERM_CARE_FACILITIES_AND_OUTPATIENT_CARE_CENTERS", "RETAIL_AND_CREDIT_UNION_AND_COMMERCIAL_BANK", "RIDE_SHARING_OR_TAXI_SERVICES", "SAFETY_SERVICES", "SCHOLARLY", "SCHOOL_AND_EARLY_CHILDREN_EDCATION", "SOCIAL_MEDIA", "SOFTWARE_AS_A_SERVICE", "SPORTING", "SPORTING_AND_OUTDOOR", "SPORTS", "SUPERSTORES", "T1_AUTOMOTIVE_MANUFACTURER", "T1_MOTORCYCLE", "T2_DEALER_ASSOCIATIONS", "T3_AUTO_AGENCY", "T3_AUTO_RESELLERS", "T3_DEALER_GROUPS", "T3_FRANCHISE_DEALER", "T3_INDEPENDENT_DEALER", "T3_PARTS_AND_SERVICES", "T3_PORTALS", "TELECOMMUNICATIONS_EQUIPMENT_AND_ACCESSORIES", "TELEPHONE_SERVICE_PROVIDERS_AND_CARRIERS", "TICKETING", "TOBACCO", "TOURISM_AND_TRAVEL_SERVICES", "TOURISM_BOARD", "TOY_AND_HOBBY", "TRADE_SCHOOL", "TRAVEL_AGENCIES_AND_GUIDES_AND_OTAS", "UTILITIES_AND_ENERGY_EQUIPMENT_AND_SERVICES", "VETERINARY_CLINICS_AND_SERVICES", "VIDEO_STREAMING", "VIRTUAL_SERVICES", "VITAMINS_OR_WELLNESS", "WAREHOUSING_AND_STORAGE", "WATER_AND_SOFT_DRINK_AND_BAVERAGE", "WEBSITE_DESIGNERS_OR_GRAPHIC_DESIGNERS", "WHOLESALE", "WIRELESS_SERVICES"),
		),
		mcp.WithString("vendor_id",
			mcp.Required(),
			mcp.Description("vendor_id parameter for setup_managed_partner_adaccounts"),
		),
		mcp.WithString("vertical_v2",
			mcp.Required(),
			mcp.Description("vertical_v2 parameter for setup_managed_partner_adaccounts"),
			mcp.Enum("ADVERTISING_AND_MARKETING", "AGRICULTURE", "AUTOMOTIVE", "BANKING_AND_CREDIT_CARDS", "BUSINESS_TO_BUSINESS", "CONSUMER_PACKAGED_GOODS", "ECOMMERCE", "EDUCATION", "ENERGY_AND_NATURAL_RESOURCES_AND_UTILITIES", "ENTERTAINMENT_AND_MEDIA", "GAMING", "GOVERNMENT", "HEALTHCARE_AND_PHARMACEUTICALS_AND_BIOTECH", "INSURANCE", "NON_PROFIT", "ORGANIZATIONS_AND_ASSOCIATIONS", "POLITICS", "PROFESSIONAL_SERVICES", "PUBLISHING", "RESTAURANTS", "RETAIL", "TECHNOLOGY", "TELECOM", "TRAVEL"),
		),
	)
	tools = append(tools, business_post_setup_managed_partner_adaccountsTool)

	// business_delete_share_preverified_numbers tool
	business_delete_share_preverified_numbersTool := mcp.NewTool("business_delete_share_preverified_numbers",
		mcp.WithDescription("DELETE share_preverified_numbers for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("partner_business_id",
			mcp.Required(),
			mcp.Description("partner_business_id parameter for share_preverified_numbers"),
		),
		mcp.WithString("preverified_id",
			mcp.Required(),
			mcp.Description("preverified_id parameter for share_preverified_numbers"),
		),
	)
	tools = append(tools, business_delete_share_preverified_numbersTool)

	// business_post_share_preverified_numbers tool
	business_post_share_preverified_numbersTool := mcp.NewTool("business_post_share_preverified_numbers",
		mcp.WithDescription("POST share_preverified_numbers for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("partner_business_id",
			mcp.Required(),
			mcp.Description("partner_business_id parameter for share_preverified_numbers"),
		),
		mcp.WithString("preverified_id",
			mcp.Required(),
			mcp.Description("preverified_id parameter for share_preverified_numbers"),
		),
	)
	tools = append(tools, business_post_share_preverified_numbersTool)

	// business_post_system_user_access_tokens tool
	business_post_system_user_access_tokensTool := mcp.NewTool("business_post_system_user_access_tokens",
		mcp.WithDescription("POST system_user_access_tokens for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("asset",
			mcp.Description("asset parameter for system_user_access_tokens"),
		),
		mcp.WithBoolean("fetch_only",
			mcp.Description("fetch_only parameter for system_user_access_tokens"),
		),
		mcp.WithString("scope",
			mcp.Description("scope parameter for system_user_access_tokens"),
		),
		mcp.WithBoolean("set_token_expires_in_60_days",
			mcp.Description("set_token_expires_in_60_days parameter for system_user_access_tokens"),
		),
		mcp.WithNumber("system_user_id",
			mcp.Description("system_user_id parameter for system_user_access_tokens"),
		),
	)
	tools = append(tools, business_post_system_user_access_tokensTool)

	// business_get_system_users tool
	business_get_system_usersTool := mcp.NewTool("business_get_system_users",
		mcp.WithDescription("GET system_users for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_system_usersTool)

	// business_post_system_users tool
	business_post_system_usersTool := mcp.NewTool("business_post_system_users",
		mcp.WithDescription("POST system_users for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("name",
			mcp.Required(),
			mcp.Description("name parameter for system_users"),
		),
		mcp.WithString("role",
			mcp.Description("role parameter for system_users"),
			mcp.Enum("ADMIN", "ADS_RIGHTS_REVIEWER", "DEFAULT", "DEVELOPER", "EMPLOYEE", "FINANCE_ANALYST", "FINANCE_EDIT", "FINANCE_EDITOR", "FINANCE_VIEW", "MANAGE", "PARTNER_CENTER_ADMIN", "PARTNER_CENTER_ANALYST", "PARTNER_CENTER_EDUCATION", "PARTNER_CENTER_MARKETING", "PARTNER_CENTER_OPERATIONS"),
		),
		mcp.WithNumber("system_user_id",
			mcp.Description("system_user_id parameter for system_users"),
		),
	)
	tools = append(tools, business_post_system_usersTool)

	// business_get_third_party_measurement_report_dataset tool
	business_get_third_party_measurement_report_datasetTool := mcp.NewTool("business_get_third_party_measurement_report_dataset",
		mcp.WithDescription("GET third_party_measurement_report_dataset for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_third_party_measurement_report_datasetTool)

	// business_post_videos tool
	business_post_videosTool := mcp.NewTool("business_post_videos",
		mcp.WithDescription("POST videos for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithBoolean("ad_placements_validation_only",
			mcp.Description("ad_placements_validation_only parameter for videos"),
		),
		mcp.WithString("application_id",
			mcp.Description("application_id parameter for videos"),
		),
		mcp.WithNumber("asked_fun_fact_prompt_id",
			mcp.Description("asked_fun_fact_prompt_id parameter for videos"),
		),
		mcp.WithString("audio_story_wave_animation_handle",
			mcp.Description("audio_story_wave_animation_handle parameter for videos"),
		),
		mcp.WithString("chunk_session_id",
			mcp.Description("chunk_session_id parameter for videos"),
		),
		mcp.WithString("composer_entry_picker",
			mcp.Description("composer_entry_picker parameter for videos"),
		),
		mcp.WithString("composer_entry_point",
			mcp.Description("composer_entry_point parameter for videos"),
		),
		mcp.WithNumber("composer_entry_time",
			mcp.Description("composer_entry_time parameter for videos"),
		),
		mcp.WithString("composer_session_events_log",
			mcp.Description("composer_session_events_log parameter for videos"),
		),
		mcp.WithString("composer_session_id",
			mcp.Description("composer_session_id parameter for videos"),
		),
		mcp.WithString("composer_source_surface",
			mcp.Description("composer_source_surface parameter for videos"),
		),
		mcp.WithString("composer_type",
			mcp.Description("composer_type parameter for videos"),
		),
		mcp.WithString("container_type",
			mcp.Description("container_type parameter for videos"),
			mcp.Enum("ACO_VIDEO_VARIATION", "ADS_AI_GENERATED", "AD_BREAK_PREVIEW", "AD_DERIVATIVE", "AD_LIBRARY_WATERMARK", "ALBUM_MULTIMEDIA_POST", "ALOHA_SUPERFRAME", "APP_REREVIEW_SCREENCAST", "APP_REVIEW_SCREENCAST", "ASSET_MANAGER", "ATLAS_VIDEO", "AUDIO_BROADCAST", "AUDIO_COMMENT", "BROADCAST", "CANVAS", "CMS_MEDIA_MANAGER", "CONTAINED_POST_ATTACHMENT", "CONTAINED_POST_AUDIO_BROADCAST", "CONTAINED_POST_COPYRIGHT_REFERENCE_BROADCAST", "COPYRIGHT_REFERENCE_BROADCAST", "COPYRIGHT_REFERENCE_IG_XPOST_VIDEO", "COPYRIGHT_REFERENCE_VIDEO", "CREATION_ML_PRECREATION", "CREATOR_FAN_CHALLENGE", "CREATOR_STOREFRONT_PERSONALIZED_VIDEO", "DATAGENIX_VIDEO", "DCO_AD_ASSET_FEED", "DCO_AUTOGEN_VIDEO", "DCO_TRIMMED_VIDEO", "DIM_SUM", "DIRECTED_POST_ATTACHMENT", "DIRECT_INBOX", "DROPS_SHOPPING_EVENT_PAGE", "DYNAMIC_ITEM_VIDEO", "DYNAMIC_TEMPLATE_VIDEO", "EVENT_COVER_VIDEO", "EVENT_TOUR", "FACECAST_DVR", "FB_AVATAR_ANIMATED_SATP", "FB_COLLECTIBLE_VIDEO", "FB_SHORTS", "FB_SHORTS_CONTENT_REMIXABLE", "FB_SHORTS_GROUP_POST", "FB_SHORTS_LINKED_PRODUCT", "FB_SHORTS_PMV_POST", "FB_SHORTS_POST", "FB_SHORTS_REMIX_POST", "FUNDRAISER_COVER_VIDEO", "GAME_CLIP", "GIF_TO_VIDEO", "GOODWILL_ANNIVERSARY_DEPRECATED", "GOODWILL_ANNIVERSARY_PROMOTION_DEPRECATED", "GOODWILL_VIDEO_CONTAINED_SHARE", "GOODWILL_VIDEO_PROMOTION", "GOODWILL_VIDEO_SHARE", "GOODWILL_VIDEO_TOKEN_REQUIRED", "GROUP_POST", "HEURISTIC_CLUSTER_VIDEO", "HIGHLIGHT_CLIP_VIDEO", "HORIZON_WORLDS_TV", "HUDDLE_BROADCAST", "IG_REELS_XPV", "IG_STORIES_READER", "INJECTABLE", "INSPIRATION_VIDEO", "INSTAGRAM_VIDEO_COPY", "INSTANT_APPLICATION_PREVIEW", "INSTANT_ARTICLE", "ISSUE_MODULE", "LEARN", "LEGACY", "LEGACY_CONTAINED_POST_BROADCAST", "LIVE_AUDIO_ROOM_BROADCAST", "LIVE_CLIP_PREVIEW", "LIVE_CLIP_WORKCHAT", "LIVE_CREATIVE_KIT_VIDEO", "LIVE_PHOTO", "LOOK_NOW_DEPRECATED", "MARKETPLACE_LISTING_VIDEO", "MARKETPLACE_PRE_RECORDED_VIDEO", "MOMENTS_VIDEO", "MUSIC_CLIP", "MUSIC_CLIP_IN_COMMENT", "MUSIC_CLIP_IN_LIGHTWEIGHT_STATUS", "MUSIC_CLIP_IN_MSGR_NOTE", "MUSIC_CLIP_IN_POLL_OPTION", "MUSIC_CLIP_ON_DATING_PROFILE", "NEO_ASYNC_GAME_VIDEO", "NEW_CONTAINED_POST_BROADCAST", "NO_STORY", "OCULUS_CREATOR_PORTAL", "OCULUS_VENUES_BROADCAST", "ORIGINALITY_SELF_ADVOCACY", "PAGES_COVER_VIDEO", "PAGE_REVIEW_SCREENCAST", "PAGE_SLIDESHOW_VIDEO", "PAID_CONTENT_PREVIEW", "PAID_CONTENT_VIDEO", "PAID_CONTENT_VIDEO__POST", "PIXELCLOUD", "PODCAST_HIGHLIGHT", "PODCAST_ML_PREVIEW", "PODCAST_ML_PREVIEW_NO_NEWSFEED_STORY", "PODCAST_RSS", "PODCAST_RSS_EPHEMERAL", "PODCAST_RSS_NO_NEWSFEED_STORY", "PODCAST_VOICES", "PODCAST_VOICES_NO_NEWSFEED_STORY", "PREMIERE_SOURCE", "PREMIUM_MUSIC_VIDEO_CLIP", "PREMIUM_MUSIC_VIDEO_CROPPED_CLIP", "PREMIUM_MUSIC_VIDEO_NO_NEWSFEED_STORY", "PREMIUM_MUSIC_VIDEO_WITH_NEWSFEED_STORY", "PRIVATE_GALLERY_VIDEO", "PRODUCT_VIDEO", "PROFILE_COVER_VIDEO", "PROFILE_INTRO_CARD", "PROFILE_VIDEO", "PROTON", "QUICK_CLIP_WORKPLACE_POST", "QUICK_PROMOTION", "REPLACE_VIDEO", "SALES_CLIENT_INTERACTION", "SHOWREEL_NATIVE_DUMMY_VIDEO", "SLIDESHOW_ANIMOTO", "SLIDESHOW_SHAKR", "SLIDESHOW_VARIATION_VIDEO", "SOUND_PLATFORM_STREAM", "SRT_ATTACHMENT", "STORIES_VIDEO", "STORYLINE", "STORYLINE_WITH_EXTERNAL_MUSIC", "STORY_ARCHIVE_VIDEO", "STORY_CARD_TEMPLATE", "STREAM_HIGHLIGHTS_VIDEO", "TAROT_DIGEST", "TEMPORARY_UNLISTED", "TEMP_VIDEO_COPYRIGHT_SCAN", "UNLISTED", "UNLISTED_OCULUS", "VIDEO_COMMENT", "VIDEO_COMPOSITION_VARIATION", "VIDEO_CREATIVE_EDITOR_AUTOGEN_AD_VIDEO", "VIDEO_SUPERRES", "VOICES_ARTICLE_VIDEO", "VU_GENERATED_VIDEO", "WOODHENGE", "WORK_KNOWLEDGE_VIDEO", "YOUR_DAY"),
		),
		mcp.WithString("content_category",
			mcp.Description("content_category parameter for videos"),
			mcp.Enum("BEAUTY_FASHION", "BUSINESS", "CARS_TRUCKS", "COMEDY", "CUTE_ANIMALS", "ENTERTAINMENT", "FAMILY", "FOOD_HEALTH", "HOME", "LIFESTYLE", "MUSIC", "NEWS", "OTHER", "POLITICS", "SCIENCE", "SPORTS", "TECHNOLOGY", "VIDEO_GAMING"),
		),
		mcp.WithString("creative_folder_id",
			mcp.Required(),
			mcp.Description("creative_folder_id parameter for videos"),
		),
		mcp.WithString("creative_tools",
			mcp.Description("creative_tools parameter for videos"),
		),
		mcp.WithString("description",
			mcp.Description("description parameter for videos"),
		),
		mcp.WithBoolean("embeddable",
			mcp.Description("embeddable parameter for videos"),
		),
		mcp.WithNumber("end_offset",
			mcp.Description("end_offset parameter for videos"),
		),
		mcp.WithString("fbuploader_video_file_chunk",
			mcp.Description("fbuploader_video_file_chunk parameter for videos"),
		),
		mcp.WithNumber("file_size",
			mcp.Description("file_size parameter for videos"),
		),
		mcp.WithString("file_url",
			mcp.Description("file_url parameter for videos"),
		),
		mcp.WithBoolean("fisheye_video_cropped",
			mcp.Description("fisheye_video_cropped parameter for videos"),
		),
		mcp.WithString("formatting",
			mcp.Description("formatting parameter for videos"),
			mcp.Enum("MARKDOWN", "PLAINTEXT"),
		),
		mcp.WithNumber("fov",
			mcp.Description("fov parameter for videos"),
		),
		mcp.WithNumber("front_z_rotation",
			mcp.Description("front_z_rotation parameter for videos"),
		),
		mcp.WithString("fun_fact_prompt_id",
			mcp.Description("fun_fact_prompt_id parameter for videos"),
		),
		mcp.WithNumber("fun_fact_toastee_id",
			mcp.Description("fun_fact_toastee_id parameter for videos"),
		),
		mcp.WithString("guide",
			mcp.Description("guide parameter for videos"),
		),
		mcp.WithBoolean("guide_enabled",
			mcp.Description("guide_enabled parameter for videos"),
		),
		mcp.WithNumber("initial_heading",
			mcp.Description("initial_heading parameter for videos"),
		),
		mcp.WithNumber("initial_pitch",
			mcp.Description("initial_pitch parameter for videos"),
		),
		mcp.WithString("instant_game_entry_point_data",
			mcp.Description("instant_game_entry_point_data parameter for videos"),
		),
		mcp.WithBoolean("is_boost_intended",
			mcp.Description("is_boost_intended parameter for videos"),
		),
		mcp.WithBoolean("is_group_linking_post",
			mcp.Description("is_group_linking_post parameter for videos"),
		),
		mcp.WithBoolean("is_partnership_ad",
			mcp.Description("is_partnership_ad parameter for videos"),
		),
		mcp.WithBoolean("is_voice_clip",
			mcp.Description("is_voice_clip parameter for videos"),
		),
		mcp.WithString("location_source_id",
			mcp.Description("location_source_id parameter for videos"),
		),
		mcp.WithString("og_action_type_id",
			mcp.Description("og_action_type_id parameter for videos"),
		),
		mcp.WithString("og_icon_id",
			mcp.Description("og_icon_id parameter for videos"),
		),
		mcp.WithString("og_object_id",
			mcp.Description("og_object_id parameter for videos"),
		),
		mcp.WithString("og_phrase",
			mcp.Description("og_phrase parameter for videos"),
		),
		mcp.WithString("og_suggestion_mechanism",
			mcp.Description("og_suggestion_mechanism parameter for videos"),
		),
		mcp.WithNumber("original_fov",
			mcp.Description("original_fov parameter for videos"),
		),
		mcp.WithString("original_projection_type",
			mcp.Description("original_projection_type parameter for videos"),
			mcp.Enum("cubemap", "equirectangular", "half_equirectangular"),
		),
		mcp.WithString("partnership_ad_ad_code",
			mcp.Description("partnership_ad_ad_code parameter for videos"),
		),
		mcp.WithNumber("publish_event_id",
			mcp.Description("publish_event_id parameter for videos"),
		),
		mcp.WithString("referenced_sticker_id",
			mcp.Description("referenced_sticker_id parameter for videos"),
		),
		mcp.WithString("replace_video_id",
			mcp.Description("replace_video_id parameter for videos"),
		),
		mcp.WithString("slideshow_spec",
			mcp.Description("slideshow_spec parameter for videos"),
		),
		mcp.WithString("source",
			mcp.Description("source parameter for videos"),
		),
		mcp.WithString("source_instagram_media_id",
			mcp.Description("source_instagram_media_id parameter for videos"),
		),
		mcp.WithBoolean("spherical",
			mcp.Description("spherical parameter for videos"),
		),
		mcp.WithNumber("start_offset",
			mcp.Description("start_offset parameter for videos"),
		),
		mcp.WithString("swap_mode",
			mcp.Description("swap_mode parameter for videos"),
			mcp.Enum("replace"),
		),
		mcp.WithString("text_format_metadata",
			mcp.Description("text_format_metadata parameter for videos"),
		),
		mcp.WithString("thumb",
			mcp.Description("thumb parameter for videos"),
		),
		mcp.WithNumber("time_since_original_post",
			mcp.Description("time_since_original_post parameter for videos"),
		),
		mcp.WithString("title",
			mcp.Description("title parameter for videos"),
		),
		mcp.WithString("transcode_setting_properties",
			mcp.Description("transcode_setting_properties parameter for videos"),
		),
		mcp.WithString("unpublished_content_type",
			mcp.Description("unpublished_content_type parameter for videos"),
			mcp.Enum("ADS_POST", "DRAFT", "INLINE_CREATED", "PUBLISHED", "REVIEWABLE_BRANDED_CONTENT", "SCHEDULED", "SCHEDULED_RECURRING"),
		),
		mcp.WithString("upload_phase",
			mcp.Description("upload_phase parameter for videos"),
			mcp.Enum("cancel", "finish", "start", "transfer"),
		),
		mcp.WithString("upload_session_id",
			mcp.Description("upload_session_id parameter for videos"),
		),
		mcp.WithString("upload_setting_properties",
			mcp.Description("upload_setting_properties parameter for videos"),
		),
		mcp.WithString("validation_ad_placements",
			mcp.Description("validation_ad_placements parameter for videos"),
			mcp.Enum("AUDIENCE_NETWORK_INSTREAM_VIDEO", "AUDIENCE_NETWORK_INSTREAM_VIDEO_MOBILE", "AUDIENCE_NETWORK_REWARDED_VIDEO", "DESKTOP_FEED_STANDARD", "FACEBOOK_STORY_MOBILE", "FACEBOOK_STORY_STICKER_MOBILE", "INSTAGRAM_STANDARD", "INSTAGRAM_STORY", "INSTANT_ARTICLE_STANDARD", "INSTREAM_BANNER_DESKTOP", "INSTREAM_BANNER_MOBILE", "INSTREAM_VIDEO_DESKTOP", "INSTREAM_VIDEO_IMAGE", "INSTREAM_VIDEO_MOBILE", "MESSENGER_MOBILE_INBOX_MEDIA", "MESSENGER_MOBILE_STORY_MEDIA", "MOBILE_FEED_STANDARD", "MOBILE_FULLWIDTH", "MOBILE_INTERSTITIAL", "MOBILE_MEDIUM_RECTANGLE", "MOBILE_NATIVE", "RIGHT_COLUMN_STANDARD", "SUGGESTED_VIDEO_MOBILE"),
		),
		mcp.WithString("video_file_chunk",
			mcp.Description("video_file_chunk parameter for videos"),
		),
		mcp.WithString("video_id_original",
			mcp.Description("video_id_original parameter for videos"),
		),
		mcp.WithNumber("video_start_time_ms",
			mcp.Description("video_start_time_ms parameter for videos"),
		),
		mcp.WithString("waterfall_id",
			mcp.Description("waterfall_id parameter for videos"),
		),
	)
	tools = append(tools, business_post_videosTool)

	// business_get_ tool
	business_get_Tool := mcp.NewTool("business_get_",
		mcp.WithDescription("GET  for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, business_get_Tool)

	// business_post_ tool
	business_post_Tool := mcp.NewTool("business_post_",
		mcp.WithDescription("POST  for Business"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("entry_point",
			mcp.Description("entry_point parameter for "),
		),
		mcp.WithString("name",
			mcp.Description("name parameter for "),
		),
		mcp.WithString("primary_page",
			mcp.Description("primary_page parameter for "),
		),
		mcp.WithNumber("timezone_id",
			mcp.Description("timezone_id parameter for "),
		),
		mcp.WithString("two_factor_type",
			mcp.Description("two_factor_type parameter for "),
			mcp.Enum("admin_required", "all_required", "none"),
		),
		mcp.WithString("vertical",
			mcp.Description("vertical parameter for "),
			mcp.Enum("ADVERTISING", "AUTOMOTIVE", "CONSUMER_PACKAGED_GOODS", "ECOMMERCE", "EDUCATION", "ENERGY_AND_UTILITIES", "ENTERTAINMENT_AND_MEDIA", "FINANCIAL_SERVICES", "GAMING", "GOVERNMENT_AND_POLITICS", "HEALTH", "LUXURY", "MARKETING", "NON_PROFIT", "NOT_SET", "ORGANIZATIONS_AND_ASSOCIATIONS", "OTHER", "PROFESSIONAL_SERVICES", "RESTAURANT", "RETAIL", "TECHNOLOGY", "TELECOM", "TRAVEL"),
		),
	)
	tools = append(tools, business_post_Tool)


	return tools
}

// Business handlers


// HandleBusiness_post_access_token handles the business_post_access_token tool
func HandleBusiness_post_access_token(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: app_id
	app_id, err := request.RequireString("app_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter app_id: %v", err)), nil
	}
	args["app_id"] = app_id

	// Optional: fbe_external_business_id
	if val := request.GetString("fbe_external_business_id", ""); val != "" {
		args["fbe_external_business_id"] = val
	}

	// Required: scope
	scope, err := request.RequireString("scope")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter scope: %v", err)), nil
	}
	args["scope"] = scope

	// Optional: system_user_name
	if val := request.GetString("system_user_name", ""); val != "" {
		args["system_user_name"] = val
	}



	// Call the client method
	result, err := client.Business_post_access_token(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_access_token: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_ad_account_infos handles the business_get_ad_account_infos tool
func HandleBusiness_get_ad_account_infos(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: ad_account_id
	if val := request.GetString("ad_account_id", ""); val != "" {
		args["ad_account_id"] = val
	}

	// Optional: parent_advertiser_id
	if val := request.GetString("parent_advertiser_id", ""); val != "" {
		args["parent_advertiser_id"] = val
	}

	// Optional: user_id
	if val := request.GetString("user_id", ""); val != "" {
		args["user_id"] = val
	}



	// Call the client method
	result, err := client.Business_get_ad_account_infos(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_ad_account_infos: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_delete_ad_accounts handles the business_delete_ad_accounts tool
func HandleBusiness_delete_ad_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: adaccount_id
	adaccount_id, err := request.RequireString("adaccount_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter adaccount_id: %v", err)), nil
	}
	args["adaccount_id"] = adaccount_id



	// Call the client method
	result, err := client.Business_delete_ad_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_delete_ad_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_ad_review_requests handles the business_post_ad_review_requests tool
func HandleBusiness_post_ad_review_requests(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: ad_account_ids
	// array type - using string
	if val := request.GetString("ad_account_ids", ""); val != "" {
		args["ad_account_ids"] = val
	}



	// Call the client method
	result, err := client.Business_post_ad_review_requests(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_ad_review_requests: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_ad_studies handles the business_get_ad_studies tool
func HandleBusiness_get_ad_studies(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_ad_studies(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_ad_studies: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_ad_studies handles the business_post_ad_studies tool
func HandleBusiness_post_ad_studies(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: cells
	cells, err := request.RequireString("cells")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter cells: %v", err)), nil
	}
	args["cells"] = cells

	// Optional: client_business
	if val := request.GetString("client_business", ""); val != "" {
		args["client_business"] = val
	}

	// Optional: confidence_level
	if val := request.GetFloat("confidence_level", 0); val != 0 {
		args["confidence_level"] = val
	}

	// Optional: cooldown_start_time
	if val := request.GetInt("cooldown_start_time", 0); val != 0 {
		args["cooldown_start_time"] = val
	}

	// Optional: description
	if val := request.GetString("description", ""); val != "" {
		args["description"] = val
	}

	// Required: end_time
	end_time, err := request.RequireInt("end_time")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter end_time: %v", err)), nil
	}
	args["end_time"] = end_time

	// Required: name
	name, err := request.RequireString("name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter name: %v", err)), nil
	}
	args["name"] = name

	// Optional: objectives
	// array type - using string
	if val := request.GetString("objectives", ""); val != "" {
		args["objectives"] = val
	}

	// Optional: observation_end_time
	if val := request.GetInt("observation_end_time", 0); val != 0 {
		args["observation_end_time"] = val
	}

	// Required: start_time
	start_time, err := request.RequireInt("start_time")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter start_time: %v", err)), nil
	}
	args["start_time"] = start_time

	// Optional: type
	if val := request.GetString("type", ""); val != "" {
		args["type"] = val
	}

	// Optional: viewers
	// array type - using string
	if val := request.GetString("viewers", ""); val != "" {
		args["viewers"] = val
	}



	// Call the client method
	result, err := client.Business_post_ad_studies(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_ad_studies: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_adaccount handles the business_post_adaccount tool
func HandleBusiness_post_adaccount(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: ad_account_created_from_bm_flag
	if val := request.GetBool("ad_account_created_from_bm_flag", false); val {
		args["ad_account_created_from_bm_flag"] = val
	}

	// Required: currency
	currency, err := request.RequireString("currency")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter currency: %v", err)), nil
	}
	args["currency"] = currency

	// Required: end_advertiser
	end_advertiser, err := request.RequireString("end_advertiser")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter end_advertiser: %v", err)), nil
	}
	args["end_advertiser"] = end_advertiser

	// Optional: funding_id
	if val := request.GetString("funding_id", ""); val != "" {
		args["funding_id"] = val
	}

	// Optional: invoice
	if val := request.GetBool("invoice", false); val {
		args["invoice"] = val
	}

	// Optional: invoice_group_id
	if val := request.GetString("invoice_group_id", ""); val != "" {
		args["invoice_group_id"] = val
	}

	// Optional: invoicing_emails
	// array type - using string
	if val := request.GetString("invoicing_emails", ""); val != "" {
		args["invoicing_emails"] = val
	}

	// Optional: io
	if val := request.GetBool("io", false); val {
		args["io"] = val
	}

	// Required: media_agency
	media_agency, err := request.RequireString("media_agency")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter media_agency: %v", err)), nil
	}
	args["media_agency"] = media_agency

	// Required: name
	name, err := request.RequireString("name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter name: %v", err)), nil
	}
	args["name"] = name

	// Required: partner
	partner, err := request.RequireString("partner")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter partner: %v", err)), nil
	}
	args["partner"] = partner

	// Optional: po_number
	if val := request.GetString("po_number", ""); val != "" {
		args["po_number"] = val
	}

	// Required: timezone_id
	timezone_id, err := request.RequireInt("timezone_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter timezone_id: %v", err)), nil
	}
	args["timezone_id"] = timezone_id



	// Call the client method
	result, err := client.Business_post_adaccount(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_adaccount: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_add_phone_numbers handles the business_post_add_phone_numbers tool
func HandleBusiness_post_add_phone_numbers(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: phone_number
	phone_number, err := request.RequireString("phone_number")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter phone_number: %v", err)), nil
	}
	args["phone_number"] = phone_number



	// Call the client method
	result, err := client.Business_post_add_phone_numbers(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_add_phone_numbers: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_adnetwork_applications handles the business_post_adnetwork_applications tool
func HandleBusiness_post_adnetwork_applications(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: name
	name, err := request.RequireString("name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter name: %v", err)), nil
	}
	args["name"] = name



	// Call the client method
	result, err := client.Business_post_adnetwork_applications(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_adnetwork_applications: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_adnetworkanalytics handles the business_get_adnetworkanalytics tool
func HandleBusiness_get_adnetworkanalytics(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: aggregation_period
	if val := request.GetString("aggregation_period", ""); val != "" {
		args["aggregation_period"] = val
	}

	// Optional: breakdowns
	// array type - using string
	if val := request.GetString("breakdowns", ""); val != "" {
		args["breakdowns"] = val
	}

	// Optional: filters
	// array type - using string
	if val := request.GetString("filters", ""); val != "" {
		args["filters"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Required: metrics
	metrics, err := request.RequireString("metrics")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter metrics: %v", err)), nil
	}
	args["metrics"] = metrics

	// Optional: ordering_column
	if val := request.GetString("ordering_column", ""); val != "" {
		args["ordering_column"] = val
	}

	// Optional: ordering_type
	if val := request.GetString("ordering_type", ""); val != "" {
		args["ordering_type"] = val
	}

	// Optional: should_include_until
	if val := request.GetBool("should_include_until", false); val {
		args["should_include_until"] = val
	}

	// Optional: since
	if val := request.GetString("since", ""); val != "" {
		args["since"] = val
	}

	// Optional: until
	if val := request.GetString("until", ""); val != "" {
		args["until"] = val
	}



	// Call the client method
	result, err := client.Business_get_adnetworkanalytics(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_adnetworkanalytics: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_adnetworkanalytics handles the business_post_adnetworkanalytics tool
func HandleBusiness_post_adnetworkanalytics(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: aggregation_period
	if val := request.GetString("aggregation_period", ""); val != "" {
		args["aggregation_period"] = val
	}

	// Optional: breakdowns
	// array type - using string
	if val := request.GetString("breakdowns", ""); val != "" {
		args["breakdowns"] = val
	}

	// Optional: filters
	// array type - using string
	if val := request.GetString("filters", ""); val != "" {
		args["filters"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Required: metrics
	metrics, err := request.RequireString("metrics")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter metrics: %v", err)), nil
	}
	args["metrics"] = metrics

	// Optional: ordering_column
	if val := request.GetString("ordering_column", ""); val != "" {
		args["ordering_column"] = val
	}

	// Optional: ordering_type
	if val := request.GetString("ordering_type", ""); val != "" {
		args["ordering_type"] = val
	}

	// Optional: since
	if val := request.GetString("since", ""); val != "" {
		args["since"] = val
	}

	// Optional: until
	if val := request.GetString("until", ""); val != "" {
		args["until"] = val
	}



	// Call the client method
	result, err := client.Business_post_adnetworkanalytics(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_adnetworkanalytics: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_adnetworkanalytics_results handles the business_get_adnetworkanalytics_results tool
func HandleBusiness_get_adnetworkanalytics_results(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: query_ids
	// array type - using string
	if val := request.GetString("query_ids", ""); val != "" {
		args["query_ids"] = val
	}



	// Call the client method
	result, err := client.Business_get_adnetworkanalytics_results(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_adnetworkanalytics_results: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_ads_dataset handles the business_get_ads_dataset tool
func HandleBusiness_get_ads_dataset(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: id_filter
	if val := request.GetString("id_filter", ""); val != "" {
		args["id_filter"] = val
	}

	// Optional: name_filter
	if val := request.GetString("name_filter", ""); val != "" {
		args["name_filter"] = val
	}

	// Optional: sort_by
	if val := request.GetString("sort_by", ""); val != "" {
		args["sort_by"] = val
	}



	// Call the client method
	result, err := client.Business_get_ads_dataset(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_ads_dataset: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_ads_dataset handles the business_post_ads_dataset tool
func HandleBusiness_post_ads_dataset(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: ad_account_id
	if val := request.GetString("ad_account_id", ""); val != "" {
		args["ad_account_id"] = val
	}

	// Optional: app_id
	if val := request.GetString("app_id", ""); val != "" {
		args["app_id"] = val
	}

	// Optional: is_crm
	if val := request.GetBool("is_crm", false); val {
		args["is_crm"] = val
	}

	// Required: name
	name, err := request.RequireString("name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter name: %v", err)), nil
	}
	args["name"] = name



	// Call the client method
	result, err := client.Business_post_ads_dataset(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_ads_dataset: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_ads_reporting_mmm_reports handles the business_get_ads_reporting_mmm_reports tool
func HandleBusiness_get_ads_reporting_mmm_reports(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: filtering
	// array type - using string
	if val := request.GetString("filtering", ""); val != "" {
		args["filtering"] = val
	}



	// Call the client method
	result, err := client.Business_get_ads_reporting_mmm_reports(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_ads_reporting_mmm_reports: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_ads_reporting_mmm_schedulers handles the business_get_ads_reporting_mmm_schedulers tool
func HandleBusiness_get_ads_reporting_mmm_schedulers(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_ads_reporting_mmm_schedulers(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_ads_reporting_mmm_schedulers: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_adspixels handles the business_get_adspixels tool
func HandleBusiness_get_adspixels(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: id_filter
	if val := request.GetString("id_filter", ""); val != "" {
		args["id_filter"] = val
	}

	// Optional: name_filter
	if val := request.GetString("name_filter", ""); val != "" {
		args["name_filter"] = val
	}

	// Optional: sort_by
	if val := request.GetString("sort_by", ""); val != "" {
		args["sort_by"] = val
	}



	// Call the client method
	result, err := client.Business_get_adspixels(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_adspixels: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_adspixels handles the business_post_adspixels tool
func HandleBusiness_post_adspixels(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: is_crm
	if val := request.GetBool("is_crm", false); val {
		args["is_crm"] = val
	}

	// Required: name
	name, err := request.RequireString("name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter name: %v", err)), nil
	}
	args["name"] = name



	// Call the client method
	result, err := client.Business_post_adspixels(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_adspixels: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_delete_agencies handles the business_delete_agencies tool
func HandleBusiness_delete_agencies(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: business
	business, err := request.RequireString("business")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter business: %v", err)), nil
	}
	args["business"] = business



	// Call the client method
	result, err := client.Business_delete_agencies(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_delete_agencies: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_agencies handles the business_get_agencies tool
func HandleBusiness_get_agencies(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_agencies(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_agencies: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_an_placements handles the business_get_an_placements tool
func HandleBusiness_get_an_placements(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_an_placements(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_an_placements: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_block_list_drafts handles the business_post_block_list_drafts tool
func HandleBusiness_post_block_list_drafts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: publisher_urls_file
	publisher_urls_file, err := request.RequireString("publisher_urls_file")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter publisher_urls_file: %v", err)), nil
	}
	args["publisher_urls_file"] = publisher_urls_file



	// Call the client method
	result, err := client.Business_post_block_list_drafts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_block_list_drafts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_bm_review_requests handles the business_post_bm_review_requests tool
func HandleBusiness_post_bm_review_requests(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: business_manager_ids
	business_manager_ids, err := request.RequireString("business_manager_ids")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter business_manager_ids: %v", err)), nil
	}
	args["business_manager_ids"] = business_manager_ids



	// Call the client method
	result, err := client.Business_post_bm_review_requests(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_bm_review_requests: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_business_asset_groups handles the business_get_business_asset_groups tool
func HandleBusiness_get_business_asset_groups(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_business_asset_groups(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_business_asset_groups: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_business_invoices handles the business_get_business_invoices tool
func HandleBusiness_get_business_invoices(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: end_date
	if val := request.GetString("end_date", ""); val != "" {
		args["end_date"] = val
	}

	// Optional: invoice_id
	if val := request.GetString("invoice_id", ""); val != "" {
		args["invoice_id"] = val
	}

	// Optional: issue_end_date
	if val := request.GetString("issue_end_date", ""); val != "" {
		args["issue_end_date"] = val
	}

	// Optional: issue_start_date
	if val := request.GetString("issue_start_date", ""); val != "" {
		args["issue_start_date"] = val
	}

	// Optional: root_id
	if val := request.GetInt("root_id", 0); val != 0 {
		args["root_id"] = val
	}

	// Optional: start_date
	if val := request.GetString("start_date", ""); val != "" {
		args["start_date"] = val
	}

	// Optional: type
	if val := request.GetString("type", ""); val != "" {
		args["type"] = val
	}



	// Call the client method
	result, err := client.Business_get_business_invoices(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_business_invoices: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_business_users handles the business_get_business_users tool
func HandleBusiness_get_business_users(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_business_users(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_business_users: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_business_users handles the business_post_business_users tool
func HandleBusiness_post_business_users(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: email
	email, err := request.RequireString("email")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter email: %v", err)), nil
	}
	args["email"] = email

	// Optional: invited_user_type
	// array type - using string
	if val := request.GetString("invited_user_type", ""); val != "" {
		args["invited_user_type"] = val
	}

	// Optional: role
	if val := request.GetString("role", ""); val != "" {
		args["role"] = val
	}

	// Optional: tasks
	// array type - using string
	if val := request.GetString("tasks", ""); val != "" {
		args["tasks"] = val
	}



	// Call the client method
	result, err := client.Business_post_business_users(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_business_users: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_businessprojects handles the business_get_businessprojects tool
func HandleBusiness_get_businessprojects(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_businessprojects(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_businessprojects: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_claim_custom_conversions handles the business_post_claim_custom_conversions tool
func HandleBusiness_post_claim_custom_conversions(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: custom_conversion_id
	custom_conversion_id, err := request.RequireString("custom_conversion_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter custom_conversion_id: %v", err)), nil
	}
	args["custom_conversion_id"] = custom_conversion_id



	// Call the client method
	result, err := client.Business_post_claim_custom_conversions(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_claim_custom_conversions: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_client_ad_accounts handles the business_get_client_ad_accounts tool
func HandleBusiness_get_client_ad_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: search_query
	if val := request.GetString("search_query", ""); val != "" {
		args["search_query"] = val
	}



	// Call the client method
	result, err := client.Business_get_client_ad_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_client_ad_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_client_apps handles the business_get_client_apps tool
func HandleBusiness_get_client_apps(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_client_apps(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_client_apps: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_client_apps handles the business_post_client_apps tool
func HandleBusiness_post_client_apps(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: app_id
	app_id, err := request.RequireString("app_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter app_id: %v", err)), nil
	}
	args["app_id"] = app_id



	// Call the client method
	result, err := client.Business_post_client_apps(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_client_apps: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_client_offsite_signal_container_business_objects handles the business_get_client_offsite_signal_container_business_objects tool
func HandleBusiness_get_client_offsite_signal_container_business_objects(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_client_offsite_signal_container_business_objects(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_client_offsite_signal_container_business_objects: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_client_pages handles the business_get_client_pages tool
func HandleBusiness_get_client_pages(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_client_pages(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_client_pages: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_client_pages handles the business_post_client_pages tool
func HandleBusiness_post_client_pages(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: page_id
	page_id, err := request.RequireInt("page_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter page_id: %v", err)), nil
	}
	args["page_id"] = page_id

	// Optional: permitted_tasks
	// array type - using string
	if val := request.GetString("permitted_tasks", ""); val != "" {
		args["permitted_tasks"] = val
	}



	// Call the client method
	result, err := client.Business_post_client_pages(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_client_pages: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_client_pixels handles the business_get_client_pixels tool
func HandleBusiness_get_client_pixels(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_client_pixels(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_client_pixels: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_client_product_catalogs handles the business_get_client_product_catalogs tool
func HandleBusiness_get_client_product_catalogs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_client_product_catalogs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_client_product_catalogs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_client_whatsapp_business_accounts handles the business_get_client_whatsapp_business_accounts tool
func HandleBusiness_get_client_whatsapp_business_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_client_whatsapp_business_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_client_whatsapp_business_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_delete_clients handles the business_delete_clients tool
func HandleBusiness_delete_clients(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: business
	business, err := request.RequireString("business")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter business: %v", err)), nil
	}
	args["business"] = business



	// Call the client method
	result, err := client.Business_delete_clients(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_delete_clients: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_clients handles the business_get_clients tool
func HandleBusiness_get_clients(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_clients(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_clients: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_collaborative_ads_collaboration_requests handles the business_get_collaborative_ads_collaboration_requests tool
func HandleBusiness_get_collaborative_ads_collaboration_requests(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: status
	if val := request.GetString("status", ""); val != "" {
		args["status"] = val
	}



	// Call the client method
	result, err := client.Business_get_collaborative_ads_collaboration_requests(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_collaborative_ads_collaboration_requests: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_collaborative_ads_collaboration_requests handles the business_post_collaborative_ads_collaboration_requests tool
func HandleBusiness_post_collaborative_ads_collaboration_requests(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: brands
	brands, err := request.RequireString("brands")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter brands: %v", err)), nil
	}
	args["brands"] = brands

	// Required: contact_email
	contact_email, err := request.RequireString("contact_email")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter contact_email: %v", err)), nil
	}
	args["contact_email"] = contact_email

	// Required: contact_first_name
	contact_first_name, err := request.RequireString("contact_first_name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter contact_first_name: %v", err)), nil
	}
	args["contact_first_name"] = contact_first_name

	// Required: contact_last_name
	contact_last_name, err := request.RequireString("contact_last_name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter contact_last_name: %v", err)), nil
	}
	args["contact_last_name"] = contact_last_name

	// Optional: phone_number
	if val := request.GetString("phone_number", ""); val != "" {
		args["phone_number"] = val
	}

	// Required: receiver_business
	receiver_business, err := request.RequireString("receiver_business")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter receiver_business: %v", err)), nil
	}
	args["receiver_business"] = receiver_business

	// Required: requester_agency_or_brand
	requester_agency_or_brand, err := request.RequireString("requester_agency_or_brand")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter requester_agency_or_brand: %v", err)), nil
	}
	args["requester_agency_or_brand"] = requester_agency_or_brand

	// Optional: sender_client_business
	if val := request.GetString("sender_client_business", ""); val != "" {
		args["sender_client_business"] = val
	}



	// Call the client method
	result, err := client.Business_post_collaborative_ads_collaboration_requests(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_collaborative_ads_collaboration_requests: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_collaborative_ads_suggested_partners handles the business_get_collaborative_ads_suggested_partners tool
func HandleBusiness_get_collaborative_ads_suggested_partners(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_collaborative_ads_suggested_partners(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_collaborative_ads_suggested_partners: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_commerce_merchant_settings handles the business_get_commerce_merchant_settings tool
func HandleBusiness_get_commerce_merchant_settings(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_commerce_merchant_settings(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_commerce_merchant_settings: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_cpas_business_setup_config handles the business_get_cpas_business_setup_config tool
func HandleBusiness_get_cpas_business_setup_config(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_cpas_business_setup_config(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_cpas_business_setup_config: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_cpas_business_setup_config handles the business_post_cpas_business_setup_config tool
func HandleBusiness_post_cpas_business_setup_config(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: accepted_collab_ads_tos
	if val := request.GetBool("accepted_collab_ads_tos", false); val {
		args["accepted_collab_ads_tos"] = val
	}

	// Optional: ad_accounts
	// array type - using string
	if val := request.GetString("ad_accounts", ""); val != "" {
		args["ad_accounts"] = val
	}

	// Optional: business_capabilities_status
	if val := request.GetString("business_capabilities_status", ""); val != "" {
		args["business_capabilities_status"] = val
	}

	// Optional: capabilities_compliance_status
	if val := request.GetString("capabilities_compliance_status", ""); val != "" {
		args["capabilities_compliance_status"] = val
	}



	// Call the client method
	result, err := client.Business_post_cpas_business_setup_config(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_cpas_business_setup_config: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_cpas_merchant_config handles the business_get_cpas_merchant_config tool
func HandleBusiness_get_cpas_merchant_config(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_cpas_merchant_config(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_cpas_merchant_config: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_creative_folders handles the business_post_creative_folders tool
func HandleBusiness_post_creative_folders(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: description
	if val := request.GetString("description", ""); val != "" {
		args["description"] = val
	}

	// Required: name
	name, err := request.RequireString("name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter name: %v", err)), nil
	}
	args["name"] = name

	// Optional: parent_folder_id
	if val := request.GetString("parent_folder_id", ""); val != "" {
		args["parent_folder_id"] = val
	}



	// Call the client method
	result, err := client.Business_post_creative_folders(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_creative_folders: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_creditcards handles the business_get_creditcards tool
func HandleBusiness_get_creditcards(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_creditcards(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_creditcards: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_customconversions handles the business_post_customconversions tool
func HandleBusiness_post_customconversions(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: action_source_type
	if val := request.GetString("action_source_type", ""); val != "" {
		args["action_source_type"] = val
	}

	// Optional: advanced_rule
	if val := request.GetString("advanced_rule", ""); val != "" {
		args["advanced_rule"] = val
	}

	// Required: custom_event_type
	custom_event_type, err := request.RequireString("custom_event_type")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter custom_event_type: %v", err)), nil
	}
	args["custom_event_type"] = custom_event_type

	// Optional: default_conversion_value
	if val := request.GetFloat("default_conversion_value", 0); val != 0 {
		args["default_conversion_value"] = val
	}

	// Optional: description
	if val := request.GetString("description", ""); val != "" {
		args["description"] = val
	}

	// Optional: event_source_id
	if val := request.GetString("event_source_id", ""); val != "" {
		args["event_source_id"] = val
	}

	// Required: name
	name, err := request.RequireString("name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter name: %v", err)), nil
	}
	args["name"] = name

	// Optional: rule
	if val := request.GetString("rule", ""); val != "" {
		args["rule"] = val
	}



	// Call the client method
	result, err := client.Business_post_customconversions(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_customconversions: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_event_source_groups handles the business_get_event_source_groups tool
func HandleBusiness_get_event_source_groups(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_event_source_groups(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_event_source_groups: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_event_source_groups handles the business_post_event_source_groups tool
func HandleBusiness_post_event_source_groups(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: event_sources
	event_sources, err := request.RequireString("event_sources")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter event_sources: %v", err)), nil
	}
	args["event_sources"] = event_sources

	// Required: name
	name, err := request.RequireString("name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter name: %v", err)), nil
	}
	args["name"] = name



	// Call the client method
	result, err := client.Business_post_event_source_groups(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_event_source_groups: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_extendedcreditapplications handles the business_get_extendedcreditapplications tool
func HandleBusiness_get_extendedcreditapplications(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: only_show_pending
	if val := request.GetBool("only_show_pending", false); val {
		args["only_show_pending"] = val
	}



	// Call the client method
	result, err := client.Business_get_extendedcreditapplications(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_extendedcreditapplications: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_extendedcredits handles the business_get_extendedcredits tool
func HandleBusiness_get_extendedcredits(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: order_by_is_owned_credential
	if val := request.GetBool("order_by_is_owned_credential", false); val {
		args["order_by_is_owned_credential"] = val
	}



	// Call the client method
	result, err := client.Business_get_extendedcredits(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_extendedcredits: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_images handles the business_post_images tool
func HandleBusiness_post_images(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: ad_placements_validation_only
	if val := request.GetBool("ad_placements_validation_only", false); val {
		args["ad_placements_validation_only"] = val
	}

	// Optional: bytes
	if val := request.GetString("bytes", ""); val != "" {
		args["bytes"] = val
	}

	// Required: creative_folder_id
	creative_folder_id, err := request.RequireString("creative_folder_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter creative_folder_id: %v", err)), nil
	}
	args["creative_folder_id"] = creative_folder_id

	// Optional: name
	if val := request.GetString("name", ""); val != "" {
		args["name"] = val
	}

	// Optional: validation_ad_placements
	// array type - using string
	if val := request.GetString("validation_ad_placements", ""); val != "" {
		args["validation_ad_placements"] = val
	}



	// Call the client method
	result, err := client.Business_post_images(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_images: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_initiated_audience_sharing_requests handles the business_get_initiated_audience_sharing_requests tool
func HandleBusiness_get_initiated_audience_sharing_requests(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: recipient_id
	if val := request.GetString("recipient_id", ""); val != "" {
		args["recipient_id"] = val
	}

	// Optional: request_status
	if val := request.GetString("request_status", ""); val != "" {
		args["request_status"] = val
	}



	// Call the client method
	result, err := client.Business_get_initiated_audience_sharing_requests(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_initiated_audience_sharing_requests: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_delete_instagram_accounts handles the business_delete_instagram_accounts tool
func HandleBusiness_delete_instagram_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: instagram_account
	instagram_account, err := request.RequireString("instagram_account")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter instagram_account: %v", err)), nil
	}
	args["instagram_account"] = instagram_account



	// Call the client method
	result, err := client.Business_delete_instagram_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_delete_instagram_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_instagram_accounts handles the business_get_instagram_accounts tool
func HandleBusiness_get_instagram_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_instagram_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_instagram_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_instagram_business_accounts handles the business_get_instagram_business_accounts tool
func HandleBusiness_get_instagram_business_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_instagram_business_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_instagram_business_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_delete_managed_businesses handles the business_delete_managed_businesses tool
func HandleBusiness_delete_managed_businesses(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: existing_client_business_id
	existing_client_business_id, err := request.RequireString("existing_client_business_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter existing_client_business_id: %v", err)), nil
	}
	args["existing_client_business_id"] = existing_client_business_id



	// Call the client method
	result, err := client.Business_delete_managed_businesses(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_delete_managed_businesses: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_managed_businesses handles the business_post_managed_businesses tool
func HandleBusiness_post_managed_businesses(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: child_business_external_id
	if val := request.GetString("child_business_external_id", ""); val != "" {
		args["child_business_external_id"] = val
	}

	// Optional: existing_client_business_id
	if val := request.GetString("existing_client_business_id", ""); val != "" {
		args["existing_client_business_id"] = val
	}

	// Optional: name
	if val := request.GetString("name", ""); val != "" {
		args["name"] = val
	}

	// Optional: sales_rep_email
	if val := request.GetString("sales_rep_email", ""); val != "" {
		args["sales_rep_email"] = val
	}

	// Optional: survey_business_type
	if val := request.GetString("survey_business_type", ""); val != "" {
		args["survey_business_type"] = val
	}

	// Optional: survey_num_assets
	if val := request.GetInt("survey_num_assets", 0); val != 0 {
		args["survey_num_assets"] = val
	}

	// Optional: survey_num_people
	if val := request.GetInt("survey_num_people", 0); val != 0 {
		args["survey_num_people"] = val
	}

	// Optional: timezone_id
	if val := request.GetString("timezone_id", ""); val != "" {
		args["timezone_id"] = val
	}

	// Optional: vertical
	if val := request.GetString("vertical", ""); val != "" {
		args["vertical"] = val
	}



	// Call the client method
	result, err := client.Business_post_managed_businesses(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_managed_businesses: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_managed_partner_ads_funding_source_details handles the business_get_managed_partner_ads_funding_source_details tool
func HandleBusiness_get_managed_partner_ads_funding_source_details(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: year_quarter
	if val := request.GetString("year_quarter", ""); val != "" {
		args["year_quarter"] = val
	}



	// Call the client method
	result, err := client.Business_get_managed_partner_ads_funding_source_details(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_managed_partner_ads_funding_source_details: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_managed_partner_business_setup handles the business_post_managed_partner_business_setup tool
func HandleBusiness_post_managed_partner_business_setup(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: active_ad_account_id
	if val := request.GetString("active_ad_account_id", ""); val != "" {
		args["active_ad_account_id"] = val
	}

	// Optional: active_page_id
	if val := request.GetInt("active_page_id", 0); val != 0 {
		args["active_page_id"] = val
	}

	// Optional: partner_facebook_page_url
	if val := request.GetString("partner_facebook_page_url", ""); val != "" {
		args["partner_facebook_page_url"] = val
	}

	// Optional: partner_registration_countries
	// array type - using string
	if val := request.GetString("partner_registration_countries", ""); val != "" {
		args["partner_registration_countries"] = val
	}

	// Optional: seller_email_address
	if val := request.GetString("seller_email_address", ""); val != "" {
		args["seller_email_address"] = val
	}

	// Optional: seller_external_website_url
	if val := request.GetString("seller_external_website_url", ""); val != "" {
		args["seller_external_website_url"] = val
	}

	// Optional: template
	// array type - using string
	if val := request.GetString("template", ""); val != "" {
		args["template"] = val
	}



	// Call the client method
	result, err := client.Business_post_managed_partner_business_setup(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_managed_partner_business_setup: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_delete_managed_partner_businesses handles the business_delete_managed_partner_businesses tool
func HandleBusiness_delete_managed_partner_businesses(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: child_business_external_id
	if val := request.GetString("child_business_external_id", ""); val != "" {
		args["child_business_external_id"] = val
	}

	// Optional: child_business_id
	if val := request.GetString("child_business_id", ""); val != "" {
		args["child_business_id"] = val
	}



	// Call the client method
	result, err := client.Business_delete_managed_partner_businesses(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_delete_managed_partner_businesses: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_managed_partner_businesses handles the business_post_managed_partner_businesses tool
func HandleBusiness_post_managed_partner_businesses(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: ad_account_currency
	if val := request.GetString("ad_account_currency", ""); val != "" {
		args["ad_account_currency"] = val
	}

	// Required: catalog_id
	catalog_id, err := request.RequireString("catalog_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter catalog_id: %v", err)), nil
	}
	args["catalog_id"] = catalog_id

	// Optional: child_business_external_id
	if val := request.GetString("child_business_external_id", ""); val != "" {
		args["child_business_external_id"] = val
	}

	// Optional: credit_limit
	if val := request.GetInt("credit_limit", 0); val != 0 {
		args["credit_limit"] = val
	}

	// Optional: line_of_credit_id
	if val := request.GetString("line_of_credit_id", ""); val != "" {
		args["line_of_credit_id"] = val
	}

	// Required: name
	name, err := request.RequireString("name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter name: %v", err)), nil
	}
	args["name"] = name

	// Optional: no_ad_account
	if val := request.GetBool("no_ad_account", false); val {
		args["no_ad_account"] = val
	}

	// Optional: page_name
	if val := request.GetString("page_name", ""); val != "" {
		args["page_name"] = val
	}

	// Optional: page_profile_image_url
	if val := request.GetString("page_profile_image_url", ""); val != "" {
		args["page_profile_image_url"] = val
	}

	// Optional: partition_type
	if val := request.GetString("partition_type", ""); val != "" {
		args["partition_type"] = val
	}

	// Optional: partner_facebook_page_url
	if val := request.GetString("partner_facebook_page_url", ""); val != "" {
		args["partner_facebook_page_url"] = val
	}

	// Optional: partner_registration_countries
	// array type - using string
	if val := request.GetString("partner_registration_countries", ""); val != "" {
		args["partner_registration_countries"] = val
	}

	// Optional: sales_rep_email
	if val := request.GetString("sales_rep_email", ""); val != "" {
		args["sales_rep_email"] = val
	}

	// Required: seller_external_website_url
	seller_external_website_url, err := request.RequireString("seller_external_website_url")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter seller_external_website_url: %v", err)), nil
	}
	args["seller_external_website_url"] = seller_external_website_url

	// Required: seller_targeting_countries
	seller_targeting_countries, err := request.RequireString("seller_targeting_countries")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter seller_targeting_countries: %v", err)), nil
	}
	args["seller_targeting_countries"] = seller_targeting_countries

	// Optional: skip_partner_page_creation
	if val := request.GetBool("skip_partner_page_creation", false); val {
		args["skip_partner_page_creation"] = val
	}

	// Optional: survey_business_type
	if val := request.GetString("survey_business_type", ""); val != "" {
		args["survey_business_type"] = val
	}

	// Optional: survey_num_assets
	if val := request.GetInt("survey_num_assets", 0); val != 0 {
		args["survey_num_assets"] = val
	}

	// Optional: survey_num_people
	if val := request.GetInt("survey_num_people", 0); val != 0 {
		args["survey_num_people"] = val
	}

	// Optional: timezone_id
	if val := request.GetString("timezone_id", ""); val != "" {
		args["timezone_id"] = val
	}

	// Required: vertical
	vertical, err := request.RequireString("vertical")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter vertical: %v", err)), nil
	}
	args["vertical"] = vertical



	// Call the client method
	result, err := client.Business_post_managed_partner_businesses(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_managed_partner_businesses: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_onboard_partners_to_mm_lite handles the business_post_onboard_partners_to_mm_lite tool
func HandleBusiness_post_onboard_partners_to_mm_lite(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: solution_id
	if val := request.GetString("solution_id", ""); val != "" {
		args["solution_id"] = val
	}



	// Call the client method
	result, err := client.Business_post_onboard_partners_to_mm_lite(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_onboard_partners_to_mm_lite: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_openbridge_configurations handles the business_get_openbridge_configurations tool
func HandleBusiness_get_openbridge_configurations(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_openbridge_configurations(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_openbridge_configurations: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_openbridge_configurations handles the business_post_openbridge_configurations tool
func HandleBusiness_post_openbridge_configurations(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: active
	if val := request.GetBool("active", false); val {
		args["active"] = val
	}

	// Optional: cloud_provider
	if val := request.GetString("cloud_provider", ""); val != "" {
		args["cloud_provider"] = val
	}

	// Optional: cloud_region
	if val := request.GetString("cloud_region", ""); val != "" {
		args["cloud_region"] = val
	}

	// Optional: destination_id
	if val := request.GetString("destination_id", ""); val != "" {
		args["destination_id"] = val
	}

	// Optional: endpoint
	if val := request.GetString("endpoint", ""); val != "" {
		args["endpoint"] = val
	}

	// Optional: fallback_domain
	if val := request.GetString("fallback_domain", ""); val != "" {
		args["fallback_domain"] = val
	}

	// Optional: first_party_domain
	if val := request.GetString("first_party_domain", ""); val != "" {
		args["first_party_domain"] = val
	}

	// Optional: host_business_id
	if val := request.GetInt("host_business_id", 0); val != 0 {
		args["host_business_id"] = val
	}

	// Optional: instance_id
	if val := request.GetString("instance_id", ""); val != "" {
		args["instance_id"] = val
	}

	// Optional: instance_version
	if val := request.GetString("instance_version", ""); val != "" {
		args["instance_version"] = val
	}

	// Optional: is_sgw_instance
	if val := request.GetBool("is_sgw_instance", false); val {
		args["is_sgw_instance"] = val
	}

	// Optional: is_sgw_pixel_from_meta_pixel
	if val := request.GetBool("is_sgw_pixel_from_meta_pixel", false); val {
		args["is_sgw_pixel_from_meta_pixel"] = val
	}

	// Optional: partner_name
	if val := request.GetString("partner_name", ""); val != "" {
		args["partner_name"] = val
	}

	// Required: pixel_id
	pixel_id, err := request.RequireInt("pixel_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter pixel_id: %v", err)), nil
	}
	args["pixel_id"] = pixel_id

	// Optional: sgw_account_id
	if val := request.GetString("sgw_account_id", ""); val != "" {
		args["sgw_account_id"] = val
	}

	// Optional: sgw_instance_url
	if val := request.GetString("sgw_instance_url", ""); val != "" {
		args["sgw_instance_url"] = val
	}

	// Optional: sgw_pixel_id
	if val := request.GetInt("sgw_pixel_id", 0); val != 0 {
		args["sgw_pixel_id"] = val
	}



	// Call the client method
	result, err := client.Business_post_openbridge_configurations(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_openbridge_configurations: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_owned_ad_accounts handles the business_get_owned_ad_accounts tool
func HandleBusiness_get_owned_ad_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: search_query
	if val := request.GetString("search_query", ""); val != "" {
		args["search_query"] = val
	}



	// Call the client method
	result, err := client.Business_get_owned_ad_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_owned_ad_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_owned_ad_accounts handles the business_post_owned_ad_accounts tool
func HandleBusiness_post_owned_ad_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: adaccount_id
	adaccount_id, err := request.RequireString("adaccount_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter adaccount_id: %v", err)), nil
	}
	args["adaccount_id"] = adaccount_id



	// Call the client method
	result, err := client.Business_post_owned_ad_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_owned_ad_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_owned_apps handles the business_get_owned_apps tool
func HandleBusiness_get_owned_apps(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_owned_apps(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_owned_apps: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_owned_apps handles the business_post_owned_apps tool
func HandleBusiness_post_owned_apps(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: app_id
	app_id, err := request.RequireString("app_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter app_id: %v", err)), nil
	}
	args["app_id"] = app_id



	// Call the client method
	result, err := client.Business_post_owned_apps(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_owned_apps: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_delete_owned_businesses handles the business_delete_owned_businesses tool
func HandleBusiness_delete_owned_businesses(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: client_id
	client_id, err := request.RequireString("client_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter client_id: %v", err)), nil
	}
	args["client_id"] = client_id



	// Call the client method
	result, err := client.Business_delete_owned_businesses(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_delete_owned_businesses: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_owned_businesses handles the business_get_owned_businesses tool
func HandleBusiness_get_owned_businesses(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: child_business_external_id
	if val := request.GetString("child_business_external_id", ""); val != "" {
		args["child_business_external_id"] = val
	}

	// Optional: client_user_id
	if val := request.GetInt("client_user_id", 0); val != 0 {
		args["client_user_id"] = val
	}



	// Call the client method
	result, err := client.Business_get_owned_businesses(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_owned_businesses: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_owned_businesses handles the business_post_owned_businesses tool
func HandleBusiness_post_owned_businesses(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: child_business_external_id
	if val := request.GetString("child_business_external_id", ""); val != "" {
		args["child_business_external_id"] = val
	}

	// Required: name
	name, err := request.RequireString("name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter name: %v", err)), nil
	}
	args["name"] = name

	// Optional: page_permitted_tasks
	// array type - using string
	if val := request.GetString("page_permitted_tasks", ""); val != "" {
		args["page_permitted_tasks"] = val
	}

	// Optional: sales_rep_email
	if val := request.GetString("sales_rep_email", ""); val != "" {
		args["sales_rep_email"] = val
	}

	// Optional: shared_page_id
	if val := request.GetString("shared_page_id", ""); val != "" {
		args["shared_page_id"] = val
	}

	// Optional: should_generate_name
	if val := request.GetBool("should_generate_name", false); val {
		args["should_generate_name"] = val
	}

	// Optional: survey_business_type
	if val := request.GetString("survey_business_type", ""); val != "" {
		args["survey_business_type"] = val
	}

	// Optional: survey_num_assets
	if val := request.GetInt("survey_num_assets", 0); val != 0 {
		args["survey_num_assets"] = val
	}

	// Optional: survey_num_people
	if val := request.GetInt("survey_num_people", 0); val != 0 {
		args["survey_num_people"] = val
	}

	// Optional: timezone_id
	if val := request.GetString("timezone_id", ""); val != "" {
		args["timezone_id"] = val
	}

	// Required: vertical
	vertical, err := request.RequireString("vertical")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter vertical: %v", err)), nil
	}
	args["vertical"] = vertical



	// Call the client method
	result, err := client.Business_post_owned_businesses(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_owned_businesses: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_owned_instagram_accounts handles the business_get_owned_instagram_accounts tool
func HandleBusiness_get_owned_instagram_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_owned_instagram_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_owned_instagram_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_owned_offsite_signal_container_business_objects handles the business_get_owned_offsite_signal_container_business_objects tool
func HandleBusiness_get_owned_offsite_signal_container_business_objects(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_owned_offsite_signal_container_business_objects(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_owned_offsite_signal_container_business_objects: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_owned_pages handles the business_get_owned_pages tool
func HandleBusiness_get_owned_pages(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_owned_pages(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_owned_pages: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_owned_pages handles the business_post_owned_pages tool
func HandleBusiness_post_owned_pages(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: code
	if val := request.GetString("code", ""); val != "" {
		args["code"] = val
	}

	// Optional: entry_point
	if val := request.GetString("entry_point", ""); val != "" {
		args["entry_point"] = val
	}

	// Required: page_id
	page_id, err := request.RequireInt("page_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter page_id: %v", err)), nil
	}
	args["page_id"] = page_id



	// Call the client method
	result, err := client.Business_post_owned_pages(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_owned_pages: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_owned_pixels handles the business_get_owned_pixels tool
func HandleBusiness_get_owned_pixels(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_owned_pixels(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_owned_pixels: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_owned_product_catalogs handles the business_get_owned_product_catalogs tool
func HandleBusiness_get_owned_product_catalogs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_owned_product_catalogs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_owned_product_catalogs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_owned_product_catalogs handles the business_post_owned_product_catalogs tool
func HandleBusiness_post_owned_product_catalogs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: additional_vertical_option
	if val := request.GetString("additional_vertical_option", ""); val != "" {
		args["additional_vertical_option"] = val
	}

	// Optional: business_metadata
	if val := request.GetString("business_metadata", ""); val != "" {
		args["business_metadata"] = val
	}

	// Optional: catalog_segment_filter
	// object type - using string
	if val := request.GetString("catalog_segment_filter", ""); val != "" {
		args["catalog_segment_filter"] = val
	}

	// Optional: catalog_segment_product_set_id
	if val := request.GetString("catalog_segment_product_set_id", ""); val != "" {
		args["catalog_segment_product_set_id"] = val
	}

	// Optional: da_display_settings
	// object type - using string
	if val := request.GetString("da_display_settings", ""); val != "" {
		args["da_display_settings"] = val
	}

	// Optional: destination_catalog_settings
	if val := request.GetString("destination_catalog_settings", ""); val != "" {
		args["destination_catalog_settings"] = val
	}

	// Optional: flight_catalog_settings
	if val := request.GetString("flight_catalog_settings", ""); val != "" {
		args["flight_catalog_settings"] = val
	}

	// Required: name
	name, err := request.RequireString("name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter name: %v", err)), nil
	}
	args["name"] = name

	// Optional: parent_catalog_id
	if val := request.GetString("parent_catalog_id", ""); val != "" {
		args["parent_catalog_id"] = val
	}

	// Optional: partner_integration
	if val := request.GetString("partner_integration", ""); val != "" {
		args["partner_integration"] = val
	}

	// Optional: store_catalog_settings
	if val := request.GetString("store_catalog_settings", ""); val != "" {
		args["store_catalog_settings"] = val
	}

	// Optional: vertical
	if val := request.GetString("vertical", ""); val != "" {
		args["vertical"] = val
	}



	// Call the client method
	result, err := client.Business_post_owned_product_catalogs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_owned_product_catalogs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_owned_whatsapp_business_accounts handles the business_get_owned_whatsapp_business_accounts tool
func HandleBusiness_get_owned_whatsapp_business_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_owned_whatsapp_business_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_owned_whatsapp_business_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_delete_pages handles the business_delete_pages tool
func HandleBusiness_delete_pages(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: page_id
	page_id, err := request.RequireInt("page_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter page_id: %v", err)), nil
	}
	args["page_id"] = page_id



	// Call the client method
	result, err := client.Business_delete_pages(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_delete_pages: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_partner_account_linking handles the business_get_partner_account_linking tool
func HandleBusiness_get_partner_account_linking(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_partner_account_linking(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_partner_account_linking: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_partner_premium_options handles the business_post_partner_premium_options tool
func HandleBusiness_post_partner_premium_options(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: catalog_segment_id
	if val := request.GetString("catalog_segment_id", ""); val != "" {
		args["catalog_segment_id"] = val
	}

	// Required: enable_basket_insight
	enable_basket_insight, err := request.RequireBool("enable_basket_insight")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter enable_basket_insight: %v", err)), nil
	}
	args["enable_basket_insight"] = enable_basket_insight

	// Required: enable_extended_audience_retargeting
	enable_extended_audience_retargeting, err := request.RequireBool("enable_extended_audience_retargeting")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter enable_extended_audience_retargeting: %v", err)), nil
	}
	args["enable_extended_audience_retargeting"] = enable_extended_audience_retargeting

	// Required: partner_business_id
	partner_business_id, err := request.RequireString("partner_business_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter partner_business_id: %v", err)), nil
	}
	args["partner_business_id"] = partner_business_id

	// Required: retailer_custom_audience_config
	retailer_custom_audience_config, err := request.RequireString("retailer_custom_audience_config")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter retailer_custom_audience_config: %v", err)), nil
	}
	args["retailer_custom_audience_config"] = retailer_custom_audience_config

	// Optional: vendor_id
	if val := request.GetString("vendor_id", ""); val != "" {
		args["vendor_id"] = val
	}



	// Call the client method
	result, err := client.Business_post_partner_premium_options(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_partner_premium_options: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_passback_attribution_metadata_configs handles the business_get_passback_attribution_metadata_configs tool
func HandleBusiness_get_passback_attribution_metadata_configs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_passback_attribution_metadata_configs(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_passback_attribution_metadata_configs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_pending_client_ad_accounts handles the business_get_pending_client_ad_accounts tool
func HandleBusiness_get_pending_client_ad_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_pending_client_ad_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_pending_client_ad_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_pending_client_apps handles the business_get_pending_client_apps tool
func HandleBusiness_get_pending_client_apps(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_pending_client_apps(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_pending_client_apps: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_pending_client_pages handles the business_get_pending_client_pages tool
func HandleBusiness_get_pending_client_pages(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_pending_client_pages(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_pending_client_pages: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_pending_owned_ad_accounts handles the business_get_pending_owned_ad_accounts tool
func HandleBusiness_get_pending_owned_ad_accounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_pending_owned_ad_accounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_pending_owned_ad_accounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_pending_owned_pages handles the business_get_pending_owned_pages tool
func HandleBusiness_get_pending_owned_pages(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_pending_owned_pages(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_pending_owned_pages: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_pending_shared_offsite_signal_container_business_objects handles the business_get_pending_shared_offsite_signal_container_business_objects tool
func HandleBusiness_get_pending_shared_offsite_signal_container_business_objects(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_pending_shared_offsite_signal_container_business_objects(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_pending_shared_offsite_signal_container_business_objects: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_pending_users handles the business_get_pending_users tool
func HandleBusiness_get_pending_users(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: email
	if val := request.GetString("email", ""); val != "" {
		args["email"] = val
	}



	// Call the client method
	result, err := client.Business_get_pending_users(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_pending_users: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_picture handles the business_get_picture tool
func HandleBusiness_get_picture(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: height
	if val := request.GetInt("height", 0); val != 0 {
		args["height"] = val
	}

	// Optional: redirect
	if val := request.GetBool("redirect", false); val {
		args["redirect"] = val
	}

	// Optional: type
	if val := request.GetString("type", ""); val != "" {
		args["type"] = val
	}

	// Optional: width
	if val := request.GetInt("width", 0); val != 0 {
		args["width"] = val
	}



	// Call the client method
	result, err := client.Business_get_picture(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_picture: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_pixel_tos handles the business_post_pixel_tos tool
func HandleBusiness_post_pixel_tos(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_post_pixel_tos(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_pixel_tos: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_preverified_numbers handles the business_get_preverified_numbers tool
func HandleBusiness_get_preverified_numbers(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: code_verification_status
	if val := request.GetString("code_verification_status", ""); val != "" {
		args["code_verification_status"] = val
	}

	// Optional: phone_number
	if val := request.GetString("phone_number", ""); val != "" {
		args["phone_number"] = val
	}



	// Call the client method
	result, err := client.Business_get_preverified_numbers(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_preverified_numbers: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_received_audience_sharing_requests handles the business_get_received_audience_sharing_requests tool
func HandleBusiness_get_received_audience_sharing_requests(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: initiator_id
	if val := request.GetString("initiator_id", ""); val != "" {
		args["initiator_id"] = val
	}

	// Optional: request_status
	if val := request.GetString("request_status", ""); val != "" {
		args["request_status"] = val
	}



	// Call the client method
	result, err := client.Business_get_received_audience_sharing_requests(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_received_audience_sharing_requests: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_reseller_guidances handles the business_get_reseller_guidances tool
func HandleBusiness_get_reseller_guidances(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_reseller_guidances(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_reseller_guidances: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_self_certified_whatsapp_business_submissions handles the business_get_self_certified_whatsapp_business_submissions tool
func HandleBusiness_get_self_certified_whatsapp_business_submissions(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: end_business_id
	if val := request.GetString("end_business_id", ""); val != "" {
		args["end_business_id"] = val
	}



	// Call the client method
	result, err := client.Business_get_self_certified_whatsapp_business_submissions(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_self_certified_whatsapp_business_submissions: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_self_certify_whatsapp_business handles the business_post_self_certify_whatsapp_business tool
func HandleBusiness_post_self_certify_whatsapp_business(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: average_monthly_revenue_spend_with_partner
	if val := request.GetString("average_monthly_revenue_spend_with_partner", ""); val != "" {
		args["average_monthly_revenue_spend_with_partner"] = val
	}

	// Required: business_documents
	business_documents, err := request.RequireString("business_documents")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter business_documents: %v", err)), nil
	}
	args["business_documents"] = business_documents

	// Optional: business_vertical
	if val := request.GetString("business_vertical", ""); val != "" {
		args["business_vertical"] = val
	}

	// Optional: end_business_address
	if val := request.GetString("end_business_address", ""); val != "" {
		args["end_business_address"] = val
	}

	// Required: end_business_id
	end_business_id, err := request.RequireString("end_business_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter end_business_id: %v", err)), nil
	}
	args["end_business_id"] = end_business_id

	// Optional: end_business_legal_name
	if val := request.GetString("end_business_legal_name", ""); val != "" {
		args["end_business_legal_name"] = val
	}

	// Optional: end_business_trade_names
	// array type - using string
	if val := request.GetString("end_business_trade_names", ""); val != "" {
		args["end_business_trade_names"] = val
	}

	// Optional: end_business_website
	if val := request.GetString("end_business_website", ""); val != "" {
		args["end_business_website"] = val
	}

	// Optional: num_billing_cycles_with_partner
	if val := request.GetInt("num_billing_cycles_with_partner", 0); val != 0 {
		args["num_billing_cycles_with_partner"] = val
	}



	// Call the client method
	result, err := client.Business_post_self_certify_whatsapp_business(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_self_certify_whatsapp_business: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_setup_managed_partner_adaccounts handles the business_post_setup_managed_partner_adaccounts tool
func HandleBusiness_post_setup_managed_partner_adaccounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: credit_line_id
	credit_line_id, err := request.RequireString("credit_line_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter credit_line_id: %v", err)), nil
	}
	args["credit_line_id"] = credit_line_id

	// Required: marketplace_business_id
	marketplace_business_id, err := request.RequireString("marketplace_business_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter marketplace_business_id: %v", err)), nil
	}
	args["marketplace_business_id"] = marketplace_business_id

	// Required: subvertical_v2
	subvertical_v2, err := request.RequireString("subvertical_v2")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter subvertical_v2: %v", err)), nil
	}
	args["subvertical_v2"] = subvertical_v2

	// Required: vendor_id
	vendor_id, err := request.RequireString("vendor_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter vendor_id: %v", err)), nil
	}
	args["vendor_id"] = vendor_id

	// Required: vertical_v2
	vertical_v2, err := request.RequireString("vertical_v2")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter vertical_v2: %v", err)), nil
	}
	args["vertical_v2"] = vertical_v2



	// Call the client method
	result, err := client.Business_post_setup_managed_partner_adaccounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_setup_managed_partner_adaccounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_delete_share_preverified_numbers handles the business_delete_share_preverified_numbers tool
func HandleBusiness_delete_share_preverified_numbers(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: partner_business_id
	partner_business_id, err := request.RequireString("partner_business_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter partner_business_id: %v", err)), nil
	}
	args["partner_business_id"] = partner_business_id

	// Required: preverified_id
	preverified_id, err := request.RequireString("preverified_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter preverified_id: %v", err)), nil
	}
	args["preverified_id"] = preverified_id



	// Call the client method
	result, err := client.Business_delete_share_preverified_numbers(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_delete_share_preverified_numbers: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_share_preverified_numbers handles the business_post_share_preverified_numbers tool
func HandleBusiness_post_share_preverified_numbers(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: partner_business_id
	partner_business_id, err := request.RequireString("partner_business_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter partner_business_id: %v", err)), nil
	}
	args["partner_business_id"] = partner_business_id

	// Required: preverified_id
	preverified_id, err := request.RequireString("preverified_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter preverified_id: %v", err)), nil
	}
	args["preverified_id"] = preverified_id



	// Call the client method
	result, err := client.Business_post_share_preverified_numbers(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_share_preverified_numbers: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_system_user_access_tokens handles the business_post_system_user_access_tokens tool
func HandleBusiness_post_system_user_access_tokens(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: asset
	// array type - using string
	if val := request.GetString("asset", ""); val != "" {
		args["asset"] = val
	}

	// Optional: fetch_only
	if val := request.GetBool("fetch_only", false); val {
		args["fetch_only"] = val
	}

	// Optional: scope
	// array type - using string
	if val := request.GetString("scope", ""); val != "" {
		args["scope"] = val
	}

	// Optional: set_token_expires_in_60_days
	if val := request.GetBool("set_token_expires_in_60_days", false); val {
		args["set_token_expires_in_60_days"] = val
	}

	// Optional: system_user_id
	if val := request.GetInt("system_user_id", 0); val != 0 {
		args["system_user_id"] = val
	}



	// Call the client method
	result, err := client.Business_post_system_user_access_tokens(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_system_user_access_tokens: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_system_users handles the business_get_system_users tool
func HandleBusiness_get_system_users(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_system_users(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_system_users: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_system_users handles the business_post_system_users tool
func HandleBusiness_post_system_users(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: name
	name, err := request.RequireString("name")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter name: %v", err)), nil
	}
	args["name"] = name

	// Optional: role
	if val := request.GetString("role", ""); val != "" {
		args["role"] = val
	}

	// Optional: system_user_id
	if val := request.GetInt("system_user_id", 0); val != 0 {
		args["system_user_id"] = val
	}



	// Call the client method
	result, err := client.Business_post_system_users(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_system_users: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_third_party_measurement_report_dataset handles the business_get_third_party_measurement_report_dataset tool
func HandleBusiness_get_third_party_measurement_report_dataset(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_third_party_measurement_report_dataset(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_third_party_measurement_report_dataset: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_videos handles the business_post_videos tool
func HandleBusiness_post_videos(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: ad_placements_validation_only
	if val := request.GetBool("ad_placements_validation_only", false); val {
		args["ad_placements_validation_only"] = val
	}

	// Optional: application_id
	if val := request.GetString("application_id", ""); val != "" {
		args["application_id"] = val
	}

	// Optional: asked_fun_fact_prompt_id
	if val := request.GetInt("asked_fun_fact_prompt_id", 0); val != 0 {
		args["asked_fun_fact_prompt_id"] = val
	}

	// Optional: audio_story_wave_animation_handle
	if val := request.GetString("audio_story_wave_animation_handle", ""); val != "" {
		args["audio_story_wave_animation_handle"] = val
	}

	// Optional: chunk_session_id
	if val := request.GetString("chunk_session_id", ""); val != "" {
		args["chunk_session_id"] = val
	}

	// Optional: composer_entry_picker
	if val := request.GetString("composer_entry_picker", ""); val != "" {
		args["composer_entry_picker"] = val
	}

	// Optional: composer_entry_point
	if val := request.GetString("composer_entry_point", ""); val != "" {
		args["composer_entry_point"] = val
	}

	// Optional: composer_entry_time
	if val := request.GetInt("composer_entry_time", 0); val != 0 {
		args["composer_entry_time"] = val
	}

	// Optional: composer_session_events_log
	if val := request.GetString("composer_session_events_log", ""); val != "" {
		args["composer_session_events_log"] = val
	}

	// Optional: composer_session_id
	if val := request.GetString("composer_session_id", ""); val != "" {
		args["composer_session_id"] = val
	}

	// Optional: composer_source_surface
	if val := request.GetString("composer_source_surface", ""); val != "" {
		args["composer_source_surface"] = val
	}

	// Optional: composer_type
	if val := request.GetString("composer_type", ""); val != "" {
		args["composer_type"] = val
	}

	// Optional: container_type
	if val := request.GetString("container_type", ""); val != "" {
		args["container_type"] = val
	}

	// Optional: content_category
	if val := request.GetString("content_category", ""); val != "" {
		args["content_category"] = val
	}

	// Required: creative_folder_id
	creative_folder_id, err := request.RequireString("creative_folder_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter creative_folder_id: %v", err)), nil
	}
	args["creative_folder_id"] = creative_folder_id

	// Optional: creative_tools
	if val := request.GetString("creative_tools", ""); val != "" {
		args["creative_tools"] = val
	}

	// Optional: description
	if val := request.GetString("description", ""); val != "" {
		args["description"] = val
	}

	// Optional: embeddable
	if val := request.GetBool("embeddable", false); val {
		args["embeddable"] = val
	}

	// Optional: end_offset
	if val := request.GetInt("end_offset", 0); val != 0 {
		args["end_offset"] = val
	}

	// Optional: fbuploader_video_file_chunk
	if val := request.GetString("fbuploader_video_file_chunk", ""); val != "" {
		args["fbuploader_video_file_chunk"] = val
	}

	// Optional: file_size
	if val := request.GetInt("file_size", 0); val != 0 {
		args["file_size"] = val
	}

	// Optional: file_url
	if val := request.GetString("file_url", ""); val != "" {
		args["file_url"] = val
	}

	// Optional: fisheye_video_cropped
	if val := request.GetBool("fisheye_video_cropped", false); val {
		args["fisheye_video_cropped"] = val
	}

	// Optional: formatting
	if val := request.GetString("formatting", ""); val != "" {
		args["formatting"] = val
	}

	// Optional: fov
	if val := request.GetInt("fov", 0); val != 0 {
		args["fov"] = val
	}

	// Optional: front_z_rotation
	if val := request.GetFloat("front_z_rotation", 0); val != 0 {
		args["front_z_rotation"] = val
	}

	// Optional: fun_fact_prompt_id
	if val := request.GetString("fun_fact_prompt_id", ""); val != "" {
		args["fun_fact_prompt_id"] = val
	}

	// Optional: fun_fact_toastee_id
	if val := request.GetInt("fun_fact_toastee_id", 0); val != 0 {
		args["fun_fact_toastee_id"] = val
	}

	// Optional: guide
	// array type - using string
	if val := request.GetString("guide", ""); val != "" {
		args["guide"] = val
	}

	// Optional: guide_enabled
	if val := request.GetBool("guide_enabled", false); val {
		args["guide_enabled"] = val
	}

	// Optional: initial_heading
	if val := request.GetInt("initial_heading", 0); val != 0 {
		args["initial_heading"] = val
	}

	// Optional: initial_pitch
	if val := request.GetInt("initial_pitch", 0); val != 0 {
		args["initial_pitch"] = val
	}

	// Optional: instant_game_entry_point_data
	if val := request.GetString("instant_game_entry_point_data", ""); val != "" {
		args["instant_game_entry_point_data"] = val
	}

	// Optional: is_boost_intended
	if val := request.GetBool("is_boost_intended", false); val {
		args["is_boost_intended"] = val
	}

	// Optional: is_group_linking_post
	if val := request.GetBool("is_group_linking_post", false); val {
		args["is_group_linking_post"] = val
	}

	// Optional: is_partnership_ad
	if val := request.GetBool("is_partnership_ad", false); val {
		args["is_partnership_ad"] = val
	}

	// Optional: is_voice_clip
	if val := request.GetBool("is_voice_clip", false); val {
		args["is_voice_clip"] = val
	}

	// Optional: location_source_id
	if val := request.GetString("location_source_id", ""); val != "" {
		args["location_source_id"] = val
	}

	// Optional: og_action_type_id
	if val := request.GetString("og_action_type_id", ""); val != "" {
		args["og_action_type_id"] = val
	}

	// Optional: og_icon_id
	if val := request.GetString("og_icon_id", ""); val != "" {
		args["og_icon_id"] = val
	}

	// Optional: og_object_id
	if val := request.GetString("og_object_id", ""); val != "" {
		args["og_object_id"] = val
	}

	// Optional: og_phrase
	if val := request.GetString("og_phrase", ""); val != "" {
		args["og_phrase"] = val
	}

	// Optional: og_suggestion_mechanism
	if val := request.GetString("og_suggestion_mechanism", ""); val != "" {
		args["og_suggestion_mechanism"] = val
	}

	// Optional: original_fov
	if val := request.GetInt("original_fov", 0); val != 0 {
		args["original_fov"] = val
	}

	// Optional: original_projection_type
	if val := request.GetString("original_projection_type", ""); val != "" {
		args["original_projection_type"] = val
	}

	// Optional: partnership_ad_ad_code
	if val := request.GetString("partnership_ad_ad_code", ""); val != "" {
		args["partnership_ad_ad_code"] = val
	}

	// Optional: publish_event_id
	if val := request.GetInt("publish_event_id", 0); val != 0 {
		args["publish_event_id"] = val
	}

	// Optional: referenced_sticker_id
	if val := request.GetString("referenced_sticker_id", ""); val != "" {
		args["referenced_sticker_id"] = val
	}

	// Optional: replace_video_id
	if val := request.GetString("replace_video_id", ""); val != "" {
		args["replace_video_id"] = val
	}

	// Optional: slideshow_spec
	if val := request.GetString("slideshow_spec", ""); val != "" {
		args["slideshow_spec"] = val
	}

	// Optional: source
	if val := request.GetString("source", ""); val != "" {
		args["source"] = val
	}

	// Optional: source_instagram_media_id
	if val := request.GetString("source_instagram_media_id", ""); val != "" {
		args["source_instagram_media_id"] = val
	}

	// Optional: spherical
	if val := request.GetBool("spherical", false); val {
		args["spherical"] = val
	}

	// Optional: start_offset
	if val := request.GetInt("start_offset", 0); val != 0 {
		args["start_offset"] = val
	}

	// Optional: swap_mode
	if val := request.GetString("swap_mode", ""); val != "" {
		args["swap_mode"] = val
	}

	// Optional: text_format_metadata
	if val := request.GetString("text_format_metadata", ""); val != "" {
		args["text_format_metadata"] = val
	}

	// Optional: thumb
	if val := request.GetString("thumb", ""); val != "" {
		args["thumb"] = val
	}

	// Optional: time_since_original_post
	if val := request.GetInt("time_since_original_post", 0); val != 0 {
		args["time_since_original_post"] = val
	}

	// Optional: title
	if val := request.GetString("title", ""); val != "" {
		args["title"] = val
	}

	// Optional: transcode_setting_properties
	if val := request.GetString("transcode_setting_properties", ""); val != "" {
		args["transcode_setting_properties"] = val
	}

	// Optional: unpublished_content_type
	if val := request.GetString("unpublished_content_type", ""); val != "" {
		args["unpublished_content_type"] = val
	}

	// Optional: upload_phase
	if val := request.GetString("upload_phase", ""); val != "" {
		args["upload_phase"] = val
	}

	// Optional: upload_session_id
	if val := request.GetString("upload_session_id", ""); val != "" {
		args["upload_session_id"] = val
	}

	// Optional: upload_setting_properties
	if val := request.GetString("upload_setting_properties", ""); val != "" {
		args["upload_setting_properties"] = val
	}

	// Optional: validation_ad_placements
	// array type - using string
	if val := request.GetString("validation_ad_placements", ""); val != "" {
		args["validation_ad_placements"] = val
	}

	// Optional: video_file_chunk
	if val := request.GetString("video_file_chunk", ""); val != "" {
		args["video_file_chunk"] = val
	}

	// Optional: video_id_original
	if val := request.GetString("video_id_original", ""); val != "" {
		args["video_id_original"] = val
	}

	// Optional: video_start_time_ms
	if val := request.GetInt("video_start_time_ms", 0); val != 0 {
		args["video_start_time_ms"] = val
	}

	// Optional: waterfall_id
	if val := request.GetString("waterfall_id", ""); val != "" {
		args["waterfall_id"] = val
	}



	// Call the client method
	result, err := client.Business_post_videos(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_videos: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_get_ handles the business_get_ tool
func HandleBusiness_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Business_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleBusiness_post_ handles the business_post_ tool
func HandleBusiness_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewBusinessClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: entry_point
	if val := request.GetString("entry_point", ""); val != "" {
		args["entry_point"] = val
	}

	// Optional: name
	if val := request.GetString("name", ""); val != "" {
		args["name"] = val
	}

	// Optional: primary_page
	if val := request.GetString("primary_page", ""); val != "" {
		args["primary_page"] = val
	}

	// Optional: timezone_id
	if val := request.GetInt("timezone_id", 0); val != 0 {
		args["timezone_id"] = val
	}

	// Optional: two_factor_type
	if val := request.GetString("two_factor_type", ""); val != "" {
		args["two_factor_type"] = val
	}

	// Optional: vertical
	if val := request.GetString("vertical", ""); val != "" {
		args["vertical"] = val
	}



	// Call the client method
	result, err := client.Business_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute business_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

