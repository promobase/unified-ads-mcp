// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetProductGroupTools returns MCP tools for ProductGroup
func GetProductGroupTools() []mcp.Tool {
	var tools []mcp.Tool


	// productgroup_get_products tool
	// Available fields for ProductItem: additional_image_cdn_urls, additional_image_urls, additional_variant_attributes, age_group, applinks, availability, brand, bundle_items, bundle_retailer_ids, capability_to_review_status, category, category_specific_fields, color, commerce_insights, condition, currency, custom_data, custom_label_0, custom_label_1, custom_label_2, custom_label_3, custom_label_4, custom_number_0, custom_number_1, custom_number_2, custom_number_3, custom_number_4, description, errors, expiration_date, fb_product_category, gender, generated_background_images, generated_background_images_ad_usage, gtin, id, image_cdn_urls, image_fetch_status, image_url, images, importer_address, importer_name, invalidation_errors, inventory, is_bundle_hero, manufacturer_info, manufacturer_part_number, marked_for_product_launch, material, mobile_link, name, ordering_index, origin_country, parent_product_id, pattern, post_conversion_signal_based_enforcement_appeal_eligibility, price, product_catalog, product_feed, product_group, product_local_info, product_relationship, product_type, quantity_to_sell_on_facebook, retailer_id, retailer_product_group_id, review_rejection_reasons, review_status, sale_price, sale_price_end_date, sale_price_start_date, shipping_weight_unit, shipping_weight_value, short_description, size, start_date, tags, url, vendor_id, video_fetch_status, videos, visibility, wa_compliance_category
	productgroup_get_productsTool := mcp.NewTool("productgroup_get_products",
		mcp.WithDescription("GET products for ProductGroup"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for ProductItem objects. Available fields: additional_image_cdn_urls, additional_image_urls, additional_variant_attributes, age_group, applinks, availability, brand, bundle_items, bundle_retailer_ids, capability_to_review_status, category, category_specific_fields, color, commerce_insights, condition (and 68 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, productgroup_get_productsTool)

	// productgroup_post_products tool
	// Params object accepts: additional_image_urls (list<string>), additional_variant_attributes (map), age_group (productgroupproducts_age_group_enum_param), android_app_name (string), android_class (string), android_package (string), android_url (string), availability (productgroupproducts_availability_enum_param), brand (string), category (string), checkout_url (string), color (string), commerce_tax_category (productgroupproducts_commerce_tax_category_enum_param), condition (productgroupproducts_condition_enum_param), currency (string), custom_data (map), custom_label_0 (string), custom_label_1 (string), custom_label_2 (string), custom_label_3 (string), custom_label_4 (string), custom_number_0 (unsigned int), custom_number_1 (unsigned int), custom_number_2 (unsigned int), custom_number_3 (unsigned int), custom_number_4 (unsigned int), description (string), expiration_date (string), fb_product_category (string), gender (productgroupproducts_gender_enum_param), gtin (string), image_url (string), inventory (unsigned int), ios_app_name (string), ios_app_store_id (unsigned int), ios_url (string), ipad_app_name (string), ipad_app_store_id (unsigned int), ipad_url (string), iphone_app_name (string), iphone_app_store_id (unsigned int), iphone_url (string), launch_date (string), manufacturer_part_number (string), marked_for_product_launch (productgroupproducts_marked_for_product_launch_enum_param), material (string), mobile_link (string), name (string), ordering_index (unsigned int), pattern (string), price (unsigned int), product_priority_0 (float), product_priority_1 (float), product_priority_2 (float), product_priority_3 (float), product_priority_4 (float), product_type (string), quantity_to_sell_on_facebook (unsigned int), retailer_id (string), return_policy_days (unsigned int), sale_price (unsigned int), sale_price_end_date (datetime), sale_price_start_date (datetime), short_description (string), size (string), start_date (string), url (string), visibility (productgroupproducts_visibility_enum_param), windows_phone_app_id (string), windows_phone_app_name (string), windows_phone_url (string)
	productgroup_post_productsTool := mcp.NewTool("productgroup_post_products",
		mcp.WithDescription("POST products for ProductGroup"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"additional_image_urls": map[string]any{
					"type": "array",
					"description": "additional_image_urls parameter",
					"items": map[string]any{"type": "string"},
				},
				"additional_variant_attributes": map[string]any{
					"type": "object",
					"description": "additional_variant_attributes parameter",
				},
				"age_group": map[string]any{
					"type": "string",
					"description": "age_group parameter",
					"enum": []string{ "adult", "all ages", "infant", "kids", "newborn", "teen", "toddler" },
				},
				"android_app_name": map[string]any{
					"type": "string",
					"description": "android_app_name parameter",
				},
				"android_class": map[string]any{
					"type": "string",
					"description": "android_class parameter",
				},
				"android_package": map[string]any{
					"type": "string",
					"description": "android_package parameter",
				},
				"android_url": map[string]any{
					"type": "string",
					"description": "android_url parameter",
				},
				"availability": map[string]any{
					"type": "string",
					"description": "availability parameter",
					"enum": []string{ "available for order", "discontinued", "in stock", "mark_as_sold", "out of stock", "pending", "preorder" },
				},
				"brand": map[string]any{
					"type": "string",
					"description": "brand parameter",
				},
				"category": map[string]any{
					"type": "string",
					"description": "category parameter",
				},
				"checkout_url": map[string]any{
					"type": "string",
					"description": "checkout_url parameter",
				},
				"color": map[string]any{
					"type": "string",
					"description": "color parameter",
				},
				"commerce_tax_category": map[string]any{
					"type": "string",
					"description": "commerce_tax_category parameter",
					"enum": []string{ "FB_ANIMAL", "FB_ANIMAL_SUPP", "FB_APRL", "FB_APRL_ACCESSORIES", "FB_APRL_ATHL_UNIF", "FB_APRL_CASES", "FB_APRL_CLOTHING", "FB_APRL_COSTUME", "FB_APRL_CSTM", "FB_APRL_FORMAL", "FB_APRL_HANDBAG", "FB_APRL_JEWELRY", "FB_APRL_SHOE", "FB_APRL_SHOE_ACC", "FB_APRL_SWIM", "FB_APRL_SWIM_CHIL", "FB_APRL_SWIM_CVR", "FB_ARTS", "FB_ARTS_HOBBY", "FB_ARTS_PARTY", "FB_ARTS_PARTY_GIFT_CARD", "FB_ARTS_TICKET", "FB_BABY", "FB_BABY_BATH", "FB_BABY_BLANKET", "FB_BABY_DIAPER", "FB_BABY_GIFT_SET", "FB_BABY_HEALTH", "FB_BABY_NURSING", "FB_BABY_POTTY_TRN", "FB_BABY_SAFE", "FB_BABY_TOYS", "FB_BABY_TRANSPORT", "FB_BABY_TRANSPORT_ACC", "FB_BAGS", "FB_BAGS_BKPK", "FB_BAGS_BOXES", "FB_BAGS_BRFCS", "FB_BAGS_CSMT_BAG", "FB_BAGS_DFFL", "FB_BAGS_DIPR", "FB_BAGS_FNNY", "FB_BAGS_GRMT", "FB_BAGS_LUGG", "FB_BAGS_LUG_ACC", "FB_BAGS_MSGR", "FB_BAGS_TOTE", "FB_BAGS_TRN_CAS", "FB_BLDG", "FB_BLDG_ACC", "FB_BLDG_CNSMB", "FB_BLDG_FENCE", "FB_BLDG_FUEL_TNK", "FB_BLDG_HT_VNT", "FB_BLDG_LOCK", "FB_BLDG_MATRL", "FB_BLDG_PLMB", "FB_BLDG_PUMP", "FB_BLDG_PWRS", "FB_BLDG_STR_TANK", "FB_BLDG_S_ENG", "FB_BLDG_TL_ACC", "FB_BLDG_TOOL", "FB_BUSIND", "FB_BUSIND_ADVERTISING", "FB_BUSIND_AGRICULTURE", "FB_BUSIND_AUTOMATION", "FB_BUSIND_HEAVY_MACH", "FB_BUSIND_LAB", "FB_BUSIND_MEDICAL", "FB_BUSIND_RETAIL", "FB_BUSIND_SANITARY_CT", "FB_BUSIND_SIGN", "FB_BUSIND_STORAGE", "FB_BUSIND_STORAGE_ACC", "FB_BUSIND_WORK_GEAR", "FB_CAMERA_ACC", "FB_CAMERA_CAMERA", "FB_CAMERA_OPTIC", "FB_CAMERA_OPTICS", "FB_CAMERA_PHOTO", "FB_ELEC", "FB_ELEC_ACC", "FB_ELEC_ARCDADE", "FB_ELEC_AUDIO", "FB_ELEC_CIRCUIT", "FB_ELEC_COMM", "FB_ELEC_COMPUTER", "FB_ELEC_GPS_ACC", "FB_ELEC_GPS_NAV", "FB_ELEC_GPS_TRK", "FB_ELEC_MARINE", "FB_ELEC_NETWORK", "FB_ELEC_PART", "FB_ELEC_PRINT", "FB_ELEC_RADAR", "FB_ELEC_SFTWR", "FB_ELEC_SPEED_RDR", "FB_ELEC_TELEVISION", "FB_ELEC_TOLL", "FB_ELEC_VIDEO", "FB_ELEC_VID_GM_ACC", "FB_ELEC_VID_GM_CNSL", "FB_FOOD", "FB_FURN", "FB_FURN_BABY", "FB_FURN_BENCH", "FB_FURN_CART", "FB_FURN_CHAIR", "FB_FURN_CHAIR_ACC", "FB_FURN_DIVIDE", "FB_FURN_DIVIDE_ACC", "FB_FURN_ENT_CTR", "FB_FURN_FUTN", "FB_FURN_FUTN_PAD", "FB_FURN_OFFICE", "FB_FURN_OFFICE_ACC", "FB_FURN_OTTO", "FB_FURN_OUTDOOR", "FB_FURN_OUTDOOR_ACC", "FB_FURN_SETS", "FB_FURN_SHELVE_ACC", "FB_FURN_SHLF", "FB_FURN_SOFA", "FB_FURN_SOFA_ACC", "FB_FURN_STORAGE", "FB_FURN_TABL", "FB_FURN_TABL_ACC", "FB_GENERIC_TAXABLE", "FB_HLTH", "FB_HLTH_HLTH", "FB_HLTH_JWL_CR", "FB_HLTH_LILP_BLM", "FB_HLTH_LTN_SPF", "FB_HLTH_PRSL_CR", "FB_HLTH_SKN_CR", "FB_HMGN", "FB_HMGN_BATH", "FB_HMGN_DCOR", "FB_HMGN_EMGY", "FB_HMGN_FPLC", "FB_HMGN_FPLC_ACC", "FB_HMGN_GS_SFT", "FB_HMGN_HS_ACC", "FB_HMGN_HS_APP", "FB_HMGN_HS_SPL", "FB_HMGN_KTCN", "FB_HMGN_LAWN", "FB_HMGN_LGHT", "FB_HMGN_LINN", "FB_HMGN_LT_ACC", "FB_HMGN_OTDR", "FB_HMGN_POOL", "FB_HMGN_SCTY", "FB_HMGN_SMK_ACC", "FB_HMGN_UMBR", "FB_HMGN_UMBR_ACC", "FB_MDIA", "FB_MDIA_BOOK", "FB_MDIA_DVDS", "FB_MDIA_MAG", "FB_MDIA_MANL", "FB_MDIA_MUSC", "FB_MDIA_PRJ_PLN", "FB_MDIA_SHT_MUS", "FB_OFFC", "FB_OFFC_BKAC", "FB_OFFC_CRTS", "FB_OFFC_DSKP", "FB_OFFC_EQIP", "FB_OFFC_FLNG", "FB_OFFC_GNRL", "FB_OFFC_INSTM", "FB_OFFC_LP_DSK", "FB_OFFC_MATS", "FB_OFFC_NM_PLT", "FB_OFFC_PPR_HNDL", "FB_OFFC_PRSNT_SPL", "FB_OFFC_SEALR", "FB_OFFC_SHIP_SPL", "FB_RLGN", "FB_RLGN_CMNY", "FB_RLGN_ITEM", "FB_RLGN_WEDD", "FB_SFTWR", "FB_SFWR_CMPTR", "FB_SFWR_DGTL_GD", "FB_SFWR_GAME", "FB_SHIPPING", "FB_SPOR", "FB_SPORT_ATHL", "FB_SPORT_ATHL_CLTH", "FB_SPORT_ATHL_SHOE", "FB_SPORT_ATHL_SPRT", "FB_SPORT_EXRCS", "FB_SPORT_INDR_GM", "FB_SPORT_OTDR_GM", "FB_TOYS", "FB_TOYS_EQIP", "FB_TOYS_GAME", "FB_TOYS_PZZL", "FB_TOYS_TMRS", "FB_TOYS_TOYS", "FB_VEHI", "FB_VEHI_PART" },
				},
				"condition": map[string]any{
					"type": "string",
					"description": "condition parameter",
					"enum": []string{ "cpo", "new", "open_box_new", "refurbished", "used", "used_fair", "used_good", "used_like_new" },
				},
				"currency": map[string]any{
					"type": "string",
					"description": "currency parameter",
					"required": true,
				},
				"custom_data": map[string]any{
					"type": "object",
					"description": "custom_data parameter",
				},
				"custom_label_0": map[string]any{
					"type": "string",
					"description": "custom_label_0 parameter",
				},
				"custom_label_1": map[string]any{
					"type": "string",
					"description": "custom_label_1 parameter",
				},
				"custom_label_2": map[string]any{
					"type": "string",
					"description": "custom_label_2 parameter",
				},
				"custom_label_3": map[string]any{
					"type": "string",
					"description": "custom_label_3 parameter",
				},
				"custom_label_4": map[string]any{
					"type": "string",
					"description": "custom_label_4 parameter",
				},
				"custom_number_0": map[string]any{
					"type": "integer",
					"description": "custom_number_0 parameter",
				},
				"custom_number_1": map[string]any{
					"type": "integer",
					"description": "custom_number_1 parameter",
				},
				"custom_number_2": map[string]any{
					"type": "integer",
					"description": "custom_number_2 parameter",
				},
				"custom_number_3": map[string]any{
					"type": "integer",
					"description": "custom_number_3 parameter",
				},
				"custom_number_4": map[string]any{
					"type": "integer",
					"description": "custom_number_4 parameter",
				},
				"description": map[string]any{
					"type": "string",
					"description": "description parameter",
				},
				"expiration_date": map[string]any{
					"type": "string",
					"description": "expiration_date parameter",
				},
				"fb_product_category": map[string]any{
					"type": "string",
					"description": "fb_product_category parameter",
				},
				"gender": map[string]any{
					"type": "string",
					"description": "gender parameter",
					"enum": []string{ "female", "male", "unisex" },
				},
				"gtin": map[string]any{
					"type": "string",
					"description": "gtin parameter",
				},
				"image_url": map[string]any{
					"type": "string",
					"description": "image_url parameter",
					"required": true,
				},
				"inventory": map[string]any{
					"type": "integer",
					"description": "inventory parameter",
				},
				"ios_app_name": map[string]any{
					"type": "string",
					"description": "ios_app_name parameter",
				},
				"ios_app_store_id": map[string]any{
					"type": "integer",
					"description": "ios_app_store_id parameter",
				},
				"ios_url": map[string]any{
					"type": "string",
					"description": "ios_url parameter",
				},
				"ipad_app_name": map[string]any{
					"type": "string",
					"description": "ipad_app_name parameter",
				},
				"ipad_app_store_id": map[string]any{
					"type": "integer",
					"description": "ipad_app_store_id parameter",
				},
				"ipad_url": map[string]any{
					"type": "string",
					"description": "ipad_url parameter",
				},
				"iphone_app_name": map[string]any{
					"type": "string",
					"description": "iphone_app_name parameter",
				},
				"iphone_app_store_id": map[string]any{
					"type": "integer",
					"description": "iphone_app_store_id parameter",
				},
				"iphone_url": map[string]any{
					"type": "string",
					"description": "iphone_url parameter",
				},
				"launch_date": map[string]any{
					"type": "string",
					"description": "launch_date parameter",
				},
				"manufacturer_part_number": map[string]any{
					"type": "string",
					"description": "manufacturer_part_number parameter",
				},
				"marked_for_product_launch": map[string]any{
					"type": "string",
					"description": "marked_for_product_launch parameter",
					"enum": []string{ "default", "marked", "not_marked" },
				},
				"material": map[string]any{
					"type": "string",
					"description": "material parameter",
				},
				"mobile_link": map[string]any{
					"type": "string",
					"description": "mobile_link parameter",
				},
				"name": map[string]any{
					"type": "string",
					"description": "name parameter",
					"required": true,
				},
				"ordering_index": map[string]any{
					"type": "integer",
					"description": "ordering_index parameter",
				},
				"pattern": map[string]any{
					"type": "string",
					"description": "pattern parameter",
				},
				"price": map[string]any{
					"type": "integer",
					"description": "price parameter",
					"required": true,
				},
				"product_priority_0": map[string]any{
					"type": "number",
					"description": "product_priority_0 parameter",
				},
				"product_priority_1": map[string]any{
					"type": "number",
					"description": "product_priority_1 parameter",
				},
				"product_priority_2": map[string]any{
					"type": "number",
					"description": "product_priority_2 parameter",
				},
				"product_priority_3": map[string]any{
					"type": "number",
					"description": "product_priority_3 parameter",
				},
				"product_priority_4": map[string]any{
					"type": "number",
					"description": "product_priority_4 parameter",
				},
				"product_type": map[string]any{
					"type": "string",
					"description": "product_type parameter",
				},
				"quantity_to_sell_on_facebook": map[string]any{
					"type": "integer",
					"description": "quantity_to_sell_on_facebook parameter",
				},
				"retailer_id": map[string]any{
					"type": "string",
					"description": "retailer_id parameter",
					"required": true,
				},
				"return_policy_days": map[string]any{
					"type": "integer",
					"description": "return_policy_days parameter",
				},
				"sale_price": map[string]any{
					"type": "integer",
					"description": "sale_price parameter",
				},
				"sale_price_end_date": map[string]any{
					"type": "string",
					"description": "sale_price_end_date parameter",
				},
				"sale_price_start_date": map[string]any{
					"type": "string",
					"description": "sale_price_start_date parameter",
				},
				"short_description": map[string]any{
					"type": "string",
					"description": "short_description parameter",
				},
				"size": map[string]any{
					"type": "string",
					"description": "size parameter",
				},
				"start_date": map[string]any{
					"type": "string",
					"description": "start_date parameter",
				},
				"url": map[string]any{
					"type": "string",
					"description": "url parameter",
				},
				"visibility": map[string]any{
					"type": "string",
					"description": "visibility parameter",
					"enum": []string{ "published", "staging" },
				},
				"windows_phone_app_id": map[string]any{
					"type": "string",
					"description": "windows_phone_app_id parameter",
				},
				"windows_phone_app_name": map[string]any{
					"type": "string",
					"description": "windows_phone_app_name parameter",
				},
				"windows_phone_url": map[string]any{
					"type": "string",
					"description": "windows_phone_url parameter",
				},
			}),
			mcp.Description("Parameters object containing: additional_image_urls (array<string>), additional_variant_attributes (object), age_group (enum) [adult, all ages, infant, kids, newborn, ...], android_app_name (string), android_class (string), android_package (string), android_url (string), availability (enum) [available for order, discontinued, in stock, mark_as_sold, out of stock, ...], brand (string), category (string), checkout_url (string), color (string), commerce_tax_category (enum) [FB_ANIMAL, FB_ANIMAL_SUPP, FB_APRL, FB_APRL_ACCESSORIES, FB_APRL_ATHL_UNIF, ...], condition (enum) [cpo, new, open_box_new, refurbished, used, ...], currency (string) [required], custom_data (object), custom_label_0 (string), custom_label_1 (string), custom_label_2 (string), custom_label_3 (string), custom_label_4 (string), custom_number_0 (integer), custom_number_1 (integer), custom_number_2 (integer), custom_number_3 (integer), custom_number_4 (integer), description (string), expiration_date (string), fb_product_category (string), gender (enum) [female, male, unisex], gtin (string), image_url (string) [required], inventory (integer), ios_app_name (string), ios_app_store_id (integer), ios_url (string), ipad_app_name (string), ipad_app_store_id (integer), ipad_url (string), iphone_app_name (string), iphone_app_store_id (integer), iphone_url (string), launch_date (string), manufacturer_part_number (string), marked_for_product_launch (enum) [default, marked, not_marked], material (string), mobile_link (string), name (string) [required], ordering_index (integer), pattern (string), price (integer) [required], product_priority_0 (number), product_priority_1 (number), product_priority_2 (number), product_priority_3 (number), product_priority_4 (number), product_type (string), quantity_to_sell_on_facebook (integer), retailer_id (string) [required], return_policy_days (integer), sale_price (integer), sale_price_end_date (datetime), sale_price_start_date (datetime), short_description (string), size (string), start_date (string), url (string), visibility (enum) [published, staging], windows_phone_app_id (string), windows_phone_app_name (string), windows_phone_url (string)"),
		),
	)
	tools = append(tools, productgroup_post_productsTool)

	// productgroup_delete_ tool
	// Params object accepts: deletion_method (productgroup_deletion_method)
	productgroup_delete_Tool := mcp.NewTool("productgroup_delete_",
		mcp.WithDescription("DELETE  for ProductGroup"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"deletion_method": map[string]any{
					"type": "string",
					"description": "deletion_method parameter",
					"enum": []string{ "DELETE_ITEMS", "ONLY_IF_EMPTY" },
				},
			}),
			mcp.Description("Parameters object containing: deletion_method (productgroup_deletion_method) [DELETE_ITEMS, ONLY_IF_EMPTY]"),
		),
	)
	tools = append(tools, productgroup_delete_Tool)

	// productgroup_get_ tool
	// Available fields for ProductGroup: id, product_catalog, retailer_id, variants
	productgroup_get_Tool := mcp.NewTool("productgroup_get_",
		mcp.WithDescription("GET  for ProductGroup"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for ProductGroup objects. Available fields: id, product_catalog, retailer_id, variants"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, productgroup_get_Tool)

	// productgroup_post_ tool
	// Params object accepts: default_product_id (string), variants (list<Object>)
	productgroup_post_Tool := mcp.NewTool("productgroup_post_",
		mcp.WithDescription("POST  for ProductGroup"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"default_product_id": map[string]any{
					"type": "string",
					"description": "default_product_id parameter",
				},
				"variants": map[string]any{
					"type": "array",
					"description": "variants parameter",
					"items": map[string]any{"type": "object"},
				},
			}),
			mcp.Description("Parameters object containing: default_product_id (string), variants (array<object>)"),
		),
	)
	tools = append(tools, productgroup_post_Tool)


	return tools
}

// ProductGroup handlers


// HandleProductgroup_get_products handles the productgroup_get_products tool with context-based auth
func HandleProductgroup_get_products(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewProductGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Productgroup_get_products(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute productgroup_get_products: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleProductgroup_post_products handles the productgroup_post_products tool with context-based auth
func HandleProductgroup_post_products(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewProductGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}



	// Call the client method
	result, err := client.Productgroup_post_products(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute productgroup_post_products: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleProductgroup_delete_ handles the productgroup_delete_ tool with context-based auth
func HandleProductgroup_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewProductGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the client method
	result, err := client.Productgroup_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute productgroup_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleProductgroup_get_ handles the productgroup_get_ tool with context-based auth
func HandleProductgroup_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewProductGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Productgroup_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute productgroup_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleProductgroup_post_ handles the productgroup_post_ tool with context-based auth
func HandleProductgroup_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewProductGroupClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the client method
	result, err := client.Productgroup_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute productgroup_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

