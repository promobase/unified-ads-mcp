// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetCommentTools returns MCP tools for Comment
func GetCommentTools() []mcp.Tool {
	var tools []mcp.Tool


	// comment_get_comments tool
	// Available fields for Comment: admin_creator, application, attachment, can_comment, can_hide, can_like, can_remove, can_reply_privately, comment_count, created_time, from, id, is_hidden, is_private, like_count, live_broadcast_timestamp, message, message_tags, object, parent, permalink_url, private_reply_conversation, user_likes
	// Params object accepts: filter (commentcomments_filter_enum_param), live_filter (commentcomments_live_filter_enum_param), order (commentcomments_order_enum_param), since (datetime)
	comment_get_commentsTool := mcp.NewTool("comment_get_comments",
		mcp.WithDescription("GET comments for Comment"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"filter": map[string]any{
					"type": "string",
					"description": "filter parameter",
					"enum": []string{ "stream", "toplevel" },
				},
				"live_filter": map[string]any{
					"type": "string",
					"description": "live_filter parameter",
					"enum": []string{ "filter_low_quality", "no_filter" },
				},
				"order": map[string]any{
					"type": "string",
					"description": "order parameter",
					"enum": []string{ "chronological", "reverse_chronological" },
				},
				"since": map[string]any{
					"type": "string",
					"description": "since parameter",
				},
			}),
			mcp.Description("Parameters object containing: filter (enum) [stream, toplevel], live_filter (enum) [filter_low_quality, no_filter], order (enum) [chronological, reverse_chronological], since (datetime)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for Comment objects. Available fields: admin_creator, application, attachment, can_comment, can_hide, can_like, can_remove, can_reply_privately, comment_count, created_time, from, id, is_hidden, is_private, like_count (and 8 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, comment_get_commentsTool)

	// comment_post_comments tool
	// Params object accepts: attachment_id (string), attachment_share_url (string), attachment_url (string), comment_privacy_value (commentcomments_comment_privacy_value_enum_param), facepile_mentioned_ids (list<string>), feedback_source (string), is_offline (bool), message (string), nectar_module (string), object_id (string), parent_comment_id (Object), text (string), tracking (string)
	comment_post_commentsTool := mcp.NewTool("comment_post_comments",
		mcp.WithDescription("POST comments for Comment"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"attachment_id": map[string]any{
					"type": "string",
					"description": "attachment_id parameter",
				},
				"attachment_share_url": map[string]any{
					"type": "string",
					"description": "attachment_share_url parameter",
				},
				"attachment_url": map[string]any{
					"type": "string",
					"description": "attachment_url parameter",
				},
				"comment_privacy_value": map[string]any{
					"type": "string",
					"description": "comment_privacy_value parameter",
					"enum": []string{ "DECLINED_BY_ADMIN_ASSISTANT", "DEFAULT_PRIVACY", "FRIENDS_AND_POST_OWNER", "FRIENDS_ONLY", "GRAPHQL_MULTIPLE_VALUE_HACK_DO_NOT_USE", "OWNER_OR_COMMENTER", "PENDING_APPROVAL", "REMOVED_BY_ADMIN_ASSISTANT", "SIDE_CONVERSATION", "SIDE_CONVERSATION_AND_POST_OWNER", "SPOTLIGHT_TAB" },
				},
				"facepile_mentioned_ids": map[string]any{
					"type": "array",
					"description": "facepile_mentioned_ids parameter",
					"items": map[string]any{"type": "string"},
				},
				"feedback_source": map[string]any{
					"type": "string",
					"description": "feedback_source parameter",
				},
				"is_offline": map[string]any{
					"type": "boolean",
					"description": "is_offline parameter",
				},
				"message": map[string]any{
					"type": "string",
					"description": "message parameter",
				},
				"nectar_module": map[string]any{
					"type": "string",
					"description": "nectar_module parameter",
				},
				"object_id": map[string]any{
					"type": "string",
					"description": "object_id parameter",
				},
				"parent_comment_id": map[string]any{
					"type": "object",
					"description": "parent_comment_id parameter",
				},
				"text": map[string]any{
					"type": "string",
					"description": "text parameter",
				},
				"tracking": map[string]any{
					"type": "string",
					"description": "tracking parameter",
				},
			}),
			mcp.Description("Parameters object containing: attachment_id (string), attachment_share_url (string), attachment_url (string), comment_privacy_value (enum) [DECLINED_BY_ADMIN_ASSISTANT, DEFAULT_PRIVACY, FRIENDS_AND_POST_OWNER, FRIENDS_ONLY, GRAPHQL_MULTIPLE_VALUE_HACK_DO_NOT_USE, ...], facepile_mentioned_ids (array<string>), feedback_source (string), is_offline (boolean), message (string), nectar_module (string), object_id (string), parent_comment_id (object), text (string), tracking (string)"),
		),
	)
	tools = append(tools, comment_post_commentsTool)

	// comment_delete_likes tool
	// Params object accepts: feedback_source (string), nectar_module (string), tracking (string)
	comment_delete_likesTool := mcp.NewTool("comment_delete_likes",
		mcp.WithDescription("DELETE likes for Comment"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"feedback_source": map[string]any{
					"type": "string",
					"description": "feedback_source parameter",
				},
				"nectar_module": map[string]any{
					"type": "string",
					"description": "nectar_module parameter",
				},
				"tracking": map[string]any{
					"type": "string",
					"description": "tracking parameter",
				},
			}),
			mcp.Description("Parameters object containing: feedback_source (string), nectar_module (string), tracking (string)"),
		),
	)
	tools = append(tools, comment_delete_likesTool)

	// comment_get_likes tool
	// Available fields for Profile: can_post, id, link, name, pic, pic_crop, pic_large, pic_small, pic_square, profile_type, username
	comment_get_likesTool := mcp.NewTool("comment_get_likes",
		mcp.WithDescription("GET likes for Comment"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for Profile objects. Available fields: can_post, id, link, name, pic, pic_crop, pic_large, pic_small, pic_square, profile_type, username"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, comment_get_likesTool)

	// comment_post_likes tool
	// Params object accepts: feedback_source (string), nectar_module (string), tracking (string)
	comment_post_likesTool := mcp.NewTool("comment_post_likes",
		mcp.WithDescription("POST likes for Comment"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"feedback_source": map[string]any{
					"type": "string",
					"description": "feedback_source parameter",
				},
				"nectar_module": map[string]any{
					"type": "string",
					"description": "nectar_module parameter",
				},
				"tracking": map[string]any{
					"type": "string",
					"description": "tracking parameter",
				},
			}),
			mcp.Description("Parameters object containing: feedback_source (string), nectar_module (string), tracking (string)"),
		),
	)
	tools = append(tools, comment_post_likesTool)

	// comment_get_reactions tool
	// Available fields for Profile: can_post, id, link, name, pic, pic_crop, pic_large, pic_small, pic_square, profile_type, username
	// Params object accepts: type (commentreactions_type_enum_param)
	comment_get_reactionsTool := mcp.NewTool("comment_get_reactions",
		mcp.WithDescription("GET reactions for Comment"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"type": map[string]any{
					"type": "string",
					"description": "type parameter",
					"enum": []string{ "ANGRY", "CARE", "FIRE", "HAHA", "HUNDRED", "LIKE", "LOVE", "NONE", "PRIDE", "SAD", "THANKFUL", "WOW" },
				},
			}),
			mcp.Description("Parameters object containing: type (enum) [ANGRY, CARE, FIRE, HAHA, HUNDRED, ...]"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for Profile objects. Available fields: can_post, id, link, name, pic, pic_crop, pic_large, pic_small, pic_square, profile_type, username"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, comment_get_reactionsTool)

	// comment_delete_ tool
	comment_delete_Tool := mcp.NewTool("comment_delete_",
		mcp.WithDescription("DELETE  for Comment"),
	)
	tools = append(tools, comment_delete_Tool)

	// comment_get_ tool
	// Available fields for Comment: admin_creator, application, attachment, can_comment, can_hide, can_like, can_remove, can_reply_privately, comment_count, created_time, from, id, is_hidden, is_private, like_count, live_broadcast_timestamp, message, message_tags, object, parent, permalink_url, private_reply_conversation, user_likes
	comment_get_Tool := mcp.NewTool("comment_get_",
		mcp.WithDescription("GET  for Comment"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for Comment objects. Available fields: admin_creator, application, attachment, can_comment, can_hide, can_like, can_remove, can_reply_privately, comment_count, created_time, from, id, is_hidden, is_private, like_count (and 8 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, comment_get_Tool)

	// comment_post_ tool
	// Params object accepts: attachment_id (string), attachment_share_url (string), attachment_url (string), is_hidden (bool), message (string)
	comment_post_Tool := mcp.NewTool("comment_post_",
		mcp.WithDescription("POST  for Comment"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"attachment_id": map[string]any{
					"type": "string",
					"description": "attachment_id parameter",
				},
				"attachment_share_url": map[string]any{
					"type": "string",
					"description": "attachment_share_url parameter",
				},
				"attachment_url": map[string]any{
					"type": "string",
					"description": "attachment_url parameter",
				},
				"is_hidden": map[string]any{
					"type": "boolean",
					"description": "is_hidden parameter",
				},
				"message": map[string]any{
					"type": "string",
					"description": "message parameter",
				},
			}),
			mcp.Description("Parameters object containing: attachment_id (string), attachment_share_url (string), attachment_url (string), is_hidden (boolean), message (string)"),
		),
	)
	tools = append(tools, comment_post_Tool)


	return tools
}

// Comment handlers


// HandleComment_get_comments handles the comment_get_comments tool with context-based auth
func HandleComment_get_comments(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewCommentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Comment_get_comments(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute comment_get_comments: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleComment_post_comments handles the comment_post_comments tool with context-based auth
func HandleComment_post_comments(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewCommentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the client method
	result, err := client.Comment_post_comments(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute comment_post_comments: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleComment_delete_likes handles the comment_delete_likes tool with context-based auth
func HandleComment_delete_likes(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewCommentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the client method
	result, err := client.Comment_delete_likes(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute comment_delete_likes: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleComment_get_likes handles the comment_get_likes tool with context-based auth
func HandleComment_get_likes(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewCommentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Comment_get_likes(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute comment_get_likes: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleComment_post_likes handles the comment_post_likes tool with context-based auth
func HandleComment_post_likes(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewCommentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the client method
	result, err := client.Comment_post_likes(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute comment_post_likes: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleComment_get_reactions handles the comment_get_reactions tool with context-based auth
func HandleComment_get_reactions(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewCommentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Comment_get_reactions(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute comment_get_reactions: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleComment_delete_ handles the comment_delete_ tool with context-based auth
func HandleComment_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewCommentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Comment_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute comment_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleComment_get_ handles the comment_get_ tool with context-based auth
func HandleComment_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewCommentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Comment_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute comment_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleComment_post_ handles the comment_post_ tool with context-based auth
func HandleComment_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewCommentClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the client method
	result, err := client.Comment_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute comment_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

