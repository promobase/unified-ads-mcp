// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetOfflineProductItemTools returns MCP tools for OfflineProductItem
func GetOfflineProductItemTools() []mcp.Tool {
	var tools []mcp.Tool

	// offlineproductitem_get_channels_to_integrity_status tool
	offlineproductitem_get_channels_to_integrity_statusTool := mcp.NewTool("offlineproductitem_get_channels_to_integrity_status",
		mcp.WithDescription("GET channels_to_integrity_status for OfflineProductItem"),
	)
	tools = append(tools, offlineproductitem_get_channels_to_integrity_statusTool)

	// offlineproductitem_get_override_details tool
	offlineproductitem_get_override_detailsTool := mcp.NewTool("offlineproductitem_get_override_details",
		mcp.WithDescription("GET override_details for OfflineProductItem"),
		mcp.WithString("keys",
			mcp.Description("keys parameter for override_details"),
		),
		mcp.WithString("type",
			mcp.Description("type parameter for override_details"),
			mcp.Enum("COUNTRY", "LANGUAGE", "LANGUAGE_AND_COUNTRY"),
		),
	)
	tools = append(tools, offlineproductitem_get_override_detailsTool)

	// offlineproductitem_get_ tool
	offlineproductitem_get_Tool := mcp.NewTool("offlineproductitem_get_",
		mcp.WithDescription("GET  for OfflineProductItem"),
	)
	tools = append(tools, offlineproductitem_get_Tool)

	return tools
}

// OfflineProductItem handlers

// HandleOfflineproductitem_get_channels_to_integrity_status handles the offlineproductitem_get_channels_to_integrity_status tool with context-based auth
func HandleOfflineproductitem_get_channels_to_integrity_status(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewOfflineProductItemClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Offlineproductitem_get_channels_to_integrity_status(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute offlineproductitem_get_channels_to_integrity_status: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleOfflineproductitem_get_override_details handles the offlineproductitem_get_override_details tool with context-based auth
func HandleOfflineproductitem_get_override_details(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewOfflineProductItemClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: keys
	// array type - using string
	if val := request.GetString("keys", ""); val != "" {
		args["keys"] = val
	}

	// Optional: type
	if val := request.GetString("type", ""); val != "" {
		args["type"] = val
	}

	// Call the client method
	result, err := client.Offlineproductitem_get_override_details(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute offlineproductitem_get_override_details: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleOfflineproductitem_get_ handles the offlineproductitem_get_ tool with context-based auth
func HandleOfflineproductitem_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewOfflineProductItemClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Offlineproductitem_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute offlineproductitem_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
