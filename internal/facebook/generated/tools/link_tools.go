// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetLinkTools returns MCP tools for Link
func GetLinkTools() []mcp.Tool {
	var tools []mcp.Tool

	// link_post_comments tool
	// Params object accepts: attachment_id (string), attachment_share_url (string), attachment_url (string), comment_privacy_value (linkcomments_comment_privacy_value_enum_param), facepile_mentioned_ids (list<string>), feedback_source (string), is_offline (bool), message (string), nectar_module (string), object_id (string), parent_comment_id (Object), text (string), tracking (string)
	link_post_commentsTool := mcp.NewTool("link_post_comments",
		mcp.WithDescription("POST comments for Link"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"attachment_id": map[string]any{
					"type":        "string",
					"description": "attachment_id parameter",
				},
				"attachment_share_url": map[string]any{
					"type":        "string",
					"description": "attachment_share_url parameter",
				},
				"attachment_url": map[string]any{
					"type":        "string",
					"description": "attachment_url parameter",
				},
				"comment_privacy_value": map[string]any{
					"type":        "string",
					"description": "comment_privacy_value parameter",
					"enum":        []string{"DECLINED_BY_ADMIN_ASSISTANT", "DEFAULT_PRIVACY", "FRIENDS_AND_POST_OWNER", "FRIENDS_ONLY", "GRAPHQL_MULTIPLE_VALUE_HACK_DO_NOT_USE", "OWNER_OR_COMMENTER", "PENDING_APPROVAL", "REMOVED_BY_ADMIN_ASSISTANT", "SIDE_CONVERSATION", "SIDE_CONVERSATION_AND_POST_OWNER", "SPOTLIGHT_TAB"},
				},
				"facepile_mentioned_ids": map[string]any{
					"type":        "array",
					"description": "facepile_mentioned_ids parameter",
					"items":       map[string]any{"type": "string"},
				},
				"feedback_source": map[string]any{
					"type":        "string",
					"description": "feedback_source parameter",
				},
				"is_offline": map[string]any{
					"type":        "boolean",
					"description": "is_offline parameter",
				},
				"message": map[string]any{
					"type":        "string",
					"description": "message parameter",
				},
				"nectar_module": map[string]any{
					"type":        "string",
					"description": "nectar_module parameter",
				},
				"object_id": map[string]any{
					"type":        "string",
					"description": "object_id parameter",
				},
				"parent_comment_id": map[string]any{
					"type":        "object",
					"description": "parent_comment_id parameter",
				},
				"text": map[string]any{
					"type":        "string",
					"description": "text parameter",
				},
				"tracking": map[string]any{
					"type":        "string",
					"description": "tracking parameter",
				},
			}),
			mcp.Description("Parameters object containing: attachment_id (string), attachment_share_url (string), attachment_url (string), comment_privacy_value (enum) [DECLINED_BY_ADMIN_ASSISTANT, DEFAULT_PRIVACY, FRIENDS_AND_POST_OWNER, FRIENDS_ONLY, GRAPHQL_MULTIPLE_VALUE_HACK_DO_NOT_USE, ...], facepile_mentioned_ids (array<string>), feedback_source (string), is_offline (boolean), message (string), nectar_module (string), object_id (string), parent_comment_id (object), text (string), tracking (string)"),
		),
	)
	tools = append(tools, link_post_commentsTool)

	// link_get_likes tool
	// Available fields for Profile: can_post, id, link, name, pic, pic_crop, pic_large, pic_small, pic_square, profile_type, username
	link_get_likesTool := mcp.NewTool("link_get_likes",
		mcp.WithDescription("GET likes for Link"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for Profile objects. Available fields: can_post, id, link, name, pic, pic_crop, pic_large, pic_small, pic_square, profile_type, username"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, link_get_likesTool)

	// link_get_ tool
	// Available fields for Link: caption, created_time, description, from, icon, id, link, message, multi_share_optimized, name, privacy, via
	link_get_Tool := mcp.NewTool("link_get_",
		mcp.WithDescription("GET  for Link"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for Link objects. Available fields: caption, created_time, description, from, icon, id, link, message, multi_share_optimized, name, privacy, via"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, link_get_Tool)

	return tools
}

// Link handlers

// HandleLink_post_comments handles the link_post_comments tool with context-based auth
func HandleLink_post_comments(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewLinkClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Call the client method
	result, err := client.Link_post_comments(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute link_post_comments: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleLink_get_likes handles the link_get_likes tool with context-based auth
func HandleLink_get_likes(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewLinkClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Link_get_likes(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute link_get_likes: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleLink_get_ handles the link_get_ tool with context-based auth
func HandleLink_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewLinkClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Link_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute link_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
