// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetInstagramUserTools returns MCP tools for InstagramUser
func GetInstagramUserTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool

	// instagramuser_get_agencies tool
	instagramuser_get_agenciesTool := mcp.NewTool("instagramuser_get_agencies",
		mcp.WithDescription("GET agencies for InstagramUser"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, instagramuser_get_agenciesTool)

	// instagramuser_get_ar_effects tool
	instagramuser_get_ar_effectsTool := mcp.NewTool("instagramuser_get_ar_effects",
		mcp.WithDescription("GET ar_effects for InstagramUser"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, instagramuser_get_ar_effectsTool)

	// instagramuser_get_authorized_adaccounts tool
	instagramuser_get_authorized_adaccountsTool := mcp.NewTool("instagramuser_get_authorized_adaccounts",
		mcp.WithDescription("GET authorized_adaccounts for InstagramUser"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("business",
			mcp.Required(),
			mcp.Description("business parameter for authorized_adaccounts"),
		),
	)
	tools = append(tools, instagramuser_get_authorized_adaccountsTool)

	// instagramuser_get_upcoming_events tool
	instagramuser_get_upcoming_eventsTool := mcp.NewTool("instagramuser_get_upcoming_events",
		mcp.WithDescription("GET upcoming_events for InstagramUser"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, instagramuser_get_upcoming_eventsTool)

	// instagramuser_get_ tool
	instagramuser_get_Tool := mcp.NewTool("instagramuser_get_",
		mcp.WithDescription("GET  for InstagramUser"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("adgroup_id",
			mcp.Description("adgroup_id parameter for "),
		),
	)
	tools = append(tools, instagramuser_get_Tool)

	return tools
}

// InstagramUser handlers

// HandleInstagramuser_get_agencies handles the instagramuser_get_agencies tool
func HandleInstagramuser_get_agencies(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewInstagramUserClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Instagramuser_get_agencies(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute instagramuser_get_agencies: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleInstagramuser_get_ar_effects handles the instagramuser_get_ar_effects tool
func HandleInstagramuser_get_ar_effects(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewInstagramUserClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Instagramuser_get_ar_effects(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute instagramuser_get_ar_effects: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleInstagramuser_get_authorized_adaccounts handles the instagramuser_get_authorized_adaccounts tool
func HandleInstagramuser_get_authorized_adaccounts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewInstagramUserClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: business
	business, err := request.RequireString("business")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter business: %v", err)), nil
	}
	args["business"] = business

	// Call the client method
	result, err := client.Instagramuser_get_authorized_adaccounts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute instagramuser_get_authorized_adaccounts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleInstagramuser_get_upcoming_events handles the instagramuser_get_upcoming_events tool
func HandleInstagramuser_get_upcoming_events(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewInstagramUserClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Instagramuser_get_upcoming_events(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute instagramuser_get_upcoming_events: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleInstagramuser_get_ handles the instagramuser_get_ tool
func HandleInstagramuser_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewInstagramUserClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: adgroup_id
	if val := request.GetString("adgroup_id", ""); val != "" {
		args["adgroup_id"] = val
	}

	// Call the client method
	result, err := client.Instagramuser_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute instagramuser_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
