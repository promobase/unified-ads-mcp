// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetAdgroupFacebookFeedbackTools returns MCP tools for AdgroupFacebookFeedback
func GetAdgroupFacebookFeedbackTools() []mcp.Tool {
	var tools []mcp.Tool

	// adgroupfacebookfeedback_get_comments tool
	adgroupfacebookfeedback_get_commentsTool := mcp.NewTool("adgroupfacebookfeedback_get_comments",
		mcp.WithDescription("GET comments for AdgroupFacebookFeedback"),
		mcp.WithString("order",
			mcp.Description("order parameter for comments"),
			mcp.Enum("chronological", "reverse_chronological"),
		),
	)
	tools = append(tools, adgroupfacebookfeedback_get_commentsTool)

	return tools
}

// AdgroupFacebookFeedback handlers

// HandleAdgroupfacebookfeedback_get_comments handles the adgroupfacebookfeedback_get_comments tool with context-based auth
func HandleAdgroupfacebookfeedback_get_comments(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdgroupFacebookFeedbackClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: order
	if val := request.GetString("order", ""); val != "" {
		args["order"] = val
	}

	// Call the client method
	result, err := client.Adgroupfacebookfeedback_get_comments(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adgroupfacebookfeedback_get_comments: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
