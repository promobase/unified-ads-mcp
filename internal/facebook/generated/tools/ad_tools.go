// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetAdTools returns MCP tools for Ad
func GetAdTools() []mcp.Tool {
	var tools []mcp.Tool

	// ad_get_adcreatives tool
	// Available fields for AdCreative: account_id, actor_id, ad_disclaimer_spec, adlabels, applink_treatment, asset_feed_spec, authorization_category, auto_update, body, branded_content, branded_content_sponsor_page_id, bundle_folder_id, call_to_action, call_to_action_type, categorization_criteria, category_media_source, collaborative_ads_lsb_image_bank_id, contextual_multi_ads, creative_sourcing_spec, degrees_of_freedom_spec, destination_set_id, dynamic_ad_voice, effective_authorization_category, effective_instagram_media_id, effective_object_story_id, enable_direct_install, enable_launch_instant_app, facebook_branded_content, id, image_crops, image_hash, image_url, instagram_branded_content, instagram_permalink_url, instagram_user_id, interactive_components_spec, link_deep_link_url, link_destination_display_url, link_og_id, link_url, messenger_sponsored_message, name, object_id, object_store_url, object_story_id, object_story_spec, object_type, object_url, omnichannel_link_spec, page_welcome_message, photo_album_source_object_story_id, place_page_set_id, platform_customizations, playable_asset_id, portrait_customizations, product_data, product_set_id, recommender_settings, regional_regulation_disclaimer_spec, source_facebook_post_id, source_instagram_media_id, status, template_url, template_url_spec, thumbnail_id, thumbnail_url, title, url_tags, use_page_actor_override, video_id
	ad_get_adcreativesTool := mcp.NewTool("ad_get_adcreatives",
		mcp.WithDescription("GET adcreatives for Ad"),
		mcp.WithString("ad_id",
			mcp.Required(),
			mcp.Description("Facebook Ad ID"),
		),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for AdCreative objects. Available fields: account_id, actor_id, ad_disclaimer_spec, adlabels, applink_treatment, asset_feed_spec, authorization_category, auto_update, body, branded_content, branded_content_sponsor_page_id, bundle_folder_id, call_to_action, call_to_action_type, categorization_criteria (and 55 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, ad_get_adcreativesTool)

	// ad_post_adlabels tool
	ad_post_adlabelsTool := mcp.NewTool("ad_post_adlabels",
		mcp.WithDescription("POST adlabels for Ad"),
		mcp.WithString("ad_id",
			mcp.Required(),
			mcp.Description("Facebook Ad ID"),
		),
		mcp.WithString("adlabels",
			mcp.Required(),
			mcp.Description("adlabels parameter for adlabels"),
		),
		mcp.WithString("execution_options",
			mcp.Description("execution_options parameter for adlabels"),
			mcp.Enum("validate_only"),
		),
	)
	tools = append(tools, ad_post_adlabelsTool)

	// ad_get_adrules_governed tool
	// Available fields for AdRule: account_id, created_by, created_time, disable_error_code, evaluation_spec, execution_spec, id, name, schedule_spec, status, updated_time
	ad_get_adrules_governedTool := mcp.NewTool("ad_get_adrules_governed",
		mcp.WithDescription("GET adrules_governed for Ad"),
		mcp.WithString("ad_id",
			mcp.Required(),
			mcp.Description("Facebook Ad ID"),
		),
		mcp.WithBoolean("pass_evaluation",
			mcp.Description("pass_evaluation parameter for adrules_governed"),
		),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for AdRule objects. Available fields: account_id, created_by, created_time, disable_error_code, evaluation_spec, execution_spec, id, name, schedule_spec, status, updated_time"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, ad_get_adrules_governedTool)

	// ad_get_copies tool
	// Available fields for Ad: account_id, ad_active_time, ad_review_feedback, ad_schedule_end_time, ad_schedule_start_time, adlabels, adset, adset_id, bid_amount, bid_info, bid_type, campaign, campaign_id, configured_status, conversion_domain, conversion_specs, created_time, creative, creative_asset_groups_spec, demolink_hash, display_sequence, effective_status, engagement_audience, failed_delivery_checks, id, issues_info, last_updated_by_app_id, name, placement, preview_shareable_link, priority, recommendations, source_ad, source_ad_id, status, targeting, tracking_and_conversion_with_defaults, tracking_specs, updated_time
	ad_get_copiesTool := mcp.NewTool("ad_get_copies",
		mcp.WithDescription("GET copies for Ad"),
		mcp.WithString("ad_id",
			mcp.Required(),
			mcp.Description("Facebook Ad ID"),
		),
		mcp.WithString("date_preset",
			mcp.Description("date_preset parameter for copies"),
			mcp.Enum("data_maximum", "last_14d", "last_28d", "last_30d", "last_3d", "last_7d", "last_90d", "last_month", "last_quarter", "last_week_mon_sun", "last_week_sun_sat", "last_year", "maximum", "this_month", "this_quarter", "this_week_mon_today", "this_week_sun_today", "this_year", "today", "yesterday"),
		),
		mcp.WithString("effective_status",
			mcp.Description("effective_status parameter for copies"),
		),
		mcp.WithString("time_range",
			mcp.Description("time_range parameter for copies"),
		),
		mcp.WithNumber("updated_since",
			mcp.Description("updated_since parameter for copies"),
		),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for Ad objects. Available fields: account_id, ad_active_time, ad_review_feedback, ad_schedule_end_time, ad_schedule_start_time, adlabels, adset, adset_id, bid_amount, bid_info, bid_type, campaign, campaign_id, configured_status, conversion_domain (and 24 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, ad_get_copiesTool)

	// ad_post_copies tool
	ad_post_copiesTool := mcp.NewTool("ad_post_copies",
		mcp.WithDescription("POST copies for Ad"),
		mcp.WithString("ad_id",
			mcp.Required(),
			mcp.Description("Facebook Ad ID"),
		),
		mcp.WithString("adset_id",
			mcp.Description("adset_id parameter for copies"),
		),
		mcp.WithString("creative_parameters",
			mcp.Description("creative_parameters parameter for copies"),
		),
		mcp.WithString("rename_options",
			mcp.Description("rename_options parameter for copies"),
		),
		mcp.WithString("status_option",
			mcp.Description("status_option parameter for copies"),
			mcp.Enum("ACTIVE", "INHERITED_FROM_SOURCE", "PAUSED"),
		),
	)
	tools = append(tools, ad_post_copiesTool)

	// ad_get_insights tool
	// Available fields for AdsInsights: account_currency, account_id, account_name, action_values, actions, ad_click_actions, ad_id, ad_impression_actions, ad_name, adset_end, adset_id, adset_name, adset_start, age_targeting, attribution_setting, auction_bid, auction_competitiveness, auction_max_competitor_bid, average_purchases_conversion_value, buying_type, campaign_id, campaign_name, canvas_avg_view_percent, canvas_avg_view_time, catalog_segment_actions, catalog_segment_value, catalog_segment_value_mobile_purchase_roas, catalog_segment_value_omni_purchase_roas, catalog_segment_value_website_purchase_roas, clicks, conversion_lead_rate, conversion_leads, conversion_rate_ranking, conversion_values, conversions, converted_product_app_custom_event_fb_mobile_purchase, converted_product_app_custom_event_fb_mobile_purchase_value, converted_product_offline_purchase, converted_product_offline_purchase_value, converted_product_omni_purchase, converted_product_omni_purchase_values, converted_product_quantity, converted_product_value, converted_product_website_pixel_purchase, converted_product_website_pixel_purchase_value, converted_promoted_product_app_custom_event_fb_mobile_purchase, converted_promoted_product_app_custom_event_fb_mobile_purchase_value, converted_promoted_product_offline_purchase, converted_promoted_product_offline_purchase_value, converted_promoted_product_omni_purchase, converted_promoted_product_omni_purchase_values, converted_promoted_product_quantity, converted_promoted_product_value, converted_promoted_product_website_pixel_purchase, converted_promoted_product_website_pixel_purchase_value, cost_per_15_sec_video_view, cost_per_2_sec_continuous_video_view, cost_per_action_type, cost_per_ad_click, cost_per_conversion, cost_per_conversion_lead, cost_per_dda_countby_convs, cost_per_estimated_ad_recallers, cost_per_inline_link_click, cost_per_inline_post_engagement, cost_per_objective_result, cost_per_one_thousand_ad_impression, cost_per_outbound_click, cost_per_result, cost_per_thruplay, cost_per_unique_action_type, cost_per_unique_click, cost_per_unique_conversion, cost_per_unique_inline_link_click, cost_per_unique_outbound_click, cpc, cpm, cpp, created_time, creative_media_type, ctr, date_start, date_stop, dda_countby_convs, dda_results, engagement_rate_ranking, estimated_ad_recall_rate, estimated_ad_recall_rate_lower_bound, estimated_ad_recall_rate_upper_bound, estimated_ad_recallers, estimated_ad_recallers_lower_bound, estimated_ad_recallers_upper_bound, frequency, full_view_impressions, full_view_reach, gender_targeting, impressions, inline_link_click_ctr, inline_link_clicks, inline_post_engagement, instagram_upcoming_event_reminders_set, instant_experience_clicks_to_open, instant_experience_clicks_to_start, instant_experience_outbound_clicks, interactive_component_tap, labels, landing_page_view_actions_per_link_click, landing_page_view_per_link_click, landing_page_view_per_purchase_rate, location, marketing_messages_click_rate_benchmark, marketing_messages_cost_per_delivered, marketing_messages_cost_per_link_btn_click, marketing_messages_delivered, marketing_messages_delivery_rate, marketing_messages_link_btn_click, marketing_messages_link_btn_click_rate, marketing_messages_media_view_rate, marketing_messages_phone_call_btn_click_rate, marketing_messages_quick_reply_btn_click, marketing_messages_quick_reply_btn_click_rate, marketing_messages_read, marketing_messages_read_rate, marketing_messages_read_rate_benchmark, marketing_messages_sent, marketing_messages_spend, marketing_messages_spend_currency, marketing_messages_website_add_to_cart, marketing_messages_website_initiate_checkout, marketing_messages_website_purchase, marketing_messages_website_purchase_values, mobile_app_purchase_roas, objective, objective_result_rate, objective_results, onsite_conversion_messaging_detected_purchase_deduped, optimization_goal, outbound_clicks, outbound_clicks_ctr, place_page_name, product_brand, product_category, product_content_id, product_custom_label_0, product_custom_label_1, product_custom_label_2, product_custom_label_3, product_custom_label_4, product_group_content_id, product_group_retailer_id, product_name, product_retailer_id, purchase_per_landing_page_view, purchase_roas, purchases_per_link_click, qualifying_question_qualify_answer_rate, quality_ranking, reach, result_rate, result_values_performance_indicator, results, shops_assisted_purchases, social_spend, spend, total_postbacks, total_postbacks_detailed, total_postbacks_detailed_v4, unique_actions, unique_clicks, unique_conversions, unique_ctr, unique_inline_link_click_ctr, unique_inline_link_clicks, unique_link_clicks_ctr, unique_outbound_clicks, unique_outbound_clicks_ctr, unique_video_continuous_2_sec_watched_actions, unique_video_view_15_sec, updated_time, video_15_sec_watched_actions, video_30_sec_watched_actions, video_avg_time_watched_actions, video_continuous_2_sec_watched_actions, video_p100_watched_actions, video_p25_watched_actions, video_p50_watched_actions, video_p75_watched_actions, video_p95_watched_actions, video_play_actions, video_play_curve_actions, video_play_retention_0_to_15s_actions, video_play_retention_20_to_60s_actions, video_play_retention_graph_actions, video_thruplay_watched_actions, video_time_watched_actions, video_view_per_impression, website_ctr, website_purchase_roas, wish_bid
	ad_get_insightsTool := mcp.NewTool("ad_get_insights",
		mcp.WithDescription("GET insights for Ad"),
		mcp.WithString("ad_id",
			mcp.Required(),
			mcp.Description("Facebook Ad ID"),
		),
		mcp.WithString("action_attribution_windows",
			mcp.Description("action_attribution_windows parameter for insights"),
			mcp.Enum("1d_click", "1d_ev", "1d_view", "28d_click", "28d_view", "28d_view_all_conversions", "28d_view_first_conversion", "7d_click", "7d_view", "7d_view_all_conversions", "7d_view_first_conversion", "dda", "default", "skan_click", "skan_click_second_postback", "skan_click_third_postback", "skan_view", "skan_view_second_postback", "skan_view_third_postback"),
		),
		mcp.WithString("action_breakdowns",
			mcp.Description("action_breakdowns parameter for insights"),
			mcp.Enum("action_canvas_component_name", "action_carousel_card_id", "action_carousel_card_name", "action_destination", "action_device", "action_reaction", "action_target_id", "action_type", "action_video_sound", "action_video_type", "conversion_destination", "matched_persona_id", "matched_persona_name", "signal_source_bucket", "standard_event_content_type"),
		),
		mcp.WithString("action_report_time",
			mcp.Description("action_report_time parameter for insights"),
			mcp.Enum("conversion", "impression", "lifetime", "mixed"),
		),
		mcp.WithString("breakdowns",
			mcp.Description("breakdowns parameter for insights"),
			mcp.Enum("ad_extension_domain", "ad_extension_url", "ad_format_asset", "age", "app_id", "body_asset", "breakdown_ad_objective", "breakdown_reporting_ad_id", "call_to_action_asset", "coarse_conversion_value", "comscore_market", "comscore_market_code", "conversion_destination", "country", "creative_relaxation_asset_type", "description_asset", "device_platform", "dma", "fidelity_type", "flexible_format_asset_type", "frequency_value", "gen_ai_asset_type", "gender", "hourly_stats_aggregated_by_advertiser_time_zone", "hourly_stats_aggregated_by_audience_time_zone", "hsid", "image_asset", "impression_device", "impression_view_time_advertiser_hour_v2", "is_auto_advance", "is_conversion_id_modeled", "is_rendered_as_delayed_skip_ad", "landing_destination", "link_url_asset", "marketing_messages_btn_name", "mdsa_landing_destination", "media_asset_url", "media_creator", "media_destination_url", "media_format", "media_origin_url", "media_text_content", "media_type", "mmm", "place_page_id", "platform_position", "postback_sequence_index", "product_id", "publisher_platform", "redownload", "region", "signal_source_bucket", "skan_campaign_id", "skan_conversion_id", "skan_version", "sot_attribution_model_type", "sot_attribution_window", "sot_channel", "sot_event_type", "sot_source", "standard_event_content_type", "title_asset", "user_persona_id", "user_persona_name", "video_asset"),
		),
		mcp.WithString("date_preset",
			mcp.Description("date_preset parameter for insights"),
			mcp.Enum("data_maximum", "last_14d", "last_28d", "last_30d", "last_3d", "last_7d", "last_90d", "last_month", "last_quarter", "last_week_mon_sun", "last_week_sun_sat", "last_year", "maximum", "this_month", "this_quarter", "this_week_mon_today", "this_week_sun_today", "this_year", "today", "yesterday"),
		),
		mcp.WithBoolean("default_summary",
			mcp.Description("default_summary parameter for insights"),
		),
		mcp.WithString("export_columns",
			mcp.Description("export_columns parameter for insights"),
		),
		mcp.WithString("export_format",
			mcp.Description("export_format parameter for insights"),
		),
		mcp.WithString("export_name",
			mcp.Description("export_name parameter for insights"),
		),
		mcp.WithString("fields",
			mcp.Description("fields parameter for insights"),
		),
		mcp.WithString("filtering",
			mcp.Description("filtering parameter for insights"),
		),
		mcp.WithString("level",
			mcp.Description("level parameter for insights"),
			mcp.Enum("account", "ad", "adset", "campaign"),
		),
		mcp.WithNumber("limit",
			mcp.Description("limit parameter for insights"),
		),
		mcp.WithNumber("product_id_limit",
			mcp.Description("product_id_limit parameter for insights"),
		),
		mcp.WithString("sort",
			mcp.Description("sort parameter for insights"),
		),
		mcp.WithString("summary",
			mcp.Description("summary parameter for insights"),
		),
		mcp.WithString("summary_action_breakdowns",
			mcp.Description("summary_action_breakdowns parameter for insights"),
			mcp.Enum("action_canvas_component_name", "action_carousel_card_id", "action_carousel_card_name", "action_destination", "action_device", "action_reaction", "action_target_id", "action_type", "action_video_sound", "action_video_type", "conversion_destination", "matched_persona_id", "matched_persona_name", "signal_source_bucket", "standard_event_content_type"),
		),
		mcp.WithString("time_increment",
			mcp.Description("time_increment parameter for insights"),
		),
		mcp.WithString("time_range",
			mcp.Description("time_range parameter for insights"),
		),
		mcp.WithString("time_ranges",
			mcp.Description("time_ranges parameter for insights"),
		),
		mcp.WithBoolean("use_account_attribution_setting",
			mcp.Description("use_account_attribution_setting parameter for insights"),
		),
		mcp.WithBoolean("use_unified_attribution_setting",
			mcp.Description("use_unified_attribution_setting parameter for insights"),
		),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for AdsInsights objects. Available fields: account_currency, account_id, account_name, action_values, actions, ad_click_actions, ad_id, ad_impression_actions, ad_name, adset_end, adset_id, adset_name, adset_start, age_targeting, attribution_setting (and 184 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, ad_get_insightsTool)

	// ad_post_insights tool
	ad_post_insightsTool := mcp.NewTool("ad_post_insights",
		mcp.WithDescription("POST insights for Ad"),
		mcp.WithString("ad_id",
			mcp.Required(),
			mcp.Description("Facebook Ad ID"),
		),
		mcp.WithString("action_attribution_windows",
			mcp.Description("action_attribution_windows parameter for insights"),
			mcp.Enum("1d_click", "1d_ev", "1d_view", "28d_click", "28d_view", "28d_view_all_conversions", "28d_view_first_conversion", "7d_click", "7d_view", "7d_view_all_conversions", "7d_view_first_conversion", "dda", "default", "skan_click", "skan_click_second_postback", "skan_click_third_postback", "skan_view", "skan_view_second_postback", "skan_view_third_postback"),
		),
		mcp.WithString("action_breakdowns",
			mcp.Description("action_breakdowns parameter for insights"),
			mcp.Enum("action_canvas_component_name", "action_carousel_card_id", "action_carousel_card_name", "action_destination", "action_device", "action_reaction", "action_target_id", "action_type", "action_video_sound", "action_video_type", "conversion_destination", "matched_persona_id", "matched_persona_name", "signal_source_bucket", "standard_event_content_type"),
		),
		mcp.WithString("action_report_time",
			mcp.Description("action_report_time parameter for insights"),
			mcp.Enum("conversion", "impression", "lifetime", "mixed"),
		),
		mcp.WithString("breakdowns",
			mcp.Description("breakdowns parameter for insights"),
			mcp.Enum("ad_extension_domain", "ad_extension_url", "ad_format_asset", "age", "app_id", "body_asset", "breakdown_ad_objective", "breakdown_reporting_ad_id", "call_to_action_asset", "coarse_conversion_value", "comscore_market", "comscore_market_code", "conversion_destination", "country", "creative_relaxation_asset_type", "description_asset", "device_platform", "dma", "fidelity_type", "flexible_format_asset_type", "frequency_value", "gen_ai_asset_type", "gender", "hourly_stats_aggregated_by_advertiser_time_zone", "hourly_stats_aggregated_by_audience_time_zone", "hsid", "image_asset", "impression_device", "impression_view_time_advertiser_hour_v2", "is_auto_advance", "is_conversion_id_modeled", "is_rendered_as_delayed_skip_ad", "landing_destination", "link_url_asset", "marketing_messages_btn_name", "mdsa_landing_destination", "media_asset_url", "media_creator", "media_destination_url", "media_format", "media_origin_url", "media_text_content", "media_type", "mmm", "place_page_id", "platform_position", "postback_sequence_index", "product_id", "publisher_platform", "redownload", "region", "signal_source_bucket", "skan_campaign_id", "skan_conversion_id", "skan_version", "sot_attribution_model_type", "sot_attribution_window", "sot_channel", "sot_event_type", "sot_source", "standard_event_content_type", "title_asset", "user_persona_id", "user_persona_name", "video_asset"),
		),
		mcp.WithString("date_preset",
			mcp.Description("date_preset parameter for insights"),
			mcp.Enum("data_maximum", "last_14d", "last_28d", "last_30d", "last_3d", "last_7d", "last_90d", "last_month", "last_quarter", "last_week_mon_sun", "last_week_sun_sat", "last_year", "maximum", "this_month", "this_quarter", "this_week_mon_today", "this_week_sun_today", "this_year", "today", "yesterday"),
		),
		mcp.WithBoolean("default_summary",
			mcp.Description("default_summary parameter for insights"),
		),
		mcp.WithString("export_columns",
			mcp.Description("export_columns parameter for insights"),
		),
		mcp.WithString("export_format",
			mcp.Description("export_format parameter for insights"),
		),
		mcp.WithString("export_name",
			mcp.Description("export_name parameter for insights"),
		),
		mcp.WithString("fields",
			mcp.Description("fields parameter for insights"),
		),
		mcp.WithString("filtering",
			mcp.Description("filtering parameter for insights"),
		),
		mcp.WithString("level",
			mcp.Description("level parameter for insights"),
			mcp.Enum("account", "ad", "adset", "campaign"),
		),
		mcp.WithNumber("limit",
			mcp.Description("limit parameter for insights"),
		),
		mcp.WithNumber("product_id_limit",
			mcp.Description("product_id_limit parameter for insights"),
		),
		mcp.WithString("sort",
			mcp.Description("sort parameter for insights"),
		),
		mcp.WithString("summary",
			mcp.Description("summary parameter for insights"),
		),
		mcp.WithString("summary_action_breakdowns",
			mcp.Description("summary_action_breakdowns parameter for insights"),
			mcp.Enum("action_canvas_component_name", "action_carousel_card_id", "action_carousel_card_name", "action_destination", "action_device", "action_reaction", "action_target_id", "action_type", "action_video_sound", "action_video_type", "conversion_destination", "matched_persona_id", "matched_persona_name", "signal_source_bucket", "standard_event_content_type"),
		),
		mcp.WithString("time_increment",
			mcp.Description("time_increment parameter for insights"),
		),
		mcp.WithString("time_range",
			mcp.Description("time_range parameter for insights"),
		),
		mcp.WithString("time_ranges",
			mcp.Description("time_ranges parameter for insights"),
		),
		mcp.WithBoolean("use_account_attribution_setting",
			mcp.Description("use_account_attribution_setting parameter for insights"),
		),
		mcp.WithBoolean("use_unified_attribution_setting",
			mcp.Description("use_unified_attribution_setting parameter for insights"),
		),
	)
	tools = append(tools, ad_post_insightsTool)

	// ad_get_leads tool
	// Available fields for Lead: ad_id, ad_name, adset_id, adset_name, campaign_id, campaign_name, created_time, custom_disclaimer_responses, field_data, form_id, home_listing, id, is_organic, partner_name, platform, post, post_submission_check_result, retailer_item_id, vehicle
	ad_get_leadsTool := mcp.NewTool("ad_get_leads",
		mcp.WithDescription("GET leads for Ad"),
		mcp.WithString("ad_id",
			mcp.Required(),
			mcp.Description("Facebook Ad ID"),
		),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for Lead objects. Available fields: ad_id, ad_name, adset_id, adset_name, campaign_id, campaign_name, created_time, custom_disclaimer_responses, field_data, form_id, home_listing, id, is_organic, partner_name, platform (and 4 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, ad_get_leadsTool)

	// ad_get_previews tool
	// Available fields for AdPreview: body, transformation_spec
	ad_get_previewsTool := mcp.NewTool("ad_get_previews",
		mcp.WithDescription("GET previews for Ad"),
		mcp.WithString("ad_id",
			mcp.Required(),
			mcp.Description("Facebook Ad ID"),
		),
		mcp.WithString("ad_format",
			mcp.Required(),
			mcp.Description("ad_format parameter for previews"),
			mcp.Enum("AUDIENCE_NETWORK_INSTREAM_VIDEO", "AUDIENCE_NETWORK_INSTREAM_VIDEO_MOBILE", "AUDIENCE_NETWORK_OUTSTREAM_VIDEO", "AUDIENCE_NETWORK_REWARDED_VIDEO", "BIZ_DISCO_FEED_MOBILE", "DESKTOP_FEED_STANDARD", "FACEBOOK_PROFILE_FEED_DESKTOP", "FACEBOOK_PROFILE_FEED_MOBILE", "FACEBOOK_PROFILE_REELS_MOBILE", "FACEBOOK_REELS_BANNER", "FACEBOOK_REELS_BANNER_DESKTOP", "FACEBOOK_REELS_BANNER_FULLSCREEN_IOS", "FACEBOOK_REELS_BANNER_FULLSCREEN_MOBILE", "FACEBOOK_REELS_MOBILE", "FACEBOOK_REELS_POSTLOOP", "FACEBOOK_REELS_STICKER", "FACEBOOK_STORY_MOBILE", "FACEBOOK_STORY_STICKER_MOBILE", "INSTAGRAM_EXPLORE_CONTEXTUAL", "INSTAGRAM_EXPLORE_GRID_HOME", "INSTAGRAM_EXPLORE_IMMERSIVE", "INSTAGRAM_FEED_WEB", "INSTAGRAM_FEED_WEB_M_SITE", "INSTAGRAM_LEAD_GEN_MULTI_SUBMIT_ADS", "INSTAGRAM_PROFILE_FEED", "INSTAGRAM_PROFILE_REELS", "INSTAGRAM_REELS", "INSTAGRAM_REELS_OVERLAY", "INSTAGRAM_SEARCH_CHAIN", "INSTAGRAM_SEARCH_GRID", "INSTAGRAM_STANDARD", "INSTAGRAM_STORY", "INSTAGRAM_STORY_EFFECT_TRAY", "INSTAGRAM_STORY_WEB", "INSTAGRAM_STORY_WEB_M_SITE", "INSTANT_ARTICLE_RECIRCULATION_AD", "INSTANT_ARTICLE_STANDARD", "INSTREAM_BANNER_DESKTOP", "INSTREAM_BANNER_FULLSCREEN_IOS", "INSTREAM_BANNER_FULLSCREEN_MOBILE", "INSTREAM_BANNER_IMMERSIVE_MOBILE", "INSTREAM_BANNER_MOBILE", "INSTREAM_VIDEO_DESKTOP", "INSTREAM_VIDEO_FULLSCREEN_IOS", "INSTREAM_VIDEO_FULLSCREEN_MOBILE", "INSTREAM_VIDEO_IMAGE", "INSTREAM_VIDEO_IMMERSIVE_MOBILE", "INSTREAM_VIDEO_MOBILE", "JOB_BROWSER_DESKTOP", "JOB_BROWSER_MOBILE", "MARKETPLACE_MOBILE", "MESSENGER_MOBILE_INBOX_MEDIA", "MESSENGER_MOBILE_STORY_MEDIA", "MOBILE_BANNER", "MOBILE_FEED_BASIC", "MOBILE_FEED_STANDARD", "MOBILE_FULLWIDTH", "MOBILE_INTERSTITIAL", "MOBILE_MEDIUM_RECTANGLE", "MOBILE_NATIVE", "RIGHT_COLUMN_STANDARD", "SUGGESTED_VIDEO_DESKTOP", "SUGGESTED_VIDEO_FULLSCREEN_MOBILE", "SUGGESTED_VIDEO_IMMERSIVE_MOBILE", "SUGGESTED_VIDEO_MOBILE", "WATCH_FEED_HOME", "WATCH_FEED_MOBILE"),
		),
		mcp.WithString("creative_feature",
			mcp.Description("creative_feature parameter for previews"),
			mcp.Enum("product_metadata_automation", "profile_card", "standard_enhancements_catalog", "video_to_image"),
		),
		mcp.WithString("dynamic_asset_label",
			mcp.Description("dynamic_asset_label parameter for previews"),
		),
		mcp.WithString("dynamic_creative_spec",
			mcp.Description("dynamic_creative_spec parameter for previews"),
		),
		mcp.WithString("dynamic_customization",
			mcp.Description("dynamic_customization parameter for previews"),
		),
		mcp.WithString("end_date",
			mcp.Description("end_date parameter for previews"),
		),
		mcp.WithNumber("height",
			mcp.Description("height parameter for previews"),
		),
		mcp.WithString("locale",
			mcp.Description("locale parameter for previews"),
		),
		mcp.WithNumber("place_page_id",
			mcp.Description("place_page_id parameter for previews"),
		),
		mcp.WithString("post",
			mcp.Description("post parameter for previews"),
		),
		mcp.WithString("product_item_ids",
			mcp.Description("product_item_ids parameter for previews"),
		),
		mcp.WithString("render_type",
			mcp.Description("render_type parameter for previews"),
			mcp.Enum("FALLBACK"),
		),
		mcp.WithString("start_date",
			mcp.Description("start_date parameter for previews"),
		),
		mcp.WithNumber("width",
			mcp.Description("width parameter for previews"),
		),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for AdPreview objects. Available fields: body, transformation_spec"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, ad_get_previewsTool)

	// ad_get_targetingsentencelines tool
	// Available fields for TargetingSentenceLine: id, params, targetingsentencelines
	ad_get_targetingsentencelinesTool := mcp.NewTool("ad_get_targetingsentencelines",
		mcp.WithDescription("GET targetingsentencelines for Ad"),
		mcp.WithString("ad_id",
			mcp.Required(),
			mcp.Description("Facebook Ad ID"),
		),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for TargetingSentenceLine objects. Available fields: id, params, targetingsentencelines"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, ad_get_targetingsentencelinesTool)

	// ad_delete_ tool
	ad_delete_Tool := mcp.NewTool("ad_delete_",
		mcp.WithDescription("DELETE  for Ad"),
		mcp.WithString("ad_id",
			mcp.Required(),
			mcp.Description("Facebook Ad ID"),
		),
	)
	tools = append(tools, ad_delete_Tool)

	// ad_get_ tool
	// Available fields for Ad: account_id, ad_active_time, ad_review_feedback, ad_schedule_end_time, ad_schedule_start_time, adlabels, adset, adset_id, bid_amount, bid_info, bid_type, campaign, campaign_id, configured_status, conversion_domain, conversion_specs, created_time, creative, creative_asset_groups_spec, demolink_hash, display_sequence, effective_status, engagement_audience, failed_delivery_checks, id, issues_info, last_updated_by_app_id, name, placement, preview_shareable_link, priority, recommendations, source_ad, source_ad_id, status, targeting, tracking_and_conversion_with_defaults, tracking_specs, updated_time
	ad_get_Tool := mcp.NewTool("ad_get_",
		mcp.WithDescription("GET  for Ad"),
		mcp.WithString("ad_id",
			mcp.Required(),
			mcp.Description("Facebook Ad ID"),
		),
		mcp.WithString("am_call_tags",
			mcp.Description("am_call_tags parameter for "),
		),
		mcp.WithString("date_preset",
			mcp.Description("date_preset parameter for "),
			mcp.Enum("data_maximum", "last_14d", "last_28d", "last_30d", "last_3d", "last_7d", "last_90d", "last_month", "last_quarter", "last_week_mon_sun", "last_week_sun_sat", "last_year", "maximum", "this_month", "this_quarter", "this_week_mon_today", "this_week_sun_today", "this_year", "today", "yesterday"),
		),
		mcp.WithBoolean("from_adtable",
			mcp.Description("from_adtable parameter for "),
		),
		mcp.WithBoolean("review_feedback_breakdown",
			mcp.Description("review_feedback_breakdown parameter for "),
		),
		mcp.WithString("time_range",
			mcp.Description("time_range parameter for "),
		),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for Ad objects. Available fields: account_id, ad_active_time, ad_review_feedback, ad_schedule_end_time, ad_schedule_start_time, adlabels, adset, adset_id, bid_amount, bid_info, bid_type, campaign, campaign_id, configured_status, conversion_domain (and 24 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, ad_get_Tool)

	// ad_post_ tool
	ad_post_Tool := mcp.NewTool("ad_post_",
		mcp.WithDescription("POST  for Ad"),
		mcp.WithString("ad_id",
			mcp.Required(),
			mcp.Description("Facebook Ad ID"),
		),
		mcp.WithString("ad_schedule_end_time",
			mcp.Description("ad_schedule_end_time parameter for "),
		),
		mcp.WithString("ad_schedule_start_time",
			mcp.Description("ad_schedule_start_time parameter for "),
		),
		mcp.WithString("adlabels",
			mcp.Description("adlabels parameter for "),
		),
		mcp.WithString("adset_spec",
			mcp.Description("adset_spec parameter for "),
		),
		mcp.WithString("audience_id",
			mcp.Description("audience_id parameter for "),
		),
		mcp.WithNumber("bid_amount",
			mcp.Description("bid_amount parameter for "),
		),
		mcp.WithString("conversion_domain",
			mcp.Description("conversion_domain parameter for "),
		),
		mcp.WithString("creative",
			mcp.Description("creative parameter for "),
		),
		mcp.WithString("creative_asset_groups_spec",
			mcp.Description("creative_asset_groups_spec parameter for "),
		),
		mcp.WithNumber("display_sequence",
			mcp.Description("display_sequence parameter for "),
		),
		mcp.WithString("draft_adgroup_id",
			mcp.Description("draft_adgroup_id parameter for "),
		),
		mcp.WithBoolean("engagement_audience",
			mcp.Description("engagement_audience parameter for "),
		),
		mcp.WithString("execution_options",
			mcp.Description("execution_options parameter for "),
			mcp.Enum("include_recommendations", "synchronous_ad_review", "validate_only"),
		),
		mcp.WithBoolean("include_demolink_hashes",
			mcp.Description("include_demolink_hashes parameter for "),
		),
		mcp.WithString("name",
			mcp.Description("name parameter for "),
		),
		mcp.WithNumber("priority",
			mcp.Description("priority parameter for "),
		),
		mcp.WithString("status",
			mcp.Description("status parameter for "),
			mcp.Enum("ACTIVE", "ARCHIVED", "DELETED", "PAUSED"),
		),
		mcp.WithString("tracking_specs",
			mcp.Description("tracking_specs parameter for "),
		),
	)
	tools = append(tools, ad_post_Tool)

	return tools
}

// Ad handlers

// HandleAd_get_adcreatives handles the ad_get_adcreatives tool with context-based auth
func HandleAd_get_adcreatives(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: ad_id
	ad_id, err := request.RequireString("ad_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter ad_id: %v", err)), nil
	}
	args["ad_id"] = ad_id

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Ad_get_adcreatives(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute ad_get_adcreatives: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAd_post_adlabels handles the ad_post_adlabels tool with context-based auth
func HandleAd_post_adlabels(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: ad_id
	ad_id, err := request.RequireString("ad_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter ad_id: %v", err)), nil
	}
	args["ad_id"] = ad_id

	// Required: adlabels
	adlabels, err := request.RequireString("adlabels")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter adlabels: %v", err)), nil
	}
	args["adlabels"] = adlabels

	// Optional: execution_options
	// array type - using string
	if val := request.GetString("execution_options", ""); val != "" {
		args["execution_options"] = val
	}

	// Call the client method
	result, err := client.Ad_post_adlabels(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute ad_post_adlabels: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAd_get_adrules_governed handles the ad_get_adrules_governed tool with context-based auth
func HandleAd_get_adrules_governed(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: ad_id
	ad_id, err := request.RequireString("ad_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter ad_id: %v", err)), nil
	}
	args["ad_id"] = ad_id

	// Optional: pass_evaluation
	if val := request.GetBool("pass_evaluation", false); val {
		args["pass_evaluation"] = val
	}

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Ad_get_adrules_governed(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute ad_get_adrules_governed: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAd_get_copies handles the ad_get_copies tool with context-based auth
func HandleAd_get_copies(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: ad_id
	ad_id, err := request.RequireString("ad_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter ad_id: %v", err)), nil
	}
	args["ad_id"] = ad_id

	// Optional: date_preset
	if val := request.GetString("date_preset", ""); val != "" {
		args["date_preset"] = val
	}

	// Optional: effective_status
	// array type - using string
	if val := request.GetString("effective_status", ""); val != "" {
		args["effective_status"] = val
	}

	// Optional: time_range
	if val := request.GetString("time_range", ""); val != "" {
		args["time_range"] = val
	}

	// Optional: updated_since
	if val := request.GetInt("updated_since", 0); val != 0 {
		args["updated_since"] = val
	}

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Ad_get_copies(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute ad_get_copies: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAd_post_copies handles the ad_post_copies tool with context-based auth
func HandleAd_post_copies(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: ad_id
	ad_id, err := request.RequireString("ad_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter ad_id: %v", err)), nil
	}
	args["ad_id"] = ad_id

	// Optional: adset_id
	if val := request.GetString("adset_id", ""); val != "" {
		args["adset_id"] = val
	}

	// Optional: creative_parameters
	if val := request.GetString("creative_parameters", ""); val != "" {
		args["creative_parameters"] = val
	}

	// Optional: rename_options
	// object type - using string
	if val := request.GetString("rename_options", ""); val != "" {
		args["rename_options"] = val
	}

	// Optional: status_option
	if val := request.GetString("status_option", ""); val != "" {
		args["status_option"] = val
	}

	// Call the client method
	result, err := client.Ad_post_copies(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute ad_post_copies: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAd_get_insights handles the ad_get_insights tool with context-based auth
func HandleAd_get_insights(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: ad_id
	ad_id, err := request.RequireString("ad_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter ad_id: %v", err)), nil
	}
	args["ad_id"] = ad_id

	// Optional: action_attribution_windows
	// array type - using string
	if val := request.GetString("action_attribution_windows", ""); val != "" {
		args["action_attribution_windows"] = val
	}

	// Optional: action_breakdowns
	// array type - using string
	if val := request.GetString("action_breakdowns", ""); val != "" {
		args["action_breakdowns"] = val
	}

	// Optional: action_report_time
	if val := request.GetString("action_report_time", ""); val != "" {
		args["action_report_time"] = val
	}

	// Optional: breakdowns
	// array type - using string
	if val := request.GetString("breakdowns", ""); val != "" {
		args["breakdowns"] = val
	}

	// Optional: date_preset
	if val := request.GetString("date_preset", ""); val != "" {
		args["date_preset"] = val
	}

	// Optional: default_summary
	if val := request.GetBool("default_summary", false); val {
		args["default_summary"] = val
	}

	// Optional: export_columns
	// array type - using string
	if val := request.GetString("export_columns", ""); val != "" {
		args["export_columns"] = val
	}

	// Optional: export_format
	if val := request.GetString("export_format", ""); val != "" {
		args["export_format"] = val
	}

	// Optional: export_name
	if val := request.GetString("export_name", ""); val != "" {
		args["export_name"] = val
	}

	// Optional: fields
	// array type - using string
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: filtering
	// array type - using string
	if val := request.GetString("filtering", ""); val != "" {
		args["filtering"] = val
	}

	// Optional: level
	if val := request.GetString("level", ""); val != "" {
		args["level"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: product_id_limit
	if val := request.GetInt("product_id_limit", 0); val != 0 {
		args["product_id_limit"] = val
	}

	// Optional: sort
	// array type - using string
	if val := request.GetString("sort", ""); val != "" {
		args["sort"] = val
	}

	// Optional: summary
	// array type - using string
	if val := request.GetString("summary", ""); val != "" {
		args["summary"] = val
	}

	// Optional: summary_action_breakdowns
	// array type - using string
	if val := request.GetString("summary_action_breakdowns", ""); val != "" {
		args["summary_action_breakdowns"] = val
	}

	// Optional: time_increment
	if val := request.GetString("time_increment", ""); val != "" {
		args["time_increment"] = val
	}

	// Optional: time_range
	if val := request.GetString("time_range", ""); val != "" {
		args["time_range"] = val
	}

	// Optional: time_ranges
	// array type - using string
	if val := request.GetString("time_ranges", ""); val != "" {
		args["time_ranges"] = val
	}

	// Optional: use_account_attribution_setting
	if val := request.GetBool("use_account_attribution_setting", false); val {
		args["use_account_attribution_setting"] = val
	}

	// Optional: use_unified_attribution_setting
	if val := request.GetBool("use_unified_attribution_setting", false); val {
		args["use_unified_attribution_setting"] = val
	}

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Ad_get_insights(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute ad_get_insights: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAd_post_insights handles the ad_post_insights tool with context-based auth
func HandleAd_post_insights(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: ad_id
	ad_id, err := request.RequireString("ad_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter ad_id: %v", err)), nil
	}
	args["ad_id"] = ad_id

	// Optional: action_attribution_windows
	// array type - using string
	if val := request.GetString("action_attribution_windows", ""); val != "" {
		args["action_attribution_windows"] = val
	}

	// Optional: action_breakdowns
	// array type - using string
	if val := request.GetString("action_breakdowns", ""); val != "" {
		args["action_breakdowns"] = val
	}

	// Optional: action_report_time
	if val := request.GetString("action_report_time", ""); val != "" {
		args["action_report_time"] = val
	}

	// Optional: breakdowns
	// array type - using string
	if val := request.GetString("breakdowns", ""); val != "" {
		args["breakdowns"] = val
	}

	// Optional: date_preset
	if val := request.GetString("date_preset", ""); val != "" {
		args["date_preset"] = val
	}

	// Optional: default_summary
	if val := request.GetBool("default_summary", false); val {
		args["default_summary"] = val
	}

	// Optional: export_columns
	// array type - using string
	if val := request.GetString("export_columns", ""); val != "" {
		args["export_columns"] = val
	}

	// Optional: export_format
	if val := request.GetString("export_format", ""); val != "" {
		args["export_format"] = val
	}

	// Optional: export_name
	if val := request.GetString("export_name", ""); val != "" {
		args["export_name"] = val
	}

	// Optional: fields
	// array type - using string
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: filtering
	// array type - using string
	if val := request.GetString("filtering", ""); val != "" {
		args["filtering"] = val
	}

	// Optional: level
	if val := request.GetString("level", ""); val != "" {
		args["level"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: product_id_limit
	if val := request.GetInt("product_id_limit", 0); val != 0 {
		args["product_id_limit"] = val
	}

	// Optional: sort
	// array type - using string
	if val := request.GetString("sort", ""); val != "" {
		args["sort"] = val
	}

	// Optional: summary
	// array type - using string
	if val := request.GetString("summary", ""); val != "" {
		args["summary"] = val
	}

	// Optional: summary_action_breakdowns
	// array type - using string
	if val := request.GetString("summary_action_breakdowns", ""); val != "" {
		args["summary_action_breakdowns"] = val
	}

	// Optional: time_increment
	if val := request.GetString("time_increment", ""); val != "" {
		args["time_increment"] = val
	}

	// Optional: time_range
	if val := request.GetString("time_range", ""); val != "" {
		args["time_range"] = val
	}

	// Optional: time_ranges
	// array type - using string
	if val := request.GetString("time_ranges", ""); val != "" {
		args["time_ranges"] = val
	}

	// Optional: use_account_attribution_setting
	if val := request.GetBool("use_account_attribution_setting", false); val {
		args["use_account_attribution_setting"] = val
	}

	// Optional: use_unified_attribution_setting
	if val := request.GetBool("use_unified_attribution_setting", false); val {
		args["use_unified_attribution_setting"] = val
	}

	// Call the client method
	result, err := client.Ad_post_insights(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute ad_post_insights: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAd_get_leads handles the ad_get_leads tool with context-based auth
func HandleAd_get_leads(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: ad_id
	ad_id, err := request.RequireString("ad_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter ad_id: %v", err)), nil
	}
	args["ad_id"] = ad_id

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Ad_get_leads(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute ad_get_leads: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAd_get_previews handles the ad_get_previews tool with context-based auth
func HandleAd_get_previews(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: ad_id
	ad_id, err := request.RequireString("ad_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter ad_id: %v", err)), nil
	}
	args["ad_id"] = ad_id

	// Required: ad_format
	ad_format, err := request.RequireString("ad_format")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter ad_format: %v", err)), nil
	}
	args["ad_format"] = ad_format

	// Optional: creative_feature
	if val := request.GetString("creative_feature", ""); val != "" {
		args["creative_feature"] = val
	}

	// Optional: dynamic_asset_label
	if val := request.GetString("dynamic_asset_label", ""); val != "" {
		args["dynamic_asset_label"] = val
	}

	// Optional: dynamic_creative_spec
	// object type - using string
	if val := request.GetString("dynamic_creative_spec", ""); val != "" {
		args["dynamic_creative_spec"] = val
	}

	// Optional: dynamic_customization
	// object type - using string
	if val := request.GetString("dynamic_customization", ""); val != "" {
		args["dynamic_customization"] = val
	}

	// Optional: end_date
	if val := request.GetString("end_date", ""); val != "" {
		args["end_date"] = val
	}

	// Optional: height
	if val := request.GetInt("height", 0); val != 0 {
		args["height"] = val
	}

	// Optional: locale
	if val := request.GetString("locale", ""); val != "" {
		args["locale"] = val
	}

	// Optional: place_page_id
	if val := request.GetInt("place_page_id", 0); val != 0 {
		args["place_page_id"] = val
	}

	// Optional: post
	// object type - using string
	if val := request.GetString("post", ""); val != "" {
		args["post"] = val
	}

	// Optional: product_item_ids
	// array type - using string
	if val := request.GetString("product_item_ids", ""); val != "" {
		args["product_item_ids"] = val
	}

	// Optional: render_type
	if val := request.GetString("render_type", ""); val != "" {
		args["render_type"] = val
	}

	// Optional: start_date
	if val := request.GetString("start_date", ""); val != "" {
		args["start_date"] = val
	}

	// Optional: width
	if val := request.GetInt("width", 0); val != 0 {
		args["width"] = val
	}

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Ad_get_previews(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute ad_get_previews: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAd_get_targetingsentencelines handles the ad_get_targetingsentencelines tool with context-based auth
func HandleAd_get_targetingsentencelines(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: ad_id
	ad_id, err := request.RequireString("ad_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter ad_id: %v", err)), nil
	}
	args["ad_id"] = ad_id

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Ad_get_targetingsentencelines(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute ad_get_targetingsentencelines: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAd_delete_ handles the ad_delete_ tool with context-based auth
func HandleAd_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: ad_id
	ad_id, err := request.RequireString("ad_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter ad_id: %v", err)), nil
	}
	args["ad_id"] = ad_id

	// Call the client method
	result, err := client.Ad_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute ad_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAd_get_ handles the ad_get_ tool with context-based auth
func HandleAd_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: ad_id
	ad_id, err := request.RequireString("ad_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter ad_id: %v", err)), nil
	}
	args["ad_id"] = ad_id

	// Optional: am_call_tags
	if val := request.GetString("am_call_tags", ""); val != "" {
		args["am_call_tags"] = val
	}

	// Optional: date_preset
	if val := request.GetString("date_preset", ""); val != "" {
		args["date_preset"] = val
	}

	// Optional: from_adtable
	if val := request.GetBool("from_adtable", false); val {
		args["from_adtable"] = val
	}

	// Optional: review_feedback_breakdown
	if val := request.GetBool("review_feedback_breakdown", false); val {
		args["review_feedback_breakdown"] = val
	}

	// Optional: time_range
	if val := request.GetString("time_range", ""); val != "" {
		args["time_range"] = val
	}

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Ad_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute ad_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAd_post_ handles the ad_post_ tool with context-based auth
func HandleAd_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: ad_id
	ad_id, err := request.RequireString("ad_id")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter ad_id: %v", err)), nil
	}
	args["ad_id"] = ad_id

	// Optional: ad_schedule_end_time
	if val := request.GetString("ad_schedule_end_time", ""); val != "" {
		args["ad_schedule_end_time"] = val
	}

	// Optional: ad_schedule_start_time
	if val := request.GetString("ad_schedule_start_time", ""); val != "" {
		args["ad_schedule_start_time"] = val
	}

	// Optional: adlabels
	// array type - using string
	if val := request.GetString("adlabels", ""); val != "" {
		args["adlabels"] = val
	}

	// Optional: adset_spec
	if val := request.GetString("adset_spec", ""); val != "" {
		args["adset_spec"] = val
	}

	// Optional: audience_id
	if val := request.GetString("audience_id", ""); val != "" {
		args["audience_id"] = val
	}

	// Optional: bid_amount
	if val := request.GetInt("bid_amount", 0); val != 0 {
		args["bid_amount"] = val
	}

	// Optional: conversion_domain
	if val := request.GetString("conversion_domain", ""); val != "" {
		args["conversion_domain"] = val
	}

	// Optional: creative
	if val := request.GetString("creative", ""); val != "" {
		args["creative"] = val
	}

	// Optional: creative_asset_groups_spec
	// object type - using string
	if val := request.GetString("creative_asset_groups_spec", ""); val != "" {
		args["creative_asset_groups_spec"] = val
	}

	// Optional: display_sequence
	if val := request.GetInt("display_sequence", 0); val != 0 {
		args["display_sequence"] = val
	}

	// Optional: draft_adgroup_id
	if val := request.GetString("draft_adgroup_id", ""); val != "" {
		args["draft_adgroup_id"] = val
	}

	// Optional: engagement_audience
	if val := request.GetBool("engagement_audience", false); val {
		args["engagement_audience"] = val
	}

	// Optional: execution_options
	// array type - using string
	if val := request.GetString("execution_options", ""); val != "" {
		args["execution_options"] = val
	}

	// Optional: include_demolink_hashes
	if val := request.GetBool("include_demolink_hashes", false); val {
		args["include_demolink_hashes"] = val
	}

	// Optional: name
	if val := request.GetString("name", ""); val != "" {
		args["name"] = val
	}

	// Optional: priority
	if val := request.GetInt("priority", 0); val != 0 {
		args["priority"] = val
	}

	// Optional: status
	if val := request.GetString("status", ""); val != "" {
		args["status"] = val
	}

	// Optional: tracking_specs
	// object type - using string
	if val := request.GetString("tracking_specs", ""); val != "" {
		args["tracking_specs"] = val
	}

	// Call the client method
	result, err := client.Ad_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute ad_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
