// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetLeadgenFormTools returns MCP tools for LeadgenForm
func GetLeadgenFormTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool

	// facebook_leadgenform_get_leads tool
	facebook_leadgenform_get_leadsTool := mcp.NewTool("facebook_leadgenform_get_leads",
		mcp.WithDescription("GET leads for LeadgenForm"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_leadgenform_get_leadsTool)

	// facebook_leadgenform_get_test_leads tool
	facebook_leadgenform_get_test_leadsTool := mcp.NewTool("facebook_leadgenform_get_test_leads",
		mcp.WithDescription("GET test_leads for LeadgenForm"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_leadgenform_get_test_leadsTool)

	// facebook_leadgenform_post_test_leads tool
	facebook_leadgenform_post_test_leadsTool := mcp.NewTool("facebook_leadgenform_post_test_leads",
		mcp.WithDescription("POST test_leads for LeadgenForm"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("custom_disclaimer_responses",
			mcp.Description("custom_disclaimer_responses parameter for test_leads"),
		),
		mcp.WithString("field_data",
			mcp.Description("field_data parameter for test_leads"),
		),
	)
	tools = append(tools, facebook_leadgenform_post_test_leadsTool)

	// facebook_leadgenform_get_ tool
	facebook_leadgenform_get_Tool := mcp.NewTool("facebook_leadgenform_get_",
		mcp.WithDescription("GET  for LeadgenForm"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_leadgenform_get_Tool)

	// facebook_leadgenform_post_ tool
	facebook_leadgenform_post_Tool := mcp.NewTool("facebook_leadgenform_post_",
		mcp.WithDescription("POST  for LeadgenForm"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("status",
			mcp.Description("status parameter for "),
			mcp.Enum("ACTIVE", "ARCHIVED", "DELETED", "DRAFT"),
		),
	)
	tools = append(tools, facebook_leadgenform_post_Tool)

	return tools
}

// LeadgenForm handlers

// HandleFacebook_leadgenform_get_leads handles the facebook_leadgenform_get_leads tool
func HandleFacebook_leadgenform_get_leads(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewLeadgenFormClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_leadgenform_get_leads(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_leadgenform_get_leads: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_leadgenform_get_test_leads handles the facebook_leadgenform_get_test_leads tool
func HandleFacebook_leadgenform_get_test_leads(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewLeadgenFormClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_leadgenform_get_test_leads(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_leadgenform_get_test_leads: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_leadgenform_post_test_leads handles the facebook_leadgenform_post_test_leads tool
func HandleFacebook_leadgenform_post_test_leads(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewLeadgenFormClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: custom_disclaimer_responses
	// array type - using string
	if val := request.GetString("custom_disclaimer_responses", ""); val != "" {
		args["custom_disclaimer_responses"] = val
	}

	// Optional: field_data
	// array type - using string
	if val := request.GetString("field_data", ""); val != "" {
		args["field_data"] = val
	}

	// Call the client method
	result, err := client.Facebook_leadgenform_post_test_leads(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_leadgenform_post_test_leads: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_leadgenform_get_ handles the facebook_leadgenform_get_ tool
func HandleFacebook_leadgenform_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewLeadgenFormClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_leadgenform_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_leadgenform_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_leadgenform_post_ handles the facebook_leadgenform_post_ tool
func HandleFacebook_leadgenform_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewLeadgenFormClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: status
	if val := request.GetString("status", ""); val != "" {
		args["status"] = val
	}

	// Call the client method
	result, err := client.Facebook_leadgenform_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_leadgenform_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
