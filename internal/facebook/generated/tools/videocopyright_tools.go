// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetVideoCopyrightTools returns MCP tools for VideoCopyright
func GetVideoCopyrightTools() []mcp.Tool {
	var tools []mcp.Tool

	// videocopyright_get_update_records tool
	// Available fields for MediaCopyrightUpdateRecord: action_types, actor, actor_type, creation_time, id, ownership_countries, whitelisted_accounts
	videocopyright_get_update_recordsTool := mcp.NewTool("videocopyright_get_update_records",
		mcp.WithDescription("GET update_records for VideoCopyright"),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for MediaCopyrightUpdateRecord objects. Available fields: action_types, actor, actor_type, creation_time, id, ownership_countries, whitelisted_accounts"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, videocopyright_get_update_recordsTool)

	// videocopyright_get_ tool
	// Available fields for VideoCopyright: content_category, copyright_content_id, creator, excluded_ownership_segments, id, in_conflict, monitoring_status, monitoring_type, ownership_countries, reference_file, reference_file_disabled, reference_file_disabled_by_ops, reference_owner_id, rule_ids, tags, whitelisted_ids
	videocopyright_get_Tool := mcp.NewTool("videocopyright_get_",
		mcp.WithDescription("GET  for VideoCopyright"),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for VideoCopyright objects. Available fields: content_category, copyright_content_id, creator, excluded_ownership_segments, id, in_conflict, monitoring_status, monitoring_type, ownership_countries, reference_file, reference_file_disabled, reference_file_disabled_by_ops, reference_owner_id, rule_ids, tags (and 1 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, videocopyright_get_Tool)

	// videocopyright_post_ tool
	videocopyright_post_Tool := mcp.NewTool("videocopyright_post_",
		mcp.WithDescription("POST  for VideoCopyright"),
		mcp.WithBoolean("append_excluded_ownership_segments",
			mcp.Description("append_excluded_ownership_segments parameter for "),
		),
		mcp.WithString("attribution_id",
			mcp.Description("attribution_id parameter for "),
		),
		mcp.WithString("content_category",
			mcp.Description("content_category parameter for "),
			mcp.Enum("episode", "movie", "web"),
		),
		mcp.WithString("excluded_ownership_countries",
			mcp.Description("excluded_ownership_countries parameter for "),
		),
		mcp.WithString("excluded_ownership_segments",
			mcp.Description("excluded_ownership_segments parameter for "),
		),
		mcp.WithBoolean("is_reference_disabled",
			mcp.Description("is_reference_disabled parameter for "),
		),
		mcp.WithString("monitoring_type",
			mcp.Description("monitoring_type parameter for "),
			mcp.Enum("AUDIO_ONLY", "VIDEO_AND_AUDIO", "VIDEO_ONLY"),
		),
		mcp.WithString("ownership_countries",
			mcp.Description("ownership_countries parameter for "),
		),
		mcp.WithString("rule_id",
			mcp.Description("rule_id parameter for "),
		),
		mcp.WithString("whitelisted_ids",
			mcp.Description("whitelisted_ids parameter for "),
		),
		mcp.WithString("whitelisted_ig_user_ids",
			mcp.Description("whitelisted_ig_user_ids parameter for "),
		),
	)
	tools = append(tools, videocopyright_post_Tool)

	return tools
}

// VideoCopyright handlers

// HandleVideocopyright_get_update_records handles the videocopyright_get_update_records tool with context-based auth
func HandleVideocopyright_get_update_records(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewVideoCopyrightClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Videocopyright_get_update_records(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute videocopyright_get_update_records: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleVideocopyright_get_ handles the videocopyright_get_ tool with context-based auth
func HandleVideocopyright_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewVideoCopyrightClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Videocopyright_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute videocopyright_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleVideocopyright_post_ handles the videocopyright_post_ tool with context-based auth
func HandleVideocopyright_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewVideoCopyrightClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: append_excluded_ownership_segments
	if val := request.GetBool("append_excluded_ownership_segments", false); val {
		args["append_excluded_ownership_segments"] = val
	}

	// Optional: attribution_id
	if val := request.GetString("attribution_id", ""); val != "" {
		args["attribution_id"] = val
	}

	// Optional: content_category
	if val := request.GetString("content_category", ""); val != "" {
		args["content_category"] = val
	}

	// Optional: excluded_ownership_countries
	// array type - using string
	if val := request.GetString("excluded_ownership_countries", ""); val != "" {
		args["excluded_ownership_countries"] = val
	}

	// Optional: excluded_ownership_segments
	// array type - using string
	if val := request.GetString("excluded_ownership_segments", ""); val != "" {
		args["excluded_ownership_segments"] = val
	}

	// Optional: is_reference_disabled
	if val := request.GetBool("is_reference_disabled", false); val {
		args["is_reference_disabled"] = val
	}

	// Optional: monitoring_type
	if val := request.GetString("monitoring_type", ""); val != "" {
		args["monitoring_type"] = val
	}

	// Optional: ownership_countries
	// array type - using string
	if val := request.GetString("ownership_countries", ""); val != "" {
		args["ownership_countries"] = val
	}

	// Optional: rule_id
	if val := request.GetString("rule_id", ""); val != "" {
		args["rule_id"] = val
	}

	// Optional: whitelisted_ids
	// array type - using string
	if val := request.GetString("whitelisted_ids", ""); val != "" {
		args["whitelisted_ids"] = val
	}

	// Optional: whitelisted_ig_user_ids
	// array type - using string
	if val := request.GetString("whitelisted_ig_user_ids", ""); val != "" {
		args["whitelisted_ig_user_ids"] = val
	}

	// Call the client method
	result, err := client.Videocopyright_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute videocopyright_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
