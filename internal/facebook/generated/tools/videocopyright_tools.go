// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetVideoCopyrightTools returns MCP tools for VideoCopyright
func GetVideoCopyrightTools() []mcp.Tool {
	var tools []mcp.Tool


	// videocopyright_get_update_records tool
	// Available fields for MediaCopyrightUpdateRecord: action_types, actor, actor_type, creation_time, id, ownership_countries, whitelisted_accounts
	videocopyright_get_update_recordsTool := mcp.NewTool("videocopyright_get_update_records",
		mcp.WithDescription("GET update_records for VideoCopyright"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for MediaCopyrightUpdateRecord objects. Available fields: action_types, actor, actor_type, creation_time, id, ownership_countries, whitelisted_accounts"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, videocopyright_get_update_recordsTool)

	// videocopyright_get_ tool
	// Available fields for VideoCopyright: content_category, copyright_content_id, creator, excluded_ownership_segments, id, in_conflict, monitoring_status, monitoring_type, ownership_countries, reference_file, reference_file_disabled, reference_file_disabled_by_ops, reference_owner_id, rule_ids, tags, whitelisted_ids
	videocopyright_get_Tool := mcp.NewTool("videocopyright_get_",
		mcp.WithDescription("GET  for VideoCopyright"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for VideoCopyright objects. Available fields: content_category, copyright_content_id, creator, excluded_ownership_segments, id, in_conflict, monitoring_status, monitoring_type, ownership_countries, reference_file, reference_file_disabled, reference_file_disabled_by_ops, reference_owner_id, rule_ids, tags (and 1 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, videocopyright_get_Tool)

	// videocopyright_post_ tool
	// Params object accepts: append_excluded_ownership_segments (bool), attribution_id (string), content_category (videocopyright_content_category), excluded_ownership_countries (list<string>), excluded_ownership_segments (list<Object>), is_reference_disabled (bool), monitoring_type (videocopyright_monitoring_type), ownership_countries (list<string>), rule_id (string), whitelisted_ids (list<string>), whitelisted_ig_user_ids (list<string>)
	videocopyright_post_Tool := mcp.NewTool("videocopyright_post_",
		mcp.WithDescription("POST  for VideoCopyright"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"append_excluded_ownership_segments": map[string]any{
					"type": "boolean",
					"description": "append_excluded_ownership_segments parameter",
				},
				"attribution_id": map[string]any{
					"type": "string",
					"description": "attribution_id parameter",
				},
				"content_category": map[string]any{
					"type": "string",
					"description": "content_category parameter",
					"enum": []string{ "episode", "movie", "web" },
				},
				"excluded_ownership_countries": map[string]any{
					"type": "array",
					"description": "excluded_ownership_countries parameter",
					"items": map[string]any{"type": "string"},
				},
				"excluded_ownership_segments": map[string]any{
					"type": "array",
					"description": "excluded_ownership_segments parameter",
					"items": map[string]any{"type": "object"},
				},
				"is_reference_disabled": map[string]any{
					"type": "boolean",
					"description": "is_reference_disabled parameter",
				},
				"monitoring_type": map[string]any{
					"type": "string",
					"description": "monitoring_type parameter",
					"enum": []string{ "AUDIO_ONLY", "VIDEO_AND_AUDIO", "VIDEO_ONLY" },
				},
				"ownership_countries": map[string]any{
					"type": "array",
					"description": "ownership_countries parameter",
					"items": map[string]any{"type": "string"},
				},
				"rule_id": map[string]any{
					"type": "string",
					"description": "rule_id parameter",
				},
				"whitelisted_ids": map[string]any{
					"type": "array",
					"description": "whitelisted_ids parameter",
					"items": map[string]any{"type": "string"},
				},
				"whitelisted_ig_user_ids": map[string]any{
					"type": "array",
					"description": "whitelisted_ig_user_ids parameter",
					"items": map[string]any{"type": "string"},
				},
			}),
			mcp.Description("Parameters object containing: append_excluded_ownership_segments (boolean), attribution_id (string), content_category (videocopyright_content_category) [episode, movie, web], excluded_ownership_countries (array<string>), excluded_ownership_segments (array<object>), is_reference_disabled (boolean), monitoring_type (videocopyright_monitoring_type) [AUDIO_ONLY, VIDEO_AND_AUDIO, VIDEO_ONLY], ownership_countries (array<string>), rule_id (string), whitelisted_ids (array<string>), whitelisted_ig_user_ids (array<string>)"),
		),
	)
	tools = append(tools, videocopyright_post_Tool)


	return tools
}

// VideoCopyright handlers


// HandleVideocopyright_get_update_records handles the videocopyright_get_update_records tool with context-based auth
func HandleVideocopyright_get_update_records(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewVideoCopyrightClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Videocopyright_get_update_records(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute videocopyright_get_update_records: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleVideocopyright_get_ handles the videocopyright_get_ tool with context-based auth
func HandleVideocopyright_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewVideoCopyrightClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Videocopyright_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute videocopyright_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleVideocopyright_post_ handles the videocopyright_post_ tool with context-based auth
func HandleVideocopyright_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewVideoCopyrightClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the client method
	result, err := client.Videocopyright_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute videocopyright_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

