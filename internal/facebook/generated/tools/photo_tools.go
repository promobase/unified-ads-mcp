// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetPhotoTools returns MCP tools for Photo
func GetPhotoTools() []mcp.Tool {
	var tools []mcp.Tool

	// photo_get_comments tool
	// Available fields for Comment: admin_creator, application, attachment, can_comment, can_hide, can_like, can_remove, can_reply_privately, comment_count, created_time, from, id, is_hidden, is_private, like_count, live_broadcast_timestamp, message, message_tags, object, parent, permalink_url, private_reply_conversation, user_likes
	photo_get_commentsTool := mcp.NewTool("photo_get_comments",
		mcp.WithDescription("GET comments for Photo"),
		mcp.WithString("filter",
			mcp.Description("filter parameter for comments"),
			mcp.Enum("stream", "toplevel"),
		),
		mcp.WithString("live_filter",
			mcp.Description("live_filter parameter for comments"),
			mcp.Enum("filter_low_quality", "no_filter"),
		),
		mcp.WithString("order",
			mcp.Description("order parameter for comments"),
			mcp.Enum("chronological", "reverse_chronological"),
		),
		mcp.WithString("since",
			mcp.Description("since parameter for comments"),
		),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for Comment objects. Available fields: admin_creator, application, attachment, can_comment, can_hide, can_like, can_remove, can_reply_privately, comment_count, created_time, from, id, is_hidden, is_private, like_count (and 8 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, photo_get_commentsTool)

	// photo_post_comments tool
	photo_post_commentsTool := mcp.NewTool("photo_post_comments",
		mcp.WithDescription("POST comments for Photo"),
		mcp.WithString("attachment_id",
			mcp.Description("attachment_id parameter for comments"),
		),
		mcp.WithString("attachment_share_url",
			mcp.Description("attachment_share_url parameter for comments"),
		),
		mcp.WithString("attachment_url",
			mcp.Description("attachment_url parameter for comments"),
		),
		mcp.WithString("comment_privacy_value",
			mcp.Description("comment_privacy_value parameter for comments"),
			mcp.Enum("DECLINED_BY_ADMIN_ASSISTANT", "DEFAULT_PRIVACY", "FRIENDS_AND_POST_OWNER", "FRIENDS_ONLY", "GRAPHQL_MULTIPLE_VALUE_HACK_DO_NOT_USE", "OWNER_OR_COMMENTER", "PENDING_APPROVAL", "REMOVED_BY_ADMIN_ASSISTANT", "SIDE_CONVERSATION", "SIDE_CONVERSATION_AND_POST_OWNER", "SPOTLIGHT_TAB"),
		),
		mcp.WithString("facepile_mentioned_ids",
			mcp.Description("facepile_mentioned_ids parameter for comments"),
		),
		mcp.WithString("feedback_source",
			mcp.Description("feedback_source parameter for comments"),
		),
		mcp.WithBoolean("is_offline",
			mcp.Description("is_offline parameter for comments"),
		),
		mcp.WithString("message",
			mcp.Description("message parameter for comments"),
		),
		mcp.WithString("nectar_module",
			mcp.Description("nectar_module parameter for comments"),
		),
		mcp.WithString("object_id",
			mcp.Description("object_id parameter for comments"),
		),
		mcp.WithString("parent_comment_id",
			mcp.Description("parent_comment_id parameter for comments"),
		),
		mcp.WithString("text",
			mcp.Description("text parameter for comments"),
		),
		mcp.WithString("tracking",
			mcp.Description("tracking parameter for comments"),
		),
	)
	tools = append(tools, photo_post_commentsTool)

	// photo_get_insights tool
	// Available fields for InsightsResult: description, description_from_api_doc, id, name, period, title, values
	photo_get_insightsTool := mcp.NewTool("photo_get_insights",
		mcp.WithDescription("GET insights for Photo"),
		mcp.WithString("date_preset",
			mcp.Description("date_preset parameter for insights"),
			mcp.Enum("data_maximum", "last_14d", "last_28d", "last_30d", "last_3d", "last_7d", "last_90d", "last_month", "last_quarter", "last_week_mon_sun", "last_week_sun_sat", "last_year", "maximum", "this_month", "this_quarter", "this_week_mon_today", "this_week_sun_today", "this_year", "today", "yesterday"),
		),
		mcp.WithString("metric",
			mcp.Description("metric parameter for insights"),
		),
		mcp.WithString("period",
			mcp.Description("period parameter for insights"),
			mcp.Enum("day", "days_28", "lifetime", "month", "total_over_range", "week"),
		),
		mcp.WithString("since",
			mcp.Description("since parameter for insights"),
		),
		mcp.WithString("until",
			mcp.Description("until parameter for insights"),
		),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for InsightsResult objects. Available fields: description, description_from_api_doc, id, name, period, title, values"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, photo_get_insightsTool)

	// photo_get_likes tool
	// Available fields for Profile: can_post, id, link, name, pic, pic_crop, pic_large, pic_small, pic_square, profile_type, username
	photo_get_likesTool := mcp.NewTool("photo_get_likes",
		mcp.WithDescription("GET likes for Photo"),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for Profile objects. Available fields: can_post, id, link, name, pic, pic_crop, pic_large, pic_small, pic_square, profile_type, username"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, photo_get_likesTool)

	// photo_post_likes tool
	photo_post_likesTool := mcp.NewTool("photo_post_likes",
		mcp.WithDescription("POST likes for Photo"),
		mcp.WithString("feedback_source",
			mcp.Description("feedback_source parameter for likes"),
		),
		mcp.WithString("nectar_module",
			mcp.Description("nectar_module parameter for likes"),
		),
		mcp.WithBoolean("notify",
			mcp.Description("notify parameter for likes"),
		),
		mcp.WithString("tracking",
			mcp.Description("tracking parameter for likes"),
		),
	)
	tools = append(tools, photo_post_likesTool)

	// photo_get_sponsor_tags tool
	// Available fields for Page: about, access_token, ad_campaign, affiliation, app_id, artists_we_like, attire, available_promo_offer_ids, awards, band_interests, band_members, best_page, bio, birthday, booking_agent, breaking_news_usage, built, business, can_checkin, can_post, category, category_list, checkins, company_overview, connected_instagram_account, connected_page_backed_instagram_account, contact_address, copyright_whitelisted_ig_partners, country_page_likes, cover, culinary_team, current_location, delivery_and_pickup_option_info, description, description_html, differently_open_offerings, directed_by, display_subtext, displayed_message_response_time, does_viewer_have_page_permission_link_ig, emails, engagement, fan_count, featured_video, features, followers_count, food_styles, founded, general_info, general_manager, genre, global_brand_page_name, global_brand_root_id, has_added_app, has_lead_access, has_transitioned_to_new_page_experience, has_whatsapp_business_number, has_whatsapp_number, hometown, hours, id, impressum, influences, instagram_business_account, is_always_open, is_calling_eligible, is_chain, is_community_page, is_eligible_for_branded_content, is_eligible_for_disable_connect_ig_btn_for_non_page_admin_am_web, is_messenger_bot_get_started_enabled, is_messenger_platform_bot, is_owned, is_permanently_closed, is_published, is_unclaimed, is_verified, is_webhooks_subscribed, keywords, leadgen_tos_acceptance_time, leadgen_tos_accepted, leadgen_tos_accepting_user, link, location, members, merchant_id, merchant_review_status, messaging_feature_status, messenger_ads_default_icebreakers, messenger_ads_default_quick_replies, messenger_ads_quick_replies_type, mini_shop_storefront, mission, mpg, name, name_with_location_descriptor, network, new_like_count, offer_eligible, overall_star_rating, owner_business, page_token, parent_page, parking, payment_options, personal_info, personal_interests, pharma_safety_info, phone, pickup_options, place_type, plot_outline, preferred_audience, press_contact, price_range, privacy_info_url, produced_by, products, promotion_eligible, promotion_ineligible_reason, public_transit, rating_count, recipient, record_label, release_date, restaurant_services, restaurant_specialties, schedule, screenplay_by, season, single_line_address, starring, start_info, store_code, store_location_descriptor, store_number, studio, supports_donate_button_in_live_video, talking_about_count, temporary_status, unread_message_count, unread_notif_count, unseen_message_count, user_access_expire_time, username, verification_status, voip_info, website, were_here_count, whatsapp_number, written_by
	photo_get_sponsor_tagsTool := mcp.NewTool("photo_get_sponsor_tags",
		mcp.WithDescription("GET sponsor_tags for Photo"),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for Page objects. Available fields: about, access_token, ad_campaign, affiliation, app_id, artists_we_like, attire, available_promo_offer_ids, awards, band_interests, band_members, best_page, bio, birthday, booking_agent (and 136 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, photo_get_sponsor_tagsTool)

	// photo_delete_ tool
	photo_delete_Tool := mcp.NewTool("photo_delete_",
		mcp.WithDescription("DELETE  for Photo"),
	)
	tools = append(tools, photo_delete_Tool)

	// photo_get_ tool
	// Available fields for Photo: album, alt_text, alt_text_custom, backdated_time, backdated_time_granularity, can_backdate, can_delete, can_tag, created_time, event, from, height, icon, id, images, link, name, name_tags, page_story_id, picture, place, position, source, target, updated_time, webp_images, width
	photo_get_Tool := mcp.NewTool("photo_get_",
		mcp.WithDescription("GET  for Photo"),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for Photo objects. Available fields: album, alt_text, alt_text_custom, backdated_time, backdated_time_granularity, can_backdate, can_delete, can_tag, created_time, event, from, height, icon, id, images (and 12 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, photo_get_Tool)

	return tools
}

// Photo handlers

// HandlePhoto_get_comments handles the photo_get_comments tool with context-based auth
func HandlePhoto_get_comments(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPhotoClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: filter
	if val := request.GetString("filter", ""); val != "" {
		args["filter"] = val
	}

	// Optional: live_filter
	if val := request.GetString("live_filter", ""); val != "" {
		args["live_filter"] = val
	}

	// Optional: order
	if val := request.GetString("order", ""); val != "" {
		args["order"] = val
	}

	// Optional: since
	if val := request.GetString("since", ""); val != "" {
		args["since"] = val
	}

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Photo_get_comments(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute photo_get_comments: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePhoto_post_comments handles the photo_post_comments tool with context-based auth
func HandlePhoto_post_comments(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPhotoClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: attachment_id
	if val := request.GetString("attachment_id", ""); val != "" {
		args["attachment_id"] = val
	}

	// Optional: attachment_share_url
	if val := request.GetString("attachment_share_url", ""); val != "" {
		args["attachment_share_url"] = val
	}

	// Optional: attachment_url
	if val := request.GetString("attachment_url", ""); val != "" {
		args["attachment_url"] = val
	}

	// Optional: comment_privacy_value
	if val := request.GetString("comment_privacy_value", ""); val != "" {
		args["comment_privacy_value"] = val
	}

	// Optional: facepile_mentioned_ids
	// array type - using string
	if val := request.GetString("facepile_mentioned_ids", ""); val != "" {
		args["facepile_mentioned_ids"] = val
	}

	// Optional: feedback_source
	if val := request.GetString("feedback_source", ""); val != "" {
		args["feedback_source"] = val
	}

	// Optional: is_offline
	if val := request.GetBool("is_offline", false); val {
		args["is_offline"] = val
	}

	// Optional: message
	if val := request.GetString("message", ""); val != "" {
		args["message"] = val
	}

	// Optional: nectar_module
	if val := request.GetString("nectar_module", ""); val != "" {
		args["nectar_module"] = val
	}

	// Optional: object_id
	if val := request.GetString("object_id", ""); val != "" {
		args["object_id"] = val
	}

	// Optional: parent_comment_id
	// object type - using string
	if val := request.GetString("parent_comment_id", ""); val != "" {
		args["parent_comment_id"] = val
	}

	// Optional: text
	if val := request.GetString("text", ""); val != "" {
		args["text"] = val
	}

	// Optional: tracking
	if val := request.GetString("tracking", ""); val != "" {
		args["tracking"] = val
	}

	// Call the client method
	result, err := client.Photo_post_comments(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute photo_post_comments: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePhoto_get_insights handles the photo_get_insights tool with context-based auth
func HandlePhoto_get_insights(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPhotoClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: date_preset
	if val := request.GetString("date_preset", ""); val != "" {
		args["date_preset"] = val
	}

	// Optional: metric
	// array type - using string
	if val := request.GetString("metric", ""); val != "" {
		args["metric"] = val
	}

	// Optional: period
	if val := request.GetString("period", ""); val != "" {
		args["period"] = val
	}

	// Optional: since
	if val := request.GetString("since", ""); val != "" {
		args["since"] = val
	}

	// Optional: until
	if val := request.GetString("until", ""); val != "" {
		args["until"] = val
	}

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Photo_get_insights(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute photo_get_insights: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePhoto_get_likes handles the photo_get_likes tool with context-based auth
func HandlePhoto_get_likes(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPhotoClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Photo_get_likes(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute photo_get_likes: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePhoto_post_likes handles the photo_post_likes tool with context-based auth
func HandlePhoto_post_likes(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPhotoClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: feedback_source
	if val := request.GetString("feedback_source", ""); val != "" {
		args["feedback_source"] = val
	}

	// Optional: nectar_module
	if val := request.GetString("nectar_module", ""); val != "" {
		args["nectar_module"] = val
	}

	// Optional: notify
	if val := request.GetBool("notify", false); val {
		args["notify"] = val
	}

	// Optional: tracking
	if val := request.GetString("tracking", ""); val != "" {
		args["tracking"] = val
	}

	// Call the client method
	result, err := client.Photo_post_likes(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute photo_post_likes: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePhoto_get_sponsor_tags handles the photo_get_sponsor_tags tool with context-based auth
func HandlePhoto_get_sponsor_tags(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPhotoClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Photo_get_sponsor_tags(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute photo_get_sponsor_tags: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePhoto_delete_ handles the photo_delete_ tool with context-based auth
func HandlePhoto_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPhotoClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Photo_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute photo_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePhoto_get_ handles the photo_get_ tool with context-based auth
func HandlePhoto_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPhotoClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Photo_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute photo_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
