// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetAdMonetizationPropertyTools returns MCP tools for AdMonetizationProperty
func GetAdMonetizationPropertyTools() []mcp.Tool {
	var tools []mcp.Tool

	// admonetizationproperty_get_adnetworkanalytics tool
	// Available fields for AdNetworkAnalyticsSyncQueryResult: omitted_results, query_id, results
	admonetizationproperty_get_adnetworkanalyticsTool := mcp.NewTool("admonetizationproperty_get_adnetworkanalytics",
		mcp.WithDescription("GET adnetworkanalytics for AdMonetizationProperty"),
		mcp.WithString("aggregation_period",
			mcp.Description("aggregation_period parameter for adnetworkanalytics"),
			mcp.Enum("DAY", "TOTAL"),
		),
		mcp.WithString("breakdowns",
			mcp.Description("breakdowns parameter for adnetworkanalytics"),
			mcp.Enum("AD_SERVER_CAMPAIGN_ID", "AD_SPACE", "AGE", "APP", "CLICKED_VIEW_TAG", "COUNTRY", "DEAL", "DEAL_AD", "DEAL_PAGE", "DELIVERY_METHOD", "DISPLAY_FORMAT", "FAIL_REASON", "GENDER", "INSTANT_ARTICLE_ID", "INSTANT_ARTICLE_PAGE_ID", "IS_DEAL_BACKFILL", "PLACEMENT", "PLACEMENT_NAME", "PLATFORM", "PROPERTY", "SDK_VERSION"),
		),
		mcp.WithString("filters",
			mcp.Description("filters parameter for adnetworkanalytics"),
		),
		mcp.WithNumber("limit",
			mcp.Description("limit parameter for adnetworkanalytics"),
		),
		mcp.WithString("metrics",
			mcp.Required(),
			mcp.Description("metrics parameter for adnetworkanalytics"),
			mcp.Enum("FB_AD_NETWORK_BIDDING_BID_RATE", "FB_AD_NETWORK_BIDDING_REQUEST", "FB_AD_NETWORK_BIDDING_RESPONSE", "FB_AD_NETWORK_BIDDING_REVENUE", "FB_AD_NETWORK_BIDDING_WIN_RATE", "FB_AD_NETWORK_CLICK", "FB_AD_NETWORK_CPM", "FB_AD_NETWORK_CTR", "FB_AD_NETWORK_FILLED_REQUEST", "FB_AD_NETWORK_FILL_RATE", "FB_AD_NETWORK_IMP", "FB_AD_NETWORK_IMPRESSION_RATE", "FB_AD_NETWORK_REQUEST", "FB_AD_NETWORK_REVENUE", "FB_AD_NETWORK_SHOW_RATE", "FB_AD_NETWORK_VIDEO_GUARANTEE_REVENUE", "FB_AD_NETWORK_VIDEO_MRC", "FB_AD_NETWORK_VIDEO_MRC_RATE", "FB_AD_NETWORK_VIDEO_VIEW", "FB_AD_NETWORK_VIDEO_VIEW_RATE"),
		),
		mcp.WithString("ordering_column",
			mcp.Description("ordering_column parameter for adnetworkanalytics"),
			mcp.Enum("METRIC", "TIME", "VALUE"),
		),
		mcp.WithString("ordering_type",
			mcp.Description("ordering_type parameter for adnetworkanalytics"),
			mcp.Enum("ASCENDING", "DESCENDING"),
		),
		mcp.WithBoolean("should_include_until",
			mcp.Description("should_include_until parameter for adnetworkanalytics"),
		),
		mcp.WithString("since",
			mcp.Description("since parameter for adnetworkanalytics"),
		),
		mcp.WithString("until",
			mcp.Description("until parameter for adnetworkanalytics"),
		),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for AdNetworkAnalyticsSyncQueryResult objects. Available fields: omitted_results, query_id, results"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, admonetizationproperty_get_adnetworkanalyticsTool)

	// admonetizationproperty_post_adnetworkanalytics tool
	admonetizationproperty_post_adnetworkanalyticsTool := mcp.NewTool("admonetizationproperty_post_adnetworkanalytics",
		mcp.WithDescription("POST adnetworkanalytics for AdMonetizationProperty"),
		mcp.WithString("aggregation_period",
			mcp.Description("aggregation_period parameter for adnetworkanalytics"),
			mcp.Enum("DAY", "TOTAL"),
		),
		mcp.WithString("breakdowns",
			mcp.Description("breakdowns parameter for adnetworkanalytics"),
			mcp.Enum("AD_SERVER_CAMPAIGN_ID", "AD_SPACE", "AGE", "APP", "CLICKED_VIEW_TAG", "COUNTRY", "DEAL", "DEAL_AD", "DEAL_PAGE", "DELIVERY_METHOD", "DISPLAY_FORMAT", "FAIL_REASON", "GENDER", "INSTANT_ARTICLE_ID", "INSTANT_ARTICLE_PAGE_ID", "IS_DEAL_BACKFILL", "PLACEMENT", "PLACEMENT_NAME", "PLATFORM", "PROPERTY", "SDK_VERSION"),
		),
		mcp.WithString("filters",
			mcp.Description("filters parameter for adnetworkanalytics"),
		),
		mcp.WithNumber("limit",
			mcp.Description("limit parameter for adnetworkanalytics"),
		),
		mcp.WithString("metrics",
			mcp.Required(),
			mcp.Description("metrics parameter for adnetworkanalytics"),
			mcp.Enum("FB_AD_NETWORK_BIDDING_BID_RATE", "FB_AD_NETWORK_BIDDING_REQUEST", "FB_AD_NETWORK_BIDDING_RESPONSE", "FB_AD_NETWORK_BIDDING_REVENUE", "FB_AD_NETWORK_BIDDING_WIN_RATE", "FB_AD_NETWORK_CLICK", "FB_AD_NETWORK_CPM", "FB_AD_NETWORK_CTR", "FB_AD_NETWORK_FILLED_REQUEST", "FB_AD_NETWORK_FILL_RATE", "FB_AD_NETWORK_IMP", "FB_AD_NETWORK_IMPRESSION_RATE", "FB_AD_NETWORK_REQUEST", "FB_AD_NETWORK_REVENUE", "FB_AD_NETWORK_SHOW_RATE", "FB_AD_NETWORK_VIDEO_GUARANTEE_REVENUE", "FB_AD_NETWORK_VIDEO_MRC", "FB_AD_NETWORK_VIDEO_MRC_RATE", "FB_AD_NETWORK_VIDEO_VIEW", "FB_AD_NETWORK_VIDEO_VIEW_RATE"),
		),
		mcp.WithString("ordering_column",
			mcp.Description("ordering_column parameter for adnetworkanalytics"),
			mcp.Enum("METRIC", "TIME", "VALUE"),
		),
		mcp.WithString("ordering_type",
			mcp.Description("ordering_type parameter for adnetworkanalytics"),
			mcp.Enum("ASCENDING", "DESCENDING"),
		),
		mcp.WithString("since",
			mcp.Description("since parameter for adnetworkanalytics"),
		),
		mcp.WithString("until",
			mcp.Description("until parameter for adnetworkanalytics"),
		),
	)
	tools = append(tools, admonetizationproperty_post_adnetworkanalyticsTool)

	// admonetizationproperty_get_adnetworkanalytics_results tool
	// Available fields for AdNetworkAnalyticsAsyncQueryResult: data, omitted_results, query_id, results, status
	admonetizationproperty_get_adnetworkanalytics_resultsTool := mcp.NewTool("admonetizationproperty_get_adnetworkanalytics_results",
		mcp.WithDescription("GET adnetworkanalytics_results for AdMonetizationProperty"),
		mcp.WithString("query_ids",
			mcp.Description("query_ids parameter for adnetworkanalytics_results"),
		),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for AdNetworkAnalyticsAsyncQueryResult objects. Available fields: data, omitted_results, query_id, results, status"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, admonetizationproperty_get_adnetworkanalytics_resultsTool)

	// admonetizationproperty_get_ tool
	// Available fields for AdMonetizationProperty: owner_business
	admonetizationproperty_get_Tool := mcp.NewTool("admonetizationproperty_get_",
		mcp.WithDescription("GET  for AdMonetizationProperty"),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for AdMonetizationProperty objects. Available fields: owner_business"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, admonetizationproperty_get_Tool)

	return tools
}

// AdMonetizationProperty handlers

// HandleAdmonetizationproperty_get_adnetworkanalytics handles the admonetizationproperty_get_adnetworkanalytics tool with context-based auth
func HandleAdmonetizationproperty_get_adnetworkanalytics(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdMonetizationPropertyClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: aggregation_period
	if val := request.GetString("aggregation_period", ""); val != "" {
		args["aggregation_period"] = val
	}

	// Optional: breakdowns
	// array type - using string
	if val := request.GetString("breakdowns", ""); val != "" {
		args["breakdowns"] = val
	}

	// Optional: filters
	// array type - using string
	if val := request.GetString("filters", ""); val != "" {
		args["filters"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Required: metrics
	metrics, err := request.RequireString("metrics")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter metrics: %v", err)), nil
	}
	args["metrics"] = metrics

	// Optional: ordering_column
	if val := request.GetString("ordering_column", ""); val != "" {
		args["ordering_column"] = val
	}

	// Optional: ordering_type
	if val := request.GetString("ordering_type", ""); val != "" {
		args["ordering_type"] = val
	}

	// Optional: should_include_until
	if val := request.GetBool("should_include_until", false); val {
		args["should_include_until"] = val
	}

	// Optional: since
	if val := request.GetString("since", ""); val != "" {
		args["since"] = val
	}

	// Optional: until
	if val := request.GetString("until", ""); val != "" {
		args["until"] = val
	}

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Admonetizationproperty_get_adnetworkanalytics(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute admonetizationproperty_get_adnetworkanalytics: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAdmonetizationproperty_post_adnetworkanalytics handles the admonetizationproperty_post_adnetworkanalytics tool with context-based auth
func HandleAdmonetizationproperty_post_adnetworkanalytics(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdMonetizationPropertyClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: aggregation_period
	if val := request.GetString("aggregation_period", ""); val != "" {
		args["aggregation_period"] = val
	}

	// Optional: breakdowns
	// array type - using string
	if val := request.GetString("breakdowns", ""); val != "" {
		args["breakdowns"] = val
	}

	// Optional: filters
	// array type - using string
	if val := request.GetString("filters", ""); val != "" {
		args["filters"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Required: metrics
	metrics, err := request.RequireString("metrics")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter metrics: %v", err)), nil
	}
	args["metrics"] = metrics

	// Optional: ordering_column
	if val := request.GetString("ordering_column", ""); val != "" {
		args["ordering_column"] = val
	}

	// Optional: ordering_type
	if val := request.GetString("ordering_type", ""); val != "" {
		args["ordering_type"] = val
	}

	// Optional: since
	if val := request.GetString("since", ""); val != "" {
		args["since"] = val
	}

	// Optional: until
	if val := request.GetString("until", ""); val != "" {
		args["until"] = val
	}

	// Call the client method
	result, err := client.Admonetizationproperty_post_adnetworkanalytics(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute admonetizationproperty_post_adnetworkanalytics: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAdmonetizationproperty_get_adnetworkanalytics_results handles the admonetizationproperty_get_adnetworkanalytics_results tool with context-based auth
func HandleAdmonetizationproperty_get_adnetworkanalytics_results(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdMonetizationPropertyClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: query_ids
	// array type - using string
	if val := request.GetString("query_ids", ""); val != "" {
		args["query_ids"] = val
	}

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Admonetizationproperty_get_adnetworkanalytics_results(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute admonetizationproperty_get_adnetworkanalytics_results: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAdmonetizationproperty_get_ handles the admonetizationproperty_get_ tool with context-based auth
func HandleAdmonetizationproperty_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdMonetizationPropertyClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Admonetizationproperty_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute admonetizationproperty_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
