// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetMediaTitleTools returns MCP tools for MediaTitle
func GetMediaTitleTools() []mcp.Tool {
	var tools []mcp.Tool


	// mediatitle_get_channels_to_integrity_status tool
	// Available fields for CatalogItemChannelsToIntegrityStatus: channels, rejection_information
	mediatitle_get_channels_to_integrity_statusTool := mcp.NewTool("mediatitle_get_channels_to_integrity_status",
		mcp.WithDescription("GET channels_to_integrity_status for MediaTitle"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for CatalogItemChannelsToIntegrityStatus objects. Available fields: channels, rejection_information"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, mediatitle_get_channels_to_integrity_statusTool)

	// mediatitle_get_override_details tool
	// Available fields for OverrideDetails: key, type, values
	// Params object accepts: keys (list<string>), type (mediatitleoverride_details_type_enum_param)
	mediatitle_get_override_detailsTool := mcp.NewTool("mediatitle_get_override_details",
		mcp.WithDescription("GET override_details for MediaTitle"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"keys": map[string]any{
					"type": "array",
					"description": "keys parameter",
					"items": map[string]any{"type": "string"},
				},
				"type": map[string]any{
					"type": "string",
					"description": "type parameter",
					"enum": []string{ "COUNTRY", "LANGUAGE", "LANGUAGE_AND_COUNTRY" },
				},
			}),
			mcp.Description("Parameters object containing: keys (array<string>), type (enum) [COUNTRY, LANGUAGE, LANGUAGE_AND_COUNTRY]"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for OverrideDetails objects. Available fields: key, type, values"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, mediatitle_get_override_detailsTool)

	// mediatitle_get_videos_metadata tool
	// Available fields for DynamicVideoMetadata: id, tags, url, video
	mediatitle_get_videos_metadataTool := mcp.NewTool("mediatitle_get_videos_metadata",
		mcp.WithDescription("GET videos_metadata for MediaTitle"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for DynamicVideoMetadata objects. Available fields: id, tags, url, video"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, mediatitle_get_videos_metadataTool)

	// mediatitle_delete_ tool
	mediatitle_delete_Tool := mcp.NewTool("mediatitle_delete_",
		mcp.WithDescription("DELETE  for MediaTitle"),
	)
	tools = append(tools, mediatitle_delete_Tool)

	// mediatitle_get_ tool
	// Available fields for MediaTitle: applinks, category_specific_fields, content_category, currency, description, fb_page_alias, fb_page_id, genres, id, image_fetch_status, images, kg_fb_id, media_title_id, price, sanitized_images, title, title_display_name, unit_price, url, visibility, wiki_data_item
	mediatitle_get_Tool := mcp.NewTool("mediatitle_get_",
		mcp.WithDescription("GET  for MediaTitle"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for MediaTitle objects. Available fields: applinks, category_specific_fields, content_category, currency, description, fb_page_alias, fb_page_id, genres, id, image_fetch_status, images, kg_fb_id, media_title_id, price, sanitized_images (and 6 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, mediatitle_get_Tool)

	// mediatitle_post_ tool
	// Params object accepts: applinks (Object), content_category (mediatitle_content_category), currency (string), description (string), fb_page_id (string), genres (list<string>), images (list<Object>), kg_fb_id (string), price (unsigned int), title (string), title_display_name (string), url (string)
	mediatitle_post_Tool := mcp.NewTool("mediatitle_post_",
		mcp.WithDescription("POST  for MediaTitle"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"applinks": map[string]any{
					"type": "object",
					"description": "applinks parameter",
				},
				"content_category": map[string]any{
					"type": "string",
					"description": "content_category parameter",
					"enum": []string{ "MOVIE", "MUSIC", "TV_SHOW" },
				},
				"currency": map[string]any{
					"type": "string",
					"description": "currency parameter",
				},
				"description": map[string]any{
					"type": "string",
					"description": "description parameter",
				},
				"fb_page_id": map[string]any{
					"type": "string",
					"description": "fb_page_id parameter",
				},
				"genres": map[string]any{
					"type": "array",
					"description": "genres parameter",
					"items": map[string]any{"type": "string"},
				},
				"images": map[string]any{
					"type": "array",
					"description": "images parameter",
					"items": map[string]any{"type": "object"},
				},
				"kg_fb_id": map[string]any{
					"type": "string",
					"description": "kg_fb_id parameter",
				},
				"price": map[string]any{
					"type": "integer",
					"description": "price parameter",
				},
				"title": map[string]any{
					"type": "string",
					"description": "title parameter",
				},
				"title_display_name": map[string]any{
					"type": "string",
					"description": "title_display_name parameter",
				},
				"url": map[string]any{
					"type": "string",
					"description": "url parameter",
				},
			}),
			mcp.Description("Parameters object containing: applinks (object), content_category (mediatitle_content_category) [MOVIE, MUSIC, TV_SHOW], currency (string), description (string), fb_page_id (string), genres (array<string>), images (array<object>), kg_fb_id (string), price (integer), title (string), title_display_name (string), url (string)"),
		),
	)
	tools = append(tools, mediatitle_post_Tool)


	return tools
}

// MediaTitle handlers


// HandleMediatitle_get_channels_to_integrity_status handles the mediatitle_get_channels_to_integrity_status tool with context-based auth
func HandleMediatitle_get_channels_to_integrity_status(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewMediaTitleClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Mediatitle_get_channels_to_integrity_status(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute mediatitle_get_channels_to_integrity_status: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleMediatitle_get_override_details handles the mediatitle_get_override_details tool with context-based auth
func HandleMediatitle_get_override_details(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewMediaTitleClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Mediatitle_get_override_details(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute mediatitle_get_override_details: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleMediatitle_get_videos_metadata handles the mediatitle_get_videos_metadata tool with context-based auth
func HandleMediatitle_get_videos_metadata(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewMediaTitleClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Mediatitle_get_videos_metadata(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute mediatitle_get_videos_metadata: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleMediatitle_delete_ handles the mediatitle_delete_ tool with context-based auth
func HandleMediatitle_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewMediaTitleClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Mediatitle_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute mediatitle_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleMediatitle_get_ handles the mediatitle_get_ tool with context-based auth
func HandleMediatitle_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewMediaTitleClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Mediatitle_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute mediatitle_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleMediatitle_post_ handles the mediatitle_post_ tool with context-based auth
func HandleMediatitle_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewMediaTitleClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the client method
	result, err := client.Mediatitle_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute mediatitle_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

