// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetStatusTools returns MCP tools for Status
func GetStatusTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool

	// facebook_status_post_likes tool
	facebook_status_post_likesTool := mcp.NewTool("facebook_status_post_likes",
		mcp.WithDescription("POST likes for Status"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("feedback_source",
			mcp.Description("feedback_source parameter for likes"),
		),
		mcp.WithString("nectar_module",
			mcp.Description("nectar_module parameter for likes"),
		),
		mcp.WithBoolean("notify",
			mcp.Description("notify parameter for likes"),
		),
		mcp.WithString("tracking",
			mcp.Description("tracking parameter for likes"),
		),
	)
	tools = append(tools, facebook_status_post_likesTool)

	// facebook_status_get_ tool
	facebook_status_get_Tool := mcp.NewTool("facebook_status_get_",
		mcp.WithDescription("GET  for Status"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_status_get_Tool)

	return tools
}

// Status handlers

// HandleFacebook_status_post_likes handles the facebook_status_post_likes tool
func HandleFacebook_status_post_likes(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewStatusClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: feedback_source
	if val := request.GetString("feedback_source", ""); val != "" {
		args["feedback_source"] = val
	}

	// Optional: nectar_module
	if val := request.GetString("nectar_module", ""); val != "" {
		args["nectar_module"] = val
	}

	// Optional: notify
	if val := request.GetBool("notify", false); val {
		args["notify"] = val
	}

	// Optional: tracking
	if val := request.GetString("tracking", ""); val != "" {
		args["tracking"] = val
	}

	// Call the client method
	result, err := client.Facebook_status_post_likes(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_status_post_likes: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_status_get_ handles the facebook_status_get_ tool
func HandleFacebook_status_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewStatusClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_status_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_status_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
