// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetVehicleTools returns MCP tools for Vehicle
func GetVehicleTools() []mcp.Tool {
	var tools []mcp.Tool


	// vehicle_get_channels_to_integrity_status tool
	// Available fields for CatalogItemChannelsToIntegrityStatus: channels, rejection_information
	vehicle_get_channels_to_integrity_statusTool := mcp.NewTool("vehicle_get_channels_to_integrity_status",
		mcp.WithDescription("GET channels_to_integrity_status for Vehicle"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for CatalogItemChannelsToIntegrityStatus objects. Available fields: channels, rejection_information"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, vehicle_get_channels_to_integrity_statusTool)

	// vehicle_get_override_details tool
	// Available fields for OverrideDetails: key, type, values
	// Params object accepts: keys (list<string>), type (vehicleoverride_details_type_enum_param)
	vehicle_get_override_detailsTool := mcp.NewTool("vehicle_get_override_details",
		mcp.WithDescription("GET override_details for Vehicle"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"keys": map[string]any{
					"type": "array",
					"description": "keys parameter",
					"items": map[string]any{"type": "string"},
				},
				"type": map[string]any{
					"type": "string",
					"description": "type parameter",
					"enum": []string{ "COUNTRY", "LANGUAGE", "LANGUAGE_AND_COUNTRY" },
				},
			}),
			mcp.Description("Parameters object containing: keys (array<string>), type (enum) [COUNTRY, LANGUAGE, LANGUAGE_AND_COUNTRY]"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for OverrideDetails objects. Available fields: key, type, values"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, vehicle_get_override_detailsTool)

	// vehicle_get_videos_metadata tool
	// Available fields for DynamicVideoMetadata: id, tags, url, video
	vehicle_get_videos_metadataTool := mcp.NewTool("vehicle_get_videos_metadata",
		mcp.WithDescription("GET videos_metadata for Vehicle"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for DynamicVideoMetadata objects. Available fields: id, tags, url, video"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, vehicle_get_videos_metadataTool)

	// vehicle_get_ tool
	// Available fields for Vehicle: address, applinks, availability, availability_circle_radius, availability_circle_radius_unit, body_style, category_specific_fields, condition, currency, custom_label_0, custom_label_1, custom_label_2, custom_label_3, custom_label_4, custom_number_0, custom_number_1, custom_number_2, custom_number_3, custom_number_4, date_first_on_lot, dealer_communication_channel, dealer_email, dealer_id, dealer_name, dealer_phone, dealer_privacy_policy_url, description, drivetrain, exterior_color, fb_page_id, features, fuel_type, id, image_fetch_status, images, interior_color, legal_disclosure_impressum_url, make, mileage, model, previous_currency, previous_price, price, product_priority_0, product_priority_1, product_priority_2, product_priority_3, product_priority_4, sale_currency, sale_price, sanitized_images, state_of_vehicle, tags, title, transmission, trim, unit_price, url, vehicle_id, vehicle_registration_plate, vehicle_specifications, vehicle_type, vin, visibility, year
	vehicle_get_Tool := mcp.NewTool("vehicle_get_",
		mcp.WithDescription("GET  for Vehicle"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for Vehicle objects. Available fields: address, applinks, availability, availability_circle_radius, availability_circle_radius_unit, body_style, category_specific_fields, condition, currency, custom_label_0, custom_label_1, custom_label_2, custom_label_3, custom_label_4, custom_number_0 (and 50 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, vehicle_get_Tool)

	// vehicle_post_ tool
	// Params object accepts: address (map), applinks (Object), availability (vehicle_availability), body_style (vehicle_body_style), condition (vehicle_condition), currency (string), date_first_on_lot (string), dealer_id (string), dealer_name (string), dealer_phone (string), description (string), drivetrain (vehicle_drivetrain), exterior_color (string), fb_page_id (string), fuel_type (vehicle_fuel_type), images (list<Object>), interior_color (string), make (string), mileage (map), model (string), price (unsigned int), state_of_vehicle (vehicle_state_of_vehicle), title (string), transmission (vehicle_transmission), trim (string), url (string), vehicle_type (vehicle_vehicle_type), vin (string), year (unsigned int)
	vehicle_post_Tool := mcp.NewTool("vehicle_post_",
		mcp.WithDescription("POST  for Vehicle"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"address": map[string]any{
					"type": "object",
					"description": "address parameter",
				},
				"applinks": map[string]any{
					"type": "object",
					"description": "applinks parameter",
				},
				"availability": map[string]any{
					"type": "string",
					"description": "availability parameter",
					"enum": []string{ "AVAILABLE", "NOT_AVAILABLE", "PENDING", "UNKNOWN" },
				},
				"body_style": map[string]any{
					"type": "string",
					"description": "body_style parameter",
					"enum": []string{ "CONVERTIBLE", "COUPE", "CROSSOVER", "ESTATE", "GRANDTOURER", "HATCHBACK", "MINIBUS", "MINIVAN", "MPV", "NONE", "OTHER", "PICKUP", "ROADSTER", "SALOON", "SEDAN", "SMALL_CAR", "SPORTSCAR", "SUPERCAR", "SUPERMINI", "SUV", "TRUCK", "VAN", "WAGON" },
				},
				"condition": map[string]any{
					"type": "string",
					"description": "condition parameter",
					"enum": []string{ "EXCELLENT", "FAIR", "GOOD", "NONE", "OTHER", "POOR", "VERY_GOOD" },
				},
				"currency": map[string]any{
					"type": "string",
					"description": "currency parameter",
				},
				"date_first_on_lot": map[string]any{
					"type": "string",
					"description": "date_first_on_lot parameter",
				},
				"dealer_id": map[string]any{
					"type": "string",
					"description": "dealer_id parameter",
				},
				"dealer_name": map[string]any{
					"type": "string",
					"description": "dealer_name parameter",
				},
				"dealer_phone": map[string]any{
					"type": "string",
					"description": "dealer_phone parameter",
				},
				"description": map[string]any{
					"type": "string",
					"description": "description parameter",
				},
				"drivetrain": map[string]any{
					"type": "string",
					"description": "drivetrain parameter",
					"enum": []string{ "AWD", "FOUR_WD", "FWD", "NONE", "OTHER", "RWD", "TWO_WD" },
				},
				"exterior_color": map[string]any{
					"type": "string",
					"description": "exterior_color parameter",
				},
				"fb_page_id": map[string]any{
					"type": "string",
					"description": "fb_page_id parameter",
				},
				"fuel_type": map[string]any{
					"type": "string",
					"description": "fuel_type parameter",
					"enum": []string{ "DIESEL", "ELECTRIC", "FLEX", "GASOLINE", "HYBRID", "NONE", "OTHER", "PETROL", "PLUGIN_HYBRID" },
				},
				"images": map[string]any{
					"type": "array",
					"description": "images parameter",
					"items": map[string]any{"type": "object"},
				},
				"interior_color": map[string]any{
					"type": "string",
					"description": "interior_color parameter",
				},
				"make": map[string]any{
					"type": "string",
					"description": "make parameter",
				},
				"mileage": map[string]any{
					"type": "object",
					"description": "mileage parameter",
				},
				"model": map[string]any{
					"type": "string",
					"description": "model parameter",
				},
				"price": map[string]any{
					"type": "integer",
					"description": "price parameter",
				},
				"state_of_vehicle": map[string]any{
					"type": "string",
					"description": "state_of_vehicle parameter",
					"enum": []string{ "CPO", "NEW", "USED" },
				},
				"title": map[string]any{
					"type": "string",
					"description": "title parameter",
				},
				"transmission": map[string]any{
					"type": "string",
					"description": "transmission parameter",
					"enum": []string{ "AUTOMATIC", "MANUAL", "NONE", "OTHER" },
				},
				"trim": map[string]any{
					"type": "string",
					"description": "trim parameter",
				},
				"url": map[string]any{
					"type": "string",
					"description": "url parameter",
				},
				"vehicle_type": map[string]any{
					"type": "string",
					"description": "vehicle_type parameter",
					"enum": []string{ "BOAT", "CAR_TRUCK", "COMMERCIAL", "MOTORCYCLE", "OTHER", "POWERSPORT", "RV_CAMPER", "TRAILER" },
				},
				"vin": map[string]any{
					"type": "string",
					"description": "vin parameter",
				},
				"year": map[string]any{
					"type": "integer",
					"description": "year parameter",
				},
			}),
			mcp.Description("Parameters object containing: address (object), applinks (object), availability (vehicle_availability) [AVAILABLE, NOT_AVAILABLE, PENDING, UNKNOWN], body_style (vehicle_body_style) [CONVERTIBLE, COUPE, CROSSOVER, ESTATE, GRANDTOURER, ...], condition (vehicle_condition) [EXCELLENT, FAIR, GOOD, NONE, OTHER, ...], currency (string), date_first_on_lot (string), dealer_id (string), dealer_name (string), dealer_phone (string), description (string), drivetrain (vehicle_drivetrain) [AWD, FOUR_WD, FWD, NONE, OTHER, ...], exterior_color (string), fb_page_id (string), fuel_type (vehicle_fuel_type) [DIESEL, ELECTRIC, FLEX, GASOLINE, HYBRID, ...], images (array<object>), interior_color (string), make (string), mileage (object), model (string), price (integer), state_of_vehicle (vehicle_state_of_vehicle) [CPO, NEW, USED], title (string), transmission (vehicle_transmission) [AUTOMATIC, MANUAL, NONE, OTHER], trim (string), url (string), vehicle_type (vehicle_vehicle_type) [BOAT, CAR_TRUCK, COMMERCIAL, MOTORCYCLE, OTHER, ...], vin (string), year (integer)"),
		),
	)
	tools = append(tools, vehicle_post_Tool)


	return tools
}

// Vehicle handlers


// HandleVehicle_get_channels_to_integrity_status handles the vehicle_get_channels_to_integrity_status tool with context-based auth
func HandleVehicle_get_channels_to_integrity_status(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewVehicleClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Vehicle_get_channels_to_integrity_status(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute vehicle_get_channels_to_integrity_status: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleVehicle_get_override_details handles the vehicle_get_override_details tool with context-based auth
func HandleVehicle_get_override_details(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewVehicleClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Vehicle_get_override_details(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute vehicle_get_override_details: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleVehicle_get_videos_metadata handles the vehicle_get_videos_metadata tool with context-based auth
func HandleVehicle_get_videos_metadata(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewVehicleClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Vehicle_get_videos_metadata(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute vehicle_get_videos_metadata: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleVehicle_get_ handles the vehicle_get_ tool with context-based auth
func HandleVehicle_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewVehicleClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Vehicle_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute vehicle_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleVehicle_post_ handles the vehicle_post_ tool with context-based auth
func HandleVehicle_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewVehicleClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the client method
	result, err := client.Vehicle_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute vehicle_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

