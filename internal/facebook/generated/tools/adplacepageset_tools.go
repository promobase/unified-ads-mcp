// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetAdPlacePageSetTools returns MCP tools for AdPlacePageSet
func GetAdPlacePageSetTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool

	// adplacepageset_get_ tool
	adplacepageset_get_Tool := mcp.NewTool("adplacepageset_get_",
		mcp.WithDescription("GET  for AdPlacePageSet"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, adplacepageset_get_Tool)

	return tools
}

// GetAdPlacePageSetToolsWithoutAuth returns MCP tools for AdPlacePageSet without access_token parameter
func GetAdPlacePageSetToolsWithoutAuth() []mcp.Tool {
	var tools []mcp.Tool

	// adplacepageset_get_ tool
	adplacepageset_get_Tool := mcp.NewTool("adplacepageset_get_",
		mcp.WithDescription("GET  for AdPlacePageSet"),
	)
	tools = append(tools, adplacepageset_get_Tool)

	return tools
}

// AdPlacePageSet handlers

// HandleAdplacepageset_get_ handles the adplacepageset_get_ tool
func HandleAdplacepageset_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAdPlacePageSetClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Adplacepageset_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adplacepageset_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Context-aware handlers

// HandleContextAdplacepageset_get_ handles the adplacepageset_get_ tool with context-based auth
func HandleContextAdplacepageset_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdPlacePageSetClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Adplacepageset_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adplacepageset_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
