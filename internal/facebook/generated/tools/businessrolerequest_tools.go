// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetBusinessRoleRequestTools returns MCP tools for BusinessRoleRequest
func GetBusinessRoleRequestTools() []mcp.Tool {
	var tools []mcp.Tool

	// businessrolerequest_delete_ tool
	businessrolerequest_delete_Tool := mcp.NewTool("businessrolerequest_delete_",
		mcp.WithDescription("DELETE  for BusinessRoleRequest"),
	)
	tools = append(tools, businessrolerequest_delete_Tool)

	// businessrolerequest_get_ tool
	// Available fields for BusinessRoleRequest: created_by, created_time, email, expiration_time, expiry_time, finance_role, id, invite_link, invited_user_type, ip_role, owner, role, status, tasks, updated_by, updated_time
	businessrolerequest_get_Tool := mcp.NewTool("businessrolerequest_get_",
		mcp.WithDescription("GET  for BusinessRoleRequest"),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for BusinessRoleRequest objects. Available fields: created_by, created_time, email, expiration_time, expiry_time, finance_role, id, invite_link, invited_user_type, ip_role, owner, role, status, tasks, updated_by (and 1 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, businessrolerequest_get_Tool)

	// businessrolerequest_post_ tool
	businessrolerequest_post_Tool := mcp.NewTool("businessrolerequest_post_",
		mcp.WithDescription("POST  for BusinessRoleRequest"),
		mcp.WithString("role",
			mcp.Description("role parameter for "),
			mcp.Enum("ADMIN", "ADS_RIGHTS_REVIEWER", "DEFAULT", "DEVELOPER", "EMPLOYEE", "FINANCE_ANALYST", "FINANCE_EDIT", "FINANCE_EDITOR", "FINANCE_VIEW", "MANAGE", "PARTNER_CENTER_ADMIN", "PARTNER_CENTER_ANALYST", "PARTNER_CENTER_EDUCATION", "PARTNER_CENTER_MARKETING", "PARTNER_CENTER_OPERATIONS"),
		),
		mcp.WithString("tasks",
			mcp.Description("tasks parameter for "),
			mcp.Enum("ADMIN", "ADS_RIGHTS_REVIEWER", "DEFAULT", "DEVELOPER", "EMPLOYEE", "FINANCE_ANALYST", "FINANCE_EDIT", "FINANCE_EDITOR", "FINANCE_VIEW", "MANAGE", "PARTNER_CENTER_ADMIN", "PARTNER_CENTER_ANALYST", "PARTNER_CENTER_EDUCATION", "PARTNER_CENTER_MARKETING", "PARTNER_CENTER_OPERATIONS"),
		),
	)
	tools = append(tools, businessrolerequest_post_Tool)

	return tools
}

// BusinessRoleRequest handlers

// HandleBusinessrolerequest_delete_ handles the businessrolerequest_delete_ tool with context-based auth
func HandleBusinessrolerequest_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewBusinessRoleRequestClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Businessrolerequest_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute businessrolerequest_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleBusinessrolerequest_get_ handles the businessrolerequest_get_ tool with context-based auth
func HandleBusinessrolerequest_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewBusinessRoleRequestClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Businessrolerequest_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute businessrolerequest_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleBusinessrolerequest_post_ handles the businessrolerequest_post_ tool with context-based auth
func HandleBusinessrolerequest_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewBusinessRoleRequestClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: role
	if val := request.GetString("role", ""); val != "" {
		args["role"] = val
	}

	// Optional: tasks
	// array type - using string
	if val := request.GetString("tasks", ""); val != "" {
		args["tasks"] = val
	}

	// Call the client method
	result, err := client.Businessrolerequest_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute businessrolerequest_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
