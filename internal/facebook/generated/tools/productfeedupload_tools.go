// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetProductFeedUploadTools returns MCP tools for ProductFeedUpload
func GetProductFeedUploadTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool

	// facebook_productfeedupload_post_error_report tool
	facebook_productfeedupload_post_error_reportTool := mcp.NewTool("facebook_productfeedupload_post_error_report",
		mcp.WithDescription("POST error_report for ProductFeedUpload"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_productfeedupload_post_error_reportTool)

	// facebook_productfeedupload_get_errors tool
	facebook_productfeedupload_get_errorsTool := mcp.NewTool("facebook_productfeedupload_get_errors",
		mcp.WithDescription("GET errors for ProductFeedUpload"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("error_priority",
			mcp.Description("error_priority parameter for errors"),
			mcp.Enum("HIGH", "LOW", "MEDIUM"),
		),
	)
	tools = append(tools, facebook_productfeedupload_get_errorsTool)

	// facebook_productfeedupload_get_ tool
	facebook_productfeedupload_get_Tool := mcp.NewTool("facebook_productfeedupload_get_",
		mcp.WithDescription("GET  for ProductFeedUpload"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_productfeedupload_get_Tool)

	return tools
}

// ProductFeedUpload handlers

// HandleFacebook_productfeedupload_post_error_report handles the facebook_productfeedupload_post_error_report tool
func HandleFacebook_productfeedupload_post_error_report(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewProductFeedUploadClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_productfeedupload_post_error_report(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_productfeedupload_post_error_report: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_productfeedupload_get_errors handles the facebook_productfeedupload_get_errors tool
func HandleFacebook_productfeedupload_get_errors(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewProductFeedUploadClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: error_priority
	if val := request.GetString("error_priority", ""); val != "" {
		args["error_priority"] = val
	}

	// Call the client method
	result, err := client.Facebook_productfeedupload_get_errors(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_productfeedupload_get_errors: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_productfeedupload_get_ handles the facebook_productfeedupload_get_ tool
func HandleFacebook_productfeedupload_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewProductFeedUploadClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_productfeedupload_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_productfeedupload_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
