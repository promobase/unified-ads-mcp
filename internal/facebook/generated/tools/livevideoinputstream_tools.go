// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetLiveVideoInputStreamTools returns MCP tools for LiveVideoInputStream
func GetLiveVideoInputStreamTools() []mcp.Tool {
	var tools []mcp.Tool


	// livevideoinputstream_get_ tool
	// Available fields for LiveVideoInputStream: dash_ingest_url, dash_preview_url, id, is_master, secure_stream_url, stream_health, stream_id, stream_url
	// Params object accepts: target_token (string)
	livevideoinputstream_get_Tool := mcp.NewTool("livevideoinputstream_get_",
		mcp.WithDescription("GET  for LiveVideoInputStream"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"target_token": map[string]any{
					"type": "string",
					"description": "target_token parameter",
				},
			}),
			mcp.Description("Parameters object containing: target_token (string)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for LiveVideoInputStream objects. Available fields: dash_ingest_url, dash_preview_url, id, is_master, secure_stream_url, stream_health, stream_id, stream_url"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, livevideoinputstream_get_Tool)


	return tools
}

// LiveVideoInputStream handlers


// HandleLivevideoinputstream_get_ handles the livevideoinputstream_get_ tool with context-based auth
func HandleLivevideoinputstream_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewLiveVideoInputStreamClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Livevideoinputstream_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute livevideoinputstream_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

