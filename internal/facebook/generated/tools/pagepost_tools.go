// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetPagePostTools returns MCP tools for PagePost
func GetPagePostTools() []mcp.Tool {
	var tools []mcp.Tool

	// pagepost_get_attachments tool
	pagepost_get_attachmentsTool := mcp.NewTool("pagepost_get_attachments",
		mcp.WithDescription("GET attachments for PagePost"),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, pagepost_get_attachmentsTool)

	// pagepost_get_comments tool
	// Available fields for Comment: admin_creator, application, attachment, can_comment, can_hide, can_like, can_remove, can_reply_privately, comment_count, created_time, from, id, is_hidden, is_private, like_count, live_broadcast_timestamp, message, message_tags, object, parent, permalink_url, private_reply_conversation, user_likes
	pagepost_get_commentsTool := mcp.NewTool("pagepost_get_comments",
		mcp.WithDescription("GET comments for PagePost"),
		mcp.WithString("filter",
			mcp.Description("filter parameter for comments"),
			mcp.Enum("stream", "toplevel"),
		),
		mcp.WithString("live_filter",
			mcp.Description("live_filter parameter for comments"),
			mcp.Enum("filter_low_quality", "no_filter"),
		),
		mcp.WithString("order",
			mcp.Description("order parameter for comments"),
			mcp.Enum("chronological", "reverse_chronological"),
		),
		mcp.WithString("since",
			mcp.Description("since parameter for comments"),
		),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for Comment objects. Available fields: admin_creator, application, attachment, can_comment, can_hide, can_like, can_remove, can_reply_privately, comment_count, created_time, from, id, is_hidden, is_private, like_count (and 8 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, pagepost_get_commentsTool)

	// pagepost_post_comments tool
	pagepost_post_commentsTool := mcp.NewTool("pagepost_post_comments",
		mcp.WithDescription("POST comments for PagePost"),
		mcp.WithString("attachment_id",
			mcp.Description("attachment_id parameter for comments"),
		),
		mcp.WithString("attachment_share_url",
			mcp.Description("attachment_share_url parameter for comments"),
		),
		mcp.WithString("attachment_url",
			mcp.Description("attachment_url parameter for comments"),
		),
		mcp.WithString("comment",
			mcp.Description("comment parameter for comments"),
		),
		mcp.WithString("comment_privacy_value",
			mcp.Description("comment_privacy_value parameter for comments"),
			mcp.Enum("DECLINED_BY_ADMIN_ASSISTANT", "DEFAULT_PRIVACY", "FRIENDS_AND_POST_OWNER", "FRIENDS_ONLY", "GRAPHQL_MULTIPLE_VALUE_HACK_DO_NOT_USE", "OWNER_OR_COMMENTER", "PENDING_APPROVAL", "REMOVED_BY_ADMIN_ASSISTANT", "SIDE_CONVERSATION", "SIDE_CONVERSATION_AND_POST_OWNER", "SPOTLIGHT_TAB"),
		),
		mcp.WithString("feedback_source",
			mcp.Description("feedback_source parameter for comments"),
		),
		mcp.WithString("message",
			mcp.Description("message parameter for comments"),
		),
		mcp.WithString("nectar_module",
			mcp.Description("nectar_module parameter for comments"),
		),
		mcp.WithString("parent_comment_id",
			mcp.Description("parent_comment_id parameter for comments"),
		),
		mcp.WithString("post_id",
			mcp.Description("post_id parameter for comments"),
		),
		mcp.WithString("tracking",
			mcp.Description("tracking parameter for comments"),
		),
	)
	tools = append(tools, pagepost_post_commentsTool)

	// pagepost_get_dynamic_posts tool
	// Available fields for RTBDynamicPost: child_attachments, created, description, id, image_url, link, message, owner_id, place_id, product_id, title
	pagepost_get_dynamic_postsTool := mcp.NewTool("pagepost_get_dynamic_posts",
		mcp.WithDescription("GET dynamic_posts for PagePost"),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for RTBDynamicPost objects. Available fields: child_attachments, created, description, id, image_url, link, message, owner_id, place_id, product_id, title"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, pagepost_get_dynamic_postsTool)

	// pagepost_get_insights tool
	// Available fields for InsightsResult: description, description_from_api_doc, id, name, period, title, values
	pagepost_get_insightsTool := mcp.NewTool("pagepost_get_insights",
		mcp.WithDescription("GET insights for PagePost"),
		mcp.WithString("date_preset",
			mcp.Description("date_preset parameter for insights"),
			mcp.Enum("data_maximum", "last_14d", "last_28d", "last_30d", "last_3d", "last_7d", "last_90d", "last_month", "last_quarter", "last_week_mon_sun", "last_week_sun_sat", "last_year", "maximum", "this_month", "this_quarter", "this_week_mon_today", "this_week_sun_today", "this_year", "today", "yesterday"),
		),
		mcp.WithString("metric",
			mcp.Description("metric parameter for insights"),
		),
		mcp.WithString("period",
			mcp.Description("period parameter for insights"),
			mcp.Enum("day", "days_28", "lifetime", "month", "total_over_range", "week"),
		),
		mcp.WithString("since",
			mcp.Description("since parameter for insights"),
		),
		mcp.WithString("until",
			mcp.Description("until parameter for insights"),
		),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for InsightsResult objects. Available fields: description, description_from_api_doc, id, name, period, title, values"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, pagepost_get_insightsTool)

	// pagepost_delete_likes tool
	pagepost_delete_likesTool := mcp.NewTool("pagepost_delete_likes",
		mcp.WithDescription("DELETE likes for PagePost"),
		mcp.WithString("nectar_module",
			mcp.Description("nectar_module parameter for likes"),
		),
		mcp.WithString("tracking",
			mcp.Description("tracking parameter for likes"),
		),
	)
	tools = append(tools, pagepost_delete_likesTool)

	// pagepost_get_likes tool
	// Available fields for Profile: can_post, id, link, name, pic, pic_crop, pic_large, pic_small, pic_square, profile_type, username
	pagepost_get_likesTool := mcp.NewTool("pagepost_get_likes",
		mcp.WithDescription("GET likes for PagePost"),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for Profile objects. Available fields: can_post, id, link, name, pic, pic_crop, pic_large, pic_small, pic_square, profile_type, username"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, pagepost_get_likesTool)

	// pagepost_post_likes tool
	pagepost_post_likesTool := mcp.NewTool("pagepost_post_likes",
		mcp.WithDescription("POST likes for PagePost"),
		mcp.WithString("feedback_source",
			mcp.Description("feedback_source parameter for likes"),
		),
		mcp.WithString("nectar_module",
			mcp.Description("nectar_module parameter for likes"),
		),
		mcp.WithString("tracking",
			mcp.Description("tracking parameter for likes"),
		),
	)
	tools = append(tools, pagepost_post_likesTool)

	// pagepost_get_reactions tool
	// Available fields for Profile: can_post, id, link, name, pic, pic_crop, pic_large, pic_small, pic_square, profile_type, username
	pagepost_get_reactionsTool := mcp.NewTool("pagepost_get_reactions",
		mcp.WithDescription("GET reactions for PagePost"),
		mcp.WithString("type",
			mcp.Description("type parameter for reactions"),
			mcp.Enum("ANGRY", "CARE", "FIRE", "HAHA", "HUNDRED", "LIKE", "LOVE", "NONE", "PRIDE", "SAD", "THANKFUL", "WOW"),
		),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for Profile objects. Available fields: can_post, id, link, name, pic, pic_crop, pic_large, pic_small, pic_square, profile_type, username"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, pagepost_get_reactionsTool)

	// pagepost_get_sharedposts tool
	// Available fields for Post: actions, admin_creator, allowed_advertising_objectives, application, backdated_time, call_to_action, can_reply_privately, caption, child_attachments, comments_mirroring_domain, coordinates, created_time, description, event, expanded_height, expanded_width, feed_targeting, from, full_picture, height, icon, id, instagram_eligibility, is_app_share, is_eligible_for_promotion, is_expired, is_hidden, is_inline_created, is_instagram_eligible, is_popular, is_published, is_spherical, link, message, message_tags, multi_share_end_card, multi_share_optimized, name, object_id, parent_id, permalink_url, picture, place, privacy, promotable_id, promotion_status, properties, scheduled_publish_time, shares, source, status_type, story, story_tags, subscribed, target, targeting, timeline_visibility, type, updated_time, via, video_buying_eligibility, width
	pagepost_get_sharedpostsTool := mcp.NewTool("pagepost_get_sharedposts",
		mcp.WithDescription("GET sharedposts for PagePost"),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for Post objects. Available fields: actions, admin_creator, allowed_advertising_objectives, application, backdated_time, call_to_action, can_reply_privately, caption, child_attachments, comments_mirroring_domain, coordinates, created_time, description, event, expanded_height (and 47 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, pagepost_get_sharedpostsTool)

	// pagepost_get_sponsor_tags tool
	// Available fields for Page: about, access_token, ad_campaign, affiliation, app_id, artists_we_like, attire, available_promo_offer_ids, awards, band_interests, band_members, best_page, bio, birthday, booking_agent, breaking_news_usage, built, business, can_checkin, can_post, category, category_list, checkins, company_overview, connected_instagram_account, connected_page_backed_instagram_account, contact_address, copyright_whitelisted_ig_partners, country_page_likes, cover, culinary_team, current_location, delivery_and_pickup_option_info, description, description_html, differently_open_offerings, directed_by, display_subtext, displayed_message_response_time, does_viewer_have_page_permission_link_ig, emails, engagement, fan_count, featured_video, features, followers_count, food_styles, founded, general_info, general_manager, genre, global_brand_page_name, global_brand_root_id, has_added_app, has_lead_access, has_transitioned_to_new_page_experience, has_whatsapp_business_number, has_whatsapp_number, hometown, hours, id, impressum, influences, instagram_business_account, is_always_open, is_calling_eligible, is_chain, is_community_page, is_eligible_for_branded_content, is_eligible_for_disable_connect_ig_btn_for_non_page_admin_am_web, is_messenger_bot_get_started_enabled, is_messenger_platform_bot, is_owned, is_permanently_closed, is_published, is_unclaimed, is_verified, is_webhooks_subscribed, keywords, leadgen_tos_acceptance_time, leadgen_tos_accepted, leadgen_tos_accepting_user, link, location, members, merchant_id, merchant_review_status, messaging_feature_status, messenger_ads_default_icebreakers, messenger_ads_default_quick_replies, messenger_ads_quick_replies_type, mini_shop_storefront, mission, mpg, name, name_with_location_descriptor, network, new_like_count, offer_eligible, overall_star_rating, owner_business, page_token, parent_page, parking, payment_options, personal_info, personal_interests, pharma_safety_info, phone, pickup_options, place_type, plot_outline, preferred_audience, press_contact, price_range, privacy_info_url, produced_by, products, promotion_eligible, promotion_ineligible_reason, public_transit, rating_count, recipient, record_label, release_date, restaurant_services, restaurant_specialties, schedule, screenplay_by, season, single_line_address, starring, start_info, store_code, store_location_descriptor, store_number, studio, supports_donate_button_in_live_video, talking_about_count, temporary_status, unread_message_count, unread_notif_count, unseen_message_count, user_access_expire_time, username, verification_status, voip_info, website, were_here_count, whatsapp_number, written_by
	pagepost_get_sponsor_tagsTool := mcp.NewTool("pagepost_get_sponsor_tags",
		mcp.WithDescription("GET sponsor_tags for PagePost"),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for Page objects. Available fields: about, access_token, ad_campaign, affiliation, app_id, artists_we_like, attire, available_promo_offer_ids, awards, band_interests, band_members, best_page, bio, birthday, booking_agent (and 136 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, pagepost_get_sponsor_tagsTool)

	// pagepost_get_to tool
	// Available fields for Profile: can_post, id, link, name, pic, pic_crop, pic_large, pic_small, pic_square, profile_type, username
	pagepost_get_toTool := mcp.NewTool("pagepost_get_to",
		mcp.WithDescription("GET to for PagePost"),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for Profile objects. Available fields: can_post, id, link, name, pic, pic_crop, pic_large, pic_small, pic_square, profile_type, username"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, pagepost_get_toTool)

	// pagepost_delete_ tool
	pagepost_delete_Tool := mcp.NewTool("pagepost_delete_",
		mcp.WithDescription("DELETE  for PagePost"),
	)
	tools = append(tools, pagepost_delete_Tool)

	// pagepost_get_ tool
	// Available fields for PagePost: actions, admin_creator, allowed_advertising_objectives, application, backdated_time, call_to_action, can_reply_privately, child_attachments, comments_mirroring_domain, coordinates, created_time, event, expanded_height, expanded_width, feed_targeting, from, full_picture, height, icon, id, instagram_eligibility, is_app_share, is_eligible_for_promotion, is_expired, is_hidden, is_inline_created, is_instagram_eligible, is_popular, is_published, is_spherical, message, message_tags, multi_share_end_card, multi_share_optimized, parent_id, permalink_url, picture, place, privacy, promotable_id, promotion_status, properties, scheduled_publish_time, shares, status_type, story, story_tags, subscribed, target, targeting, timeline_visibility, updated_time, via, video_buying_eligibility, width
	pagepost_get_Tool := mcp.NewTool("pagepost_get_",
		mcp.WithDescription("GET  for PagePost"),
		mcp.WithString("primary_fb_page_id",
			mcp.Description("primary_fb_page_id parameter for "),
		),
		mcp.WithString("primary_ig_user_id",
			mcp.Description("primary_ig_user_id parameter for "),
		),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for PagePost objects. Available fields: actions, admin_creator, allowed_advertising_objectives, application, backdated_time, call_to_action, can_reply_privately, child_attachments, comments_mirroring_domain, coordinates, created_time, event, expanded_height, expanded_width, feed_targeting (and 40 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, pagepost_get_Tool)

	// pagepost_post_ tool
	pagepost_post_Tool := mcp.NewTool("pagepost_post_",
		mcp.WithDescription("POST  for PagePost"),
		mcp.WithString("attached_media",
			mcp.Description("attached_media parameter for "),
		),
		mcp.WithString("backdated_time",
			mcp.Description("backdated_time parameter for "),
		),
		mcp.WithString("backdated_time_granularity",
			mcp.Description("backdated_time_granularity parameter for "),
			mcp.Enum("day", "hour", "min", "month", "none", "year"),
		),
		mcp.WithString("composer_session_id",
			mcp.Description("composer_session_id parameter for "),
		),
		mcp.WithNumber("direct_share_status",
			mcp.Description("direct_share_status parameter for "),
		),
		mcp.WithString("explicitly_added_mentionee_ids",
			mcp.Description("explicitly_added_mentionee_ids parameter for "),
		),
		mcp.WithString("feed_story_visibility",
			mcp.Description("feed_story_visibility parameter for "),
			mcp.Enum("hidden", "visible"),
		),
		mcp.WithBoolean("is_explicit_location",
			mcp.Description("is_explicit_location parameter for "),
		),
		mcp.WithBoolean("is_hidden",
			mcp.Description("is_hidden parameter for "),
		),
		mcp.WithBoolean("is_pinned",
			mcp.Description("is_pinned parameter for "),
		),
		mcp.WithBoolean("is_published",
			mcp.Description("is_published parameter for "),
		),
		mcp.WithString("message",
			mcp.Description("message parameter for "),
		),
		mcp.WithString("og_action_type_id",
			mcp.Description("og_action_type_id parameter for "),
		),
		mcp.WithBoolean("og_hide_object_attachment",
			mcp.Description("og_hide_object_attachment parameter for "),
		),
		mcp.WithString("og_icon_id",
			mcp.Description("og_icon_id parameter for "),
		),
		mcp.WithString("og_object_id",
			mcp.Description("og_object_id parameter for "),
		),
		mcp.WithString("og_phrase",
			mcp.Description("og_phrase parameter for "),
		),
		mcp.WithBoolean("og_set_profile_badge",
			mcp.Description("og_set_profile_badge parameter for "),
		),
		mcp.WithString("og_suggestion_mechanism",
			mcp.Description("og_suggestion_mechanism parameter for "),
		),
		mcp.WithString("place",
			mcp.Description("place parameter for "),
		),
		mcp.WithString("privacy",
			mcp.Description("privacy parameter for "),
		),
		mcp.WithString("product_item",
			mcp.Description("product_item parameter for "),
		),
		mcp.WithNumber("scheduled_publish_time",
			mcp.Description("scheduled_publish_time parameter for "),
		),
		mcp.WithBoolean("should_sync_product_edit",
			mcp.Description("should_sync_product_edit parameter for "),
		),
		mcp.WithString("source_type",
			mcp.Description("source_type parameter for "),
		),
		mcp.WithString("sponsor_id",
			mcp.Description("sponsor_id parameter for "),
		),
		mcp.WithNumber("sponsor_relationship",
			mcp.Description("sponsor_relationship parameter for "),
		),
		mcp.WithString("tags",
			mcp.Description("tags parameter for "),
		),
		mcp.WithString("text_format_preset_id",
			mcp.Description("text_format_preset_id parameter for "),
		),
		mcp.WithString("timeline_visibility",
			mcp.Description("timeline_visibility parameter for "),
			mcp.Enum("forced_allow", "hidden", "normal"),
		),
		mcp.WithString("tracking",
			mcp.Description("tracking parameter for "),
		),
	)
	tools = append(tools, pagepost_post_Tool)

	return tools
}

// PagePost handlers

// HandlePagepost_get_attachments handles the pagepost_get_attachments tool with context-based auth
func HandlePagepost_get_attachments(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPagePostClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Pagepost_get_attachments(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pagepost_get_attachments: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePagepost_get_comments handles the pagepost_get_comments tool with context-based auth
func HandlePagepost_get_comments(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPagePostClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: filter
	if val := request.GetString("filter", ""); val != "" {
		args["filter"] = val
	}

	// Optional: live_filter
	if val := request.GetString("live_filter", ""); val != "" {
		args["live_filter"] = val
	}

	// Optional: order
	if val := request.GetString("order", ""); val != "" {
		args["order"] = val
	}

	// Optional: since
	if val := request.GetString("since", ""); val != "" {
		args["since"] = val
	}

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Pagepost_get_comments(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pagepost_get_comments: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePagepost_post_comments handles the pagepost_post_comments tool with context-based auth
func HandlePagepost_post_comments(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPagePostClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: attachment_id
	if val := request.GetString("attachment_id", ""); val != "" {
		args["attachment_id"] = val
	}

	// Optional: attachment_share_url
	if val := request.GetString("attachment_share_url", ""); val != "" {
		args["attachment_share_url"] = val
	}

	// Optional: attachment_url
	if val := request.GetString("attachment_url", ""); val != "" {
		args["attachment_url"] = val
	}

	// Optional: comment
	if val := request.GetString("comment", ""); val != "" {
		args["comment"] = val
	}

	// Optional: comment_privacy_value
	if val := request.GetString("comment_privacy_value", ""); val != "" {
		args["comment_privacy_value"] = val
	}

	// Optional: feedback_source
	if val := request.GetString("feedback_source", ""); val != "" {
		args["feedback_source"] = val
	}

	// Optional: message
	if val := request.GetString("message", ""); val != "" {
		args["message"] = val
	}

	// Optional: nectar_module
	if val := request.GetString("nectar_module", ""); val != "" {
		args["nectar_module"] = val
	}

	// Optional: parent_comment_id
	// object type - using string
	if val := request.GetString("parent_comment_id", ""); val != "" {
		args["parent_comment_id"] = val
	}

	// Optional: post_id
	if val := request.GetString("post_id", ""); val != "" {
		args["post_id"] = val
	}

	// Optional: tracking
	if val := request.GetString("tracking", ""); val != "" {
		args["tracking"] = val
	}

	// Call the client method
	result, err := client.Pagepost_post_comments(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pagepost_post_comments: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePagepost_get_dynamic_posts handles the pagepost_get_dynamic_posts tool with context-based auth
func HandlePagepost_get_dynamic_posts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPagePostClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Pagepost_get_dynamic_posts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pagepost_get_dynamic_posts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePagepost_get_insights handles the pagepost_get_insights tool with context-based auth
func HandlePagepost_get_insights(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPagePostClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: date_preset
	if val := request.GetString("date_preset", ""); val != "" {
		args["date_preset"] = val
	}

	// Optional: metric
	// array type - using string
	if val := request.GetString("metric", ""); val != "" {
		args["metric"] = val
	}

	// Optional: period
	if val := request.GetString("period", ""); val != "" {
		args["period"] = val
	}

	// Optional: since
	if val := request.GetString("since", ""); val != "" {
		args["since"] = val
	}

	// Optional: until
	if val := request.GetString("until", ""); val != "" {
		args["until"] = val
	}

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Pagepost_get_insights(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pagepost_get_insights: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePagepost_delete_likes handles the pagepost_delete_likes tool with context-based auth
func HandlePagepost_delete_likes(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPagePostClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: nectar_module
	if val := request.GetString("nectar_module", ""); val != "" {
		args["nectar_module"] = val
	}

	// Optional: tracking
	if val := request.GetString("tracking", ""); val != "" {
		args["tracking"] = val
	}

	// Call the client method
	result, err := client.Pagepost_delete_likes(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pagepost_delete_likes: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePagepost_get_likes handles the pagepost_get_likes tool with context-based auth
func HandlePagepost_get_likes(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPagePostClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Pagepost_get_likes(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pagepost_get_likes: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePagepost_post_likes handles the pagepost_post_likes tool with context-based auth
func HandlePagepost_post_likes(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPagePostClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: feedback_source
	if val := request.GetString("feedback_source", ""); val != "" {
		args["feedback_source"] = val
	}

	// Optional: nectar_module
	if val := request.GetString("nectar_module", ""); val != "" {
		args["nectar_module"] = val
	}

	// Optional: tracking
	if val := request.GetString("tracking", ""); val != "" {
		args["tracking"] = val
	}

	// Call the client method
	result, err := client.Pagepost_post_likes(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pagepost_post_likes: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePagepost_get_reactions handles the pagepost_get_reactions tool with context-based auth
func HandlePagepost_get_reactions(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPagePostClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: type
	if val := request.GetString("type", ""); val != "" {
		args["type"] = val
	}

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Pagepost_get_reactions(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pagepost_get_reactions: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePagepost_get_sharedposts handles the pagepost_get_sharedposts tool with context-based auth
func HandlePagepost_get_sharedposts(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPagePostClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Pagepost_get_sharedposts(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pagepost_get_sharedposts: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePagepost_get_sponsor_tags handles the pagepost_get_sponsor_tags tool with context-based auth
func HandlePagepost_get_sponsor_tags(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPagePostClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Pagepost_get_sponsor_tags(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pagepost_get_sponsor_tags: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePagepost_get_to handles the pagepost_get_to tool with context-based auth
func HandlePagepost_get_to(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPagePostClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Pagepost_get_to(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pagepost_get_to: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePagepost_delete_ handles the pagepost_delete_ tool with context-based auth
func HandlePagepost_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPagePostClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Pagepost_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pagepost_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePagepost_get_ handles the pagepost_get_ tool with context-based auth
func HandlePagepost_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPagePostClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: primary_fb_page_id
	if val := request.GetString("primary_fb_page_id", ""); val != "" {
		args["primary_fb_page_id"] = val
	}

	// Optional: primary_ig_user_id
	if val := request.GetString("primary_ig_user_id", ""); val != "" {
		args["primary_ig_user_id"] = val
	}

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Pagepost_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pagepost_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePagepost_post_ handles the pagepost_post_ tool with context-based auth
func HandlePagepost_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPagePostClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: attached_media
	// array type - using string
	if val := request.GetString("attached_media", ""); val != "" {
		args["attached_media"] = val
	}

	// Optional: backdated_time
	if val := request.GetString("backdated_time", ""); val != "" {
		args["backdated_time"] = val
	}

	// Optional: backdated_time_granularity
	if val := request.GetString("backdated_time_granularity", ""); val != "" {
		args["backdated_time_granularity"] = val
	}

	// Optional: composer_session_id
	if val := request.GetString("composer_session_id", ""); val != "" {
		args["composer_session_id"] = val
	}

	// Optional: direct_share_status
	if val := request.GetInt("direct_share_status", 0); val != 0 {
		args["direct_share_status"] = val
	}

	// Optional: explicitly_added_mentionee_ids
	// array type - using string
	if val := request.GetString("explicitly_added_mentionee_ids", ""); val != "" {
		args["explicitly_added_mentionee_ids"] = val
	}

	// Optional: feed_story_visibility
	if val := request.GetString("feed_story_visibility", ""); val != "" {
		args["feed_story_visibility"] = val
	}

	// Optional: is_explicit_location
	if val := request.GetBool("is_explicit_location", false); val {
		args["is_explicit_location"] = val
	}

	// Optional: is_hidden
	if val := request.GetBool("is_hidden", false); val {
		args["is_hidden"] = val
	}

	// Optional: is_pinned
	if val := request.GetBool("is_pinned", false); val {
		args["is_pinned"] = val
	}

	// Optional: is_published
	if val := request.GetBool("is_published", false); val {
		args["is_published"] = val
	}

	// Optional: message
	if val := request.GetString("message", ""); val != "" {
		args["message"] = val
	}

	// Optional: og_action_type_id
	if val := request.GetString("og_action_type_id", ""); val != "" {
		args["og_action_type_id"] = val
	}

	// Optional: og_hide_object_attachment
	if val := request.GetBool("og_hide_object_attachment", false); val {
		args["og_hide_object_attachment"] = val
	}

	// Optional: og_icon_id
	if val := request.GetString("og_icon_id", ""); val != "" {
		args["og_icon_id"] = val
	}

	// Optional: og_object_id
	if val := request.GetString("og_object_id", ""); val != "" {
		args["og_object_id"] = val
	}

	// Optional: og_phrase
	if val := request.GetString("og_phrase", ""); val != "" {
		args["og_phrase"] = val
	}

	// Optional: og_set_profile_badge
	if val := request.GetBool("og_set_profile_badge", false); val {
		args["og_set_profile_badge"] = val
	}

	// Optional: og_suggestion_mechanism
	if val := request.GetString("og_suggestion_mechanism", ""); val != "" {
		args["og_suggestion_mechanism"] = val
	}

	// Optional: place
	// object type - using string
	if val := request.GetString("place", ""); val != "" {
		args["place"] = val
	}

	// Optional: privacy
	if val := request.GetString("privacy", ""); val != "" {
		args["privacy"] = val
	}

	// Optional: product_item
	// object type - using string
	if val := request.GetString("product_item", ""); val != "" {
		args["product_item"] = val
	}

	// Optional: scheduled_publish_time
	if val := request.GetInt("scheduled_publish_time", 0); val != 0 {
		args["scheduled_publish_time"] = val
	}

	// Optional: should_sync_product_edit
	if val := request.GetBool("should_sync_product_edit", false); val {
		args["should_sync_product_edit"] = val
	}

	// Optional: source_type
	if val := request.GetString("source_type", ""); val != "" {
		args["source_type"] = val
	}

	// Optional: sponsor_id
	if val := request.GetString("sponsor_id", ""); val != "" {
		args["sponsor_id"] = val
	}

	// Optional: sponsor_relationship
	if val := request.GetInt("sponsor_relationship", 0); val != 0 {
		args["sponsor_relationship"] = val
	}

	// Optional: tags
	// array type - using string
	if val := request.GetString("tags", ""); val != "" {
		args["tags"] = val
	}

	// Optional: text_format_preset_id
	if val := request.GetString("text_format_preset_id", ""); val != "" {
		args["text_format_preset_id"] = val
	}

	// Optional: timeline_visibility
	if val := request.GetString("timeline_visibility", ""); val != "" {
		args["timeline_visibility"] = val
	}

	// Optional: tracking
	if val := request.GetString("tracking", ""); val != "" {
		args["tracking"] = val
	}

	// Call the client method
	result, err := client.Pagepost_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute pagepost_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
