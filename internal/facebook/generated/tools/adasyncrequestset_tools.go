// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetAdAsyncRequestSetTools returns MCP tools for AdAsyncRequestSet
func GetAdAsyncRequestSetTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool


	// facebook_adasyncrequestset_get_requests tool
	facebook_adasyncrequestset_get_requestsTool := mcp.NewTool("facebook_adasyncrequestset_get_requests",
		mcp.WithDescription("GET requests for AdAsyncRequestSet"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("statuses",
			mcp.Description("statuses parameter for requests"),
			mcp.Enum("CANCELED", "CANCELED_DEPENDENCY", "ERROR", "ERROR_CONFLICTS", "ERROR_DEPENDENCY", "INITIAL", "IN_PROGRESS", "PENDING_DEPENDENCY", "PROCESS_BY_AD_ASYNC_ENGINE", "PROCESS_BY_EVENT_PROCESSOR", "SUCCESS", "USER_CANCELED", "USER_CANCELED_DEPENDENCY"),
		),
	)
	tools = append(tools, facebook_adasyncrequestset_get_requestsTool)

	// facebook_adasyncrequestset_delete_ tool
	facebook_adasyncrequestset_delete_Tool := mcp.NewTool("facebook_adasyncrequestset_delete_",
		mcp.WithDescription("DELETE  for AdAsyncRequestSet"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_adasyncrequestset_delete_Tool)

	// facebook_adasyncrequestset_get_ tool
	facebook_adasyncrequestset_get_Tool := mcp.NewTool("facebook_adasyncrequestset_get_",
		mcp.WithDescription("GET  for AdAsyncRequestSet"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_adasyncrequestset_get_Tool)

	// facebook_adasyncrequestset_post_ tool
	facebook_adasyncrequestset_post_Tool := mcp.NewTool("facebook_adasyncrequestset_post_",
		mcp.WithDescription("POST  for AdAsyncRequestSet"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("name",
			mcp.Description("name parameter for "),
		),
		mcp.WithString("notification_mode",
			mcp.Description("notification_mode parameter for "),
			mcp.Enum("OFF", "ON_COMPLETE"),
		),
		mcp.WithString("notification_uri",
			mcp.Description("notification_uri parameter for "),
		),
	)
	tools = append(tools, facebook_adasyncrequestset_post_Tool)


	return tools
}

// AdAsyncRequestSet handlers


// HandleFacebook_adasyncrequestset_get_requests handles the facebook_adasyncrequestset_get_requests tool
func HandleFacebook_adasyncrequestset_get_requests(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAdAsyncRequestSetClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: statuses
	// array type - using string
	if val := request.GetString("statuses", ""); val != "" {
		args["statuses"] = val
	}



	// Call the client method
	result, err := client.Facebook_adasyncrequestset_get_requests(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_adasyncrequestset_get_requests: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_adasyncrequestset_delete_ handles the facebook_adasyncrequestset_delete_ tool
func HandleFacebook_adasyncrequestset_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAdAsyncRequestSetClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_adasyncrequestset_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_adasyncrequestset_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_adasyncrequestset_get_ handles the facebook_adasyncrequestset_get_ tool
func HandleFacebook_adasyncrequestset_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAdAsyncRequestSetClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_adasyncrequestset_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_adasyncrequestset_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_adasyncrequestset_post_ handles the facebook_adasyncrequestset_post_ tool
func HandleFacebook_adasyncrequestset_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewAdAsyncRequestSetClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: name
	if val := request.GetString("name", ""); val != "" {
		args["name"] = val
	}

	// Optional: notification_mode
	if val := request.GetString("notification_mode", ""); val != "" {
		args["notification_mode"] = val
	}

	// Optional: notification_uri
	if val := request.GetString("notification_uri", ""); val != "" {
		args["notification_uri"] = val
	}



	// Call the client method
	result, err := client.Facebook_adasyncrequestset_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_adasyncrequestset_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

