// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetAdAsyncRequestSetTools returns MCP tools for AdAsyncRequestSet
func GetAdAsyncRequestSetTools() []mcp.Tool {
	var tools []mcp.Tool

	// adasyncrequestset_get_requests tool
	// Available fields for AdAsyncRequest: async_request_set, created_time, id, input, result, scope_object_id, status, type, updated_time
	adasyncrequestset_get_requestsTool := mcp.NewTool("adasyncrequestset_get_requests",
		mcp.WithDescription("GET requests for AdAsyncRequestSet"),
		mcp.WithString("statuses",
			mcp.Description("statuses parameter for requests"),
			mcp.Enum("CANCELED", "CANCELED_DEPENDENCY", "ERROR", "ERROR_CONFLICTS", "ERROR_DEPENDENCY", "INITIAL", "IN_PROGRESS", "PENDING_DEPENDENCY", "PROCESS_BY_AD_ASYNC_ENGINE", "PROCESS_BY_EVENT_PROCESSOR", "SUCCESS", "USER_CANCELED", "USER_CANCELED_DEPENDENCY"),
		),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for AdAsyncRequest objects. Available fields: async_request_set, created_time, id, input, result, scope_object_id, status, type, updated_time"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, adasyncrequestset_get_requestsTool)

	// adasyncrequestset_delete_ tool
	adasyncrequestset_delete_Tool := mcp.NewTool("adasyncrequestset_delete_",
		mcp.WithDescription("DELETE  for AdAsyncRequestSet"),
	)
	tools = append(tools, adasyncrequestset_delete_Tool)

	// adasyncrequestset_get_ tool
	// Available fields for AdAsyncRequestSet: canceled_count, created_time, error_count, id, in_progress_count, initial_count, is_completed, name, notification_mode, notification_result, notification_status, notification_uri, owner_id, success_count, total_count, updated_time
	adasyncrequestset_get_Tool := mcp.NewTool("adasyncrequestset_get_",
		mcp.WithDescription("GET  for AdAsyncRequestSet"),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for AdAsyncRequestSet objects. Available fields: canceled_count, created_time, error_count, id, in_progress_count, initial_count, is_completed, name, notification_mode, notification_result, notification_status, notification_uri, owner_id, success_count, total_count (and 1 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, adasyncrequestset_get_Tool)

	// adasyncrequestset_post_ tool
	adasyncrequestset_post_Tool := mcp.NewTool("adasyncrequestset_post_",
		mcp.WithDescription("POST  for AdAsyncRequestSet"),
		mcp.WithString("name",
			mcp.Description("name parameter for "),
		),
		mcp.WithString("notification_mode",
			mcp.Description("notification_mode parameter for "),
			mcp.Enum("OFF", "ON_COMPLETE"),
		),
		mcp.WithString("notification_uri",
			mcp.Description("notification_uri parameter for "),
		),
	)
	tools = append(tools, adasyncrequestset_post_Tool)

	return tools
}

// AdAsyncRequestSet handlers

// HandleAdasyncrequestset_get_requests handles the adasyncrequestset_get_requests tool with context-based auth
func HandleAdasyncrequestset_get_requests(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdAsyncRequestSetClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: statuses
	// array type - using string
	if val := request.GetString("statuses", ""); val != "" {
		args["statuses"] = val
	}

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Adasyncrequestset_get_requests(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adasyncrequestset_get_requests: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAdasyncrequestset_delete_ handles the adasyncrequestset_delete_ tool with context-based auth
func HandleAdasyncrequestset_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdAsyncRequestSetClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Adasyncrequestset_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adasyncrequestset_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAdasyncrequestset_get_ handles the adasyncrequestset_get_ tool with context-based auth
func HandleAdasyncrequestset_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdAsyncRequestSetClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Adasyncrequestset_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adasyncrequestset_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleAdasyncrequestset_post_ handles the adasyncrequestset_post_ tool with context-based auth
func HandleAdasyncrequestset_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewAdAsyncRequestSetClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: name
	if val := request.GetString("name", ""); val != "" {
		args["name"] = val
	}

	// Optional: notification_mode
	if val := request.GetString("notification_mode", ""); val != "" {
		args["notification_mode"] = val
	}

	// Optional: notification_uri
	if val := request.GetString("notification_uri", ""); val != "" {
		args["notification_uri"] = val
	}

	// Call the client method
	result, err := client.Adasyncrequestset_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adasyncrequestset_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
