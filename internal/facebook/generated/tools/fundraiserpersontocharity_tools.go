// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetFundraiserPersonToCharityTools returns MCP tools for FundraiserPersonToCharity
func GetFundraiserPersonToCharityTools() []mcp.Tool {
	var tools []mcp.Tool


	// fundraiserpersontocharity_get_donations tool
	fundraiserpersontocharity_get_donationsTool := mcp.NewTool("fundraiserpersontocharity_get_donations",
		mcp.WithDescription("GET donations for FundraiserPersonToCharity"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, fundraiserpersontocharity_get_donationsTool)

	// fundraiserpersontocharity_post_end_fundraiser tool
	fundraiserpersontocharity_post_end_fundraiserTool := mcp.NewTool("fundraiserpersontocharity_post_end_fundraiser",
		mcp.WithDescription("POST end_fundraiser for FundraiserPersonToCharity"),
	)
	tools = append(tools, fundraiserpersontocharity_post_end_fundraiserTool)

	// fundraiserpersontocharity_get_external_donations tool
	fundraiserpersontocharity_get_external_donationsTool := mcp.NewTool("fundraiserpersontocharity_get_external_donations",
		mcp.WithDescription("GET external_donations for FundraiserPersonToCharity"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, fundraiserpersontocharity_get_external_donationsTool)

	// fundraiserpersontocharity_post_external_donations tool
	// Params object accepts: amount_received (unsigned int), currency (string), donation_id_hash (string), donation_time (unsigned int), donor_id_hash (string)
	fundraiserpersontocharity_post_external_donationsTool := mcp.NewTool("fundraiserpersontocharity_post_external_donations",
		mcp.WithDescription("POST external_donations for FundraiserPersonToCharity"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"amount_received": map[string]any{
					"type": "integer",
					"description": "amount_received parameter",
					"required": true,
				},
				"currency": map[string]any{
					"type": "string",
					"description": "currency parameter",
					"required": true,
				},
				"donation_id_hash": map[string]any{
					"type": "string",
					"description": "donation_id_hash parameter",
					"required": true,
				},
				"donation_time": map[string]any{
					"type": "integer",
					"description": "donation_time parameter",
					"required": true,
				},
				"donor_id_hash": map[string]any{
					"type": "string",
					"description": "donor_id_hash parameter",
					"required": true,
				},
			}),
			mcp.Description("Parameters object containing: amount_received (integer) [required], currency (string) [required], donation_id_hash (string) [required], donation_time (integer) [required], donor_id_hash (string) [required]"),
		),
	)
	tools = append(tools, fundraiserpersontocharity_post_external_donationsTool)

	// fundraiserpersontocharity_get_ tool
	// Available fields for FundraiserPersonToCharity: amount_raised, charity_id, currency, description, donations_count, donors_count, end_time, external_amount_raised, external_donations_count, external_donors_count, external_event_name, external_event_start_time, external_event_uri, external_fundraiser_uri, external_id, goal_amount, id, internal_amount_raised, internal_donations_count, internal_donors_count, name, uri
	fundraiserpersontocharity_get_Tool := mcp.NewTool("fundraiserpersontocharity_get_",
		mcp.WithDescription("GET  for FundraiserPersonToCharity"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for FundraiserPersonToCharity objects. Available fields: amount_raised, charity_id, currency, description, donations_count, donors_count, end_time, external_amount_raised, external_donations_count, external_donors_count, external_event_name, external_event_start_time, external_event_uri, external_fundraiser_uri, external_id (and 7 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, fundraiserpersontocharity_get_Tool)

	// fundraiserpersontocharity_post_ tool
	// Params object accepts: description (string), end_time (datetime), external_event_name (string), external_event_start_time (datetime), external_event_uri (string), external_fundraiser_uri (string), external_id (string), goal_amount (unsigned int), name (string)
	fundraiserpersontocharity_post_Tool := mcp.NewTool("fundraiserpersontocharity_post_",
		mcp.WithDescription("POST  for FundraiserPersonToCharity"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"description": map[string]any{
					"type": "string",
					"description": "description parameter",
				},
				"end_time": map[string]any{
					"type": "string",
					"description": "end_time parameter",
				},
				"external_event_name": map[string]any{
					"type": "string",
					"description": "external_event_name parameter",
				},
				"external_event_start_time": map[string]any{
					"type": "string",
					"description": "external_event_start_time parameter",
				},
				"external_event_uri": map[string]any{
					"type": "string",
					"description": "external_event_uri parameter",
				},
				"external_fundraiser_uri": map[string]any{
					"type": "string",
					"description": "external_fundraiser_uri parameter",
				},
				"external_id": map[string]any{
					"type": "string",
					"description": "external_id parameter",
				},
				"goal_amount": map[string]any{
					"type": "integer",
					"description": "goal_amount parameter",
				},
				"name": map[string]any{
					"type": "string",
					"description": "name parameter",
				},
			}),
			mcp.Description("Parameters object containing: description (string), end_time (datetime), external_event_name (string), external_event_start_time (datetime), external_event_uri (string), external_fundraiser_uri (string), external_id (string), goal_amount (integer), name (string)"),
		),
	)
	tools = append(tools, fundraiserpersontocharity_post_Tool)


	return tools
}

// FundraiserPersonToCharity handlers


// HandleFundraiserpersontocharity_get_donations handles the fundraiserpersontocharity_get_donations tool with context-based auth
func HandleFundraiserpersontocharity_get_donations(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewFundraiserPersonToCharityClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Fundraiserpersontocharity_get_donations(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute fundraiserpersontocharity_get_donations: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFundraiserpersontocharity_post_end_fundraiser handles the fundraiserpersontocharity_post_end_fundraiser tool with context-based auth
func HandleFundraiserpersontocharity_post_end_fundraiser(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewFundraiserPersonToCharityClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Fundraiserpersontocharity_post_end_fundraiser(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute fundraiserpersontocharity_post_end_fundraiser: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFundraiserpersontocharity_get_external_donations handles the fundraiserpersontocharity_get_external_donations tool with context-based auth
func HandleFundraiserpersontocharity_get_external_donations(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewFundraiserPersonToCharityClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Fundraiserpersontocharity_get_external_donations(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute fundraiserpersontocharity_get_external_donations: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFundraiserpersontocharity_post_external_donations handles the fundraiserpersontocharity_post_external_donations tool with context-based auth
func HandleFundraiserpersontocharity_post_external_donations(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewFundraiserPersonToCharityClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}



	// Call the client method
	result, err := client.Fundraiserpersontocharity_post_external_donations(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute fundraiserpersontocharity_post_external_donations: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFundraiserpersontocharity_get_ handles the fundraiserpersontocharity_get_ tool with context-based auth
func HandleFundraiserpersontocharity_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewFundraiserPersonToCharityClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Fundraiserpersontocharity_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute fundraiserpersontocharity_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFundraiserpersontocharity_post_ handles the fundraiserpersontocharity_post_ tool with context-based auth
func HandleFundraiserpersontocharity_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewFundraiserPersonToCharityClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the client method
	result, err := client.Fundraiserpersontocharity_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute fundraiserpersontocharity_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

