// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetCustomConversionTools returns MCP tools for CustomConversion
func GetCustomConversionTools() []mcp.Tool {
	var tools []mcp.Tool

	// customconversion_get_stats tool
	// Available fields for CustomConversionStatsResult: aggregation, data, timestamp
	// Params object accepts: aggregation (customconversionstats_aggregation_enum_param), end_time (datetime), start_time (datetime)
	customconversion_get_statsTool := mcp.NewTool("customconversion_get_stats",
		mcp.WithDescription("GET stats for CustomConversion"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"aggregation": map[string]any{
					"type":        "string",
					"description": "aggregation parameter",
					"enum":        []string{"count", "device_type", "host", "pixel_fire", "unmatched_count", "unmatched_usd_amount", "url", "usd_amount"},
				},
				"end_time": map[string]any{
					"type":        "string",
					"description": "end_time parameter",
				},
				"start_time": map[string]any{
					"type":        "string",
					"description": "start_time parameter",
				},
			}),
			mcp.Description("Parameters object containing: aggregation (enum) [count, device_type, host, pixel_fire, unmatched_count, ...], end_time (datetime), start_time (datetime)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for CustomConversionStatsResult objects. Available fields: aggregation, data, timestamp"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, customconversion_get_statsTool)

	// customconversion_delete_ tool
	customconversion_delete_Tool := mcp.NewTool("customconversion_delete_",
		mcp.WithDescription("DELETE  for CustomConversion"),
	)
	tools = append(tools, customconversion_delete_Tool)

	// customconversion_get_ tool
	// Available fields for CustomConversion: account_id, aggregation_rule, business, creation_time, custom_event_type, data_sources, default_conversion_value, description, event_source_type, first_fired_time, id, is_archived, is_unavailable, last_fired_time, name, offline_conversion_data_set, pixel, retention_days, rule
	customconversion_get_Tool := mcp.NewTool("customconversion_get_",
		mcp.WithDescription("GET  for CustomConversion"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for CustomConversion objects. Available fields: account_id, aggregation_rule, business, creation_time, custom_event_type, data_sources, default_conversion_value, description, event_source_type, first_fired_time, id, is_archived, is_unavailable, last_fired_time, name (and 4 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, customconversion_get_Tool)

	// customconversion_post_ tool
	// Params object accepts: default_conversion_value (float), description (string), name (string)
	customconversion_post_Tool := mcp.NewTool("customconversion_post_",
		mcp.WithDescription("POST  for CustomConversion"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"default_conversion_value": map[string]any{
					"type":        "number",
					"description": "default_conversion_value parameter",
				},
				"description": map[string]any{
					"type":        "string",
					"description": "description parameter",
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
				},
			}),
			mcp.Description("Parameters object containing: default_conversion_value (number), description (string), name (string)"),
		),
	)
	tools = append(tools, customconversion_post_Tool)

	return tools
}

// CustomConversion handlers

// HandleCustomconversion_get_stats handles the customconversion_get_stats tool with context-based auth
func HandleCustomconversion_get_stats(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewCustomConversionClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Customconversion_get_stats(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute customconversion_get_stats: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleCustomconversion_delete_ handles the customconversion_delete_ tool with context-based auth
func HandleCustomconversion_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewCustomConversionClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Customconversion_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute customconversion_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleCustomconversion_get_ handles the customconversion_get_ tool with context-based auth
func HandleCustomconversion_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewCustomConversionClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Customconversion_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute customconversion_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleCustomconversion_post_ handles the customconversion_post_ tool with context-based auth
func HandleCustomconversion_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewCustomConversionClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Call the client method
	result, err := client.Customconversion_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute customconversion_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
