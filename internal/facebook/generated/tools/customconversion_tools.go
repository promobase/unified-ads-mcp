// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetCustomConversionTools returns MCP tools for CustomConversion
func GetCustomConversionTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool

	// facebook_customconversion_get_stats tool
	facebook_customconversion_get_statsTool := mcp.NewTool("facebook_customconversion_get_stats",
		mcp.WithDescription("GET stats for CustomConversion"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("aggregation",
			mcp.Description("aggregation parameter for stats"),
			mcp.Enum("count", "device_type", "host", "pixel_fire", "unmatched_count", "unmatched_usd_amount", "url", "usd_amount"),
		),
		mcp.WithString("end_time",
			mcp.Description("end_time parameter for stats"),
		),
		mcp.WithString("start_time",
			mcp.Description("start_time parameter for stats"),
		),
	)
	tools = append(tools, facebook_customconversion_get_statsTool)

	// facebook_customconversion_delete_ tool
	facebook_customconversion_delete_Tool := mcp.NewTool("facebook_customconversion_delete_",
		mcp.WithDescription("DELETE  for CustomConversion"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_customconversion_delete_Tool)

	// facebook_customconversion_get_ tool
	facebook_customconversion_get_Tool := mcp.NewTool("facebook_customconversion_get_",
		mcp.WithDescription("GET  for CustomConversion"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_customconversion_get_Tool)

	// facebook_customconversion_post_ tool
	facebook_customconversion_post_Tool := mcp.NewTool("facebook_customconversion_post_",
		mcp.WithDescription("POST  for CustomConversion"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithNumber("default_conversion_value",
			mcp.Description("default_conversion_value parameter for "),
		),
		mcp.WithString("description",
			mcp.Description("description parameter for "),
		),
		mcp.WithString("name",
			mcp.Description("name parameter for "),
		),
	)
	tools = append(tools, facebook_customconversion_post_Tool)

	return tools
}

// CustomConversion handlers

// HandleFacebook_customconversion_get_stats handles the facebook_customconversion_get_stats tool
func HandleFacebook_customconversion_get_stats(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCustomConversionClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: aggregation
	if val := request.GetString("aggregation", ""); val != "" {
		args["aggregation"] = val
	}

	// Optional: end_time
	if val := request.GetString("end_time", ""); val != "" {
		args["end_time"] = val
	}

	// Optional: start_time
	if val := request.GetString("start_time", ""); val != "" {
		args["start_time"] = val
	}

	// Call the client method
	result, err := client.Facebook_customconversion_get_stats(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_customconversion_get_stats: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_customconversion_delete_ handles the facebook_customconversion_delete_ tool
func HandleFacebook_customconversion_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCustomConversionClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_customconversion_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_customconversion_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_customconversion_get_ handles the facebook_customconversion_get_ tool
func HandleFacebook_customconversion_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCustomConversionClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Facebook_customconversion_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_customconversion_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandleFacebook_customconversion_post_ handles the facebook_customconversion_post_ tool
func HandleFacebook_customconversion_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewCustomConversionClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: default_conversion_value
	if val := request.GetFloat("default_conversion_value", 0); val != 0 {
		args["default_conversion_value"] = val
	}

	// Optional: description
	if val := request.GetString("description", ""); val != "" {
		args["description"] = val
	}

	// Optional: name
	if val := request.GetString("name", ""); val != "" {
		args["name"] = val
	}

	// Call the client method
	result, err := client.Facebook_customconversion_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_customconversion_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
