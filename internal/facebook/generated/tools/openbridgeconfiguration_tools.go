// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetOpenBridgeConfigurationTools returns MCP tools for OpenBridgeConfiguration
func GetOpenBridgeConfigurationTools() []mcp.Tool {
	var tools []mcp.Tool


	// openbridgeconfiguration_delete_ tool
	openbridgeconfiguration_delete_Tool := mcp.NewTool("openbridgeconfiguration_delete_",
		mcp.WithDescription("DELETE  for OpenBridgeConfiguration"),
	)
	tools = append(tools, openbridgeconfiguration_delete_Tool)

	// openbridgeconfiguration_get_ tool
	// Available fields for OpenBridgeConfiguration: active, cloud_provider, cloud_region, destination_id, endpoint, fallback_domain, first_party_domain, host_business_id, id, instance_id, instance_version, is_sgw_instance, is_sgw_pixel_from_meta_pixel, partner_name, pixel_id, sgw_account_id, sgw_instance_url, sgw_pixel_id
	openbridgeconfiguration_get_Tool := mcp.NewTool("openbridgeconfiguration_get_",
		mcp.WithDescription("GET  for OpenBridgeConfiguration"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for OpenBridgeConfiguration objects. Available fields: active, cloud_provider, cloud_region, destination_id, endpoint, fallback_domain, first_party_domain, host_business_id, id, instance_id, instance_version, is_sgw_instance, is_sgw_pixel_from_meta_pixel, partner_name, pixel_id (and 3 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, openbridgeconfiguration_get_Tool)

	// openbridgeconfiguration_post_ tool
	// Params object accepts: active (bool), cloud_provider (string), cloud_region (string), destination_id (string), endpoint (string), fallback_domain (string), first_party_domain (string), host_business_id (unsigned int), instance_id (string), instance_version (string), is_sgw_instance (bool), is_sgw_pixel_from_meta_pixel (bool), partner_name (string), sgw_account_id (string), sgw_instance_url (string), sgw_pixel_id (unsigned int)
	openbridgeconfiguration_post_Tool := mcp.NewTool("openbridgeconfiguration_post_",
		mcp.WithDescription("POST  for OpenBridgeConfiguration"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"active": map[string]any{
					"type": "boolean",
					"description": "active parameter",
				},
				"cloud_provider": map[string]any{
					"type": "string",
					"description": "cloud_provider parameter",
				},
				"cloud_region": map[string]any{
					"type": "string",
					"description": "cloud_region parameter",
				},
				"destination_id": map[string]any{
					"type": "string",
					"description": "destination_id parameter",
				},
				"endpoint": map[string]any{
					"type": "string",
					"description": "endpoint parameter",
				},
				"fallback_domain": map[string]any{
					"type": "string",
					"description": "fallback_domain parameter",
				},
				"first_party_domain": map[string]any{
					"type": "string",
					"description": "first_party_domain parameter",
				},
				"host_business_id": map[string]any{
					"type": "integer",
					"description": "host_business_id parameter",
				},
				"instance_id": map[string]any{
					"type": "string",
					"description": "instance_id parameter",
				},
				"instance_version": map[string]any{
					"type": "string",
					"description": "instance_version parameter",
				},
				"is_sgw_instance": map[string]any{
					"type": "boolean",
					"description": "is_sgw_instance parameter",
				},
				"is_sgw_pixel_from_meta_pixel": map[string]any{
					"type": "boolean",
					"description": "is_sgw_pixel_from_meta_pixel parameter",
				},
				"partner_name": map[string]any{
					"type": "string",
					"description": "partner_name parameter",
				},
				"sgw_account_id": map[string]any{
					"type": "string",
					"description": "sgw_account_id parameter",
				},
				"sgw_instance_url": map[string]any{
					"type": "string",
					"description": "sgw_instance_url parameter",
				},
				"sgw_pixel_id": map[string]any{
					"type": "integer",
					"description": "sgw_pixel_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: active (boolean), cloud_provider (string), cloud_region (string), destination_id (string), endpoint (string), fallback_domain (string), first_party_domain (string), host_business_id (integer), instance_id (string), instance_version (string), is_sgw_instance (boolean), is_sgw_pixel_from_meta_pixel (boolean), partner_name (string), sgw_account_id (string), sgw_instance_url (string), sgw_pixel_id (integer)"),
		),
	)
	tools = append(tools, openbridgeconfiguration_post_Tool)


	return tools
}

// OpenBridgeConfiguration handlers


// HandleOpenbridgeconfiguration_delete_ handles the openbridgeconfiguration_delete_ tool with context-based auth
func HandleOpenbridgeconfiguration_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewOpenBridgeConfigurationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Openbridgeconfiguration_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute openbridgeconfiguration_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleOpenbridgeconfiguration_get_ handles the openbridgeconfiguration_get_ tool with context-based auth
func HandleOpenbridgeconfiguration_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewOpenBridgeConfigurationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Openbridgeconfiguration_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute openbridgeconfiguration_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleOpenbridgeconfiguration_post_ handles the openbridgeconfiguration_post_ tool with context-based auth
func HandleOpenbridgeconfiguration_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewOpenBridgeConfigurationClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the client method
	result, err := client.Openbridgeconfiguration_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute openbridgeconfiguration_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

