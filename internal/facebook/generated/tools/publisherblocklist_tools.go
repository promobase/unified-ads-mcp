// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetPublisherBlockListTools returns MCP tools for PublisherBlockList
func GetPublisherBlockListTools() []mcp.Tool {
	var tools []mcp.Tool

	// publisherblocklist_post_append_publisher_urls tool
	publisherblocklist_post_append_publisher_urlsTool := mcp.NewTool("publisherblocklist_post_append_publisher_urls",
		mcp.WithDescription("POST append_publisher_urls for PublisherBlockList"),
		mcp.WithString("publisher_urls",
			mcp.Required(),
			mcp.Description("publisher_urls parameter for append_publisher_urls"),
		),
	)
	tools = append(tools, publisherblocklist_post_append_publisher_urlsTool)

	// publisherblocklist_get_paged_web_publishers tool
	// Available fields for WebPublisher: domain_url, id, publisher_name
	publisherblocklist_get_paged_web_publishersTool := mcp.NewTool("publisherblocklist_get_paged_web_publishers",
		mcp.WithDescription("GET paged_web_publishers for PublisherBlockList"),
		mcp.WithString("draft_id",
			mcp.Description("draft_id parameter for paged_web_publishers"),
		),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for WebPublisher objects. Available fields: domain_url, id, publisher_name"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, publisherblocklist_get_paged_web_publishersTool)

	// publisherblocklist_delete_ tool
	publisherblocklist_delete_Tool := mcp.NewTool("publisherblocklist_delete_",
		mcp.WithDescription("DELETE  for PublisherBlockList"),
	)
	tools = append(tools, publisherblocklist_delete_Tool)

	// publisherblocklist_get_ tool
	// Available fields for PublisherBlockList: app_publishers, business_owner_id, id, is_auto_blocking_on, is_eligible_at_campaign_level, last_update_time, last_update_user, name, owner_ad_account_id, web_publishers
	publisherblocklist_get_Tool := mcp.NewTool("publisherblocklist_get_",
		mcp.WithDescription("GET  for PublisherBlockList"),
		mcp.WithNumber("account_id",
			mcp.Description("account_id parameter for "),
		),
		mcp.WithString("business_id",
			mcp.Description("business_id parameter for "),
		),
		mcp.WithString("draft_id",
			mcp.Description("draft_id parameter for "),
		),
		mcp.WithString("fields",
			mcp.Description("Comma-separated list of fields to return for PublisherBlockList objects. Available fields: app_publishers, business_owner_id, id, is_auto_blocking_on, is_eligible_at_campaign_level, last_update_time, last_update_user, name, owner_ad_account_id, web_publishers"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, publisherblocklist_get_Tool)

	// publisherblocklist_post_ tool
	publisherblocklist_post_Tool := mcp.NewTool("publisherblocklist_post_",
		mcp.WithDescription("POST  for PublisherBlockList"),
		mcp.WithString("spec",
			mcp.Required(),
			mcp.Description("spec parameter for "),
		),
	)
	tools = append(tools, publisherblocklist_post_Tool)

	return tools
}

// PublisherBlockList handlers

// HandlePublisherblocklist_post_append_publisher_urls handles the publisherblocklist_post_append_publisher_urls tool with context-based auth
func HandlePublisherblocklist_post_append_publisher_urls(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPublisherBlockListClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: publisher_urls
	publisher_urls, err := request.RequireString("publisher_urls")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter publisher_urls: %v", err)), nil
	}
	args["publisher_urls"] = publisher_urls

	// Call the client method
	result, err := client.Publisherblocklist_post_append_publisher_urls(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute publisherblocklist_post_append_publisher_urls: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePublisherblocklist_get_paged_web_publishers handles the publisherblocklist_get_paged_web_publishers tool with context-based auth
func HandlePublisherblocklist_get_paged_web_publishers(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPublisherBlockListClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: draft_id
	if val := request.GetString("draft_id", ""); val != "" {
		args["draft_id"] = val
	}

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Publisherblocklist_get_paged_web_publishers(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute publisherblocklist_get_paged_web_publishers: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePublisherblocklist_delete_ handles the publisherblocklist_delete_ tool with context-based auth
func HandlePublisherblocklist_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPublisherBlockListClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Call the client method
	result, err := client.Publisherblocklist_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute publisherblocklist_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePublisherblocklist_get_ handles the publisherblocklist_get_ tool with context-based auth
func HandlePublisherblocklist_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPublisherBlockListClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: account_id
	if val := request.GetInt("account_id", 0); val != 0 {
		args["account_id"] = val
	}

	// Optional: business_id
	if val := request.GetString("business_id", ""); val != "" {
		args["business_id"] = val
	}

	// Optional: draft_id
	if val := request.GetString("draft_id", ""); val != "" {
		args["draft_id"] = val
	}

	// Optional: fields
	if val := request.GetString("fields", ""); val != "" {
		args["fields"] = val
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the client method
	result, err := client.Publisherblocklist_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute publisherblocklist_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// HandlePublisherblocklist_post_ handles the publisherblocklist_post_ tool with context-based auth
func HandlePublisherblocklist_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewPublisherBlockListClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: spec
	spec, err := request.RequireString("spec")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter spec: %v", err)), nil
	}
	args["spec"] = spec

	// Call the client method
	result, err := client.Publisherblocklist_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute publisherblocklist_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}
