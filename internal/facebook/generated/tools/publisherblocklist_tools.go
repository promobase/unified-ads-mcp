// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetPublisherBlockListTools returns MCP tools for PublisherBlockList
func GetPublisherBlockListTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool


	// facebook_publisherblocklist_post_append_publisher_urls tool
	facebook_publisherblocklist_post_append_publisher_urlsTool := mcp.NewTool("facebook_publisherblocklist_post_append_publisher_urls",
		mcp.WithDescription("POST append_publisher_urls for PublisherBlockList"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("publisher_urls",
			mcp.Required(),
			mcp.Description("publisher_urls parameter for append_publisher_urls"),
		),
	)
	tools = append(tools, facebook_publisherblocklist_post_append_publisher_urlsTool)

	// facebook_publisherblocklist_get_paged_web_publishers tool
	facebook_publisherblocklist_get_paged_web_publishersTool := mcp.NewTool("facebook_publisherblocklist_get_paged_web_publishers",
		mcp.WithDescription("GET paged_web_publishers for PublisherBlockList"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("draft_id",
			mcp.Description("draft_id parameter for paged_web_publishers"),
		),
	)
	tools = append(tools, facebook_publisherblocklist_get_paged_web_publishersTool)

	// facebook_publisherblocklist_delete_ tool
	facebook_publisherblocklist_delete_Tool := mcp.NewTool("facebook_publisherblocklist_delete_",
		mcp.WithDescription("DELETE  for PublisherBlockList"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_publisherblocklist_delete_Tool)

	// facebook_publisherblocklist_get_ tool
	facebook_publisherblocklist_get_Tool := mcp.NewTool("facebook_publisherblocklist_get_",
		mcp.WithDescription("GET  for PublisherBlockList"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithNumber("account_id",
			mcp.Description("account_id parameter for "),
		),
		mcp.WithString("business_id",
			mcp.Description("business_id parameter for "),
		),
		mcp.WithString("draft_id",
			mcp.Description("draft_id parameter for "),
		),
	)
	tools = append(tools, facebook_publisherblocklist_get_Tool)

	// facebook_publisherblocklist_post_ tool
	facebook_publisherblocklist_post_Tool := mcp.NewTool("facebook_publisherblocklist_post_",
		mcp.WithDescription("POST  for PublisherBlockList"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("spec",
			mcp.Required(),
			mcp.Description("spec parameter for "),
		),
	)
	tools = append(tools, facebook_publisherblocklist_post_Tool)


	return tools
}

// PublisherBlockList handlers


// HandleFacebook_publisherblocklist_post_append_publisher_urls handles the facebook_publisherblocklist_post_append_publisher_urls tool
func HandleFacebook_publisherblocklist_post_append_publisher_urls(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewPublisherBlockListClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: publisher_urls
	publisher_urls, err := request.RequireString("publisher_urls")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter publisher_urls: %v", err)), nil
	}
	args["publisher_urls"] = publisher_urls



	// Call the client method
	result, err := client.Facebook_publisherblocklist_post_append_publisher_urls(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_publisherblocklist_post_append_publisher_urls: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_publisherblocklist_get_paged_web_publishers handles the facebook_publisherblocklist_get_paged_web_publishers tool
func HandleFacebook_publisherblocklist_get_paged_web_publishers(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewPublisherBlockListClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: draft_id
	if val := request.GetString("draft_id", ""); val != "" {
		args["draft_id"] = val
	}



	// Call the client method
	result, err := client.Facebook_publisherblocklist_get_paged_web_publishers(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_publisherblocklist_get_paged_web_publishers: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_publisherblocklist_delete_ handles the facebook_publisherblocklist_delete_ tool
func HandleFacebook_publisherblocklist_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewPublisherBlockListClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_publisherblocklist_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_publisherblocklist_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_publisherblocklist_get_ handles the facebook_publisherblocklist_get_ tool
func HandleFacebook_publisherblocklist_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewPublisherBlockListClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: account_id
	if val := request.GetInt("account_id", 0); val != 0 {
		args["account_id"] = val
	}

	// Optional: business_id
	if val := request.GetString("business_id", ""); val != "" {
		args["business_id"] = val
	}

	// Optional: draft_id
	if val := request.GetString("draft_id", ""); val != "" {
		args["draft_id"] = val
	}



	// Call the client method
	result, err := client.Facebook_publisherblocklist_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_publisherblocklist_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_publisherblocklist_post_ handles the facebook_publisherblocklist_post_ tool
func HandleFacebook_publisherblocklist_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewPublisherBlockListClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: spec
	spec, err := request.RequireString("spec")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter spec: %v", err)), nil
	}
	args["spec"] = spec



	// Call the client method
	result, err := client.Facebook_publisherblocklist_post_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_publisherblocklist_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

