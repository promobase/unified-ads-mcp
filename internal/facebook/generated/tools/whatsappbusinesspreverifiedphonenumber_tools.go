// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
)

// GetWhatsAppBusinessPreVerifiedPhoneNumberTools returns MCP tools for WhatsAppBusinessPreVerifiedPhoneNumber
func GetWhatsAppBusinessPreVerifiedPhoneNumberTools(accessToken string) []mcp.Tool {
	var tools []mcp.Tool


	// facebook_whatsappbusinesspreverifiedphonenumber_get_partners tool
	facebook_whatsappbusinesspreverifiedphonenumber_get_partnersTool := mcp.NewTool("facebook_whatsappbusinesspreverifiedphonenumber_get_partners",
		mcp.WithDescription("GET partners for WhatsAppBusinessPreVerifiedPhoneNumber"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_whatsappbusinesspreverifiedphonenumber_get_partnersTool)

	// facebook_whatsappbusinesspreverifiedphonenumber_post_request_code tool
	facebook_whatsappbusinesspreverifiedphonenumber_post_request_codeTool := mcp.NewTool("facebook_whatsappbusinesspreverifiedphonenumber_post_request_code",
		mcp.WithDescription("POST request_code for WhatsAppBusinessPreVerifiedPhoneNumber"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("code_method",
			mcp.Required(),
			mcp.Description("code_method parameter for request_code"),
			mcp.Enum("SMS", "VOICE"),
		),
		mcp.WithString("language",
			mcp.Required(),
			mcp.Description("language parameter for request_code"),
		),
	)
	tools = append(tools, facebook_whatsappbusinesspreverifiedphonenumber_post_request_codeTool)

	// facebook_whatsappbusinesspreverifiedphonenumber_post_verify_code tool
	facebook_whatsappbusinesspreverifiedphonenumber_post_verify_codeTool := mcp.NewTool("facebook_whatsappbusinesspreverifiedphonenumber_post_verify_code",
		mcp.WithDescription("POST verify_code for WhatsAppBusinessPreVerifiedPhoneNumber"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
		mcp.WithString("code",
			mcp.Required(),
			mcp.Description("code parameter for verify_code"),
		),
	)
	tools = append(tools, facebook_whatsappbusinesspreverifiedphonenumber_post_verify_codeTool)

	// facebook_whatsappbusinesspreverifiedphonenumber_delete_ tool
	facebook_whatsappbusinesspreverifiedphonenumber_delete_Tool := mcp.NewTool("facebook_whatsappbusinesspreverifiedphonenumber_delete_",
		mcp.WithDescription("DELETE  for WhatsAppBusinessPreVerifiedPhoneNumber"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_whatsappbusinesspreverifiedphonenumber_delete_Tool)

	// facebook_whatsappbusinesspreverifiedphonenumber_get_ tool
	facebook_whatsappbusinesspreverifiedphonenumber_get_Tool := mcp.NewTool("facebook_whatsappbusinesspreverifiedphonenumber_get_",
		mcp.WithDescription("GET  for WhatsAppBusinessPreVerifiedPhoneNumber"),
		mcp.WithString("access_token",
			mcp.Required(),
			mcp.Description("Facebook access token for authentication"),
		),
	)
	tools = append(tools, facebook_whatsappbusinesspreverifiedphonenumber_get_Tool)


	return tools
}

// WhatsAppBusinessPreVerifiedPhoneNumber handlers


// HandleFacebook_whatsappbusinesspreverifiedphonenumber_get_partners handles the facebook_whatsappbusinesspreverifiedphonenumber_get_partners tool
func HandleFacebook_whatsappbusinesspreverifiedphonenumber_get_partners(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessPreVerifiedPhoneNumberClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_whatsappbusinesspreverifiedphonenumber_get_partners(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_whatsappbusinesspreverifiedphonenumber_get_partners: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_whatsappbusinesspreverifiedphonenumber_post_request_code handles the facebook_whatsappbusinesspreverifiedphonenumber_post_request_code tool
func HandleFacebook_whatsappbusinesspreverifiedphonenumber_post_request_code(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessPreVerifiedPhoneNumberClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: code_method
	code_method, err := request.RequireString("code_method")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter code_method: %v", err)), nil
	}
	args["code_method"] = code_method

	// Required: language
	language, err := request.RequireString("language")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter language: %v", err)), nil
	}
	args["language"] = language



	// Call the client method
	result, err := client.Facebook_whatsappbusinesspreverifiedphonenumber_post_request_code(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_whatsappbusinesspreverifiedphonenumber_post_request_code: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_whatsappbusinesspreverifiedphonenumber_post_verify_code handles the facebook_whatsappbusinesspreverifiedphonenumber_post_verify_code tool
func HandleFacebook_whatsappbusinesspreverifiedphonenumber_post_verify_code(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessPreVerifiedPhoneNumberClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: code
	code, err := request.RequireString("code")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter code: %v", err)), nil
	}
	args["code"] = code



	// Call the client method
	result, err := client.Facebook_whatsappbusinesspreverifiedphonenumber_post_verify_code(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_whatsappbusinesspreverifiedphonenumber_post_verify_code: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_whatsappbusinesspreverifiedphonenumber_delete_ handles the facebook_whatsappbusinesspreverifiedphonenumber_delete_ tool
func HandleFacebook_whatsappbusinesspreverifiedphonenumber_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessPreVerifiedPhoneNumberClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_whatsappbusinesspreverifiedphonenumber_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_whatsappbusinesspreverifiedphonenumber_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleFacebook_whatsappbusinesspreverifiedphonenumber_get_ handles the facebook_whatsappbusinesspreverifiedphonenumber_get_ tool
func HandleFacebook_whatsappbusinesspreverifiedphonenumber_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token
	accessToken, err := request.RequireString("access_token")
	if err != nil {
		return mcp.NewToolResultError("missing required parameter: access_token"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessPreVerifiedPhoneNumberClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Facebook_whatsappbusinesspreverifiedphonenumber_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute facebook_whatsappbusinesspreverifiedphonenumber_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

