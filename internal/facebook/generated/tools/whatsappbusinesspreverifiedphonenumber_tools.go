// Code generated by Facebook Business API codegen. DO NOT EDIT.

package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/generated/client"
	"unified-ads-mcp/internal/shared"
)

// GetWhatsAppBusinessPreVerifiedPhoneNumberTools returns MCP tools for WhatsAppBusinessPreVerifiedPhoneNumber
func GetWhatsAppBusinessPreVerifiedPhoneNumberTools() []mcp.Tool {
	var tools []mcp.Tool


	// whatsappbusinesspreverifiedphonenumber_get_partners tool
	// Available fields for Business: block_offline_analytics, collaborative_ads_managed_partner_business_info, collaborative_ads_managed_partner_eligibility, collaborative_ads_partner_premium_options, created_by, created_time, extended_updated_time, id, is_hidden, link, name, payment_account_id, primary_page, profile_picture_uri, timezone_id, two_factor_type, updated_by, updated_time, user_access_expire_time, verification_status, vertical, vertical_id
	whatsappbusinesspreverifiedphonenumber_get_partnersTool := mcp.NewTool("whatsappbusinesspreverifiedphonenumber_get_partners",
		mcp.WithDescription("GET partners for WhatsAppBusinessPreVerifiedPhoneNumber"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for Business objects. Available fields: block_offline_analytics, collaborative_ads_managed_partner_business_info, collaborative_ads_managed_partner_eligibility, collaborative_ads_partner_premium_options, created_by, created_time, extended_updated_time, id, is_hidden, link, name, payment_account_id, primary_page, profile_picture_uri, timezone_id (and 7 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinesspreverifiedphonenumber_get_partnersTool)

	// whatsappbusinesspreverifiedphonenumber_post_request_code tool
	// Params object accepts: code_method (whatsappbusinesspreverifiedphonenumberrequest_code_code_method_enum_param), language (string)
	whatsappbusinesspreverifiedphonenumber_post_request_codeTool := mcp.NewTool("whatsappbusinesspreverifiedphonenumber_post_request_code",
		mcp.WithDescription("POST request_code for WhatsAppBusinessPreVerifiedPhoneNumber"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"code_method": map[string]any{
					"type": "string",
					"description": "code_method parameter",
					"required": true,
					"enum": []string{ "SMS", "VOICE" },
				},
				"language": map[string]any{
					"type": "string",
					"description": "language parameter",
					"required": true,
				},
			}),
			mcp.Description("Parameters object containing: code_method (enum) [SMS, VOICE] [required], language (string) [required]"),
		),
	)
	tools = append(tools, whatsappbusinesspreverifiedphonenumber_post_request_codeTool)

	// whatsappbusinesspreverifiedphonenumber_post_verify_code tool
	// Params object accepts: code (string)
	whatsappbusinesspreverifiedphonenumber_post_verify_codeTool := mcp.NewTool("whatsappbusinesspreverifiedphonenumber_post_verify_code",
		mcp.WithDescription("POST verify_code for WhatsAppBusinessPreVerifiedPhoneNumber"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"code": map[string]any{
					"type": "string",
					"description": "code parameter",
					"required": true,
				},
			}),
			mcp.Description("Parameters object containing: code (string) [required]"),
		),
	)
	tools = append(tools, whatsappbusinesspreverifiedphonenumber_post_verify_codeTool)

	// whatsappbusinesspreverifiedphonenumber_delete_ tool
	whatsappbusinesspreverifiedphonenumber_delete_Tool := mcp.NewTool("whatsappbusinesspreverifiedphonenumber_delete_",
		mcp.WithDescription("DELETE  for WhatsAppBusinessPreVerifiedPhoneNumber"),
	)
	tools = append(tools, whatsappbusinesspreverifiedphonenumber_delete_Tool)

	// whatsappbusinesspreverifiedphonenumber_get_ tool
	// Available fields for WhatsAppBusinessPreVerifiedPhoneNumber: code_verification_status, code_verification_time, id, owner_business, phone_number, verification_expiry_time
	whatsappbusinesspreverifiedphonenumber_get_Tool := mcp.NewTool("whatsappbusinesspreverifiedphonenumber_get_",
		mcp.WithDescription("GET  for WhatsAppBusinessPreVerifiedPhoneNumber"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for WhatsAppBusinessPreVerifiedPhoneNumber objects. Available fields: code_verification_status, code_verification_time, id, owner_business, phone_number, verification_expiry_time"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
	tools = append(tools, whatsappbusinesspreverifiedphonenumber_get_Tool)


	return tools
}

// WhatsAppBusinessPreVerifiedPhoneNumber handlers


// HandleWhatsappbusinesspreverifiedphonenumber_get_partners handles the whatsappbusinesspreverifiedphonenumber_get_partners tool with context-based auth
func HandleWhatsappbusinesspreverifiedphonenumber_get_partners(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessPreVerifiedPhoneNumberClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Whatsappbusinesspreverifiedphonenumber_get_partners(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinesspreverifiedphonenumber_get_partners: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinesspreverifiedphonenumber_post_request_code handles the whatsappbusinesspreverifiedphonenumber_post_request_code tool with context-based auth
func HandleWhatsappbusinesspreverifiedphonenumber_post_request_code(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessPreVerifiedPhoneNumberClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}



	// Call the client method
	result, err := client.Whatsappbusinesspreverifiedphonenumber_post_request_code(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinesspreverifiedphonenumber_post_request_code: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinesspreverifiedphonenumber_post_verify_code handles the whatsappbusinesspreverifiedphonenumber_post_verify_code tool with context-based auth
func HandleWhatsappbusinesspreverifiedphonenumber_post_verify_code(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessPreVerifiedPhoneNumberClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}



	// Call the client method
	result, err := client.Whatsappbusinesspreverifiedphonenumber_post_verify_code(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinesspreverifiedphonenumber_post_verify_code: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinesspreverifiedphonenumber_delete_ handles the whatsappbusinesspreverifiedphonenumber_delete_ tool with context-based auth
func HandleWhatsappbusinesspreverifiedphonenumber_delete_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessPreVerifiedPhoneNumberClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})



	// Call the client method
	result, err := client.Whatsappbusinesspreverifiedphonenumber_delete_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinesspreverifiedphonenumber_delete_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}


// HandleWhatsappbusinesspreverifiedphonenumber_get_ handles the whatsappbusinesspreverifiedphonenumber_get_ tool with context-based auth
func HandleWhatsappbusinesspreverifiedphonenumber_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Create client
	client := client.NewWhatsAppBusinessPreVerifiedPhoneNumberClient(accessToken)

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the client method
	result, err := client.Whatsappbusinesspreverifiedphonenumber_get_(args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinesspreverifiedphonenumber_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

