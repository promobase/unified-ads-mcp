// Code generated by codegen. DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"reflect"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// remove_access_tokens_from_userArgs defines the typed arguments for remove_access_tokens_from_user
type remove_access_tokens_from_userArgs struct {
	ID string `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
}

// create_user_access_tokenArgs defines the typed arguments for create_user_access_token
type create_user_access_tokenArgs struct {
	ID                      string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	BusinessApp             string   `json:"business_app" jsonschema:"description=Business App,required"`
	PageId                  string   `json:"page_id,omitempty" jsonschema:"description=ID of the Page,pattern=^[0-9]+$"`
	Scope                   []string `json:"scope,omitempty" jsonschema:"description=Scope"`
	SetTokenExpiresIn60Days bool     `json:"set_token_expires_in_60_days,omitempty" jsonschema:"description=Set Token Expires In 60 Days"`
}

// list_user_accountsArgs defines the typed arguments for list_user_accounts
type list_user_accountsArgs struct {
	ID           string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields       []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit        int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After        string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before       string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AdId         string   `json:"ad_id,omitempty" jsonschema:"description=ID of the Ad,pattern=^[0-9]+$"`
	IsPlace      bool     `json:"is_place,omitempty" jsonschema:"description=Is Place"`
	IsPromotable bool     `json:"is_promotable,omitempty" jsonschema:"description=Is Promotable"`
}

// create_user_accountArgs defines the typed arguments for create_user_account
type create_user_accountArgs struct {
	ID                       string                 `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	About                    string                 `json:"about,omitempty" jsonschema:"description=About"`
	Address                  string                 `json:"address,omitempty" jsonschema:"description=Address"`
	Category                 int                    `json:"category,omitempty" jsonschema:"description=Category"`
	CategoryEnum             string                 `json:"category_enum,omitempty" jsonschema:"description=Category Enum"`
	CategoryList             []string               `json:"category_list,omitempty" jsonschema:"description=Category List"`
	CityId                   string                 `json:"city_id,omitempty" jsonschema:"description=ID of the City,pattern=^[0-9]+$"`
	Coordinates              map[string]interface{} `json:"coordinates,omitempty" jsonschema:"description=Coordinates"`
	CoverPhoto               map[string]interface{} `json:"cover_photo,omitempty" jsonschema:"description=Cover Photo"`
	Description              string                 `json:"description,omitempty" jsonschema:"description=Description"`
	IgnoreCoordinateWarnings bool                   `json:"ignore_coordinate_warnings,omitempty" jsonschema:"description=Ignore Coordinate Warnings"`
	Location                 map[string]interface{} `json:"location,omitempty" jsonschema:"description=Location"`
	Name                     string                 `json:"name" jsonschema:"description=Name,required"`
	Phone                    string                 `json:"phone,omitempty" jsonschema:"description=Phone"`
	Picture                  string                 `json:"picture,omitempty" jsonschema:"description=Picture"`
	Website                  string                 `json:"website,omitempty" jsonschema:"description=Website"`
	Zip                      string                 `json:"zip,omitempty" jsonschema:"description=Zip"`
}

// list_user_ad_studiesArgs defines the typed arguments for list_user_ad_studies
type list_user_ad_studiesArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// create_user_ad_studieArgs defines the typed arguments for create_user_ad_studie
type create_user_ad_studieArgs struct {
	ID                 string                   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Cells              []map[string]interface{} `json:"cells,omitempty" jsonschema:"description=Cells"`
	ClientBusiness     string                   `json:"client_business,omitempty" jsonschema:"description=Client Business"`
	ConfidenceLevel    float64                  `json:"confidence_level,omitempty" jsonschema:"description=Confidence Level"`
	CooldownStartTime  int                      `json:"cooldown_start_time,omitempty" jsonschema:"description=Cooldown Start Time"`
	Description        string                   `json:"description,omitempty" jsonschema:"description=Description"`
	EndTime            int                      `json:"end_time,omitempty" jsonschema:"description=End Time"`
	Name               string                   `json:"name,omitempty" jsonschema:"description=Name"`
	Objectives         []map[string]interface{} `json:"objectives,omitempty" jsonschema:"description=Objectives"`
	ObservationEndTime int                      `json:"observation_end_time,omitempty" jsonschema:"description=Observation End Time"`
	StartTime          int                      `json:"start_time,omitempty" jsonschema:"description=Start Time"`
	Type               string                   `json:"type,omitempty" jsonschema:"description=Type"`
	Viewers            []int                    `json:"viewers,omitempty" jsonschema:"description=Viewers"`
}

// list_user_adaccountsArgs defines the typed arguments for list_user_adaccounts
type list_user_adaccountsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// list_user_albumsArgs defines the typed arguments for list_user_albums
type list_user_albumsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// create_user_applicationArgs defines the typed arguments for create_user_application
type create_user_applicationArgs struct {
	ID          string `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	BusinessApp int    `json:"business_app" jsonschema:"description=Business App,required"`
}

// list_user_apprequestformerrecipientsArgs defines the typed arguments for list_user_apprequestformerrecipients
type list_user_apprequestformerrecipientsArgs struct {
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// list_user_apprequestsArgs defines the typed arguments for list_user_apprequests
type list_user_apprequestsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// list_user_assigned_ad_accountsArgs defines the typed arguments for list_user_assigned_ad_accounts
type list_user_assigned_ad_accountsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// list_user_assigned_applicationsArgs defines the typed arguments for list_user_assigned_applications
type list_user_assigned_applicationsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// list_user_assigned_business_asset_groupsArgs defines the typed arguments for list_user_assigned_business_asset_groups
type list_user_assigned_business_asset_groupsArgs struct {
	ID               string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields           []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit            int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After            string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before           string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	ContainedAssetId string   `json:"contained_asset_id,omitempty" jsonschema:"description=ID of the Contained Asset,pattern=^[0-9]+$"`
}

// list_user_assigned_pagesArgs defines the typed arguments for list_user_assigned_pages
type list_user_assigned_pagesArgs struct {
	ID     string        `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string      `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int           `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string        `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string        `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Pages  []interface{} `json:"pages,omitempty" jsonschema:"description=Pages,minimum=13,maximum=100"`
}

// list_user_assigned_product_catalogsArgs defines the typed arguments for list_user_assigned_product_catalogs
type list_user_assigned_product_catalogsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// list_user_avatarsArgs defines the typed arguments for list_user_avatars
type list_user_avatarsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// list_user_business_usersArgs defines the typed arguments for list_user_business_users
type list_user_business_usersArgs struct {
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// remove_businesses_from_userArgs defines the typed arguments for remove_businesses_from_user
type remove_businesses_from_userArgs struct {
	ID       string `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Business string `json:"business,omitempty" jsonschema:"description=Business"`
}

// list_user_businessesArgs defines the typed arguments for list_user_businesses
type list_user_businessesArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// create_user_businesseArgs defines the typed arguments for create_user_businesse
type create_user_businesseArgs struct {
	ID                      string `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	ChildBusinessExternalId string `json:"child_business_external_id,omitempty" jsonschema:"description=ID of the Child Business External,pattern=^[0-9]+$"`
	Email                   string `json:"email,omitempty" jsonschema:"description=Email"`
	Name                    string `json:"name" jsonschema:"description=Name,required"`
	PrimaryPage             string `json:"primary_page,omitempty" jsonschema:"description=Primary Page"`
	SalesRepEmail           string `json:"sales_rep_email,omitempty" jsonschema:"description=Sales Rep Email"`
	SurveyBusinessType      string `json:"survey_business_type,omitempty" jsonschema:"description=Survey Business Type"`
	SurveyNumAssets         int    `json:"survey_num_assets,omitempty" jsonschema:"description=Survey Num Assets"`
	SurveyNumPeople         int    `json:"survey_num_people,omitempty" jsonschema:"description=Survey Num People"`
	TimezoneId              string `json:"timezone_id,omitempty" jsonschema:"description=ID of the Timezone,pattern=^[0-9]+$"`
	Vertical                string `json:"vertical" jsonschema:"description=Vertical,required"`
}

// list_user_conversationsArgs defines the typed arguments for list_user_conversations
type list_user_conversationsArgs struct {
	ID       string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields   []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit    int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After    string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before   string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Folder   string   `json:"folder,omitempty" jsonschema:"description=Folder"`
	Platform string   `json:"platform,omitempty" jsonschema:"description=Platform"`
	Tags     []string `json:"tags,omitempty" jsonschema:"description=Tags"`
	UserId   string   `json:"user_id,omitempty" jsonschema:"description=ID of the User,pattern=^[0-9]+$"`
}

// list_user_custom_labelsArgs defines the typed arguments for list_user_custom_labels
type list_user_custom_labelsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// list_user_eventsArgs defines the typed arguments for list_user_events
type list_user_eventsArgs struct {
	ID              string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields          []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit           int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After           string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before          string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	IncludeCanceled bool     `json:"include_canceled,omitempty" jsonschema:"description=Include Canceled"`
	Type            string   `json:"type,omitempty" jsonschema:"description=Type"`
}

// get_user_feedArgs defines the typed arguments for get_user_feed
type get_user_feedArgs struct {
	ID            string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields        []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit         int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After         string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before        string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	IncludeHidden bool     `json:"include_hidden,omitempty" jsonschema:"description=Include Hidden"`
	Q             string   `json:"q,omitempty" jsonschema:"description=Q"`
	ShowExpired   bool     `json:"show_expired,omitempty" jsonschema:"description=Show Expired"`
	Since         string   `json:"since,omitempty" jsonschema:"description=Since,format=date-time"`
	Until         string   `json:"until,omitempty" jsonschema:"description=Until,format=date-time"`
	With          string   `json:"with,omitempty" jsonschema:"description=With"`
}

// update_user_feedArgs defines the typed arguments for update_user_feed
type update_user_feedArgs struct {
	ID                        string                   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Actions                   map[string]interface{}   `json:"actions,omitempty" jsonschema:"description=Actions"`
	AlbumId                   string                   `json:"album_id,omitempty" jsonschema:"description=ID of the Album,pattern=^[0-9]+$"`
	AndroidKeyHash            string                   `json:"android_key_hash,omitempty" jsonschema:"description=Android Key Hash"`
	ApplicationId             string                   `json:"application_id,omitempty" jsonschema:"description=ID of the Application,pattern=^[0-9]+$"`
	AskedFunFactPromptId      int                      `json:"asked_fun_fact_prompt_id,omitempty" jsonschema:"description=ID of the Asked Fun Fact Prompt,pattern=^[0-9]+$"`
	Asset3dId                 string                   `json:"asset3d_id,omitempty" jsonschema:"description=ID of the Asset3d,pattern=^[0-9]+$"`
	AssociatedId              string                   `json:"associated_id,omitempty" jsonschema:"description=ID of the Associated,pattern=^[0-9]+$"`
	AttachPlaceSuggestion     bool                     `json:"attach_place_suggestion,omitempty" jsonschema:"description=Attach Place Suggestion"`
	AttachedMedia             []map[string]interface{} `json:"attached_media,omitempty" jsonschema:"description=Attached Media"`
	AudienceExp               bool                     `json:"audience_exp,omitempty" jsonschema:"description=Audience Exp"`
	BackdatedTime             string                   `json:"backdated_time,omitempty" jsonschema:"description=Backdated Time,format=date-time"`
	BackdatedTimeGranularity  string                   `json:"backdated_time_granularity,omitempty" jsonschema:"description=Backdated Time Granularity"`
	BreakingNews              bool                     `json:"breaking_news,omitempty" jsonschema:"description=Breaking News"`
	BreakingNewsExpiration    int                      `json:"breaking_news_expiration,omitempty" jsonschema:"description=Breaking News Expiration"`
	CallToAction              map[string]interface{}   `json:"call_to_action,omitempty" jsonschema:"description=Call To Action"`
	Caption                   string                   `json:"caption,omitempty" jsonschema:"description=Caption"`
	ChildAttachments          []map[string]interface{} `json:"child_attachments,omitempty" jsonschema:"description=Child Attachments"`
	ClientMutationId          string                   `json:"client_mutation_id,omitempty" jsonschema:"description=ID of the Client Mutation,pattern=^[0-9]+$"`
	ComposerEntryPicker       string                   `json:"composer_entry_picker,omitempty" jsonschema:"description=Composer Entry Picker"`
	ComposerEntryPoint        string                   `json:"composer_entry_point,omitempty" jsonschema:"description=Composer Entry Point"`
	ComposerEntryTime         int                      `json:"composer_entry_time,omitempty" jsonschema:"description=Composer Entry Time"`
	ComposerSessionEventsLog  string                   `json:"composer_session_events_log,omitempty" jsonschema:"description=Composer Session Events Log"`
	ComposerSessionId         string                   `json:"composer_session_id,omitempty" jsonschema:"description=ID of the Composer Session,pattern=^[0-9]+$"`
	ComposerSourceSurface     string                   `json:"composer_source_surface,omitempty" jsonschema:"description=Composer Source Surface"`
	ComposerType              string                   `json:"composer_type,omitempty" jsonschema:"description=Composer Type"`
	ConnectionClass           string                   `json:"connection_class,omitempty" jsonschema:"description=Connection Class"`
	ContentAttachment         string                   `json:"content_attachment,omitempty" jsonschema:"description=Content Attachment"`
	Coordinates               map[string]interface{}   `json:"coordinates,omitempty" jsonschema:"description=Coordinates"`
	CtaLink                   string                   `json:"cta_link,omitempty" jsonschema:"description=Cta Link"`
	CtaType                   string                   `json:"cta_type,omitempty" jsonschema:"description=Cta Type"`
	Description               string                   `json:"description,omitempty" jsonschema:"description=Description"`
	DirectShareStatus         int                      `json:"direct_share_status,omitempty" jsonschema:"description=Direct Share Status"`
	ExpandedHeight            int                      `json:"expanded_height,omitempty" jsonschema:"description=Expanded Height"`
	ExpandedWidth             int                      `json:"expanded_width,omitempty" jsonschema:"description=Expanded Width"`
	FeedTargeting             map[string]interface{}   `json:"feed_targeting,omitempty" jsonschema:"description=Feed Targeting"`
	Formatting                string                   `json:"formatting,omitempty" jsonschema:"description=Formatting"`
	FunFactPromptId           string                   `json:"fun_fact_prompt_id,omitempty" jsonschema:"description=ID of the Fun Fact Prompt,pattern=^[0-9]+$"`
	FunFactToasteeId          int                      `json:"fun_fact_toastee_id,omitempty" jsonschema:"description=ID of the Fun Fact Toastee,pattern=^[0-9]+$"`
	Height                    int                      `json:"height,omitempty" jsonschema:"description=Height"`
	HomeCheckinCityId         map[string]interface{}   `json:"home_checkin_city_id,omitempty" jsonschema:"description=ID of the Home Checkin City,pattern=^[0-9]+$"`
	ImageCrops                map[string]interface{}   `json:"image_crops,omitempty" jsonschema:"description=Image Crops,minimum=13,maximum=100"`
	ImplicitWithTags          []int                    `json:"implicit_with_tags,omitempty" jsonschema:"description=Implicit With Tags"`
	InstantGameEntryPointData string                   `json:"instant_game_entry_point_data,omitempty" jsonschema:"description=Instant Game Entry Point Data"`
	IosBundleId               string                   `json:"ios_bundle_id,omitempty" jsonschema:"description=ID of the Ios Bundle,pattern=^[0-9]+$"`
	IsBackoutDraft            bool                     `json:"is_backout_draft,omitempty" jsonschema:"description=Is Backout Draft"`
	IsBoostIntended           bool                     `json:"is_boost_intended,omitempty" jsonschema:"description=Is Boost Intended"`
	IsExplicitLocation        bool                     `json:"is_explicit_location,omitempty" jsonschema:"description=Is Explicit Location"`
	IsExplicitShare           bool                     `json:"is_explicit_share,omitempty" jsonschema:"description=Is Explicit Share"`
	IsGroupLinkingPost        bool                     `json:"is_group_linking_post,omitempty" jsonschema:"description=Is Group Linking Post"`
	IsPhotoContainer          bool                     `json:"is_photo_container,omitempty" jsonschema:"description=Is Photo Container"`
	Link                      string                   `json:"link,omitempty" jsonschema:"description=Link"`
	LocationSourceId          string                   `json:"location_source_id,omitempty" jsonschema:"description=ID of the Location Source,pattern=^[0-9]+$"`
	ManualPrivacy             bool                     `json:"manual_privacy,omitempty" jsonschema:"description=Manual Privacy"`
	Message                   string                   `json:"message,omitempty" jsonschema:"description=Message"`
	MultiShareEndCard         bool                     `json:"multi_share_end_card,omitempty" jsonschema:"description=Multi Share End Card"`
	MultiShareOptimized       bool                     `json:"multi_share_optimized,omitempty" jsonschema:"description=Multi Share Optimized"`
	Name                      string                   `json:"name,omitempty" jsonschema:"description=Name"`
	NectarModule              string                   `json:"nectar_module,omitempty" jsonschema:"description=Nectar Module"`
	ObjectAttachment          string                   `json:"object_attachment,omitempty" jsonschema:"description=Object Attachment"`
	OgActionTypeId            string                   `json:"og_action_type_id,omitempty" jsonschema:"description=ID of the Og Action Type,pattern=^[0-9]+$"`
	OgHideObjectAttachment    bool                     `json:"og_hide_object_attachment,omitempty" jsonschema:"description=Og Hide Object Attachment"`
	OgIconId                  string                   `json:"og_icon_id,omitempty" jsonschema:"description=ID of the Og Icon,pattern=^[0-9]+$"`
	OgObjectId                string                   `json:"og_object_id,omitempty" jsonschema:"description=ID of the Og Object,pattern=^[0-9]+$"`
	OgPhrase                  string                   `json:"og_phrase,omitempty" jsonschema:"description=Og Phrase"`
	OgSetProfileBadge         bool                     `json:"og_set_profile_badge,omitempty" jsonschema:"description=Og Set Profile Badge"`
	OgSuggestionMechanism     string                   `json:"og_suggestion_mechanism,omitempty" jsonschema:"description=Og Suggestion Mechanism"`
	PageRecommendation        string                   `json:"page_recommendation,omitempty" jsonschema:"description=Page Recommendation"`
	Picture                   string                   `json:"picture,omitempty" jsonschema:"description=Picture"`
	Place                     map[string]interface{}   `json:"place,omitempty" jsonschema:"description=Place"`
	PlaceAttachmentSetting    string                   `json:"place_attachment_setting,omitempty" jsonschema:"description=Place Attachment Setting"`
	PlaceList                 string                   `json:"place_list,omitempty" jsonschema:"description=Place List"`
	PlaceListData             interface{}              `json:"place_list_data,omitempty" jsonschema:"description=Place List Data"`
	PostSurfacesBlacklist     []string                 `json:"post_surfaces_blacklist,omitempty" jsonschema:"description=Post Surfaces Blacklist"`
	PostingToRedspace         string                   `json:"posting_to_redspace,omitempty" jsonschema:"description=Posting To Redspace"`
	Privacy                   string                   `json:"privacy,omitempty" jsonschema:"description=Privacy"`
	PromptId                  string                   `json:"prompt_id,omitempty" jsonschema:"description=ID of the Prompt,pattern=^[0-9]+$"`
	PromptTrackingString      string                   `json:"prompt_tracking_string,omitempty" jsonschema:"description=Prompt Tracking String"`
	Properties                map[string]interface{}   `json:"properties,omitempty" jsonschema:"description=Properties"`
	ProxiedAppId              string                   `json:"proxied_app_id,omitempty" jsonschema:"description=ID of the Proxied App,pattern=^[0-9]+$"`
	PublishEventId            int                      `json:"publish_event_id,omitempty" jsonschema:"description=ID of the Publish Event,pattern=^[0-9]+$"`
	Published                 bool                     `json:"published,omitempty" jsonschema:"description=Published"`
	Quote                     string                   `json:"quote,omitempty" jsonschema:"description=Quote"`
	Ref                       []string                 `json:"ref,omitempty" jsonschema:"description=Ref"`
	ReferenceableImageIds     []string                 `json:"referenceable_image_ids,omitempty" jsonschema:"description=Referenceable Image Ids,pattern=^[0-9]+$"`
	ReferralId                string                   `json:"referral_id,omitempty" jsonschema:"description=ID of the Referral,pattern=^[0-9]+$"`
	ScheduledPublishTime      string                   `json:"scheduled_publish_time,omitempty" jsonschema:"description=Scheduled Publish Time,format=date-time"`
	Source                    string                   `json:"source,omitempty" jsonschema:"description=Source"`
	SponsorId                 string                   `json:"sponsor_id,omitempty" jsonschema:"description=ID of the Sponsor,pattern=^[0-9]+$"`
	SponsorRelationship       int                      `json:"sponsor_relationship,omitempty" jsonschema:"description=Sponsor Relationship"`
	SuggestedPlaceId          map[string]interface{}   `json:"suggested_place_id,omitempty" jsonschema:"description=ID of the Suggested Place,pattern=^[0-9]+$"`
	Tags                      []int                    `json:"tags,omitempty" jsonschema:"description=Tags"`
	TargetSurface             string                   `json:"target_surface,omitempty" jsonschema:"description=Target Surface"`
	Targeting                 map[string]interface{}   `json:"targeting,omitempty" jsonschema:"description=Targeting"`
	TextFormatMetadata        string                   `json:"text_format_metadata,omitempty" jsonschema:"description=Text Format Metadata"`
	TextFormatPresetId        string                   `json:"text_format_preset_id,omitempty" jsonschema:"description=ID of the Text Format Preset,pattern=^[0-9]+$"`
	TextOnlyPlace             string                   `json:"text_only_place,omitempty" jsonschema:"description=Text Only Place"`
	Thumbnail                 interface{}              `json:"thumbnail,omitempty" jsonschema:"description=Thumbnail"`
	TimeSinceOriginalPost     int                      `json:"time_since_original_post,omitempty" jsonschema:"description=Time Since Original Post"`
	Title                     string                   `json:"title,omitempty" jsonschema:"description=Title"`
	TrackingInfo              string                   `json:"tracking_info,omitempty" jsonschema:"description=Tracking Info"`
	UnpublishedContentType    string                   `json:"unpublished_content_type,omitempty" jsonschema:"description=Unpublished Content Type"`
	UserSelectedTags          bool                     `json:"user_selected_tags,omitempty" jsonschema:"description=User Selected Tags"`
	VideoStartTimeMs          int                      `json:"video_start_time_ms,omitempty" jsonschema:"description=Video Start Time Ms"`
	ViewerCoordinates         map[string]interface{}   `json:"viewer_coordinates,omitempty" jsonschema:"description=Viewer Coordinates"`
	Width                     int                      `json:"width,omitempty" jsonschema:"description=Width"`
}

// list_user_friendsArgs defines the typed arguments for list_user_friends
type list_user_friendsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Uid    int      `json:"uid,omitempty" jsonschema:"description=Uid"`
}

// list_user_fundraisersArgs defines the typed arguments for list_user_fundraisers
type list_user_fundraisersArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// create_user_fundraiserArgs defines the typed arguments for create_user_fundraiser
type create_user_fundraiserArgs struct {
	ID                     string      `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	CharityId              string      `json:"charity_id,omitempty" jsonschema:"description=ID of the Charity,pattern=^[0-9]+$"`
	CoverPhoto             interface{} `json:"cover_photo,omitempty" jsonschema:"description=Cover Photo"`
	Currency               string      `json:"currency" jsonschema:"description=Currency,required"`
	Description            string      `json:"description" jsonschema:"description=Description,required"`
	EndTime                string      `json:"end_time" jsonschema:"description=End Time,required,format=date-time"`
	ExternalEventName      string      `json:"external_event_name,omitempty" jsonschema:"description=External Event Name"`
	ExternalEventStartTime string      `json:"external_event_start_time,omitempty" jsonschema:"description=External Event Start Time,format=date-time"`
	ExternalEventUri       string      `json:"external_event_uri,omitempty" jsonschema:"description=External Event Uri"`
	ExternalFundraiserUri  string      `json:"external_fundraiser_uri,omitempty" jsonschema:"description=External Fundraiser Uri"`
	ExternalId             string      `json:"external_id" jsonschema:"description=ID of the External,required,pattern=^[0-9]+$"`
	FundraiserType         string      `json:"fundraiser_type" jsonschema:"description=Fundraiser Type,required"`
	GoalAmount             int         `json:"goal_amount" jsonschema:"description=Goal Amount,required,minimum=1"`
	Name                   string      `json:"name" jsonschema:"description=Name,required"`
	PageId                 string      `json:"page_id,omitempty" jsonschema:"description=ID of the Page,pattern=^[0-9]+$"`
}

// list_user_groupsArgs defines the typed arguments for list_user_groups
type list_user_groupsArgs struct {
	ID        string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields    []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit     int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After     string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before    string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AdminOnly bool     `json:"admin_only,omitempty" jsonschema:"description=Admin Only"`
	Parent    string   `json:"parent,omitempty" jsonschema:"description=Parent"`
}

// list_user_ids_for_appsArgs defines the typed arguments for list_user_ids_for_apps
type list_user_ids_for_appsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	App    int      `json:"app,omitempty" jsonschema:"description=App"`
}

// list_user_ids_for_businessArgs defines the typed arguments for list_user_ids_for_business
type list_user_ids_for_businessArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	App    int      `json:"app,omitempty" jsonschema:"description=App"`
}

// list_user_ids_for_pagesArgs defines the typed arguments for list_user_ids_for_pages
type list_user_ids_for_pagesArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Page   int      `json:"page,omitempty" jsonschema:"description=Page,minimum=13,maximum=100"`
}

// list_user_likesArgs defines the typed arguments for list_user_likes
type list_user_likesArgs struct {
	ID       string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields   []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit    int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After    string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before   string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	TargetId string   `json:"target_id,omitempty" jsonschema:"description=ID of the Target,pattern=^[0-9]+$"`
}

// list_user_live_videosArgs defines the typed arguments for list_user_live_videos
type list_user_live_videosArgs struct {
	ID              string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields          []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit           int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After           string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before          string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	BroadcastStatus []string `json:"broadcast_status,omitempty" jsonschema:"description=Broadcast Status"`
	Source          string   `json:"source,omitempty" jsonschema:"description=Source"`
}

// create_user_live_videoArgs defines the typed arguments for create_user_live_video
type create_user_live_videoArgs struct {
	ID                         string                 `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	ContentTags                []string               `json:"content_tags,omitempty" jsonschema:"description=Content Tags"`
	Description                string                 `json:"description,omitempty" jsonschema:"description=Description"`
	EnableBackupIngest         bool                   `json:"enable_backup_ingest,omitempty" jsonschema:"description=Enable Backup Ingest"`
	EncodingSettings           string                 `json:"encoding_settings,omitempty" jsonschema:"description=Encoding Settings"`
	EventParams                map[string]interface{} `json:"event_params,omitempty" jsonschema:"description=Event Params"`
	FisheyeVideoCropped        bool                   `json:"fisheye_video_cropped,omitempty" jsonschema:"description=Fisheye Video Cropped"`
	FrontZRotation             float64                `json:"front_z_rotation,omitempty" jsonschema:"description=Front Z Rotation"`
	IsAudioOnly                bool                   `json:"is_audio_only,omitempty" jsonschema:"description=Is Audio Only"`
	IsSpherical                bool                   `json:"is_spherical,omitempty" jsonschema:"description=Is Spherical"`
	OriginalFov                int                    `json:"original_fov,omitempty" jsonschema:"description=Original Fov"`
	Privacy                    string                 `json:"privacy,omitempty" jsonschema:"description=Privacy"`
	Projection                 string                 `json:"projection,omitempty" jsonschema:"description=Projection"`
	Published                  bool                   `json:"published,omitempty" jsonschema:"description=Published"`
	ScheduleCustomProfileImage interface{}            `json:"schedule_custom_profile_image,omitempty" jsonschema:"description=Schedule Custom Profile Image,minimum=13,maximum=100"`
	SpatialAudioFormat         string                 `json:"spatial_audio_format,omitempty" jsonschema:"description=Spatial Audio Format"`
	Status                     string                 `json:"status,omitempty" jsonschema:"description=Status,enum=ACTIVE,enum=PAUSED,enum=DELETED,enum=ARCHIVED"`
	StereoscopicMode           string                 `json:"stereoscopic_mode,omitempty" jsonschema:"description=Stereoscopic Mode"`
	StopOnDeleteStream         bool                   `json:"stop_on_delete_stream,omitempty" jsonschema:"description=Stop On Delete Stream"`
	StreamType                 string                 `json:"stream_type,omitempty" jsonschema:"description=Stream Type"`
	Title                      string                 `json:"title,omitempty" jsonschema:"description=Title"`
}

// create_user_messenger_desktop_performance_traceArgs defines the typed arguments for create_user_messenger_desktop_performance_trace
type create_user_messenger_desktop_performance_traceArgs struct {
}

// update_user_messenger_kids_accounts_unread_badgeArgs defines the typed arguments for update_user_messenger_kids_accounts_unread_badge
type update_user_messenger_kids_accounts_unread_badgeArgs struct {
	ProxiedAppId int `json:"proxied_app_id" jsonschema:"description=ID of the Proxied App,required,pattern=^[0-9]+$"`
}

// get_user_musicArgs defines the typed arguments for get_user_music
type get_user_musicArgs struct {
	ID       string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields   []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit    int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After    string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before   string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	TargetId string   `json:"target_id,omitempty" jsonschema:"description=ID of the Target,pattern=^[0-9]+$"`
}

// create_user_notificationArgs defines the typed arguments for create_user_notification
type create_user_notificationArgs struct {
	ID                        string                 `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	BotMessagePayloadElements string                 `json:"bot_message_payload_elements,omitempty" jsonschema:"description=Bot Message Payload Elements"`
	Filtering                 []string               `json:"filtering,omitempty" jsonschema:"description=Filtering"`
	Href                      map[string]interface{} `json:"href,omitempty" jsonschema:"description=Href"`
	Label                     string                 `json:"label,omitempty" jsonschema:"description=Label"`
	Message                   map[string]interface{} `json:"message,omitempty" jsonschema:"description=Message,minimum=13,maximum=100"`
	NotifIds                  []string               `json:"notif_ids,omitempty" jsonschema:"description=Notif Ids,pattern=^[0-9]+$"`
	Payload                   string                 `json:"payload,omitempty" jsonschema:"description=Payload"`
	Read                      bool                   `json:"read,omitempty" jsonschema:"description=Read"`
	Ref                       string                 `json:"ref,omitempty" jsonschema:"description=Ref"`
	ScheduleInterval          int                    `json:"schedule_interval,omitempty" jsonschema:"description=Schedule Interval"`
	Seen                      bool                   `json:"seen,omitempty" jsonschema:"description=Seen"`
	Template                  map[string]interface{} `json:"template,omitempty" jsonschema:"description=Template"`
	Type                      string                 `json:"type,omitempty" jsonschema:"description=Type"`
}

// list_user_payment_transactionsArgs defines the typed arguments for list_user_payment_transactions
type list_user_payment_transactionsArgs struct {
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// remove_permissions_from_userArgs defines the typed arguments for remove_permissions_from_user
type remove_permissions_from_userArgs struct {
	ID         string `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Permission string `json:"permission,omitempty" jsonschema:"description=Permission"`
}

// list_user_permissionsArgs defines the typed arguments for list_user_permissions
type list_user_permissionsArgs struct {
	ID         string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields     []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit      int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After      string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before     string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Permission string   `json:"permission,omitempty" jsonschema:"description=Permission"`
	Status     string   `json:"status,omitempty" jsonschema:"description=Status,enum=ACTIVE,enum=PAUSED,enum=DELETED,enum=ARCHIVED"`
}

// list_user_personal_ad_accountsArgs defines the typed arguments for list_user_personal_ad_accounts
type list_user_personal_ad_accountsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// list_user_photosArgs defines the typed arguments for list_user_photos
type list_user_photosArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Type   string   `json:"type,omitempty" jsonschema:"description=Type"`
}

// create_user_photoArgs defines the typed arguments for create_user_photo
type create_user_photoArgs struct {
	ID                                    string                   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Aid                                   string                   `json:"aid,omitempty" jsonschema:"description=Aid"`
	AllowSphericalPhoto                   bool                     `json:"allow_spherical_photo,omitempty" jsonschema:"description=Allow Spherical Photo"`
	AltTextCustom                         string                   `json:"alt_text_custom,omitempty" jsonschema:"description=Alt Text Custom"`
	AndroidKeyHash                        string                   `json:"android_key_hash,omitempty" jsonschema:"description=Android Key Hash"`
	ApplicationId                         string                   `json:"application_id,omitempty" jsonschema:"description=ID of the Application,pattern=^[0-9]+$"`
	Attempt                               int                      `json:"attempt,omitempty" jsonschema:"description=Attempt"`
	AudienceExp                           bool                     `json:"audience_exp,omitempty" jsonschema:"description=Audience Exp"`
	BackdatedTime                         string                   `json:"backdated_time,omitempty" jsonschema:"description=Backdated Time,format=date-time"`
	BackdatedTimeGranularity              string                   `json:"backdated_time_granularity,omitempty" jsonschema:"description=Backdated Time Granularity"`
	Caption                               string                   `json:"caption,omitempty" jsonschema:"description=Caption"`
	ComposerSessionId                     string                   `json:"composer_session_id,omitempty" jsonschema:"description=ID of the Composer Session,pattern=^[0-9]+$"`
	DirectShareStatus                     int                      `json:"direct_share_status,omitempty" jsonschema:"description=Direct Share Status"`
	FeedTargeting                         map[string]interface{}   `json:"feed_targeting,omitempty" jsonschema:"description=Feed Targeting"`
	FilterType                            int                      `json:"filter_type,omitempty" jsonschema:"description=Filter Type"`
	FullResIsComingLater                  bool                     `json:"full_res_is_coming_later,omitempty" jsonschema:"description=Full Res Is Coming Later"`
	InitialViewHeadingOverrideDegrees     int                      `json:"initial_view_heading_override_degrees,omitempty" jsonschema:"description=Initial View Heading Override Degrees"`
	InitialViewPitchOverrideDegrees       int                      `json:"initial_view_pitch_override_degrees,omitempty" jsonschema:"description=Initial View Pitch Override Degrees"`
	InitialViewVerticalFovOverrideDegrees int                      `json:"initial_view_vertical_fov_override_degrees,omitempty" jsonschema:"description=Initial View Vertical Fov Override Degrees"`
	IosBundleId                           string                   `json:"ios_bundle_id,omitempty" jsonschema:"description=ID of the Ios Bundle,pattern=^[0-9]+$"`
	IsExplicitLocation                    bool                     `json:"is_explicit_location,omitempty" jsonschema:"description=Is Explicit Location"`
	IsExplicitPlace                       bool                     `json:"is_explicit_place,omitempty" jsonschema:"description=Is Explicit Place"`
	ManualPrivacy                         bool                     `json:"manual_privacy,omitempty" jsonschema:"description=Manual Privacy"`
	Message                               string                   `json:"message,omitempty" jsonschema:"description=Message"`
	Name                                  string                   `json:"name,omitempty" jsonschema:"description=Name"`
	NoStory                               bool                     `json:"no_story,omitempty" jsonschema:"description=No Story"`
	OfflineId                             int                      `json:"offline_id,omitempty" jsonschema:"description=ID of the Offline,pattern=^[0-9]+$"`
	OgActionTypeId                        string                   `json:"og_action_type_id,omitempty" jsonschema:"description=ID of the Og Action Type,pattern=^[0-9]+$"`
	OgIconId                              string                   `json:"og_icon_id,omitempty" jsonschema:"description=ID of the Og Icon,pattern=^[0-9]+$"`
	OgObjectId                            string                   `json:"og_object_id,omitempty" jsonschema:"description=ID of the Og Object,pattern=^[0-9]+$"`
	OgPhrase                              string                   `json:"og_phrase,omitempty" jsonschema:"description=Og Phrase"`
	OgSetProfileBadge                     bool                     `json:"og_set_profile_badge,omitempty" jsonschema:"description=Og Set Profile Badge"`
	OgSuggestionMechanism                 string                   `json:"og_suggestion_mechanism,omitempty" jsonschema:"description=Og Suggestion Mechanism"`
	Place                                 map[string]interface{}   `json:"place,omitempty" jsonschema:"description=Place"`
	Privacy                               string                   `json:"privacy,omitempty" jsonschema:"description=Privacy"`
	ProfileId                             int                      `json:"profile_id,omitempty" jsonschema:"description=ID of the Profile,pattern=^[0-9]+$"`
	ProvenanceInfo                        map[string]interface{}   `json:"provenance_info,omitempty" jsonschema:"description=Provenance Info"`
	ProxiedAppId                          string                   `json:"proxied_app_id,omitempty" jsonschema:"description=ID of the Proxied App,pattern=^[0-9]+$"`
	Published                             bool                     `json:"published,omitempty" jsonschema:"description=Published"`
	Qn                                    string                   `json:"qn,omitempty" jsonschema:"description=Qn"`
	ScheduledPublishTime                  int                      `json:"scheduled_publish_time,omitempty" jsonschema:"description=Scheduled Publish Time"`
	SphericalMetadata                     map[string]interface{}   `json:"spherical_metadata,omitempty" jsonschema:"description=Spherical Metadata"`
	SponsorId                             string                   `json:"sponsor_id,omitempty" jsonschema:"description=ID of the Sponsor,pattern=^[0-9]+$"`
	SponsorRelationship                   int                      `json:"sponsor_relationship,omitempty" jsonschema:"description=Sponsor Relationship"`
	Tags                                  []map[string]interface{} `json:"tags,omitempty" jsonschema:"description=Tags"`
	TargetId                              int                      `json:"target_id,omitempty" jsonschema:"description=ID of the Target,pattern=^[0-9]+$"`
	Targeting                             map[string]interface{}   `json:"targeting,omitempty" jsonschema:"description=Targeting"`
	TimeSinceOriginalPost                 int                      `json:"time_since_original_post,omitempty" jsonschema:"description=Time Since Original Post"`
	Uid                                   int                      `json:"uid,omitempty" jsonschema:"description=Uid"`
	UnpublishedContentType                string                   `json:"unpublished_content_type,omitempty" jsonschema:"description=Unpublished Content Type"`
	Url                                   string                   `json:"url,omitempty" jsonschema:"description=URL,format=uri"`
	UserSelectedTags                      bool                     `json:"user_selected_tags,omitempty" jsonschema:"description=User Selected Tags"`
	VaultImageId                          string                   `json:"vault_image_id,omitempty" jsonschema:"description=ID of the Vault Image,pattern=^[0-9]+$"`
}

// get_user_pictureArgs defines the typed arguments for get_user_picture
type get_user_pictureArgs struct {
	ID       string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields   []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit    int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After    string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before   string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Height   int      `json:"height,omitempty" jsonschema:"description=Height"`
	Redirect bool     `json:"redirect,omitempty" jsonschema:"description=Redirect"`
	Type     string   `json:"type,omitempty" jsonschema:"description=Type"`
	Width    int      `json:"width,omitempty" jsonschema:"description=Width"`
}

// list_user_postsArgs defines the typed arguments for list_user_posts
type list_user_postsArgs struct {
	ID            string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields        []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit         int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After         string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before        string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	IncludeHidden bool     `json:"include_hidden,omitempty" jsonschema:"description=Include Hidden"`
	Q             string   `json:"q,omitempty" jsonschema:"description=Q"`
	ShowExpired   bool     `json:"show_expired,omitempty" jsonschema:"description=Show Expired"`
	Since         string   `json:"since,omitempty" jsonschema:"description=Since,format=date-time"`
	Until         string   `json:"until,omitempty" jsonschema:"description=Until,format=date-time"`
	With          string   `json:"with,omitempty" jsonschema:"description=With"`
}

// list_user_rich_media_documentsArgs defines the typed arguments for list_user_rich_media_documents
type list_user_rich_media_documentsArgs struct {
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Query  string   `json:"query,omitempty" jsonschema:"description=Query"`
}

// create_user_staging_resourceArgs defines the typed arguments for create_user_staging_resource
type create_user_staging_resourceArgs struct {
	ID   string      `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	File interface{} `json:"file,omitempty" jsonschema:"description=File"`
}

// list_user_videosArgs defines the typed arguments for list_user_videos
type list_user_videosArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Type   string   `json:"type,omitempty" jsonschema:"description=Type"`
}

// create_user_videoArgs defines the typed arguments for create_user_video
type create_user_videoArgs struct {
	ID                            string                 `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	ApplicationId                 string                 `json:"application_id,omitempty" jsonschema:"description=ID of the Application,pattern=^[0-9]+$"`
	AskedFunFactPromptId          int                    `json:"asked_fun_fact_prompt_id,omitempty" jsonschema:"description=ID of the Asked Fun Fact Prompt,pattern=^[0-9]+$"`
	AudioStoryWaveAnimationHandle string                 `json:"audio_story_wave_animation_handle,omitempty" jsonschema:"description=Audio Story Wave Animation Handle"`
	ComposerEntryPicker           string                 `json:"composer_entry_picker,omitempty" jsonschema:"description=Composer Entry Picker"`
	ComposerEntryPoint            string                 `json:"composer_entry_point,omitempty" jsonschema:"description=Composer Entry Point"`
	ComposerEntryTime             int                    `json:"composer_entry_time,omitempty" jsonschema:"description=Composer Entry Time"`
	ComposerSessionEventsLog      string                 `json:"composer_session_events_log,omitempty" jsonschema:"description=Composer Session Events Log"`
	ComposerSessionId             string                 `json:"composer_session_id,omitempty" jsonschema:"description=ID of the Composer Session,pattern=^[0-9]+$"`
	ComposerSourceSurface         string                 `json:"composer_source_surface,omitempty" jsonschema:"description=Composer Source Surface"`
	ComposerType                  string                 `json:"composer_type,omitempty" jsonschema:"description=Composer Type"`
	ContainerType                 string                 `json:"container_type,omitempty" jsonschema:"description=Container Type"`
	ContentCategory               string                 `json:"content_category,omitempty" jsonschema:"description=Content Category"`
	CreativeTools                 string                 `json:"creative_tools,omitempty" jsonschema:"description=Creative Tools"`
	Description                   string                 `json:"description,omitempty" jsonschema:"description=Description"`
	DirectShareStatus             int                    `json:"direct_share_status,omitempty" jsonschema:"description=Direct Share Status"`
	Embeddable                    bool                   `json:"embeddable,omitempty" jsonschema:"description=Embeddable"`
	EndOffset                     int                    `json:"end_offset,omitempty" jsonschema:"description=End Offset"`
	FbuploaderVideoFileChunk      string                 `json:"fbuploader_video_file_chunk,omitempty" jsonschema:"description=Fbuploader Video File Chunk"`
	FileSize                      int                    `json:"file_size,omitempty" jsonschema:"description=File Size"`
	FileUrl                       string                 `json:"file_url,omitempty" jsonschema:"description=File URL,format=uri"`
	FisheyeVideoCropped           bool                   `json:"fisheye_video_cropped,omitempty" jsonschema:"description=Fisheye Video Cropped"`
	Formatting                    string                 `json:"formatting,omitempty" jsonschema:"description=Formatting"`
	Fov                           int                    `json:"fov,omitempty" jsonschema:"description=Fov"`
	FrontZRotation                float64                `json:"front_z_rotation,omitempty" jsonschema:"description=Front Z Rotation"`
	FunFactPromptId               string                 `json:"fun_fact_prompt_id,omitempty" jsonschema:"description=ID of the Fun Fact Prompt,pattern=^[0-9]+$"`
	FunFactToasteeId              int                    `json:"fun_fact_toastee_id,omitempty" jsonschema:"description=ID of the Fun Fact Toastee,pattern=^[0-9]+$"`
	Guide                         []interface{}          `json:"guide,omitempty" jsonschema:"description=Guide"`
	GuideEnabled                  bool                   `json:"guide_enabled,omitempty" jsonschema:"description=Guide Enabled"`
	InitialHeading                int                    `json:"initial_heading,omitempty" jsonschema:"description=Initial Heading"`
	InitialPitch                  int                    `json:"initial_pitch,omitempty" jsonschema:"description=Initial Pitch"`
	InstantGameEntryPointData     string                 `json:"instant_game_entry_point_data,omitempty" jsonschema:"description=Instant Game Entry Point Data"`
	IsBoostIntended               bool                   `json:"is_boost_intended,omitempty" jsonschema:"description=Is Boost Intended"`
	IsExplicitShare               bool                   `json:"is_explicit_share,omitempty" jsonschema:"description=Is Explicit Share"`
	IsGroupLinkingPost            bool                   `json:"is_group_linking_post,omitempty" jsonschema:"description=Is Group Linking Post"`
	IsPartnershipAd               bool                   `json:"is_partnership_ad,omitempty" jsonschema:"description=Is Partnership Ad"`
	IsVoiceClip                   bool                   `json:"is_voice_clip,omitempty" jsonschema:"description=Is Voice Clip"`
	LocationSourceId              string                 `json:"location_source_id,omitempty" jsonschema:"description=ID of the Location Source,pattern=^[0-9]+$"`
	ManualPrivacy                 bool                   `json:"manual_privacy,omitempty" jsonschema:"description=Manual Privacy"`
	NoStory                       bool                   `json:"no_story,omitempty" jsonschema:"description=No Story"`
	OgActionTypeId                string                 `json:"og_action_type_id,omitempty" jsonschema:"description=ID of the Og Action Type,pattern=^[0-9]+$"`
	OgIconId                      string                 `json:"og_icon_id,omitempty" jsonschema:"description=ID of the Og Icon,pattern=^[0-9]+$"`
	OgObjectId                    string                 `json:"og_object_id,omitempty" jsonschema:"description=ID of the Og Object,pattern=^[0-9]+$"`
	OgPhrase                      string                 `json:"og_phrase,omitempty" jsonschema:"description=Og Phrase"`
	OgSuggestionMechanism         string                 `json:"og_suggestion_mechanism,omitempty" jsonschema:"description=Og Suggestion Mechanism"`
	OriginalFov                   int                    `json:"original_fov,omitempty" jsonschema:"description=Original Fov"`
	OriginalProjectionType        string                 `json:"original_projection_type,omitempty" jsonschema:"description=Original Projection Type"`
	PartnershipAdAdCode           string                 `json:"partnership_ad_ad_code,omitempty" jsonschema:"description=Partnership Ad Ad Code"`
	Privacy                       string                 `json:"privacy,omitempty" jsonschema:"description=Privacy"`
	PublishEventId                int                    `json:"publish_event_id,omitempty" jsonschema:"description=ID of the Publish Event,pattern=^[0-9]+$"`
	ReferencedStickerId           string                 `json:"referenced_sticker_id,omitempty" jsonschema:"description=ID of the Referenced Sticker,pattern=^[0-9]+$"`
	ReplaceVideoId                string                 `json:"replace_video_id,omitempty" jsonschema:"description=ID of the Replace Video,pattern=^[0-9]+$"`
	SlideshowSpec                 map[string]interface{} `json:"slideshow_spec,omitempty" jsonschema:"description=Slideshow Spec"`
	Source                        string                 `json:"source,omitempty" jsonschema:"description=Source"`
	SourceInstagramMediaId        string                 `json:"source_instagram_media_id,omitempty" jsonschema:"description=ID of the Source Instagram Media,pattern=^[0-9]+$"`
	Spherical                     bool                   `json:"spherical,omitempty" jsonschema:"description=Spherical"`
	SponsorId                     string                 `json:"sponsor_id,omitempty" jsonschema:"description=ID of the Sponsor,pattern=^[0-9]+$"`
	StartOffset                   int                    `json:"start_offset,omitempty" jsonschema:"description=Start Offset"`
	SwapMode                      string                 `json:"swap_mode,omitempty" jsonschema:"description=Swap Mode"`
	TextFormatMetadata            string                 `json:"text_format_metadata,omitempty" jsonschema:"description=Text Format Metadata"`
	Thumb                         interface{}            `json:"thumb,omitempty" jsonschema:"description=Thumb"`
	TimeSinceOriginalPost         int                    `json:"time_since_original_post,omitempty" jsonschema:"description=Time Since Original Post"`
	Title                         string                 `json:"title,omitempty" jsonschema:"description=Title"`
	TranscodeSettingProperties    string                 `json:"transcode_setting_properties,omitempty" jsonschema:"description=Transcode Setting Properties"`
	UnpublishedContentType        string                 `json:"unpublished_content_type,omitempty" jsonschema:"description=Unpublished Content Type"`
	UploadPhase                   string                 `json:"upload_phase,omitempty" jsonschema:"description=Upload Phase"`
	UploadSessionId               string                 `json:"upload_session_id,omitempty" jsonschema:"description=ID of the Upload Session,pattern=^[0-9]+$"`
	UploadSettingProperties       string                 `json:"upload_setting_properties,omitempty" jsonschema:"description=Upload Setting Properties"`
	VideoFileChunk                string                 `json:"video_file_chunk,omitempty" jsonschema:"description=Video File Chunk"`
	VideoIdOriginal               string                 `json:"video_id_original,omitempty" jsonschema:"description=Video ID Original,pattern=^[0-9]+$"`
	VideoStartTimeMs              int                    `json:"video_start_time_ms,omitempty" jsonschema:"description=Video Start Time Ms"`
	WaterfallId                   string                 `json:"waterfall_id,omitempty" jsonschema:"description=ID of the Waterfall,pattern=^[0-9]+$"`
}

// delete_userArgs defines the typed arguments for delete_user
type delete_userArgs struct {
	ID string `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
}

// get_userArgs defines the typed arguments for get_user
type get_userArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// update_userArgs defines the typed arguments for update_user
type update_userArgs struct {
	ID                              string `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	EmojiColorPref                  int    `json:"emoji_color_pref,omitempty" jsonschema:"description=Emoji Color Pref"`
	Firstname                       string `json:"firstname,omitempty" jsonschema:"description=Firstname"`
	Lastname                        string `json:"lastname,omitempty" jsonschema:"description=Lastname"`
	LocalNewsMegaphoneDismissStatus string `json:"local_news_megaphone_dismiss_status,omitempty" jsonschema:"description=Local News Megaphone Dismiss Status"`
	LocalNewsSubscriptionStatus     string `json:"local_news_subscription_status,omitempty" jsonschema:"description=Local News Subscription Status"`
	Name                            string `json:"name,omitempty" jsonschema:"description=Name"`
	Password                        string `json:"password,omitempty" jsonschema:"description=Password"`
}

var (
	remove_access_tokens_from_userSchema = generateSchemaForType(reflect.TypeOf(remove_access_tokens_from_userArgs{}))

	create_user_access_tokenSchema = generateSchemaForType(reflect.TypeOf(create_user_access_tokenArgs{}))

	list_user_accountsSchema = generateSchemaForType(reflect.TypeOf(list_user_accountsArgs{}))

	create_user_accountSchema = generateSchemaForType(reflect.TypeOf(create_user_accountArgs{}))

	list_user_ad_studiesSchema = generateSchemaForType(reflect.TypeOf(list_user_ad_studiesArgs{}))

	create_user_ad_studieSchema = generateSchemaForType(reflect.TypeOf(create_user_ad_studieArgs{}))

	list_user_adaccountsSchema = generateSchemaForType(reflect.TypeOf(list_user_adaccountsArgs{}))

	list_user_albumsSchema = generateSchemaForType(reflect.TypeOf(list_user_albumsArgs{}))

	create_user_applicationSchema = generateSchemaForType(reflect.TypeOf(create_user_applicationArgs{}))

	list_user_apprequestformerrecipientsSchema = generateSchemaForType(reflect.TypeOf(list_user_apprequestformerrecipientsArgs{}))

	list_user_apprequestsSchema = generateSchemaForType(reflect.TypeOf(list_user_apprequestsArgs{}))

	list_user_assigned_ad_accountsSchema = generateSchemaForType(reflect.TypeOf(list_user_assigned_ad_accountsArgs{}))

	list_user_assigned_applicationsSchema = generateSchemaForType(reflect.TypeOf(list_user_assigned_applicationsArgs{}))

	list_user_assigned_business_asset_groupsSchema = generateSchemaForType(reflect.TypeOf(list_user_assigned_business_asset_groupsArgs{}))

	list_user_assigned_pagesSchema = generateSchemaForType(reflect.TypeOf(list_user_assigned_pagesArgs{}))

	list_user_assigned_product_catalogsSchema = generateSchemaForType(reflect.TypeOf(list_user_assigned_product_catalogsArgs{}))

	list_user_avatarsSchema = generateSchemaForType(reflect.TypeOf(list_user_avatarsArgs{}))

	list_user_business_usersSchema = generateSchemaForType(reflect.TypeOf(list_user_business_usersArgs{}))

	remove_businesses_from_userSchema = generateSchemaForType(reflect.TypeOf(remove_businesses_from_userArgs{}))

	list_user_businessesSchema = generateSchemaForType(reflect.TypeOf(list_user_businessesArgs{}))

	create_user_businesseSchema = generateSchemaForType(reflect.TypeOf(create_user_businesseArgs{}))

	list_user_conversationsSchema = generateSchemaForType(reflect.TypeOf(list_user_conversationsArgs{}))

	list_user_custom_labelsSchema = generateSchemaForType(reflect.TypeOf(list_user_custom_labelsArgs{}))

	list_user_eventsSchema = generateSchemaForType(reflect.TypeOf(list_user_eventsArgs{}))

	get_user_feedSchema = generateSchemaForType(reflect.TypeOf(get_user_feedArgs{}))

	update_user_feedSchema = generateSchemaForType(reflect.TypeOf(update_user_feedArgs{}))

	list_user_friendsSchema = generateSchemaForType(reflect.TypeOf(list_user_friendsArgs{}))

	list_user_fundraisersSchema = generateSchemaForType(reflect.TypeOf(list_user_fundraisersArgs{}))

	create_user_fundraiserSchema = generateSchemaForType(reflect.TypeOf(create_user_fundraiserArgs{}))

	list_user_groupsSchema = generateSchemaForType(reflect.TypeOf(list_user_groupsArgs{}))

	list_user_ids_for_appsSchema = generateSchemaForType(reflect.TypeOf(list_user_ids_for_appsArgs{}))

	list_user_ids_for_businessSchema = generateSchemaForType(reflect.TypeOf(list_user_ids_for_businessArgs{}))

	list_user_ids_for_pagesSchema = generateSchemaForType(reflect.TypeOf(list_user_ids_for_pagesArgs{}))

	list_user_likesSchema = generateSchemaForType(reflect.TypeOf(list_user_likesArgs{}))

	list_user_live_videosSchema = generateSchemaForType(reflect.TypeOf(list_user_live_videosArgs{}))

	create_user_live_videoSchema = generateSchemaForType(reflect.TypeOf(create_user_live_videoArgs{}))

	create_user_messenger_desktop_performance_traceSchema = generateSchemaForType(reflect.TypeOf(create_user_messenger_desktop_performance_traceArgs{}))

	update_user_messenger_kids_accounts_unread_badgeSchema = generateSchemaForType(reflect.TypeOf(update_user_messenger_kids_accounts_unread_badgeArgs{}))

	get_user_musicSchema = generateSchemaForType(reflect.TypeOf(get_user_musicArgs{}))

	create_user_notificationSchema = generateSchemaForType(reflect.TypeOf(create_user_notificationArgs{}))

	list_user_payment_transactionsSchema = generateSchemaForType(reflect.TypeOf(list_user_payment_transactionsArgs{}))

	remove_permissions_from_userSchema = generateSchemaForType(reflect.TypeOf(remove_permissions_from_userArgs{}))

	list_user_permissionsSchema = generateSchemaForType(reflect.TypeOf(list_user_permissionsArgs{}))

	list_user_personal_ad_accountsSchema = generateSchemaForType(reflect.TypeOf(list_user_personal_ad_accountsArgs{}))

	list_user_photosSchema = generateSchemaForType(reflect.TypeOf(list_user_photosArgs{}))

	create_user_photoSchema = generateSchemaForType(reflect.TypeOf(create_user_photoArgs{}))

	get_user_pictureSchema = generateSchemaForType(reflect.TypeOf(get_user_pictureArgs{}))

	list_user_postsSchema = generateSchemaForType(reflect.TypeOf(list_user_postsArgs{}))

	list_user_rich_media_documentsSchema = generateSchemaForType(reflect.TypeOf(list_user_rich_media_documentsArgs{}))

	create_user_staging_resourceSchema = generateSchemaForType(reflect.TypeOf(create_user_staging_resourceArgs{}))

	list_user_videosSchema = generateSchemaForType(reflect.TypeOf(list_user_videosArgs{}))

	create_user_videoSchema = generateSchemaForType(reflect.TypeOf(create_user_videoArgs{}))

	delete_userSchema = generateSchemaForType(reflect.TypeOf(delete_userArgs{}))

	get_userSchema = generateSchemaForType(reflect.TypeOf(get_userArgs{}))

	update_userSchema = generateSchemaForType(reflect.TypeOf(update_userArgs{}))
)

// RemoveAccessTokensFromUserHandler handles remove_access_tokens_from_user with typed arguments
func RemoveAccessTokensFromUserHandler(ctx context.Context, request mcp.CallToolRequest, args remove_access_tokens_from_userArgs) (*mcp.CallToolResult, error) {

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	url := buildGraphURL(args.ID, "access_tokens")
	return ExecuteDELETERequest(ctx, url)

}

// CreateUserAccessTokenHandler handles create_user_access_token with typed arguments
func CreateUserAccessTokenHandler(ctx context.Context, request mcp.CallToolRequest, args create_user_access_tokenArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.BusinessApp != "" {
		body["business_app"] = args.BusinessApp
	}

	if args.PageId != "" {
		body["page_id"] = args.PageId
	}

	if len(args.Scope) > 0 {
		body["scope"] = args.Scope
	}

	body["set_token_expires_in_60_days"] = args.SetTokenExpiresIn60Days

	// Build URL and execute
	url := buildGraphURL(args.ID, "access_tokens")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListUserAccountsHandler handles list_user_accounts with typed arguments
func ListUserAccountsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_accountsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.AdId != "" {
		query.Set("ad_id", args.AdId)
	}

	if args.IsPlace {
		query.Set("is_place", "true")
	}

	if args.IsPromotable {
		query.Set("is_promotable", "true")
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "accounts")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateUserAccountHandler handles create_user_account with typed arguments
func CreateUserAccountHandler(ctx context.Context, request mcp.CallToolRequest, args create_user_accountArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.About != "" {
		body["about"] = args.About
	}

	if args.Address != "" {
		body["address"] = args.Address
	}

	if args.Category > 0 {
		body["category"] = args.Category
	}

	if args.CategoryEnum != "" {
		body["category_enum"] = args.CategoryEnum
	}

	if len(args.CategoryList) > 0 {
		body["category_list"] = args.CategoryList
	}

	if args.CityId != "" {
		body["city_id"] = args.CityId
	}

	if args.Coordinates != nil {
		body["coordinates"] = args.Coordinates
	}

	if args.CoverPhoto != nil {
		body["cover_photo"] = args.CoverPhoto
	}

	if args.Description != "" {
		body["description"] = args.Description
	}

	body["ignore_coordinate_warnings"] = args.IgnoreCoordinateWarnings

	if args.Location != nil {
		body["location"] = args.Location
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.Phone != "" {
		body["phone"] = args.Phone
	}

	if args.Picture != "" {
		body["picture"] = args.Picture
	}

	if args.Website != "" {
		body["website"] = args.Website
	}

	if args.Zip != "" {
		body["zip"] = args.Zip
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "accounts")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListUserAdStudiesHandler handles list_user_ad_studies with typed arguments
func ListUserAdStudiesHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_ad_studiesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ad_studies")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateUserAdStudieHandler handles create_user_ad_studie with typed arguments
func CreateUserAdStudieHandler(ctx context.Context, request mcp.CallToolRequest, args create_user_ad_studieArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.Cells) > 0 {
		body["cells"] = args.Cells
	}

	if args.ClientBusiness != "" {
		body["client_business"] = args.ClientBusiness
	}

	if args.ConfidenceLevel != 0 {
		body["confidence_level"] = args.ConfidenceLevel
	}

	if args.CooldownStartTime > 0 {
		body["cooldown_start_time"] = args.CooldownStartTime
	}

	if args.Description != "" {
		body["description"] = args.Description
	}

	if args.EndTime > 0 {
		body["end_time"] = args.EndTime
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if len(args.Objectives) > 0 {
		body["objectives"] = args.Objectives
	}

	if args.ObservationEndTime > 0 {
		body["observation_end_time"] = args.ObservationEndTime
	}

	if args.StartTime > 0 {
		body["start_time"] = args.StartTime
	}

	if args.Type != "" {
		body["type"] = args.Type
	}

	if args.Viewers != nil {
		body["viewers"] = args.Viewers
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "ad_studies")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListUserAdaccountsHandler handles list_user_adaccounts with typed arguments
func ListUserAdaccountsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_adaccountsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "adaccounts")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserAlbumsHandler handles list_user_albums with typed arguments
func ListUserAlbumsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_albumsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "albums")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateUserApplicationHandler handles create_user_application with typed arguments
func CreateUserApplicationHandler(ctx context.Context, request mcp.CallToolRequest, args create_user_applicationArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.BusinessApp > 0 {
		body["business_app"] = args.BusinessApp
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "applications")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListUserApprequestformerrecipientsHandler handles list_user_apprequestformerrecipients with typed arguments
func ListUserApprequestformerrecipientsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_apprequestformerrecipientsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL("", "apprequestformerrecipients")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserApprequestsHandler handles list_user_apprequests with typed arguments
func ListUserApprequestsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_apprequestsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "apprequests")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserAssignedAdAccountsHandler handles list_user_assigned_ad_accounts with typed arguments
func ListUserAssignedAdAccountsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_assigned_ad_accountsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "assigned_ad_accounts")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserAssignedApplicationsHandler handles list_user_assigned_applications with typed arguments
func ListUserAssignedApplicationsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_assigned_applicationsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "assigned_applications")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserAssignedBusinessAssetGroupsHandler handles list_user_assigned_business_asset_groups with typed arguments
func ListUserAssignedBusinessAssetGroupsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_assigned_business_asset_groupsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.ContainedAssetId != "" {
		query.Set("contained_asset_id", args.ContainedAssetId)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "assigned_business_asset_groups")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserAssignedPagesHandler handles list_user_assigned_pages with typed arguments
func ListUserAssignedPagesHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_assigned_pagesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "assigned_pages")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserAssignedProductCatalogsHandler handles list_user_assigned_product_catalogs with typed arguments
func ListUserAssignedProductCatalogsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_assigned_product_catalogsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "assigned_product_catalogs")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserAvatarsHandler handles list_user_avatars with typed arguments
func ListUserAvatarsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_avatarsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "avatars")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserBusinessUsersHandler handles list_user_business_users with typed arguments
func ListUserBusinessUsersHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_business_usersArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL("", "business_users")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// RemoveBusinessesFromUserHandler handles remove_businesses_from_user with typed arguments
func RemoveBusinessesFromUserHandler(ctx context.Context, request mcp.CallToolRequest, args remove_businesses_from_userArgs) (*mcp.CallToolResult, error) {

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	url := buildGraphURL(args.ID, "businesses")
	return ExecuteDELETERequest(ctx, url)

}

// ListUserBusinessesHandler handles list_user_businesses with typed arguments
func ListUserBusinessesHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_businessesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "businesses")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateUserBusinesseHandler handles create_user_businesse with typed arguments
func CreateUserBusinesseHandler(ctx context.Context, request mcp.CallToolRequest, args create_user_businesseArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.ChildBusinessExternalId != "" {
		body["child_business_external_id"] = args.ChildBusinessExternalId
	}

	if args.Email != "" {
		body["email"] = args.Email
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.PrimaryPage != "" {
		body["primary_page"] = args.PrimaryPage
	}

	if args.SalesRepEmail != "" {
		body["sales_rep_email"] = args.SalesRepEmail
	}

	if args.SurveyBusinessType != "" {
		body["survey_business_type"] = args.SurveyBusinessType
	}

	if args.SurveyNumAssets > 0 {
		body["survey_num_assets"] = args.SurveyNumAssets
	}

	if args.SurveyNumPeople > 0 {
		body["survey_num_people"] = args.SurveyNumPeople
	}

	if args.TimezoneId != "" {
		body["timezone_id"] = args.TimezoneId
	}

	if args.Vertical != "" {
		body["vertical"] = args.Vertical
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "businesses")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListUserConversationsHandler handles list_user_conversations with typed arguments
func ListUserConversationsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_conversationsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Folder != "" {
		query.Set("folder", args.Folder)
	}

	if args.Platform != "" {
		query.Set("platform", args.Platform)
	}

	if len(args.Tags) > 0 {
		query.Set("tags", strings.Join(args.Tags, ","))
	}

	if args.UserId != "" {
		query.Set("user_id", args.UserId)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "conversations")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserCustomLabelsHandler handles list_user_custom_labels with typed arguments
func ListUserCustomLabelsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_custom_labelsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "custom_labels")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserEventsHandler handles list_user_events with typed arguments
func ListUserEventsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_eventsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.IncludeCanceled {
		query.Set("include_canceled", "true")
	}

	if args.Type != "" {
		query.Set("type", args.Type)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "events")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// GetUserFeedHandler handles get_user_feed with typed arguments
func GetUserFeedHandler(ctx context.Context, request mcp.CallToolRequest, args get_user_feedArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.IncludeHidden {
		query.Set("include_hidden", "true")
	}

	if args.Q != "" {
		query.Set("q", args.Q)
	}

	if args.ShowExpired {
		query.Set("show_expired", "true")
	}

	if args.Since != "" {
		query.Set("since", args.Since)
	}

	if args.Until != "" {
		query.Set("until", args.Until)
	}

	if args.With != "" {
		query.Set("with", args.With)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "feed")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UpdateUserFeedHandler handles update_user_feed with typed arguments
func UpdateUserFeedHandler(ctx context.Context, request mcp.CallToolRequest, args update_user_feedArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.Actions != nil {
		body["actions"] = args.Actions
	}

	if args.AlbumId != "" {
		body["album_id"] = args.AlbumId
	}

	if args.AndroidKeyHash != "" {
		body["android_key_hash"] = args.AndroidKeyHash
	}

	if args.ApplicationId != "" {
		body["application_id"] = args.ApplicationId
	}

	if args.AskedFunFactPromptId > 0 {
		body["asked_fun_fact_prompt_id"] = args.AskedFunFactPromptId
	}

	if args.Asset3dId != "" {
		body["asset3d_id"] = args.Asset3dId
	}

	if args.AssociatedId != "" {
		body["associated_id"] = args.AssociatedId
	}

	body["attach_place_suggestion"] = args.AttachPlaceSuggestion

	if len(args.AttachedMedia) > 0 {
		body["attached_media"] = args.AttachedMedia
	}

	body["audience_exp"] = args.AudienceExp

	if args.BackdatedTime != "" {
		body["backdated_time"] = args.BackdatedTime
	}

	if args.BackdatedTimeGranularity != "" {
		body["backdated_time_granularity"] = args.BackdatedTimeGranularity
	}

	body["breaking_news"] = args.BreakingNews

	if args.BreakingNewsExpiration > 0 {
		body["breaking_news_expiration"] = args.BreakingNewsExpiration
	}

	if args.CallToAction != nil {
		body["call_to_action"] = args.CallToAction
	}

	if args.Caption != "" {
		body["caption"] = args.Caption
	}

	if len(args.ChildAttachments) > 0 {
		body["child_attachments"] = args.ChildAttachments
	}

	if args.ClientMutationId != "" {
		body["client_mutation_id"] = args.ClientMutationId
	}

	if args.ComposerEntryPicker != "" {
		body["composer_entry_picker"] = args.ComposerEntryPicker
	}

	if args.ComposerEntryPoint != "" {
		body["composer_entry_point"] = args.ComposerEntryPoint
	}

	if args.ComposerEntryTime > 0 {
		body["composer_entry_time"] = args.ComposerEntryTime
	}

	if args.ComposerSessionEventsLog != "" {
		body["composer_session_events_log"] = args.ComposerSessionEventsLog
	}

	if args.ComposerSessionId != "" {
		body["composer_session_id"] = args.ComposerSessionId
	}

	if args.ComposerSourceSurface != "" {
		body["composer_source_surface"] = args.ComposerSourceSurface
	}

	if args.ComposerType != "" {
		body["composer_type"] = args.ComposerType
	}

	if args.ConnectionClass != "" {
		body["connection_class"] = args.ConnectionClass
	}

	if args.ContentAttachment != "" {
		body["content_attachment"] = args.ContentAttachment
	}

	if args.Coordinates != nil {
		body["coordinates"] = args.Coordinates
	}

	if args.CtaLink != "" {
		body["cta_link"] = args.CtaLink
	}

	if args.CtaType != "" {
		body["cta_type"] = args.CtaType
	}

	if args.Description != "" {
		body["description"] = args.Description
	}

	if args.DirectShareStatus > 0 {
		body["direct_share_status"] = args.DirectShareStatus
	}

	if args.ExpandedHeight > 0 {
		body["expanded_height"] = args.ExpandedHeight
	}

	if args.ExpandedWidth > 0 {
		body["expanded_width"] = args.ExpandedWidth
	}

	if args.FeedTargeting != nil {
		body["feed_targeting"] = args.FeedTargeting
	}

	if args.Formatting != "" {
		body["formatting"] = args.Formatting
	}

	if args.FunFactPromptId != "" {
		body["fun_fact_prompt_id"] = args.FunFactPromptId
	}

	if args.FunFactToasteeId > 0 {
		body["fun_fact_toastee_id"] = args.FunFactToasteeId
	}

	if args.Height > 0 {
		body["height"] = args.Height
	}

	if args.HomeCheckinCityId != nil {
		body["home_checkin_city_id"] = args.HomeCheckinCityId
	}

	if args.ImageCrops != nil {
		body["image_crops"] = args.ImageCrops
	}

	if args.ImplicitWithTags != nil {
		body["implicit_with_tags"] = args.ImplicitWithTags
	}

	if args.InstantGameEntryPointData != "" {
		body["instant_game_entry_point_data"] = args.InstantGameEntryPointData
	}

	if args.IosBundleId != "" {
		body["ios_bundle_id"] = args.IosBundleId
	}

	body["is_backout_draft"] = args.IsBackoutDraft

	body["is_boost_intended"] = args.IsBoostIntended

	body["is_explicit_location"] = args.IsExplicitLocation

	body["is_explicit_share"] = args.IsExplicitShare

	body["is_group_linking_post"] = args.IsGroupLinkingPost

	body["is_photo_container"] = args.IsPhotoContainer

	if args.Link != "" {
		body["link"] = args.Link
	}

	if args.LocationSourceId != "" {
		body["location_source_id"] = args.LocationSourceId
	}

	body["manual_privacy"] = args.ManualPrivacy

	if args.Message != "" {
		body["message"] = args.Message
	}

	body["multi_share_end_card"] = args.MultiShareEndCard

	body["multi_share_optimized"] = args.MultiShareOptimized

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.NectarModule != "" {
		body["nectar_module"] = args.NectarModule
	}

	if args.ObjectAttachment != "" {
		body["object_attachment"] = args.ObjectAttachment
	}

	if args.OgActionTypeId != "" {
		body["og_action_type_id"] = args.OgActionTypeId
	}

	body["og_hide_object_attachment"] = args.OgHideObjectAttachment

	if args.OgIconId != "" {
		body["og_icon_id"] = args.OgIconId
	}

	if args.OgObjectId != "" {
		body["og_object_id"] = args.OgObjectId
	}

	if args.OgPhrase != "" {
		body["og_phrase"] = args.OgPhrase
	}

	body["og_set_profile_badge"] = args.OgSetProfileBadge

	if args.OgSuggestionMechanism != "" {
		body["og_suggestion_mechanism"] = args.OgSuggestionMechanism
	}

	if args.PageRecommendation != "" {
		body["page_recommendation"] = args.PageRecommendation
	}

	if args.Picture != "" {
		body["picture"] = args.Picture
	}

	if args.Place != nil {
		body["place"] = args.Place
	}

	if args.PlaceAttachmentSetting != "" {
		body["place_attachment_setting"] = args.PlaceAttachmentSetting
	}

	if args.PlaceList != "" {
		body["place_list"] = args.PlaceList
	}

	if args.PlaceListData != nil {
		body["place_list_data"] = args.PlaceListData
	}

	if len(args.PostSurfacesBlacklist) > 0 {
		body["post_surfaces_blacklist"] = args.PostSurfacesBlacklist
	}

	if args.PostingToRedspace != "" {
		body["posting_to_redspace"] = args.PostingToRedspace
	}

	if args.Privacy != "" {
		body["privacy"] = args.Privacy
	}

	if args.PromptId != "" {
		body["prompt_id"] = args.PromptId
	}

	if args.PromptTrackingString != "" {
		body["prompt_tracking_string"] = args.PromptTrackingString
	}

	if args.Properties != nil {
		body["properties"] = args.Properties
	}

	if args.ProxiedAppId != "" {
		body["proxied_app_id"] = args.ProxiedAppId
	}

	if args.PublishEventId > 0 {
		body["publish_event_id"] = args.PublishEventId
	}

	body["published"] = args.Published

	if args.Quote != "" {
		body["quote"] = args.Quote
	}

	if len(args.Ref) > 0 {
		body["ref"] = args.Ref
	}

	if len(args.ReferenceableImageIds) > 0 {
		body["referenceable_image_ids"] = args.ReferenceableImageIds
	}

	if args.ReferralId != "" {
		body["referral_id"] = args.ReferralId
	}

	if args.ScheduledPublishTime != "" {
		body["scheduled_publish_time"] = args.ScheduledPublishTime
	}

	if args.Source != "" {
		body["source"] = args.Source
	}

	if args.SponsorId != "" {
		body["sponsor_id"] = args.SponsorId
	}

	if args.SponsorRelationship > 0 {
		body["sponsor_relationship"] = args.SponsorRelationship
	}

	if args.SuggestedPlaceId != nil {
		body["suggested_place_id"] = args.SuggestedPlaceId
	}

	if args.Tags != nil {
		body["tags"] = args.Tags
	}

	if args.TargetSurface != "" {
		body["target_surface"] = args.TargetSurface
	}

	if args.Targeting != nil {
		body["targeting"] = args.Targeting
	}

	if args.TextFormatMetadata != "" {
		body["text_format_metadata"] = args.TextFormatMetadata
	}

	if args.TextFormatPresetId != "" {
		body["text_format_preset_id"] = args.TextFormatPresetId
	}

	if args.TextOnlyPlace != "" {
		body["text_only_place"] = args.TextOnlyPlace
	}

	if args.Thumbnail != nil {
		body["thumbnail"] = args.Thumbnail
	}

	if args.TimeSinceOriginalPost > 0 {
		body["time_since_original_post"] = args.TimeSinceOriginalPost
	}

	if args.Title != "" {
		body["title"] = args.Title
	}

	if args.TrackingInfo != "" {
		body["tracking_info"] = args.TrackingInfo
	}

	if args.UnpublishedContentType != "" {
		body["unpublished_content_type"] = args.UnpublishedContentType
	}

	body["user_selected_tags"] = args.UserSelectedTags

	if args.VideoStartTimeMs > 0 {
		body["video_start_time_ms"] = args.VideoStartTimeMs
	}

	if args.ViewerCoordinates != nil {
		body["viewer_coordinates"] = args.ViewerCoordinates
	}

	if args.Width > 0 {
		body["width"] = args.Width
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "feed")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListUserFriendsHandler handles list_user_friends with typed arguments
func ListUserFriendsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_friendsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Uid > 0 {
		query.Set("uid", fmt.Sprintf("%d", args.Uid))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "friends")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserFundraisersHandler handles list_user_fundraisers with typed arguments
func ListUserFundraisersHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_fundraisersArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "fundraisers")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateUserFundraiserHandler handles create_user_fundraiser with typed arguments
func CreateUserFundraiserHandler(ctx context.Context, request mcp.CallToolRequest, args create_user_fundraiserArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.CharityId != "" {
		body["charity_id"] = args.CharityId
	}

	if args.CoverPhoto != nil {
		body["cover_photo"] = args.CoverPhoto
	}

	if args.Currency != "" {
		body["currency"] = args.Currency
	}

	if args.Description != "" {
		body["description"] = args.Description
	}

	if args.EndTime != "" {
		body["end_time"] = args.EndTime
	}

	if args.ExternalEventName != "" {
		body["external_event_name"] = args.ExternalEventName
	}

	if args.ExternalEventStartTime != "" {
		body["external_event_start_time"] = args.ExternalEventStartTime
	}

	if args.ExternalEventUri != "" {
		body["external_event_uri"] = args.ExternalEventUri
	}

	if args.ExternalFundraiserUri != "" {
		body["external_fundraiser_uri"] = args.ExternalFundraiserUri
	}

	if args.ExternalId != "" {
		body["external_id"] = args.ExternalId
	}

	if args.FundraiserType != "" {
		body["fundraiser_type"] = args.FundraiserType
	}

	if args.GoalAmount > 0 {
		body["goal_amount"] = args.GoalAmount
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.PageId != "" {
		body["page_id"] = args.PageId
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "fundraisers")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListUserGroupsHandler handles list_user_groups with typed arguments
func ListUserGroupsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_groupsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.AdminOnly {
		query.Set("admin_only", "true")
	}

	if args.Parent != "" {
		query.Set("parent", args.Parent)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "groups")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserIdsForAppsHandler handles list_user_ids_for_apps with typed arguments
func ListUserIdsForAppsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_ids_for_appsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.App > 0 {
		query.Set("app", fmt.Sprintf("%d", args.App))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ids_for_apps")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserIdsForBusinessHandler handles list_user_ids_for_business with typed arguments
func ListUserIdsForBusinessHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_ids_for_businessArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.App > 0 {
		query.Set("app", fmt.Sprintf("%d", args.App))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ids_for_business")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserIdsForPagesHandler handles list_user_ids_for_pages with typed arguments
func ListUserIdsForPagesHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_ids_for_pagesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Page > 0 {
		query.Set("page", fmt.Sprintf("%d", args.Page))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ids_for_pages")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserLikesHandler handles list_user_likes with typed arguments
func ListUserLikesHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_likesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.TargetId != "" {
		query.Set("target_id", args.TargetId)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "likes")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserLiveVideosHandler handles list_user_live_videos with typed arguments
func ListUserLiveVideosHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_live_videosArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if len(args.BroadcastStatus) > 0 {
		query.Set("broadcast_status", strings.Join(args.BroadcastStatus, ","))
	}

	if args.Source != "" {
		query.Set("source", args.Source)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "live_videos")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateUserLiveVideoHandler handles create_user_live_video with typed arguments
func CreateUserLiveVideoHandler(ctx context.Context, request mcp.CallToolRequest, args create_user_live_videoArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.ContentTags) > 0 {
		body["content_tags"] = args.ContentTags
	}

	if args.Description != "" {
		body["description"] = args.Description
	}

	body["enable_backup_ingest"] = args.EnableBackupIngest

	if args.EncodingSettings != "" {
		body["encoding_settings"] = args.EncodingSettings
	}

	if args.EventParams != nil {
		body["event_params"] = args.EventParams
	}

	body["fisheye_video_cropped"] = args.FisheyeVideoCropped

	if args.FrontZRotation != 0 {
		body["front_z_rotation"] = args.FrontZRotation
	}

	body["is_audio_only"] = args.IsAudioOnly

	body["is_spherical"] = args.IsSpherical

	if args.OriginalFov > 0 {
		body["original_fov"] = args.OriginalFov
	}

	if args.Privacy != "" {
		body["privacy"] = args.Privacy
	}

	if args.Projection != "" {
		body["projection"] = args.Projection
	}

	body["published"] = args.Published

	if args.ScheduleCustomProfileImage != nil {
		body["schedule_custom_profile_image"] = args.ScheduleCustomProfileImage
	}

	if args.SpatialAudioFormat != "" {
		body["spatial_audio_format"] = args.SpatialAudioFormat
	}

	if args.Status != "" {
		body["status"] = args.Status
	}

	if args.StereoscopicMode != "" {
		body["stereoscopic_mode"] = args.StereoscopicMode
	}

	body["stop_on_delete_stream"] = args.StopOnDeleteStream

	if args.StreamType != "" {
		body["stream_type"] = args.StreamType
	}

	if args.Title != "" {
		body["title"] = args.Title
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "live_videos")

	return ExecutePOSTRequest(ctx, url, body)

}

// CreateUserMessengerDesktopPerformanceTraceHandler handles create_user_messenger_desktop_performance_trace with typed arguments
func CreateUserMessengerDesktopPerformanceTraceHandler(ctx context.Context, request mcp.CallToolRequest, args create_user_messenger_desktop_performance_traceArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	// Add parameters to body

	// Build URL and execute
	url := buildGraphURL("", "messenger_desktop_performance_traces")

	return ExecutePOSTRequest(ctx, url, body)

}

// UpdateUserMessengerKidsAccountsUnreadBadgeHandler handles update_user_messenger_kids_accounts_unread_badge with typed arguments
func UpdateUserMessengerKidsAccountsUnreadBadgeHandler(ctx context.Context, request mcp.CallToolRequest, args update_user_messenger_kids_accounts_unread_badgeArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	// Add parameters to body

	if args.ProxiedAppId > 0 {
		body["proxied_app_id"] = args.ProxiedAppId
	}

	// Build URL and execute
	url := buildGraphURL("", "messenger_kids_accounts_unread_badge")

	return ExecutePOSTRequest(ctx, url, body)

}

// GetUserMusicHandler handles get_user_music with typed arguments
func GetUserMusicHandler(ctx context.Context, request mcp.CallToolRequest, args get_user_musicArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.TargetId != "" {
		query.Set("target_id", args.TargetId)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "music")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateUserNotificationHandler handles create_user_notification with typed arguments
func CreateUserNotificationHandler(ctx context.Context, request mcp.CallToolRequest, args create_user_notificationArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.BotMessagePayloadElements != "" {
		body["bot_message_payload_elements"] = args.BotMessagePayloadElements
	}

	if len(args.Filtering) > 0 {
		body["filtering"] = args.Filtering
	}

	if args.Href != nil {
		body["href"] = args.Href
	}

	if args.Label != "" {
		body["label"] = args.Label
	}

	if args.Message != nil {
		body["message"] = args.Message
	}

	if len(args.NotifIds) > 0 {
		body["notif_ids"] = args.NotifIds
	}

	if args.Payload != "" {
		body["payload"] = args.Payload
	}

	body["read"] = args.Read

	if args.Ref != "" {
		body["ref"] = args.Ref
	}

	if args.ScheduleInterval > 0 {
		body["schedule_interval"] = args.ScheduleInterval
	}

	body["seen"] = args.Seen

	if args.Template != nil {
		body["template"] = args.Template
	}

	if args.Type != "" {
		body["type"] = args.Type
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "notifications")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListUserPaymentTransactionsHandler handles list_user_payment_transactions with typed arguments
func ListUserPaymentTransactionsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_payment_transactionsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL("", "payment_transactions")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// RemovePermissionsFromUserHandler handles remove_permissions_from_user with typed arguments
func RemovePermissionsFromUserHandler(ctx context.Context, request mcp.CallToolRequest, args remove_permissions_from_userArgs) (*mcp.CallToolResult, error) {

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	url := buildGraphURL(args.ID, "permissions")
	return ExecuteDELETERequest(ctx, url)

}

// ListUserPermissionsHandler handles list_user_permissions with typed arguments
func ListUserPermissionsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_permissionsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Permission != "" {
		query.Set("permission", args.Permission)
	}

	if args.Status != "" {
		query.Set("status", args.Status)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "permissions")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserPersonalAdAccountsHandler handles list_user_personal_ad_accounts with typed arguments
func ListUserPersonalAdAccountsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_personal_ad_accountsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "personal_ad_accounts")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserPhotosHandler handles list_user_photos with typed arguments
func ListUserPhotosHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_photosArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Type != "" {
		query.Set("type", args.Type)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "photos")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateUserPhotoHandler handles create_user_photo with typed arguments
func CreateUserPhotoHandler(ctx context.Context, request mcp.CallToolRequest, args create_user_photoArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.Aid != "" {
		body["aid"] = args.Aid
	}

	body["allow_spherical_photo"] = args.AllowSphericalPhoto

	if args.AltTextCustom != "" {
		body["alt_text_custom"] = args.AltTextCustom
	}

	if args.AndroidKeyHash != "" {
		body["android_key_hash"] = args.AndroidKeyHash
	}

	if args.ApplicationId != "" {
		body["application_id"] = args.ApplicationId
	}

	if args.Attempt > 0 {
		body["attempt"] = args.Attempt
	}

	body["audience_exp"] = args.AudienceExp

	if args.BackdatedTime != "" {
		body["backdated_time"] = args.BackdatedTime
	}

	if args.BackdatedTimeGranularity != "" {
		body["backdated_time_granularity"] = args.BackdatedTimeGranularity
	}

	if args.Caption != "" {
		body["caption"] = args.Caption
	}

	if args.ComposerSessionId != "" {
		body["composer_session_id"] = args.ComposerSessionId
	}

	if args.DirectShareStatus > 0 {
		body["direct_share_status"] = args.DirectShareStatus
	}

	if args.FeedTargeting != nil {
		body["feed_targeting"] = args.FeedTargeting
	}

	if args.FilterType > 0 {
		body["filter_type"] = args.FilterType
	}

	body["full_res_is_coming_later"] = args.FullResIsComingLater

	if args.InitialViewHeadingOverrideDegrees > 0 {
		body["initial_view_heading_override_degrees"] = args.InitialViewHeadingOverrideDegrees
	}

	if args.InitialViewPitchOverrideDegrees > 0 {
		body["initial_view_pitch_override_degrees"] = args.InitialViewPitchOverrideDegrees
	}

	if args.InitialViewVerticalFovOverrideDegrees > 0 {
		body["initial_view_vertical_fov_override_degrees"] = args.InitialViewVerticalFovOverrideDegrees
	}

	if args.IosBundleId != "" {
		body["ios_bundle_id"] = args.IosBundleId
	}

	body["is_explicit_location"] = args.IsExplicitLocation

	body["is_explicit_place"] = args.IsExplicitPlace

	body["manual_privacy"] = args.ManualPrivacy

	if args.Message != "" {
		body["message"] = args.Message
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	body["no_story"] = args.NoStory

	if args.OfflineId > 0 {
		body["offline_id"] = args.OfflineId
	}

	if args.OgActionTypeId != "" {
		body["og_action_type_id"] = args.OgActionTypeId
	}

	if args.OgIconId != "" {
		body["og_icon_id"] = args.OgIconId
	}

	if args.OgObjectId != "" {
		body["og_object_id"] = args.OgObjectId
	}

	if args.OgPhrase != "" {
		body["og_phrase"] = args.OgPhrase
	}

	body["og_set_profile_badge"] = args.OgSetProfileBadge

	if args.OgSuggestionMechanism != "" {
		body["og_suggestion_mechanism"] = args.OgSuggestionMechanism
	}

	if args.Place != nil {
		body["place"] = args.Place
	}

	if args.Privacy != "" {
		body["privacy"] = args.Privacy
	}

	if args.ProfileId > 0 {
		body["profile_id"] = args.ProfileId
	}

	if args.ProvenanceInfo != nil {
		body["provenance_info"] = args.ProvenanceInfo
	}

	if args.ProxiedAppId != "" {
		body["proxied_app_id"] = args.ProxiedAppId
	}

	body["published"] = args.Published

	if args.Qn != "" {
		body["qn"] = args.Qn
	}

	if args.ScheduledPublishTime > 0 {
		body["scheduled_publish_time"] = args.ScheduledPublishTime
	}

	if args.SphericalMetadata != nil {
		body["spherical_metadata"] = args.SphericalMetadata
	}

	if args.SponsorId != "" {
		body["sponsor_id"] = args.SponsorId
	}

	if args.SponsorRelationship > 0 {
		body["sponsor_relationship"] = args.SponsorRelationship
	}

	if len(args.Tags) > 0 {
		body["tags"] = args.Tags
	}

	if args.TargetId > 0 {
		body["target_id"] = args.TargetId
	}

	if args.Targeting != nil {
		body["targeting"] = args.Targeting
	}

	if args.TimeSinceOriginalPost > 0 {
		body["time_since_original_post"] = args.TimeSinceOriginalPost
	}

	if args.Uid > 0 {
		body["uid"] = args.Uid
	}

	if args.UnpublishedContentType != "" {
		body["unpublished_content_type"] = args.UnpublishedContentType
	}

	if args.Url != "" {
		body["url"] = args.Url
	}

	body["user_selected_tags"] = args.UserSelectedTags

	if args.VaultImageId != "" {
		body["vault_image_id"] = args.VaultImageId
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "photos")

	return ExecutePOSTRequest(ctx, url, body)

}

// GetUserPictureHandler handles get_user_picture with typed arguments
func GetUserPictureHandler(ctx context.Context, request mcp.CallToolRequest, args get_user_pictureArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Height > 0 {
		query.Set("height", fmt.Sprintf("%d", args.Height))
	}

	if args.Redirect {
		query.Set("redirect", "true")
	}

	if args.Type != "" {
		query.Set("type", args.Type)
	}

	if args.Width > 0 {
		query.Set("width", fmt.Sprintf("%d", args.Width))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "picture")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserPostsHandler handles list_user_posts with typed arguments
func ListUserPostsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_postsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.IncludeHidden {
		query.Set("include_hidden", "true")
	}

	if args.Q != "" {
		query.Set("q", args.Q)
	}

	if args.ShowExpired {
		query.Set("show_expired", "true")
	}

	if args.Since != "" {
		query.Set("since", args.Since)
	}

	if args.Until != "" {
		query.Set("until", args.Until)
	}

	if args.With != "" {
		query.Set("with", args.With)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "posts")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserRichMediaDocumentsHandler handles list_user_rich_media_documents with typed arguments
func ListUserRichMediaDocumentsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_rich_media_documentsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Query != "" {
		query.Set("query", args.Query)
	}

	// Build URL and execute
	baseURL := buildGraphURL("", "rich_media_documents")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateUserStagingResourceHandler handles create_user_staging_resource with typed arguments
func CreateUserStagingResourceHandler(ctx context.Context, request mcp.CallToolRequest, args create_user_staging_resourceArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.File != nil {
		body["file"] = args.File
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "staging_resources")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListUserVideosHandler handles list_user_videos with typed arguments
func ListUserVideosHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_videosArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Type != "" {
		query.Set("type", args.Type)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "videos")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateUserVideoHandler handles create_user_video with typed arguments
func CreateUserVideoHandler(ctx context.Context, request mcp.CallToolRequest, args create_user_videoArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.ApplicationId != "" {
		body["application_id"] = args.ApplicationId
	}

	if args.AskedFunFactPromptId > 0 {
		body["asked_fun_fact_prompt_id"] = args.AskedFunFactPromptId
	}

	if args.AudioStoryWaveAnimationHandle != "" {
		body["audio_story_wave_animation_handle"] = args.AudioStoryWaveAnimationHandle
	}

	if args.ComposerEntryPicker != "" {
		body["composer_entry_picker"] = args.ComposerEntryPicker
	}

	if args.ComposerEntryPoint != "" {
		body["composer_entry_point"] = args.ComposerEntryPoint
	}

	if args.ComposerEntryTime > 0 {
		body["composer_entry_time"] = args.ComposerEntryTime
	}

	if args.ComposerSessionEventsLog != "" {
		body["composer_session_events_log"] = args.ComposerSessionEventsLog
	}

	if args.ComposerSessionId != "" {
		body["composer_session_id"] = args.ComposerSessionId
	}

	if args.ComposerSourceSurface != "" {
		body["composer_source_surface"] = args.ComposerSourceSurface
	}

	if args.ComposerType != "" {
		body["composer_type"] = args.ComposerType
	}

	if args.ContainerType != "" {
		body["container_type"] = args.ContainerType
	}

	if args.ContentCategory != "" {
		body["content_category"] = args.ContentCategory
	}

	if args.CreativeTools != "" {
		body["creative_tools"] = args.CreativeTools
	}

	if args.Description != "" {
		body["description"] = args.Description
	}

	if args.DirectShareStatus > 0 {
		body["direct_share_status"] = args.DirectShareStatus
	}

	body["embeddable"] = args.Embeddable

	if args.EndOffset > 0 {
		body["end_offset"] = args.EndOffset
	}

	if args.FbuploaderVideoFileChunk != "" {
		body["fbuploader_video_file_chunk"] = args.FbuploaderVideoFileChunk
	}

	if args.FileSize > 0 {
		body["file_size"] = args.FileSize
	}

	if args.FileUrl != "" {
		body["file_url"] = args.FileUrl
	}

	body["fisheye_video_cropped"] = args.FisheyeVideoCropped

	if args.Formatting != "" {
		body["formatting"] = args.Formatting
	}

	if args.Fov > 0 {
		body["fov"] = args.Fov
	}

	if args.FrontZRotation != 0 {
		body["front_z_rotation"] = args.FrontZRotation
	}

	if args.FunFactPromptId != "" {
		body["fun_fact_prompt_id"] = args.FunFactPromptId
	}

	if args.FunFactToasteeId > 0 {
		body["fun_fact_toastee_id"] = args.FunFactToasteeId
	}

	if args.Guide != nil {
		body["guide"] = args.Guide
	}

	body["guide_enabled"] = args.GuideEnabled

	if args.InitialHeading > 0 {
		body["initial_heading"] = args.InitialHeading
	}

	if args.InitialPitch > 0 {
		body["initial_pitch"] = args.InitialPitch
	}

	if args.InstantGameEntryPointData != "" {
		body["instant_game_entry_point_data"] = args.InstantGameEntryPointData
	}

	body["is_boost_intended"] = args.IsBoostIntended

	body["is_explicit_share"] = args.IsExplicitShare

	body["is_group_linking_post"] = args.IsGroupLinkingPost

	body["is_partnership_ad"] = args.IsPartnershipAd

	body["is_voice_clip"] = args.IsVoiceClip

	if args.LocationSourceId != "" {
		body["location_source_id"] = args.LocationSourceId
	}

	body["manual_privacy"] = args.ManualPrivacy

	body["no_story"] = args.NoStory

	if args.OgActionTypeId != "" {
		body["og_action_type_id"] = args.OgActionTypeId
	}

	if args.OgIconId != "" {
		body["og_icon_id"] = args.OgIconId
	}

	if args.OgObjectId != "" {
		body["og_object_id"] = args.OgObjectId
	}

	if args.OgPhrase != "" {
		body["og_phrase"] = args.OgPhrase
	}

	if args.OgSuggestionMechanism != "" {
		body["og_suggestion_mechanism"] = args.OgSuggestionMechanism
	}

	if args.OriginalFov > 0 {
		body["original_fov"] = args.OriginalFov
	}

	if args.OriginalProjectionType != "" {
		body["original_projection_type"] = args.OriginalProjectionType
	}

	if args.PartnershipAdAdCode != "" {
		body["partnership_ad_ad_code"] = args.PartnershipAdAdCode
	}

	if args.Privacy != "" {
		body["privacy"] = args.Privacy
	}

	if args.PublishEventId > 0 {
		body["publish_event_id"] = args.PublishEventId
	}

	if args.ReferencedStickerId != "" {
		body["referenced_sticker_id"] = args.ReferencedStickerId
	}

	if args.ReplaceVideoId != "" {
		body["replace_video_id"] = args.ReplaceVideoId
	}

	if args.SlideshowSpec != nil {
		body["slideshow_spec"] = args.SlideshowSpec
	}

	if args.Source != "" {
		body["source"] = args.Source
	}

	if args.SourceInstagramMediaId != "" {
		body["source_instagram_media_id"] = args.SourceInstagramMediaId
	}

	body["spherical"] = args.Spherical

	if args.SponsorId != "" {
		body["sponsor_id"] = args.SponsorId
	}

	if args.StartOffset > 0 {
		body["start_offset"] = args.StartOffset
	}

	if args.SwapMode != "" {
		body["swap_mode"] = args.SwapMode
	}

	if args.TextFormatMetadata != "" {
		body["text_format_metadata"] = args.TextFormatMetadata
	}

	if args.Thumb != nil {
		body["thumb"] = args.Thumb
	}

	if args.TimeSinceOriginalPost > 0 {
		body["time_since_original_post"] = args.TimeSinceOriginalPost
	}

	if args.Title != "" {
		body["title"] = args.Title
	}

	if args.TranscodeSettingProperties != "" {
		body["transcode_setting_properties"] = args.TranscodeSettingProperties
	}

	if args.UnpublishedContentType != "" {
		body["unpublished_content_type"] = args.UnpublishedContentType
	}

	if args.UploadPhase != "" {
		body["upload_phase"] = args.UploadPhase
	}

	if args.UploadSessionId != "" {
		body["upload_session_id"] = args.UploadSessionId
	}

	if args.UploadSettingProperties != "" {
		body["upload_setting_properties"] = args.UploadSettingProperties
	}

	if args.VideoFileChunk != "" {
		body["video_file_chunk"] = args.VideoFileChunk
	}

	if args.VideoIdOriginal != "" {
		body["video_id_original"] = args.VideoIdOriginal
	}

	if args.VideoStartTimeMs > 0 {
		body["video_start_time_ms"] = args.VideoStartTimeMs
	}

	if args.WaterfallId != "" {
		body["waterfall_id"] = args.WaterfallId
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "videos")

	return ExecutePOSTRequest(ctx, url, body)

}

// DeleteUserHandler handles delete_user with typed arguments
func DeleteUserHandler(ctx context.Context, request mcp.CallToolRequest, args delete_userArgs) (*mcp.CallToolResult, error) {

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	url := buildGraphURL(args.ID, "")
	return ExecuteDELETERequest(ctx, url)

}

// GetUserHandler handles get_user with typed arguments
func GetUserHandler(ctx context.Context, request mcp.CallToolRequest, args get_userArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UpdateUserHandler handles update_user with typed arguments
func UpdateUserHandler(ctx context.Context, request mcp.CallToolRequest, args update_userArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.EmojiColorPref > 0 {
		body["emoji_color_pref"] = args.EmojiColorPref
	}

	if args.Firstname != "" {
		body["firstname"] = args.Firstname
	}

	if args.Lastname != "" {
		body["lastname"] = args.Lastname
	}

	if args.LocalNewsMegaphoneDismissStatus != "" {
		body["local_news_megaphone_dismiss_status"] = args.LocalNewsMegaphoneDismissStatus
	}

	if args.LocalNewsSubscriptionStatus != "" {
		body["local_news_subscription_status"] = args.LocalNewsSubscriptionStatus
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.Password != "" {
		body["password"] = args.Password
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "")

	return ExecutePOSTRequest(ctx, url, body)

}

// generateSchemaForType is implemented in tools_common.go to avoid redeclaration

// RegisterUserTools registers all User tools with the MCP server
func RegisterUserTools(s *server.MCPServer) error {

	// Register remove_access_tokens_from_user using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("remove_access_tokens_from_user", "Remove access_tokens from this User", remove_access_tokens_from_userSchema),
		mcp.NewTypedToolHandler(RemoveAccessTokensFromUserHandler),
	)

	// Register create_user_access_token using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_user_access_token", "Create or update access_tokens for this User Returns User. Required: business_app", create_user_access_tokenSchema),
		mcp.NewTypedToolHandler(CreateUserAccessTokenHandler),
	)

	// Register list_user_accounts using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_accounts", "List accounts for this User Returns Page.", list_user_accountsSchema),
		mcp.NewTypedToolHandler(ListUserAccountsHandler),
	)

	// Register create_user_account using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_user_account", "Create or update accounts for this User Required: name", create_user_accountSchema),
		mcp.NewTypedToolHandler(CreateUserAccountHandler),
	)

	// Register list_user_ad_studies using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_ad_studies", "List ad_studies for this User Returns AdStudy.", list_user_ad_studiesSchema),
		mcp.NewTypedToolHandler(ListUserAdStudiesHandler),
	)

	// Register create_user_ad_studie using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_user_ad_studie", "Associate ad_studies with this User Returns AdStudy.", create_user_ad_studieSchema),
		mcp.NewTypedToolHandler(CreateUserAdStudieHandler),
	)

	// Register list_user_adaccounts using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_adaccounts", "List adaccounts for this User Returns AdAccount.", list_user_adaccountsSchema),
		mcp.NewTypedToolHandler(ListUserAdaccountsHandler),
	)

	// Register list_user_albums using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_albums", "List albums for this User Returns Album.", list_user_albumsSchema),
		mcp.NewTypedToolHandler(ListUserAlbumsHandler),
	)

	// Register create_user_application using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_user_application", "Create or update applications for this User Returns User. Required: business_app", create_user_applicationSchema),
		mcp.NewTypedToolHandler(CreateUserApplicationHandler),
	)

	// Register list_user_apprequestformerrecipients using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_apprequestformerrecipients", "List apprequestformerrecipients for this User Returns AppRequestFormerRecipient.", list_user_apprequestformerrecipientsSchema),
		mcp.NewTypedToolHandler(ListUserApprequestformerrecipientsHandler),
	)

	// Register list_user_apprequests using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_apprequests", "List apprequests for this User Returns AppRequest.", list_user_apprequestsSchema),
		mcp.NewTypedToolHandler(ListUserApprequestsHandler),
	)

	// Register list_user_assigned_ad_accounts using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_assigned_ad_accounts", "List assigned_ad_accounts for this User Returns AdAccount.", list_user_assigned_ad_accountsSchema),
		mcp.NewTypedToolHandler(ListUserAssignedAdAccountsHandler),
	)

	// Register list_user_assigned_applications using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_assigned_applications", "List assigned_applications for this User Returns Application.", list_user_assigned_applicationsSchema),
		mcp.NewTypedToolHandler(ListUserAssignedApplicationsHandler),
	)

	// Register list_user_assigned_business_asset_groups using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_assigned_business_asset_groups", "List assigned_business_asset_groups for this User Returns BusinessAssetGroup.", list_user_assigned_business_asset_groupsSchema),
		mcp.NewTypedToolHandler(ListUserAssignedBusinessAssetGroupsHandler),
	)

	// Register list_user_assigned_pages using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_assigned_pages", "List assigned_pages for this User Returns Page.", list_user_assigned_pagesSchema),
		mcp.NewTypedToolHandler(ListUserAssignedPagesHandler),
	)

	// Register list_user_assigned_product_catalogs using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_assigned_product_catalogs", "List assigned_product_catalogs for this User Returns ProductCatalog.", list_user_assigned_product_catalogsSchema),
		mcp.NewTypedToolHandler(ListUserAssignedProductCatalogsHandler),
	)

	// Register list_user_avatars using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_avatars", "List avatars for this User Returns Avatar.", list_user_avatarsSchema),
		mcp.NewTypedToolHandler(ListUserAvatarsHandler),
	)

	// Register list_user_business_users using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_business_users", "List business_users for this User Returns BusinessUser.", list_user_business_usersSchema),
		mcp.NewTypedToolHandler(ListUserBusinessUsersHandler),
	)

	// Register remove_businesses_from_user using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("remove_businesses_from_user", "Remove businesses from this User", remove_businesses_from_userSchema),
		mcp.NewTypedToolHandler(RemoveBusinessesFromUserHandler),
	)

	// Register list_user_businesses using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_businesses", "List businesses for this User Returns Business.", list_user_businessesSchema),
		mcp.NewTypedToolHandler(ListUserBusinessesHandler),
	)

	// Register create_user_businesse using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_user_businesse", "Create or update businesses for this User Returns Business. Required: name, vertical (enum)", create_user_businesseSchema),
		mcp.NewTypedToolHandler(CreateUserBusinesseHandler),
	)

	// Register list_user_conversations using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_conversations", "List conversations for this User Returns UnifiedThread.", list_user_conversationsSchema),
		mcp.NewTypedToolHandler(ListUserConversationsHandler),
	)

	// Register list_user_custom_labels using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_custom_labels", "List custom_labels for this User Returns PageUserMessageThreadLabel.", list_user_custom_labelsSchema),
		mcp.NewTypedToolHandler(ListUserCustomLabelsHandler),
	)

	// Register list_user_events using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_events", "List events for this User Returns Event.", list_user_eventsSchema),
		mcp.NewTypedToolHandler(ListUserEventsHandler),
	)

	// Register get_user_feed using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_user_feed", "Get feed data for this User Returns Post.", get_user_feedSchema),
		mcp.NewTypedToolHandler(GetUserFeedHandler),
	)

	// Register update_user_feed using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("update_user_feed", "Create or update feed for this User Returns Post.", update_user_feedSchema),
		mcp.NewTypedToolHandler(UpdateUserFeedHandler),
	)

	// Register list_user_friends using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_friends", "List friends for this User Returns User.", list_user_friendsSchema),
		mcp.NewTypedToolHandler(ListUserFriendsHandler),
	)

	// Register list_user_fundraisers using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_fundraisers", "List fundraisers for this User Returns FundraiserPersonToCharity.", list_user_fundraisersSchema),
		mcp.NewTypedToolHandler(ListUserFundraisersHandler),
	)

	// Register create_user_fundraiser using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_user_fundraiser", "Create or update fundraisers for this User Returns FundraiserPersonToCharity. Required: currency, description, end_time, external_id, fundraiser_type (enum), goal_amount, name", create_user_fundraiserSchema),
		mcp.NewTypedToolHandler(CreateUserFundraiserHandler),
	)

	// Register list_user_groups using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_groups", "List groups for this User Returns Group.", list_user_groupsSchema),
		mcp.NewTypedToolHandler(ListUserGroupsHandler),
	)

	// Register list_user_ids_for_apps using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_ids_for_apps", "List ids_for_apps for this User Returns UserIDForApp.", list_user_ids_for_appsSchema),
		mcp.NewTypedToolHandler(ListUserIdsForAppsHandler),
	)

	// Register list_user_ids_for_business using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_ids_for_business", "List ids_for_business for this User Returns UserIDForApp.", list_user_ids_for_businessSchema),
		mcp.NewTypedToolHandler(ListUserIdsForBusinessHandler),
	)

	// Register list_user_ids_for_pages using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_ids_for_pages", "List ids_for_pages for this User Returns UserIDForPage.", list_user_ids_for_pagesSchema),
		mcp.NewTypedToolHandler(ListUserIdsForPagesHandler),
	)

	// Register list_user_likes using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_likes", "List likes for this User Returns Page.", list_user_likesSchema),
		mcp.NewTypedToolHandler(ListUserLikesHandler),
	)

	// Register list_user_live_videos using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_live_videos", "List live_videos for this User Returns LiveVideo.", list_user_live_videosSchema),
		mcp.NewTypedToolHandler(ListUserLiveVideosHandler),
	)

	// Register create_user_live_video using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_user_live_video", "Create or update live_videos for this User Returns LiveVideo.", create_user_live_videoSchema),
		mcp.NewTypedToolHandler(CreateUserLiveVideoHandler),
	)

	// Register create_user_messenger_desktop_performance_trace using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_user_messenger_desktop_performance_trace", "Create or update messenger_desktop_performance_traces for this User Returns User.", create_user_messenger_desktop_performance_traceSchema),
		mcp.NewTypedToolHandler(CreateUserMessengerDesktopPerformanceTraceHandler),
	)

	// Register update_user_messenger_kids_accounts_unread_badge using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("update_user_messenger_kids_accounts_unread_badge", "Create or update messenger_kids_accounts_unread_badge for this User Returns User. Required: proxied_app_id", update_user_messenger_kids_accounts_unread_badgeSchema),
		mcp.NewTypedToolHandler(UpdateUserMessengerKidsAccountsUnreadBadgeHandler),
	)

	// Register get_user_music using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_user_music", "Get music data for this User Returns Page.", get_user_musicSchema),
		mcp.NewTypedToolHandler(GetUserMusicHandler),
	)

	// Register create_user_notification using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_user_notification", "Create or update notifications for this User Returns User.", create_user_notificationSchema),
		mcp.NewTypedToolHandler(CreateUserNotificationHandler),
	)

	// Register list_user_payment_transactions using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_payment_transactions", "List payment_transactions for this User Returns PaymentEnginePayment.", list_user_payment_transactionsSchema),
		mcp.NewTypedToolHandler(ListUserPaymentTransactionsHandler),
	)

	// Register remove_permissions_from_user using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("remove_permissions_from_user", "Remove permissions from this User", remove_permissions_from_userSchema),
		mcp.NewTypedToolHandler(RemovePermissionsFromUserHandler),
	)

	// Register list_user_permissions using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_permissions", "List permissions for this User Returns Permission.", list_user_permissionsSchema),
		mcp.NewTypedToolHandler(ListUserPermissionsHandler),
	)

	// Register list_user_personal_ad_accounts using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_personal_ad_accounts", "List personal_ad_accounts for this User Returns AdAccount.", list_user_personal_ad_accountsSchema),
		mcp.NewTypedToolHandler(ListUserPersonalAdAccountsHandler),
	)

	// Register list_user_photos using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_photos", "List photos for this User Returns Photo.", list_user_photosSchema),
		mcp.NewTypedToolHandler(ListUserPhotosHandler),
	)

	// Register create_user_photo using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_user_photo", "Create or update photos for this User Returns Photo.", create_user_photoSchema),
		mcp.NewTypedToolHandler(CreateUserPhotoHandler),
	)

	// Register get_user_picture using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_user_picture", "Get picture data for this User Returns ProfilePictureSource.", get_user_pictureSchema),
		mcp.NewTypedToolHandler(GetUserPictureHandler),
	)

	// Register list_user_posts using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_posts", "List posts for this User Returns Post.", list_user_postsSchema),
		mcp.NewTypedToolHandler(ListUserPostsHandler),
	)

	// Register list_user_rich_media_documents using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_rich_media_documents", "List rich_media_documents for this User Returns Canvas.", list_user_rich_media_documentsSchema),
		mcp.NewTypedToolHandler(ListUserRichMediaDocumentsHandler),
	)

	// Register create_user_staging_resource using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_user_staging_resource", "Create or update staging_resources for this User Returns User.", create_user_staging_resourceSchema),
		mcp.NewTypedToolHandler(CreateUserStagingResourceHandler),
	)

	// Register list_user_videos using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_user_videos", "List videos for this User Returns AdVideo.", list_user_videosSchema),
		mcp.NewTypedToolHandler(ListUserVideosHandler),
	)

	// Register create_user_video using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_user_video", "Create or update videos for this User Returns AdVideo.", create_user_videoSchema),
		mcp.NewTypedToolHandler(CreateUserVideoHandler),
	)

	// Register delete_user using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("delete_user", "Delete a User", delete_userSchema),
		mcp.NewTypedToolHandler(DeleteUserHandler),
	)

	// Register get_user using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_user", "Get details of a specific User Returns User.", get_userSchema),
		mcp.NewTypedToolHandler(GetUserHandler),
	)

	// Register update_user using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("update_user", "Update a User Returns User.", update_userSchema),
		mcp.NewTypedToolHandler(UpdateUserHandler),
	)

	return nil
}

// User tools: 55 endpoints
