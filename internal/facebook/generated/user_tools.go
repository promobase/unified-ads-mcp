// Code generated by codegen. DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// remove_access_tokens_from_userArgs defines the typed arguments for remove_access_tokens_from_user
type remove_access_tokens_from_userArgs struct {
	ID string `json:"id"`
}

// create_user_access_tokenArgs defines the typed arguments for create_user_access_token
type create_user_access_tokenArgs struct {
	ID                      string   `json:"id"`
	BusinessApp             string   `json:"business_app"`
	PageId                  string   `json:"page_id,omitempty"`
	Scope                   []string `json:"scope,omitempty"`
	SetTokenExpiresIn60Days bool     `json:"set_token_expires_in_60_days,omitempty"`
}

// list_user_accountsArgs defines the typed arguments for list_user_accounts
type list_user_accountsArgs struct {
	ID           string   `json:"id"`
	Fields       []string `json:"fields,omitempty"`
	Limit        int      `json:"limit,omitempty"`
	After        string   `json:"after,omitempty"`
	Before       string   `json:"before,omitempty"`
	AdId         string   `json:"ad_id,omitempty"`
	IsPlace      bool     `json:"is_place,omitempty"`
	IsPromotable bool     `json:"is_promotable,omitempty"`
}

// create_user_accountArgs defines the typed arguments for create_user_account
type create_user_accountArgs struct {
	ID                       string                 `json:"id"`
	About                    string                 `json:"about,omitempty"`
	Address                  string                 `json:"address,omitempty"`
	Category                 int                    `json:"category,omitempty"`
	CategoryEnum             string                 `json:"category_enum,omitempty"`
	CategoryList             []string               `json:"category_list,omitempty"`
	CityId                   string                 `json:"city_id,omitempty"`
	Coordinates              map[string]interface{} `json:"coordinates,omitempty"`
	CoverPhoto               map[string]interface{} `json:"cover_photo,omitempty"`
	Description              string                 `json:"description,omitempty"`
	IgnoreCoordinateWarnings bool                   `json:"ignore_coordinate_warnings,omitempty"`
	Location                 map[string]interface{} `json:"location,omitempty"`
	Name                     string                 `json:"name"`
	Phone                    string                 `json:"phone,omitempty"`
	Picture                  string                 `json:"picture,omitempty"`
	Website                  string                 `json:"website,omitempty"`
	Zip                      string                 `json:"zip,omitempty"`
}

// list_user_ad_studiesArgs defines the typed arguments for list_user_ad_studies
type list_user_ad_studiesArgs struct {
	ID     string   `json:"id"`
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
}

// create_user_ad_studieArgs defines the typed arguments for create_user_ad_studie
type create_user_ad_studieArgs struct {
	ID                 string                   `json:"id"`
	Cells              []map[string]interface{} `json:"cells,omitempty"`
	ClientBusiness     string                   `json:"client_business,omitempty"`
	ConfidenceLevel    float64                  `json:"confidence_level,omitempty"`
	CooldownStartTime  int                      `json:"cooldown_start_time,omitempty"`
	Description        string                   `json:"description,omitempty"`
	EndTime            int                      `json:"end_time,omitempty"`
	Name               string                   `json:"name,omitempty"`
	Objectives         []map[string]interface{} `json:"objectives,omitempty"`
	ObservationEndTime int                      `json:"observation_end_time,omitempty"`
	StartTime          int                      `json:"start_time,omitempty"`
	Type               string                   `json:"type,omitempty"`
	Viewers            []int                    `json:"viewers,omitempty"`
}

// list_user_adaccountsArgs defines the typed arguments for list_user_adaccounts
type list_user_adaccountsArgs struct {
	ID     string   `json:"id"`
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
}

// list_user_albumsArgs defines the typed arguments for list_user_albums
type list_user_albumsArgs struct {
	ID     string   `json:"id"`
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
}

// create_user_applicationArgs defines the typed arguments for create_user_application
type create_user_applicationArgs struct {
	ID          string `json:"id"`
	BusinessApp int    `json:"business_app"`
}

// list_user_apprequestformerrecipientsArgs defines the typed arguments for list_user_apprequestformerrecipients
type list_user_apprequestformerrecipientsArgs struct {
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
}

// list_user_apprequestsArgs defines the typed arguments for list_user_apprequests
type list_user_apprequestsArgs struct {
	ID     string   `json:"id"`
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
}

// list_user_assigned_ad_accountsArgs defines the typed arguments for list_user_assigned_ad_accounts
type list_user_assigned_ad_accountsArgs struct {
	ID     string   `json:"id"`
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
}

// list_user_assigned_applicationsArgs defines the typed arguments for list_user_assigned_applications
type list_user_assigned_applicationsArgs struct {
	ID     string   `json:"id"`
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
}

// list_user_assigned_business_asset_groupsArgs defines the typed arguments for list_user_assigned_business_asset_groups
type list_user_assigned_business_asset_groupsArgs struct {
	ID               string   `json:"id"`
	Fields           []string `json:"fields,omitempty"`
	Limit            int      `json:"limit,omitempty"`
	After            string   `json:"after,omitempty"`
	Before           string   `json:"before,omitempty"`
	ContainedAssetId string   `json:"contained_asset_id,omitempty"`
}

// list_user_assigned_pagesArgs defines the typed arguments for list_user_assigned_pages
type list_user_assigned_pagesArgs struct {
	ID     string        `json:"id"`
	Fields []string      `json:"fields,omitempty"`
	Limit  int           `json:"limit,omitempty"`
	After  string        `json:"after,omitempty"`
	Before string        `json:"before,omitempty"`
	Pages  []interface{} `json:"pages,omitempty"`
}

// list_user_assigned_product_catalogsArgs defines the typed arguments for list_user_assigned_product_catalogs
type list_user_assigned_product_catalogsArgs struct {
	ID     string   `json:"id"`
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
}

// list_user_avatarsArgs defines the typed arguments for list_user_avatars
type list_user_avatarsArgs struct {
	ID     string   `json:"id"`
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
}

// list_user_business_usersArgs defines the typed arguments for list_user_business_users
type list_user_business_usersArgs struct {
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
}

// remove_businesses_from_userArgs defines the typed arguments for remove_businesses_from_user
type remove_businesses_from_userArgs struct {
	ID       string `json:"id"`
	Business string `json:"business,omitempty"`
}

// list_user_businessesArgs defines the typed arguments for list_user_businesses
type list_user_businessesArgs struct {
	ID     string   `json:"id"`
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
}

// create_user_businesseArgs defines the typed arguments for create_user_businesse
type create_user_businesseArgs struct {
	ID                      string `json:"id"`
	ChildBusinessExternalId string `json:"child_business_external_id,omitempty"`
	Email                   string `json:"email,omitempty"`
	Name                    string `json:"name"`
	PrimaryPage             string `json:"primary_page,omitempty"`
	SalesRepEmail           string `json:"sales_rep_email,omitempty"`
	SurveyBusinessType      string `json:"survey_business_type,omitempty"`
	SurveyNumAssets         int    `json:"survey_num_assets,omitempty"`
	SurveyNumPeople         int    `json:"survey_num_people,omitempty"`
	TimezoneId              string `json:"timezone_id,omitempty"`
	Vertical                string `json:"vertical"`
}

// list_user_conversationsArgs defines the typed arguments for list_user_conversations
type list_user_conversationsArgs struct {
	ID       string   `json:"id"`
	Fields   []string `json:"fields,omitempty"`
	Limit    int      `json:"limit,omitempty"`
	After    string   `json:"after,omitempty"`
	Before   string   `json:"before,omitempty"`
	Folder   string   `json:"folder,omitempty"`
	Platform string   `json:"platform,omitempty"`
	Tags     []string `json:"tags,omitempty"`
	UserId   string   `json:"user_id,omitempty"`
}

// list_user_custom_labelsArgs defines the typed arguments for list_user_custom_labels
type list_user_custom_labelsArgs struct {
	ID     string   `json:"id"`
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
}

// list_user_eventsArgs defines the typed arguments for list_user_events
type list_user_eventsArgs struct {
	ID              string   `json:"id"`
	Fields          []string `json:"fields,omitempty"`
	Limit           int      `json:"limit,omitempty"`
	After           string   `json:"after,omitempty"`
	Before          string   `json:"before,omitempty"`
	IncludeCanceled bool     `json:"include_canceled,omitempty"`
	Type            string   `json:"type,omitempty"`
}

// get_user_feedArgs defines the typed arguments for get_user_feed
type get_user_feedArgs struct {
	ID            string   `json:"id"`
	Fields        []string `json:"fields,omitempty"`
	Limit         int      `json:"limit,omitempty"`
	After         string   `json:"after,omitempty"`
	Before        string   `json:"before,omitempty"`
	IncludeHidden bool     `json:"include_hidden,omitempty"`
	Q             string   `json:"q,omitempty"`
	ShowExpired   bool     `json:"show_expired,omitempty"`
	Since         string   `json:"since,omitempty"`
	Until         string   `json:"until,omitempty"`
	With          string   `json:"with,omitempty"`
}

// update_user_feedArgs defines the typed arguments for update_user_feed
type update_user_feedArgs struct {
	ID                        string                   `json:"id"`
	Actions                   map[string]interface{}   `json:"actions,omitempty"`
	AlbumId                   string                   `json:"album_id,omitempty"`
	AndroidKeyHash            string                   `json:"android_key_hash,omitempty"`
	ApplicationId             string                   `json:"application_id,omitempty"`
	AskedFunFactPromptId      int                      `json:"asked_fun_fact_prompt_id,omitempty"`
	Asset3dId                 string                   `json:"asset3d_id,omitempty"`
	AssociatedId              string                   `json:"associated_id,omitempty"`
	AttachPlaceSuggestion     bool                     `json:"attach_place_suggestion,omitempty"`
	AttachedMedia             []map[string]interface{} `json:"attached_media,omitempty"`
	AudienceExp               bool                     `json:"audience_exp,omitempty"`
	BackdatedTime             string                   `json:"backdated_time,omitempty"`
	BackdatedTimeGranularity  string                   `json:"backdated_time_granularity,omitempty"`
	BreakingNews              bool                     `json:"breaking_news,omitempty"`
	BreakingNewsExpiration    int                      `json:"breaking_news_expiration,omitempty"`
	CallToAction              map[string]interface{}   `json:"call_to_action,omitempty"`
	Caption                   string                   `json:"caption,omitempty"`
	ChildAttachments          []map[string]interface{} `json:"child_attachments,omitempty"`
	ClientMutationId          string                   `json:"client_mutation_id,omitempty"`
	ComposerEntryPicker       string                   `json:"composer_entry_picker,omitempty"`
	ComposerEntryPoint        string                   `json:"composer_entry_point,omitempty"`
	ComposerEntryTime         int                      `json:"composer_entry_time,omitempty"`
	ComposerSessionEventsLog  string                   `json:"composer_session_events_log,omitempty"`
	ComposerSessionId         string                   `json:"composer_session_id,omitempty"`
	ComposerSourceSurface     string                   `json:"composer_source_surface,omitempty"`
	ComposerType              string                   `json:"composer_type,omitempty"`
	ConnectionClass           string                   `json:"connection_class,omitempty"`
	ContentAttachment         string                   `json:"content_attachment,omitempty"`
	Coordinates               map[string]interface{}   `json:"coordinates,omitempty"`
	CtaLink                   string                   `json:"cta_link,omitempty"`
	CtaType                   string                   `json:"cta_type,omitempty"`
	Description               string                   `json:"description,omitempty"`
	DirectShareStatus         int                      `json:"direct_share_status,omitempty"`
	ExpandedHeight            int                      `json:"expanded_height,omitempty"`
	ExpandedWidth             int                      `json:"expanded_width,omitempty"`
	FeedTargeting             map[string]interface{}   `json:"feed_targeting,omitempty"`
	Formatting                string                   `json:"formatting,omitempty"`
	FunFactPromptId           string                   `json:"fun_fact_prompt_id,omitempty"`
	FunFactToasteeId          int                      `json:"fun_fact_toastee_id,omitempty"`
	Height                    int                      `json:"height,omitempty"`
	HomeCheckinCityId         map[string]interface{}   `json:"home_checkin_city_id,omitempty"`
	ImageCrops                map[string]interface{}   `json:"image_crops,omitempty"`
	ImplicitWithTags          []int                    `json:"implicit_with_tags,omitempty"`
	InstantGameEntryPointData string                   `json:"instant_game_entry_point_data,omitempty"`
	IosBundleId               string                   `json:"ios_bundle_id,omitempty"`
	IsBackoutDraft            bool                     `json:"is_backout_draft,omitempty"`
	IsBoostIntended           bool                     `json:"is_boost_intended,omitempty"`
	IsExplicitLocation        bool                     `json:"is_explicit_location,omitempty"`
	IsExplicitShare           bool                     `json:"is_explicit_share,omitempty"`
	IsGroupLinkingPost        bool                     `json:"is_group_linking_post,omitempty"`
	IsPhotoContainer          bool                     `json:"is_photo_container,omitempty"`
	Link                      string                   `json:"link,omitempty"`
	LocationSourceId          string                   `json:"location_source_id,omitempty"`
	ManualPrivacy             bool                     `json:"manual_privacy,omitempty"`
	Message                   string                   `json:"message,omitempty"`
	MultiShareEndCard         bool                     `json:"multi_share_end_card,omitempty"`
	MultiShareOptimized       bool                     `json:"multi_share_optimized,omitempty"`
	Name                      string                   `json:"name,omitempty"`
	NectarModule              string                   `json:"nectar_module,omitempty"`
	ObjectAttachment          string                   `json:"object_attachment,omitempty"`
	OgActionTypeId            string                   `json:"og_action_type_id,omitempty"`
	OgHideObjectAttachment    bool                     `json:"og_hide_object_attachment,omitempty"`
	OgIconId                  string                   `json:"og_icon_id,omitempty"`
	OgObjectId                string                   `json:"og_object_id,omitempty"`
	OgPhrase                  string                   `json:"og_phrase,omitempty"`
	OgSetProfileBadge         bool                     `json:"og_set_profile_badge,omitempty"`
	OgSuggestionMechanism     string                   `json:"og_suggestion_mechanism,omitempty"`
	PageRecommendation        string                   `json:"page_recommendation,omitempty"`
	Picture                   string                   `json:"picture,omitempty"`
	Place                     map[string]interface{}   `json:"place,omitempty"`
	PlaceAttachmentSetting    string                   `json:"place_attachment_setting,omitempty"`
	PlaceList                 string                   `json:"place_list,omitempty"`
	PlaceListData             interface{}              `json:"place_list_data,omitempty"`
	PostSurfacesBlacklist     []string                 `json:"post_surfaces_blacklist,omitempty"`
	PostingToRedspace         string                   `json:"posting_to_redspace,omitempty"`
	Privacy                   string                   `json:"privacy,omitempty"`
	PromptId                  string                   `json:"prompt_id,omitempty"`
	PromptTrackingString      string                   `json:"prompt_tracking_string,omitempty"`
	Properties                map[string]interface{}   `json:"properties,omitempty"`
	ProxiedAppId              string                   `json:"proxied_app_id,omitempty"`
	PublishEventId            int                      `json:"publish_event_id,omitempty"`
	Published                 bool                     `json:"published,omitempty"`
	Quote                     string                   `json:"quote,omitempty"`
	Ref                       []string                 `json:"ref,omitempty"`
	ReferenceableImageIds     []string                 `json:"referenceable_image_ids,omitempty"`
	ReferralId                string                   `json:"referral_id,omitempty"`
	ScheduledPublishTime      string                   `json:"scheduled_publish_time,omitempty"`
	Source                    string                   `json:"source,omitempty"`
	SponsorId                 string                   `json:"sponsor_id,omitempty"`
	SponsorRelationship       int                      `json:"sponsor_relationship,omitempty"`
	SuggestedPlaceId          map[string]interface{}   `json:"suggested_place_id,omitempty"`
	Tags                      []int                    `json:"tags,omitempty"`
	TargetSurface             string                   `json:"target_surface,omitempty"`
	Targeting                 map[string]interface{}   `json:"targeting,omitempty"`
	TextFormatMetadata        string                   `json:"text_format_metadata,omitempty"`
	TextFormatPresetId        string                   `json:"text_format_preset_id,omitempty"`
	TextOnlyPlace             string                   `json:"text_only_place,omitempty"`
	Thumbnail                 interface{}              `json:"thumbnail,omitempty"`
	TimeSinceOriginalPost     int                      `json:"time_since_original_post,omitempty"`
	Title                     string                   `json:"title,omitempty"`
	TrackingInfo              string                   `json:"tracking_info,omitempty"`
	UnpublishedContentType    string                   `json:"unpublished_content_type,omitempty"`
	UserSelectedTags          bool                     `json:"user_selected_tags,omitempty"`
	VideoStartTimeMs          int                      `json:"video_start_time_ms,omitempty"`
	ViewerCoordinates         map[string]interface{}   `json:"viewer_coordinates,omitempty"`
	Width                     int                      `json:"width,omitempty"`
}

// list_user_friendsArgs defines the typed arguments for list_user_friends
type list_user_friendsArgs struct {
	ID     string   `json:"id"`
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
	Uid    int      `json:"uid,omitempty"`
}

// list_user_fundraisersArgs defines the typed arguments for list_user_fundraisers
type list_user_fundraisersArgs struct {
	ID     string   `json:"id"`
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
}

// create_user_fundraiserArgs defines the typed arguments for create_user_fundraiser
type create_user_fundraiserArgs struct {
	ID                     string      `json:"id"`
	CharityId              string      `json:"charity_id,omitempty"`
	CoverPhoto             interface{} `json:"cover_photo,omitempty"`
	Currency               string      `json:"currency"`
	Description            string      `json:"description"`
	EndTime                string      `json:"end_time"`
	ExternalEventName      string      `json:"external_event_name,omitempty"`
	ExternalEventStartTime string      `json:"external_event_start_time,omitempty"`
	ExternalEventUri       string      `json:"external_event_uri,omitempty"`
	ExternalFundraiserUri  string      `json:"external_fundraiser_uri,omitempty"`
	ExternalId             string      `json:"external_id"`
	FundraiserType         string      `json:"fundraiser_type"`
	GoalAmount             int         `json:"goal_amount"`
	Name                   string      `json:"name"`
	PageId                 string      `json:"page_id,omitempty"`
}

// list_user_groupsArgs defines the typed arguments for list_user_groups
type list_user_groupsArgs struct {
	ID        string   `json:"id"`
	Fields    []string `json:"fields,omitempty"`
	Limit     int      `json:"limit,omitempty"`
	After     string   `json:"after,omitempty"`
	Before    string   `json:"before,omitempty"`
	AdminOnly bool     `json:"admin_only,omitempty"`
	Parent    string   `json:"parent,omitempty"`
}

// list_user_ids_for_appsArgs defines the typed arguments for list_user_ids_for_apps
type list_user_ids_for_appsArgs struct {
	ID     string   `json:"id"`
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
	App    int      `json:"app,omitempty"`
}

// list_user_ids_for_businessArgs defines the typed arguments for list_user_ids_for_business
type list_user_ids_for_businessArgs struct {
	ID     string   `json:"id"`
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
	App    int      `json:"app,omitempty"`
}

// list_user_ids_for_pagesArgs defines the typed arguments for list_user_ids_for_pages
type list_user_ids_for_pagesArgs struct {
	ID     string   `json:"id"`
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
	Page   int      `json:"page,omitempty"`
}

// list_user_likesArgs defines the typed arguments for list_user_likes
type list_user_likesArgs struct {
	ID       string   `json:"id"`
	Fields   []string `json:"fields,omitempty"`
	Limit    int      `json:"limit,omitempty"`
	After    string   `json:"after,omitempty"`
	Before   string   `json:"before,omitempty"`
	TargetId string   `json:"target_id,omitempty"`
}

// list_user_live_videosArgs defines the typed arguments for list_user_live_videos
type list_user_live_videosArgs struct {
	ID              string   `json:"id"`
	Fields          []string `json:"fields,omitempty"`
	Limit           int      `json:"limit,omitempty"`
	After           string   `json:"after,omitempty"`
	Before          string   `json:"before,omitempty"`
	BroadcastStatus []string `json:"broadcast_status,omitempty"`
	Source          string   `json:"source,omitempty"`
}

// create_user_live_videoArgs defines the typed arguments for create_user_live_video
type create_user_live_videoArgs struct {
	ID                         string                 `json:"id"`
	ContentTags                []string               `json:"content_tags,omitempty"`
	Description                string                 `json:"description,omitempty"`
	EnableBackupIngest         bool                   `json:"enable_backup_ingest,omitempty"`
	EncodingSettings           string                 `json:"encoding_settings,omitempty"`
	EventParams                map[string]interface{} `json:"event_params,omitempty"`
	FisheyeVideoCropped        bool                   `json:"fisheye_video_cropped,omitempty"`
	FrontZRotation             float64                `json:"front_z_rotation,omitempty"`
	IsAudioOnly                bool                   `json:"is_audio_only,omitempty"`
	IsSpherical                bool                   `json:"is_spherical,omitempty"`
	OriginalFov                int                    `json:"original_fov,omitempty"`
	Privacy                    string                 `json:"privacy,omitempty"`
	Projection                 string                 `json:"projection,omitempty"`
	Published                  bool                   `json:"published,omitempty"`
	ScheduleCustomProfileImage interface{}            `json:"schedule_custom_profile_image,omitempty"`
	SpatialAudioFormat         string                 `json:"spatial_audio_format,omitempty"`
	Status                     string                 `json:"status,omitempty"`
	StereoscopicMode           string                 `json:"stereoscopic_mode,omitempty"`
	StopOnDeleteStream         bool                   `json:"stop_on_delete_stream,omitempty"`
	StreamType                 string                 `json:"stream_type,omitempty"`
	Title                      string                 `json:"title,omitempty"`
}

// create_user_messenger_desktop_performance_traceArgs defines the typed arguments for create_user_messenger_desktop_performance_trace
type create_user_messenger_desktop_performance_traceArgs struct {
}

// update_user_messenger_kids_accounts_unread_badgeArgs defines the typed arguments for update_user_messenger_kids_accounts_unread_badge
type update_user_messenger_kids_accounts_unread_badgeArgs struct {
	ProxiedAppId int `json:"proxied_app_id"`
}

// get_user_musicArgs defines the typed arguments for get_user_music
type get_user_musicArgs struct {
	ID       string   `json:"id"`
	Fields   []string `json:"fields,omitempty"`
	Limit    int      `json:"limit,omitempty"`
	After    string   `json:"after,omitempty"`
	Before   string   `json:"before,omitempty"`
	TargetId string   `json:"target_id,omitempty"`
}

// create_user_notificationArgs defines the typed arguments for create_user_notification
type create_user_notificationArgs struct {
	ID                        string                 `json:"id"`
	BotMessagePayloadElements string                 `json:"bot_message_payload_elements,omitempty"`
	Filtering                 []string               `json:"filtering,omitempty"`
	Href                      map[string]interface{} `json:"href,omitempty"`
	Label                     string                 `json:"label,omitempty"`
	Message                   map[string]interface{} `json:"message,omitempty"`
	NotifIds                  []string               `json:"notif_ids,omitempty"`
	Payload                   string                 `json:"payload,omitempty"`
	Read                      bool                   `json:"read,omitempty"`
	Ref                       string                 `json:"ref,omitempty"`
	ScheduleInterval          int                    `json:"schedule_interval,omitempty"`
	Seen                      bool                   `json:"seen,omitempty"`
	Template                  map[string]interface{} `json:"template,omitempty"`
	Type                      string                 `json:"type,omitempty"`
}

// list_user_payment_transactionsArgs defines the typed arguments for list_user_payment_transactions
type list_user_payment_transactionsArgs struct {
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
}

// remove_permissions_from_userArgs defines the typed arguments for remove_permissions_from_user
type remove_permissions_from_userArgs struct {
	ID         string `json:"id"`
	Permission string `json:"permission,omitempty"`
}

// list_user_permissionsArgs defines the typed arguments for list_user_permissions
type list_user_permissionsArgs struct {
	ID         string   `json:"id"`
	Fields     []string `json:"fields,omitempty"`
	Limit      int      `json:"limit,omitempty"`
	After      string   `json:"after,omitempty"`
	Before     string   `json:"before,omitempty"`
	Permission string   `json:"permission,omitempty"`
	Status     string   `json:"status,omitempty"`
}

// list_user_personal_ad_accountsArgs defines the typed arguments for list_user_personal_ad_accounts
type list_user_personal_ad_accountsArgs struct {
	ID     string   `json:"id"`
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
}

// list_user_photosArgs defines the typed arguments for list_user_photos
type list_user_photosArgs struct {
	ID     string   `json:"id"`
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
	Type   string   `json:"type,omitempty"`
}

// create_user_photoArgs defines the typed arguments for create_user_photo
type create_user_photoArgs struct {
	ID                                    string                   `json:"id"`
	Aid                                   string                   `json:"aid,omitempty"`
	AllowSphericalPhoto                   bool                     `json:"allow_spherical_photo,omitempty"`
	AltTextCustom                         string                   `json:"alt_text_custom,omitempty"`
	AndroidKeyHash                        string                   `json:"android_key_hash,omitempty"`
	ApplicationId                         string                   `json:"application_id,omitempty"`
	Attempt                               int                      `json:"attempt,omitempty"`
	AudienceExp                           bool                     `json:"audience_exp,omitempty"`
	BackdatedTime                         string                   `json:"backdated_time,omitempty"`
	BackdatedTimeGranularity              string                   `json:"backdated_time_granularity,omitempty"`
	Caption                               string                   `json:"caption,omitempty"`
	ComposerSessionId                     string                   `json:"composer_session_id,omitempty"`
	DirectShareStatus                     int                      `json:"direct_share_status,omitempty"`
	FeedTargeting                         map[string]interface{}   `json:"feed_targeting,omitempty"`
	FilterType                            int                      `json:"filter_type,omitempty"`
	FullResIsComingLater                  bool                     `json:"full_res_is_coming_later,omitempty"`
	InitialViewHeadingOverrideDegrees     int                      `json:"initial_view_heading_override_degrees,omitempty"`
	InitialViewPitchOverrideDegrees       int                      `json:"initial_view_pitch_override_degrees,omitempty"`
	InitialViewVerticalFovOverrideDegrees int                      `json:"initial_view_vertical_fov_override_degrees,omitempty"`
	IosBundleId                           string                   `json:"ios_bundle_id,omitempty"`
	IsExplicitLocation                    bool                     `json:"is_explicit_location,omitempty"`
	IsExplicitPlace                       bool                     `json:"is_explicit_place,omitempty"`
	ManualPrivacy                         bool                     `json:"manual_privacy,omitempty"`
	Message                               string                   `json:"message,omitempty"`
	Name                                  string                   `json:"name,omitempty"`
	NoStory                               bool                     `json:"no_story,omitempty"`
	OfflineId                             int                      `json:"offline_id,omitempty"`
	OgActionTypeId                        string                   `json:"og_action_type_id,omitempty"`
	OgIconId                              string                   `json:"og_icon_id,omitempty"`
	OgObjectId                            string                   `json:"og_object_id,omitempty"`
	OgPhrase                              string                   `json:"og_phrase,omitempty"`
	OgSetProfileBadge                     bool                     `json:"og_set_profile_badge,omitempty"`
	OgSuggestionMechanism                 string                   `json:"og_suggestion_mechanism,omitempty"`
	Place                                 map[string]interface{}   `json:"place,omitempty"`
	Privacy                               string                   `json:"privacy,omitempty"`
	ProfileId                             int                      `json:"profile_id,omitempty"`
	ProvenanceInfo                        map[string]interface{}   `json:"provenance_info,omitempty"`
	ProxiedAppId                          string                   `json:"proxied_app_id,omitempty"`
	Published                             bool                     `json:"published,omitempty"`
	Qn                                    string                   `json:"qn,omitempty"`
	ScheduledPublishTime                  int                      `json:"scheduled_publish_time,omitempty"`
	SphericalMetadata                     map[string]interface{}   `json:"spherical_metadata,omitempty"`
	SponsorId                             string                   `json:"sponsor_id,omitempty"`
	SponsorRelationship                   int                      `json:"sponsor_relationship,omitempty"`
	Tags                                  []map[string]interface{} `json:"tags,omitempty"`
	TargetId                              int                      `json:"target_id,omitempty"`
	Targeting                             map[string]interface{}   `json:"targeting,omitempty"`
	TimeSinceOriginalPost                 int                      `json:"time_since_original_post,omitempty"`
	Uid                                   int                      `json:"uid,omitempty"`
	UnpublishedContentType                string                   `json:"unpublished_content_type,omitempty"`
	Url                                   string                   `json:"url,omitempty"`
	UserSelectedTags                      bool                     `json:"user_selected_tags,omitempty"`
	VaultImageId                          string                   `json:"vault_image_id,omitempty"`
}

// get_user_pictureArgs defines the typed arguments for get_user_picture
type get_user_pictureArgs struct {
	ID       string   `json:"id"`
	Fields   []string `json:"fields,omitempty"`
	Limit    int      `json:"limit,omitempty"`
	After    string   `json:"after,omitempty"`
	Before   string   `json:"before,omitempty"`
	Height   int      `json:"height,omitempty"`
	Redirect bool     `json:"redirect,omitempty"`
	Type     string   `json:"type,omitempty"`
	Width    int      `json:"width,omitempty"`
}

// list_user_postsArgs defines the typed arguments for list_user_posts
type list_user_postsArgs struct {
	ID            string   `json:"id"`
	Fields        []string `json:"fields,omitempty"`
	Limit         int      `json:"limit,omitempty"`
	After         string   `json:"after,omitempty"`
	Before        string   `json:"before,omitempty"`
	IncludeHidden bool     `json:"include_hidden,omitempty"`
	Q             string   `json:"q,omitempty"`
	ShowExpired   bool     `json:"show_expired,omitempty"`
	Since         string   `json:"since,omitempty"`
	Until         string   `json:"until,omitempty"`
	With          string   `json:"with,omitempty"`
}

// list_user_rich_media_documentsArgs defines the typed arguments for list_user_rich_media_documents
type list_user_rich_media_documentsArgs struct {
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
	Query  string   `json:"query,omitempty"`
}

// create_user_staging_resourceArgs defines the typed arguments for create_user_staging_resource
type create_user_staging_resourceArgs struct {
	ID   string      `json:"id"`
	File interface{} `json:"file,omitempty"`
}

// list_user_videosArgs defines the typed arguments for list_user_videos
type list_user_videosArgs struct {
	ID     string   `json:"id"`
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
	Type   string   `json:"type,omitempty"`
}

// create_user_videoArgs defines the typed arguments for create_user_video
type create_user_videoArgs struct {
	ID                            string                 `json:"id"`
	ApplicationId                 string                 `json:"application_id,omitempty"`
	AskedFunFactPromptId          int                    `json:"asked_fun_fact_prompt_id,omitempty"`
	AudioStoryWaveAnimationHandle string                 `json:"audio_story_wave_animation_handle,omitempty"`
	ComposerEntryPicker           string                 `json:"composer_entry_picker,omitempty"`
	ComposerEntryPoint            string                 `json:"composer_entry_point,omitempty"`
	ComposerEntryTime             int                    `json:"composer_entry_time,omitempty"`
	ComposerSessionEventsLog      string                 `json:"composer_session_events_log,omitempty"`
	ComposerSessionId             string                 `json:"composer_session_id,omitempty"`
	ComposerSourceSurface         string                 `json:"composer_source_surface,omitempty"`
	ComposerType                  string                 `json:"composer_type,omitempty"`
	ContainerType                 string                 `json:"container_type,omitempty"`
	ContentCategory               string                 `json:"content_category,omitempty"`
	CreativeTools                 string                 `json:"creative_tools,omitempty"`
	Description                   string                 `json:"description,omitempty"`
	DirectShareStatus             int                    `json:"direct_share_status,omitempty"`
	Embeddable                    bool                   `json:"embeddable,omitempty"`
	EndOffset                     int                    `json:"end_offset,omitempty"`
	FbuploaderVideoFileChunk      string                 `json:"fbuploader_video_file_chunk,omitempty"`
	FileSize                      int                    `json:"file_size,omitempty"`
	FileUrl                       string                 `json:"file_url,omitempty"`
	FisheyeVideoCropped           bool                   `json:"fisheye_video_cropped,omitempty"`
	Formatting                    string                 `json:"formatting,omitempty"`
	Fov                           int                    `json:"fov,omitempty"`
	FrontZRotation                float64                `json:"front_z_rotation,omitempty"`
	FunFactPromptId               string                 `json:"fun_fact_prompt_id,omitempty"`
	FunFactToasteeId              int                    `json:"fun_fact_toastee_id,omitempty"`
	Guide                         []interface{}          `json:"guide,omitempty"`
	GuideEnabled                  bool                   `json:"guide_enabled,omitempty"`
	InitialHeading                int                    `json:"initial_heading,omitempty"`
	InitialPitch                  int                    `json:"initial_pitch,omitempty"`
	InstantGameEntryPointData     string                 `json:"instant_game_entry_point_data,omitempty"`
	IsBoostIntended               bool                   `json:"is_boost_intended,omitempty"`
	IsExplicitShare               bool                   `json:"is_explicit_share,omitempty"`
	IsGroupLinkingPost            bool                   `json:"is_group_linking_post,omitempty"`
	IsPartnershipAd               bool                   `json:"is_partnership_ad,omitempty"`
	IsVoiceClip                   bool                   `json:"is_voice_clip,omitempty"`
	LocationSourceId              string                 `json:"location_source_id,omitempty"`
	ManualPrivacy                 bool                   `json:"manual_privacy,omitempty"`
	NoStory                       bool                   `json:"no_story,omitempty"`
	OgActionTypeId                string                 `json:"og_action_type_id,omitempty"`
	OgIconId                      string                 `json:"og_icon_id,omitempty"`
	OgObjectId                    string                 `json:"og_object_id,omitempty"`
	OgPhrase                      string                 `json:"og_phrase,omitempty"`
	OgSuggestionMechanism         string                 `json:"og_suggestion_mechanism,omitempty"`
	OriginalFov                   int                    `json:"original_fov,omitempty"`
	OriginalProjectionType        string                 `json:"original_projection_type,omitempty"`
	PartnershipAdAdCode           string                 `json:"partnership_ad_ad_code,omitempty"`
	Privacy                       string                 `json:"privacy,omitempty"`
	PublishEventId                int                    `json:"publish_event_id,omitempty"`
	ReferencedStickerId           string                 `json:"referenced_sticker_id,omitempty"`
	ReplaceVideoId                string                 `json:"replace_video_id,omitempty"`
	SlideshowSpec                 map[string]interface{} `json:"slideshow_spec,omitempty"`
	Source                        string                 `json:"source,omitempty"`
	SourceInstagramMediaId        string                 `json:"source_instagram_media_id,omitempty"`
	Spherical                     bool                   `json:"spherical,omitempty"`
	SponsorId                     string                 `json:"sponsor_id,omitempty"`
	StartOffset                   int                    `json:"start_offset,omitempty"`
	SwapMode                      string                 `json:"swap_mode,omitempty"`
	TextFormatMetadata            string                 `json:"text_format_metadata,omitempty"`
	Thumb                         interface{}            `json:"thumb,omitempty"`
	TimeSinceOriginalPost         int                    `json:"time_since_original_post,omitempty"`
	Title                         string                 `json:"title,omitempty"`
	TranscodeSettingProperties    string                 `json:"transcode_setting_properties,omitempty"`
	UnpublishedContentType        string                 `json:"unpublished_content_type,omitempty"`
	UploadPhase                   string                 `json:"upload_phase,omitempty"`
	UploadSessionId               string                 `json:"upload_session_id,omitempty"`
	UploadSettingProperties       string                 `json:"upload_setting_properties,omitempty"`
	VideoFileChunk                string                 `json:"video_file_chunk,omitempty"`
	VideoIdOriginal               string                 `json:"video_id_original,omitempty"`
	VideoStartTimeMs              int                    `json:"video_start_time_ms,omitempty"`
	WaterfallId                   string                 `json:"waterfall_id,omitempty"`
}

// delete_userArgs defines the typed arguments for delete_user
type delete_userArgs struct {
	ID string `json:"id"`
}

// get_userArgs defines the typed arguments for get_user
type get_userArgs struct {
	ID     string   `json:"id"`
	Fields []string `json:"fields,omitempty"`
	Limit  int      `json:"limit,omitempty"`
	After  string   `json:"after,omitempty"`
	Before string   `json:"before,omitempty"`
}

// update_userArgs defines the typed arguments for update_user
type update_userArgs struct {
	ID                              string `json:"id"`
	EmojiColorPref                  int    `json:"emoji_color_pref,omitempty"`
	Firstname                       string `json:"firstname,omitempty"`
	Lastname                        string `json:"lastname,omitempty"`
	LocalNewsMegaphoneDismissStatus string `json:"local_news_megaphone_dismiss_status,omitempty"`
	LocalNewsSubscriptionStatus     string `json:"local_news_subscription_status,omitempty"`
	Name                            string `json:"name,omitempty"`
	Password                        string `json:"password,omitempty"`
}

// RemoveAccessTokensFromUserHandler handles remove_access_tokens_from_user with typed arguments
func RemoveAccessTokensFromUserHandler(ctx context.Context, request mcp.CallToolRequest, args remove_access_tokens_from_userArgs) (*mcp.CallToolResult, error) {

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "access_tokens")

	return ExecuteDELETERequest(ctx, url)

}

// CreateUserAccessTokenHandler handles create_user_access_token with typed arguments
func CreateUserAccessTokenHandler(ctx context.Context, request mcp.CallToolRequest, args create_user_access_tokenArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.BusinessApp != "" {
		body["business_app"] = args.BusinessApp
	}

	if args.PageId != "" {
		body["page_id"] = args.PageId
	}

	if len(args.Scope) > 0 {
		body["scope"] = args.Scope
	}

	body["set_token_expires_in_60_days"] = args.SetTokenExpiresIn60Days

	// Build URL and execute
	url := buildGraphURL(args.ID, "access_tokens")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListUserAccountsHandler handles list_user_accounts with typed arguments
func ListUserAccountsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_accountsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("Page")
		log.Printf("Using default fields for Page (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.AdId != "" {
		query.Set("ad_id", args.AdId)
	}

	if args.IsPlace {
		query.Set("is_place", "true")
	}

	if args.IsPromotable {
		query.Set("is_promotable", "true")
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "accounts")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateUserAccountHandler handles create_user_account with typed arguments
func CreateUserAccountHandler(ctx context.Context, request mcp.CallToolRequest, args create_user_accountArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.About != "" {
		body["about"] = args.About
	}

	if args.Address != "" {
		body["address"] = args.Address
	}

	if args.Category > 0 {
		body["category"] = args.Category
	}

	if args.CategoryEnum != "" {
		body["category_enum"] = args.CategoryEnum
	}

	if len(args.CategoryList) > 0 {
		body["category_list"] = args.CategoryList
	}

	if args.CityId != "" {
		body["city_id"] = args.CityId
	}

	if args.Coordinates != nil {
		body["coordinates"] = args.Coordinates
	}

	if args.CoverPhoto != nil {
		body["cover_photo"] = args.CoverPhoto
	}

	if args.Description != "" {
		body["description"] = args.Description
	}

	body["ignore_coordinate_warnings"] = args.IgnoreCoordinateWarnings

	if args.Location != nil {
		body["location"] = args.Location
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.Phone != "" {
		body["phone"] = args.Phone
	}

	if args.Picture != "" {
		body["picture"] = args.Picture
	}

	if args.Website != "" {
		body["website"] = args.Website
	}

	if args.Zip != "" {
		body["zip"] = args.Zip
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "accounts")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListUserAdStudiesHandler handles list_user_ad_studies with typed arguments
func ListUserAdStudiesHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_ad_studiesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("AdStudy")
		log.Printf("Using default fields for AdStudy (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ad_studies")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateUserAdStudieHandler handles create_user_ad_studie with typed arguments
func CreateUserAdStudieHandler(ctx context.Context, request mcp.CallToolRequest, args create_user_ad_studieArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.Cells) > 0 {
		body["cells"] = args.Cells
	}

	if args.ClientBusiness != "" {
		body["client_business"] = args.ClientBusiness
	}

	if args.ConfidenceLevel != 0 {
		body["confidence_level"] = args.ConfidenceLevel
	}

	if args.CooldownStartTime > 0 {
		body["cooldown_start_time"] = args.CooldownStartTime
	}

	if args.Description != "" {
		body["description"] = args.Description
	}

	if args.EndTime > 0 {
		body["end_time"] = args.EndTime
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if len(args.Objectives) > 0 {
		body["objectives"] = args.Objectives
	}

	if args.ObservationEndTime > 0 {
		body["observation_end_time"] = args.ObservationEndTime
	}

	if args.StartTime > 0 {
		body["start_time"] = args.StartTime
	}

	if args.Type != "" {
		body["type"] = args.Type
	}

	if args.Viewers != nil {
		body["viewers"] = args.Viewers
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "ad_studies")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListUserAdaccountsHandler handles list_user_adaccounts with typed arguments
func ListUserAdaccountsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_adaccountsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("AdAccount")
		log.Printf("Using default fields for AdAccount (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "adaccounts")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserAlbumsHandler handles list_user_albums with typed arguments
func ListUserAlbumsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_albumsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("Album")
		log.Printf("Using default fields for Album (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "albums")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateUserApplicationHandler handles create_user_application with typed arguments
func CreateUserApplicationHandler(ctx context.Context, request mcp.CallToolRequest, args create_user_applicationArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.BusinessApp > 0 {
		body["business_app"] = args.BusinessApp
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "applications")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListUserApprequestformerrecipientsHandler handles list_user_apprequestformerrecipients with typed arguments
func ListUserApprequestformerrecipientsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_apprequestformerrecipientsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("AppRequestFormerRecipient")
		log.Printf("Using default fields for AppRequestFormerRecipient (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL("", "apprequestformerrecipients")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserApprequestsHandler handles list_user_apprequests with typed arguments
func ListUserApprequestsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_apprequestsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("AppRequest")
		log.Printf("Using default fields for AppRequest (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "apprequests")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserAssignedAdAccountsHandler handles list_user_assigned_ad_accounts with typed arguments
func ListUserAssignedAdAccountsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_assigned_ad_accountsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("AdAccount")
		log.Printf("Using default fields for AdAccount (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "assigned_ad_accounts")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserAssignedApplicationsHandler handles list_user_assigned_applications with typed arguments
func ListUserAssignedApplicationsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_assigned_applicationsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("Application")
		log.Printf("Using default fields for Application (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "assigned_applications")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserAssignedBusinessAssetGroupsHandler handles list_user_assigned_business_asset_groups with typed arguments
func ListUserAssignedBusinessAssetGroupsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_assigned_business_asset_groupsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("BusinessAssetGroup")
		log.Printf("Using default fields for BusinessAssetGroup (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.ContainedAssetId != "" {
		query.Set("contained_asset_id", args.ContainedAssetId)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "assigned_business_asset_groups")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserAssignedPagesHandler handles list_user_assigned_pages with typed arguments
func ListUserAssignedPagesHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_assigned_pagesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("Page")
		log.Printf("Using default fields for Page (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "assigned_pages")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserAssignedProductCatalogsHandler handles list_user_assigned_product_catalogs with typed arguments
func ListUserAssignedProductCatalogsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_assigned_product_catalogsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("ProductCatalog")
		log.Printf("Using default fields for ProductCatalog (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "assigned_product_catalogs")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserAvatarsHandler handles list_user_avatars with typed arguments
func ListUserAvatarsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_avatarsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("Avatar")
		log.Printf("Using default fields for Avatar (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "avatars")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserBusinessUsersHandler handles list_user_business_users with typed arguments
func ListUserBusinessUsersHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_business_usersArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("BusinessUser")
		log.Printf("Using default fields for BusinessUser (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL("", "business_users")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// RemoveBusinessesFromUserHandler handles remove_businesses_from_user with typed arguments
func RemoveBusinessesFromUserHandler(ctx context.Context, request mcp.CallToolRequest, args remove_businesses_from_userArgs) (*mcp.CallToolResult, error) {

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "businesses")

	return ExecuteDELETERequest(ctx, url)

}

// ListUserBusinessesHandler handles list_user_businesses with typed arguments
func ListUserBusinessesHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_businessesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("Business")
		log.Printf("Using default fields for Business (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "businesses")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateUserBusinesseHandler handles create_user_businesse with typed arguments
func CreateUserBusinesseHandler(ctx context.Context, request mcp.CallToolRequest, args create_user_businesseArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.ChildBusinessExternalId != "" {
		body["child_business_external_id"] = args.ChildBusinessExternalId
	}

	if args.Email != "" {
		body["email"] = args.Email
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.PrimaryPage != "" {
		body["primary_page"] = args.PrimaryPage
	}

	if args.SalesRepEmail != "" {
		body["sales_rep_email"] = args.SalesRepEmail
	}

	if args.SurveyBusinessType != "" {
		body["survey_business_type"] = args.SurveyBusinessType
	}

	if args.SurveyNumAssets > 0 {
		body["survey_num_assets"] = args.SurveyNumAssets
	}

	if args.SurveyNumPeople > 0 {
		body["survey_num_people"] = args.SurveyNumPeople
	}

	if args.TimezoneId != "" {
		body["timezone_id"] = args.TimezoneId
	}

	if args.Vertical != "" {
		body["vertical"] = args.Vertical
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "businesses")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListUserConversationsHandler handles list_user_conversations with typed arguments
func ListUserConversationsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_conversationsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("UnifiedThread")
		log.Printf("Using default fields for UnifiedThread (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Folder != "" {
		query.Set("folder", args.Folder)
	}

	if args.Platform != "" {
		query.Set("platform", args.Platform)
	}

	if len(args.Tags) > 0 {
		query.Set("tags", strings.Join(args.Tags, ","))
	}

	if args.UserId != "" {
		query.Set("user_id", args.UserId)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "conversations")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserCustomLabelsHandler handles list_user_custom_labels with typed arguments
func ListUserCustomLabelsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_custom_labelsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("PageUserMessageThreadLabel")
		log.Printf("Using default fields for PageUserMessageThreadLabel (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "custom_labels")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserEventsHandler handles list_user_events with typed arguments
func ListUserEventsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_eventsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("Event")
		log.Printf("Using default fields for Event (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.IncludeCanceled {
		query.Set("include_canceled", "true")
	}

	if args.Type != "" {
		query.Set("type", args.Type)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "events")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// GetUserFeedHandler handles get_user_feed with typed arguments
func GetUserFeedHandler(ctx context.Context, request mcp.CallToolRequest, args get_user_feedArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("Post")
		log.Printf("Using default fields for Post (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.IncludeHidden {
		query.Set("include_hidden", "true")
	}

	if args.Q != "" {
		query.Set("q", args.Q)
	}

	if args.ShowExpired {
		query.Set("show_expired", "true")
	}

	if args.Since != "" {
		query.Set("since", args.Since)
	}

	if args.Until != "" {
		query.Set("until", args.Until)
	}

	if args.With != "" {
		query.Set("with", args.With)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "feed")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UpdateUserFeedHandler handles update_user_feed with typed arguments
func UpdateUserFeedHandler(ctx context.Context, request mcp.CallToolRequest, args update_user_feedArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.Actions != nil {
		body["actions"] = args.Actions
	}

	if args.AlbumId != "" {
		body["album_id"] = args.AlbumId
	}

	if args.AndroidKeyHash != "" {
		body["android_key_hash"] = args.AndroidKeyHash
	}

	if args.ApplicationId != "" {
		body["application_id"] = args.ApplicationId
	}

	if args.AskedFunFactPromptId > 0 {
		body["asked_fun_fact_prompt_id"] = args.AskedFunFactPromptId
	}

	if args.Asset3dId != "" {
		body["asset3d_id"] = args.Asset3dId
	}

	if args.AssociatedId != "" {
		body["associated_id"] = args.AssociatedId
	}

	body["attach_place_suggestion"] = args.AttachPlaceSuggestion

	if len(args.AttachedMedia) > 0 {
		body["attached_media"] = args.AttachedMedia
	}

	body["audience_exp"] = args.AudienceExp

	if args.BackdatedTime != "" {
		body["backdated_time"] = args.BackdatedTime
	}

	if args.BackdatedTimeGranularity != "" {
		body["backdated_time_granularity"] = args.BackdatedTimeGranularity
	}

	body["breaking_news"] = args.BreakingNews

	if args.BreakingNewsExpiration > 0 {
		body["breaking_news_expiration"] = args.BreakingNewsExpiration
	}

	if args.CallToAction != nil {
		body["call_to_action"] = args.CallToAction
	}

	if args.Caption != "" {
		body["caption"] = args.Caption
	}

	if len(args.ChildAttachments) > 0 {
		body["child_attachments"] = args.ChildAttachments
	}

	if args.ClientMutationId != "" {
		body["client_mutation_id"] = args.ClientMutationId
	}

	if args.ComposerEntryPicker != "" {
		body["composer_entry_picker"] = args.ComposerEntryPicker
	}

	if args.ComposerEntryPoint != "" {
		body["composer_entry_point"] = args.ComposerEntryPoint
	}

	if args.ComposerEntryTime > 0 {
		body["composer_entry_time"] = args.ComposerEntryTime
	}

	if args.ComposerSessionEventsLog != "" {
		body["composer_session_events_log"] = args.ComposerSessionEventsLog
	}

	if args.ComposerSessionId != "" {
		body["composer_session_id"] = args.ComposerSessionId
	}

	if args.ComposerSourceSurface != "" {
		body["composer_source_surface"] = args.ComposerSourceSurface
	}

	if args.ComposerType != "" {
		body["composer_type"] = args.ComposerType
	}

	if args.ConnectionClass != "" {
		body["connection_class"] = args.ConnectionClass
	}

	if args.ContentAttachment != "" {
		body["content_attachment"] = args.ContentAttachment
	}

	if args.Coordinates != nil {
		body["coordinates"] = args.Coordinates
	}

	if args.CtaLink != "" {
		body["cta_link"] = args.CtaLink
	}

	if args.CtaType != "" {
		body["cta_type"] = args.CtaType
	}

	if args.Description != "" {
		body["description"] = args.Description
	}

	if args.DirectShareStatus > 0 {
		body["direct_share_status"] = args.DirectShareStatus
	}

	if args.ExpandedHeight > 0 {
		body["expanded_height"] = args.ExpandedHeight
	}

	if args.ExpandedWidth > 0 {
		body["expanded_width"] = args.ExpandedWidth
	}

	if args.FeedTargeting != nil {
		body["feed_targeting"] = args.FeedTargeting
	}

	if args.Formatting != "" {
		body["formatting"] = args.Formatting
	}

	if args.FunFactPromptId != "" {
		body["fun_fact_prompt_id"] = args.FunFactPromptId
	}

	if args.FunFactToasteeId > 0 {
		body["fun_fact_toastee_id"] = args.FunFactToasteeId
	}

	if args.Height > 0 {
		body["height"] = args.Height
	}

	if args.HomeCheckinCityId != nil {
		body["home_checkin_city_id"] = args.HomeCheckinCityId
	}

	if args.ImageCrops != nil {
		body["image_crops"] = args.ImageCrops
	}

	if args.ImplicitWithTags != nil {
		body["implicit_with_tags"] = args.ImplicitWithTags
	}

	if args.InstantGameEntryPointData != "" {
		body["instant_game_entry_point_data"] = args.InstantGameEntryPointData
	}

	if args.IosBundleId != "" {
		body["ios_bundle_id"] = args.IosBundleId
	}

	body["is_backout_draft"] = args.IsBackoutDraft

	body["is_boost_intended"] = args.IsBoostIntended

	body["is_explicit_location"] = args.IsExplicitLocation

	body["is_explicit_share"] = args.IsExplicitShare

	body["is_group_linking_post"] = args.IsGroupLinkingPost

	body["is_photo_container"] = args.IsPhotoContainer

	if args.Link != "" {
		body["link"] = args.Link
	}

	if args.LocationSourceId != "" {
		body["location_source_id"] = args.LocationSourceId
	}

	body["manual_privacy"] = args.ManualPrivacy

	if args.Message != "" {
		body["message"] = args.Message
	}

	body["multi_share_end_card"] = args.MultiShareEndCard

	body["multi_share_optimized"] = args.MultiShareOptimized

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.NectarModule != "" {
		body["nectar_module"] = args.NectarModule
	}

	if args.ObjectAttachment != "" {
		body["object_attachment"] = args.ObjectAttachment
	}

	if args.OgActionTypeId != "" {
		body["og_action_type_id"] = args.OgActionTypeId
	}

	body["og_hide_object_attachment"] = args.OgHideObjectAttachment

	if args.OgIconId != "" {
		body["og_icon_id"] = args.OgIconId
	}

	if args.OgObjectId != "" {
		body["og_object_id"] = args.OgObjectId
	}

	if args.OgPhrase != "" {
		body["og_phrase"] = args.OgPhrase
	}

	body["og_set_profile_badge"] = args.OgSetProfileBadge

	if args.OgSuggestionMechanism != "" {
		body["og_suggestion_mechanism"] = args.OgSuggestionMechanism
	}

	if args.PageRecommendation != "" {
		body["page_recommendation"] = args.PageRecommendation
	}

	if args.Picture != "" {
		body["picture"] = args.Picture
	}

	if args.Place != nil {
		body["place"] = args.Place
	}

	if args.PlaceAttachmentSetting != "" {
		body["place_attachment_setting"] = args.PlaceAttachmentSetting
	}

	if args.PlaceList != "" {
		body["place_list"] = args.PlaceList
	}

	if args.PlaceListData != nil {
		body["place_list_data"] = args.PlaceListData
	}

	if len(args.PostSurfacesBlacklist) > 0 {
		body["post_surfaces_blacklist"] = args.PostSurfacesBlacklist
	}

	if args.PostingToRedspace != "" {
		body["posting_to_redspace"] = args.PostingToRedspace
	}

	if args.Privacy != "" {
		body["privacy"] = args.Privacy
	}

	if args.PromptId != "" {
		body["prompt_id"] = args.PromptId
	}

	if args.PromptTrackingString != "" {
		body["prompt_tracking_string"] = args.PromptTrackingString
	}

	if args.Properties != nil {
		body["properties"] = args.Properties
	}

	if args.ProxiedAppId != "" {
		body["proxied_app_id"] = args.ProxiedAppId
	}

	if args.PublishEventId > 0 {
		body["publish_event_id"] = args.PublishEventId
	}

	body["published"] = args.Published

	if args.Quote != "" {
		body["quote"] = args.Quote
	}

	if len(args.Ref) > 0 {
		body["ref"] = args.Ref
	}

	if len(args.ReferenceableImageIds) > 0 {
		body["referenceable_image_ids"] = args.ReferenceableImageIds
	}

	if args.ReferralId != "" {
		body["referral_id"] = args.ReferralId
	}

	if args.ScheduledPublishTime != "" {
		body["scheduled_publish_time"] = args.ScheduledPublishTime
	}

	if args.Source != "" {
		body["source"] = args.Source
	}

	if args.SponsorId != "" {
		body["sponsor_id"] = args.SponsorId
	}

	if args.SponsorRelationship > 0 {
		body["sponsor_relationship"] = args.SponsorRelationship
	}

	if args.SuggestedPlaceId != nil {
		body["suggested_place_id"] = args.SuggestedPlaceId
	}

	if args.Tags != nil {
		body["tags"] = args.Tags
	}

	if args.TargetSurface != "" {
		body["target_surface"] = args.TargetSurface
	}

	if args.Targeting != nil {
		body["targeting"] = args.Targeting
	}

	if args.TextFormatMetadata != "" {
		body["text_format_metadata"] = args.TextFormatMetadata
	}

	if args.TextFormatPresetId != "" {
		body["text_format_preset_id"] = args.TextFormatPresetId
	}

	if args.TextOnlyPlace != "" {
		body["text_only_place"] = args.TextOnlyPlace
	}

	if args.Thumbnail != nil {
		body["thumbnail"] = args.Thumbnail
	}

	if args.TimeSinceOriginalPost > 0 {
		body["time_since_original_post"] = args.TimeSinceOriginalPost
	}

	if args.Title != "" {
		body["title"] = args.Title
	}

	if args.TrackingInfo != "" {
		body["tracking_info"] = args.TrackingInfo
	}

	if args.UnpublishedContentType != "" {
		body["unpublished_content_type"] = args.UnpublishedContentType
	}

	body["user_selected_tags"] = args.UserSelectedTags

	if args.VideoStartTimeMs > 0 {
		body["video_start_time_ms"] = args.VideoStartTimeMs
	}

	if args.ViewerCoordinates != nil {
		body["viewer_coordinates"] = args.ViewerCoordinates
	}

	if args.Width > 0 {
		body["width"] = args.Width
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "feed")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListUserFriendsHandler handles list_user_friends with typed arguments
func ListUserFriendsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_friendsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("User")
		log.Printf("Using default fields for User (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Uid > 0 {
		query.Set("uid", fmt.Sprintf("%d", args.Uid))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "friends")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserFundraisersHandler handles list_user_fundraisers with typed arguments
func ListUserFundraisersHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_fundraisersArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("FundraiserPersonToCharity")
		log.Printf("Using default fields for FundraiserPersonToCharity (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "fundraisers")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateUserFundraiserHandler handles create_user_fundraiser with typed arguments
func CreateUserFundraiserHandler(ctx context.Context, request mcp.CallToolRequest, args create_user_fundraiserArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.CharityId != "" {
		body["charity_id"] = args.CharityId
	}

	if args.CoverPhoto != nil {
		body["cover_photo"] = args.CoverPhoto
	}

	if args.Currency != "" {
		body["currency"] = args.Currency
	}

	if args.Description != "" {
		body["description"] = args.Description
	}

	if args.EndTime != "" {
		body["end_time"] = args.EndTime
	}

	if args.ExternalEventName != "" {
		body["external_event_name"] = args.ExternalEventName
	}

	if args.ExternalEventStartTime != "" {
		body["external_event_start_time"] = args.ExternalEventStartTime
	}

	if args.ExternalEventUri != "" {
		body["external_event_uri"] = args.ExternalEventUri
	}

	if args.ExternalFundraiserUri != "" {
		body["external_fundraiser_uri"] = args.ExternalFundraiserUri
	}

	if args.ExternalId != "" {
		body["external_id"] = args.ExternalId
	}

	if args.FundraiserType != "" {
		body["fundraiser_type"] = args.FundraiserType
	}

	if args.GoalAmount > 0 {
		body["goal_amount"] = args.GoalAmount
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.PageId != "" {
		body["page_id"] = args.PageId
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "fundraisers")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListUserGroupsHandler handles list_user_groups with typed arguments
func ListUserGroupsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_groupsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("Group")
		log.Printf("Using default fields for Group (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.AdminOnly {
		query.Set("admin_only", "true")
	}

	if args.Parent != "" {
		query.Set("parent", args.Parent)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "groups")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserIdsForAppsHandler handles list_user_ids_for_apps with typed arguments
func ListUserIdsForAppsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_ids_for_appsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("UserIDForApp")
		log.Printf("Using default fields for UserIDForApp (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.App > 0 {
		query.Set("app", fmt.Sprintf("%d", args.App))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ids_for_apps")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserIdsForBusinessHandler handles list_user_ids_for_business with typed arguments
func ListUserIdsForBusinessHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_ids_for_businessArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("UserIDForApp")
		log.Printf("Using default fields for UserIDForApp (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.App > 0 {
		query.Set("app", fmt.Sprintf("%d", args.App))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ids_for_business")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserIdsForPagesHandler handles list_user_ids_for_pages with typed arguments
func ListUserIdsForPagesHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_ids_for_pagesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("UserIDForPage")
		log.Printf("Using default fields for UserIDForPage (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Page > 0 {
		query.Set("page", fmt.Sprintf("%d", args.Page))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ids_for_pages")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserLikesHandler handles list_user_likes with typed arguments
func ListUserLikesHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_likesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("Page")
		log.Printf("Using default fields for Page (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.TargetId != "" {
		query.Set("target_id", args.TargetId)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "likes")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserLiveVideosHandler handles list_user_live_videos with typed arguments
func ListUserLiveVideosHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_live_videosArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("LiveVideo")
		log.Printf("Using default fields for LiveVideo (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if len(args.BroadcastStatus) > 0 {
		query.Set("broadcast_status", strings.Join(args.BroadcastStatus, ","))
	}

	if args.Source != "" {
		query.Set("source", args.Source)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "live_videos")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateUserLiveVideoHandler handles create_user_live_video with typed arguments
func CreateUserLiveVideoHandler(ctx context.Context, request mcp.CallToolRequest, args create_user_live_videoArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.ContentTags) > 0 {
		body["content_tags"] = args.ContentTags
	}

	if args.Description != "" {
		body["description"] = args.Description
	}

	body["enable_backup_ingest"] = args.EnableBackupIngest

	if args.EncodingSettings != "" {
		body["encoding_settings"] = args.EncodingSettings
	}

	if args.EventParams != nil {
		body["event_params"] = args.EventParams
	}

	body["fisheye_video_cropped"] = args.FisheyeVideoCropped

	if args.FrontZRotation != 0 {
		body["front_z_rotation"] = args.FrontZRotation
	}

	body["is_audio_only"] = args.IsAudioOnly

	body["is_spherical"] = args.IsSpherical

	if args.OriginalFov > 0 {
		body["original_fov"] = args.OriginalFov
	}

	if args.Privacy != "" {
		body["privacy"] = args.Privacy
	}

	if args.Projection != "" {
		body["projection"] = args.Projection
	}

	body["published"] = args.Published

	if args.ScheduleCustomProfileImage != nil {
		body["schedule_custom_profile_image"] = args.ScheduleCustomProfileImage
	}

	if args.SpatialAudioFormat != "" {
		body["spatial_audio_format"] = args.SpatialAudioFormat
	}

	if args.Status != "" {
		body["status"] = args.Status
	}

	if args.StereoscopicMode != "" {
		body["stereoscopic_mode"] = args.StereoscopicMode
	}

	body["stop_on_delete_stream"] = args.StopOnDeleteStream

	if args.StreamType != "" {
		body["stream_type"] = args.StreamType
	}

	if args.Title != "" {
		body["title"] = args.Title
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "live_videos")

	return ExecutePOSTRequest(ctx, url, body)

}

// CreateUserMessengerDesktopPerformanceTraceHandler handles create_user_messenger_desktop_performance_trace with typed arguments
func CreateUserMessengerDesktopPerformanceTraceHandler(ctx context.Context, request mcp.CallToolRequest, args create_user_messenger_desktop_performance_traceArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	// Add parameters to body

	// Build URL and execute
	url := buildGraphURL("", "messenger_desktop_performance_traces")

	return ExecutePOSTRequest(ctx, url, body)

}

// UpdateUserMessengerKidsAccountsUnreadBadgeHandler handles update_user_messenger_kids_accounts_unread_badge with typed arguments
func UpdateUserMessengerKidsAccountsUnreadBadgeHandler(ctx context.Context, request mcp.CallToolRequest, args update_user_messenger_kids_accounts_unread_badgeArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	// Add parameters to body

	if args.ProxiedAppId > 0 {
		body["proxied_app_id"] = args.ProxiedAppId
	}

	// Build URL and execute
	url := buildGraphURL("", "messenger_kids_accounts_unread_badge")

	return ExecutePOSTRequest(ctx, url, body)

}

// GetUserMusicHandler handles get_user_music with typed arguments
func GetUserMusicHandler(ctx context.Context, request mcp.CallToolRequest, args get_user_musicArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("Page")
		log.Printf("Using default fields for Page (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.TargetId != "" {
		query.Set("target_id", args.TargetId)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "music")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateUserNotificationHandler handles create_user_notification with typed arguments
func CreateUserNotificationHandler(ctx context.Context, request mcp.CallToolRequest, args create_user_notificationArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.BotMessagePayloadElements != "" {
		body["bot_message_payload_elements"] = args.BotMessagePayloadElements
	}

	if len(args.Filtering) > 0 {
		body["filtering"] = args.Filtering
	}

	if args.Href != nil {
		body["href"] = args.Href
	}

	if args.Label != "" {
		body["label"] = args.Label
	}

	if args.Message != nil {
		body["message"] = args.Message
	}

	if len(args.NotifIds) > 0 {
		body["notif_ids"] = args.NotifIds
	}

	if args.Payload != "" {
		body["payload"] = args.Payload
	}

	body["read"] = args.Read

	if args.Ref != "" {
		body["ref"] = args.Ref
	}

	if args.ScheduleInterval > 0 {
		body["schedule_interval"] = args.ScheduleInterval
	}

	body["seen"] = args.Seen

	if args.Template != nil {
		body["template"] = args.Template
	}

	if args.Type != "" {
		body["type"] = args.Type
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "notifications")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListUserPaymentTransactionsHandler handles list_user_payment_transactions with typed arguments
func ListUserPaymentTransactionsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_payment_transactionsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("PaymentEnginePayment")
		log.Printf("Using default fields for PaymentEnginePayment (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL("", "payment_transactions")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// RemovePermissionsFromUserHandler handles remove_permissions_from_user with typed arguments
func RemovePermissionsFromUserHandler(ctx context.Context, request mcp.CallToolRequest, args remove_permissions_from_userArgs) (*mcp.CallToolResult, error) {

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "permissions")

	return ExecuteDELETERequest(ctx, url)

}

// ListUserPermissionsHandler handles list_user_permissions with typed arguments
func ListUserPermissionsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_permissionsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("Permission")
		log.Printf("Using default fields for Permission (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Permission != "" {
		query.Set("permission", args.Permission)
	}

	if args.Status != "" {
		query.Set("status", args.Status)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "permissions")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserPersonalAdAccountsHandler handles list_user_personal_ad_accounts with typed arguments
func ListUserPersonalAdAccountsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_personal_ad_accountsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("AdAccount")
		log.Printf("Using default fields for AdAccount (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "personal_ad_accounts")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserPhotosHandler handles list_user_photos with typed arguments
func ListUserPhotosHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_photosArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("Photo")
		log.Printf("Using default fields for Photo (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Type != "" {
		query.Set("type", args.Type)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "photos")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateUserPhotoHandler handles create_user_photo with typed arguments
func CreateUserPhotoHandler(ctx context.Context, request mcp.CallToolRequest, args create_user_photoArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.Aid != "" {
		body["aid"] = args.Aid
	}

	body["allow_spherical_photo"] = args.AllowSphericalPhoto

	if args.AltTextCustom != "" {
		body["alt_text_custom"] = args.AltTextCustom
	}

	if args.AndroidKeyHash != "" {
		body["android_key_hash"] = args.AndroidKeyHash
	}

	if args.ApplicationId != "" {
		body["application_id"] = args.ApplicationId
	}

	if args.Attempt > 0 {
		body["attempt"] = args.Attempt
	}

	body["audience_exp"] = args.AudienceExp

	if args.BackdatedTime != "" {
		body["backdated_time"] = args.BackdatedTime
	}

	if args.BackdatedTimeGranularity != "" {
		body["backdated_time_granularity"] = args.BackdatedTimeGranularity
	}

	if args.Caption != "" {
		body["caption"] = args.Caption
	}

	if args.ComposerSessionId != "" {
		body["composer_session_id"] = args.ComposerSessionId
	}

	if args.DirectShareStatus > 0 {
		body["direct_share_status"] = args.DirectShareStatus
	}

	if args.FeedTargeting != nil {
		body["feed_targeting"] = args.FeedTargeting
	}

	if args.FilterType > 0 {
		body["filter_type"] = args.FilterType
	}

	body["full_res_is_coming_later"] = args.FullResIsComingLater

	if args.InitialViewHeadingOverrideDegrees > 0 {
		body["initial_view_heading_override_degrees"] = args.InitialViewHeadingOverrideDegrees
	}

	if args.InitialViewPitchOverrideDegrees > 0 {
		body["initial_view_pitch_override_degrees"] = args.InitialViewPitchOverrideDegrees
	}

	if args.InitialViewVerticalFovOverrideDegrees > 0 {
		body["initial_view_vertical_fov_override_degrees"] = args.InitialViewVerticalFovOverrideDegrees
	}

	if args.IosBundleId != "" {
		body["ios_bundle_id"] = args.IosBundleId
	}

	body["is_explicit_location"] = args.IsExplicitLocation

	body["is_explicit_place"] = args.IsExplicitPlace

	body["manual_privacy"] = args.ManualPrivacy

	if args.Message != "" {
		body["message"] = args.Message
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	body["no_story"] = args.NoStory

	if args.OfflineId > 0 {
		body["offline_id"] = args.OfflineId
	}

	if args.OgActionTypeId != "" {
		body["og_action_type_id"] = args.OgActionTypeId
	}

	if args.OgIconId != "" {
		body["og_icon_id"] = args.OgIconId
	}

	if args.OgObjectId != "" {
		body["og_object_id"] = args.OgObjectId
	}

	if args.OgPhrase != "" {
		body["og_phrase"] = args.OgPhrase
	}

	body["og_set_profile_badge"] = args.OgSetProfileBadge

	if args.OgSuggestionMechanism != "" {
		body["og_suggestion_mechanism"] = args.OgSuggestionMechanism
	}

	if args.Place != nil {
		body["place"] = args.Place
	}

	if args.Privacy != "" {
		body["privacy"] = args.Privacy
	}

	if args.ProfileId > 0 {
		body["profile_id"] = args.ProfileId
	}

	if args.ProvenanceInfo != nil {
		body["provenance_info"] = args.ProvenanceInfo
	}

	if args.ProxiedAppId != "" {
		body["proxied_app_id"] = args.ProxiedAppId
	}

	body["published"] = args.Published

	if args.Qn != "" {
		body["qn"] = args.Qn
	}

	if args.ScheduledPublishTime > 0 {
		body["scheduled_publish_time"] = args.ScheduledPublishTime
	}

	if args.SphericalMetadata != nil {
		body["spherical_metadata"] = args.SphericalMetadata
	}

	if args.SponsorId != "" {
		body["sponsor_id"] = args.SponsorId
	}

	if args.SponsorRelationship > 0 {
		body["sponsor_relationship"] = args.SponsorRelationship
	}

	if len(args.Tags) > 0 {
		body["tags"] = args.Tags
	}

	if args.TargetId > 0 {
		body["target_id"] = args.TargetId
	}

	if args.Targeting != nil {
		body["targeting"] = args.Targeting
	}

	if args.TimeSinceOriginalPost > 0 {
		body["time_since_original_post"] = args.TimeSinceOriginalPost
	}

	if args.Uid > 0 {
		body["uid"] = args.Uid
	}

	if args.UnpublishedContentType != "" {
		body["unpublished_content_type"] = args.UnpublishedContentType
	}

	if args.Url != "" {
		body["url"] = args.Url
	}

	body["user_selected_tags"] = args.UserSelectedTags

	if args.VaultImageId != "" {
		body["vault_image_id"] = args.VaultImageId
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "photos")

	return ExecutePOSTRequest(ctx, url, body)

}

// GetUserPictureHandler handles get_user_picture with typed arguments
func GetUserPictureHandler(ctx context.Context, request mcp.CallToolRequest, args get_user_pictureArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("ProfilePictureSource")
		log.Printf("Using default fields for ProfilePictureSource (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Height > 0 {
		query.Set("height", fmt.Sprintf("%d", args.Height))
	}

	if args.Redirect {
		query.Set("redirect", "true")
	}

	if args.Type != "" {
		query.Set("type", args.Type)
	}

	if args.Width > 0 {
		query.Set("width", fmt.Sprintf("%d", args.Width))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "picture")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserPostsHandler handles list_user_posts with typed arguments
func ListUserPostsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_postsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("Post")
		log.Printf("Using default fields for Post (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.IncludeHidden {
		query.Set("include_hidden", "true")
	}

	if args.Q != "" {
		query.Set("q", args.Q)
	}

	if args.ShowExpired {
		query.Set("show_expired", "true")
	}

	if args.Since != "" {
		query.Set("since", args.Since)
	}

	if args.Until != "" {
		query.Set("until", args.Until)
	}

	if args.With != "" {
		query.Set("with", args.With)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "posts")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListUserRichMediaDocumentsHandler handles list_user_rich_media_documents with typed arguments
func ListUserRichMediaDocumentsHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_rich_media_documentsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("Canvas")
		log.Printf("Using default fields for Canvas (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Query != "" {
		query.Set("query", args.Query)
	}

	// Build URL and execute
	baseURL := buildGraphURL("", "rich_media_documents")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateUserStagingResourceHandler handles create_user_staging_resource with typed arguments
func CreateUserStagingResourceHandler(ctx context.Context, request mcp.CallToolRequest, args create_user_staging_resourceArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.File != nil {
		body["file"] = args.File
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "staging_resources")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListUserVideosHandler handles list_user_videos with typed arguments
func ListUserVideosHandler(ctx context.Context, request mcp.CallToolRequest, args list_user_videosArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("AdVideo")
		log.Printf("Using default fields for AdVideo (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Type != "" {
		query.Set("type", args.Type)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "videos")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateUserVideoHandler handles create_user_video with typed arguments
func CreateUserVideoHandler(ctx context.Context, request mcp.CallToolRequest, args create_user_videoArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.ApplicationId != "" {
		body["application_id"] = args.ApplicationId
	}

	if args.AskedFunFactPromptId > 0 {
		body["asked_fun_fact_prompt_id"] = args.AskedFunFactPromptId
	}

	if args.AudioStoryWaveAnimationHandle != "" {
		body["audio_story_wave_animation_handle"] = args.AudioStoryWaveAnimationHandle
	}

	if args.ComposerEntryPicker != "" {
		body["composer_entry_picker"] = args.ComposerEntryPicker
	}

	if args.ComposerEntryPoint != "" {
		body["composer_entry_point"] = args.ComposerEntryPoint
	}

	if args.ComposerEntryTime > 0 {
		body["composer_entry_time"] = args.ComposerEntryTime
	}

	if args.ComposerSessionEventsLog != "" {
		body["composer_session_events_log"] = args.ComposerSessionEventsLog
	}

	if args.ComposerSessionId != "" {
		body["composer_session_id"] = args.ComposerSessionId
	}

	if args.ComposerSourceSurface != "" {
		body["composer_source_surface"] = args.ComposerSourceSurface
	}

	if args.ComposerType != "" {
		body["composer_type"] = args.ComposerType
	}

	if args.ContainerType != "" {
		body["container_type"] = args.ContainerType
	}

	if args.ContentCategory != "" {
		body["content_category"] = args.ContentCategory
	}

	if args.CreativeTools != "" {
		body["creative_tools"] = args.CreativeTools
	}

	if args.Description != "" {
		body["description"] = args.Description
	}

	if args.DirectShareStatus > 0 {
		body["direct_share_status"] = args.DirectShareStatus
	}

	body["embeddable"] = args.Embeddable

	if args.EndOffset > 0 {
		body["end_offset"] = args.EndOffset
	}

	if args.FbuploaderVideoFileChunk != "" {
		body["fbuploader_video_file_chunk"] = args.FbuploaderVideoFileChunk
	}

	if args.FileSize > 0 {
		body["file_size"] = args.FileSize
	}

	if args.FileUrl != "" {
		body["file_url"] = args.FileUrl
	}

	body["fisheye_video_cropped"] = args.FisheyeVideoCropped

	if args.Formatting != "" {
		body["formatting"] = args.Formatting
	}

	if args.Fov > 0 {
		body["fov"] = args.Fov
	}

	if args.FrontZRotation != 0 {
		body["front_z_rotation"] = args.FrontZRotation
	}

	if args.FunFactPromptId != "" {
		body["fun_fact_prompt_id"] = args.FunFactPromptId
	}

	if args.FunFactToasteeId > 0 {
		body["fun_fact_toastee_id"] = args.FunFactToasteeId
	}

	if args.Guide != nil {
		body["guide"] = args.Guide
	}

	body["guide_enabled"] = args.GuideEnabled

	if args.InitialHeading > 0 {
		body["initial_heading"] = args.InitialHeading
	}

	if args.InitialPitch > 0 {
		body["initial_pitch"] = args.InitialPitch
	}

	if args.InstantGameEntryPointData != "" {
		body["instant_game_entry_point_data"] = args.InstantGameEntryPointData
	}

	body["is_boost_intended"] = args.IsBoostIntended

	body["is_explicit_share"] = args.IsExplicitShare

	body["is_group_linking_post"] = args.IsGroupLinkingPost

	body["is_partnership_ad"] = args.IsPartnershipAd

	body["is_voice_clip"] = args.IsVoiceClip

	if args.LocationSourceId != "" {
		body["location_source_id"] = args.LocationSourceId
	}

	body["manual_privacy"] = args.ManualPrivacy

	body["no_story"] = args.NoStory

	if args.OgActionTypeId != "" {
		body["og_action_type_id"] = args.OgActionTypeId
	}

	if args.OgIconId != "" {
		body["og_icon_id"] = args.OgIconId
	}

	if args.OgObjectId != "" {
		body["og_object_id"] = args.OgObjectId
	}

	if args.OgPhrase != "" {
		body["og_phrase"] = args.OgPhrase
	}

	if args.OgSuggestionMechanism != "" {
		body["og_suggestion_mechanism"] = args.OgSuggestionMechanism
	}

	if args.OriginalFov > 0 {
		body["original_fov"] = args.OriginalFov
	}

	if args.OriginalProjectionType != "" {
		body["original_projection_type"] = args.OriginalProjectionType
	}

	if args.PartnershipAdAdCode != "" {
		body["partnership_ad_ad_code"] = args.PartnershipAdAdCode
	}

	if args.Privacy != "" {
		body["privacy"] = args.Privacy
	}

	if args.PublishEventId > 0 {
		body["publish_event_id"] = args.PublishEventId
	}

	if args.ReferencedStickerId != "" {
		body["referenced_sticker_id"] = args.ReferencedStickerId
	}

	if args.ReplaceVideoId != "" {
		body["replace_video_id"] = args.ReplaceVideoId
	}

	if args.SlideshowSpec != nil {
		body["slideshow_spec"] = args.SlideshowSpec
	}

	if args.Source != "" {
		body["source"] = args.Source
	}

	if args.SourceInstagramMediaId != "" {
		body["source_instagram_media_id"] = args.SourceInstagramMediaId
	}

	body["spherical"] = args.Spherical

	if args.SponsorId != "" {
		body["sponsor_id"] = args.SponsorId
	}

	if args.StartOffset > 0 {
		body["start_offset"] = args.StartOffset
	}

	if args.SwapMode != "" {
		body["swap_mode"] = args.SwapMode
	}

	if args.TextFormatMetadata != "" {
		body["text_format_metadata"] = args.TextFormatMetadata
	}

	if args.Thumb != nil {
		body["thumb"] = args.Thumb
	}

	if args.TimeSinceOriginalPost > 0 {
		body["time_since_original_post"] = args.TimeSinceOriginalPost
	}

	if args.Title != "" {
		body["title"] = args.Title
	}

	if args.TranscodeSettingProperties != "" {
		body["transcode_setting_properties"] = args.TranscodeSettingProperties
	}

	if args.UnpublishedContentType != "" {
		body["unpublished_content_type"] = args.UnpublishedContentType
	}

	if args.UploadPhase != "" {
		body["upload_phase"] = args.UploadPhase
	}

	if args.UploadSessionId != "" {
		body["upload_session_id"] = args.UploadSessionId
	}

	if args.UploadSettingProperties != "" {
		body["upload_setting_properties"] = args.UploadSettingProperties
	}

	if args.VideoFileChunk != "" {
		body["video_file_chunk"] = args.VideoFileChunk
	}

	if args.VideoIdOriginal != "" {
		body["video_id_original"] = args.VideoIdOriginal
	}

	if args.VideoStartTimeMs > 0 {
		body["video_start_time_ms"] = args.VideoStartTimeMs
	}

	if args.WaterfallId != "" {
		body["waterfall_id"] = args.WaterfallId
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "videos")

	return ExecutePOSTRequest(ctx, url, body)

}

// DeleteUserHandler handles delete_user with typed arguments
func DeleteUserHandler(ctx context.Context, request mcp.CallToolRequest, args delete_userArgs) (*mcp.CallToolResult, error) {

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "")

	return ExecuteDELETERequest(ctx, url)

}

// GetUserHandler handles get_user with typed arguments
func GetUserHandler(ctx context.Context, request mcp.CallToolRequest, args get_userArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields for the return type
		defaultFields := GetDefaultFields("User")
		log.Printf("Using default fields for User (return type): %v", defaultFields)
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UpdateUserHandler handles update_user with typed arguments
func UpdateUserHandler(ctx context.Context, request mcp.CallToolRequest, args update_userArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.EmojiColorPref > 0 {
		body["emoji_color_pref"] = args.EmojiColorPref
	}

	if args.Firstname != "" {
		body["firstname"] = args.Firstname
	}

	if args.Lastname != "" {
		body["lastname"] = args.Lastname
	}

	if args.LocalNewsMegaphoneDismissStatus != "" {
		body["local_news_megaphone_dismiss_status"] = args.LocalNewsMegaphoneDismissStatus
	}

	if args.LocalNewsSubscriptionStatus != "" {
		body["local_news_subscription_status"] = args.LocalNewsSubscriptionStatus
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.Password != "" {
		body["password"] = args.Password
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "")

	return ExecutePOSTRequest(ctx, url, body)

}

// RegisterUserTools registers all User tools with the MCP server
func RegisterUserTools(s *server.MCPServer) error {

	// Register remove_access_tokens_from_user
	s.AddTool(
		mcp.NewTool("remove_access_tokens_from_user",
			mcp.WithDescription("Remove access_tokens from this User"),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
		),
		mcp.NewTypedToolHandler(RemoveAccessTokensFromUserHandler),
	)

	// Register create_user_access_token
	s.AddTool(
		mcp.NewTool("create_user_access_token",
			mcp.WithDescription("Create or update access_tokens for this User Returns User. Required: business_app"),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithString("business_app",
				mcp.Required(),
				mcp.Description("business_app"),
			),
			mcp.WithString("page_id",
				mcp.Description("page_id"),
			),
			mcp.WithArray("scope",
				mcp.Description("scope"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithBoolean("set_token_expires_in_60_days",
				mcp.Description("set_token_expires_in_60_days"),
			),
		),
		mcp.NewTypedToolHandler(CreateUserAccessTokenHandler),
	)

	// Register list_user_accounts
	s.AddTool(
		mcp.NewTool("list_user_accounts",
			mcp.WithDescription("List accounts for this User Returns Page."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithString("ad_id",
				mcp.Description("ad_id"),
			),
			mcp.WithBoolean("is_place",
				mcp.Description("is_place"),
			),
			mcp.WithBoolean("is_promotable",
				mcp.Description("is_promotable"),
			),
		),
		mcp.NewTypedToolHandler(ListUserAccountsHandler),
	)

	// Register create_user_account
	s.AddTool(
		mcp.NewTool("create_user_account",
			mcp.WithDescription("Create or update accounts for this User Required: name"),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithString("about",
				mcp.Description("about"),
			),
			mcp.WithString("address",
				mcp.Description("address"),
			),
			mcp.WithNumber("category",
				mcp.Description("category"),
			),
			mcp.WithString("category_enum",
				mcp.Description("category_enum"),
			),
			mcp.WithArray("category_list",
				mcp.Description("category_list"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithString("city_id",
				mcp.Description("city_id"),
			),
			mcp.WithObject("coordinates",
				mcp.Description("coordinates"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithObject("cover_photo",
				mcp.Description("cover_photo"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithString("description",
				mcp.Description("description"),
			),
			mcp.WithBoolean("ignore_coordinate_warnings",
				mcp.Description("ignore_coordinate_warnings"),
			),
			mcp.WithObject("location",
				mcp.Description("location"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithString("name",
				mcp.Required(),
				mcp.Description("name"),
			),
			mcp.WithString("phone",
				mcp.Description("phone"),
			),
			mcp.WithString("picture",
				mcp.Description("picture"),
			),
			mcp.WithString("website",
				mcp.Description("website"),
			),
			mcp.WithString("zip",
				mcp.Description("zip"),
			),
		),
		mcp.NewTypedToolHandler(CreateUserAccountHandler),
	)

	// Register list_user_ad_studies
	s.AddTool(
		mcp.NewTool("list_user_ad_studies",
			mcp.WithDescription("List ad_studies for this User Returns AdStudy."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
		),
		mcp.NewTypedToolHandler(ListUserAdStudiesHandler),
	)

	// Register create_user_ad_studie
	s.AddTool(
		mcp.NewTool("create_user_ad_studie",
			mcp.WithDescription("Associate ad_studies with this User Returns AdStudy."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("cells",
				mcp.Description("cells"),
				mcp.Items(map[string]any{"type": "object"}),
			),
			mcp.WithString("client_business",
				mcp.Description("client_business"),
			),
			mcp.WithNumber("confidence_level",
				mcp.Description("confidence_level"),
			),
			mcp.WithNumber("cooldown_start_time",
				mcp.Description("cooldown_start_time"),
			),
			mcp.WithString("description",
				mcp.Description("description"),
			),
			mcp.WithNumber("end_time",
				mcp.Description("end_time"),
			),
			mcp.WithString("name",
				mcp.Description("name"),
			),
			mcp.WithArray("objectives",
				mcp.Description("objectives"),
				mcp.Items(map[string]any{"type": "object"}),
			),
			mcp.WithNumber("observation_end_time",
				mcp.Description("observation_end_time"),
			),
			mcp.WithNumber("start_time",
				mcp.Description("start_time"),
			),
			mcp.WithString("type",
				mcp.Description("type (enum: userad_studies_type_enum_param)"),
			),
			mcp.WithArray("viewers",
				mcp.Description("viewers"),
				mcp.Items(map[string]any{"type": "string"}),
			),
		),
		mcp.NewTypedToolHandler(CreateUserAdStudieHandler),
	)

	// Register list_user_adaccounts
	s.AddTool(
		mcp.NewTool("list_user_adaccounts",
			mcp.WithDescription("List adaccounts for this User Returns AdAccount."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
		),
		mcp.NewTypedToolHandler(ListUserAdaccountsHandler),
	)

	// Register list_user_albums
	s.AddTool(
		mcp.NewTool("list_user_albums",
			mcp.WithDescription("List albums for this User Returns Album."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
		),
		mcp.NewTypedToolHandler(ListUserAlbumsHandler),
	)

	// Register create_user_application
	s.AddTool(
		mcp.NewTool("create_user_application",
			mcp.WithDescription("Create or update applications for this User Returns User. Required: business_app"),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithNumber("business_app",
				mcp.Required(),
				mcp.Description("business_app"),
			),
		),
		mcp.NewTypedToolHandler(CreateUserApplicationHandler),
	)

	// Register list_user_apprequestformerrecipients
	s.AddTool(
		mcp.NewTool("list_user_apprequestformerrecipients",
			mcp.WithDescription("List apprequestformerrecipients for this User Returns AppRequestFormerRecipient."),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
		),
		mcp.NewTypedToolHandler(ListUserApprequestformerrecipientsHandler),
	)

	// Register list_user_apprequests
	s.AddTool(
		mcp.NewTool("list_user_apprequests",
			mcp.WithDescription("List apprequests for this User Returns AppRequest."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
		),
		mcp.NewTypedToolHandler(ListUserApprequestsHandler),
	)

	// Register list_user_assigned_ad_accounts
	s.AddTool(
		mcp.NewTool("list_user_assigned_ad_accounts",
			mcp.WithDescription("List assigned_ad_accounts for this User Returns AdAccount."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
		),
		mcp.NewTypedToolHandler(ListUserAssignedAdAccountsHandler),
	)

	// Register list_user_assigned_applications
	s.AddTool(
		mcp.NewTool("list_user_assigned_applications",
			mcp.WithDescription("List assigned_applications for this User Returns Application."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
		),
		mcp.NewTypedToolHandler(ListUserAssignedApplicationsHandler),
	)

	// Register list_user_assigned_business_asset_groups
	s.AddTool(
		mcp.NewTool("list_user_assigned_business_asset_groups",
			mcp.WithDescription("List assigned_business_asset_groups for this User Returns BusinessAssetGroup."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithString("contained_asset_id",
				mcp.Description("contained_asset_id"),
			),
		),
		mcp.NewTypedToolHandler(ListUserAssignedBusinessAssetGroupsHandler),
	)

	// Register list_user_assigned_pages
	s.AddTool(
		mcp.NewTool("list_user_assigned_pages",
			mcp.WithDescription("List assigned_pages for this User Returns Page."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithArray("pages",
				mcp.Description("pages"),
				mcp.Items(map[string]any{"type": "string"}),
			),
		),
		mcp.NewTypedToolHandler(ListUserAssignedPagesHandler),
	)

	// Register list_user_assigned_product_catalogs
	s.AddTool(
		mcp.NewTool("list_user_assigned_product_catalogs",
			mcp.WithDescription("List assigned_product_catalogs for this User Returns ProductCatalog."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
		),
		mcp.NewTypedToolHandler(ListUserAssignedProductCatalogsHandler),
	)

	// Register list_user_avatars
	s.AddTool(
		mcp.NewTool("list_user_avatars",
			mcp.WithDescription("List avatars for this User Returns Avatar."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
		),
		mcp.NewTypedToolHandler(ListUserAvatarsHandler),
	)

	// Register list_user_business_users
	s.AddTool(
		mcp.NewTool("list_user_business_users",
			mcp.WithDescription("List business_users for this User Returns BusinessUser."),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
		),
		mcp.NewTypedToolHandler(ListUserBusinessUsersHandler),
	)

	// Register remove_businesses_from_user
	s.AddTool(
		mcp.NewTool("remove_businesses_from_user",
			mcp.WithDescription("Remove businesses from this User"),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithString("business",
				mcp.Description("business"),
			),
		),
		mcp.NewTypedToolHandler(RemoveBusinessesFromUserHandler),
	)

	// Register list_user_businesses
	s.AddTool(
		mcp.NewTool("list_user_businesses",
			mcp.WithDescription("List businesses for this User Returns Business."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
		),
		mcp.NewTypedToolHandler(ListUserBusinessesHandler),
	)

	// Register create_user_businesse
	s.AddTool(
		mcp.NewTool("create_user_businesse",
			mcp.WithDescription("Create or update businesses for this User Returns Business. Required: name, vertical (enum)"),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithString("child_business_external_id",
				mcp.Description("child_business_external_id"),
			),
			mcp.WithString("email",
				mcp.Description("email"),
			),
			mcp.WithString("name",
				mcp.Required(),
				mcp.Description("name"),
			),
			mcp.WithString("primary_page",
				mcp.Description("primary_page"),
			),
			mcp.WithString("sales_rep_email",
				mcp.Description("sales_rep_email"),
			),
			mcp.WithString("survey_business_type",
				mcp.Description("survey_business_type (enum: userbusinesses_survey_business_type_enum_param)"),
			),
			mcp.WithNumber("survey_num_assets",
				mcp.Description("survey_num_assets"),
			),
			mcp.WithNumber("survey_num_people",
				mcp.Description("survey_num_people"),
			),
			mcp.WithString("timezone_id",
				mcp.Description("timezone_id (enum: userbusinesses_timezone_id_enum_param)"),
			),
			mcp.WithString("vertical",
				mcp.Required(),
				mcp.Description("vertical (enum: userbusinesses_vertical_enum_param)"),
			),
		),
		mcp.NewTypedToolHandler(CreateUserBusinesseHandler),
	)

	// Register list_user_conversations
	s.AddTool(
		mcp.NewTool("list_user_conversations",
			mcp.WithDescription("List conversations for this User Returns UnifiedThread."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithString("folder",
				mcp.Description("folder"),
			),
			mcp.WithString("platform",
				mcp.Description("platform (enum: userconversations_platform_enum_param)"),
			),
			mcp.WithArray("tags",
				mcp.Description("tags"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithString("user_id",
				mcp.Description("user_id"),
			),
		),
		mcp.NewTypedToolHandler(ListUserConversationsHandler),
	)

	// Register list_user_custom_labels
	s.AddTool(
		mcp.NewTool("list_user_custom_labels",
			mcp.WithDescription("List custom_labels for this User Returns PageUserMessageThreadLabel."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
		),
		mcp.NewTypedToolHandler(ListUserCustomLabelsHandler),
	)

	// Register list_user_events
	s.AddTool(
		mcp.NewTool("list_user_events",
			mcp.WithDescription("List events for this User Returns Event."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithBoolean("include_canceled",
				mcp.Description("include_canceled"),
			),
			mcp.WithString("type",
				mcp.Description("type (enum: userevents_type_enum_param)"),
			),
		),
		mcp.NewTypedToolHandler(ListUserEventsHandler),
	)

	// Register get_user_feed
	s.AddTool(
		mcp.NewTool("get_user_feed",
			mcp.WithDescription("Get feed data for this User Returns Post."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithBoolean("include_hidden",
				mcp.Description("include_hidden"),
			),
			mcp.WithString("q",
				mcp.Description("q"),
			),
			mcp.WithBoolean("show_expired",
				mcp.Description("show_expired"),
			),
			mcp.WithString("since",
				mcp.Description("since"),
			),
			mcp.WithString("until",
				mcp.Description("until"),
			),
			mcp.WithString("with",
				mcp.Description("with"),
			),
		),
		mcp.NewTypedToolHandler(GetUserFeedHandler),
	)

	// Register update_user_feed
	s.AddTool(
		mcp.NewTool("update_user_feed",
			mcp.WithDescription("Create or update feed for this User Returns Post."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithObject("actions",
				mcp.Description("actions"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithString("album_id",
				mcp.Description("album_id"),
			),
			mcp.WithString("android_key_hash",
				mcp.Description("android_key_hash"),
			),
			mcp.WithString("application_id",
				mcp.Description("application_id"),
			),
			mcp.WithNumber("asked_fun_fact_prompt_id",
				mcp.Description("asked_fun_fact_prompt_id"),
			),
			mcp.WithString("asset3d_id",
				mcp.Description("asset3d_id"),
			),
			mcp.WithString("associated_id",
				mcp.Description("associated_id"),
			),
			mcp.WithBoolean("attach_place_suggestion",
				mcp.Description("attach_place_suggestion"),
			),
			mcp.WithArray("attached_media",
				mcp.Description("attached_media"),
				mcp.Items(map[string]any{"type": "object"}),
			),
			mcp.WithBoolean("audience_exp",
				mcp.Description("audience_exp"),
			),
			mcp.WithString("backdated_time",
				mcp.Description("backdated_time"),
			),
			mcp.WithString("backdated_time_granularity",
				mcp.Description("backdated_time_granularity (enum: userfeed_backdated_time_granularity_enum_param)"),
			),
			mcp.WithBoolean("breaking_news",
				mcp.Description("breaking_news"),
			),
			mcp.WithNumber("breaking_news_expiration",
				mcp.Description("breaking_news_expiration"),
			),
			mcp.WithObject("call_to_action",
				mcp.Description("call_to_action"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithString("caption",
				mcp.Description("caption"),
			),
			mcp.WithArray("child_attachments",
				mcp.Description("child_attachments"),
				mcp.Items(map[string]any{"type": "object"}),
			),
			mcp.WithString("client_mutation_id",
				mcp.Description("client_mutation_id"),
			),
			mcp.WithString("composer_entry_picker",
				mcp.Description("composer_entry_picker"),
			),
			mcp.WithString("composer_entry_point",
				mcp.Description("composer_entry_point"),
			),
			mcp.WithNumber("composer_entry_time",
				mcp.Description("composer_entry_time"),
			),
			mcp.WithString("composer_session_events_log",
				mcp.Description("composer_session_events_log"),
			),
			mcp.WithString("composer_session_id",
				mcp.Description("composer_session_id"),
			),
			mcp.WithString("composer_source_surface",
				mcp.Description("composer_source_surface"),
			),
			mcp.WithString("composer_type",
				mcp.Description("composer_type"),
			),
			mcp.WithString("connection_class",
				mcp.Description("connection_class"),
			),
			mcp.WithString("content_attachment",
				mcp.Description("content_attachment"),
			),
			mcp.WithObject("coordinates",
				mcp.Description("coordinates"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithString("cta_link",
				mcp.Description("cta_link"),
			),
			mcp.WithString("cta_type",
				mcp.Description("cta_type"),
			),
			mcp.WithString("description",
				mcp.Description("description"),
			),
			mcp.WithNumber("direct_share_status",
				mcp.Description("direct_share_status"),
			),
			mcp.WithNumber("expanded_height",
				mcp.Description("expanded_height"),
			),
			mcp.WithNumber("expanded_width",
				mcp.Description("expanded_width"),
			),
			mcp.WithObject("feed_targeting",
				mcp.Description("feed_targeting"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithString("formatting",
				mcp.Description("formatting (enum: userfeed_formatting_enum_param)"),
			),
			mcp.WithString("fun_fact_prompt_id",
				mcp.Description("fun_fact_prompt_id"),
			),
			mcp.WithNumber("fun_fact_toastee_id",
				mcp.Description("fun_fact_toastee_id"),
			),
			mcp.WithNumber("height",
				mcp.Description("height"),
			),
			mcp.WithObject("home_checkin_city_id",
				mcp.Description("home_checkin_city_id"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithObject("image_crops",
				mcp.Description("image_crops"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithArray("implicit_with_tags",
				mcp.Description("implicit_with_tags"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithString("instant_game_entry_point_data",
				mcp.Description("instant_game_entry_point_data"),
			),
			mcp.WithString("ios_bundle_id",
				mcp.Description("ios_bundle_id"),
			),
			mcp.WithBoolean("is_backout_draft",
				mcp.Description("is_backout_draft"),
			),
			mcp.WithBoolean("is_boost_intended",
				mcp.Description("is_boost_intended"),
			),
			mcp.WithBoolean("is_explicit_location",
				mcp.Description("is_explicit_location"),
			),
			mcp.WithBoolean("is_explicit_share",
				mcp.Description("is_explicit_share"),
			),
			mcp.WithBoolean("is_group_linking_post",
				mcp.Description("is_group_linking_post"),
			),
			mcp.WithBoolean("is_photo_container",
				mcp.Description("is_photo_container"),
			),
			mcp.WithString("link",
				mcp.Description("link"),
			),
			mcp.WithString("location_source_id",
				mcp.Description("location_source_id"),
			),
			mcp.WithBoolean("manual_privacy",
				mcp.Description("manual_privacy"),
			),
			mcp.WithString("message",
				mcp.Description("message"),
			),
			mcp.WithBoolean("multi_share_end_card",
				mcp.Description("multi_share_end_card"),
			),
			mcp.WithBoolean("multi_share_optimized",
				mcp.Description("multi_share_optimized"),
			),
			mcp.WithString("name",
				mcp.Description("name"),
			),
			mcp.WithString("nectar_module",
				mcp.Description("nectar_module"),
			),
			mcp.WithString("object_attachment",
				mcp.Description("object_attachment"),
			),
			mcp.WithString("og_action_type_id",
				mcp.Description("og_action_type_id"),
			),
			mcp.WithBoolean("og_hide_object_attachment",
				mcp.Description("og_hide_object_attachment"),
			),
			mcp.WithString("og_icon_id",
				mcp.Description("og_icon_id"),
			),
			mcp.WithString("og_object_id",
				mcp.Description("og_object_id"),
			),
			mcp.WithString("og_phrase",
				mcp.Description("og_phrase"),
			),
			mcp.WithBoolean("og_set_profile_badge",
				mcp.Description("og_set_profile_badge"),
			),
			mcp.WithString("og_suggestion_mechanism",
				mcp.Description("og_suggestion_mechanism"),
			),
			mcp.WithString("page_recommendation",
				mcp.Description("page_recommendation"),
			),
			mcp.WithString("picture",
				mcp.Description("picture"),
			),
			mcp.WithObject("place",
				mcp.Description("place"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithString("place_attachment_setting",
				mcp.Description("place_attachment_setting (enum: userfeed_place_attachment_setting_enum_param)"),
			),
			mcp.WithString("place_list",
				mcp.Description("place_list"),
			),
			mcp.WithString("place_list_data",
				mcp.Description("place_list_data"),
			),
			mcp.WithArray("post_surfaces_blacklist",
				mcp.Description("post_surfaces_blacklist"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithString("posting_to_redspace",
				mcp.Description("posting_to_redspace (enum: userfeed_posting_to_redspace_enum_param)"),
			),
			mcp.WithString("privacy",
				mcp.Description("privacy"),
			),
			mcp.WithString("prompt_id",
				mcp.Description("prompt_id"),
			),
			mcp.WithString("prompt_tracking_string",
				mcp.Description("prompt_tracking_string"),
			),
			mcp.WithObject("properties",
				mcp.Description("properties"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithString("proxied_app_id",
				mcp.Description("proxied_app_id"),
			),
			mcp.WithNumber("publish_event_id",
				mcp.Description("publish_event_id"),
			),
			mcp.WithBoolean("published",
				mcp.Description("published"),
			),
			mcp.WithString("quote",
				mcp.Description("quote"),
			),
			mcp.WithArray("ref",
				mcp.Description("ref"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithArray("referenceable_image_ids",
				mcp.Description("referenceable_image_ids"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithString("referral_id",
				mcp.Description("referral_id"),
			),
			mcp.WithString("scheduled_publish_time",
				mcp.Description("scheduled_publish_time"),
			),
			mcp.WithString("source",
				mcp.Description("source"),
			),
			mcp.WithString("sponsor_id",
				mcp.Description("sponsor_id"),
			),
			mcp.WithNumber("sponsor_relationship",
				mcp.Description("sponsor_relationship"),
			),
			mcp.WithObject("suggested_place_id",
				mcp.Description("suggested_place_id"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithArray("tags",
				mcp.Description("tags"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithString("target_surface",
				mcp.Description("target_surface (enum: userfeed_target_surface_enum_param)"),
			),
			mcp.WithObject("targeting",
				mcp.Description("targeting"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithString("text_format_metadata",
				mcp.Description("text_format_metadata"),
			),
			mcp.WithString("text_format_preset_id",
				mcp.Description("text_format_preset_id"),
			),
			mcp.WithString("text_only_place",
				mcp.Description("text_only_place"),
			),
			mcp.WithString("thumbnail",
				mcp.Description("thumbnail"),
			),
			mcp.WithNumber("time_since_original_post",
				mcp.Description("time_since_original_post"),
			),
			mcp.WithString("title",
				mcp.Description("title"),
			),
			mcp.WithString("tracking_info",
				mcp.Description("tracking_info"),
			),
			mcp.WithString("unpublished_content_type",
				mcp.Description("unpublished_content_type (enum: userfeed_unpublished_content_type_enum_param)"),
			),
			mcp.WithBoolean("user_selected_tags",
				mcp.Description("user_selected_tags"),
			),
			mcp.WithNumber("video_start_time_ms",
				mcp.Description("video_start_time_ms"),
			),
			mcp.WithObject("viewer_coordinates",
				mcp.Description("viewer_coordinates"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithNumber("width",
				mcp.Description("width"),
			),
		),
		mcp.NewTypedToolHandler(UpdateUserFeedHandler),
	)

	// Register list_user_friends
	s.AddTool(
		mcp.NewTool("list_user_friends",
			mcp.WithDescription("List friends for this User Returns User."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithNumber("uid",
				mcp.Description("uid"),
			),
		),
		mcp.NewTypedToolHandler(ListUserFriendsHandler),
	)

	// Register list_user_fundraisers
	s.AddTool(
		mcp.NewTool("list_user_fundraisers",
			mcp.WithDescription("List fundraisers for this User Returns FundraiserPersonToCharity."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
		),
		mcp.NewTypedToolHandler(ListUserFundraisersHandler),
	)

	// Register create_user_fundraiser
	s.AddTool(
		mcp.NewTool("create_user_fundraiser",
			mcp.WithDescription("Create or update fundraisers for this User Returns FundraiserPersonToCharity. Required: currency, description, end_time, external_id, fundraiser_type (enum), goal_amount, name"),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithString("charity_id",
				mcp.Description("charity_id"),
			),
			mcp.WithString("cover_photo",
				mcp.Description("cover_photo"),
			),
			mcp.WithString("currency",
				mcp.Required(),
				mcp.Description("currency"),
			),
			mcp.WithString("description",
				mcp.Required(),
				mcp.Description("description"),
			),
			mcp.WithString("end_time",
				mcp.Required(),
				mcp.Description("end_time"),
			),
			mcp.WithString("external_event_name",
				mcp.Description("external_event_name"),
			),
			mcp.WithString("external_event_start_time",
				mcp.Description("external_event_start_time"),
			),
			mcp.WithString("external_event_uri",
				mcp.Description("external_event_uri"),
			),
			mcp.WithString("external_fundraiser_uri",
				mcp.Description("external_fundraiser_uri"),
			),
			mcp.WithString("external_id",
				mcp.Required(),
				mcp.Description("external_id"),
			),
			mcp.WithString("fundraiser_type",
				mcp.Required(),
				mcp.Description("fundraiser_type (enum: userfundraisers_fundraiser_type_enum_param)"),
			),
			mcp.WithNumber("goal_amount",
				mcp.Required(),
				mcp.Description("goal_amount"),
			),
			mcp.WithString("name",
				mcp.Required(),
				mcp.Description("name"),
			),
			mcp.WithString("page_id",
				mcp.Description("page_id"),
			),
		),
		mcp.NewTypedToolHandler(CreateUserFundraiserHandler),
	)

	// Register list_user_groups
	s.AddTool(
		mcp.NewTool("list_user_groups",
			mcp.WithDescription("List groups for this User Returns Group."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithBoolean("admin_only",
				mcp.Description("admin_only"),
			),
			mcp.WithString("parent",
				mcp.Description("parent"),
			),
		),
		mcp.NewTypedToolHandler(ListUserGroupsHandler),
	)

	// Register list_user_ids_for_apps
	s.AddTool(
		mcp.NewTool("list_user_ids_for_apps",
			mcp.WithDescription("List ids_for_apps for this User Returns UserIDForApp."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithNumber("app",
				mcp.Description("app"),
			),
		),
		mcp.NewTypedToolHandler(ListUserIdsForAppsHandler),
	)

	// Register list_user_ids_for_business
	s.AddTool(
		mcp.NewTool("list_user_ids_for_business",
			mcp.WithDescription("List ids_for_business for this User Returns UserIDForApp."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithNumber("app",
				mcp.Description("app"),
			),
		),
		mcp.NewTypedToolHandler(ListUserIdsForBusinessHandler),
	)

	// Register list_user_ids_for_pages
	s.AddTool(
		mcp.NewTool("list_user_ids_for_pages",
			mcp.WithDescription("List ids_for_pages for this User Returns UserIDForPage."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithNumber("page",
				mcp.Description("page"),
			),
		),
		mcp.NewTypedToolHandler(ListUserIdsForPagesHandler),
	)

	// Register list_user_likes
	s.AddTool(
		mcp.NewTool("list_user_likes",
			mcp.WithDescription("List likes for this User Returns Page."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithString("target_id",
				mcp.Description("target_id"),
			),
		),
		mcp.NewTypedToolHandler(ListUserLikesHandler),
	)

	// Register list_user_live_videos
	s.AddTool(
		mcp.NewTool("list_user_live_videos",
			mcp.WithDescription("List live_videos for this User Returns LiveVideo."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithArray("broadcast_status",
				mcp.Description("broadcast_status"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithString("source",
				mcp.Description("source (enum: userlive_videos_source_enum_param)"),
			),
		),
		mcp.NewTypedToolHandler(ListUserLiveVideosHandler),
	)

	// Register create_user_live_video
	s.AddTool(
		mcp.NewTool("create_user_live_video",
			mcp.WithDescription("Create or update live_videos for this User Returns LiveVideo."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("content_tags",
				mcp.Description("content_tags"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithString("description",
				mcp.Description("description"),
			),
			mcp.WithBoolean("enable_backup_ingest",
				mcp.Description("enable_backup_ingest"),
			),
			mcp.WithString("encoding_settings",
				mcp.Description("encoding_settings"),
			),
			mcp.WithObject("event_params",
				mcp.Description("event_params"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithBoolean("fisheye_video_cropped",
				mcp.Description("fisheye_video_cropped"),
			),
			mcp.WithNumber("front_z_rotation",
				mcp.Description("front_z_rotation"),
			),
			mcp.WithBoolean("is_audio_only",
				mcp.Description("is_audio_only"),
			),
			mcp.WithBoolean("is_spherical",
				mcp.Description("is_spherical"),
			),
			mcp.WithNumber("original_fov",
				mcp.Description("original_fov"),
			),
			mcp.WithString("privacy",
				mcp.Description("privacy"),
			),
			mcp.WithString("projection",
				mcp.Description("projection (enum: userlive_videos_projection_enum_param)"),
			),
			mcp.WithBoolean("published",
				mcp.Description("published"),
			),
			mcp.WithString("schedule_custom_profile_image",
				mcp.Description("schedule_custom_profile_image"),
			),
			mcp.WithString("spatial_audio_format",
				mcp.Description("spatial_audio_format (enum: userlive_videos_spatial_audio_format_enum_param)"),
			),
			mcp.WithString("status",
				mcp.Description("status (enum: userlive_videos_status_enum_param)"),
			),
			mcp.WithString("stereoscopic_mode",
				mcp.Description("stereoscopic_mode (enum: userlive_videos_stereoscopic_mode_enum_param)"),
			),
			mcp.WithBoolean("stop_on_delete_stream",
				mcp.Description("stop_on_delete_stream"),
			),
			mcp.WithString("stream_type",
				mcp.Description("stream_type (enum: userlive_videos_stream_type_enum_param)"),
			),
			mcp.WithString("title",
				mcp.Description("title"),
			),
		),
		mcp.NewTypedToolHandler(CreateUserLiveVideoHandler),
	)

	// Register create_user_messenger_desktop_performance_trace
	s.AddTool(
		mcp.NewTool("create_user_messenger_desktop_performance_trace",
			mcp.WithDescription("Create or update messenger_desktop_performance_traces for this User Returns User."),
		),
		mcp.NewTypedToolHandler(CreateUserMessengerDesktopPerformanceTraceHandler),
	)

	// Register update_user_messenger_kids_accounts_unread_badge
	s.AddTool(
		mcp.NewTool("update_user_messenger_kids_accounts_unread_badge",
			mcp.WithDescription("Create or update messenger_kids_accounts_unread_badge for this User Returns User. Required: proxied_app_id"),
			mcp.WithNumber("proxied_app_id",
				mcp.Required(),
				mcp.Description("proxied_app_id"),
			),
		),
		mcp.NewTypedToolHandler(UpdateUserMessengerKidsAccountsUnreadBadgeHandler),
	)

	// Register get_user_music
	s.AddTool(
		mcp.NewTool("get_user_music",
			mcp.WithDescription("Get music data for this User Returns Page."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithString("target_id",
				mcp.Description("target_id"),
			),
		),
		mcp.NewTypedToolHandler(GetUserMusicHandler),
	)

	// Register create_user_notification
	s.AddTool(
		mcp.NewTool("create_user_notification",
			mcp.WithDescription("Create or update notifications for this User Returns User."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithString("bot_message_payload_elements",
				mcp.Description("bot_message_payload_elements"),
			),
			mcp.WithArray("filtering",
				mcp.Description("filtering"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithObject("href",
				mcp.Description("href"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithString("label",
				mcp.Description("label"),
			),
			mcp.WithObject("message",
				mcp.Description("message"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithArray("notif_ids",
				mcp.Description("notif_ids"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithString("payload",
				mcp.Description("payload"),
			),
			mcp.WithBoolean("read",
				mcp.Description("read"),
			),
			mcp.WithString("ref",
				mcp.Description("ref"),
			),
			mcp.WithNumber("schedule_interval",
				mcp.Description("schedule_interval"),
			),
			mcp.WithBoolean("seen",
				mcp.Description("seen"),
			),
			mcp.WithObject("template",
				mcp.Description("template"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithString("type",
				mcp.Description("type (enum: usernotifications_type_enum_param)"),
			),
		),
		mcp.NewTypedToolHandler(CreateUserNotificationHandler),
	)

	// Register list_user_payment_transactions
	s.AddTool(
		mcp.NewTool("list_user_payment_transactions",
			mcp.WithDescription("List payment_transactions for this User Returns PaymentEnginePayment."),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
		),
		mcp.NewTypedToolHandler(ListUserPaymentTransactionsHandler),
	)

	// Register remove_permissions_from_user
	s.AddTool(
		mcp.NewTool("remove_permissions_from_user",
			mcp.WithDescription("Remove permissions from this User"),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithString("permission",
				mcp.Description("permission"),
			),
		),
		mcp.NewTypedToolHandler(RemovePermissionsFromUserHandler),
	)

	// Register list_user_permissions
	s.AddTool(
		mcp.NewTool("list_user_permissions",
			mcp.WithDescription("List permissions for this User Returns Permission."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithString("permission",
				mcp.Description("permission"),
			),
			mcp.WithString("status",
				mcp.Description("status (enum: userpermissions_status_enum_param)"),
			),
		),
		mcp.NewTypedToolHandler(ListUserPermissionsHandler),
	)

	// Register list_user_personal_ad_accounts
	s.AddTool(
		mcp.NewTool("list_user_personal_ad_accounts",
			mcp.WithDescription("List personal_ad_accounts for this User Returns AdAccount."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
		),
		mcp.NewTypedToolHandler(ListUserPersonalAdAccountsHandler),
	)

	// Register list_user_photos
	s.AddTool(
		mcp.NewTool("list_user_photos",
			mcp.WithDescription("List photos for this User Returns Photo."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithString("type",
				mcp.Description("type (enum: userphotos_type_enum_param)"),
			),
		),
		mcp.NewTypedToolHandler(ListUserPhotosHandler),
	)

	// Register create_user_photo
	s.AddTool(
		mcp.NewTool("create_user_photo",
			mcp.WithDescription("Create or update photos for this User Returns Photo."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithString("aid",
				mcp.Description("aid"),
			),
			mcp.WithBoolean("allow_spherical_photo",
				mcp.Description("allow_spherical_photo"),
			),
			mcp.WithString("alt_text_custom",
				mcp.Description("alt_text_custom"),
			),
			mcp.WithString("android_key_hash",
				mcp.Description("android_key_hash"),
			),
			mcp.WithString("application_id",
				mcp.Description("application_id"),
			),
			mcp.WithNumber("attempt",
				mcp.Description("attempt"),
			),
			mcp.WithBoolean("audience_exp",
				mcp.Description("audience_exp"),
			),
			mcp.WithString("backdated_time",
				mcp.Description("backdated_time"),
			),
			mcp.WithString("backdated_time_granularity",
				mcp.Description("backdated_time_granularity (enum: userphotos_backdated_time_granularity_enum_param)"),
			),
			mcp.WithString("caption",
				mcp.Description("caption"),
			),
			mcp.WithString("composer_session_id",
				mcp.Description("composer_session_id"),
			),
			mcp.WithNumber("direct_share_status",
				mcp.Description("direct_share_status"),
			),
			mcp.WithObject("feed_targeting",
				mcp.Description("feed_targeting"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithNumber("filter_type",
				mcp.Description("filter_type"),
			),
			mcp.WithBoolean("full_res_is_coming_later",
				mcp.Description("full_res_is_coming_later"),
			),
			mcp.WithNumber("initial_view_heading_override_degrees",
				mcp.Description("initial_view_heading_override_degrees"),
			),
			mcp.WithNumber("initial_view_pitch_override_degrees",
				mcp.Description("initial_view_pitch_override_degrees"),
			),
			mcp.WithNumber("initial_view_vertical_fov_override_degrees",
				mcp.Description("initial_view_vertical_fov_override_degrees"),
			),
			mcp.WithString("ios_bundle_id",
				mcp.Description("ios_bundle_id"),
			),
			mcp.WithBoolean("is_explicit_location",
				mcp.Description("is_explicit_location"),
			),
			mcp.WithBoolean("is_explicit_place",
				mcp.Description("is_explicit_place"),
			),
			mcp.WithBoolean("manual_privacy",
				mcp.Description("manual_privacy"),
			),
			mcp.WithString("message",
				mcp.Description("message"),
			),
			mcp.WithString("name",
				mcp.Description("name"),
			),
			mcp.WithBoolean("no_story",
				mcp.Description("no_story"),
			),
			mcp.WithNumber("offline_id",
				mcp.Description("offline_id"),
			),
			mcp.WithString("og_action_type_id",
				mcp.Description("og_action_type_id"),
			),
			mcp.WithString("og_icon_id",
				mcp.Description("og_icon_id"),
			),
			mcp.WithString("og_object_id",
				mcp.Description("og_object_id"),
			),
			mcp.WithString("og_phrase",
				mcp.Description("og_phrase"),
			),
			mcp.WithBoolean("og_set_profile_badge",
				mcp.Description("og_set_profile_badge"),
			),
			mcp.WithString("og_suggestion_mechanism",
				mcp.Description("og_suggestion_mechanism"),
			),
			mcp.WithObject("place",
				mcp.Description("place"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithString("privacy",
				mcp.Description("privacy"),
			),
			mcp.WithNumber("profile_id",
				mcp.Description("profile_id"),
			),
			mcp.WithObject("provenance_info",
				mcp.Description("provenance_info"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithString("proxied_app_id",
				mcp.Description("proxied_app_id"),
			),
			mcp.WithBoolean("published",
				mcp.Description("published"),
			),
			mcp.WithString("qn",
				mcp.Description("qn"),
			),
			mcp.WithNumber("scheduled_publish_time",
				mcp.Description("scheduled_publish_time"),
			),
			mcp.WithObject("spherical_metadata",
				mcp.Description("spherical_metadata"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithString("sponsor_id",
				mcp.Description("sponsor_id"),
			),
			mcp.WithNumber("sponsor_relationship",
				mcp.Description("sponsor_relationship"),
			),
			mcp.WithArray("tags",
				mcp.Description("tags"),
				mcp.Items(map[string]any{"type": "object"}),
			),
			mcp.WithNumber("target_id",
				mcp.Description("target_id"),
			),
			mcp.WithObject("targeting",
				mcp.Description("targeting"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithNumber("time_since_original_post",
				mcp.Description("time_since_original_post"),
			),
			mcp.WithNumber("uid",
				mcp.Description("uid"),
			),
			mcp.WithString("unpublished_content_type",
				mcp.Description("unpublished_content_type (enum: userphotos_unpublished_content_type_enum_param)"),
			),
			mcp.WithString("url",
				mcp.Description("url"),
			),
			mcp.WithBoolean("user_selected_tags",
				mcp.Description("user_selected_tags"),
			),
			mcp.WithString("vault_image_id",
				mcp.Description("vault_image_id"),
			),
		),
		mcp.NewTypedToolHandler(CreateUserPhotoHandler),
	)

	// Register get_user_picture
	s.AddTool(
		mcp.NewTool("get_user_picture",
			mcp.WithDescription("Get picture data for this User Returns ProfilePictureSource."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithNumber("height",
				mcp.Description("height"),
			),
			mcp.WithBoolean("redirect",
				mcp.Description("redirect"),
			),
			mcp.WithString("type",
				mcp.Description("type (enum: userpicture_type_enum_param)"),
			),
			mcp.WithNumber("width",
				mcp.Description("width"),
			),
		),
		mcp.NewTypedToolHandler(GetUserPictureHandler),
	)

	// Register list_user_posts
	s.AddTool(
		mcp.NewTool("list_user_posts",
			mcp.WithDescription("List posts for this User Returns Post."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithBoolean("include_hidden",
				mcp.Description("include_hidden"),
			),
			mcp.WithString("q",
				mcp.Description("q"),
			),
			mcp.WithBoolean("show_expired",
				mcp.Description("show_expired"),
			),
			mcp.WithString("since",
				mcp.Description("since"),
			),
			mcp.WithString("until",
				mcp.Description("until"),
			),
			mcp.WithString("with",
				mcp.Description("with"),
			),
		),
		mcp.NewTypedToolHandler(ListUserPostsHandler),
	)

	// Register list_user_rich_media_documents
	s.AddTool(
		mcp.NewTool("list_user_rich_media_documents",
			mcp.WithDescription("List rich_media_documents for this User Returns Canvas."),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithString("query",
				mcp.Description("query"),
			),
		),
		mcp.NewTypedToolHandler(ListUserRichMediaDocumentsHandler),
	)

	// Register create_user_staging_resource
	s.AddTool(
		mcp.NewTool("create_user_staging_resource",
			mcp.WithDescription("Create or update staging_resources for this User Returns User."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithString("file",
				mcp.Description("file"),
			),
		),
		mcp.NewTypedToolHandler(CreateUserStagingResourceHandler),
	)

	// Register list_user_videos
	s.AddTool(
		mcp.NewTool("list_user_videos",
			mcp.WithDescription("List videos for this User Returns AdVideo."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
			mcp.WithString("type",
				mcp.Description("type (enum: uservideos_type_enum_param)"),
			),
		),
		mcp.NewTypedToolHandler(ListUserVideosHandler),
	)

	// Register create_user_video
	s.AddTool(
		mcp.NewTool("create_user_video",
			mcp.WithDescription("Create or update videos for this User Returns AdVideo."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithString("application_id",
				mcp.Description("application_id"),
			),
			mcp.WithNumber("asked_fun_fact_prompt_id",
				mcp.Description("asked_fun_fact_prompt_id"),
			),
			mcp.WithString("audio_story_wave_animation_handle",
				mcp.Description("audio_story_wave_animation_handle"),
			),
			mcp.WithString("composer_entry_picker",
				mcp.Description("composer_entry_picker"),
			),
			mcp.WithString("composer_entry_point",
				mcp.Description("composer_entry_point"),
			),
			mcp.WithNumber("composer_entry_time",
				mcp.Description("composer_entry_time"),
			),
			mcp.WithString("composer_session_events_log",
				mcp.Description("composer_session_events_log"),
			),
			mcp.WithString("composer_session_id",
				mcp.Description("composer_session_id"),
			),
			mcp.WithString("composer_source_surface",
				mcp.Description("composer_source_surface"),
			),
			mcp.WithString("composer_type",
				mcp.Description("composer_type"),
			),
			mcp.WithString("container_type",
				mcp.Description("container_type (enum: uservideos_container_type_enum_param)"),
			),
			mcp.WithString("content_category",
				mcp.Description("content_category (enum: uservideos_content_category_enum_param)"),
			),
			mcp.WithString("creative_tools",
				mcp.Description("creative_tools"),
			),
			mcp.WithString("description",
				mcp.Description("description"),
			),
			mcp.WithNumber("direct_share_status",
				mcp.Description("direct_share_status"),
			),
			mcp.WithBoolean("embeddable",
				mcp.Description("embeddable"),
			),
			mcp.WithNumber("end_offset",
				mcp.Description("end_offset"),
			),
			mcp.WithString("fbuploader_video_file_chunk",
				mcp.Description("fbuploader_video_file_chunk"),
			),
			mcp.WithNumber("file_size",
				mcp.Description("file_size"),
			),
			mcp.WithString("file_url",
				mcp.Description("file_url"),
			),
			mcp.WithBoolean("fisheye_video_cropped",
				mcp.Description("fisheye_video_cropped"),
			),
			mcp.WithString("formatting",
				mcp.Description("formatting (enum: uservideos_formatting_enum_param)"),
			),
			mcp.WithNumber("fov",
				mcp.Description("fov"),
			),
			mcp.WithNumber("front_z_rotation",
				mcp.Description("front_z_rotation"),
			),
			mcp.WithString("fun_fact_prompt_id",
				mcp.Description("fun_fact_prompt_id"),
			),
			mcp.WithNumber("fun_fact_toastee_id",
				mcp.Description("fun_fact_toastee_id"),
			),
			mcp.WithArray("guide",
				mcp.Description("guide"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithBoolean("guide_enabled",
				mcp.Description("guide_enabled"),
			),
			mcp.WithNumber("initial_heading",
				mcp.Description("initial_heading"),
			),
			mcp.WithNumber("initial_pitch",
				mcp.Description("initial_pitch"),
			),
			mcp.WithString("instant_game_entry_point_data",
				mcp.Description("instant_game_entry_point_data"),
			),
			mcp.WithBoolean("is_boost_intended",
				mcp.Description("is_boost_intended"),
			),
			mcp.WithBoolean("is_explicit_share",
				mcp.Description("is_explicit_share"),
			),
			mcp.WithBoolean("is_group_linking_post",
				mcp.Description("is_group_linking_post"),
			),
			mcp.WithBoolean("is_partnership_ad",
				mcp.Description("is_partnership_ad"),
			),
			mcp.WithBoolean("is_voice_clip",
				mcp.Description("is_voice_clip"),
			),
			mcp.WithString("location_source_id",
				mcp.Description("location_source_id"),
			),
			mcp.WithBoolean("manual_privacy",
				mcp.Description("manual_privacy"),
			),
			mcp.WithBoolean("no_story",
				mcp.Description("no_story"),
			),
			mcp.WithString("og_action_type_id",
				mcp.Description("og_action_type_id"),
			),
			mcp.WithString("og_icon_id",
				mcp.Description("og_icon_id"),
			),
			mcp.WithString("og_object_id",
				mcp.Description("og_object_id"),
			),
			mcp.WithString("og_phrase",
				mcp.Description("og_phrase"),
			),
			mcp.WithString("og_suggestion_mechanism",
				mcp.Description("og_suggestion_mechanism"),
			),
			mcp.WithNumber("original_fov",
				mcp.Description("original_fov"),
			),
			mcp.WithString("original_projection_type",
				mcp.Description("original_projection_type (enum: uservideos_original_projection_type_enum_param)"),
			),
			mcp.WithString("partnership_ad_ad_code",
				mcp.Description("partnership_ad_ad_code"),
			),
			mcp.WithString("privacy",
				mcp.Description("privacy"),
			),
			mcp.WithNumber("publish_event_id",
				mcp.Description("publish_event_id"),
			),
			mcp.WithString("referenced_sticker_id",
				mcp.Description("referenced_sticker_id"),
			),
			mcp.WithString("replace_video_id",
				mcp.Description("replace_video_id"),
			),
			mcp.WithObject("slideshow_spec",
				mcp.Description("slideshow_spec"),
				mcp.AdditionalProperties(true),
			),
			mcp.WithString("source",
				mcp.Description("source"),
			),
			mcp.WithString("source_instagram_media_id",
				mcp.Description("source_instagram_media_id"),
			),
			mcp.WithBoolean("spherical",
				mcp.Description("spherical"),
			),
			mcp.WithString("sponsor_id",
				mcp.Description("sponsor_id"),
			),
			mcp.WithNumber("start_offset",
				mcp.Description("start_offset"),
			),
			mcp.WithString("swap_mode",
				mcp.Description("swap_mode (enum: uservideos_swap_mode_enum_param)"),
			),
			mcp.WithString("text_format_metadata",
				mcp.Description("text_format_metadata"),
			),
			mcp.WithString("thumb",
				mcp.Description("thumb"),
			),
			mcp.WithNumber("time_since_original_post",
				mcp.Description("time_since_original_post"),
			),
			mcp.WithString("title",
				mcp.Description("title"),
			),
			mcp.WithString("transcode_setting_properties",
				mcp.Description("transcode_setting_properties"),
			),
			mcp.WithString("unpublished_content_type",
				mcp.Description("unpublished_content_type (enum: uservideos_unpublished_content_type_enum_param)"),
			),
			mcp.WithString("upload_phase",
				mcp.Description("upload_phase (enum: uservideos_upload_phase_enum_param)"),
			),
			mcp.WithString("upload_session_id",
				mcp.Description("upload_session_id"),
			),
			mcp.WithString("upload_setting_properties",
				mcp.Description("upload_setting_properties"),
			),
			mcp.WithString("video_file_chunk",
				mcp.Description("video_file_chunk"),
			),
			mcp.WithString("video_id_original",
				mcp.Description("video_id_original"),
			),
			mcp.WithNumber("video_start_time_ms",
				mcp.Description("video_start_time_ms"),
			),
			mcp.WithString("waterfall_id",
				mcp.Description("waterfall_id"),
			),
		),
		mcp.NewTypedToolHandler(CreateUserVideoHandler),
	)

	// Register delete_user
	s.AddTool(
		mcp.NewTool("delete_user",
			mcp.WithDescription("Delete a User"),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
		),
		mcp.NewTypedToolHandler(DeleteUserHandler),
	)

	// Register get_user
	s.AddTool(
		mcp.NewTool("get_user",
			mcp.WithDescription("Get details of a specific User Returns User."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithArray("fields",
				mcp.Description("Fields to return"),
				mcp.Items(map[string]any{"type": "string"}),
			),
			mcp.WithNumber("limit",
				mcp.Description("Maximum number of results"),
			),
			mcp.WithString("after",
				mcp.Description("Cursor for pagination (next page)"),
			),
			mcp.WithString("before",
				mcp.Description("Cursor for pagination (previous page)"),
			),
		),
		mcp.NewTypedToolHandler(GetUserHandler),
	)

	// Register update_user
	s.AddTool(
		mcp.NewTool("update_user",
			mcp.WithDescription("Update a User Returns User."),
			mcp.WithString("id",
				mcp.Required(),
				mcp.Description("User ID"),
			),
			mcp.WithNumber("emoji_color_pref",
				mcp.Description("emoji_color_pref"),
			),
			mcp.WithString("firstname",
				mcp.Description("firstname"),
			),
			mcp.WithString("lastname",
				mcp.Description("lastname"),
			),
			mcp.WithString("local_news_megaphone_dismiss_status",
				mcp.Description("local_news_megaphone_dismiss_status (enum: user_local_news_megaphone_dismiss_status)"),
			),
			mcp.WithString("local_news_subscription_status",
				mcp.Description("local_news_subscription_status (enum: user_local_news_subscription_status)"),
			),
			mcp.WithString("name",
				mcp.Description("name"),
			),
			mcp.WithString("password",
				mcp.Description("password"),
			),
		),
		mcp.NewTypedToolHandler(UpdateUserHandler),
	)

	return nil
}

// User tools: 55 endpoints
