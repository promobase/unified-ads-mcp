// Code generated by codegen. DO NOT EDIT.

package generated

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// user_remove_access_tokensArgs defines the typed arguments for user_remove_access_tokens
type user_remove_access_tokensArgs struct {
	ID string `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
}

// user_create_access_tokenArgs defines the typed arguments for user_create_access_token
type user_create_access_tokenArgs struct {
	ID                      string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	BusinessApp             string   `json:"business_app" jsonschema:"description=Business App,required"`
	PageId                  string   `json:"page_id,omitempty" jsonschema:"description=ID of the Page,pattern=^[0-9]+$"`
	Scope                   []string `json:"scope,omitempty" jsonschema:"description=Scope"`
	SetTokenExpiresIn60Days bool     `json:"set_token_expires_in_60_days,omitempty" jsonschema:"description=Set Token Expires In 60 Days"`
}

// user_list_accountsArgs defines the typed arguments for user_list_accounts
type user_list_accountsArgs struct {
	ID           string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields       []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit        int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After        string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before       string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AdId         string   `json:"ad_id,omitempty" jsonschema:"description=ID of the Ad,pattern=^[0-9]+$"`
	IsPlace      bool     `json:"is_place,omitempty" jsonschema:"description=Is Place"`
	IsPromotable bool     `json:"is_promotable,omitempty" jsonschema:"description=Is Promotable"`
}

// user_create_accountArgs defines the typed arguments for user_create_account
type user_create_accountArgs struct {
	ID                       string                 `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	About                    string                 `json:"about,omitempty" jsonschema:"description=About"`
	Address                  string                 `json:"address,omitempty" jsonschema:"description=Address"`
	Category                 int                    `json:"category,omitempty" jsonschema:"description=Category"`
	CategoryEnum             string                 `json:"category_enum,omitempty" jsonschema:"description=Category Enum"`
	CategoryList             []string               `json:"category_list,omitempty" jsonschema:"description=Category List"`
	CityId                   string                 `json:"city_id,omitempty" jsonschema:"description=ID of the City,pattern=^[0-9]+$"`
	Coordinates              map[string]interface{} `json:"coordinates,omitempty" jsonschema:"description=Coordinates"`
	CoverPhoto               map[string]interface{} `json:"cover_photo,omitempty" jsonschema:"description=Cover Photo"`
	Description              string                 `json:"description,omitempty" jsonschema:"description=Description"`
	IgnoreCoordinateWarnings bool                   `json:"ignore_coordinate_warnings,omitempty" jsonschema:"description=Ignore Coordinate Warnings"`
	Location                 map[string]interface{} `json:"location,omitempty" jsonschema:"description=Location"`
	Name                     string                 `json:"name" jsonschema:"description=Name,required"`
	Phone                    string                 `json:"phone,omitempty" jsonschema:"description=Phone"`
	Picture                  string                 `json:"picture,omitempty" jsonschema:"description=Picture"`
	Website                  string                 `json:"website,omitempty" jsonschema:"description=Website"`
	Zip                      string                 `json:"zip,omitempty" jsonschema:"description=Zip"`
}

// user_list_ad_studiesArgs defines the typed arguments for user_list_ad_studies
type user_list_ad_studiesArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// user_create_ad_studieArgs defines the typed arguments for user_create_ad_studie
type user_create_ad_studieArgs struct {
	ID                 string                   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Cells              []map[string]interface{} `json:"cells,omitempty" jsonschema:"description=Cells"`
	ClientBusiness     string                   `json:"client_business,omitempty" jsonschema:"description=Client Business"`
	ConfidenceLevel    float64                  `json:"confidence_level,omitempty" jsonschema:"description=Confidence Level"`
	CooldownStartTime  int                      `json:"cooldown_start_time,omitempty" jsonschema:"description=Cooldown Start Time"`
	Description        string                   `json:"description,omitempty" jsonschema:"description=Description"`
	EndTime            int                      `json:"end_time,omitempty" jsonschema:"description=End Time"`
	Name               string                   `json:"name,omitempty" jsonschema:"description=Name"`
	Objectives         []map[string]interface{} `json:"objectives,omitempty" jsonschema:"description=Objectives"`
	ObservationEndTime int                      `json:"observation_end_time,omitempty" jsonschema:"description=Observation End Time"`
	StartTime          int                      `json:"start_time,omitempty" jsonschema:"description=Start Time"`
	Type               string                   `json:"type,omitempty" jsonschema:"description=Type"`
	Viewers            []int                    `json:"viewers,omitempty" jsonschema:"description=Viewers"`
}

// user_list_adaccountsArgs defines the typed arguments for user_list_adaccounts
type user_list_adaccountsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// user_list_albumsArgs defines the typed arguments for user_list_albums
type user_list_albumsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// user_create_applicationArgs defines the typed arguments for user_create_application
type user_create_applicationArgs struct {
	ID          string `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	BusinessApp int    `json:"business_app" jsonschema:"description=Business App,required"`
}

// user_list_apprequestformerrecipientsArgs defines the typed arguments for user_list_apprequestformerrecipients
type user_list_apprequestformerrecipientsArgs struct {
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// user_list_apprequestsArgs defines the typed arguments for user_list_apprequests
type user_list_apprequestsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// user_list_assigned_ad_accountsArgs defines the typed arguments for user_list_assigned_ad_accounts
type user_list_assigned_ad_accountsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// user_list_assigned_applicationsArgs defines the typed arguments for user_list_assigned_applications
type user_list_assigned_applicationsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// user_list_assigned_business_asset_groupsArgs defines the typed arguments for user_list_assigned_business_asset_groups
type user_list_assigned_business_asset_groupsArgs struct {
	ID               string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields           []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit            int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After            string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before           string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	ContainedAssetId string   `json:"contained_asset_id,omitempty" jsonschema:"description=ID of the Contained Asset,pattern=^[0-9]+$"`
}

// user_list_assigned_pagesArgs defines the typed arguments for user_list_assigned_pages
type user_list_assigned_pagesArgs struct {
	ID     string        `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string      `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int           `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string        `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string        `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Pages  []interface{} `json:"pages,omitempty" jsonschema:"description=Pages,minimum=13,maximum=100"`
}

// user_list_assigned_product_catalogsArgs defines the typed arguments for user_list_assigned_product_catalogs
type user_list_assigned_product_catalogsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// user_list_avatarsArgs defines the typed arguments for user_list_avatars
type user_list_avatarsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// user_list_business_usersArgs defines the typed arguments for user_list_business_users
type user_list_business_usersArgs struct {
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// user_remove_businessesArgs defines the typed arguments for user_remove_businesses
type user_remove_businessesArgs struct {
	ID       string `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Business string `json:"business,omitempty" jsonschema:"description=Business"`
}

// user_list_businessesArgs defines the typed arguments for user_list_businesses
type user_list_businessesArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// user_create_businesseArgs defines the typed arguments for user_create_businesse
type user_create_businesseArgs struct {
	ID                      string `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	ChildBusinessExternalId string `json:"child_business_external_id,omitempty" jsonschema:"description=ID of the Child Business External,pattern=^[0-9]+$"`
	Email                   string `json:"email,omitempty" jsonschema:"description=Email"`
	Name                    string `json:"name" jsonschema:"description=Name,required"`
	PrimaryPage             string `json:"primary_page,omitempty" jsonschema:"description=Primary Page"`
	SalesRepEmail           string `json:"sales_rep_email,omitempty" jsonschema:"description=Sales Rep Email"`
	SurveyBusinessType      string `json:"survey_business_type,omitempty" jsonschema:"description=Survey Business Type"`
	SurveyNumAssets         int    `json:"survey_num_assets,omitempty" jsonschema:"description=Survey Num Assets"`
	SurveyNumPeople         int    `json:"survey_num_people,omitempty" jsonschema:"description=Survey Num People"`
	TimezoneId              string `json:"timezone_id,omitempty" jsonschema:"description=ID of the Timezone,pattern=^[0-9]+$"`
	Vertical                string `json:"vertical" jsonschema:"description=Vertical,required"`
}

// user_list_conversationsArgs defines the typed arguments for user_list_conversations
type user_list_conversationsArgs struct {
	ID       string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields   []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit    int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After    string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before   string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Folder   string   `json:"folder,omitempty" jsonschema:"description=Folder"`
	Platform string   `json:"platform,omitempty" jsonschema:"description=Platform"`
	Tags     []string `json:"tags,omitempty" jsonschema:"description=Tags"`
	UserId   string   `json:"user_id,omitempty" jsonschema:"description=ID of the User,pattern=^[0-9]+$"`
}

// user_list_custom_labelsArgs defines the typed arguments for user_list_custom_labels
type user_list_custom_labelsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// user_list_eventsArgs defines the typed arguments for user_list_events
type user_list_eventsArgs struct {
	ID              string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields          []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit           int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After           string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before          string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	IncludeCanceled bool     `json:"include_canceled,omitempty" jsonschema:"description=Include Canceled"`
	Type            string   `json:"type,omitempty" jsonschema:"description=Type"`
}

// user_get_feedArgs defines the typed arguments for user_get_feed
type user_get_feedArgs struct {
	ID            string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields        []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit         int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After         string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before        string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	IncludeHidden bool     `json:"include_hidden,omitempty" jsonschema:"description=Include Hidden"`
	Q             string   `json:"q,omitempty" jsonschema:"description=Q"`
	ShowExpired   bool     `json:"show_expired,omitempty" jsonschema:"description=Show Expired"`
	Since         string   `json:"since,omitempty" jsonschema:"description=Since,format=date-time"`
	Until         string   `json:"until,omitempty" jsonschema:"description=Until,format=date-time"`
	With          string   `json:"with,omitempty" jsonschema:"description=With"`
}

// user_update_feedArgs defines the typed arguments for user_update_feed
type user_update_feedArgs struct {
	ID                        string                   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Actions                   map[string]interface{}   `json:"actions,omitempty" jsonschema:"description=Actions"`
	AlbumId                   string                   `json:"album_id,omitempty" jsonschema:"description=ID of the Album,pattern=^[0-9]+$"`
	AndroidKeyHash            string                   `json:"android_key_hash,omitempty" jsonschema:"description=Android Key Hash"`
	ApplicationId             string                   `json:"application_id,omitempty" jsonschema:"description=ID of the Application,pattern=^[0-9]+$"`
	AskedFunFactPromptId      int                      `json:"asked_fun_fact_prompt_id,omitempty" jsonschema:"description=ID of the Asked Fun Fact Prompt,pattern=^[0-9]+$"`
	Asset3dId                 string                   `json:"asset3d_id,omitempty" jsonschema:"description=ID of the Asset3d,pattern=^[0-9]+$"`
	AssociatedId              string                   `json:"associated_id,omitempty" jsonschema:"description=ID of the Associated,pattern=^[0-9]+$"`
	AttachPlaceSuggestion     bool                     `json:"attach_place_suggestion,omitempty" jsonschema:"description=Attach Place Suggestion"`
	AttachedMedia             []map[string]interface{} `json:"attached_media,omitempty" jsonschema:"description=Attached Media"`
	AudienceExp               bool                     `json:"audience_exp,omitempty" jsonschema:"description=Audience Exp"`
	BackdatedTime             string                   `json:"backdated_time,omitempty" jsonschema:"description=Backdated Time,format=date-time"`
	BackdatedTimeGranularity  string                   `json:"backdated_time_granularity,omitempty" jsonschema:"description=Backdated Time Granularity"`
	BreakingNews              bool                     `json:"breaking_news,omitempty" jsonschema:"description=Breaking News"`
	BreakingNewsExpiration    int                      `json:"breaking_news_expiration,omitempty" jsonschema:"description=Breaking News Expiration"`
	CallToAction              map[string]interface{}   `json:"call_to_action,omitempty" jsonschema:"description=Call To Action"`
	Caption                   string                   `json:"caption,omitempty" jsonschema:"description=Caption"`
	ChildAttachments          []map[string]interface{} `json:"child_attachments,omitempty" jsonschema:"description=Child Attachments"`
	ClientMutationId          string                   `json:"client_mutation_id,omitempty" jsonschema:"description=ID of the Client Mutation,pattern=^[0-9]+$"`
	ComposerEntryPicker       string                   `json:"composer_entry_picker,omitempty" jsonschema:"description=Composer Entry Picker"`
	ComposerEntryPoint        string                   `json:"composer_entry_point,omitempty" jsonschema:"description=Composer Entry Point"`
	ComposerEntryTime         int                      `json:"composer_entry_time,omitempty" jsonschema:"description=Composer Entry Time"`
	ComposerSessionEventsLog  string                   `json:"composer_session_events_log,omitempty" jsonschema:"description=Composer Session Events Log"`
	ComposerSessionId         string                   `json:"composer_session_id,omitempty" jsonschema:"description=ID of the Composer Session,pattern=^[0-9]+$"`
	ComposerSourceSurface     string                   `json:"composer_source_surface,omitempty" jsonschema:"description=Composer Source Surface"`
	ComposerType              string                   `json:"composer_type,omitempty" jsonschema:"description=Composer Type"`
	ConnectionClass           string                   `json:"connection_class,omitempty" jsonschema:"description=Connection Class"`
	ContentAttachment         string                   `json:"content_attachment,omitempty" jsonschema:"description=Content Attachment"`
	Coordinates               map[string]interface{}   `json:"coordinates,omitempty" jsonschema:"description=Coordinates"`
	CtaLink                   string                   `json:"cta_link,omitempty" jsonschema:"description=Cta Link"`
	CtaType                   string                   `json:"cta_type,omitempty" jsonschema:"description=Cta Type"`
	Description               string                   `json:"description,omitempty" jsonschema:"description=Description"`
	DirectShareStatus         int                      `json:"direct_share_status,omitempty" jsonschema:"description=Direct Share Status"`
	ExpandedHeight            int                      `json:"expanded_height,omitempty" jsonschema:"description=Expanded Height"`
	ExpandedWidth             int                      `json:"expanded_width,omitempty" jsonschema:"description=Expanded Width"`
	FeedTargeting             map[string]interface{}   `json:"feed_targeting,omitempty" jsonschema:"description=Feed Targeting"`
	Formatting                string                   `json:"formatting,omitempty" jsonschema:"description=Formatting"`
	FunFactPromptId           string                   `json:"fun_fact_prompt_id,omitempty" jsonschema:"description=ID of the Fun Fact Prompt,pattern=^[0-9]+$"`
	FunFactToasteeId          int                      `json:"fun_fact_toastee_id,omitempty" jsonschema:"description=ID of the Fun Fact Toastee,pattern=^[0-9]+$"`
	Height                    int                      `json:"height,omitempty" jsonschema:"description=Height"`
	HomeCheckinCityId         map[string]interface{}   `json:"home_checkin_city_id,omitempty" jsonschema:"description=ID of the Home Checkin City,pattern=^[0-9]+$"`
	ImageCrops                map[string]interface{}   `json:"image_crops,omitempty" jsonschema:"description=Image Crops,minimum=13,maximum=100"`
	ImplicitWithTags          []int                    `json:"implicit_with_tags,omitempty" jsonschema:"description=Implicit With Tags"`
	InstantGameEntryPointData string                   `json:"instant_game_entry_point_data,omitempty" jsonschema:"description=Instant Game Entry Point Data"`
	IosBundleId               string                   `json:"ios_bundle_id,omitempty" jsonschema:"description=ID of the Ios Bundle,pattern=^[0-9]+$"`
	IsBackoutDraft            bool                     `json:"is_backout_draft,omitempty" jsonschema:"description=Is Backout Draft"`
	IsBoostIntended           bool                     `json:"is_boost_intended,omitempty" jsonschema:"description=Is Boost Intended"`
	IsExplicitLocation        bool                     `json:"is_explicit_location,omitempty" jsonschema:"description=Is Explicit Location"`
	IsExplicitShare           bool                     `json:"is_explicit_share,omitempty" jsonschema:"description=Is Explicit Share"`
	IsGroupLinkingPost        bool                     `json:"is_group_linking_post,omitempty" jsonschema:"description=Is Group Linking Post"`
	IsPhotoContainer          bool                     `json:"is_photo_container,omitempty" jsonschema:"description=Is Photo Container"`
	Link                      string                   `json:"link,omitempty" jsonschema:"description=Link"`
	LocationSourceId          string                   `json:"location_source_id,omitempty" jsonschema:"description=ID of the Location Source,pattern=^[0-9]+$"`
	ManualPrivacy             bool                     `json:"manual_privacy,omitempty" jsonschema:"description=Manual Privacy"`
	Message                   string                   `json:"message,omitempty" jsonschema:"description=Message"`
	MultiShareEndCard         bool                     `json:"multi_share_end_card,omitempty" jsonschema:"description=Multi Share End Card"`
	MultiShareOptimized       bool                     `json:"multi_share_optimized,omitempty" jsonschema:"description=Multi Share Optimized"`
	Name                      string                   `json:"name,omitempty" jsonschema:"description=Name"`
	NectarModule              string                   `json:"nectar_module,omitempty" jsonschema:"description=Nectar Module"`
	ObjectAttachment          string                   `json:"object_attachment,omitempty" jsonschema:"description=Object Attachment"`
	OgActionTypeId            string                   `json:"og_action_type_id,omitempty" jsonschema:"description=ID of the Og Action Type,pattern=^[0-9]+$"`
	OgHideObjectAttachment    bool                     `json:"og_hide_object_attachment,omitempty" jsonschema:"description=Og Hide Object Attachment"`
	OgIconId                  string                   `json:"og_icon_id,omitempty" jsonschema:"description=ID of the Og Icon,pattern=^[0-9]+$"`
	OgObjectId                string                   `json:"og_object_id,omitempty" jsonschema:"description=ID of the Og Object,pattern=^[0-9]+$"`
	OgPhrase                  string                   `json:"og_phrase,omitempty" jsonschema:"description=Og Phrase"`
	OgSetProfileBadge         bool                     `json:"og_set_profile_badge,omitempty" jsonschema:"description=Og Set Profile Badge"`
	OgSuggestionMechanism     string                   `json:"og_suggestion_mechanism,omitempty" jsonschema:"description=Og Suggestion Mechanism"`
	PageRecommendation        string                   `json:"page_recommendation,omitempty" jsonschema:"description=Page Recommendation"`
	Picture                   string                   `json:"picture,omitempty" jsonschema:"description=Picture"`
	Place                     map[string]interface{}   `json:"place,omitempty" jsonschema:"description=Place"`
	PlaceAttachmentSetting    string                   `json:"place_attachment_setting,omitempty" jsonschema:"description=Place Attachment Setting"`
	PlaceList                 string                   `json:"place_list,omitempty" jsonschema:"description=Place List"`
	PlaceListData             interface{}              `json:"place_list_data,omitempty" jsonschema:"description=Place List Data"`
	PostSurfacesBlacklist     []string                 `json:"post_surfaces_blacklist,omitempty" jsonschema:"description=Post Surfaces Blacklist"`
	PostingToRedspace         string                   `json:"posting_to_redspace,omitempty" jsonschema:"description=Posting To Redspace"`
	Privacy                   string                   `json:"privacy,omitempty" jsonschema:"description=Privacy"`
	PromptId                  string                   `json:"prompt_id,omitempty" jsonschema:"description=ID of the Prompt,pattern=^[0-9]+$"`
	PromptTrackingString      string                   `json:"prompt_tracking_string,omitempty" jsonschema:"description=Prompt Tracking String"`
	Properties                map[string]interface{}   `json:"properties,omitempty" jsonschema:"description=Properties"`
	ProxiedAppId              string                   `json:"proxied_app_id,omitempty" jsonschema:"description=ID of the Proxied App,pattern=^[0-9]+$"`
	PublishEventId            int                      `json:"publish_event_id,omitempty" jsonschema:"description=ID of the Publish Event,pattern=^[0-9]+$"`
	Published                 bool                     `json:"published,omitempty" jsonschema:"description=Published"`
	Quote                     string                   `json:"quote,omitempty" jsonschema:"description=Quote"`
	Ref                       []string                 `json:"ref,omitempty" jsonschema:"description=Ref"`
	ReferenceableImageIds     []string                 `json:"referenceable_image_ids,omitempty" jsonschema:"description=Referenceable Image Ids,pattern=^[0-9]+$"`
	ReferralId                string                   `json:"referral_id,omitempty" jsonschema:"description=ID of the Referral,pattern=^[0-9]+$"`
	ScheduledPublishTime      string                   `json:"scheduled_publish_time,omitempty" jsonschema:"description=Scheduled Publish Time,format=date-time"`
	Source                    string                   `json:"source,omitempty" jsonschema:"description=Source"`
	SponsorId                 string                   `json:"sponsor_id,omitempty" jsonschema:"description=ID of the Sponsor,pattern=^[0-9]+$"`
	SponsorRelationship       int                      `json:"sponsor_relationship,omitempty" jsonschema:"description=Sponsor Relationship"`
	SuggestedPlaceId          map[string]interface{}   `json:"suggested_place_id,omitempty" jsonschema:"description=ID of the Suggested Place,pattern=^[0-9]+$"`
	Tags                      []int                    `json:"tags,omitempty" jsonschema:"description=Tags"`
	TargetSurface             string                   `json:"target_surface,omitempty" jsonschema:"description=Target Surface"`
	Targeting                 map[string]interface{}   `json:"targeting,omitempty" jsonschema:"description=Targeting"`
	TextFormatMetadata        string                   `json:"text_format_metadata,omitempty" jsonschema:"description=Text Format Metadata"`
	TextFormatPresetId        string                   `json:"text_format_preset_id,omitempty" jsonschema:"description=ID of the Text Format Preset,pattern=^[0-9]+$"`
	TextOnlyPlace             string                   `json:"text_only_place,omitempty" jsonschema:"description=Text Only Place"`
	Thumbnail                 interface{}              `json:"thumbnail,omitempty" jsonschema:"description=Thumbnail"`
	TimeSinceOriginalPost     int                      `json:"time_since_original_post,omitempty" jsonschema:"description=Time Since Original Post"`
	Title                     string                   `json:"title,omitempty" jsonschema:"description=Title"`
	TrackingInfo              string                   `json:"tracking_info,omitempty" jsonschema:"description=Tracking Info"`
	UnpublishedContentType    string                   `json:"unpublished_content_type,omitempty" jsonschema:"description=Unpublished Content Type"`
	UserSelectedTags          bool                     `json:"user_selected_tags,omitempty" jsonschema:"description=User Selected Tags"`
	VideoStartTimeMs          int                      `json:"video_start_time_ms,omitempty" jsonschema:"description=Video Start Time Ms"`
	ViewerCoordinates         map[string]interface{}   `json:"viewer_coordinates,omitempty" jsonschema:"description=Viewer Coordinates"`
	Width                     int                      `json:"width,omitempty" jsonschema:"description=Width"`
}

// user_list_friendsArgs defines the typed arguments for user_list_friends
type user_list_friendsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Uid    int      `json:"uid,omitempty" jsonschema:"description=Uid"`
}

// user_list_fundraisersArgs defines the typed arguments for user_list_fundraisers
type user_list_fundraisersArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// user_create_fundraiserArgs defines the typed arguments for user_create_fundraiser
type user_create_fundraiserArgs struct {
	ID                     string      `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	CharityId              string      `json:"charity_id,omitempty" jsonschema:"description=ID of the Charity,pattern=^[0-9]+$"`
	CoverPhoto             interface{} `json:"cover_photo,omitempty" jsonschema:"description=Cover Photo"`
	Currency               string      `json:"currency" jsonschema:"description=Currency,required"`
	Description            string      `json:"description" jsonschema:"description=Description,required"`
	EndTime                string      `json:"end_time" jsonschema:"description=End Time,required,format=date-time"`
	ExternalEventName      string      `json:"external_event_name,omitempty" jsonschema:"description=External Event Name"`
	ExternalEventStartTime string      `json:"external_event_start_time,omitempty" jsonschema:"description=External Event Start Time,format=date-time"`
	ExternalEventUri       string      `json:"external_event_uri,omitempty" jsonschema:"description=External Event Uri"`
	ExternalFundraiserUri  string      `json:"external_fundraiser_uri,omitempty" jsonschema:"description=External Fundraiser Uri"`
	ExternalId             string      `json:"external_id" jsonschema:"description=ID of the External,required,pattern=^[0-9]+$"`
	FundraiserType         string      `json:"fundraiser_type" jsonschema:"description=Fundraiser Type,required"`
	GoalAmount             int         `json:"goal_amount" jsonschema:"description=Goal Amount,required,minimum=1"`
	Name                   string      `json:"name" jsonschema:"description=Name,required"`
	PageId                 string      `json:"page_id,omitempty" jsonschema:"description=ID of the Page,pattern=^[0-9]+$"`
}

// user_list_groupsArgs defines the typed arguments for user_list_groups
type user_list_groupsArgs struct {
	ID        string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields    []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit     int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After     string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before    string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AdminOnly bool     `json:"admin_only,omitempty" jsonschema:"description=Admin Only"`
	Parent    string   `json:"parent,omitempty" jsonschema:"description=Parent"`
}

// user_list_ids_for_appsArgs defines the typed arguments for user_list_ids_for_apps
type user_list_ids_for_appsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	App    int      `json:"app,omitempty" jsonschema:"description=App"`
}

// user_list_ids_for_businessArgs defines the typed arguments for user_list_ids_for_business
type user_list_ids_for_businessArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	App    int      `json:"app,omitempty" jsonschema:"description=App"`
}

// user_list_ids_for_pagesArgs defines the typed arguments for user_list_ids_for_pages
type user_list_ids_for_pagesArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Page   int      `json:"page,omitempty" jsonschema:"description=Page,minimum=13,maximum=100"`
}

// user_list_likesArgs defines the typed arguments for user_list_likes
type user_list_likesArgs struct {
	ID       string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields   []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit    int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After    string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before   string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	TargetId string   `json:"target_id,omitempty" jsonschema:"description=ID of the Target,pattern=^[0-9]+$"`
}

// user_list_live_videosArgs defines the typed arguments for user_list_live_videos
type user_list_live_videosArgs struct {
	ID              string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields          []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit           int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After           string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before          string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	BroadcastStatus []string `json:"broadcast_status,omitempty" jsonschema:"description=Broadcast Status"`
	Source          string   `json:"source,omitempty" jsonschema:"description=Source"`
}

// user_create_live_videoArgs defines the typed arguments for user_create_live_video
type user_create_live_videoArgs struct {
	ID                         string                 `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	ContentTags                []string               `json:"content_tags,omitempty" jsonschema:"description=Content Tags"`
	Description                string                 `json:"description,omitempty" jsonschema:"description=Description"`
	EnableBackupIngest         bool                   `json:"enable_backup_ingest,omitempty" jsonschema:"description=Enable Backup Ingest"`
	EncodingSettings           string                 `json:"encoding_settings,omitempty" jsonschema:"description=Encoding Settings"`
	EventParams                map[string]interface{} `json:"event_params,omitempty" jsonschema:"description=Event Params"`
	FisheyeVideoCropped        bool                   `json:"fisheye_video_cropped,omitempty" jsonschema:"description=Fisheye Video Cropped"`
	FrontZRotation             float64                `json:"front_z_rotation,omitempty" jsonschema:"description=Front Z Rotation"`
	IsAudioOnly                bool                   `json:"is_audio_only,omitempty" jsonschema:"description=Is Audio Only"`
	IsSpherical                bool                   `json:"is_spherical,omitempty" jsonschema:"description=Is Spherical"`
	OriginalFov                int                    `json:"original_fov,omitempty" jsonschema:"description=Original Fov"`
	Privacy                    string                 `json:"privacy,omitempty" jsonschema:"description=Privacy"`
	Projection                 string                 `json:"projection,omitempty" jsonschema:"description=Projection"`
	Published                  bool                   `json:"published,omitempty" jsonschema:"description=Published"`
	ScheduleCustomProfileImage interface{}            `json:"schedule_custom_profile_image,omitempty" jsonschema:"description=Schedule Custom Profile Image,minimum=13,maximum=100"`
	SpatialAudioFormat         string                 `json:"spatial_audio_format,omitempty" jsonschema:"description=Spatial Audio Format"`
	Status                     string                 `json:"status,omitempty" jsonschema:"description=Status,enum=ACTIVE,enum=PAUSED,enum=DELETED,enum=ARCHIVED"`
	StereoscopicMode           string                 `json:"stereoscopic_mode,omitempty" jsonschema:"description=Stereoscopic Mode"`
	StopOnDeleteStream         bool                   `json:"stop_on_delete_stream,omitempty" jsonschema:"description=Stop On Delete Stream"`
	StreamType                 string                 `json:"stream_type,omitempty" jsonschema:"description=Stream Type"`
	Title                      string                 `json:"title,omitempty" jsonschema:"description=Title"`
}

// user_create_messenger_desktop_performance_traceArgs defines the typed arguments for user_create_messenger_desktop_performance_trace
type user_create_messenger_desktop_performance_traceArgs struct {
}

// user_update_messenger_kids_accounts_unread_badgeArgs defines the typed arguments for user_update_messenger_kids_accounts_unread_badge
type user_update_messenger_kids_accounts_unread_badgeArgs struct {
	ProxiedAppId int `json:"proxied_app_id" jsonschema:"description=ID of the Proxied App,required,pattern=^[0-9]+$"`
}

// user_get_musicArgs defines the typed arguments for user_get_music
type user_get_musicArgs struct {
	ID       string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields   []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit    int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After    string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before   string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	TargetId string   `json:"target_id,omitempty" jsonschema:"description=ID of the Target,pattern=^[0-9]+$"`
}

// user_create_notificationArgs defines the typed arguments for user_create_notification
type user_create_notificationArgs struct {
	ID                        string                 `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	BotMessagePayloadElements string                 `json:"bot_message_payload_elements,omitempty" jsonschema:"description=Bot Message Payload Elements"`
	Filtering                 []string               `json:"filtering,omitempty" jsonschema:"description=Filtering"`
	Href                      map[string]interface{} `json:"href,omitempty" jsonschema:"description=Href"`
	Label                     string                 `json:"label,omitempty" jsonschema:"description=Label"`
	Message                   map[string]interface{} `json:"message,omitempty" jsonschema:"description=Message,minimum=13,maximum=100"`
	NotifIds                  []string               `json:"notif_ids,omitempty" jsonschema:"description=Notif Ids,pattern=^[0-9]+$"`
	Payload                   string                 `json:"payload,omitempty" jsonschema:"description=Payload"`
	Read                      bool                   `json:"read,omitempty" jsonschema:"description=Read"`
	Ref                       string                 `json:"ref,omitempty" jsonschema:"description=Ref"`
	ScheduleInterval          int                    `json:"schedule_interval,omitempty" jsonschema:"description=Schedule Interval"`
	Seen                      bool                   `json:"seen,omitempty" jsonschema:"description=Seen"`
	Template                  map[string]interface{} `json:"template,omitempty" jsonschema:"description=Template"`
	Type                      string                 `json:"type,omitempty" jsonschema:"description=Type"`
}

// user_list_payment_transactionsArgs defines the typed arguments for user_list_payment_transactions
type user_list_payment_transactionsArgs struct {
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// user_remove_permissionsArgs defines the typed arguments for user_remove_permissions
type user_remove_permissionsArgs struct {
	ID         string `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Permission string `json:"permission,omitempty" jsonschema:"description=Permission"`
}

// user_list_permissionsArgs defines the typed arguments for user_list_permissions
type user_list_permissionsArgs struct {
	ID         string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields     []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit      int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After      string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before     string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Permission string   `json:"permission,omitempty" jsonschema:"description=Permission"`
	Status     string   `json:"status,omitempty" jsonschema:"description=Status,enum=ACTIVE,enum=PAUSED,enum=DELETED,enum=ARCHIVED"`
}

// user_list_personal_ad_accountsArgs defines the typed arguments for user_list_personal_ad_accounts
type user_list_personal_ad_accountsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// user_list_photosArgs defines the typed arguments for user_list_photos
type user_list_photosArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Type   string   `json:"type,omitempty" jsonschema:"description=Type"`
}

// user_create_photoArgs defines the typed arguments for user_create_photo
type user_create_photoArgs struct {
	ID                                    string                   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Aid                                   string                   `json:"aid,omitempty" jsonschema:"description=Aid"`
	AllowSphericalPhoto                   bool                     `json:"allow_spherical_photo,omitempty" jsonschema:"description=Allow Spherical Photo"`
	AltTextCustom                         string                   `json:"alt_text_custom,omitempty" jsonschema:"description=Alt Text Custom"`
	AndroidKeyHash                        string                   `json:"android_key_hash,omitempty" jsonschema:"description=Android Key Hash"`
	ApplicationId                         string                   `json:"application_id,omitempty" jsonschema:"description=ID of the Application,pattern=^[0-9]+$"`
	Attempt                               int                      `json:"attempt,omitempty" jsonschema:"description=Attempt"`
	AudienceExp                           bool                     `json:"audience_exp,omitempty" jsonschema:"description=Audience Exp"`
	BackdatedTime                         string                   `json:"backdated_time,omitempty" jsonschema:"description=Backdated Time,format=date-time"`
	BackdatedTimeGranularity              string                   `json:"backdated_time_granularity,omitempty" jsonschema:"description=Backdated Time Granularity"`
	Caption                               string                   `json:"caption,omitempty" jsonschema:"description=Caption"`
	ComposerSessionId                     string                   `json:"composer_session_id,omitempty" jsonschema:"description=ID of the Composer Session,pattern=^[0-9]+$"`
	DirectShareStatus                     int                      `json:"direct_share_status,omitempty" jsonschema:"description=Direct Share Status"`
	FeedTargeting                         map[string]interface{}   `json:"feed_targeting,omitempty" jsonschema:"description=Feed Targeting"`
	FilterType                            int                      `json:"filter_type,omitempty" jsonschema:"description=Filter Type"`
	FullResIsComingLater                  bool                     `json:"full_res_is_coming_later,omitempty" jsonschema:"description=Full Res Is Coming Later"`
	InitialViewHeadingOverrideDegrees     int                      `json:"initial_view_heading_override_degrees,omitempty" jsonschema:"description=Initial View Heading Override Degrees"`
	InitialViewPitchOverrideDegrees       int                      `json:"initial_view_pitch_override_degrees,omitempty" jsonschema:"description=Initial View Pitch Override Degrees"`
	InitialViewVerticalFovOverrideDegrees int                      `json:"initial_view_vertical_fov_override_degrees,omitempty" jsonschema:"description=Initial View Vertical Fov Override Degrees"`
	IosBundleId                           string                   `json:"ios_bundle_id,omitempty" jsonschema:"description=ID of the Ios Bundle,pattern=^[0-9]+$"`
	IsExplicitLocation                    bool                     `json:"is_explicit_location,omitempty" jsonschema:"description=Is Explicit Location"`
	IsExplicitPlace                       bool                     `json:"is_explicit_place,omitempty" jsonschema:"description=Is Explicit Place"`
	ManualPrivacy                         bool                     `json:"manual_privacy,omitempty" jsonschema:"description=Manual Privacy"`
	Message                               string                   `json:"message,omitempty" jsonschema:"description=Message"`
	Name                                  string                   `json:"name,omitempty" jsonschema:"description=Name"`
	NoStory                               bool                     `json:"no_story,omitempty" jsonschema:"description=No Story"`
	OfflineId                             int                      `json:"offline_id,omitempty" jsonschema:"description=ID of the Offline,pattern=^[0-9]+$"`
	OgActionTypeId                        string                   `json:"og_action_type_id,omitempty" jsonschema:"description=ID of the Og Action Type,pattern=^[0-9]+$"`
	OgIconId                              string                   `json:"og_icon_id,omitempty" jsonschema:"description=ID of the Og Icon,pattern=^[0-9]+$"`
	OgObjectId                            string                   `json:"og_object_id,omitempty" jsonschema:"description=ID of the Og Object,pattern=^[0-9]+$"`
	OgPhrase                              string                   `json:"og_phrase,omitempty" jsonschema:"description=Og Phrase"`
	OgSetProfileBadge                     bool                     `json:"og_set_profile_badge,omitempty" jsonschema:"description=Og Set Profile Badge"`
	OgSuggestionMechanism                 string                   `json:"og_suggestion_mechanism,omitempty" jsonschema:"description=Og Suggestion Mechanism"`
	Place                                 map[string]interface{}   `json:"place,omitempty" jsonschema:"description=Place"`
	Privacy                               string                   `json:"privacy,omitempty" jsonschema:"description=Privacy"`
	ProfileId                             int                      `json:"profile_id,omitempty" jsonschema:"description=ID of the Profile,pattern=^[0-9]+$"`
	ProvenanceInfo                        map[string]interface{}   `json:"provenance_info,omitempty" jsonschema:"description=Provenance Info"`
	ProxiedAppId                          string                   `json:"proxied_app_id,omitempty" jsonschema:"description=ID of the Proxied App,pattern=^[0-9]+$"`
	Published                             bool                     `json:"published,omitempty" jsonschema:"description=Published"`
	Qn                                    string                   `json:"qn,omitempty" jsonschema:"description=Qn"`
	ScheduledPublishTime                  int                      `json:"scheduled_publish_time,omitempty" jsonschema:"description=Scheduled Publish Time"`
	SphericalMetadata                     map[string]interface{}   `json:"spherical_metadata,omitempty" jsonschema:"description=Spherical Metadata"`
	SponsorId                             string                   `json:"sponsor_id,omitempty" jsonschema:"description=ID of the Sponsor,pattern=^[0-9]+$"`
	SponsorRelationship                   int                      `json:"sponsor_relationship,omitempty" jsonschema:"description=Sponsor Relationship"`
	Tags                                  []map[string]interface{} `json:"tags,omitempty" jsonschema:"description=Tags"`
	TargetId                              int                      `json:"target_id,omitempty" jsonschema:"description=ID of the Target,pattern=^[0-9]+$"`
	Targeting                             map[string]interface{}   `json:"targeting,omitempty" jsonschema:"description=Targeting"`
	TimeSinceOriginalPost                 int                      `json:"time_since_original_post,omitempty" jsonschema:"description=Time Since Original Post"`
	Uid                                   int                      `json:"uid,omitempty" jsonschema:"description=Uid"`
	UnpublishedContentType                string                   `json:"unpublished_content_type,omitempty" jsonschema:"description=Unpublished Content Type"`
	Url                                   string                   `json:"url,omitempty" jsonschema:"description=URL,format=uri"`
	UserSelectedTags                      bool                     `json:"user_selected_tags,omitempty" jsonschema:"description=User Selected Tags"`
	VaultImageId                          string                   `json:"vault_image_id,omitempty" jsonschema:"description=ID of the Vault Image,pattern=^[0-9]+$"`
}

// user_get_pictureArgs defines the typed arguments for user_get_picture
type user_get_pictureArgs struct {
	ID       string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields   []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit    int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After    string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before   string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Height   int      `json:"height,omitempty" jsonschema:"description=Height"`
	Redirect bool     `json:"redirect,omitempty" jsonschema:"description=Redirect"`
	Type     string   `json:"type,omitempty" jsonschema:"description=Type"`
	Width    int      `json:"width,omitempty" jsonschema:"description=Width"`
}

// user_list_postsArgs defines the typed arguments for user_list_posts
type user_list_postsArgs struct {
	ID            string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields        []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit         int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After         string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before        string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	IncludeHidden bool     `json:"include_hidden,omitempty" jsonschema:"description=Include Hidden"`
	Q             string   `json:"q,omitempty" jsonschema:"description=Q"`
	ShowExpired   bool     `json:"show_expired,omitempty" jsonschema:"description=Show Expired"`
	Since         string   `json:"since,omitempty" jsonschema:"description=Since,format=date-time"`
	Until         string   `json:"until,omitempty" jsonschema:"description=Until,format=date-time"`
	With          string   `json:"with,omitempty" jsonschema:"description=With"`
}

// user_list_rich_media_documentsArgs defines the typed arguments for user_list_rich_media_documents
type user_list_rich_media_documentsArgs struct {
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Query  string   `json:"query,omitempty" jsonschema:"description=Query"`
}

// user_create_staging_resourceArgs defines the typed arguments for user_create_staging_resource
type user_create_staging_resourceArgs struct {
	ID   string      `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	File interface{} `json:"file,omitempty" jsonschema:"description=File"`
}

// user_list_videosArgs defines the typed arguments for user_list_videos
type user_list_videosArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Type   string   `json:"type,omitempty" jsonschema:"description=Type"`
}

// user_create_videoArgs defines the typed arguments for user_create_video
type user_create_videoArgs struct {
	ID                            string                 `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	ApplicationId                 string                 `json:"application_id,omitempty" jsonschema:"description=ID of the Application,pattern=^[0-9]+$"`
	AskedFunFactPromptId          int                    `json:"asked_fun_fact_prompt_id,omitempty" jsonschema:"description=ID of the Asked Fun Fact Prompt,pattern=^[0-9]+$"`
	AudioStoryWaveAnimationHandle string                 `json:"audio_story_wave_animation_handle,omitempty" jsonschema:"description=Audio Story Wave Animation Handle"`
	ComposerEntryPicker           string                 `json:"composer_entry_picker,omitempty" jsonschema:"description=Composer Entry Picker"`
	ComposerEntryPoint            string                 `json:"composer_entry_point,omitempty" jsonschema:"description=Composer Entry Point"`
	ComposerEntryTime             int                    `json:"composer_entry_time,omitempty" jsonschema:"description=Composer Entry Time"`
	ComposerSessionEventsLog      string                 `json:"composer_session_events_log,omitempty" jsonschema:"description=Composer Session Events Log"`
	ComposerSessionId             string                 `json:"composer_session_id,omitempty" jsonschema:"description=ID of the Composer Session,pattern=^[0-9]+$"`
	ComposerSourceSurface         string                 `json:"composer_source_surface,omitempty" jsonschema:"description=Composer Source Surface"`
	ComposerType                  string                 `json:"composer_type,omitempty" jsonschema:"description=Composer Type"`
	ContainerType                 string                 `json:"container_type,omitempty" jsonschema:"description=Container Type"`
	ContentCategory               string                 `json:"content_category,omitempty" jsonschema:"description=Content Category"`
	CreativeTools                 string                 `json:"creative_tools,omitempty" jsonschema:"description=Creative Tools"`
	Description                   string                 `json:"description,omitempty" jsonschema:"description=Description"`
	DirectShareStatus             int                    `json:"direct_share_status,omitempty" jsonschema:"description=Direct Share Status"`
	Embeddable                    bool                   `json:"embeddable,omitempty" jsonschema:"description=Embeddable"`
	EndOffset                     int                    `json:"end_offset,omitempty" jsonschema:"description=End Offset"`
	FbuploaderVideoFileChunk      string                 `json:"fbuploader_video_file_chunk,omitempty" jsonschema:"description=Fbuploader Video File Chunk"`
	FileSize                      int                    `json:"file_size,omitempty" jsonschema:"description=File Size"`
	FileUrl                       string                 `json:"file_url,omitempty" jsonschema:"description=File URL,format=uri"`
	FisheyeVideoCropped           bool                   `json:"fisheye_video_cropped,omitempty" jsonschema:"description=Fisheye Video Cropped"`
	Formatting                    string                 `json:"formatting,omitempty" jsonschema:"description=Formatting"`
	Fov                           int                    `json:"fov,omitempty" jsonschema:"description=Fov"`
	FrontZRotation                float64                `json:"front_z_rotation,omitempty" jsonschema:"description=Front Z Rotation"`
	FunFactPromptId               string                 `json:"fun_fact_prompt_id,omitempty" jsonschema:"description=ID of the Fun Fact Prompt,pattern=^[0-9]+$"`
	FunFactToasteeId              int                    `json:"fun_fact_toastee_id,omitempty" jsonschema:"description=ID of the Fun Fact Toastee,pattern=^[0-9]+$"`
	Guide                         []interface{}          `json:"guide,omitempty" jsonschema:"description=Guide"`
	GuideEnabled                  bool                   `json:"guide_enabled,omitempty" jsonschema:"description=Guide Enabled"`
	InitialHeading                int                    `json:"initial_heading,omitempty" jsonschema:"description=Initial Heading"`
	InitialPitch                  int                    `json:"initial_pitch,omitempty" jsonschema:"description=Initial Pitch"`
	InstantGameEntryPointData     string                 `json:"instant_game_entry_point_data,omitempty" jsonschema:"description=Instant Game Entry Point Data"`
	IsBoostIntended               bool                   `json:"is_boost_intended,omitempty" jsonschema:"description=Is Boost Intended"`
	IsExplicitShare               bool                   `json:"is_explicit_share,omitempty" jsonschema:"description=Is Explicit Share"`
	IsGroupLinkingPost            bool                   `json:"is_group_linking_post,omitempty" jsonschema:"description=Is Group Linking Post"`
	IsPartnershipAd               bool                   `json:"is_partnership_ad,omitempty" jsonschema:"description=Is Partnership Ad"`
	IsVoiceClip                   bool                   `json:"is_voice_clip,omitempty" jsonschema:"description=Is Voice Clip"`
	LocationSourceId              string                 `json:"location_source_id,omitempty" jsonschema:"description=ID of the Location Source,pattern=^[0-9]+$"`
	ManualPrivacy                 bool                   `json:"manual_privacy,omitempty" jsonschema:"description=Manual Privacy"`
	NoStory                       bool                   `json:"no_story,omitempty" jsonschema:"description=No Story"`
	OgActionTypeId                string                 `json:"og_action_type_id,omitempty" jsonschema:"description=ID of the Og Action Type,pattern=^[0-9]+$"`
	OgIconId                      string                 `json:"og_icon_id,omitempty" jsonschema:"description=ID of the Og Icon,pattern=^[0-9]+$"`
	OgObjectId                    string                 `json:"og_object_id,omitempty" jsonschema:"description=ID of the Og Object,pattern=^[0-9]+$"`
	OgPhrase                      string                 `json:"og_phrase,omitempty" jsonschema:"description=Og Phrase"`
	OgSuggestionMechanism         string                 `json:"og_suggestion_mechanism,omitempty" jsonschema:"description=Og Suggestion Mechanism"`
	OriginalFov                   int                    `json:"original_fov,omitempty" jsonschema:"description=Original Fov"`
	OriginalProjectionType        string                 `json:"original_projection_type,omitempty" jsonschema:"description=Original Projection Type"`
	PartnershipAdAdCode           string                 `json:"partnership_ad_ad_code,omitempty" jsonschema:"description=Partnership Ad Ad Code"`
	Privacy                       string                 `json:"privacy,omitempty" jsonschema:"description=Privacy"`
	PublishEventId                int                    `json:"publish_event_id,omitempty" jsonschema:"description=ID of the Publish Event,pattern=^[0-9]+$"`
	ReferencedStickerId           string                 `json:"referenced_sticker_id,omitempty" jsonschema:"description=ID of the Referenced Sticker,pattern=^[0-9]+$"`
	ReplaceVideoId                string                 `json:"replace_video_id,omitempty" jsonschema:"description=ID of the Replace Video,pattern=^[0-9]+$"`
	SlideshowSpec                 map[string]interface{} `json:"slideshow_spec,omitempty" jsonschema:"description=Slideshow Spec"`
	Source                        string                 `json:"source,omitempty" jsonschema:"description=Source"`
	SourceInstagramMediaId        string                 `json:"source_instagram_media_id,omitempty" jsonschema:"description=ID of the Source Instagram Media,pattern=^[0-9]+$"`
	Spherical                     bool                   `json:"spherical,omitempty" jsonschema:"description=Spherical"`
	SponsorId                     string                 `json:"sponsor_id,omitempty" jsonschema:"description=ID of the Sponsor,pattern=^[0-9]+$"`
	StartOffset                   int                    `json:"start_offset,omitempty" jsonschema:"description=Start Offset"`
	SwapMode                      string                 `json:"swap_mode,omitempty" jsonschema:"description=Swap Mode"`
	TextFormatMetadata            string                 `json:"text_format_metadata,omitempty" jsonschema:"description=Text Format Metadata"`
	Thumb                         interface{}            `json:"thumb,omitempty" jsonschema:"description=Thumb"`
	TimeSinceOriginalPost         int                    `json:"time_since_original_post,omitempty" jsonschema:"description=Time Since Original Post"`
	Title                         string                 `json:"title,omitempty" jsonschema:"description=Title"`
	TranscodeSettingProperties    string                 `json:"transcode_setting_properties,omitempty" jsonschema:"description=Transcode Setting Properties"`
	UnpublishedContentType        string                 `json:"unpublished_content_type,omitempty" jsonschema:"description=Unpublished Content Type"`
	UploadPhase                   string                 `json:"upload_phase,omitempty" jsonschema:"description=Upload Phase"`
	UploadSessionId               string                 `json:"upload_session_id,omitempty" jsonschema:"description=ID of the Upload Session,pattern=^[0-9]+$"`
	UploadSettingProperties       string                 `json:"upload_setting_properties,omitempty" jsonschema:"description=Upload Setting Properties"`
	VideoFileChunk                string                 `json:"video_file_chunk,omitempty" jsonschema:"description=Video File Chunk"`
	VideoIdOriginal               string                 `json:"video_id_original,omitempty" jsonschema:"description=Video ID Original,pattern=^[0-9]+$"`
	VideoStartTimeMs              int                    `json:"video_start_time_ms,omitempty" jsonschema:"description=Video Start Time Ms"`
	WaterfallId                   string                 `json:"waterfall_id,omitempty" jsonschema:"description=ID of the Waterfall,pattern=^[0-9]+$"`
}

// user_deleteArgs defines the typed arguments for user_delete
type user_deleteArgs struct {
	ID string `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
}

// user_getArgs defines the typed arguments for user_get
type user_getArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// user_updateArgs defines the typed arguments for user_update
type user_updateArgs struct {
	ID                              string `json:"id" jsonschema:"required,description=User ID,pattern=^[0-9]+$"`
	EmojiColorPref                  int    `json:"emoji_color_pref,omitempty" jsonschema:"description=Emoji Color Pref"`
	Firstname                       string `json:"firstname,omitempty" jsonschema:"description=Firstname"`
	Lastname                        string `json:"lastname,omitempty" jsonschema:"description=Lastname"`
	LocalNewsMegaphoneDismissStatus string `json:"local_news_megaphone_dismiss_status,omitempty" jsonschema:"description=Local News Megaphone Dismiss Status"`
	LocalNewsSubscriptionStatus     string `json:"local_news_subscription_status,omitempty" jsonschema:"description=Local News Subscription Status"`
	Name                            string `json:"name,omitempty" jsonschema:"description=Name"`
	Password                        string `json:"password,omitempty" jsonschema:"description=Password"`
}

// UserRemoveAccessTokensHandler handles user_remove_access_tokens with raw schema validation
func UserRemoveAccessTokensHandler(ctx context.Context, request mcp.CallToolRequest, args user_remove_access_tokensArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	url := buildGraphURL(args.ID, "access_tokens")
	return ExecuteDELETERequest(ctx, url)

}

// UserCreateAccessTokenHandler handles user_create_access_token with raw schema validation
func UserCreateAccessTokenHandler(ctx context.Context, request mcp.CallToolRequest, args user_create_access_tokenArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.BusinessApp != "" {
		body["business_app"] = args.BusinessApp
	}

	if args.PageId != "" {
		body["page_id"] = args.PageId
	}

	if len(args.Scope) > 0 {
		body["scope"] = args.Scope
	}

	body["set_token_expires_in_60_days"] = args.SetTokenExpiresIn60Days

	// Build URL and execute
	url := buildGraphURL(args.ID, "access_tokens")

	return ExecutePOSTRequest(ctx, url, body)

}

// UserListAccountsHandler handles user_list_accounts with raw schema validation
func UserListAccountsHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_accountsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("Page")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.AdId != "" {
		query.Set("ad_id", args.AdId)
	}

	if args.IsPlace {
		query.Set("is_place", "true")
	}

	if args.IsPromotable {
		query.Set("is_promotable", "true")
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "accounts")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserCreateAccountHandler handles user_create_account with raw schema validation
func UserCreateAccountHandler(ctx context.Context, request mcp.CallToolRequest, args user_create_accountArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.About != "" {
		body["about"] = args.About
	}

	if args.Address != "" {
		body["address"] = args.Address
	}

	if args.Category > 0 {
		body["category"] = args.Category
	}

	if args.CategoryEnum != "" {
		body["category_enum"] = args.CategoryEnum
	}

	if len(args.CategoryList) > 0 {
		body["category_list"] = args.CategoryList
	}

	if args.CityId != "" {
		body["city_id"] = args.CityId
	}

	if args.Coordinates != nil {
		body["coordinates"] = args.Coordinates
	}

	if args.CoverPhoto != nil {
		body["cover_photo"] = args.CoverPhoto
	}

	if args.Description != "" {
		body["description"] = args.Description
	}

	body["ignore_coordinate_warnings"] = args.IgnoreCoordinateWarnings

	if args.Location != nil {
		body["location"] = args.Location
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.Phone != "" {
		body["phone"] = args.Phone
	}

	if args.Picture != "" {
		body["picture"] = args.Picture
	}

	if args.Website != "" {
		body["website"] = args.Website
	}

	if args.Zip != "" {
		body["zip"] = args.Zip
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "accounts")

	return ExecutePOSTRequest(ctx, url, body)

}

// UserListAdStudiesHandler handles user_list_ad_studies with raw schema validation
func UserListAdStudiesHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_ad_studiesArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdStudy")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ad_studies")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserCreateAdStudieHandler handles user_create_ad_studie with raw schema validation
func UserCreateAdStudieHandler(ctx context.Context, request mcp.CallToolRequest, args user_create_ad_studieArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.Cells) > 0 {
		body["cells"] = args.Cells
	}

	if args.ClientBusiness != "" {
		body["client_business"] = args.ClientBusiness
	}

	if args.ConfidenceLevel != 0 {
		body["confidence_level"] = args.ConfidenceLevel
	}

	if args.CooldownStartTime > 0 {
		body["cooldown_start_time"] = args.CooldownStartTime
	}

	if args.Description != "" {
		body["description"] = args.Description
	}

	if args.EndTime > 0 {
		body["end_time"] = args.EndTime
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if len(args.Objectives) > 0 {
		body["objectives"] = args.Objectives
	}

	if args.ObservationEndTime > 0 {
		body["observation_end_time"] = args.ObservationEndTime
	}

	if args.StartTime > 0 {
		body["start_time"] = args.StartTime
	}

	if args.Type != "" {
		body["type"] = args.Type
	}

	if args.Viewers != nil {
		body["viewers"] = args.Viewers
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "ad_studies")

	return ExecutePOSTRequest(ctx, url, body)

}

// UserListAdaccountsHandler handles user_list_adaccounts with raw schema validation
func UserListAdaccountsHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_adaccountsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "adaccounts")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserListAlbumsHandler handles user_list_albums with raw schema validation
func UserListAlbumsHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_albumsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("Album")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "albums")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserCreateApplicationHandler handles user_create_application with raw schema validation
func UserCreateApplicationHandler(ctx context.Context, request mcp.CallToolRequest, args user_create_applicationArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.BusinessApp > 0 {
		body["business_app"] = args.BusinessApp
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "applications")

	return ExecutePOSTRequest(ctx, url, body)

}

// UserListApprequestformerrecipientsHandler handles user_list_apprequestformerrecipients with raw schema validation
func UserListApprequestformerrecipientsHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_apprequestformerrecipientsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AppRequestFormerRecipient")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL("", "apprequestformerrecipients")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserListApprequestsHandler handles user_list_apprequests with raw schema validation
func UserListApprequestsHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_apprequestsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AppRequest")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "apprequests")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserListAssignedAdAccountsHandler handles user_list_assigned_ad_accounts with raw schema validation
func UserListAssignedAdAccountsHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_assigned_ad_accountsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "assigned_ad_accounts")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserListAssignedApplicationsHandler handles user_list_assigned_applications with raw schema validation
func UserListAssignedApplicationsHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_assigned_applicationsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("Application")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "assigned_applications")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserListAssignedBusinessAssetGroupsHandler handles user_list_assigned_business_asset_groups with raw schema validation
func UserListAssignedBusinessAssetGroupsHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_assigned_business_asset_groupsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("BusinessAssetGroup")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.ContainedAssetId != "" {
		query.Set("contained_asset_id", args.ContainedAssetId)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "assigned_business_asset_groups")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserListAssignedPagesHandler handles user_list_assigned_pages with raw schema validation
func UserListAssignedPagesHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_assigned_pagesArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("Page")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "assigned_pages")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserListAssignedProductCatalogsHandler handles user_list_assigned_product_catalogs with raw schema validation
func UserListAssignedProductCatalogsHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_assigned_product_catalogsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("ProductCatalog")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "assigned_product_catalogs")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserListAvatarsHandler handles user_list_avatars with raw schema validation
func UserListAvatarsHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_avatarsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("Avatar")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "avatars")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserListBusinessUsersHandler handles user_list_business_users with raw schema validation
func UserListBusinessUsersHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_business_usersArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("BusinessUser")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL("", "business_users")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserRemoveBusinessesHandler handles user_remove_businesses with raw schema validation
func UserRemoveBusinessesHandler(ctx context.Context, request mcp.CallToolRequest, args user_remove_businessesArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	url := buildGraphURL(args.ID, "businesses")
	return ExecuteDELETERequest(ctx, url)

}

// UserListBusinessesHandler handles user_list_businesses with raw schema validation
func UserListBusinessesHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_businessesArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("Business")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "businesses")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserCreateBusinesseHandler handles user_create_businesse with raw schema validation
func UserCreateBusinesseHandler(ctx context.Context, request mcp.CallToolRequest, args user_create_businesseArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.ChildBusinessExternalId != "" {
		body["child_business_external_id"] = args.ChildBusinessExternalId
	}

	if args.Email != "" {
		body["email"] = args.Email
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.PrimaryPage != "" {
		body["primary_page"] = args.PrimaryPage
	}

	if args.SalesRepEmail != "" {
		body["sales_rep_email"] = args.SalesRepEmail
	}

	if args.SurveyBusinessType != "" {
		body["survey_business_type"] = args.SurveyBusinessType
	}

	if args.SurveyNumAssets > 0 {
		body["survey_num_assets"] = args.SurveyNumAssets
	}

	if args.SurveyNumPeople > 0 {
		body["survey_num_people"] = args.SurveyNumPeople
	}

	if args.TimezoneId != "" {
		body["timezone_id"] = args.TimezoneId
	}

	if args.Vertical != "" {
		body["vertical"] = args.Vertical
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "businesses")

	return ExecutePOSTRequest(ctx, url, body)

}

// UserListConversationsHandler handles user_list_conversations with raw schema validation
func UserListConversationsHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_conversationsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("UnifiedThread")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Folder != "" {
		query.Set("folder", args.Folder)
	}

	if args.Platform != "" {
		query.Set("platform", args.Platform)
	}

	if len(args.Tags) > 0 {
		query.Set("tags", strings.Join(args.Tags, ","))
	}

	if args.UserId != "" {
		query.Set("user_id", args.UserId)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "conversations")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserListCustomLabelsHandler handles user_list_custom_labels with raw schema validation
func UserListCustomLabelsHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_custom_labelsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("PageUserMessageThreadLabel")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "custom_labels")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserListEventsHandler handles user_list_events with raw schema validation
func UserListEventsHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_eventsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("Event")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.IncludeCanceled {
		query.Set("include_canceled", "true")
	}

	if args.Type != "" {
		query.Set("type", args.Type)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "events")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserGetFeedHandler handles user_get_feed with raw schema validation
func UserGetFeedHandler(ctx context.Context, request mcp.CallToolRequest, args user_get_feedArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("Post")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.IncludeHidden {
		query.Set("include_hidden", "true")
	}

	if args.Q != "" {
		query.Set("q", args.Q)
	}

	if args.ShowExpired {
		query.Set("show_expired", "true")
	}

	if args.Since != "" {
		query.Set("since", args.Since)
	}

	if args.Until != "" {
		query.Set("until", args.Until)
	}

	if args.With != "" {
		query.Set("with", args.With)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "feed")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserUpdateFeedHandler handles user_update_feed with raw schema validation
func UserUpdateFeedHandler(ctx context.Context, request mcp.CallToolRequest, args user_update_feedArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.Actions != nil {
		body["actions"] = args.Actions
	}

	if args.AlbumId != "" {
		body["album_id"] = args.AlbumId
	}

	if args.AndroidKeyHash != "" {
		body["android_key_hash"] = args.AndroidKeyHash
	}

	if args.ApplicationId != "" {
		body["application_id"] = args.ApplicationId
	}

	if args.AskedFunFactPromptId > 0 {
		body["asked_fun_fact_prompt_id"] = args.AskedFunFactPromptId
	}

	if args.Asset3dId != "" {
		body["asset3d_id"] = args.Asset3dId
	}

	if args.AssociatedId != "" {
		body["associated_id"] = args.AssociatedId
	}

	body["attach_place_suggestion"] = args.AttachPlaceSuggestion

	if len(args.AttachedMedia) > 0 {
		body["attached_media"] = args.AttachedMedia
	}

	body["audience_exp"] = args.AudienceExp

	if args.BackdatedTime != "" {
		body["backdated_time"] = args.BackdatedTime
	}

	if args.BackdatedTimeGranularity != "" {
		body["backdated_time_granularity"] = args.BackdatedTimeGranularity
	}

	body["breaking_news"] = args.BreakingNews

	if args.BreakingNewsExpiration > 0 {
		body["breaking_news_expiration"] = args.BreakingNewsExpiration
	}

	if args.CallToAction != nil {
		body["call_to_action"] = args.CallToAction
	}

	if args.Caption != "" {
		body["caption"] = args.Caption
	}

	if len(args.ChildAttachments) > 0 {
		body["child_attachments"] = args.ChildAttachments
	}

	if args.ClientMutationId != "" {
		body["client_mutation_id"] = args.ClientMutationId
	}

	if args.ComposerEntryPicker != "" {
		body["composer_entry_picker"] = args.ComposerEntryPicker
	}

	if args.ComposerEntryPoint != "" {
		body["composer_entry_point"] = args.ComposerEntryPoint
	}

	if args.ComposerEntryTime > 0 {
		body["composer_entry_time"] = args.ComposerEntryTime
	}

	if args.ComposerSessionEventsLog != "" {
		body["composer_session_events_log"] = args.ComposerSessionEventsLog
	}

	if args.ComposerSessionId != "" {
		body["composer_session_id"] = args.ComposerSessionId
	}

	if args.ComposerSourceSurface != "" {
		body["composer_source_surface"] = args.ComposerSourceSurface
	}

	if args.ComposerType != "" {
		body["composer_type"] = args.ComposerType
	}

	if args.ConnectionClass != "" {
		body["connection_class"] = args.ConnectionClass
	}

	if args.ContentAttachment != "" {
		body["content_attachment"] = args.ContentAttachment
	}

	if args.Coordinates != nil {
		body["coordinates"] = args.Coordinates
	}

	if args.CtaLink != "" {
		body["cta_link"] = args.CtaLink
	}

	if args.CtaType != "" {
		body["cta_type"] = args.CtaType
	}

	if args.Description != "" {
		body["description"] = args.Description
	}

	if args.DirectShareStatus > 0 {
		body["direct_share_status"] = args.DirectShareStatus
	}

	if args.ExpandedHeight > 0 {
		body["expanded_height"] = args.ExpandedHeight
	}

	if args.ExpandedWidth > 0 {
		body["expanded_width"] = args.ExpandedWidth
	}

	if args.FeedTargeting != nil {
		body["feed_targeting"] = args.FeedTargeting
	}

	if args.Formatting != "" {
		body["formatting"] = args.Formatting
	}

	if args.FunFactPromptId != "" {
		body["fun_fact_prompt_id"] = args.FunFactPromptId
	}

	if args.FunFactToasteeId > 0 {
		body["fun_fact_toastee_id"] = args.FunFactToasteeId
	}

	if args.Height > 0 {
		body["height"] = args.Height
	}

	if args.HomeCheckinCityId != nil {
		body["home_checkin_city_id"] = args.HomeCheckinCityId
	}

	if args.ImageCrops != nil {
		body["image_crops"] = args.ImageCrops
	}

	if args.ImplicitWithTags != nil {
		body["implicit_with_tags"] = args.ImplicitWithTags
	}

	if args.InstantGameEntryPointData != "" {
		body["instant_game_entry_point_data"] = args.InstantGameEntryPointData
	}

	if args.IosBundleId != "" {
		body["ios_bundle_id"] = args.IosBundleId
	}

	body["is_backout_draft"] = args.IsBackoutDraft

	body["is_boost_intended"] = args.IsBoostIntended

	body["is_explicit_location"] = args.IsExplicitLocation

	body["is_explicit_share"] = args.IsExplicitShare

	body["is_group_linking_post"] = args.IsGroupLinkingPost

	body["is_photo_container"] = args.IsPhotoContainer

	if args.Link != "" {
		body["link"] = args.Link
	}

	if args.LocationSourceId != "" {
		body["location_source_id"] = args.LocationSourceId
	}

	body["manual_privacy"] = args.ManualPrivacy

	if args.Message != "" {
		body["message"] = args.Message
	}

	body["multi_share_end_card"] = args.MultiShareEndCard

	body["multi_share_optimized"] = args.MultiShareOptimized

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.NectarModule != "" {
		body["nectar_module"] = args.NectarModule
	}

	if args.ObjectAttachment != "" {
		body["object_attachment"] = args.ObjectAttachment
	}

	if args.OgActionTypeId != "" {
		body["og_action_type_id"] = args.OgActionTypeId
	}

	body["og_hide_object_attachment"] = args.OgHideObjectAttachment

	if args.OgIconId != "" {
		body["og_icon_id"] = args.OgIconId
	}

	if args.OgObjectId != "" {
		body["og_object_id"] = args.OgObjectId
	}

	if args.OgPhrase != "" {
		body["og_phrase"] = args.OgPhrase
	}

	body["og_set_profile_badge"] = args.OgSetProfileBadge

	if args.OgSuggestionMechanism != "" {
		body["og_suggestion_mechanism"] = args.OgSuggestionMechanism
	}

	if args.PageRecommendation != "" {
		body["page_recommendation"] = args.PageRecommendation
	}

	if args.Picture != "" {
		body["picture"] = args.Picture
	}

	if args.Place != nil {
		body["place"] = args.Place
	}

	if args.PlaceAttachmentSetting != "" {
		body["place_attachment_setting"] = args.PlaceAttachmentSetting
	}

	if args.PlaceList != "" {
		body["place_list"] = args.PlaceList
	}

	if args.PlaceListData != nil {
		body["place_list_data"] = args.PlaceListData
	}

	if len(args.PostSurfacesBlacklist) > 0 {
		body["post_surfaces_blacklist"] = args.PostSurfacesBlacklist
	}

	if args.PostingToRedspace != "" {
		body["posting_to_redspace"] = args.PostingToRedspace
	}

	if args.Privacy != "" {
		body["privacy"] = args.Privacy
	}

	if args.PromptId != "" {
		body["prompt_id"] = args.PromptId
	}

	if args.PromptTrackingString != "" {
		body["prompt_tracking_string"] = args.PromptTrackingString
	}

	if args.Properties != nil {
		body["properties"] = args.Properties
	}

	if args.ProxiedAppId != "" {
		body["proxied_app_id"] = args.ProxiedAppId
	}

	if args.PublishEventId > 0 {
		body["publish_event_id"] = args.PublishEventId
	}

	body["published"] = args.Published

	if args.Quote != "" {
		body["quote"] = args.Quote
	}

	if len(args.Ref) > 0 {
		body["ref"] = args.Ref
	}

	if len(args.ReferenceableImageIds) > 0 {
		body["referenceable_image_ids"] = args.ReferenceableImageIds
	}

	if args.ReferralId != "" {
		body["referral_id"] = args.ReferralId
	}

	if args.ScheduledPublishTime != "" {
		body["scheduled_publish_time"] = args.ScheduledPublishTime
	}

	if args.Source != "" {
		body["source"] = args.Source
	}

	if args.SponsorId != "" {
		body["sponsor_id"] = args.SponsorId
	}

	if args.SponsorRelationship > 0 {
		body["sponsor_relationship"] = args.SponsorRelationship
	}

	if args.SuggestedPlaceId != nil {
		body["suggested_place_id"] = args.SuggestedPlaceId
	}

	if args.Tags != nil {
		body["tags"] = args.Tags
	}

	if args.TargetSurface != "" {
		body["target_surface"] = args.TargetSurface
	}

	if args.Targeting != nil {
		body["targeting"] = args.Targeting
	}

	if args.TextFormatMetadata != "" {
		body["text_format_metadata"] = args.TextFormatMetadata
	}

	if args.TextFormatPresetId != "" {
		body["text_format_preset_id"] = args.TextFormatPresetId
	}

	if args.TextOnlyPlace != "" {
		body["text_only_place"] = args.TextOnlyPlace
	}

	if args.Thumbnail != nil {
		body["thumbnail"] = args.Thumbnail
	}

	if args.TimeSinceOriginalPost > 0 {
		body["time_since_original_post"] = args.TimeSinceOriginalPost
	}

	if args.Title != "" {
		body["title"] = args.Title
	}

	if args.TrackingInfo != "" {
		body["tracking_info"] = args.TrackingInfo
	}

	if args.UnpublishedContentType != "" {
		body["unpublished_content_type"] = args.UnpublishedContentType
	}

	body["user_selected_tags"] = args.UserSelectedTags

	if args.VideoStartTimeMs > 0 {
		body["video_start_time_ms"] = args.VideoStartTimeMs
	}

	if args.ViewerCoordinates != nil {
		body["viewer_coordinates"] = args.ViewerCoordinates
	}

	if args.Width > 0 {
		body["width"] = args.Width
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "feed")

	return ExecutePOSTRequest(ctx, url, body)

}

// UserListFriendsHandler handles user_list_friends with raw schema validation
func UserListFriendsHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_friendsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Uid > 0 {
		query.Set("uid", fmt.Sprintf("%d", args.Uid))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "friends")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserListFundraisersHandler handles user_list_fundraisers with raw schema validation
func UserListFundraisersHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_fundraisersArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("FundraiserPersonToCharity")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "fundraisers")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserCreateFundraiserHandler handles user_create_fundraiser with raw schema validation
func UserCreateFundraiserHandler(ctx context.Context, request mcp.CallToolRequest, args user_create_fundraiserArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.CharityId != "" {
		body["charity_id"] = args.CharityId
	}

	if args.CoverPhoto != nil {
		body["cover_photo"] = args.CoverPhoto
	}

	if args.Currency != "" {
		body["currency"] = args.Currency
	}

	if args.Description != "" {
		body["description"] = args.Description
	}

	if args.EndTime != "" {
		body["end_time"] = args.EndTime
	}

	if args.ExternalEventName != "" {
		body["external_event_name"] = args.ExternalEventName
	}

	if args.ExternalEventStartTime != "" {
		body["external_event_start_time"] = args.ExternalEventStartTime
	}

	if args.ExternalEventUri != "" {
		body["external_event_uri"] = args.ExternalEventUri
	}

	if args.ExternalFundraiserUri != "" {
		body["external_fundraiser_uri"] = args.ExternalFundraiserUri
	}

	if args.ExternalId != "" {
		body["external_id"] = args.ExternalId
	}

	if args.FundraiserType != "" {
		body["fundraiser_type"] = args.FundraiserType
	}

	if args.GoalAmount > 0 {
		body["goal_amount"] = args.GoalAmount
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.PageId != "" {
		body["page_id"] = args.PageId
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "fundraisers")

	return ExecutePOSTRequest(ctx, url, body)

}

// UserListGroupsHandler handles user_list_groups with raw schema validation
func UserListGroupsHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_groupsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("Group")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.AdminOnly {
		query.Set("admin_only", "true")
	}

	if args.Parent != "" {
		query.Set("parent", args.Parent)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "groups")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserListIdsForAppsHandler handles user_list_ids_for_apps with raw schema validation
func UserListIdsForAppsHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_ids_for_appsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("UserIDForApp")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.App > 0 {
		query.Set("app", fmt.Sprintf("%d", args.App))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ids_for_apps")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserListIdsForBusinessHandler handles user_list_ids_for_business with raw schema validation
func UserListIdsForBusinessHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_ids_for_businessArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("UserIDForApp")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.App > 0 {
		query.Set("app", fmt.Sprintf("%d", args.App))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ids_for_business")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserListIdsForPagesHandler handles user_list_ids_for_pages with raw schema validation
func UserListIdsForPagesHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_ids_for_pagesArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("UserIDForPage")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Page > 0 {
		query.Set("page", fmt.Sprintf("%d", args.Page))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ids_for_pages")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserListLikesHandler handles user_list_likes with raw schema validation
func UserListLikesHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_likesArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("Page")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.TargetId != "" {
		query.Set("target_id", args.TargetId)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "likes")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserListLiveVideosHandler handles user_list_live_videos with raw schema validation
func UserListLiveVideosHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_live_videosArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("LiveVideo")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if len(args.BroadcastStatus) > 0 {
		query.Set("broadcast_status", strings.Join(args.BroadcastStatus, ","))
	}

	if args.Source != "" {
		query.Set("source", args.Source)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "live_videos")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserCreateLiveVideoHandler handles user_create_live_video with raw schema validation
func UserCreateLiveVideoHandler(ctx context.Context, request mcp.CallToolRequest, args user_create_live_videoArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.ContentTags) > 0 {
		body["content_tags"] = args.ContentTags
	}

	if args.Description != "" {
		body["description"] = args.Description
	}

	body["enable_backup_ingest"] = args.EnableBackupIngest

	if args.EncodingSettings != "" {
		body["encoding_settings"] = args.EncodingSettings
	}

	if args.EventParams != nil {
		body["event_params"] = args.EventParams
	}

	body["fisheye_video_cropped"] = args.FisheyeVideoCropped

	if args.FrontZRotation != 0 {
		body["front_z_rotation"] = args.FrontZRotation
	}

	body["is_audio_only"] = args.IsAudioOnly

	body["is_spherical"] = args.IsSpherical

	if args.OriginalFov > 0 {
		body["original_fov"] = args.OriginalFov
	}

	if args.Privacy != "" {
		body["privacy"] = args.Privacy
	}

	if args.Projection != "" {
		body["projection"] = args.Projection
	}

	body["published"] = args.Published

	if args.ScheduleCustomProfileImage != nil {
		body["schedule_custom_profile_image"] = args.ScheduleCustomProfileImage
	}

	if args.SpatialAudioFormat != "" {
		body["spatial_audio_format"] = args.SpatialAudioFormat
	}

	if args.Status != "" {
		body["status"] = args.Status
	}

	if args.StereoscopicMode != "" {
		body["stereoscopic_mode"] = args.StereoscopicMode
	}

	body["stop_on_delete_stream"] = args.StopOnDeleteStream

	if args.StreamType != "" {
		body["stream_type"] = args.StreamType
	}

	if args.Title != "" {
		body["title"] = args.Title
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "live_videos")

	return ExecutePOSTRequest(ctx, url, body)

}

// UserCreateMessengerDesktopPerformanceTraceHandler handles user_create_messenger_desktop_performance_trace with raw schema validation
func UserCreateMessengerDesktopPerformanceTraceHandler(ctx context.Context, request mcp.CallToolRequest, args user_create_messenger_desktop_performance_traceArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build request body
	body := make(map[string]interface{})

	// Add parameters to body

	// Build URL and execute
	url := buildGraphURL("", "messenger_desktop_performance_traces")

	return ExecutePOSTRequest(ctx, url, body)

}

// UserUpdateMessengerKidsAccountsUnreadBadgeHandler handles user_update_messenger_kids_accounts_unread_badge with raw schema validation
func UserUpdateMessengerKidsAccountsUnreadBadgeHandler(ctx context.Context, request mcp.CallToolRequest, args user_update_messenger_kids_accounts_unread_badgeArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build request body
	body := make(map[string]interface{})

	// Add parameters to body

	if args.ProxiedAppId > 0 {
		body["proxied_app_id"] = args.ProxiedAppId
	}

	// Build URL and execute
	url := buildGraphURL("", "messenger_kids_accounts_unread_badge")

	return ExecutePOSTRequest(ctx, url, body)

}

// UserGetMusicHandler handles user_get_music with raw schema validation
func UserGetMusicHandler(ctx context.Context, request mcp.CallToolRequest, args user_get_musicArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("Page")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.TargetId != "" {
		query.Set("target_id", args.TargetId)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "music")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserCreateNotificationHandler handles user_create_notification with raw schema validation
func UserCreateNotificationHandler(ctx context.Context, request mcp.CallToolRequest, args user_create_notificationArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.BotMessagePayloadElements != "" {
		body["bot_message_payload_elements"] = args.BotMessagePayloadElements
	}

	if len(args.Filtering) > 0 {
		body["filtering"] = args.Filtering
	}

	if args.Href != nil {
		body["href"] = args.Href
	}

	if args.Label != "" {
		body["label"] = args.Label
	}

	if args.Message != nil {
		body["message"] = args.Message
	}

	if len(args.NotifIds) > 0 {
		body["notif_ids"] = args.NotifIds
	}

	if args.Payload != "" {
		body["payload"] = args.Payload
	}

	body["read"] = args.Read

	if args.Ref != "" {
		body["ref"] = args.Ref
	}

	if args.ScheduleInterval > 0 {
		body["schedule_interval"] = args.ScheduleInterval
	}

	body["seen"] = args.Seen

	if args.Template != nil {
		body["template"] = args.Template
	}

	if args.Type != "" {
		body["type"] = args.Type
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "notifications")

	return ExecutePOSTRequest(ctx, url, body)

}

// UserListPaymentTransactionsHandler handles user_list_payment_transactions with raw schema validation
func UserListPaymentTransactionsHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_payment_transactionsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("PaymentEnginePayment")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL("", "payment_transactions")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserRemovePermissionsHandler handles user_remove_permissions with raw schema validation
func UserRemovePermissionsHandler(ctx context.Context, request mcp.CallToolRequest, args user_remove_permissionsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	url := buildGraphURL(args.ID, "permissions")
	return ExecuteDELETERequest(ctx, url)

}

// UserListPermissionsHandler handles user_list_permissions with raw schema validation
func UserListPermissionsHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_permissionsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("Permission")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Permission != "" {
		query.Set("permission", args.Permission)
	}

	if args.Status != "" {
		query.Set("status", args.Status)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "permissions")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserListPersonalAdAccountsHandler handles user_list_personal_ad_accounts with raw schema validation
func UserListPersonalAdAccountsHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_personal_ad_accountsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "personal_ad_accounts")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserListPhotosHandler handles user_list_photos with raw schema validation
func UserListPhotosHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_photosArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("Photo")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Type != "" {
		query.Set("type", args.Type)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "photos")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserCreatePhotoHandler handles user_create_photo with raw schema validation
func UserCreatePhotoHandler(ctx context.Context, request mcp.CallToolRequest, args user_create_photoArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.Aid != "" {
		body["aid"] = args.Aid
	}

	body["allow_spherical_photo"] = args.AllowSphericalPhoto

	if args.AltTextCustom != "" {
		body["alt_text_custom"] = args.AltTextCustom
	}

	if args.AndroidKeyHash != "" {
		body["android_key_hash"] = args.AndroidKeyHash
	}

	if args.ApplicationId != "" {
		body["application_id"] = args.ApplicationId
	}

	if args.Attempt > 0 {
		body["attempt"] = args.Attempt
	}

	body["audience_exp"] = args.AudienceExp

	if args.BackdatedTime != "" {
		body["backdated_time"] = args.BackdatedTime
	}

	if args.BackdatedTimeGranularity != "" {
		body["backdated_time_granularity"] = args.BackdatedTimeGranularity
	}

	if args.Caption != "" {
		body["caption"] = args.Caption
	}

	if args.ComposerSessionId != "" {
		body["composer_session_id"] = args.ComposerSessionId
	}

	if args.DirectShareStatus > 0 {
		body["direct_share_status"] = args.DirectShareStatus
	}

	if args.FeedTargeting != nil {
		body["feed_targeting"] = args.FeedTargeting
	}

	if args.FilterType > 0 {
		body["filter_type"] = args.FilterType
	}

	body["full_res_is_coming_later"] = args.FullResIsComingLater

	if args.InitialViewHeadingOverrideDegrees > 0 {
		body["initial_view_heading_override_degrees"] = args.InitialViewHeadingOverrideDegrees
	}

	if args.InitialViewPitchOverrideDegrees > 0 {
		body["initial_view_pitch_override_degrees"] = args.InitialViewPitchOverrideDegrees
	}

	if args.InitialViewVerticalFovOverrideDegrees > 0 {
		body["initial_view_vertical_fov_override_degrees"] = args.InitialViewVerticalFovOverrideDegrees
	}

	if args.IosBundleId != "" {
		body["ios_bundle_id"] = args.IosBundleId
	}

	body["is_explicit_location"] = args.IsExplicitLocation

	body["is_explicit_place"] = args.IsExplicitPlace

	body["manual_privacy"] = args.ManualPrivacy

	if args.Message != "" {
		body["message"] = args.Message
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	body["no_story"] = args.NoStory

	if args.OfflineId > 0 {
		body["offline_id"] = args.OfflineId
	}

	if args.OgActionTypeId != "" {
		body["og_action_type_id"] = args.OgActionTypeId
	}

	if args.OgIconId != "" {
		body["og_icon_id"] = args.OgIconId
	}

	if args.OgObjectId != "" {
		body["og_object_id"] = args.OgObjectId
	}

	if args.OgPhrase != "" {
		body["og_phrase"] = args.OgPhrase
	}

	body["og_set_profile_badge"] = args.OgSetProfileBadge

	if args.OgSuggestionMechanism != "" {
		body["og_suggestion_mechanism"] = args.OgSuggestionMechanism
	}

	if args.Place != nil {
		body["place"] = args.Place
	}

	if args.Privacy != "" {
		body["privacy"] = args.Privacy
	}

	if args.ProfileId > 0 {
		body["profile_id"] = args.ProfileId
	}

	if args.ProvenanceInfo != nil {
		body["provenance_info"] = args.ProvenanceInfo
	}

	if args.ProxiedAppId != "" {
		body["proxied_app_id"] = args.ProxiedAppId
	}

	body["published"] = args.Published

	if args.Qn != "" {
		body["qn"] = args.Qn
	}

	if args.ScheduledPublishTime > 0 {
		body["scheduled_publish_time"] = args.ScheduledPublishTime
	}

	if args.SphericalMetadata != nil {
		body["spherical_metadata"] = args.SphericalMetadata
	}

	if args.SponsorId != "" {
		body["sponsor_id"] = args.SponsorId
	}

	if args.SponsorRelationship > 0 {
		body["sponsor_relationship"] = args.SponsorRelationship
	}

	if len(args.Tags) > 0 {
		body["tags"] = args.Tags
	}

	if args.TargetId > 0 {
		body["target_id"] = args.TargetId
	}

	if args.Targeting != nil {
		body["targeting"] = args.Targeting
	}

	if args.TimeSinceOriginalPost > 0 {
		body["time_since_original_post"] = args.TimeSinceOriginalPost
	}

	if args.Uid > 0 {
		body["uid"] = args.Uid
	}

	if args.UnpublishedContentType != "" {
		body["unpublished_content_type"] = args.UnpublishedContentType
	}

	if args.Url != "" {
		body["url"] = args.Url
	}

	body["user_selected_tags"] = args.UserSelectedTags

	if args.VaultImageId != "" {
		body["vault_image_id"] = args.VaultImageId
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "photos")

	return ExecutePOSTRequest(ctx, url, body)

}

// UserGetPictureHandler handles user_get_picture with raw schema validation
func UserGetPictureHandler(ctx context.Context, request mcp.CallToolRequest, args user_get_pictureArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("ProfilePictureSource")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Height > 0 {
		query.Set("height", fmt.Sprintf("%d", args.Height))
	}

	if args.Redirect {
		query.Set("redirect", "true")
	}

	if args.Type != "" {
		query.Set("type", args.Type)
	}

	if args.Width > 0 {
		query.Set("width", fmt.Sprintf("%d", args.Width))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "picture")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserListPostsHandler handles user_list_posts with raw schema validation
func UserListPostsHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_postsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("Post")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.IncludeHidden {
		query.Set("include_hidden", "true")
	}

	if args.Q != "" {
		query.Set("q", args.Q)
	}

	if args.ShowExpired {
		query.Set("show_expired", "true")
	}

	if args.Since != "" {
		query.Set("since", args.Since)
	}

	if args.Until != "" {
		query.Set("until", args.Until)
	}

	if args.With != "" {
		query.Set("with", args.With)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "posts")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserListRichMediaDocumentsHandler handles user_list_rich_media_documents with raw schema validation
func UserListRichMediaDocumentsHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_rich_media_documentsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("Canvas")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Query != "" {
		query.Set("query", args.Query)
	}

	// Build URL and execute
	baseURL := buildGraphURL("", "rich_media_documents")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserCreateStagingResourceHandler handles user_create_staging_resource with raw schema validation
func UserCreateStagingResourceHandler(ctx context.Context, request mcp.CallToolRequest, args user_create_staging_resourceArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.File != nil {
		body["file"] = args.File
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "staging_resources")

	return ExecutePOSTRequest(ctx, url, body)

}

// UserListVideosHandler handles user_list_videos with raw schema validation
func UserListVideosHandler(ctx context.Context, request mcp.CallToolRequest, args user_list_videosArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdVideo")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Type != "" {
		query.Set("type", args.Type)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "videos")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserCreateVideoHandler handles user_create_video with raw schema validation
func UserCreateVideoHandler(ctx context.Context, request mcp.CallToolRequest, args user_create_videoArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.ApplicationId != "" {
		body["application_id"] = args.ApplicationId
	}

	if args.AskedFunFactPromptId > 0 {
		body["asked_fun_fact_prompt_id"] = args.AskedFunFactPromptId
	}

	if args.AudioStoryWaveAnimationHandle != "" {
		body["audio_story_wave_animation_handle"] = args.AudioStoryWaveAnimationHandle
	}

	if args.ComposerEntryPicker != "" {
		body["composer_entry_picker"] = args.ComposerEntryPicker
	}

	if args.ComposerEntryPoint != "" {
		body["composer_entry_point"] = args.ComposerEntryPoint
	}

	if args.ComposerEntryTime > 0 {
		body["composer_entry_time"] = args.ComposerEntryTime
	}

	if args.ComposerSessionEventsLog != "" {
		body["composer_session_events_log"] = args.ComposerSessionEventsLog
	}

	if args.ComposerSessionId != "" {
		body["composer_session_id"] = args.ComposerSessionId
	}

	if args.ComposerSourceSurface != "" {
		body["composer_source_surface"] = args.ComposerSourceSurface
	}

	if args.ComposerType != "" {
		body["composer_type"] = args.ComposerType
	}

	if args.ContainerType != "" {
		body["container_type"] = args.ContainerType
	}

	if args.ContentCategory != "" {
		body["content_category"] = args.ContentCategory
	}

	if args.CreativeTools != "" {
		body["creative_tools"] = args.CreativeTools
	}

	if args.Description != "" {
		body["description"] = args.Description
	}

	if args.DirectShareStatus > 0 {
		body["direct_share_status"] = args.DirectShareStatus
	}

	body["embeddable"] = args.Embeddable

	if args.EndOffset > 0 {
		body["end_offset"] = args.EndOffset
	}

	if args.FbuploaderVideoFileChunk != "" {
		body["fbuploader_video_file_chunk"] = args.FbuploaderVideoFileChunk
	}

	if args.FileSize > 0 {
		body["file_size"] = args.FileSize
	}

	if args.FileUrl != "" {
		body["file_url"] = args.FileUrl
	}

	body["fisheye_video_cropped"] = args.FisheyeVideoCropped

	if args.Formatting != "" {
		body["formatting"] = args.Formatting
	}

	if args.Fov > 0 {
		body["fov"] = args.Fov
	}

	if args.FrontZRotation != 0 {
		body["front_z_rotation"] = args.FrontZRotation
	}

	if args.FunFactPromptId != "" {
		body["fun_fact_prompt_id"] = args.FunFactPromptId
	}

	if args.FunFactToasteeId > 0 {
		body["fun_fact_toastee_id"] = args.FunFactToasteeId
	}

	if args.Guide != nil {
		body["guide"] = args.Guide
	}

	body["guide_enabled"] = args.GuideEnabled

	if args.InitialHeading > 0 {
		body["initial_heading"] = args.InitialHeading
	}

	if args.InitialPitch > 0 {
		body["initial_pitch"] = args.InitialPitch
	}

	if args.InstantGameEntryPointData != "" {
		body["instant_game_entry_point_data"] = args.InstantGameEntryPointData
	}

	body["is_boost_intended"] = args.IsBoostIntended

	body["is_explicit_share"] = args.IsExplicitShare

	body["is_group_linking_post"] = args.IsGroupLinkingPost

	body["is_partnership_ad"] = args.IsPartnershipAd

	body["is_voice_clip"] = args.IsVoiceClip

	if args.LocationSourceId != "" {
		body["location_source_id"] = args.LocationSourceId
	}

	body["manual_privacy"] = args.ManualPrivacy

	body["no_story"] = args.NoStory

	if args.OgActionTypeId != "" {
		body["og_action_type_id"] = args.OgActionTypeId
	}

	if args.OgIconId != "" {
		body["og_icon_id"] = args.OgIconId
	}

	if args.OgObjectId != "" {
		body["og_object_id"] = args.OgObjectId
	}

	if args.OgPhrase != "" {
		body["og_phrase"] = args.OgPhrase
	}

	if args.OgSuggestionMechanism != "" {
		body["og_suggestion_mechanism"] = args.OgSuggestionMechanism
	}

	if args.OriginalFov > 0 {
		body["original_fov"] = args.OriginalFov
	}

	if args.OriginalProjectionType != "" {
		body["original_projection_type"] = args.OriginalProjectionType
	}

	if args.PartnershipAdAdCode != "" {
		body["partnership_ad_ad_code"] = args.PartnershipAdAdCode
	}

	if args.Privacy != "" {
		body["privacy"] = args.Privacy
	}

	if args.PublishEventId > 0 {
		body["publish_event_id"] = args.PublishEventId
	}

	if args.ReferencedStickerId != "" {
		body["referenced_sticker_id"] = args.ReferencedStickerId
	}

	if args.ReplaceVideoId != "" {
		body["replace_video_id"] = args.ReplaceVideoId
	}

	if args.SlideshowSpec != nil {
		body["slideshow_spec"] = args.SlideshowSpec
	}

	if args.Source != "" {
		body["source"] = args.Source
	}

	if args.SourceInstagramMediaId != "" {
		body["source_instagram_media_id"] = args.SourceInstagramMediaId
	}

	body["spherical"] = args.Spherical

	if args.SponsorId != "" {
		body["sponsor_id"] = args.SponsorId
	}

	if args.StartOffset > 0 {
		body["start_offset"] = args.StartOffset
	}

	if args.SwapMode != "" {
		body["swap_mode"] = args.SwapMode
	}

	if args.TextFormatMetadata != "" {
		body["text_format_metadata"] = args.TextFormatMetadata
	}

	if args.Thumb != nil {
		body["thumb"] = args.Thumb
	}

	if args.TimeSinceOriginalPost > 0 {
		body["time_since_original_post"] = args.TimeSinceOriginalPost
	}

	if args.Title != "" {
		body["title"] = args.Title
	}

	if args.TranscodeSettingProperties != "" {
		body["transcode_setting_properties"] = args.TranscodeSettingProperties
	}

	if args.UnpublishedContentType != "" {
		body["unpublished_content_type"] = args.UnpublishedContentType
	}

	if args.UploadPhase != "" {
		body["upload_phase"] = args.UploadPhase
	}

	if args.UploadSessionId != "" {
		body["upload_session_id"] = args.UploadSessionId
	}

	if args.UploadSettingProperties != "" {
		body["upload_setting_properties"] = args.UploadSettingProperties
	}

	if args.VideoFileChunk != "" {
		body["video_file_chunk"] = args.VideoFileChunk
	}

	if args.VideoIdOriginal != "" {
		body["video_id_original"] = args.VideoIdOriginal
	}

	if args.VideoStartTimeMs > 0 {
		body["video_start_time_ms"] = args.VideoStartTimeMs
	}

	if args.WaterfallId != "" {
		body["waterfall_id"] = args.WaterfallId
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "videos")

	return ExecutePOSTRequest(ctx, url, body)

}

// UserDeleteHandler handles user_delete with raw schema validation
func UserDeleteHandler(ctx context.Context, request mcp.CallToolRequest, args user_deleteArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	url := buildGraphURL(args.ID, "")
	return ExecuteDELETERequest(ctx, url)

}

// UserGetHandler handles user_get with raw schema validation
func UserGetHandler(ctx context.Context, request mcp.CallToolRequest, args user_getArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UserUpdateHandler handles user_update with raw schema validation
func UserUpdateHandler(ctx context.Context, request mcp.CallToolRequest, args user_updateArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.EmojiColorPref > 0 {
		body["emoji_color_pref"] = args.EmojiColorPref
	}

	if args.Firstname != "" {
		body["firstname"] = args.Firstname
	}

	if args.Lastname != "" {
		body["lastname"] = args.Lastname
	}

	if args.LocalNewsMegaphoneDismissStatus != "" {
		body["local_news_megaphone_dismiss_status"] = args.LocalNewsMegaphoneDismissStatus
	}

	if args.LocalNewsSubscriptionStatus != "" {
		body["local_news_subscription_status"] = args.LocalNewsSubscriptionStatus
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.Password != "" {
		body["password"] = args.Password
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "")

	return ExecutePOSTRequest(ctx, url, body)

}

// RegisterUserTools registers all User tools with the MCP server
func RegisterUserTools(s *server.MCPServer) error {

	// Register user_remove_access_tokens using raw JSON schema
	user_remove_access_tokensTool := mcp.NewToolWithRawSchema(
		"user_remove_access_tokens",
		"Remove access_tokens from this User",
		json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_remove_access_tokensTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_remove_access_tokensArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserRemoveAccessTokensHandler(ctx, request, args)
	})

	// Register user_create_access_token using raw JSON schema
	user_create_access_tokenTool := mcp.NewToolWithRawSchema(
		"user_create_access_token",
		"Create or update access_tokens for this User Returns User. Required: business_app",
		json.RawMessage(`{"additionalProperties":false,"properties":{"business_app":{"description":"Business App","type":"string"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"page_id":{"description":"ID of the Page","pattern":"^[0-9]+$","type":"string"},"scope":{"description":"Scope","items":{"type":"string"},"type":"array"},"set_token_expires_in_60_days":{"description":"Set Token Expires In 60 Days","type":"boolean"}},"required":["id","business_app"],"type":"object"}`),
	)
	s.AddTool(user_create_access_tokenTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_create_access_tokenArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserCreateAccessTokenHandler(ctx, request, args)
	})

	// Register user_list_accounts using raw JSON schema
	user_list_accountsTool := mcp.NewToolWithRawSchema(
		"user_list_accounts",
		"List accounts for this User Returns Page.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"ad_id":{"description":"ID of the Ad","pattern":"^[0-9]+$","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"is_place":{"description":"Is Place","type":"boolean"},"is_promotable":{"description":"Is Promotable","type":"boolean"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_accountsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_accountsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListAccountsHandler(ctx, request, args)
	})

	// Register user_create_account using raw JSON schema
	user_create_accountTool := mcp.NewToolWithRawSchema(
		"user_create_account",
		"Create or update accounts for this User Required: name",
		json.RawMessage(`{"additionalProperties":false,"properties":{"about":{"description":"About","type":"string"},"address":{"description":"Address","type":"string"},"category":{"description":"Category","type":"integer"},"category_enum":{"description":"Category Enum","type":"string"},"category_list":{"description":"Category List","items":{"type":"string"},"type":"array"},"city_id":{"description":"ID of the City","pattern":"^[0-9]+$","type":"string"},"coordinates":{"additionalProperties":true,"description":"Coordinates","type":"object"},"cover_photo":{"additionalProperties":true,"description":"Cover Photo","type":"object"},"description":{"description":"Description","type":"string"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"ignore_coordinate_warnings":{"description":"Ignore Coordinate Warnings","type":"boolean"},"location":{"additionalProperties":true,"description":"Location","type":"object"},"name":{"description":"Name","type":"string"},"phone":{"description":"Phone","type":"string"},"picture":{"description":"Picture","type":"string"},"website":{"description":"Website","type":"string"},"zip":{"description":"Zip","type":"string"}},"required":["id","name"],"type":"object"}`),
	)
	s.AddTool(user_create_accountTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_create_accountArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserCreateAccountHandler(ctx, request, args)
	})

	// Register user_list_ad_studies using raw JSON schema
	user_list_ad_studiesTool := mcp.NewToolWithRawSchema(
		"user_list_ad_studies",
		"List ad_studies for this User Returns AdStudy.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_ad_studiesTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_ad_studiesArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListAdStudiesHandler(ctx, request, args)
	})

	// Register user_create_ad_studie using raw JSON schema
	user_create_ad_studieTool := mcp.NewToolWithRawSchema(
		"user_create_ad_studie",
		"Associate ad_studies with this User Returns AdStudy.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"cells":{"description":"Cells","items":{"additionalProperties":true,"type":"object"},"type":"array"},"client_business":{"description":"Client Business","type":"string"},"confidence_level":{"description":"Confidence Level","type":"number"},"cooldown_start_time":{"description":"Cooldown Start Time","type":"integer"},"description":{"description":"Description","type":"string"},"end_time":{"description":"End Time","type":"integer"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"name":{"description":"Name","type":"string"},"objectives":{"description":"Objectives","items":{"additionalProperties":true,"type":"object"},"type":"array"},"observation_end_time":{"description":"Observation End Time","type":"integer"},"start_time":{"description":"Start Time","type":"integer"},"type":{"description":"Type (enum: userad_studies_type_enum_param)","enum":["BACKEND_AB_TESTING","CONTINUOUS_LIFT_CONFIG","GEO_LIFT","LIFT","SPLIT_TEST"],"type":"string"},"viewers":{"description":"Viewers","items":{"type":"integer"},"type":"array"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_create_ad_studieTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_create_ad_studieArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserCreateAdStudieHandler(ctx, request, args)
	})

	// Register user_list_adaccounts using raw JSON schema
	user_list_adaccountsTool := mcp.NewToolWithRawSchema(
		"user_list_adaccounts",
		"List adaccounts for this User Returns AdAccount.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_adaccountsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_adaccountsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListAdaccountsHandler(ctx, request, args)
	})

	// Register user_list_albums using raw JSON schema
	user_list_albumsTool := mcp.NewToolWithRawSchema(
		"user_list_albums",
		"List albums for this User Returns Album.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_albumsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_albumsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListAlbumsHandler(ctx, request, args)
	})

	// Register user_create_application using raw JSON schema
	user_create_applicationTool := mcp.NewToolWithRawSchema(
		"user_create_application",
		"Create or update applications for this User Returns User. Required: business_app",
		json.RawMessage(`{"additionalProperties":false,"properties":{"business_app":{"description":"Business App","type":"integer"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"}},"required":["id","business_app"],"type":"object"}`),
	)
	s.AddTool(user_create_applicationTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_create_applicationArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserCreateApplicationHandler(ctx, request, args)
	})

	// Register user_list_apprequestformerrecipients using raw JSON schema
	user_list_apprequestformerrecipientsTool := mcp.NewToolWithRawSchema(
		"user_list_apprequestformerrecipients",
		"List apprequestformerrecipients for this User Returns AppRequestFormerRecipient.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"}},"required":[],"type":"object"}`),
	)
	s.AddTool(user_list_apprequestformerrecipientsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_apprequestformerrecipientsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListApprequestformerrecipientsHandler(ctx, request, args)
	})

	// Register user_list_apprequests using raw JSON schema
	user_list_apprequestsTool := mcp.NewToolWithRawSchema(
		"user_list_apprequests",
		"List apprequests for this User Returns AppRequest.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_apprequestsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_apprequestsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListApprequestsHandler(ctx, request, args)
	})

	// Register user_list_assigned_ad_accounts using raw JSON schema
	user_list_assigned_ad_accountsTool := mcp.NewToolWithRawSchema(
		"user_list_assigned_ad_accounts",
		"List assigned_ad_accounts for this User Returns AdAccount.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_assigned_ad_accountsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_assigned_ad_accountsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListAssignedAdAccountsHandler(ctx, request, args)
	})

	// Register user_list_assigned_applications using raw JSON schema
	user_list_assigned_applicationsTool := mcp.NewToolWithRawSchema(
		"user_list_assigned_applications",
		"List assigned_applications for this User Returns Application.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_assigned_applicationsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_assigned_applicationsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListAssignedApplicationsHandler(ctx, request, args)
	})

	// Register user_list_assigned_business_asset_groups using raw JSON schema
	user_list_assigned_business_asset_groupsTool := mcp.NewToolWithRawSchema(
		"user_list_assigned_business_asset_groups",
		"List assigned_business_asset_groups for this User Returns BusinessAssetGroup.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"contained_asset_id":{"description":"ID of the Contained Asset","pattern":"^[0-9]+$","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_assigned_business_asset_groupsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_assigned_business_asset_groupsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListAssignedBusinessAssetGroupsHandler(ctx, request, args)
	})

	// Register user_list_assigned_pages using raw JSON schema
	user_list_assigned_pagesTool := mcp.NewToolWithRawSchema(
		"user_list_assigned_pages",
		"List assigned_pages for this User Returns Page.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"pages":{"description":"Pages","items":{"type":"integer"},"type":"array"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_assigned_pagesTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_assigned_pagesArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListAssignedPagesHandler(ctx, request, args)
	})

	// Register user_list_assigned_product_catalogs using raw JSON schema
	user_list_assigned_product_catalogsTool := mcp.NewToolWithRawSchema(
		"user_list_assigned_product_catalogs",
		"List assigned_product_catalogs for this User Returns ProductCatalog.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_assigned_product_catalogsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_assigned_product_catalogsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListAssignedProductCatalogsHandler(ctx, request, args)
	})

	// Register user_list_avatars using raw JSON schema
	user_list_avatarsTool := mcp.NewToolWithRawSchema(
		"user_list_avatars",
		"List avatars for this User Returns Avatar.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_avatarsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_avatarsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListAvatarsHandler(ctx, request, args)
	})

	// Register user_list_business_users using raw JSON schema
	user_list_business_usersTool := mcp.NewToolWithRawSchema(
		"user_list_business_users",
		"List business_users for this User Returns BusinessUser.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"}},"required":[],"type":"object"}`),
	)
	s.AddTool(user_list_business_usersTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_business_usersArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListBusinessUsersHandler(ctx, request, args)
	})

	// Register user_remove_businesses using raw JSON schema
	user_remove_businessesTool := mcp.NewToolWithRawSchema(
		"user_remove_businesses",
		"Remove businesses from this User",
		json.RawMessage(`{"additionalProperties":false,"properties":{"business":{"description":"Business","type":"string"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_remove_businessesTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_remove_businessesArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserRemoveBusinessesHandler(ctx, request, args)
	})

	// Register user_list_businesses using raw JSON schema
	user_list_businessesTool := mcp.NewToolWithRawSchema(
		"user_list_businesses",
		"List businesses for this User Returns Business.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_businessesTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_businessesArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListBusinessesHandler(ctx, request, args)
	})

	// Register user_create_businesse using raw JSON schema
	user_create_businesseTool := mcp.NewToolWithRawSchema(
		"user_create_businesse",
		"Create or update businesses for this User Returns Business. Required: name, vertical (enum)",
		json.RawMessage(`{"additionalProperties":false,"properties":{"child_business_external_id":{"description":"ID of the Child Business External","pattern":"^[0-9]+$","type":"string"},"email":{"description":"Email","type":"string"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"name":{"description":"Name","type":"string"},"primary_page":{"description":"Primary Page","type":"string"},"sales_rep_email":{"description":"Sales Rep Email","type":"string"},"survey_business_type":{"description":"Survey Business Type (enum: userbusinesses_survey_business_type_enum_param)","enum":["ADVERTISER","AGENCY","APP_DEVELOPER","PUBLISHER"],"type":"string"},"survey_num_assets":{"description":"Survey Num Assets","type":"integer"},"survey_num_people":{"description":"Survey Num People","type":"integer"},"timezone_id":{"description":"ID of the Timezone (enum: userbusinesses_timezone_id_enum_param)","enum":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480"],"type":"string"},"vertical":{"description":"Vertical (enum: userbusinesses_vertical_enum_param)","enum":["ADVERTISING","AUTOMOTIVE","CONSUMER_PACKAGED_GOODS","ECOMMERCE","EDUCATION","ENERGY_AND_UTILITIES","ENTERTAINMENT_AND_MEDIA","FINANCIAL_SERVICES","GAMING","GOVERNMENT_AND_POLITICS","HEALTH","LUXURY","MARKETING","NON_PROFIT","NOT_SET","ORGANIZATIONS_AND_ASSOCIATIONS","OTHER","PROFESSIONAL_SERVICES","RESTAURANT","RETAIL","TECHNOLOGY","TELECOM","TRAVEL"],"type":"string"}},"required":["id","name","vertical"],"type":"object"}`),
	)
	s.AddTool(user_create_businesseTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_create_businesseArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserCreateBusinesseHandler(ctx, request, args)
	})

	// Register user_list_conversations using raw JSON schema
	user_list_conversationsTool := mcp.NewToolWithRawSchema(
		"user_list_conversations",
		"List conversations for this User Returns UnifiedThread.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"folder":{"description":"Folder","type":"string"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"platform":{"description":"Platform (enum: userconversations_platform_enum_param)","enum":["INSTAGRAM","MESSENGER"],"type":"string"},"tags":{"description":"Tags","items":{"type":"string"},"type":"array"},"user_id":{"description":"ID of the User","pattern":"^[0-9]+$","type":"string"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_conversationsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_conversationsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListConversationsHandler(ctx, request, args)
	})

	// Register user_list_custom_labels using raw JSON schema
	user_list_custom_labelsTool := mcp.NewToolWithRawSchema(
		"user_list_custom_labels",
		"List custom_labels for this User Returns PageUserMessageThreadLabel.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_custom_labelsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_custom_labelsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListCustomLabelsHandler(ctx, request, args)
	})

	// Register user_list_events using raw JSON schema
	user_list_eventsTool := mcp.NewToolWithRawSchema(
		"user_list_events",
		"List events for this User Returns Event.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"include_canceled":{"description":"Include Canceled","type":"boolean"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"type":{"description":"Type (enum: userevents_type_enum_param)","enum":["attending","created","declined","maybe","not_replied"],"type":"string"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_eventsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_eventsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListEventsHandler(ctx, request, args)
	})

	// Register user_get_feed using raw JSON schema
	user_get_feedTool := mcp.NewToolWithRawSchema(
		"user_get_feed",
		"Get feed data for this User Returns Post.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"include_hidden":{"description":"Include Hidden","type":"boolean"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"q":{"description":"Q","type":"string"},"show_expired":{"description":"Show Expired","type":"boolean"},"since":{"description":"Since","type":"string"},"until":{"description":"Until","type":"string"},"with":{"description":"With","type":"string"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_get_feedTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_get_feedArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserGetFeedHandler(ctx, request, args)
	})

	// Register user_update_feed using raw JSON schema
	user_update_feedTool := mcp.NewToolWithRawSchema(
		"user_update_feed",
		"Create or update feed for this User Returns Post.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"actions":{"additionalProperties":true,"description":"Actions","type":"object"},"album_id":{"description":"ID of the Album","pattern":"^[0-9]+$","type":"string"},"android_key_hash":{"description":"Android Key Hash","type":"string"},"application_id":{"description":"ID of the Application","pattern":"^[0-9]+$","type":"string"},"asked_fun_fact_prompt_id":{"description":"ID of the Asked Fun Fact Prompt","pattern":"^[0-9]+$","type":"integer"},"asset3d_id":{"description":"ID of the Asset3d","pattern":"^[0-9]+$","type":"string"},"associated_id":{"description":"ID of the Associated","pattern":"^[0-9]+$","type":"string"},"attach_place_suggestion":{"description":"Attach Place Suggestion","type":"boolean"},"attached_media":{"description":"Attached Media","items":{"additionalProperties":true,"type":"object"},"type":"array"},"audience_exp":{"description":"Audience Exp","type":"boolean"},"backdated_time":{"description":"Backdated Time","type":"string"},"backdated_time_granularity":{"description":"Backdated Time Granularity (enum: userfeed_backdated_time_granularity_enum_param)","enum":["day","hour","min","month","none","year"],"type":"string"},"breaking_news":{"description":"Breaking News","type":"boolean"},"breaking_news_expiration":{"description":"Breaking News Expiration","type":"integer"},"call_to_action":{"additionalProperties":true,"description":"Call To Action","type":"object"},"caption":{"description":"Caption","type":"string"},"child_attachments":{"description":"Child Attachments","items":{"additionalProperties":true,"type":"object"},"type":"array"},"client_mutation_id":{"description":"ID of the Client Mutation","pattern":"^[0-9]+$","type":"string"},"composer_entry_picker":{"description":"Composer Entry Picker","type":"string"},"composer_entry_point":{"description":"Composer Entry Point","type":"string"},"composer_entry_time":{"description":"Composer Entry Time","type":"integer"},"composer_session_events_log":{"description":"Composer Session Events Log","type":"string"},"composer_session_id":{"description":"ID of the Composer Session","pattern":"^[0-9]+$","type":"string"},"composer_source_surface":{"description":"Composer Source Surface","type":"string"},"composer_type":{"description":"Composer Type","type":"string"},"connection_class":{"description":"Connection Class","type":"string"},"content_attachment":{"description":"Content Attachment","type":"string"},"coordinates":{"additionalProperties":true,"description":"Coordinates","type":"object"},"cta_link":{"description":"Cta Link","type":"string"},"cta_type":{"description":"Cta Type","type":"string"},"description":{"description":"Description","type":"string"},"direct_share_status":{"description":"Direct Share Status","type":"integer"},"expanded_height":{"description":"Expanded Height","type":"integer"},"expanded_width":{"description":"Expanded Width","type":"integer"},"feed_targeting":{"additionalProperties":true,"description":"Feed Targeting","type":"object"},"formatting":{"description":"Formatting (enum: userfeed_formatting_enum_param)","enum":["MARKDOWN","PLAINTEXT"],"type":"string"},"fun_fact_prompt_id":{"description":"ID of the Fun Fact Prompt","pattern":"^[0-9]+$","type":"string"},"fun_fact_toastee_id":{"description":"ID of the Fun Fact Toastee","pattern":"^[0-9]+$","type":"integer"},"height":{"description":"Height","type":"integer"},"home_checkin_city_id":{"additionalProperties":true,"description":"ID of the Home Checkin City","type":"object"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"image_crops":{"description":"Image Crops","type":"string"},"implicit_with_tags":{"description":"Implicit With Tags","items":{"type":"integer"},"type":"array"},"instant_game_entry_point_data":{"description":"Instant Game Entry Point Data","type":"string"},"ios_bundle_id":{"description":"ID of the Ios Bundle","pattern":"^[0-9]+$","type":"string"},"is_backout_draft":{"description":"Is Backout Draft","type":"boolean"},"is_boost_intended":{"description":"Is Boost Intended","type":"boolean"},"is_explicit_location":{"description":"Is Explicit Location","type":"boolean"},"is_explicit_share":{"description":"Is Explicit Share","type":"boolean"},"is_group_linking_post":{"description":"Is Group Linking Post","type":"boolean"},"is_photo_container":{"description":"Is Photo Container","type":"boolean"},"link":{"description":"Link","type":"string"},"location_source_id":{"description":"ID of the Location Source","pattern":"^[0-9]+$","type":"string"},"manual_privacy":{"description":"Manual Privacy","type":"boolean"},"message":{"description":"Message","type":"string"},"multi_share_end_card":{"description":"Multi Share End Card","type":"boolean"},"multi_share_optimized":{"description":"Multi Share Optimized","type":"boolean"},"name":{"description":"Name","type":"string"},"nectar_module":{"description":"Nectar Module","type":"string"},"object_attachment":{"description":"Object Attachment","type":"string"},"og_action_type_id":{"description":"ID of the Og Action Type","pattern":"^[0-9]+$","type":"string"},"og_hide_object_attachment":{"description":"Og Hide Object Attachment","type":"boolean"},"og_icon_id":{"description":"ID of the Og Icon","pattern":"^[0-9]+$","type":"string"},"og_object_id":{"description":"ID of the Og Object","pattern":"^[0-9]+$","type":"string"},"og_phrase":{"description":"Og Phrase","type":"string"},"og_set_profile_badge":{"description":"Og Set Profile Badge","type":"boolean"},"og_suggestion_mechanism":{"description":"Og Suggestion Mechanism","type":"string"},"page_recommendation":{"description":"Page Recommendation","type":"string"},"picture":{"description":"Picture","type":"string"},"place":{"additionalProperties":true,"description":"Place","type":"object"},"place_attachment_setting":{"description":"Place Attachment Setting (enum: userfeed_place_attachment_setting_enum_param)","enum":["1","2"],"type":"string"},"place_list":{"description":"Place List","type":"string"},"place_list_data":{"description":"Place List Data","type":"string"},"post_surfaces_blacklist":{"description":"Post Surfaces Blacklist","items":{"type":"string"},"type":"array"},"posting_to_redspace":{"description":"Posting To Redspace (enum: userfeed_posting_to_redspace_enum_param)","enum":["disabled","enabled"],"type":"string"},"privacy":{"description":"Privacy","type":"string"},"prompt_id":{"description":"ID of the Prompt","pattern":"^[0-9]+$","type":"string"},"prompt_tracking_string":{"description":"Prompt Tracking String","type":"string"},"properties":{"additionalProperties":true,"description":"Properties","type":"object"},"proxied_app_id":{"description":"ID of the Proxied App","pattern":"^[0-9]+$","type":"string"},"publish_event_id":{"description":"ID of the Publish Event","pattern":"^[0-9]+$","type":"integer"},"published":{"description":"Published","type":"boolean"},"quote":{"description":"Quote","type":"string"},"ref":{"description":"Ref","items":{"type":"string"},"type":"array"},"referenceable_image_ids":{"description":"Referenceable Image Ids","items":{"type":"string"},"type":"array"},"referral_id":{"description":"ID of the Referral","pattern":"^[0-9]+$","type":"string"},"scheduled_publish_time":{"description":"Scheduled Publish Time","type":"string"},"source":{"description":"Source","type":"string"},"sponsor_id":{"description":"ID of the Sponsor","pattern":"^[0-9]+$","type":"string"},"sponsor_relationship":{"description":"Sponsor Relationship","type":"integer"},"suggested_place_id":{"additionalProperties":true,"description":"ID of the Suggested Place","type":"object"},"tags":{"description":"Tags","items":{"type":"integer"},"type":"array"},"target_surface":{"description":"Target Surface (enum: userfeed_target_surface_enum_param)","enum":["STORY","TIMELINE"],"type":"string"},"targeting":{"additionalProperties":true,"description":"Targeting","type":"object"},"text_format_metadata":{"description":"Text Format Metadata","type":"string"},"text_format_preset_id":{"description":"ID of the Text Format Preset","pattern":"^[0-9]+$","type":"string"},"text_only_place":{"description":"Text Only Place","type":"string"},"thumbnail":{"description":"Thumbnail","type":"string"},"time_since_original_post":{"description":"Time Since Original Post","type":"integer"},"title":{"description":"Title","type":"string"},"tracking_info":{"description":"Tracking Info","type":"string"},"unpublished_content_type":{"description":"Unpublished Content Type (enum: userfeed_unpublished_content_type_enum_param)","enum":["ADS_POST","DRAFT","INLINE_CREATED","PUBLISHED","REVIEWABLE_BRANDED_CONTENT","SCHEDULED","SCHEDULED_RECURRING"],"type":"string"},"user_selected_tags":{"description":"User Selected Tags","type":"boolean"},"video_start_time_ms":{"description":"Video Start Time Ms","type":"integer"},"viewer_coordinates":{"additionalProperties":true,"description":"Viewer Coordinates","type":"object"},"width":{"description":"Width","type":"integer"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_update_feedTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_update_feedArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserUpdateFeedHandler(ctx, request, args)
	})

	// Register user_list_friends using raw JSON schema
	user_list_friendsTool := mcp.NewToolWithRawSchema(
		"user_list_friends",
		"List friends for this User Returns User.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"uid":{"description":"Uid","type":"integer"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_friendsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_friendsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListFriendsHandler(ctx, request, args)
	})

	// Register user_list_fundraisers using raw JSON schema
	user_list_fundraisersTool := mcp.NewToolWithRawSchema(
		"user_list_fundraisers",
		"List fundraisers for this User Returns FundraiserPersonToCharity.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_fundraisersTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_fundraisersArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListFundraisersHandler(ctx, request, args)
	})

	// Register user_create_fundraiser using raw JSON schema
	user_create_fundraiserTool := mcp.NewToolWithRawSchema(
		"user_create_fundraiser",
		"Create or update fundraisers for this User Returns FundraiserPersonToCharity. Required: currency, description, end_time, external_id, fundraiser_type (enum), goal_amount, name",
		json.RawMessage(`{"additionalProperties":false,"properties":{"charity_id":{"description":"ID of the Charity","pattern":"^[0-9]+$","type":"string"},"cover_photo":{"description":"Cover Photo","type":"string"},"currency":{"description":"Currency","type":"string"},"description":{"description":"Description","type":"string"},"end_time":{"description":"End Time","type":"string"},"external_event_name":{"description":"External Event Name","type":"string"},"external_event_start_time":{"description":"External Event Start Time","type":"string"},"external_event_uri":{"description":"External Event Uri","type":"string"},"external_fundraiser_uri":{"description":"External Fundraiser Uri","type":"string"},"external_id":{"description":"ID of the External","pattern":"^[0-9]+$","type":"string"},"fundraiser_type":{"description":"Fundraiser Type (enum: userfundraisers_fundraiser_type_enum_param)","enum":["person_for_charity"],"type":"string"},"goal_amount":{"description":"Goal Amount","type":"integer"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"name":{"description":"Name","type":"string"},"page_id":{"description":"ID of the Page","pattern":"^[0-9]+$","type":"string"}},"required":["id","currency","description","end_time","external_id","fundraiser_type","goal_amount","name"],"type":"object"}`),
	)
	s.AddTool(user_create_fundraiserTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_create_fundraiserArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserCreateFundraiserHandler(ctx, request, args)
	})

	// Register user_list_groups using raw JSON schema
	user_list_groupsTool := mcp.NewToolWithRawSchema(
		"user_list_groups",
		"List groups for this User Returns Group.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"admin_only":{"description":"Admin Only","type":"boolean"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"parent":{"description":"Parent","type":"string"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_groupsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_groupsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListGroupsHandler(ctx, request, args)
	})

	// Register user_list_ids_for_apps using raw JSON schema
	user_list_ids_for_appsTool := mcp.NewToolWithRawSchema(
		"user_list_ids_for_apps",
		"List ids_for_apps for this User Returns UserIDForApp.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"app":{"description":"App","type":"integer"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_ids_for_appsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_ids_for_appsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListIdsForAppsHandler(ctx, request, args)
	})

	// Register user_list_ids_for_business using raw JSON schema
	user_list_ids_for_businessTool := mcp.NewToolWithRawSchema(
		"user_list_ids_for_business",
		"List ids_for_business for this User Returns UserIDForApp.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"app":{"description":"App","type":"integer"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_ids_for_businessTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_ids_for_businessArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListIdsForBusinessHandler(ctx, request, args)
	})

	// Register user_list_ids_for_pages using raw JSON schema
	user_list_ids_for_pagesTool := mcp.NewToolWithRawSchema(
		"user_list_ids_for_pages",
		"List ids_for_pages for this User Returns UserIDForPage.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"page":{"description":"Page","maximum":100,"minimum":13,"type":"integer"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_ids_for_pagesTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_ids_for_pagesArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListIdsForPagesHandler(ctx, request, args)
	})

	// Register user_list_likes using raw JSON schema
	user_list_likesTool := mcp.NewToolWithRawSchema(
		"user_list_likes",
		"List likes for this User Returns Page.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"target_id":{"description":"ID of the Target","pattern":"^[0-9]+$","type":"string"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_likesTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_likesArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListLikesHandler(ctx, request, args)
	})

	// Register user_list_live_videos using raw JSON schema
	user_list_live_videosTool := mcp.NewToolWithRawSchema(
		"user_list_live_videos",
		"List live_videos for this User Returns LiveVideo.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"broadcast_status":{"description":"Broadcast Status","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"source":{"description":"Source (enum: userlive_videos_source_enum_param)","enum":["owner","target"],"type":"string"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_live_videosTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_live_videosArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListLiveVideosHandler(ctx, request, args)
	})

	// Register user_create_live_video using raw JSON schema
	user_create_live_videoTool := mcp.NewToolWithRawSchema(
		"user_create_live_video",
		"Create or update live_videos for this User Returns LiveVideo.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"content_tags":{"description":"Content Tags","items":{"type":"string"},"type":"array"},"description":{"description":"Description","type":"string"},"enable_backup_ingest":{"description":"Enable Backup Ingest","type":"boolean"},"encoding_settings":{"description":"Encoding Settings","type":"string"},"event_params":{"additionalProperties":true,"description":"Event Params","type":"object"},"fisheye_video_cropped":{"description":"Fisheye Video Cropped","type":"boolean"},"front_z_rotation":{"description":"Front Z Rotation","type":"number"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"is_audio_only":{"description":"Is Audio Only","type":"boolean"},"is_spherical":{"description":"Is Spherical","type":"boolean"},"original_fov":{"description":"Original Fov","type":"integer"},"privacy":{"description":"Privacy","type":"string"},"projection":{"description":"Projection (enum: userlive_videos_projection_enum_param)","enum":["CUBEMAP","EQUIRECTANGULAR","HALF_EQUIRECTANGULAR"],"type":"string"},"published":{"description":"Published","type":"boolean"},"schedule_custom_profile_image":{"description":"Schedule Custom Profile Image","type":"string"},"spatial_audio_format":{"description":"Spatial Audio Format (enum: userlive_videos_spatial_audio_format_enum_param)","enum":["ambiX_4"],"type":"string"},"status":{"description":"Status (enum: userlive_videos_status_enum_param)","enum":["LIVE_NOW","SCHEDULED_CANCELED","SCHEDULED_LIVE","SCHEDULED_UNPUBLISHED","UNPUBLISHED"],"type":"string"},"stereoscopic_mode":{"description":"Stereoscopic Mode (enum: userlive_videos_stereoscopic_mode_enum_param)","enum":["LEFT_RIGHT","MONO","TOP_BOTTOM"],"type":"string"},"stop_on_delete_stream":{"description":"Stop On Delete Stream","type":"boolean"},"stream_type":{"description":"Stream Type (enum: userlive_videos_stream_type_enum_param)","enum":["AMBIENT","REGULAR"],"type":"string"},"title":{"description":"Title","type":"string"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_create_live_videoTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_create_live_videoArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserCreateLiveVideoHandler(ctx, request, args)
	})

	// Register user_create_messenger_desktop_performance_trace using raw JSON schema
	user_create_messenger_desktop_performance_traceTool := mcp.NewToolWithRawSchema(
		"user_create_messenger_desktop_performance_trace",
		"Create or update messenger_desktop_performance_traces for this User Returns User.",
		json.RawMessage(`{"additionalProperties":false,"properties":{},"required":[],"type":"object"}`),
	)
	s.AddTool(user_create_messenger_desktop_performance_traceTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_create_messenger_desktop_performance_traceArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserCreateMessengerDesktopPerformanceTraceHandler(ctx, request, args)
	})

	// Register user_update_messenger_kids_accounts_unread_badge using raw JSON schema
	user_update_messenger_kids_accounts_unread_badgeTool := mcp.NewToolWithRawSchema(
		"user_update_messenger_kids_accounts_unread_badge",
		"Create or update messenger_kids_accounts_unread_badge for this User Returns User. Required: proxied_app_id",
		json.RawMessage(`{"additionalProperties":false,"properties":{"proxied_app_id":{"description":"ID of the Proxied App","pattern":"^[0-9]+$","type":"integer"}},"required":["proxied_app_id"],"type":"object"}`),
	)
	s.AddTool(user_update_messenger_kids_accounts_unread_badgeTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_update_messenger_kids_accounts_unread_badgeArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserUpdateMessengerKidsAccountsUnreadBadgeHandler(ctx, request, args)
	})

	// Register user_get_music using raw JSON schema
	user_get_musicTool := mcp.NewToolWithRawSchema(
		"user_get_music",
		"Get music data for this User Returns Page.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"target_id":{"description":"ID of the Target","pattern":"^[0-9]+$","type":"string"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_get_musicTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_get_musicArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserGetMusicHandler(ctx, request, args)
	})

	// Register user_create_notification using raw JSON schema
	user_create_notificationTool := mcp.NewToolWithRawSchema(
		"user_create_notification",
		"Create or update notifications for this User Returns User.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"bot_message_payload_elements":{"description":"Bot Message Payload Elements","type":"string"},"filtering":{"description":"Filtering","items":{"type":"string"},"type":"array"},"href":{"additionalProperties":true,"description":"Href","type":"object"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"label":{"description":"Label","type":"string"},"message":{"description":"Message","type":"string"},"notif_ids":{"description":"Notif Ids","items":{"type":"string"},"type":"array"},"payload":{"description":"Payload","type":"string"},"read":{"description":"Read","type":"boolean"},"ref":{"description":"Ref","type":"string"},"schedule_interval":{"description":"Schedule Interval","type":"integer"},"seen":{"description":"Seen","type":"boolean"},"template":{"additionalProperties":true,"description":"Template","type":"object"},"type":{"description":"Type (enum: usernotifications_type_enum_param)","enum":["content_update","generic"],"type":"string"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_create_notificationTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_create_notificationArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserCreateNotificationHandler(ctx, request, args)
	})

	// Register user_list_payment_transactions using raw JSON schema
	user_list_payment_transactionsTool := mcp.NewToolWithRawSchema(
		"user_list_payment_transactions",
		"List payment_transactions for this User Returns PaymentEnginePayment.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"}},"required":[],"type":"object"}`),
	)
	s.AddTool(user_list_payment_transactionsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_payment_transactionsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListPaymentTransactionsHandler(ctx, request, args)
	})

	// Register user_remove_permissions using raw JSON schema
	user_remove_permissionsTool := mcp.NewToolWithRawSchema(
		"user_remove_permissions",
		"Remove permissions from this User",
		json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"permission":{"description":"Permission","type":"string"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_remove_permissionsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_remove_permissionsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserRemovePermissionsHandler(ctx, request, args)
	})

	// Register user_list_permissions using raw JSON schema
	user_list_permissionsTool := mcp.NewToolWithRawSchema(
		"user_list_permissions",
		"List permissions for this User Returns Permission.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"permission":{"description":"Permission","type":"string"},"status":{"description":"Status (enum: userpermissions_status_enum_param)","enum":["declined","expired","granted"],"type":"string"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_permissionsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_permissionsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListPermissionsHandler(ctx, request, args)
	})

	// Register user_list_personal_ad_accounts using raw JSON schema
	user_list_personal_ad_accountsTool := mcp.NewToolWithRawSchema(
		"user_list_personal_ad_accounts",
		"List personal_ad_accounts for this User Returns AdAccount.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_personal_ad_accountsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_personal_ad_accountsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListPersonalAdAccountsHandler(ctx, request, args)
	})

	// Register user_list_photos using raw JSON schema
	user_list_photosTool := mcp.NewToolWithRawSchema(
		"user_list_photos",
		"List photos for this User Returns Photo.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"type":{"description":"Type (enum: userphotos_type_enum_param)","enum":["tagged","uploaded"],"type":"string"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_photosTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_photosArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListPhotosHandler(ctx, request, args)
	})

	// Register user_create_photo using raw JSON schema
	user_create_photoTool := mcp.NewToolWithRawSchema(
		"user_create_photo",
		"Create or update photos for this User Returns Photo.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"aid":{"description":"Aid","type":"string"},"allow_spherical_photo":{"description":"Allow Spherical Photo","type":"boolean"},"alt_text_custom":{"description":"Alt Text Custom","type":"string"},"android_key_hash":{"description":"Android Key Hash","type":"string"},"application_id":{"description":"ID of the Application","pattern":"^[0-9]+$","type":"string"},"attempt":{"description":"Attempt","type":"integer"},"audience_exp":{"description":"Audience Exp","type":"boolean"},"backdated_time":{"description":"Backdated Time","type":"string"},"backdated_time_granularity":{"description":"Backdated Time Granularity (enum: userphotos_backdated_time_granularity_enum_param)","enum":["day","hour","min","month","none","year"],"type":"string"},"caption":{"description":"Caption","type":"string"},"composer_session_id":{"description":"ID of the Composer Session","pattern":"^[0-9]+$","type":"string"},"direct_share_status":{"description":"Direct Share Status","type":"integer"},"feed_targeting":{"additionalProperties":true,"description":"Feed Targeting","type":"object"},"filter_type":{"description":"Filter Type","type":"integer"},"full_res_is_coming_later":{"description":"Full Res Is Coming Later","type":"boolean"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"initial_view_heading_override_degrees":{"description":"Initial View Heading Override Degrees","type":"integer"},"initial_view_pitch_override_degrees":{"description":"Initial View Pitch Override Degrees","type":"integer"},"initial_view_vertical_fov_override_degrees":{"description":"Initial View Vertical Fov Override Degrees","type":"integer"},"ios_bundle_id":{"description":"ID of the Ios Bundle","pattern":"^[0-9]+$","type":"string"},"is_explicit_location":{"description":"Is Explicit Location","type":"boolean"},"is_explicit_place":{"description":"Is Explicit Place","type":"boolean"},"manual_privacy":{"description":"Manual Privacy","type":"boolean"},"message":{"description":"Message","type":"string"},"name":{"description":"Name","type":"string"},"no_story":{"description":"No Story","type":"boolean"},"offline_id":{"description":"ID of the Offline","pattern":"^[0-9]+$","type":"integer"},"og_action_type_id":{"description":"ID of the Og Action Type","pattern":"^[0-9]+$","type":"string"},"og_icon_id":{"description":"ID of the Og Icon","pattern":"^[0-9]+$","type":"string"},"og_object_id":{"description":"ID of the Og Object","pattern":"^[0-9]+$","type":"string"},"og_phrase":{"description":"Og Phrase","type":"string"},"og_set_profile_badge":{"description":"Og Set Profile Badge","type":"boolean"},"og_suggestion_mechanism":{"description":"Og Suggestion Mechanism","type":"string"},"place":{"additionalProperties":true,"description":"Place","type":"object"},"privacy":{"description":"Privacy","type":"string"},"profile_id":{"description":"ID of the Profile","pattern":"^[0-9]+$","type":"integer"},"provenance_info":{"description":"Provenance Info","type":"string"},"proxied_app_id":{"description":"ID of the Proxied App","pattern":"^[0-9]+$","type":"string"},"published":{"description":"Published","type":"boolean"},"qn":{"description":"Qn","type":"string"},"scheduled_publish_time":{"description":"Scheduled Publish Time","type":"integer"},"spherical_metadata":{"description":"Spherical Metadata","type":"string"},"sponsor_id":{"description":"ID of the Sponsor","pattern":"^[0-9]+$","type":"string"},"sponsor_relationship":{"description":"Sponsor Relationship","type":"integer"},"tags":{"description":"Tags","items":{"additionalProperties":true,"type":"object"},"type":"array"},"target_id":{"description":"ID of the Target","pattern":"^[0-9]+$","type":"integer"},"targeting":{"additionalProperties":true,"description":"Targeting","type":"object"},"time_since_original_post":{"description":"Time Since Original Post","type":"integer"},"uid":{"description":"Uid","type":"integer"},"unpublished_content_type":{"description":"Unpublished Content Type (enum: userphotos_unpublished_content_type_enum_param)","enum":["ADS_POST","DRAFT","INLINE_CREATED","PUBLISHED","REVIEWABLE_BRANDED_CONTENT","SCHEDULED","SCHEDULED_RECURRING"],"type":"string"},"url":{"description":"URL","format":"uri","type":"string"},"user_selected_tags":{"description":"User Selected Tags","type":"boolean"},"vault_image_id":{"description":"ID of the Vault Image","pattern":"^[0-9]+$","type":"string"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_create_photoTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_create_photoArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserCreatePhotoHandler(ctx, request, args)
	})

	// Register user_get_picture using raw JSON schema
	user_get_pictureTool := mcp.NewToolWithRawSchema(
		"user_get_picture",
		"Get picture data for this User Returns ProfilePictureSource.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"height":{"description":"Height","type":"integer"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"redirect":{"description":"Redirect","type":"boolean"},"type":{"description":"Type (enum: userpicture_type_enum_param)","enum":["album","large","normal","small","square"],"type":"string"},"width":{"description":"Width","type":"integer"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_get_pictureTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_get_pictureArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserGetPictureHandler(ctx, request, args)
	})

	// Register user_list_posts using raw JSON schema
	user_list_postsTool := mcp.NewToolWithRawSchema(
		"user_list_posts",
		"List posts for this User Returns Post.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"include_hidden":{"description":"Include Hidden","type":"boolean"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"q":{"description":"Q","type":"string"},"show_expired":{"description":"Show Expired","type":"boolean"},"since":{"description":"Since","type":"string"},"until":{"description":"Until","type":"string"},"with":{"description":"With","type":"string"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_postsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_postsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListPostsHandler(ctx, request, args)
	})

	// Register user_list_rich_media_documents using raw JSON schema
	user_list_rich_media_documentsTool := mcp.NewToolWithRawSchema(
		"user_list_rich_media_documents",
		"List rich_media_documents for this User Returns Canvas.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"query":{"description":"Query","type":"string"}},"required":[],"type":"object"}`),
	)
	s.AddTool(user_list_rich_media_documentsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_rich_media_documentsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListRichMediaDocumentsHandler(ctx, request, args)
	})

	// Register user_create_staging_resource using raw JSON schema
	user_create_staging_resourceTool := mcp.NewToolWithRawSchema(
		"user_create_staging_resource",
		"Create or update staging_resources for this User Returns User.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"file":{"description":"File","type":"string"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_create_staging_resourceTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_create_staging_resourceArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserCreateStagingResourceHandler(ctx, request, args)
	})

	// Register user_list_videos using raw JSON schema
	user_list_videosTool := mcp.NewToolWithRawSchema(
		"user_list_videos",
		"List videos for this User Returns AdVideo.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"type":{"description":"Type (enum: uservideos_type_enum_param)","enum":["TAGGED","UPLOADED"],"type":"string"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_list_videosTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_list_videosArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserListVideosHandler(ctx, request, args)
	})

	// Register user_create_video using raw JSON schema
	user_create_videoTool := mcp.NewToolWithRawSchema(
		"user_create_video",
		"Create or update videos for this User Returns AdVideo.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"application_id":{"description":"ID of the Application","pattern":"^[0-9]+$","type":"string"},"asked_fun_fact_prompt_id":{"description":"ID of the Asked Fun Fact Prompt","pattern":"^[0-9]+$","type":"integer"},"audio_story_wave_animation_handle":{"description":"Audio Story Wave Animation Handle","type":"string"},"composer_entry_picker":{"description":"Composer Entry Picker","type":"string"},"composer_entry_point":{"description":"Composer Entry Point","type":"string"},"composer_entry_time":{"description":"Composer Entry Time","type":"integer"},"composer_session_events_log":{"description":"Composer Session Events Log","type":"string"},"composer_session_id":{"description":"ID of the Composer Session","pattern":"^[0-9]+$","type":"string"},"composer_source_surface":{"description":"Composer Source Surface","type":"string"},"composer_type":{"description":"Composer Type","type":"string"},"container_type":{"description":"Container Type (enum: uservideos_container_type_enum_param)","enum":["ACO_VIDEO_VARIATION","ADS_AI_GENERATED","AD_BREAK_PREVIEW","AD_DERIVATIVE","AD_LIBRARY_WATERMARK","ALBUM_MULTIMEDIA_POST","ALOHA_SUPERFRAME","APP_REREVIEW_SCREENCAST","APP_REVIEW_SCREENCAST","ASSET_MANAGER","ATLAS_VIDEO","AUDIO_BROADCAST","AUDIO_COMMENT","BROADCAST","CANVAS","CMS_MEDIA_MANAGER","CONTAINED_POST_ATTACHMENT","CONTAINED_POST_AUDIO_BROADCAST","CONTAINED_POST_COPYRIGHT_REFERENCE_BROADCAST","COPYRIGHT_REFERENCE_BROADCAST","COPYRIGHT_REFERENCE_IG_XPOST_VIDEO","COPYRIGHT_REFERENCE_VIDEO","CREATION_ML_PRECREATION","CREATOR_FAN_CHALLENGE","CREATOR_STOREFRONT_PERSONALIZED_VIDEO","DATAGENIX_VIDEO","DCO_AD_ASSET_FEED","DCO_AUTOGEN_VIDEO","DCO_TRIMMED_VIDEO","DIM_SUM","DIRECTED_POST_ATTACHMENT","DIRECT_INBOX","DROPS_SHOPPING_EVENT_PAGE","DYNAMIC_ITEM_VIDEO","DYNAMIC_TEMPLATE_VIDEO","EVENT_COVER_VIDEO","EVENT_TOUR","FACECAST_DVR","FB_AVATAR_ANIMATED_SATP","FB_COLLECTIBLE_VIDEO","FB_SHORTS","FB_SHORTS_CONTENT_REMIXABLE","FB_SHORTS_GROUP_POST","FB_SHORTS_LINKED_PRODUCT","FB_SHORTS_PMV_POST","FB_SHORTS_POST","FB_SHORTS_REMIX_POST","FUNDRAISER_COVER_VIDEO","GAME_CLIP","GIF_TO_VIDEO","GOODWILL_ANNIVERSARY_DEPRECATED","GOODWILL_ANNIVERSARY_PROMOTION_DEPRECATED","GOODWILL_VIDEO_CONTAINED_SHARE","GOODWILL_VIDEO_PROMOTION","GOODWILL_VIDEO_SHARE","GOODWILL_VIDEO_TOKEN_REQUIRED","GROUP_POST","HEURISTIC_CLUSTER_VIDEO","HIGHLIGHT_CLIP_VIDEO","HORIZON_WORLDS_TV","HUDDLE_BROADCAST","IG_REELS_XPV","IG_STORIES_READER","INJECTABLE","INSPIRATION_VIDEO","INSTAGRAM_VIDEO_COPY","INSTANT_APPLICATION_PREVIEW","INSTANT_ARTICLE","ISSUE_MODULE","LEARN","LEGACY","LEGACY_CONTAINED_POST_BROADCAST","LIVE_AUDIO_ROOM_BROADCAST","LIVE_CLIP_PREVIEW","LIVE_CLIP_WORKCHAT","LIVE_CREATIVE_KIT_VIDEO","LIVE_PHOTO","LOOK_NOW_DEPRECATED","MARKETPLACE_LISTING_VIDEO","MARKETPLACE_PRE_RECORDED_VIDEO","MOMENTS_VIDEO","MUSIC_CLIP","MUSIC_CLIP_IN_COMMENT","MUSIC_CLIP_IN_LIGHTWEIGHT_STATUS","MUSIC_CLIP_IN_MSGR_NOTE","MUSIC_CLIP_IN_POLL_OPTION","MUSIC_CLIP_ON_DATING_PROFILE","NEO_ASYNC_GAME_VIDEO","NEW_CONTAINED_POST_BROADCAST","NO_STORY","OCULUS_CREATOR_PORTAL","OCULUS_VENUES_BROADCAST","ORIGINALITY_SELF_ADVOCACY","PAGES_COVER_VIDEO","PAGE_REVIEW_SCREENCAST","PAGE_SLIDESHOW_VIDEO","PAID_CONTENT_PREVIEW","PAID_CONTENT_VIDEO","PAID_CONTENT_VIDEO__POST","PIXELCLOUD","PODCAST_HIGHLIGHT","PODCAST_ML_PREVIEW","PODCAST_ML_PREVIEW_NO_NEWSFEED_STORY","PODCAST_RSS","PODCAST_RSS_EPHEMERAL","PODCAST_RSS_NO_NEWSFEED_STORY","PODCAST_VOICES","PODCAST_VOICES_NO_NEWSFEED_STORY","PREMIERE_SOURCE","PREMIUM_MUSIC_VIDEO_CLIP","PREMIUM_MUSIC_VIDEO_CROPPED_CLIP","PREMIUM_MUSIC_VIDEO_NO_NEWSFEED_STORY","PREMIUM_MUSIC_VIDEO_WITH_NEWSFEED_STORY","PRIVATE_GALLERY_VIDEO","PRODUCT_VIDEO","PROFILE_COVER_VIDEO","PROFILE_INTRO_CARD","PROFILE_VIDEO","PROTON","QUICK_CLIP_WORKPLACE_POST","QUICK_PROMOTION","REPLACE_VIDEO","SALES_CLIENT_INTERACTION","SHOWREEL_NATIVE_DUMMY_VIDEO","SLIDESHOW_ANIMOTO","SLIDESHOW_SHAKR","SLIDESHOW_VARIATION_VIDEO","SOUND_PLATFORM_STREAM","SRT_ATTACHMENT","STORIES_VIDEO","STORYLINE","STORYLINE_WITH_EXTERNAL_MUSIC","STORY_ARCHIVE_VIDEO","STORY_CARD_TEMPLATE","STREAM_HIGHLIGHTS_VIDEO","TAROT_DIGEST","TEMPORARY_UNLISTED","TEMP_VIDEO_COPYRIGHT_SCAN","UNLISTED","UNLISTED_OCULUS","VIDEO_COMMENT","VIDEO_COMPOSITION_VARIATION","VIDEO_CREATIVE_EDITOR_AUTOGEN_AD_VIDEO","VIDEO_SUPERRES","VOICES_ARTICLE_VIDEO","VU_GENERATED_VIDEO","WOODHENGE","WORK_KNOWLEDGE_VIDEO","YOUR_DAY"],"type":"string"},"content_category":{"description":"Content Category (enum: uservideos_content_category_enum_param)","enum":["BEAUTY_FASHION","BUSINESS","CARS_TRUCKS","COMEDY","CUTE_ANIMALS","ENTERTAINMENT","FAMILY","FOOD_HEALTH","HOME","LIFESTYLE","MUSIC","NEWS","OTHER","POLITICS","SCIENCE","SPORTS","TECHNOLOGY","VIDEO_GAMING"],"type":"string"},"creative_tools":{"description":"Creative Tools","type":"string"},"description":{"description":"Description","type":"string"},"direct_share_status":{"description":"Direct Share Status","type":"integer"},"embeddable":{"description":"Embeddable","type":"boolean"},"end_offset":{"description":"End Offset","type":"integer"},"fbuploader_video_file_chunk":{"description":"Fbuploader Video File Chunk","type":"string"},"file_size":{"description":"File Size","type":"integer"},"file_url":{"description":"File URL","format":"uri","type":"string"},"fisheye_video_cropped":{"description":"Fisheye Video Cropped","type":"boolean"},"formatting":{"description":"Formatting (enum: uservideos_formatting_enum_param)","enum":["MARKDOWN","PLAINTEXT"],"type":"string"},"fov":{"description":"Fov","type":"integer"},"front_z_rotation":{"description":"Front Z Rotation","type":"number"},"fun_fact_prompt_id":{"description":"ID of the Fun Fact Prompt","pattern":"^[0-9]+$","type":"string"},"fun_fact_toastee_id":{"description":"ID of the Fun Fact Toastee","pattern":"^[0-9]+$","type":"integer"},"guide":{"description":"Guide","items":{"type":"string"},"type":"array"},"guide_enabled":{"description":"Guide Enabled","type":"boolean"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"initial_heading":{"description":"Initial Heading","type":"integer"},"initial_pitch":{"description":"Initial Pitch","type":"integer"},"instant_game_entry_point_data":{"description":"Instant Game Entry Point Data","type":"string"},"is_boost_intended":{"description":"Is Boost Intended","type":"boolean"},"is_explicit_share":{"description":"Is Explicit Share","type":"boolean"},"is_group_linking_post":{"description":"Is Group Linking Post","type":"boolean"},"is_partnership_ad":{"description":"Is Partnership Ad","type":"boolean"},"is_voice_clip":{"description":"Is Voice Clip","type":"boolean"},"location_source_id":{"description":"ID of the Location Source","pattern":"^[0-9]+$","type":"string"},"manual_privacy":{"description":"Manual Privacy","type":"boolean"},"no_story":{"description":"No Story","type":"boolean"},"og_action_type_id":{"description":"ID of the Og Action Type","pattern":"^[0-9]+$","type":"string"},"og_icon_id":{"description":"ID of the Og Icon","pattern":"^[0-9]+$","type":"string"},"og_object_id":{"description":"ID of the Og Object","pattern":"^[0-9]+$","type":"string"},"og_phrase":{"description":"Og Phrase","type":"string"},"og_suggestion_mechanism":{"description":"Og Suggestion Mechanism","type":"string"},"original_fov":{"description":"Original Fov","type":"integer"},"original_projection_type":{"description":"Original Projection Type (enum: uservideos_original_projection_type_enum_param)","enum":["cubemap","equirectangular","half_equirectangular"],"type":"string"},"partnership_ad_ad_code":{"description":"Partnership Ad Ad Code","type":"string"},"privacy":{"description":"Privacy","type":"string"},"publish_event_id":{"description":"ID of the Publish Event","pattern":"^[0-9]+$","type":"integer"},"referenced_sticker_id":{"description":"ID of the Referenced Sticker","pattern":"^[0-9]+$","type":"string"},"replace_video_id":{"description":"ID of the Replace Video","pattern":"^[0-9]+$","type":"string"},"slideshow_spec":{"description":"Slideshow Spec","type":"string"},"source":{"description":"Source","type":"string"},"source_instagram_media_id":{"description":"ID of the Source Instagram Media","pattern":"^[0-9]+$","type":"string"},"spherical":{"description":"Spherical","type":"boolean"},"sponsor_id":{"description":"ID of the Sponsor","pattern":"^[0-9]+$","type":"string"},"start_offset":{"description":"Start Offset","type":"integer"},"swap_mode":{"description":"Swap Mode (enum: uservideos_swap_mode_enum_param)","enum":["replace"],"type":"string"},"text_format_metadata":{"description":"Text Format Metadata","type":"string"},"thumb":{"description":"Thumb","type":"string"},"time_since_original_post":{"description":"Time Since Original Post","type":"integer"},"title":{"description":"Title","type":"string"},"transcode_setting_properties":{"description":"Transcode Setting Properties","type":"string"},"unpublished_content_type":{"description":"Unpublished Content Type (enum: uservideos_unpublished_content_type_enum_param)","enum":["ADS_POST","DRAFT","INLINE_CREATED","PUBLISHED","REVIEWABLE_BRANDED_CONTENT","SCHEDULED","SCHEDULED_RECURRING"],"type":"string"},"upload_phase":{"description":"Upload Phase (enum: uservideos_upload_phase_enum_param)","enum":["cancel","finish","start","transfer"],"type":"string"},"upload_session_id":{"description":"ID of the Upload Session","pattern":"^[0-9]+$","type":"string"},"upload_setting_properties":{"description":"Upload Setting Properties","type":"string"},"video_file_chunk":{"description":"Video File Chunk","type":"string"},"video_id_original":{"description":"Video ID Original","pattern":"^[0-9]+$","type":"string"},"video_start_time_ms":{"description":"Video Start Time Ms","type":"integer"},"waterfall_id":{"description":"ID of the Waterfall","pattern":"^[0-9]+$","type":"string"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_create_videoTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_create_videoArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserCreateVideoHandler(ctx, request, args)
	})

	// Register user_delete using raw JSON schema
	user_deleteTool := mcp.NewToolWithRawSchema(
		"user_delete",
		"Delete a User",
		json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_deleteTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_deleteArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserDeleteHandler(ctx, request, args)
	})

	// Register user_get using raw JSON schema
	user_getTool := mcp.NewToolWithRawSchema(
		"user_get",
		"Get details of a specific User Returns User.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_getTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_getArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserGetHandler(ctx, request, args)
	})

	// Register user_update using raw JSON schema
	user_updateTool := mcp.NewToolWithRawSchema(
		"user_update",
		"Update a User Returns User.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"emoji_color_pref":{"description":"Emoji Color Pref","type":"integer"},"firstname":{"description":"Firstname","type":"string"},"id":{"description":"User ID","pattern":"^[0-9]+$","type":"string"},"lastname":{"description":"Lastname","type":"string"},"local_news_megaphone_dismiss_status":{"description":"Local News Megaphone Dismiss Status (enum: user_local_news_megaphone_dismiss_status)","enum":["NO","YES"],"type":"string"},"local_news_subscription_status":{"description":"Local News Subscription Status (enum: user_local_news_subscription_status)","enum":["STATUS_OFF","STATUS_ON"],"type":"string"},"name":{"description":"Name","type":"string"},"password":{"description":"Password","type":"string"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(user_updateTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args user_updateArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return UserUpdateHandler(ctx, request, args)
	})

	return nil
}

// User tools: 55 endpoints
