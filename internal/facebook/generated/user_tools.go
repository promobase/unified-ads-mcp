// Code generated by codegen. DO NOT EDIT.

package generated

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// Tool schemas for User
var (
	remove_access_tokens_from_userSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`)

	create_user_access_tokenSchema = json.RawMessage(`{"additionalProperties":false,"properties":{"business_app":{"description":"business_app","type":"string"},"id":{"description":"User ID","type":"string"},"page_id":{"description":"page_id","type":"string"},"scope":{"description":"scope","items":{"type":"string"},"type":"array"},"set_token_expires_in_60_days":{"description":"set_token_expires_in_60_days","type":"boolean"}},"required":["id","business_app"],"type":"object"}`)

	list_user_accountsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"ad_id":{"description":"ad_id","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"is_place":{"description":"is_place","type":"boolean"},"is_promotable":{"description":"is_promotable","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`)

	create_user_accountSchema = json.RawMessage(`{"additionalProperties":false,"properties":{"about":{"description":"about","type":"string"},"address":{"description":"address","type":"string"},"category":{"description":"category","type":"integer"},"category_enum":{"description":"category_enum","type":"string"},"category_list":{"description":"category_list","items":{"type":"string"},"type":"array"},"city_id":{"description":"city_id","type":"string"},"coordinates":{"additionalProperties":true,"description":"coordinates","type":"object"},"cover_photo":{"additionalProperties":true,"description":"cover_photo","type":"object"},"description":{"description":"description","type":"string"},"id":{"description":"User ID","type":"string"},"ignore_coordinate_warnings":{"description":"ignore_coordinate_warnings","type":"boolean"},"location":{"additionalProperties":true,"description":"location","type":"object"},"name":{"description":"name","type":"string"},"phone":{"description":"phone","type":"string"},"picture":{"description":"picture","type":"string"},"website":{"description":"website","type":"string"},"zip":{"description":"zip","type":"string"}},"required":["id","name"],"type":"object"}`)

	list_user_ad_studiesSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`)

	create_user_ad_studieSchema = json.RawMessage(`{"additionalProperties":false,"properties":{"cells":{"description":"cells","items":{"additionalProperties":true,"type":"object"},"type":"array"},"client_business":{"description":"client_business","type":"string"},"confidence_level":{"description":"confidence_level","type":"number"},"cooldown_start_time":{"description":"cooldown_start_time","type":"integer"},"description":{"description":"description","type":"string"},"end_time":{"description":"end_time","type":"integer"},"id":{"description":"User ID","type":"string"},"name":{"description":"name","type":"string"},"objectives":{"description":"objectives","items":{"additionalProperties":true,"type":"object"},"type":"array"},"observation_end_time":{"description":"observation_end_time","type":"integer"},"start_time":{"description":"start_time","type":"integer"},"type":{"description":"type (enum: userad_studies_type_enum_param)","type":"string"},"viewers":{"description":"viewers","items":{"type":"integer"},"type":"array"}},"required":["id"],"type":"object"}`)

	list_user_adaccountsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`)

	list_user_albumsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`)

	create_user_applicationSchema = json.RawMessage(`{"additionalProperties":false,"properties":{"business_app":{"description":"business_app","type":"integer"},"id":{"description":"User ID","type":"string"}},"required":["id","business_app"],"type":"object"}`)

	list_user_apprequestformerrecipientsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`)

	list_user_apprequestsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`)

	list_user_assigned_ad_accountsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`)

	list_user_assigned_applicationsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`)

	list_user_assigned_business_asset_groupsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"contained_asset_id":{"description":"contained_asset_id","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`)

	list_user_assigned_pagesSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"pages":{"description":"pages","items":{"type":"integer"},"type":"array"}},"required":["id"],"type":"object"}`)

	list_user_assigned_product_catalogsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`)

	list_user_avatarsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`)

	list_user_business_usersSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`)

	remove_businesses_from_userSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"business":{"description":"business","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`)

	list_user_businessesSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`)

	create_user_businesseSchema = json.RawMessage(`{"additionalProperties":false,"properties":{"child_business_external_id":{"description":"child_business_external_id","type":"string"},"email":{"description":"email","type":"string"},"id":{"description":"User ID","type":"string"},"name":{"description":"name","type":"string"},"primary_page":{"description":"primary_page","type":"string"},"sales_rep_email":{"description":"sales_rep_email","type":"string"},"survey_business_type":{"description":"survey_business_type (enum: userbusinesses_survey_business_type_enum_param)","type":"string"},"survey_num_assets":{"description":"survey_num_assets","type":"integer"},"survey_num_people":{"description":"survey_num_people","type":"integer"},"timezone_id":{"description":"timezone_id (enum: userbusinesses_timezone_id_enum_param)","type":"string"},"vertical":{"description":"vertical (enum: userbusinesses_vertical_enum_param)","type":"string"}},"required":["id","name","vertical"],"type":"object"}`)

	list_user_conversationsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"folder":{"description":"folder","type":"string"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"platform":{"description":"platform (enum: userconversations_platform_enum_param)","type":"string"},"tags":{"description":"tags","items":{"type":"string"},"type":"array"},"user_id":{"description":"user_id","type":"string"}},"required":["id"],"type":"object"}`)

	list_user_custom_labelsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`)

	list_user_eventsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"include_canceled":{"description":"include_canceled","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: userevents_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`)

	get_user_feedSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"include_hidden":{"description":"include_hidden","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"q":{"description":"q","type":"string"},"show_expired":{"description":"show_expired","type":"boolean"},"since":{"description":"since","type":"string"},"until":{"description":"until","type":"string"},"with":{"description":"with","type":"string"}},"required":["id"],"type":"object"}`)

	update_user_feedSchema = json.RawMessage(`{"additionalProperties":false,"properties":{"actions":{"additionalProperties":true,"description":"actions","type":"object"},"album_id":{"description":"album_id","type":"string"},"android_key_hash":{"description":"android_key_hash","type":"string"},"application_id":{"description":"application_id","type":"string"},"asked_fun_fact_prompt_id":{"description":"asked_fun_fact_prompt_id","type":"integer"},"asset3d_id":{"description":"asset3d_id","type":"string"},"associated_id":{"description":"associated_id","type":"string"},"attach_place_suggestion":{"description":"attach_place_suggestion","type":"boolean"},"attached_media":{"description":"attached_media","items":{"additionalProperties":true,"type":"object"},"type":"array"},"audience_exp":{"description":"audience_exp","type":"boolean"},"backdated_time":{"description":"backdated_time","type":"string"},"backdated_time_granularity":{"description":"backdated_time_granularity (enum: userfeed_backdated_time_granularity_enum_param)","type":"string"},"breaking_news":{"description":"breaking_news","type":"boolean"},"breaking_news_expiration":{"description":"breaking_news_expiration","type":"integer"},"call_to_action":{"additionalProperties":true,"description":"call_to_action","type":"object"},"caption":{"description":"caption","type":"string"},"child_attachments":{"description":"child_attachments","items":{"additionalProperties":true,"type":"object"},"type":"array"},"client_mutation_id":{"description":"client_mutation_id","type":"string"},"composer_entry_picker":{"description":"composer_entry_picker","type":"string"},"composer_entry_point":{"description":"composer_entry_point","type":"string"},"composer_entry_time":{"description":"composer_entry_time","type":"integer"},"composer_session_events_log":{"description":"composer_session_events_log","type":"string"},"composer_session_id":{"description":"composer_session_id","type":"string"},"composer_source_surface":{"description":"composer_source_surface","type":"string"},"composer_type":{"description":"composer_type","type":"string"},"connection_class":{"description":"connection_class","type":"string"},"content_attachment":{"description":"content_attachment","type":"string"},"coordinates":{"additionalProperties":true,"description":"coordinates","type":"object"},"cta_link":{"description":"cta_link","type":"string"},"cta_type":{"description":"cta_type","type":"string"},"description":{"description":"description","type":"string"},"direct_share_status":{"description":"direct_share_status","type":"integer"},"expanded_height":{"description":"expanded_height","type":"integer"},"expanded_width":{"description":"expanded_width","type":"integer"},"feed_targeting":{"additionalProperties":true,"description":"feed_targeting","type":"object"},"formatting":{"description":"formatting (enum: userfeed_formatting_enum_param)","type":"string"},"fun_fact_prompt_id":{"description":"fun_fact_prompt_id","type":"string"},"fun_fact_toastee_id":{"description":"fun_fact_toastee_id","type":"integer"},"height":{"description":"height","type":"integer"},"home_checkin_city_id":{"additionalProperties":true,"description":"home_checkin_city_id","type":"object"},"id":{"description":"User ID","type":"string"},"image_crops":{"description":"image_crops","type":"string"},"implicit_with_tags":{"description":"implicit_with_tags","items":{"type":"integer"},"type":"array"},"instant_game_entry_point_data":{"description":"instant_game_entry_point_data","type":"string"},"ios_bundle_id":{"description":"ios_bundle_id","type":"string"},"is_backout_draft":{"description":"is_backout_draft","type":"boolean"},"is_boost_intended":{"description":"is_boost_intended","type":"boolean"},"is_explicit_location":{"description":"is_explicit_location","type":"boolean"},"is_explicit_share":{"description":"is_explicit_share","type":"boolean"},"is_group_linking_post":{"description":"is_group_linking_post","type":"boolean"},"is_photo_container":{"description":"is_photo_container","type":"boolean"},"link":{"description":"link","type":"string"},"location_source_id":{"description":"location_source_id","type":"string"},"manual_privacy":{"description":"manual_privacy","type":"boolean"},"message":{"description":"message","type":"string"},"multi_share_end_card":{"description":"multi_share_end_card","type":"boolean"},"multi_share_optimized":{"description":"multi_share_optimized","type":"boolean"},"name":{"description":"name","type":"string"},"nectar_module":{"description":"nectar_module","type":"string"},"object_attachment":{"description":"object_attachment","type":"string"},"og_action_type_id":{"description":"og_action_type_id","type":"string"},"og_hide_object_attachment":{"description":"og_hide_object_attachment","type":"boolean"},"og_icon_id":{"description":"og_icon_id","type":"string"},"og_object_id":{"description":"og_object_id","type":"string"},"og_phrase":{"description":"og_phrase","type":"string"},"og_set_profile_badge":{"description":"og_set_profile_badge","type":"boolean"},"og_suggestion_mechanism":{"description":"og_suggestion_mechanism","type":"string"},"page_recommendation":{"description":"page_recommendation","type":"string"},"picture":{"description":"picture","type":"string"},"place":{"additionalProperties":true,"description":"place","type":"object"},"place_attachment_setting":{"description":"place_attachment_setting (enum: userfeed_place_attachment_setting_enum_param)","type":"string"},"place_list":{"description":"place_list","type":"string"},"place_list_data":{"description":"place_list_data","type":"string"},"post_surfaces_blacklist":{"description":"post_surfaces_blacklist","items":{"type":"string"},"type":"array"},"posting_to_redspace":{"description":"posting_to_redspace (enum: userfeed_posting_to_redspace_enum_param)","type":"string"},"privacy":{"description":"privacy","type":"string"},"prompt_id":{"description":"prompt_id","type":"string"},"prompt_tracking_string":{"description":"prompt_tracking_string","type":"string"},"properties":{"additionalProperties":true,"description":"properties","type":"object"},"proxied_app_id":{"description":"proxied_app_id","type":"string"},"publish_event_id":{"description":"publish_event_id","type":"integer"},"published":{"description":"published","type":"boolean"},"quote":{"description":"quote","type":"string"},"ref":{"description":"ref","items":{"type":"string"},"type":"array"},"referenceable_image_ids":{"description":"referenceable_image_ids","items":{"type":"string"},"type":"array"},"referral_id":{"description":"referral_id","type":"string"},"scheduled_publish_time":{"description":"scheduled_publish_time","type":"string"},"source":{"description":"source","type":"string"},"sponsor_id":{"description":"sponsor_id","type":"string"},"sponsor_relationship":{"description":"sponsor_relationship","type":"integer"},"suggested_place_id":{"additionalProperties":true,"description":"suggested_place_id","type":"object"},"tags":{"description":"tags","items":{"type":"integer"},"type":"array"},"target_surface":{"description":"target_surface (enum: userfeed_target_surface_enum_param)","type":"string"},"targeting":{"additionalProperties":true,"description":"targeting","type":"object"},"text_format_metadata":{"description":"text_format_metadata","type":"string"},"text_format_preset_id":{"description":"text_format_preset_id","type":"string"},"text_only_place":{"description":"text_only_place","type":"string"},"thumbnail":{"description":"thumbnail","type":"string"},"time_since_original_post":{"description":"time_since_original_post","type":"integer"},"title":{"description":"title","type":"string"},"tracking_info":{"description":"tracking_info","type":"string"},"unpublished_content_type":{"description":"unpublished_content_type (enum: userfeed_unpublished_content_type_enum_param)","type":"string"},"user_selected_tags":{"description":"user_selected_tags","type":"boolean"},"video_start_time_ms":{"description":"video_start_time_ms","type":"integer"},"viewer_coordinates":{"additionalProperties":true,"description":"viewer_coordinates","type":"object"},"width":{"description":"width","type":"integer"}},"required":["id"],"type":"object"}`)

	list_user_friendsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"uid":{"description":"uid","type":"integer"}},"required":["id"],"type":"object"}`)

	list_user_fundraisersSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`)

	create_user_fundraiserSchema = json.RawMessage(`{"additionalProperties":false,"properties":{"charity_id":{"description":"charity_id","type":"string"},"cover_photo":{"description":"cover_photo","type":"string"},"currency":{"description":"currency","type":"string"},"description":{"description":"description","type":"string"},"end_time":{"description":"end_time","type":"string"},"external_event_name":{"description":"external_event_name","type":"string"},"external_event_start_time":{"description":"external_event_start_time","type":"string"},"external_event_uri":{"description":"external_event_uri","type":"string"},"external_fundraiser_uri":{"description":"external_fundraiser_uri","type":"string"},"external_id":{"description":"external_id","type":"string"},"fundraiser_type":{"description":"fundraiser_type (enum: userfundraisers_fundraiser_type_enum_param)","type":"string"},"goal_amount":{"description":"goal_amount","type":"integer"},"id":{"description":"User ID","type":"string"},"name":{"description":"name","type":"string"},"page_id":{"description":"page_id","type":"string"}},"required":["id","currency","description","end_time","external_id","fundraiser_type","goal_amount","name"],"type":"object"}`)

	list_user_groupsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"admin_only":{"description":"admin_only","type":"boolean"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"parent":{"description":"parent","type":"string"}},"required":["id"],"type":"object"}`)

	list_user_ids_for_appsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"app":{"description":"app","type":"integer"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`)

	list_user_ids_for_businessSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"app":{"description":"app","type":"integer"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`)

	list_user_ids_for_pagesSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"page":{"description":"page","type":"integer"}},"required":["id"],"type":"object"}`)

	list_user_likesSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"target_id":{"description":"target_id","type":"string"}},"required":["id"],"type":"object"}`)

	list_user_live_videosSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"broadcast_status":{"description":"broadcast_status","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"source":{"description":"source (enum: userlive_videos_source_enum_param)","type":"string"}},"required":["id"],"type":"object"}`)

	create_user_live_videoSchema = json.RawMessage(`{"additionalProperties":false,"properties":{"content_tags":{"description":"content_tags","items":{"type":"string"},"type":"array"},"description":{"description":"description","type":"string"},"enable_backup_ingest":{"description":"enable_backup_ingest","type":"boolean"},"encoding_settings":{"description":"encoding_settings","type":"string"},"event_params":{"additionalProperties":true,"description":"event_params","type":"object"},"fisheye_video_cropped":{"description":"fisheye_video_cropped","type":"boolean"},"front_z_rotation":{"description":"front_z_rotation","type":"number"},"id":{"description":"User ID","type":"string"},"is_audio_only":{"description":"is_audio_only","type":"boolean"},"is_spherical":{"description":"is_spherical","type":"boolean"},"original_fov":{"description":"original_fov","type":"integer"},"privacy":{"description":"privacy","type":"string"},"projection":{"description":"projection (enum: userlive_videos_projection_enum_param)","type":"string"},"published":{"description":"published","type":"boolean"},"schedule_custom_profile_image":{"description":"schedule_custom_profile_image","type":"string"},"spatial_audio_format":{"description":"spatial_audio_format (enum: userlive_videos_spatial_audio_format_enum_param)","type":"string"},"status":{"description":"status (enum: userlive_videos_status_enum_param)","type":"string"},"stereoscopic_mode":{"description":"stereoscopic_mode (enum: userlive_videos_stereoscopic_mode_enum_param)","type":"string"},"stop_on_delete_stream":{"description":"stop_on_delete_stream","type":"boolean"},"stream_type":{"description":"stream_type (enum: userlive_videos_stream_type_enum_param)","type":"string"},"title":{"description":"title","type":"string"}},"required":["id"],"type":"object"}`)

	create_user_messenger_desktop_performance_traceSchema = json.RawMessage(`{"additionalProperties":false,"properties":{},"type":"object"}`)

	update_user_messenger_kids_accounts_unread_badgeSchema = json.RawMessage(`{"additionalProperties":false,"properties":{"proxied_app_id":{"description":"proxied_app_id","type":"integer"}},"required":["proxied_app_id"],"type":"object"}`)

	get_user_musicSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"target_id":{"description":"target_id","type":"string"}},"required":["id"],"type":"object"}`)

	create_user_notificationSchema = json.RawMessage(`{"additionalProperties":false,"properties":{"bot_message_payload_elements":{"description":"bot_message_payload_elements","type":"string"},"filtering":{"description":"filtering","items":{"type":"string"},"type":"array"},"href":{"additionalProperties":true,"description":"href","type":"object"},"id":{"description":"User ID","type":"string"},"label":{"description":"label","type":"string"},"message":{"description":"message","type":"string"},"notif_ids":{"description":"notif_ids","items":{"type":"string"},"type":"array"},"payload":{"description":"payload","type":"string"},"read":{"description":"read","type":"boolean"},"ref":{"description":"ref","type":"string"},"schedule_interval":{"description":"schedule_interval","type":"integer"},"seen":{"description":"seen","type":"boolean"},"template":{"additionalProperties":true,"description":"template","type":"object"},"type":{"description":"type (enum: usernotifications_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`)

	list_user_payment_transactionsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"}},"type":"object"}`)

	remove_permissions_from_userSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"permission":{"description":"permission","type":"string"}},"required":["id"],"type":"object"}`)

	list_user_permissionsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"permission":{"description":"permission","type":"string"},"status":{"description":"status (enum: userpermissions_status_enum_param)","type":"string"}},"required":["id"],"type":"object"}`)

	list_user_personal_ad_accountsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`)

	list_user_photosSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: userphotos_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`)

	create_user_photoSchema = json.RawMessage(`{"additionalProperties":false,"properties":{"aid":{"description":"aid","type":"string"},"allow_spherical_photo":{"description":"allow_spherical_photo","type":"boolean"},"alt_text_custom":{"description":"alt_text_custom","type":"string"},"android_key_hash":{"description":"android_key_hash","type":"string"},"application_id":{"description":"application_id","type":"string"},"attempt":{"description":"attempt","type":"integer"},"audience_exp":{"description":"audience_exp","type":"boolean"},"backdated_time":{"description":"backdated_time","type":"string"},"backdated_time_granularity":{"description":"backdated_time_granularity (enum: userphotos_backdated_time_granularity_enum_param)","type":"string"},"caption":{"description":"caption","type":"string"},"composer_session_id":{"description":"composer_session_id","type":"string"},"direct_share_status":{"description":"direct_share_status","type":"integer"},"feed_targeting":{"additionalProperties":true,"description":"feed_targeting","type":"object"},"filter_type":{"description":"filter_type","type":"integer"},"full_res_is_coming_later":{"description":"full_res_is_coming_later","type":"boolean"},"id":{"description":"User ID","type":"string"},"initial_view_heading_override_degrees":{"description":"initial_view_heading_override_degrees","type":"integer"},"initial_view_pitch_override_degrees":{"description":"initial_view_pitch_override_degrees","type":"integer"},"initial_view_vertical_fov_override_degrees":{"description":"initial_view_vertical_fov_override_degrees","type":"integer"},"ios_bundle_id":{"description":"ios_bundle_id","type":"string"},"is_explicit_location":{"description":"is_explicit_location","type":"boolean"},"is_explicit_place":{"description":"is_explicit_place","type":"boolean"},"manual_privacy":{"description":"manual_privacy","type":"boolean"},"message":{"description":"message","type":"string"},"name":{"description":"name","type":"string"},"no_story":{"description":"no_story","type":"boolean"},"offline_id":{"description":"offline_id","type":"integer"},"og_action_type_id":{"description":"og_action_type_id","type":"string"},"og_icon_id":{"description":"og_icon_id","type":"string"},"og_object_id":{"description":"og_object_id","type":"string"},"og_phrase":{"description":"og_phrase","type":"string"},"og_set_profile_badge":{"description":"og_set_profile_badge","type":"boolean"},"og_suggestion_mechanism":{"description":"og_suggestion_mechanism","type":"string"},"place":{"additionalProperties":true,"description":"place","type":"object"},"privacy":{"description":"privacy","type":"string"},"profile_id":{"description":"profile_id","type":"integer"},"provenance_info":{"description":"provenance_info","type":"string"},"proxied_app_id":{"description":"proxied_app_id","type":"string"},"published":{"description":"published","type":"boolean"},"qn":{"description":"qn","type":"string"},"scheduled_publish_time":{"description":"scheduled_publish_time","type":"integer"},"spherical_metadata":{"description":"spherical_metadata","type":"string"},"sponsor_id":{"description":"sponsor_id","type":"string"},"sponsor_relationship":{"description":"sponsor_relationship","type":"integer"},"tags":{"description":"tags","items":{"additionalProperties":true,"type":"object"},"type":"array"},"target_id":{"description":"target_id","type":"integer"},"targeting":{"additionalProperties":true,"description":"targeting","type":"object"},"time_since_original_post":{"description":"time_since_original_post","type":"integer"},"uid":{"description":"uid","type":"integer"},"unpublished_content_type":{"description":"unpublished_content_type (enum: userphotos_unpublished_content_type_enum_param)","type":"string"},"url":{"description":"url","type":"string"},"user_selected_tags":{"description":"user_selected_tags","type":"boolean"},"vault_image_id":{"description":"vault_image_id","type":"string"}},"required":["id"],"type":"object"}`)

	get_user_pictureSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"height":{"description":"height","type":"integer"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"redirect":{"description":"redirect","type":"boolean"},"type":{"description":"type (enum: userpicture_type_enum_param)","type":"string"},"width":{"description":"width","type":"integer"}},"required":["id"],"type":"object"}`)

	list_user_postsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"include_hidden":{"description":"include_hidden","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"q":{"description":"q","type":"string"},"show_expired":{"description":"show_expired","type":"boolean"},"since":{"description":"since","type":"string"},"until":{"description":"until","type":"string"},"with":{"description":"with","type":"string"}},"required":["id"],"type":"object"}`)

	list_user_rich_media_documentsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"limit":{"description":"Maximum number of results","type":"integer"},"query":{"description":"query","type":"string"}},"type":"object"}`)

	create_user_staging_resourceSchema = json.RawMessage(`{"additionalProperties":false,"properties":{"file":{"description":"file","type":"string"},"id":{"description":"User ID","type":"string"}},"required":["id"],"type":"object"}`)

	list_user_videosSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"type":{"description":"type (enum: uservideos_type_enum_param)","type":"string"}},"required":["id"],"type":"object"}`)

	create_user_videoSchema = json.RawMessage(`{"additionalProperties":false,"properties":{"application_id":{"description":"application_id","type":"string"},"asked_fun_fact_prompt_id":{"description":"asked_fun_fact_prompt_id","type":"integer"},"audio_story_wave_animation_handle":{"description":"audio_story_wave_animation_handle","type":"string"},"composer_entry_picker":{"description":"composer_entry_picker","type":"string"},"composer_entry_point":{"description":"composer_entry_point","type":"string"},"composer_entry_time":{"description":"composer_entry_time","type":"integer"},"composer_session_events_log":{"description":"composer_session_events_log","type":"string"},"composer_session_id":{"description":"composer_session_id","type":"string"},"composer_source_surface":{"description":"composer_source_surface","type":"string"},"composer_type":{"description":"composer_type","type":"string"},"container_type":{"description":"container_type (enum: uservideos_container_type_enum_param)","type":"string"},"content_category":{"description":"content_category (enum: uservideos_content_category_enum_param)","type":"string"},"creative_tools":{"description":"creative_tools","type":"string"},"description":{"description":"description","type":"string"},"direct_share_status":{"description":"direct_share_status","type":"integer"},"embeddable":{"description":"embeddable","type":"boolean"},"end_offset":{"description":"end_offset","type":"integer"},"fbuploader_video_file_chunk":{"description":"fbuploader_video_file_chunk","type":"string"},"file_size":{"description":"file_size","type":"integer"},"file_url":{"description":"file_url","type":"string"},"fisheye_video_cropped":{"description":"fisheye_video_cropped","type":"boolean"},"formatting":{"description":"formatting (enum: uservideos_formatting_enum_param)","type":"string"},"fov":{"description":"fov","type":"integer"},"front_z_rotation":{"description":"front_z_rotation","type":"number"},"fun_fact_prompt_id":{"description":"fun_fact_prompt_id","type":"string"},"fun_fact_toastee_id":{"description":"fun_fact_toastee_id","type":"integer"},"guide":{"description":"guide","items":{"type":"string"},"type":"array"},"guide_enabled":{"description":"guide_enabled","type":"boolean"},"id":{"description":"User ID","type":"string"},"initial_heading":{"description":"initial_heading","type":"integer"},"initial_pitch":{"description":"initial_pitch","type":"integer"},"instant_game_entry_point_data":{"description":"instant_game_entry_point_data","type":"string"},"is_boost_intended":{"description":"is_boost_intended","type":"boolean"},"is_explicit_share":{"description":"is_explicit_share","type":"boolean"},"is_group_linking_post":{"description":"is_group_linking_post","type":"boolean"},"is_partnership_ad":{"description":"is_partnership_ad","type":"boolean"},"is_voice_clip":{"description":"is_voice_clip","type":"boolean"},"location_source_id":{"description":"location_source_id","type":"string"},"manual_privacy":{"description":"manual_privacy","type":"boolean"},"no_story":{"description":"no_story","type":"boolean"},"og_action_type_id":{"description":"og_action_type_id","type":"string"},"og_icon_id":{"description":"og_icon_id","type":"string"},"og_object_id":{"description":"og_object_id","type":"string"},"og_phrase":{"description":"og_phrase","type":"string"},"og_suggestion_mechanism":{"description":"og_suggestion_mechanism","type":"string"},"original_fov":{"description":"original_fov","type":"integer"},"original_projection_type":{"description":"original_projection_type (enum: uservideos_original_projection_type_enum_param)","type":"string"},"partnership_ad_ad_code":{"description":"partnership_ad_ad_code","type":"string"},"privacy":{"description":"privacy","type":"string"},"publish_event_id":{"description":"publish_event_id","type":"integer"},"referenced_sticker_id":{"description":"referenced_sticker_id","type":"string"},"replace_video_id":{"description":"replace_video_id","type":"string"},"slideshow_spec":{"description":"slideshow_spec","type":"string"},"source":{"description":"source","type":"string"},"source_instagram_media_id":{"description":"source_instagram_media_id","type":"string"},"spherical":{"description":"spherical","type":"boolean"},"sponsor_id":{"description":"sponsor_id","type":"string"},"start_offset":{"description":"start_offset","type":"integer"},"swap_mode":{"description":"swap_mode (enum: uservideos_swap_mode_enum_param)","type":"string"},"text_format_metadata":{"description":"text_format_metadata","type":"string"},"thumb":{"description":"thumb","type":"string"},"time_since_original_post":{"description":"time_since_original_post","type":"integer"},"title":{"description":"title","type":"string"},"transcode_setting_properties":{"description":"transcode_setting_properties","type":"string"},"unpublished_content_type":{"description":"unpublished_content_type (enum: uservideos_unpublished_content_type_enum_param)","type":"string"},"upload_phase":{"description":"upload_phase (enum: uservideos_upload_phase_enum_param)","type":"string"},"upload_session_id":{"description":"upload_session_id","type":"string"},"upload_setting_properties":{"description":"upload_setting_properties","type":"string"},"video_file_chunk":{"description":"video_file_chunk","type":"string"},"video_id_original":{"description":"video_id_original","type":"string"},"video_start_time_ms":{"description":"video_start_time_ms","type":"integer"},"waterfall_id":{"description":"waterfall_id","type":"string"}},"required":["id"],"type":"object"}`)

	delete_userSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`)

	get_userSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"User ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`)

	update_userSchema = json.RawMessage(`{"additionalProperties":false,"properties":{"emoji_color_pref":{"description":"emoji_color_pref","type":"integer"},"firstname":{"description":"firstname","type":"string"},"id":{"description":"User ID","type":"string"},"lastname":{"description":"lastname","type":"string"},"local_news_megaphone_dismiss_status":{"description":"local_news_megaphone_dismiss_status (enum: user_local_news_megaphone_dismiss_status)","type":"string"},"local_news_subscription_status":{"description":"local_news_subscription_status (enum: user_local_news_subscription_status)","type":"string"},"name":{"description":"name","type":"string"},"password":{"description":"password","type":"string"}},"required":["id"],"type":"object"}`)
)

// RemoveAccessTokensFromUserHandler handles remove_access_tokens_from_user
func RemoveAccessTokensFromUserHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "access_tokens")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CreateUserAccessTokenHandler handles create_user_access_token
func CreateUserAccessTokenHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "access_tokens")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserAccountsHandler handles list_user_accounts
func ListUserAccountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CreateUserAccountHandler handles create_user_account
func CreateUserAccountHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "accounts")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserAdStudiesHandler handles list_user_ad_studies
func ListUserAdStudiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ad_studies")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CreateUserAdStudieHandler handles create_user_ad_studie
func CreateUserAdStudieHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "ad_studies")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserAdaccountsHandler handles list_user_adaccounts
func ListUserAdaccountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "adaccounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserAlbumsHandler handles list_user_albums
func ListUserAlbumsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "albums")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CreateUserApplicationHandler handles create_user_application
func CreateUserApplicationHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "applications")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserApprequestformerrecipientsHandler handles list_user_apprequestformerrecipients
func ListUserApprequestformerrecipientsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "apprequestformerrecipients")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserApprequestsHandler handles list_user_apprequests
func ListUserApprequestsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "apprequests")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserAssignedAdAccountsHandler handles list_user_assigned_ad_accounts
func ListUserAssignedAdAccountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_ad_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserAssignedApplicationsHandler handles list_user_assigned_applications
func ListUserAssignedApplicationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_applications")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserAssignedBusinessAssetGroupsHandler handles list_user_assigned_business_asset_groups
func ListUserAssignedBusinessAssetGroupsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_business_asset_groups")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserAssignedPagesHandler handles list_user_assigned_pages
func ListUserAssignedPagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_pages")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserAssignedProductCatalogsHandler handles list_user_assigned_product_catalogs
func ListUserAssignedProductCatalogsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "assigned_product_catalogs")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserAvatarsHandler handles list_user_avatars
func ListUserAvatarsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "avatars")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserBusinessUsersHandler handles list_user_business_users
func ListUserBusinessUsersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "business_users")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// RemoveBusinessesFromUserHandler handles remove_businesses_from_user
func RemoveBusinessesFromUserHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "businesses")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserBusinessesHandler handles list_user_businesses
func ListUserBusinessesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "businesses")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CreateUserBusinesseHandler handles create_user_businesse
func CreateUserBusinesseHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "businesses")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserConversationsHandler handles list_user_conversations
func ListUserConversationsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "conversations")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserCustomLabelsHandler handles list_user_custom_labels
func ListUserCustomLabelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "custom_labels")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserEventsHandler handles list_user_events
func ListUserEventsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "events")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// GetUserFeedHandler handles get_user_feed
func GetUserFeedHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "feed")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// UpdateUserFeedHandler handles update_user_feed
func UpdateUserFeedHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "feed")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserFriendsHandler handles list_user_friends
func ListUserFriendsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "friends")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserFundraisersHandler handles list_user_fundraisers
func ListUserFundraisersHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "fundraisers")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CreateUserFundraiserHandler handles create_user_fundraiser
func CreateUserFundraiserHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "fundraisers")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserGroupsHandler handles list_user_groups
func ListUserGroupsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "groups")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserIdsForAppsHandler handles list_user_ids_for_apps
func ListUserIdsForAppsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ids_for_apps")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserIdsForBusinessHandler handles list_user_ids_for_business
func ListUserIdsForBusinessHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ids_for_business")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserIdsForPagesHandler handles list_user_ids_for_pages
func ListUserIdsForPagesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "ids_for_pages")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserLikesHandler handles list_user_likes
func ListUserLikesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "likes")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserLiveVideosHandler handles list_user_live_videos
func ListUserLiveVideosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "live_videos")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CreateUserLiveVideoHandler handles create_user_live_video
func CreateUserLiveVideoHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "live_videos")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CreateUserMessengerDesktopPerformanceTraceHandler handles create_user_messenger_desktop_performance_trace
func CreateUserMessengerDesktopPerformanceTraceHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "messenger_desktop_performance_traces")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// UpdateUserMessengerKidsAccountsUnreadBadgeHandler handles update_user_messenger_kids_accounts_unread_badge
func UpdateUserMessengerKidsAccountsUnreadBadgeHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	id := ""

	// Build URL
	url := buildGraphURL(id, "messenger_kids_accounts_unread_badge")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// GetUserMusicHandler handles get_user_music
func GetUserMusicHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "music")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CreateUserNotificationHandler handles create_user_notification
func CreateUserNotificationHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "notifications")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserPaymentTransactionsHandler handles list_user_payment_transactions
func ListUserPaymentTransactionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "payment_transactions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// RemovePermissionsFromUserHandler handles remove_permissions_from_user
func RemovePermissionsFromUserHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "permissions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserPermissionsHandler handles list_user_permissions
func ListUserPermissionsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "permissions")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserPersonalAdAccountsHandler handles list_user_personal_ad_accounts
func ListUserPersonalAdAccountsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "personal_ad_accounts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserPhotosHandler handles list_user_photos
func ListUserPhotosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "photos")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CreateUserPhotoHandler handles create_user_photo
func CreateUserPhotoHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "photos")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// GetUserPictureHandler handles get_user_picture
func GetUserPictureHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "picture")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserPostsHandler handles list_user_posts
func ListUserPostsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "posts")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserRichMediaDocumentsHandler handles list_user_rich_media_documents
func ListUserRichMediaDocumentsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	id := ""

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "rich_media_documents")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CreateUserStagingResourceHandler handles create_user_staging_resource
func CreateUserStagingResourceHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "staging_resources")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// ListUserVideosHandler handles list_user_videos
func ListUserVideosHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "videos")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// CreateUserVideoHandler handles create_user_video
func CreateUserVideoHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "videos")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// DeleteUserHandler handles delete_user
func DeleteUserHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// GetUserHandler handles get_user
func GetUserHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("User")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// UpdateUserHandler handles update_user
func UpdateUserHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// RegisterUserTools registers all User tools with the MCP server
func RegisterUserTools(s *server.MCPServer) error {

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"remove_access_tokens_from_user",
			"Remove access_tokens from this User",
			remove_access_tokens_from_userSchema,
		),
		RemoveAccessTokensFromUserHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"create_user_access_token",
			"Create or update access_tokens for this User Returns User. Required: business_app",
			create_user_access_tokenSchema,
		),
		CreateUserAccessTokenHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_accounts",
			"List accounts for this User Returns Page.",
			list_user_accountsSchema,
		),
		ListUserAccountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"create_user_account",
			"Create or update accounts for this User Required: name",
			create_user_accountSchema,
		),
		CreateUserAccountHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_ad_studies",
			"List ad_studies for this User Returns AdStudy.",
			list_user_ad_studiesSchema,
		),
		ListUserAdStudiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"create_user_ad_studie",
			"Associate ad_studies with this User Returns AdStudy.",
			create_user_ad_studieSchema,
		),
		CreateUserAdStudieHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_adaccounts",
			"List adaccounts for this User Returns AdAccount.",
			list_user_adaccountsSchema,
		),
		ListUserAdaccountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_albums",
			"List albums for this User Returns Album.",
			list_user_albumsSchema,
		),
		ListUserAlbumsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"create_user_application",
			"Create or update applications for this User Returns User. Required: business_app",
			create_user_applicationSchema,
		),
		CreateUserApplicationHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_apprequestformerrecipients",
			"List apprequestformerrecipients for this User Returns AppRequestFormerRecipient.",
			list_user_apprequestformerrecipientsSchema,
		),
		ListUserApprequestformerrecipientsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_apprequests",
			"List apprequests for this User Returns AppRequest.",
			list_user_apprequestsSchema,
		),
		ListUserApprequestsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_assigned_ad_accounts",
			"List assigned_ad_accounts for this User Returns AdAccount.",
			list_user_assigned_ad_accountsSchema,
		),
		ListUserAssignedAdAccountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_assigned_applications",
			"List assigned_applications for this User Returns Application.",
			list_user_assigned_applicationsSchema,
		),
		ListUserAssignedApplicationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_assigned_business_asset_groups",
			"List assigned_business_asset_groups for this User Returns BusinessAssetGroup.",
			list_user_assigned_business_asset_groupsSchema,
		),
		ListUserAssignedBusinessAssetGroupsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_assigned_pages",
			"List assigned_pages for this User Returns Page.",
			list_user_assigned_pagesSchema,
		),
		ListUserAssignedPagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_assigned_product_catalogs",
			"List assigned_product_catalogs for this User Returns ProductCatalog.",
			list_user_assigned_product_catalogsSchema,
		),
		ListUserAssignedProductCatalogsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_avatars",
			"List avatars for this User Returns Avatar.",
			list_user_avatarsSchema,
		),
		ListUserAvatarsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_business_users",
			"List business_users for this User Returns BusinessUser.",
			list_user_business_usersSchema,
		),
		ListUserBusinessUsersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"remove_businesses_from_user",
			"Remove businesses from this User",
			remove_businesses_from_userSchema,
		),
		RemoveBusinessesFromUserHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_businesses",
			"List businesses for this User Returns Business.",
			list_user_businessesSchema,
		),
		ListUserBusinessesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"create_user_businesse",
			"Create or update businesses for this User Returns Business. Required: name, vertical (enum)",
			create_user_businesseSchema,
		),
		CreateUserBusinesseHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_conversations",
			"List conversations for this User Returns UnifiedThread.",
			list_user_conversationsSchema,
		),
		ListUserConversationsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_custom_labels",
			"List custom_labels for this User Returns PageUserMessageThreadLabel.",
			list_user_custom_labelsSchema,
		),
		ListUserCustomLabelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_events",
			"List events for this User Returns Event.",
			list_user_eventsSchema,
		),
		ListUserEventsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"get_user_feed",
			"Get feed data for this User Returns Post.",
			get_user_feedSchema,
		),
		GetUserFeedHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"update_user_feed",
			"Create or update feed for this User Returns Post.",
			update_user_feedSchema,
		),
		UpdateUserFeedHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_friends",
			"List friends for this User Returns User.",
			list_user_friendsSchema,
		),
		ListUserFriendsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_fundraisers",
			"List fundraisers for this User Returns FundraiserPersonToCharity.",
			list_user_fundraisersSchema,
		),
		ListUserFundraisersHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"create_user_fundraiser",
			"Create or update fundraisers for this User Returns FundraiserPersonToCharity. Required: currency, description, end_time, external_id, fundraiser_type (enum), goal_amount, name",
			create_user_fundraiserSchema,
		),
		CreateUserFundraiserHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_groups",
			"List groups for this User Returns Group.",
			list_user_groupsSchema,
		),
		ListUserGroupsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_ids_for_apps",
			"List ids_for_apps for this User Returns UserIDForApp.",
			list_user_ids_for_appsSchema,
		),
		ListUserIdsForAppsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_ids_for_business",
			"List ids_for_business for this User Returns UserIDForApp.",
			list_user_ids_for_businessSchema,
		),
		ListUserIdsForBusinessHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_ids_for_pages",
			"List ids_for_pages for this User Returns UserIDForPage.",
			list_user_ids_for_pagesSchema,
		),
		ListUserIdsForPagesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_likes",
			"List likes for this User Returns Page.",
			list_user_likesSchema,
		),
		ListUserLikesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_live_videos",
			"List live_videos for this User Returns LiveVideo.",
			list_user_live_videosSchema,
		),
		ListUserLiveVideosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"create_user_live_video",
			"Create or update live_videos for this User Returns LiveVideo.",
			create_user_live_videoSchema,
		),
		CreateUserLiveVideoHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"create_user_messenger_desktop_performance_trace",
			"Create or update messenger_desktop_performance_traces for this User Returns User.",
			create_user_messenger_desktop_performance_traceSchema,
		),
		CreateUserMessengerDesktopPerformanceTraceHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"update_user_messenger_kids_accounts_unread_badge",
			"Create or update messenger_kids_accounts_unread_badge for this User Returns User. Required: proxied_app_id",
			update_user_messenger_kids_accounts_unread_badgeSchema,
		),
		UpdateUserMessengerKidsAccountsUnreadBadgeHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"get_user_music",
			"Get music data for this User Returns Page.",
			get_user_musicSchema,
		),
		GetUserMusicHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"create_user_notification",
			"Create or update notifications for this User Returns User.",
			create_user_notificationSchema,
		),
		CreateUserNotificationHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_payment_transactions",
			"List payment_transactions for this User Returns PaymentEnginePayment.",
			list_user_payment_transactionsSchema,
		),
		ListUserPaymentTransactionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"remove_permissions_from_user",
			"Remove permissions from this User",
			remove_permissions_from_userSchema,
		),
		RemovePermissionsFromUserHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_permissions",
			"List permissions for this User Returns Permission.",
			list_user_permissionsSchema,
		),
		ListUserPermissionsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_personal_ad_accounts",
			"List personal_ad_accounts for this User Returns AdAccount.",
			list_user_personal_ad_accountsSchema,
		),
		ListUserPersonalAdAccountsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_photos",
			"List photos for this User Returns Photo.",
			list_user_photosSchema,
		),
		ListUserPhotosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"create_user_photo",
			"Create or update photos for this User Returns Photo.",
			create_user_photoSchema,
		),
		CreateUserPhotoHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"get_user_picture",
			"Get picture data for this User Returns ProfilePictureSource.",
			get_user_pictureSchema,
		),
		GetUserPictureHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_posts",
			"List posts for this User Returns Post.",
			list_user_postsSchema,
		),
		ListUserPostsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_rich_media_documents",
			"List rich_media_documents for this User Returns Canvas.",
			list_user_rich_media_documentsSchema,
		),
		ListUserRichMediaDocumentsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"create_user_staging_resource",
			"Create or update staging_resources for this User Returns User.",
			create_user_staging_resourceSchema,
		),
		CreateUserStagingResourceHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_user_videos",
			"List videos for this User Returns AdVideo.",
			list_user_videosSchema,
		),
		ListUserVideosHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"create_user_video",
			"Create or update videos for this User Returns AdVideo.",
			create_user_videoSchema,
		),
		CreateUserVideoHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"delete_user",
			"Delete a User",
			delete_userSchema,
		),
		DeleteUserHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"get_user",
			"Get details of a specific User Returns User.",
			get_userSchema,
		),
		GetUserHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"update_user",
			"Update a User Returns User.",
			update_userSchema,
		),
		UpdateUserHandler,
	)

	return nil
}

// User tools: 55 endpoints
