// Code generated by Facebook Business API codegen. DO NOT EDIT.

package application

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolApplication_post_mmp_auditing returns the MCP tool definition for application_post_mmp_auditing
func ToolApplication_post_mmp_auditing() mcp.Tool {

	// Params object accepts: advertiser_id (string), attribution (string), attribution_method (string), attribution_model (string), attribution_referrer (string), auditing_token (string), click_attr_window (unsigned int), custom_events (list<Object>), decline_reason (string), device_os (string), engagement_type (string), event (string), event_id (string), event_reported_time (unsigned int), fb_ad_id (unsigned int), fb_adgroup_id (unsigned int), fb_click_time (unsigned int), fb_view_time (unsigned int), google_install_referrer (string), inactivity_window_hours (unsigned int), install_id (string), is_fb (bool), meta_install_referrer (string), used_install_referrer (bool), view_attr_window (unsigned int)
	return mcp.NewTool("application_post_mmp_auditing",
		mcp.WithDescription("POST mmp_auditing for Application"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"advertiser_id": map[string]any{
					"type":        "string",
					"description": "advertiser_id parameter",
				},
				"attribution": map[string]any{
					"type":        "string",
					"description": "attribution parameter",
				},
				"attribution_method": map[string]any{
					"type":        "string",
					"description": "attribution_method parameter",
				},
				"attribution_model": map[string]any{
					"type":        "string",
					"description": "attribution_model parameter",
				},
				"attribution_referrer": map[string]any{
					"type":        "string",
					"description": "attribution_referrer parameter",
				},
				"auditing_token": map[string]any{
					"type":        "string",
					"description": "auditing_token parameter",
				},
				"click_attr_window": map[string]any{
					"type":        "integer",
					"description": "click_attr_window parameter",
				},
				"custom_events": map[string]any{
					"type":        "array",
					"description": "custom_events parameter",
					"items":       map[string]any{"type": "object"},
				},
				"decline_reason": map[string]any{
					"type":        "string",
					"description": "decline_reason parameter",
				},
				"device_os": map[string]any{
					"type":        "string",
					"description": "device_os parameter",
				},
				"engagement_type": map[string]any{
					"type":        "string",
					"description": "engagement_type parameter",
				},
				"event": map[string]any{
					"type":        "string",
					"description": "event parameter",
					"required":    true,
				},
				"event_id": map[string]any{
					"type":        "string",
					"description": "event_id parameter",
				},
				"event_reported_time": map[string]any{
					"type":        "integer",
					"description": "event_reported_time parameter",
				},
				"fb_ad_id": map[string]any{
					"type":        "integer",
					"description": "fb_ad_id parameter",
				},
				"fb_adgroup_id": map[string]any{
					"type":        "integer",
					"description": "fb_adgroup_id parameter",
				},
				"fb_click_time": map[string]any{
					"type":        "integer",
					"description": "fb_click_time parameter",
				},
				"fb_view_time": map[string]any{
					"type":        "integer",
					"description": "fb_view_time parameter",
				},
				"google_install_referrer": map[string]any{
					"type":        "string",
					"description": "google_install_referrer parameter",
				},
				"inactivity_window_hours": map[string]any{
					"type":        "integer",
					"description": "inactivity_window_hours parameter",
				},
				"install_id": map[string]any{
					"type":        "string",
					"description": "install_id parameter",
				},
				"is_fb": map[string]any{
					"type":        "boolean",
					"description": "is_fb parameter",
					"required":    true,
				},
				"meta_install_referrer": map[string]any{
					"type":        "string",
					"description": "meta_install_referrer parameter",
				},
				"used_install_referrer": map[string]any{
					"type":        "boolean",
					"description": "used_install_referrer parameter",
				},
				"view_attr_window": map[string]any{
					"type":        "integer",
					"description": "view_attr_window parameter",
				},
			}),
			mcp.Description("Parameters object containing: advertiser_id (string), attribution (string), attribution_method (string), attribution_model (string), attribution_referrer (string), auditing_token (string), click_attr_window (integer), custom_events (array<object>), decline_reason (string), device_os (string), engagement_type (string), event (string) [required], event_id (string), event_reported_time (integer), fb_ad_id (integer), fb_adgroup_id (integer), fb_click_time (integer), fb_view_time (integer), google_install_referrer (string), inactivity_window_hours (integer), install_id (string), is_fb (boolean) [required], meta_install_referrer (string), used_install_referrer (boolean), view_attr_window (integer)"),
		),
	)
}

// HandleApplication_post_mmp_auditing handles the application_post_mmp_auditing tool with context-based auth
func HandleApplication_post_mmp_auditing(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	// Parse required params object and expand into args
	val, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(val), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the API method
	result, err := Application_post_mmp_auditing(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_post_mmp_auditing: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Application_post_mmp_auditing performs POST mmp_auditing for Application
func Application_post_mmp_auditing(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "/mmp_auditing"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
