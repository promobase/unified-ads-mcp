// Code generated by Facebook Business API codegen. DO NOT EDIT.

package application

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolApplication_delete_subscriptions returns the MCP tool definition for application_delete_subscriptions
func ToolApplication_delete_subscriptions() mcp.Tool {

	// Params object accepts: fields (list<string>), object (string)
	return mcp.NewTool("application_delete_subscriptions",
		mcp.WithDescription("DELETE subscriptions for Application"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"fields": map[string]any{
					"type":        "array",
					"description": "fields parameter",
					"items":       map[string]any{"type": "string"},
				},
				"object": map[string]any{
					"type":        "string",
					"description": "object parameter",
				},
			}),
			mcp.Description("Parameters object containing: fields (array<string>), object (string)"),
		),
	)
}

// HandleApplication_delete_subscriptions handles the application_delete_subscriptions tool with context-based auth
func HandleApplication_delete_subscriptions(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Application_delete_subscriptions(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_delete_subscriptions: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Application_delete_subscriptions performs DELETE subscriptions for Application
func Application_delete_subscriptions(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "/subscriptions"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("DELETE", baseURL, urlParams)
}
