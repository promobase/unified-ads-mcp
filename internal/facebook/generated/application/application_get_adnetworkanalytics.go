// Code generated by Facebook Business API codegen. DO NOT EDIT.

package application

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/shared"
)

// ToolApplication_get_adnetworkanalytics returns the MCP tool definition for application_get_adnetworkanalytics
func ToolApplication_get_adnetworkanalytics() mcp.Tool {
	// Available fields for AdNetworkAnalyticsSyncQueryResult: omitted_results, query_id, results
	// Params object accepts: aggregation_period (applicationadnetworkanalytics_aggregation_period_enum_param), breakdowns (list<applicationadnetworkanalytics_breakdowns_enum_param>), filters (list<map>), limit (unsigned int), metrics (list<applicationadnetworkanalytics_metrics_enum_param>), ordering_column (applicationadnetworkanalytics_ordering_column_enum_param), ordering_type (applicationadnetworkanalytics_ordering_type_enum_param), should_include_until (bool), since (datetime), until (datetime)
	return mcp.NewTool("application_get_adnetworkanalytics",
		mcp.WithDescription("GET adnetworkanalytics for Application"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"aggregation_period": map[string]any{
					"type":        "string",
					"description": "aggregation_period parameter",
					"enum":        []string{"DAY", "TOTAL"},
				},
				"breakdowns": map[string]any{
					"type":        "array",
					"description": "breakdowns parameter",
					"enum":        []string{"AD_SERVER_CAMPAIGN_ID", "AD_SPACE", "AGE", "APP", "CLICKED_VIEW_TAG", "COUNTRY", "DEAL", "DEAL_AD", "DEAL_PAGE", "DELIVERY_METHOD", "DISPLAY_FORMAT", "FAIL_REASON", "GENDER", "INSTANT_ARTICLE_ID", "INSTANT_ARTICLE_PAGE_ID", "IS_DEAL_BACKFILL", "PLACEMENT", "PLACEMENT_NAME", "PLATFORM", "PROPERTY", "SDK_VERSION"},
					"items":       map[string]any{"type": "string"},
				},
				"filters": map[string]any{
					"type":        "array",
					"description": "filters parameter",
					"items":       map[string]any{"type": "object"},
				},
				"limit": map[string]any{
					"type":        "integer",
					"description": "limit parameter",
				},
				"metrics": map[string]any{
					"type":        "array",
					"description": "metrics parameter",
					"required":    true,
					"enum":        []string{"FB_AD_NETWORK_BIDDING_BID_RATE", "FB_AD_NETWORK_BIDDING_REQUEST", "FB_AD_NETWORK_BIDDING_RESPONSE", "FB_AD_NETWORK_BIDDING_REVENUE", "FB_AD_NETWORK_BIDDING_WIN_RATE", "FB_AD_NETWORK_CLICK", "FB_AD_NETWORK_CPM", "FB_AD_NETWORK_CTR", "FB_AD_NETWORK_FILLED_REQUEST", "FB_AD_NETWORK_FILL_RATE", "FB_AD_NETWORK_IMP", "FB_AD_NETWORK_IMPRESSION_RATE", "FB_AD_NETWORK_REQUEST", "FB_AD_NETWORK_REVENUE", "FB_AD_NETWORK_SHOW_RATE", "FB_AD_NETWORK_VIDEO_GUARANTEE_REVENUE", "FB_AD_NETWORK_VIDEO_MRC", "FB_AD_NETWORK_VIDEO_MRC_RATE", "FB_AD_NETWORK_VIDEO_VIEW", "FB_AD_NETWORK_VIDEO_VIEW_RATE"},
					"items":       map[string]any{"type": "string"},
				},
				"ordering_column": map[string]any{
					"type":        "string",
					"description": "ordering_column parameter",
					"enum":        []string{"METRIC", "TIME", "VALUE"},
				},
				"ordering_type": map[string]any{
					"type":        "string",
					"description": "ordering_type parameter",
					"enum":        []string{"ASCENDING", "DESCENDING"},
				},
				"should_include_until": map[string]any{
					"type":        "boolean",
					"description": "should_include_until parameter",
				},
				"since": map[string]any{
					"type":        "string",
					"description": "since parameter",
				},
				"until": map[string]any{
					"type":        "string",
					"description": "until parameter",
				},
			}),
			mcp.Description("Parameters object containing: aggregation_period (enum) [DAY, TOTAL], breakdowns (array<enum>) [AD_SERVER_CAMPAIGN_ID, AD_SPACE, AGE, APP, CLICKED_VIEW_TAG, ...], filters (array<object>), limit (integer), metrics (array<enum>) [FB_AD_NETWORK_BIDDING_BID_RATE, FB_AD_NETWORK_BIDDING_REQUEST, FB_AD_NETWORK_BIDDING_RESPONSE, FB_AD_NETWORK_BIDDING_REVENUE, FB_AD_NETWORK_BIDDING_WIN_RATE, ...] [required], ordering_column (enum) [METRIC, TIME, VALUE], ordering_type (enum) [ASCENDING, DESCENDING], should_include_until (boolean), since (datetime), until (datetime)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for AdNetworkAnalyticsSyncQueryResult objects. Available fields: omitted_results, query_id, results"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleApplication_get_adnetworkanalytics handles the application_get_adnetworkanalytics tool with context-based auth
func HandleApplication_get_adnetworkanalytics(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the API method
	result, err := Application_get_adnetworkanalytics(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute application_get_adnetworkanalytics: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Application_get_adnetworkanalytics performs GET adnetworkanalytics for Application
func Application_get_adnetworkanalytics(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/adnetworkanalytics")

	urlParams := url.Values{}
	urlParams.Set("access_token", accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("params", fmt.Sprintf("%v", val))

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fields", fmt.Sprintf("%v", val))

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("limit", fmt.Sprintf("%v", val))

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("after", fmt.Sprintf("%v", val))

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("before", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
