// Code generated by Facebook Business API codegen. DO NOT EDIT.

package iguserexportforcam

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolIguserexportforcam_get_insights returns the MCP tool definition for iguserexportforcam_get_insights
func ToolIguserexportforcam_get_insights() mcp.Tool {

	// Params object accepts: breakdown (iguserexportforcaminsights_breakdown_enum_param), metrics (list<iguserexportforcaminsights_metrics_enum_param>), period (iguserexportforcaminsights_period_enum_param), time_range (iguserexportforcaminsights_time_range_enum_param)
	return mcp.NewTool("iguserexportforcam_get_insights",
		mcp.WithDescription("GET insights for IGUserExportForCAM"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"breakdown": map[string]any{
					"type":        "string",
					"description": "breakdown parameter",
					"enum":        []string{"AGE", "FOLLOW_TYPE", "GENDER", "MEDIA_TYPE", "TOP_CITIES", "TOP_COUNTRIES"},
				},
				"metrics": map[string]any{
					"type":        "array",
					"description": "metrics parameter",
					"enum":        []string{"CREATOR_ENGAGED_ACCOUNTS", "CREATOR_REACH", "REELS_HOOK_RATE", "REELS_INTERACTION_RATE", "TOTAL_FOLLOWERS"},
					"items":       map[string]any{"type": "string"},
				},
				"period": map[string]any{
					"type":        "string",
					"description": "period parameter",
					"enum":        []string{"DAY", "OVERALL"},
				},
				"time_range": map[string]any{
					"type":        "string",
					"description": "time_range parameter",
					"enum":        []string{"LAST_14_DAYS", "LAST_90_DAYS", "LIFETIME", "THIS_MONTH", "THIS_WEEK"},
				},
			}),
			mcp.Description("Parameters object containing: breakdown (enum) [AGE, FOLLOW_TYPE, GENDER, MEDIA_TYPE, TOP_CITIES, ...], metrics (array<enum>) [CREATOR_ENGAGED_ACCOUNTS, CREATOR_REACH, REELS_HOOK_RATE, REELS_INTERACTION_RATE, TOTAL_FOLLOWERS], period (enum) [DAY, OVERALL], time_range (enum) [LAST_14_DAYS, LAST_90_DAYS, LIFETIME, THIS_MONTH, THIS_WEEK]"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleIguserexportforcam_get_insights handles the iguserexportforcam_get_insights tool with context-based auth
func HandleIguserexportforcam_get_insights(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Optional: fields
	utils.ParseFieldsArray(request, args)

	// Optional: limit
	utils.ParseOptionalInt(request, "limit", args)

	// Optional: after
	utils.ParseOptionalString(request, "after", args)

	// Optional: before
	utils.ParseOptionalString(request, "before", args)

	// Call the API method
	result, err := Iguserexportforcam_get_insights(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute iguserexportforcam_get_insights: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Iguserexportforcam_get_insights performs GET insights for IGUserExportForCAM
func Iguserexportforcam_get_insights(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/insights")

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("GET", baseURL, urlParams)
}
