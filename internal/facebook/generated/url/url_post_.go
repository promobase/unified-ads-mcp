// Code generated by Facebook Business API codegen. DO NOT EDIT.

package url

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolUrl_post_ returns the MCP tool definition for url_post_
func ToolUrl_post_() mcp.Tool {

	// Params object accepts: blacklist (bool), denylist (bool), hmac (string), locale (list<string>), scopes (list<url_scopes>), ts (datetime)
	return mcp.NewTool("url_post_",
		mcp.WithDescription("POST  for URL"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"blacklist": map[string]any{
					"type":        "boolean",
					"description": "blacklist parameter",
				},
				"denylist": map[string]any{
					"type":        "boolean",
					"description": "denylist parameter",
				},
				"hmac": map[string]any{
					"type":        "string",
					"description": "hmac parameter",
				},
				"locale": map[string]any{
					"type":        "array",
					"description": "locale parameter",
					"items":       map[string]any{"type": "string"},
				},
				"scopes": map[string]any{
					"type":        "array",
					"description": "scopes parameter",
					"enum":        []string{"NEWS_TAB", "NEWS_TAB_DEV_ENV"},
					"items":       map[string]any{"type": "string"},
				},
				"ts": map[string]any{
					"type":        "string",
					"description": "ts parameter",
				},
			}),
			mcp.Description("Parameters object containing: blacklist (boolean), denylist (boolean), hmac (string), locale (array<string>), scopes (array<url_scopes>) [NEWS_TAB, NEWS_TAB_DEV_ENV], ts (datetime)"),
		),
	)
}

// HandleUrl_post_ handles the url_post_ tool with context-based auth
func HandleUrl_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Url_post_(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute url_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Url_post_ performs POST  for URL
func Url_post_(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + ""

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
