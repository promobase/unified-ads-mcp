// Code generated by Facebook Business API codegen. DO NOT EDIT.

package mediatitle

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolMediatitle_post_ returns the MCP tool definition for mediatitle_post_
func ToolMediatitle_post_() mcp.Tool {

	// Params object accepts: applinks (Object), content_category (mediatitle_content_category), currency (string), description (string), fb_page_id (string), genres (list<string>), images (list<Object>), kg_fb_id (string), price (unsigned int), title (string), title_display_name (string), url (string)
	return mcp.NewTool("mediatitle_post_",
		mcp.WithDescription("POST  for MediaTitle"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"applinks": map[string]any{
					"type":        "object",
					"description": "applinks parameter",
				},
				"content_category": map[string]any{
					"type":        "string",
					"description": "content_category parameter",
					"enum":        []string{"MOVIE", "MUSIC", "TV_SHOW"},
				},
				"currency": map[string]any{
					"type":        "string",
					"description": "currency parameter",
				},
				"description": map[string]any{
					"type":        "string",
					"description": "description parameter",
				},
				"fb_page_id": map[string]any{
					"type":        "string",
					"description": "fb_page_id parameter",
				},
				"genres": map[string]any{
					"type":        "array",
					"description": "genres parameter",
					"items":       map[string]any{"type": "string"},
				},
				"images": map[string]any{
					"type":        "array",
					"description": "images parameter",
					"items":       map[string]any{"type": "object"},
				},
				"kg_fb_id": map[string]any{
					"type":        "string",
					"description": "kg_fb_id parameter",
				},
				"price": map[string]any{
					"type":        "integer",
					"description": "price parameter",
				},
				"title": map[string]any{
					"type":        "string",
					"description": "title parameter",
				},
				"title_display_name": map[string]any{
					"type":        "string",
					"description": "title_display_name parameter",
				},
				"url": map[string]any{
					"type":        "string",
					"description": "url parameter",
				},
			}),
			mcp.Description("Parameters object containing: applinks (object), content_category (mediatitle_content_category) [MOVIE, MUSIC, TV_SHOW], currency (string), description (string), fb_page_id (string), genres (array<string>), images (array<object>), kg_fb_id (string), price (integer), title (string), title_display_name (string), url (string)"),
		),
	)
}

// HandleMediatitle_post_ handles the mediatitle_post_ tool with context-based auth
func HandleMediatitle_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Mediatitle_post_(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute mediatitle_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Mediatitle_post_ performs POST  for MediaTitle
func Mediatitle_post_(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
