// Code generated by Facebook Business API codegen. DO NOT EDIT.

package highdemandperiod

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolHighdemandperiod_post_ returns the MCP tool definition for highdemandperiod_post_
func ToolHighdemandperiod_post_() mcp.Tool {

	// Params object accepts: budget_value (unsigned int), budget_value_type (highdemandperiod_budget_value_type), time_end (unsigned int), time_start (unsigned int)
	return mcp.NewTool("highdemandperiod_post_",
		mcp.WithDescription("POST  for HighDemandPeriod"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"budget_value": map[string]any{
					"type":        "integer",
					"description": "budget_value parameter",
				},
				"budget_value_type": map[string]any{
					"type":        "string",
					"description": "budget_value_type parameter",
					"enum":        []string{"ABSOLUTE", "MULTIPLIER"},
				},
				"time_end": map[string]any{
					"type":        "integer",
					"description": "time_end parameter",
				},
				"time_start": map[string]any{
					"type":        "integer",
					"description": "time_start parameter",
				},
			}),
			mcp.Description("Parameters object containing: budget_value (integer), budget_value_type (highdemandperiod_budget_value_type) [ABSOLUTE, MULTIPLIER], time_end (integer), time_start (integer)"),
		),
	)
}

// HandleHighdemandperiod_post_ handles the highdemandperiod_post_ tool with context-based auth
func HandleHighdemandperiod_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Highdemandperiod_post_(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute highdemandperiod_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Highdemandperiod_post_ performs POST  for HighDemandPeriod
func Highdemandperiod_post_(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + ""

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
