// Code generated by Facebook Business API codegen. DO NOT EDIT.

package advideo

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolAdvideo_post returns the MCP tool definition for advideo_post
func ToolAdvideo_post() mcp.Tool {

	// Params object accepts: ad_breaks (list), allow_bm_crossposting (bool), allow_crossposting_for_pages (list<Object>), backdated_time (datetime), backdated_time_granularity (video_backdated_time_granularity), call_to_action (Object), content_category (video_content_category), content_tags (list<string>), custom_labels (list<string>), description (string), direct_share_status (unsigned int), embeddable (bool), expiration (Object), expire_now (bool), increment_play_count (bool), name (string), preferred_thumbnail_id (string), privacy (string), publish_to_news_feed (bool), publish_to_videos_tab (bool), published (bool), scheduled_publish_time (unsigned int), social_actions (bool), sponsor_id (string), sponsor_relationship (unsigned int), tags (list<string>), target (string), universal_video_id (string)
	return mcp.NewTool("advideo_post",
		mcp.WithDescription("POST  for AdVideo"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"ad_breaks": map[string]any{
					"type":        "string",
					"description": "ad_breaks parameter",
				},
				"allow_bm_crossposting": map[string]any{
					"type":        "boolean",
					"description": "allow_bm_crossposting parameter",
				},
				"allow_crossposting_for_pages": map[string]any{
					"type":        "array",
					"description": "allow_crossposting_for_pages parameter",
					"items":       map[string]any{"type": "object"},
				},
				"backdated_time": map[string]any{
					"type":        "string",
					"description": "backdated_time parameter",
				},
				"backdated_time_granularity": map[string]any{
					"type":        "string",
					"description": "backdated_time_granularity parameter",
					"enum":        []string{"day", "hour", "min", "month", "none", "year"},
				},
				"call_to_action": map[string]any{
					"type":        "object",
					"description": "call_to_action parameter",
				},
				"content_category": map[string]any{
					"type":        "string",
					"description": "content_category parameter",
					"enum":        []string{"BEAUTY_FASHION", "BUSINESS", "CARS_TRUCKS", "COMEDY", "CUTE_ANIMALS", "ENTERTAINMENT", "FAMILY", "FOOD_HEALTH", "HOME", "LIFESTYLE", "MUSIC", "NEWS", "OTHER", "POLITICS", "SCIENCE", "SPORTS", "TECHNOLOGY", "VIDEO_GAMING"},
				},
				"content_tags": map[string]any{
					"type":        "array",
					"description": "content_tags parameter",
					"items":       map[string]any{"type": "string"},
				},
				"custom_labels": map[string]any{
					"type":        "array",
					"description": "custom_labels parameter",
					"items":       map[string]any{"type": "string"},
				},
				"description": map[string]any{
					"type":        "string",
					"description": "description parameter",
				},
				"direct_share_status": map[string]any{
					"type":        "integer",
					"description": "direct_share_status parameter",
				},
				"embeddable": map[string]any{
					"type":        "boolean",
					"description": "embeddable parameter",
				},
				"expiration": map[string]any{
					"type":        "object",
					"description": "expiration parameter",
				},
				"expire_now": map[string]any{
					"type":        "boolean",
					"description": "expire_now parameter",
				},
				"increment_play_count": map[string]any{
					"type":        "boolean",
					"description": "increment_play_count parameter",
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
				},
				"preferred_thumbnail_id": map[string]any{
					"type":        "string",
					"description": "preferred_thumbnail_id parameter",
				},
				"privacy": map[string]any{
					"type":        "string",
					"description": "privacy parameter",
				},
				"publish_to_news_feed": map[string]any{
					"type":        "boolean",
					"description": "publish_to_news_feed parameter",
				},
				"publish_to_videos_tab": map[string]any{
					"type":        "boolean",
					"description": "publish_to_videos_tab parameter",
				},
				"published": map[string]any{
					"type":        "boolean",
					"description": "published parameter",
				},
				"scheduled_publish_time": map[string]any{
					"type":        "integer",
					"description": "scheduled_publish_time parameter",
				},
				"social_actions": map[string]any{
					"type":        "boolean",
					"description": "social_actions parameter",
				},
				"sponsor_id": map[string]any{
					"type":        "string",
					"description": "sponsor_id parameter",
				},
				"sponsor_relationship": map[string]any{
					"type":        "integer",
					"description": "sponsor_relationship parameter",
				},
				"tags": map[string]any{
					"type":        "array",
					"description": "tags parameter",
					"items":       map[string]any{"type": "string"},
				},
				"target": map[string]any{
					"type":        "string",
					"description": "target parameter",
				},
				"universal_video_id": map[string]any{
					"type":        "string",
					"description": "universal_video_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: ad_breaks (list), allow_bm_crossposting (boolean), allow_crossposting_for_pages (array<object>), backdated_time (datetime), backdated_time_granularity (video_backdated_time_granularity) [day, hour, min, month, none, ...], call_to_action (object), content_category (video_content_category) [BEAUTY_FASHION, BUSINESS, CARS_TRUCKS, COMEDY, CUTE_ANIMALS, ...], content_tags (array<string>), custom_labels (array<string>), description (string), direct_share_status (integer), embeddable (boolean), expiration (object), expire_now (boolean), increment_play_count (boolean), name (string), preferred_thumbnail_id (string), privacy (string), publish_to_news_feed (boolean), publish_to_videos_tab (boolean), published (boolean), scheduled_publish_time (integer), social_actions (boolean), sponsor_id (string), sponsor_relationship (integer), tags (array<string>), target (string), universal_video_id (string)"),
		),
	)
}

// HandleAdvideo_post handles the advideo_post tool with context-based auth
func HandleAdvideo_post(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Advideo_post(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute advideo_post: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Advideo_post performs POST  for AdVideo
func Advideo_post(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
