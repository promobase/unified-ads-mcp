// Code generated by Facebook Business API codegen. DO NOT EDIT.

package homelisting

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolHomelisting_post returns the MCP tool definition for homelisting_post
func ToolHomelisting_post() mcp.Tool {

	// Params object accepts: address (Object), availability (string), currency (string), description (string), images (list<Object>), listing_type (string), name (string), num_baths (float), num_beds (float), num_units (float), price (float), property_type (string), url (string), year_built (unsigned int)
	return mcp.NewTool("homelisting_post",
		mcp.WithDescription("POST  for HomeListing"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"address": map[string]any{
					"type":        "object",
					"description": "address parameter",
				},
				"availability": map[string]any{
					"type":        "string",
					"description": "availability parameter",
				},
				"currency": map[string]any{
					"type":        "string",
					"description": "currency parameter",
				},
				"description": map[string]any{
					"type":        "string",
					"description": "description parameter",
				},
				"images": map[string]any{
					"type":        "array",
					"description": "images parameter",
					"items":       map[string]any{"type": "object"},
				},
				"listing_type": map[string]any{
					"type":        "string",
					"description": "listing_type parameter",
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
				},
				"num_baths": map[string]any{
					"type":        "number",
					"description": "num_baths parameter",
				},
				"num_beds": map[string]any{
					"type":        "number",
					"description": "num_beds parameter",
				},
				"num_units": map[string]any{
					"type":        "number",
					"description": "num_units parameter",
				},
				"price": map[string]any{
					"type":        "number",
					"description": "price parameter",
				},
				"property_type": map[string]any{
					"type":        "string",
					"description": "property_type parameter",
				},
				"url": map[string]any{
					"type":        "string",
					"description": "url parameter",
				},
				"year_built": map[string]any{
					"type":        "integer",
					"description": "year_built parameter",
				},
			}),
			mcp.Description("Parameters object containing: address (object), availability (string), currency (string), description (string), images (array<object>), listing_type (string), name (string), num_baths (number), num_beds (number), num_units (number), price (number), property_type (string), url (string), year_built (integer)"),
		),
	)
}

// HandleHomelisting_post handles the homelisting_post tool with context-based auth
func HandleHomelisting_post(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Homelisting_post(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute homelisting_post: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Homelisting_post performs POST  for HomeListing
func Homelisting_post(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + ""

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
