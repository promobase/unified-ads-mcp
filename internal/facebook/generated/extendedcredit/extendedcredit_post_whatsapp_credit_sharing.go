// Code generated by Facebook Business API codegen. DO NOT EDIT.

package extendedcredit

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/shared"
)

// ToolExtendedcredit_post_whatsapp_credit_sharing returns the MCP tool definition for extendedcredit_post_whatsapp_credit_sharing
func ToolExtendedcredit_post_whatsapp_credit_sharing() mcp.Tool {
	
	// Params object accepts: receiving_business_id (string)
	return mcp.NewTool("extendedcredit_post_whatsapp_credit_sharing",
		mcp.WithDescription("POST whatsapp_credit_sharing for ExtendedCredit"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"receiving_business_id": map[string]any{
					"type": "string",
					"description": "receiving_business_id parameter",
					"required": true,
				},
			}),
			mcp.Description("Parameters object containing: receiving_business_id (string) [required]"),
		),
	)
}

// HandleExtendedcredit_post_whatsapp_credit_sharing handles the extendedcredit_post_whatsapp_credit_sharing tool with context-based auth
func HandleExtendedcredit_post_whatsapp_credit_sharing(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}



	// Call the API method
	result, err := Extendedcredit_post_whatsapp_credit_sharing(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute extendedcredit_post_whatsapp_credit_sharing: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Extendedcredit_post_whatsapp_credit_sharing performs POST whatsapp_credit_sharing for ExtendedCredit
func Extendedcredit_post_whatsapp_credit_sharing(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/whatsapp_credit_sharing")
	
	urlParams := url.Values{}
	urlParams.Set("access_token", accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("params", fmt.Sprintf("%v", val))
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}