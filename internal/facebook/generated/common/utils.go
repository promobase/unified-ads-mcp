// Code generated by codegen. DO NOT EDIT.

package common

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/url"
	"os"
	"reflect"
	"strings"

	"github.com/invopop/jsonschema"
	"github.com/mark3labs/mcp-go/mcp"
)

const (
	graphAPIVersion = "v23.0"
)

var (
	graphAPIHost = "https://graph.facebook.com"
	baseGraphURL = "https://graph.facebook.com"
	accessToken  = ""
)

// SetGraphAPIHost sets the Graph API host for testing purposes
func SetGraphAPIHost(host string) {
	graphAPIHost = host
}

// GetGraphAPIHost returns the current Graph API host
func GetGraphAPIHost() string {
	return graphAPIHost
}

// SetAccessToken sets the access token for testing purposes
func SetAccessToken(token string) {
	accessToken = token
}

// generateSchemaForType generates JSON schema for a given type
func generateSchemaForType(t reflect.Type) json.RawMessage {
	reflector := jsonschema.Reflector{
		AllowAdditionalProperties: false,
		DoNotReference:            true,
	}
	schema := reflector.Reflect(t)

	schemaBytes, err := json.Marshal(schema)
	if err != nil {
		panic(fmt.Sprintf("failed to marshal schema for type %v: %v", t, err))
	}

	return json.RawMessage(schemaBytes)
}

// getAccessToken retrieves the Facebook access token from environment or test setting
func getAccessToken() string {
	if accessToken != "" {
		return accessToken
	}
	return os.Getenv("FACEBOOK_ACCESS_TOKEN")
}

// buildGraphURL constructs the Facebook Graph API URL
func buildGraphURL(objectID, endpoint string) string {
	if objectID != "" {
		return fmt.Sprintf("%s/%s/%s/%s", graphAPIHost, graphAPIVersion, objectID, endpoint)
	}
	return fmt.Sprintf("%s/%s/%s", graphAPIHost, graphAPIVersion, endpoint)
}

// makeGraphRequest performs an HTTP request to the Facebook Graph API
func makeGraphRequest(method, urlStr string, data map[string]interface{}) ([]byte, error) {
	// Test guardrail: panic if hitting real Facebook API during tests
	if strings.Contains(urlStr, "facebook.com") && os.Getenv("TESTING") == "true" {
		panic(fmt.Sprintf("TEST GUARDRAIL: Attempted to hit real Facebook API during tests! URL: %s", urlStr))
	}

	client := &http.Client{}

	var req *http.Request
	var err error

	// Check access token
	accessToken := getAccessToken()
	if accessToken == "" {
		return nil, fmt.Errorf("FACEBOOK_ACCESS_TOKEN environment variable is not set")
	}

	// Parse URL to add access token
	parsedURL, err := url.Parse(urlStr)
	if err != nil {
		return nil, fmt.Errorf("invalid URL: %w", err)
	}

	// Add access token to query params
	q := parsedURL.Query()
	q.Set("access_token", accessToken)
	parsedURL.RawQuery = q.Encode()

	// Create request based on method
	switch method {
	case "GET", "DELETE":
		log.Printf("[DEBUG] Making %s request to %s", method, parsedURL.String())
		req, err = http.NewRequest(method, parsedURL.String(), nil)
	case "POST", "PUT":
		log.Printf("[DEBUG] Making %s request to %s with data: %v", method, parsedURL.String(), data)
		jsonData, err := json.Marshal(data)
		if err != nil {
			return nil, fmt.Errorf("failed to marshal data: %w", err)
		}
		req, err = http.NewRequest(method, parsedURL.String(), bytes.NewBuffer(jsonData))
		if err == nil {
			req.Header.Set("Content-Type", "application/json")
		}
	default:
		return nil, fmt.Errorf("unsupported method: %s", method)
	}

	if err != nil {
		return nil, fmt.Errorf("failed to create request: %w", err)
	}

	// Execute request
	resp, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("request failed: %w", err)
	}
	defer resp.Body.Close()

	// Read response
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("failed to read response: %w", err)
	}

	// Check for errors
	if resp.StatusCode >= 400 {
		var fbError map[string]interface{}
		if err := json.Unmarshal(body, &fbError); err == nil {
			if errData, ok := fbError["error"].(map[string]interface{}); ok {
				return nil, fmt.Errorf("Facebook API error: %v - %v",
					errData["type"], errData["message"])
			}
		}
		return nil, fmt.Errorf("HTTP %d: %s", resp.StatusCode, string(body))
	}

	return body, nil
}

// BatchRequest represents a single request in a batch
type BatchRequest struct {
	Method      string                 `json:"method"`
	RelativeURL string                 `json:"relative_url"`
	Body        map[string]interface{} `json:"body,omitempty"`
	Headers     map[string]string      `json:"headers,omitempty"`
	Name        string                 `json:"name,omitempty"`
}

// BatchResponse represents a single response in a batch
type BatchResponse struct {
	Code    int               `json:"code"`
	Headers map[string]string `json:"headers,omitempty"`
	Body    json.RawMessage   `json:"body,omitempty"`
}

// MakeBatchRequest performs a batch request to the Facebook Graph API
func MakeBatchRequest(requests []BatchRequest) ([]BatchResponse, error) {
	if len(requests) == 0 {
		return nil, fmt.Errorf("no requests provided")
	}

	if len(requests) > 50 {
		return nil, fmt.Errorf("batch request limited to 50 requests, got %d", len(requests))
	}

	// Check access token
	accessToken := getAccessToken()
	if accessToken == "" {
		return nil, fmt.Errorf("FACEBOOK_ACCESS_TOKEN environment variable is not set")
	}

	// Convert batch requests to JSON
	batchJSON, err := json.Marshal(requests)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal batch requests: %w", err)
	}

	// Create form data
	formData := url.Values{}
	formData.Set("batch", string(batchJSON))
	formData.Set("access_token", accessToken)

	// Build URL
	batchURL := fmt.Sprintf("%s/%s/", graphAPIHost, graphAPIVersion)

	log.Printf("[DEBUG] Making batch request to %s with %d requests", batchURL, len(requests))

	// Create request
	req, err := http.NewRequest("POST", batchURL, bytes.NewBufferString(formData.Encode()))
	if err != nil {
		return nil, fmt.Errorf("failed to create batch request: %w", err)
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	// Execute request
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("batch request failed: %w", err)
	}
	defer resp.Body.Close()

	// Read response
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("failed to read batch response: %w", err)
	}

	// Check HTTP status
	if resp.StatusCode >= 400 {
		return nil, fmt.Errorf("batch request failed with HTTP %d: %s", resp.StatusCode, string(body))
	}

	// Parse batch responses
	var batchResponses []BatchResponse
	if err := json.Unmarshal(body, &batchResponses); err != nil {
		return nil, fmt.Errorf("failed to parse batch response: %w", err)
	}

	return batchResponses, nil
}

// BatchRequestBuilder helps build batch requests with dependencies
type BatchRequestBuilder struct {
	requests []BatchRequest
}

// NewBatchRequestBuilder creates a new batch request builder
func NewBatchRequestBuilder() *BatchRequestBuilder {
	return &BatchRequestBuilder{
		requests: make([]BatchRequest, 0),
	}
}

// AddRequest adds a request to the batch
func (b *BatchRequestBuilder) AddRequest(method, relativeURL string, body map[string]interface{}, name string) *BatchRequestBuilder {
	req := BatchRequest{
		Method:      method,
		RelativeURL: relativeURL,
		Body:        body,
		Name:        name,
	}
	b.requests = append(b.requests, req)
	return b
}

// AddGET adds a GET request to the batch
func (b *BatchRequestBuilder) AddGET(objectID, endpoint string, params map[string]interface{}, name string) *BatchRequestBuilder {
	// Build relative URL
	relativeURL := objectID
	if endpoint != "" {
		relativeURL = fmt.Sprintf("%s/%s", objectID, endpoint)
	}

	// Add query parameters
	if len(params) > 0 {
		query := url.Values{}
		for k, v := range params {
			query.Set(k, fmt.Sprintf("%v", v))
		}
		relativeURL = fmt.Sprintf("%s?%s", relativeURL, query.Encode())
	}

	return b.AddRequest("GET", relativeURL, nil, name)
}

// AddPOST adds a POST request to the batch
func (b *BatchRequestBuilder) AddPOST(objectID, endpoint string, body map[string]interface{}, name string) *BatchRequestBuilder {
	relativeURL := objectID
	if endpoint != "" {
		relativeURL = fmt.Sprintf("%s/%s", objectID, endpoint)
	}
	return b.AddRequest("POST", relativeURL, body, name)
}

// AddDELETE adds a DELETE request to the batch
func (b *BatchRequestBuilder) AddDELETE(objectID, endpoint string, name string) *BatchRequestBuilder {
	relativeURL := objectID
	if endpoint != "" {
		relativeURL = fmt.Sprintf("%s/%s", objectID, endpoint)
	}
	return b.AddRequest("DELETE", relativeURL, nil, name)
}

// Execute performs the batch request
func (b *BatchRequestBuilder) Execute() ([]BatchResponse, error) {
	return MakeBatchRequest(b.requests)
}

// GetRequests returns the built requests for inspection
func (b *BatchRequestBuilder) GetRequests() []BatchRequest {
	return b.requests
}

// === Handler Utility Functions ===

// ExtractRequiredID extracts and validates the ID parameter from request parameters
func ExtractRequiredID(params map[string]interface{}) (string, error) {
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return "", fmt.Errorf("id is required")
	}
	delete(params, "id")
	return id, nil
}

// ExtractOptionalID extracts the ID parameter if present, returns empty string if not
func ExtractOptionalID(params map[string]interface{}) string {
	id, ok := params["id"].(string)
	if ok {
		delete(params, "id")
		return id
	}
	return ""
}

// InitializeParams ensures params map is not nil
func InitializeParams(request mcp.CallToolRequest) map[string]interface{} {
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}
	return params
}

// BuildQueryParameters creates url.Values from parameters map
func BuildQueryParameters() url.Values {
	return url.Values{}
}

// HandleFieldsParameter processes the fields parameter and adds it to query
func HandleFieldsParameter(params map[string]interface{}, query url.Values, objectType string) {
	// First check for array format
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
		return
	}

	// Check for string format
	if fields, ok := params["fields"].(string); ok && fields != "" {
		query.Set("fields", fields)
		delete(params, "fields")
		return
	}

	// Use default fields if none provided
	defaultFields := GetDefaultFields(objectType)
	if len(defaultFields) > 0 {
		query.Set("fields", strings.Join(defaultFields, ","))
	}
}

// AddRemainingParams adds all remaining parameters to the query
func AddRemainingParams(params map[string]interface{}, query url.Values) {
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}
}

// BuildURLWithQuery constructs the full URL with query parameters
func BuildURLWithQuery(baseURL string, query url.Values) string {
	if len(query) > 0 {
		return fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}
	return baseURL
}

// ExecuteGETRequest executes a GET request and returns the result
func ExecuteGETRequest(ctx context.Context, url string) (*mcp.CallToolResult, error) {
	resp, err := makeGraphRequest("GET", url, nil)
	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}
	return mcp.NewToolResultText(string(resp)), nil
}

// ExecutePOSTRequest executes a POST request with body and returns the result
func ExecutePOSTRequest(ctx context.Context, url string, body map[string]interface{}) (*mcp.CallToolResult, error) {
	resp, err := makeGraphRequest("POST", url, body)
	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}
	return mcp.NewToolResultText(string(resp)), nil
}

// ExecutePUTRequest executes a PUT request with body and returns the result
func ExecutePUTRequest(ctx context.Context, url string, body map[string]interface{}) (*mcp.CallToolResult, error) {
	resp, err := makeGraphRequest("PUT", url, body)
	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}
	return mcp.NewToolResultText(string(resp)), nil
}

// ExecuteDELETERequest executes a DELETE request and returns the result
func ExecuteDELETERequest(ctx context.Context, url string) (*mcp.CallToolResult, error) {
	resp, err := makeGraphRequest("DELETE", url, nil)
	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}
	return mcp.NewToolResultText(string(resp)), nil
}

// StandardGETHandler provides a standard implementation for simple GET handlers
func StandardGETHandler(ctx context.Context, request mcp.CallToolRequest, endpoint string, objectType string, requireID bool) (*mcp.CallToolResult, error) {
	// Initialize parameters
	params := InitializeParams(request)

	// Extract ID if required
	var id string
	var err error
	if requireID {
		id, err = ExtractRequiredID(params)
		if err != nil {
			return mcp.NewToolResultErrorf("%s", err.Error()), nil
		}
	} else {
		id = ExtractOptionalID(params)
	}

	// Build query parameters
	query := BuildQueryParameters()

	// Handle fields parameter
	HandleFieldsParameter(params, query, objectType)

	// Add remaining parameters
	AddRemainingParams(params, query)

	// Build URL
	baseURL := buildGraphURL(id, endpoint)
	fullURL := BuildURLWithQuery(baseURL, query)

	// Execute request
	return ExecuteGETRequest(ctx, fullURL)
}

// StandardPOSTHandler provides a standard implementation for simple POST handlers
func StandardPOSTHandler(ctx context.Context, request mcp.CallToolRequest, endpoint string, requireID bool) (*mcp.CallToolResult, error) {
	// Initialize parameters
	params := InitializeParams(request)

	// Extract ID if required
	var id string
	var err error
	if requireID {
		id, err = ExtractRequiredID(params)
		if err != nil {
			return mcp.NewToolResultErrorf("%s", err.Error()), nil
		}
	} else {
		id = ExtractOptionalID(params)
	}

	// Build URL
	url := buildGraphURL(id, endpoint)

	// Execute request with params as body
	return ExecutePOSTRequest(ctx, url, params)
}

// StandardDELETEHandler provides a standard implementation for simple DELETE handlers
func StandardDELETEHandler(ctx context.Context, request mcp.CallToolRequest, endpoint string) (*mcp.CallToolResult, error) {
	// Initialize parameters
	params := InitializeParams(request)

	// Extract required ID
	id, err := ExtractRequiredID(params)
	if err != nil {
		return mcp.NewToolResultErrorf("%s", err.Error()), nil
	}

	// Build URL
	url := buildGraphURL(id, endpoint)

	// Execute request
	return ExecuteDELETERequest(ctx, url)
}
