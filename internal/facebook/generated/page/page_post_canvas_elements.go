// Code generated by Facebook Business API codegen. DO NOT EDIT.

package page

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolPage_post_canvas_elements returns the MCP tool definition for page_post_canvas_elements
func ToolPage_post_canvas_elements() mcp.Tool {

	// Params object accepts: canvas_button (Object), canvas_carousel (Object), canvas_footer (Object), canvas_header (Object), canvas_lead_form (Object), canvas_photo (Object), canvas_product_list (Object), canvas_product_set (Object), canvas_store_locator (Object), canvas_template_video (Object), canvas_text (Object), canvas_video (Object)
	return mcp.NewTool("page_post_canvas_elements",
		mcp.WithDescription("POST canvas_elements for Page"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"canvas_button": map[string]any{
					"type":        "object",
					"description": "canvas_button parameter",
				},
				"canvas_carousel": map[string]any{
					"type":        "object",
					"description": "canvas_carousel parameter",
				},
				"canvas_footer": map[string]any{
					"type":        "object",
					"description": "canvas_footer parameter",
				},
				"canvas_header": map[string]any{
					"type":        "object",
					"description": "canvas_header parameter",
				},
				"canvas_lead_form": map[string]any{
					"type":        "object",
					"description": "canvas_lead_form parameter",
				},
				"canvas_photo": map[string]any{
					"type":        "object",
					"description": "canvas_photo parameter",
				},
				"canvas_product_list": map[string]any{
					"type":        "object",
					"description": "canvas_product_list parameter",
				},
				"canvas_product_set": map[string]any{
					"type":        "object",
					"description": "canvas_product_set parameter",
				},
				"canvas_store_locator": map[string]any{
					"type":        "object",
					"description": "canvas_store_locator parameter",
				},
				"canvas_template_video": map[string]any{
					"type":        "object",
					"description": "canvas_template_video parameter",
				},
				"canvas_text": map[string]any{
					"type":        "object",
					"description": "canvas_text parameter",
				},
				"canvas_video": map[string]any{
					"type":        "object",
					"description": "canvas_video parameter",
				},
			}),
			mcp.Description("Parameters object containing: canvas_button (object), canvas_carousel (object), canvas_footer (object), canvas_header (object), canvas_lead_form (object), canvas_photo (object), canvas_product_list (object), canvas_product_set (object), canvas_store_locator (object), canvas_template_video (object), canvas_text (object), canvas_video (object)"),
		),
	)
}

// HandlePage_post_canvas_elements handles the page_post_canvas_elements tool with context-based auth
func HandlePage_post_canvas_elements(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Page_post_canvas_elements(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute page_post_canvas_elements: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Page_post_canvas_elements performs POST canvas_elements for Page
func Page_post_canvas_elements(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "canvas_elements"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
