// Code generated by Facebook Business API codegen. DO NOT EDIT.

package page

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolPage_post_live_videos returns the MCP tool definition for page_post_live_videos
func ToolPage_post_live_videos() mcp.Tool {

	// Params object accepts: content_tags (list<string>), crossposting_actions (list<map>), custom_labels (list<string>), description (string), enable_backup_ingest (bool), encoding_settings (string), event_params (Object), fisheye_video_cropped (bool), front_z_rotation (float), game_show (map), is_audio_only (bool), is_spherical (bool), original_fov (unsigned int), privacy (string), projection (pagelive_videos_projection_enum_param), published (bool), schedule_custom_profile_image (file), spatial_audio_format (pagelive_videos_spatial_audio_format_enum_param), status (pagelive_videos_status_enum_param), stereoscopic_mode (pagelive_videos_stereoscopic_mode_enum_param), stop_on_delete_stream (bool), stream_type (pagelive_videos_stream_type_enum_param), targeting (Object), title (string)
	return mcp.NewTool("page_post_live_videos",
		mcp.WithDescription("POST live_videos for Page"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"content_tags": map[string]any{
					"type":        "array",
					"description": "content_tags parameter",
					"items":       map[string]any{"type": "string"},
				},
				"crossposting_actions": map[string]any{
					"type":        "array",
					"description": "crossposting_actions parameter",
					"items":       map[string]any{"type": "object"},
				},
				"custom_labels": map[string]any{
					"type":        "array",
					"description": "custom_labels parameter",
					"items":       map[string]any{"type": "string"},
				},
				"description": map[string]any{
					"type":        "string",
					"description": "description parameter",
				},
				"enable_backup_ingest": map[string]any{
					"type":        "boolean",
					"description": "enable_backup_ingest parameter",
				},
				"encoding_settings": map[string]any{
					"type":        "string",
					"description": "encoding_settings parameter",
				},
				"event_params": map[string]any{
					"type":        "object",
					"description": "event_params parameter",
				},
				"fisheye_video_cropped": map[string]any{
					"type":        "boolean",
					"description": "fisheye_video_cropped parameter",
				},
				"front_z_rotation": map[string]any{
					"type":        "number",
					"description": "front_z_rotation parameter",
				},
				"game_show": map[string]any{
					"type":        "object",
					"description": "game_show parameter",
				},
				"is_audio_only": map[string]any{
					"type":        "boolean",
					"description": "is_audio_only parameter",
				},
				"is_spherical": map[string]any{
					"type":        "boolean",
					"description": "is_spherical parameter",
				},
				"original_fov": map[string]any{
					"type":        "integer",
					"description": "original_fov parameter",
				},
				"privacy": map[string]any{
					"type":        "string",
					"description": "privacy parameter",
				},
				"projection": map[string]any{
					"type":        "string",
					"description": "projection parameter",
					"enum":        []string{"CUBEMAP", "EQUIRECTANGULAR", "HALF_EQUIRECTANGULAR"},
				},
				"published": map[string]any{
					"type":        "boolean",
					"description": "published parameter",
				},
				"schedule_custom_profile_image": map[string]any{
					"type":        "string",
					"description": "schedule_custom_profile_image parameter",
				},
				"spatial_audio_format": map[string]any{
					"type":        "string",
					"description": "spatial_audio_format parameter",
					"enum":        []string{"ambiX_4"},
				},
				"status": map[string]any{
					"type":        "string",
					"description": "status parameter",
					"enum":        []string{"LIVE_NOW", "SCHEDULED_CANCELED", "SCHEDULED_LIVE", "SCHEDULED_UNPUBLISHED", "UNPUBLISHED"},
				},
				"stereoscopic_mode": map[string]any{
					"type":        "string",
					"description": "stereoscopic_mode parameter",
					"enum":        []string{"LEFT_RIGHT", "MONO", "TOP_BOTTOM"},
				},
				"stop_on_delete_stream": map[string]any{
					"type":        "boolean",
					"description": "stop_on_delete_stream parameter",
				},
				"stream_type": map[string]any{
					"type":        "string",
					"description": "stream_type parameter",
					"enum":        []string{"AMBIENT", "REGULAR"},
				},
				"targeting": map[string]any{
					"type":        "object",
					"description": "targeting parameter",
				},
				"title": map[string]any{
					"type":        "string",
					"description": "title parameter",
				},
			}),
			mcp.Description("Parameters object containing: content_tags (array<string>), crossposting_actions (array<object>), custom_labels (array<string>), description (string), enable_backup_ingest (boolean), encoding_settings (string), event_params (object), fisheye_video_cropped (boolean), front_z_rotation (number), game_show (object), is_audio_only (boolean), is_spherical (boolean), original_fov (integer), privacy (string), projection (enum) [CUBEMAP, EQUIRECTANGULAR, HALF_EQUIRECTANGULAR], published (boolean), schedule_custom_profile_image (file), spatial_audio_format (enum) [ambiX_4], status (enum) [LIVE_NOW, SCHEDULED_CANCELED, SCHEDULED_LIVE, SCHEDULED_UNPUBLISHED, UNPUBLISHED], stereoscopic_mode (enum) [LEFT_RIGHT, MONO, TOP_BOTTOM], stop_on_delete_stream (boolean), stream_type (enum) [AMBIENT, REGULAR], targeting (object), title (string)"),
		),
	)
}

// HandlePage_post_live_videos handles the page_post_live_videos tool with context-based auth
func HandlePage_post_live_videos(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Page_post_live_videos(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute page_post_live_videos: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Page_post_live_videos performs POST live_videos for Page
func Page_post_live_videos(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/live_videos")

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
