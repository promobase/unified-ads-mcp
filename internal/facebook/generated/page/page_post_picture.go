// Code generated by Facebook Business API codegen. DO NOT EDIT.

package page

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolPage_post_picture returns the MCP tool definition for page_post_picture
func ToolPage_post_picture() mcp.Tool {

	// Params object accepts: android_key_hash (string), burn_media_effect (bool), caption (string), composer_session_id (string), frame_entrypoint (string), has_umg (bool), height (unsigned int), ios_bundle_id (string), media_effect_ids (list<int>), media_effect_source_object_id (int), msqrd_mask_id (string), photo (string), picture (string), profile_pic_method (string), profile_pic_source (string), proxied_app_id (int), qn (string), reuse (bool), scaled_crop_rect (Object), set_profile_photo_shield (string), sticker_id (int), sticker_source_object_id (int), suppress_stories (bool), width (unsigned int), x (unsigned int), y (unsigned int)
	return mcp.NewTool("page_post_picture",
		mcp.WithDescription("POST picture for Page"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"android_key_hash": map[string]any{
					"type":        "string",
					"description": "android_key_hash parameter",
				},
				"burn_media_effect": map[string]any{
					"type":        "boolean",
					"description": "burn_media_effect parameter",
				},
				"caption": map[string]any{
					"type":        "string",
					"description": "caption parameter",
				},
				"composer_session_id": map[string]any{
					"type":        "string",
					"description": "composer_session_id parameter",
				},
				"frame_entrypoint": map[string]any{
					"type":        "string",
					"description": "frame_entrypoint parameter",
				},
				"has_umg": map[string]any{
					"type":        "boolean",
					"description": "has_umg parameter",
				},
				"height": map[string]any{
					"type":        "integer",
					"description": "height parameter",
				},
				"ios_bundle_id": map[string]any{
					"type":        "string",
					"description": "ios_bundle_id parameter",
				},
				"media_effect_ids": map[string]any{
					"type":        "array",
					"description": "media_effect_ids parameter",
					"items":       map[string]any{"type": "integer"},
				},
				"media_effect_source_object_id": map[string]any{
					"type":        "integer",
					"description": "media_effect_source_object_id parameter",
				},
				"msqrd_mask_id": map[string]any{
					"type":        "string",
					"description": "msqrd_mask_id parameter",
				},
				"photo": map[string]any{
					"type":        "string",
					"description": "photo parameter",
				},
				"picture": map[string]any{
					"type":        "string",
					"description": "picture parameter",
				},
				"profile_pic_method": map[string]any{
					"type":        "string",
					"description": "profile_pic_method parameter",
				},
				"profile_pic_source": map[string]any{
					"type":        "string",
					"description": "profile_pic_source parameter",
				},
				"proxied_app_id": map[string]any{
					"type":        "integer",
					"description": "proxied_app_id parameter",
				},
				"qn": map[string]any{
					"type":        "string",
					"description": "qn parameter",
				},
				"reuse": map[string]any{
					"type":        "boolean",
					"description": "reuse parameter",
				},
				"scaled_crop_rect": map[string]any{
					"type":        "object",
					"description": "scaled_crop_rect parameter",
				},
				"set_profile_photo_shield": map[string]any{
					"type":        "string",
					"description": "set_profile_photo_shield parameter",
				},
				"sticker_id": map[string]any{
					"type":        "integer",
					"description": "sticker_id parameter",
				},
				"sticker_source_object_id": map[string]any{
					"type":        "integer",
					"description": "sticker_source_object_id parameter",
				},
				"suppress_stories": map[string]any{
					"type":        "boolean",
					"description": "suppress_stories parameter",
				},
				"width": map[string]any{
					"type":        "integer",
					"description": "width parameter",
				},
				"x": map[string]any{
					"type":        "integer",
					"description": "x parameter",
				},
				"y": map[string]any{
					"type":        "integer",
					"description": "y parameter",
				},
			}),
			mcp.Description("Parameters object containing: android_key_hash (string), burn_media_effect (boolean), caption (string), composer_session_id (string), frame_entrypoint (string), has_umg (boolean), height (integer), ios_bundle_id (string), media_effect_ids (array<integer>), media_effect_source_object_id (integer), msqrd_mask_id (string), photo (string), picture (string), profile_pic_method (string), profile_pic_source (string), proxied_app_id (integer), qn (string), reuse (boolean), scaled_crop_rect (object), set_profile_photo_shield (string), sticker_id (integer), sticker_source_object_id (integer), suppress_stories (boolean), width (integer), x (integer), y (integer)"),
		),
	)
}

// HandlePage_post_picture handles the page_post_picture tool with context-based auth
func HandlePage_post_picture(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Page_post_picture(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute page_post_picture: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Page_post_picture performs POST picture for Page
func Page_post_picture(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "/picture"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
