// Code generated by Facebook Business API codegen. DO NOT EDIT.

package page

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolPage_get_events returns the MCP tool definition for page_get_events
func ToolPage_get_events() mcp.Tool {
	// Available fields for Event: attending_count, can_guests_invite, category, cover, created_time, declined_count, description, discount_code_enabled, end_time, event_times, guest_list_enabled, id, interested_count, is_canceled, is_draft, is_online, is_page_owned, maybe_count, name, noreply_count, online_event_format, online_event_third_party_url, owner, parent_group, place, registration_setting, scheduled_publish_time, start_time, sub_categories, ticket_selling_status, ticket_setting, ticket_uri, ticket_uri_start_sales_time, ticketing_privacy_uri, ticketing_terms_uri, timezone, type, updated_time
	// Params object accepts: event_state_filter (list<pageevents_event_state_filter_enum_param>), include_canceled (bool), time_filter (pageevents_time_filter_enum_param), type (pageevents_type_enum_param)
	return mcp.NewTool("page_get_events",
		mcp.WithDescription("GET events for Page"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"event_state_filter": map[string]any{
					"type":        "array",
					"description": "event_state_filter parameter",
					"enum":        []string{"canceled", "draft", "published", "scheduled_draft_for_publication"},
					"items":       map[string]any{"type": "string"},
				},
				"include_canceled": map[string]any{
					"type":        "boolean",
					"description": "include_canceled parameter",
				},
				"time_filter": map[string]any{
					"type":        "string",
					"description": "time_filter parameter",
					"enum":        []string{"past", "upcoming"},
				},
				"type": map[string]any{
					"type":        "string",
					"description": "type parameter",
					"enum":        []string{"attending", "created", "declined", "maybe", "not_replied"},
				},
			}),
			mcp.Description("Parameters object containing: event_state_filter (array<enum>) [canceled, draft, published, scheduled_draft_for_publication], include_canceled (boolean), time_filter (enum) [past, upcoming], type (enum) [attending, created, declined, maybe, not_replied]"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for Event objects. Available fields: attending_count, can_guests_invite, category, cover, created_time, declined_count, description, discount_code_enabled, end_time, event_times, guest_list_enabled, id, interested_count, is_canceled, is_draft (and 23 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandlePage_get_events handles the page_get_events tool with context-based auth
func HandlePage_get_events(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Optional: fields
	utils.ParseFieldsArray(request, args)

	// Optional: limit
	utils.ParseOptionalInt(request, "limit", args)

	// Optional: after
	utils.ParseOptionalString(request, "after", args)

	// Optional: before
	utils.ParseOptionalString(request, "before", args)

	// Call the API method
	result, err := Page_get_events(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute page_get_events: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Page_get_events performs GET events for Page
func Page_get_events(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "/events"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("GET", baseURL, urlParams)
}
