// Code generated by Facebook Business API codegen. DO NOT EDIT.

package page

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/shared"
)

// ToolPage_post_locations returns the MCP tool definition for page_post_locations
func ToolPage_post_locations() mcp.Tool {

	// Params object accepts: always_open (bool), delivery_and_pickup_option_info (list<string>), differently_open_offerings (map), hours (map), ignore_warnings (bool), location (Object), location_page_id (string), old_store_number (unsigned int), page_username (string), permanently_closed (bool), phone (string), pickup_options (list<pagelocations_pickup_options_enum_param>), place_topics (list<string>), price_range (string), store_code (string), store_location_descriptor (string), store_name (string), store_number (unsigned int), temporary_status (pagelocations_temporary_status_enum_param), website (string)
	return mcp.NewTool("page_post_locations",
		mcp.WithDescription("POST locations for Page"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"always_open": map[string]any{
					"type":        "boolean",
					"description": "always_open parameter",
				},
				"delivery_and_pickup_option_info": map[string]any{
					"type":        "array",
					"description": "delivery_and_pickup_option_info parameter",
					"items":       map[string]any{"type": "string"},
				},
				"differently_open_offerings": map[string]any{
					"type":        "object",
					"description": "differently_open_offerings parameter",
				},
				"hours": map[string]any{
					"type":        "object",
					"description": "hours parameter",
				},
				"ignore_warnings": map[string]any{
					"type":        "boolean",
					"description": "ignore_warnings parameter",
				},
				"location": map[string]any{
					"type":        "object",
					"description": "location parameter",
				},
				"location_page_id": map[string]any{
					"type":        "string",
					"description": "location_page_id parameter",
				},
				"old_store_number": map[string]any{
					"type":        "integer",
					"description": "old_store_number parameter",
				},
				"page_username": map[string]any{
					"type":        "string",
					"description": "page_username parameter",
				},
				"permanently_closed": map[string]any{
					"type":        "boolean",
					"description": "permanently_closed parameter",
				},
				"phone": map[string]any{
					"type":        "string",
					"description": "phone parameter",
				},
				"pickup_options": map[string]any{
					"type":        "array",
					"description": "pickup_options parameter",
					"enum":        []string{"CURBSIDE", "IN_STORE", "OTHER"},
					"items":       map[string]any{"type": "string"},
				},
				"place_topics": map[string]any{
					"type":        "array",
					"description": "place_topics parameter",
					"items":       map[string]any{"type": "string"},
				},
				"price_range": map[string]any{
					"type":        "string",
					"description": "price_range parameter",
				},
				"store_code": map[string]any{
					"type":        "string",
					"description": "store_code parameter",
				},
				"store_location_descriptor": map[string]any{
					"type":        "string",
					"description": "store_location_descriptor parameter",
				},
				"store_name": map[string]any{
					"type":        "string",
					"description": "store_name parameter",
				},
				"store_number": map[string]any{
					"type":        "integer",
					"description": "store_number parameter",
					"required":    true,
				},
				"temporary_status": map[string]any{
					"type":        "string",
					"description": "temporary_status parameter",
					"enum":        []string{"DIFFERENTLY_OPEN", "NO_DATA", "OPERATING_AS_USUAL", "TEMPORARILY_CLOSED"},
				},
				"website": map[string]any{
					"type":        "string",
					"description": "website parameter",
				},
			}),
			mcp.Description("Parameters object containing: always_open (boolean), delivery_and_pickup_option_info (array<string>), differently_open_offerings (object), hours (object), ignore_warnings (boolean), location (object), location_page_id (string), old_store_number (integer), page_username (string), permanently_closed (boolean), phone (string), pickup_options (array<enum>) [CURBSIDE, IN_STORE, OTHER], place_topics (array<string>), price_range (string), store_code (string), store_location_descriptor (string), store_name (string), store_number (integer) [required], temporary_status (enum) [DIFFERENTLY_OPEN, NO_DATA, OPERATING_AS_USUAL, TEMPORARILY_CLOSED], website (string)"),
		),
	)
}

// HandlePage_post_locations handles the page_post_locations tool with context-based auth
func HandlePage_post_locations(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the API method
	result, err := Page_post_locations(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute page_post_locations: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Page_post_locations performs POST locations for Page
func Page_post_locations(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/locations")

	urlParams := url.Values{}
	urlParams.Set("access_token", accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("params", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
