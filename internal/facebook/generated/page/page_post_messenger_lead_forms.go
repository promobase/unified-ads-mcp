// Code generated by Facebook Business API codegen. DO NOT EDIT.

package page

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolPage_post_messenger_lead_forms returns the MCP tool definition for page_post_messenger_lead_forms
func ToolPage_post_messenger_lead_forms() mcp.Tool {

	// Params object accepts: account_id (unsigned int), block_send_api (bool), exit_keyphrases (string), handover_app_id (unsigned int), handover_summary (bool), privacy_url (string), reminder_text (string), step_list (list<map>), stop_question_message (string), template_name (string), tracking_parameters (map)
	return mcp.NewTool("page_post_messenger_lead_forms",
		mcp.WithDescription("POST messenger_lead_forms for Page"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"account_id": map[string]any{
					"type":        "integer",
					"description": "account_id parameter",
				},
				"block_send_api": map[string]any{
					"type":        "boolean",
					"description": "block_send_api parameter",
				},
				"exit_keyphrases": map[string]any{
					"type":        "string",
					"description": "exit_keyphrases parameter",
				},
				"handover_app_id": map[string]any{
					"type":        "integer",
					"description": "handover_app_id parameter",
				},
				"handover_summary": map[string]any{
					"type":        "boolean",
					"description": "handover_summary parameter",
				},
				"privacy_url": map[string]any{
					"type":        "string",
					"description": "privacy_url parameter",
				},
				"reminder_text": map[string]any{
					"type":        "string",
					"description": "reminder_text parameter",
				},
				"step_list": map[string]any{
					"type":        "array",
					"description": "step_list parameter",
					"required":    true,
					"items":       map[string]any{"type": "object"},
				},
				"stop_question_message": map[string]any{
					"type":        "string",
					"description": "stop_question_message parameter",
				},
				"template_name": map[string]any{
					"type":        "string",
					"description": "template_name parameter",
				},
				"tracking_parameters": map[string]any{
					"type":        "object",
					"description": "tracking_parameters parameter",
				},
			}),
			mcp.Description("Parameters object containing: account_id (integer), block_send_api (boolean), exit_keyphrases (string), handover_app_id (integer), handover_summary (boolean), privacy_url (string), reminder_text (string), step_list (array<object>) [required], stop_question_message (string), template_name (string), tracking_parameters (object)"),
		),
	)
}

// HandlePage_post_messenger_lead_forms handles the page_post_messenger_lead_forms tool with context-based auth
func HandlePage_post_messenger_lead_forms(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	// Parse required params object and expand into args
	val, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(val), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the API method
	result, err := Page_post_messenger_lead_forms(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute page_post_messenger_lead_forms: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Page_post_messenger_lead_forms performs POST messenger_lead_forms for Page
func Page_post_messenger_lead_forms(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "/messenger_lead_forms"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
