// Code generated by Facebook Business API codegen. DO NOT EDIT.

package page

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolPage_get_tabs returns the MCP tool definition for page_get_tabs
func ToolPage_get_tabs() mcp.Tool {
	// Available fields for Tab: application, custom_image_url, custom_name, id, image_url, is_non_connection_landing_tab, is_permanent, link, name, position
	// Params object accepts: tab (list<string>)
	return mcp.NewTool("page_get_tabs",
		mcp.WithDescription("GET tabs for Page"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"tab": map[string]any{
					"type":        "array",
					"description": "tab parameter",
					"items":       map[string]any{"type": "string"},
				},
			}),
			mcp.Description("Parameters object containing: tab (array<string>)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for Tab objects. Available fields: application, custom_image_url, custom_name, id, image_url, is_non_connection_landing_tab, is_permanent, link, name, position"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandlePage_get_tabs handles the page_get_tabs tool with context-based auth
func HandlePage_get_tabs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Optional: fields
	utils.ParseFieldsArray(request, args)

	// Optional: limit
	utils.ParseOptionalInt(request, "limit", args)

	// Optional: after
	utils.ParseOptionalString(request, "after", args)

	// Optional: before
	utils.ParseOptionalString(request, "before", args)

	// Call the API method
	result, err := Page_get_tabs(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute page_get_tabs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Page_get_tabs performs GET tabs for Page
func Page_get_tabs(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "tabs"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("GET", baseURL, urlParams)
}
