// Code generated by Facebook Business API codegen. DO NOT EDIT.

package page

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolPage_post_leadgen_forms returns the MCP tool definition for page_post_leadgen_forms
func ToolPage_post_leadgen_forms() mcp.Tool {

	// Params object accepts: allow_organic_lead_retrieval (bool), block_display_for_non_targeted_viewer (bool), context_card (Object), cover_photo (file), custom_disclaimer (Object), follow_up_action_url (string), is_for_canvas (bool), is_optimized_for_quality (bool), locale (pageleadgen_forms_locale_enum_param), name (string), privacy_policy (Object), question_page_custom_headline (string), questions (list<Object>), thank_you_page (Object), tracking_parameters (map), upload_gated_file (file)
	return mcp.NewTool("page_post_leadgen_forms",
		mcp.WithDescription("POST leadgen_forms for Page"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"allow_organic_lead_retrieval": map[string]any{
					"type":        "boolean",
					"description": "allow_organic_lead_retrieval parameter",
				},
				"block_display_for_non_targeted_viewer": map[string]any{
					"type":        "boolean",
					"description": "block_display_for_non_targeted_viewer parameter",
				},
				"context_card": map[string]any{
					"type":        "object",
					"description": "context_card parameter",
				},
				"cover_photo": map[string]any{
					"type":        "string",
					"description": "cover_photo parameter",
				},
				"custom_disclaimer": map[string]any{
					"type":        "object",
					"description": "custom_disclaimer parameter",
				},
				"follow_up_action_url": map[string]any{
					"type":        "string",
					"description": "follow_up_action_url parameter",
				},
				"is_for_canvas": map[string]any{
					"type":        "boolean",
					"description": "is_for_canvas parameter",
				},
				"is_optimized_for_quality": map[string]any{
					"type":        "boolean",
					"description": "is_optimized_for_quality parameter",
				},
				"locale": map[string]any{
					"type":        "string",
					"description": "locale parameter",
					"enum":        []string{"AR_AR", "CS_CZ", "DA_DK", "DE_DE", "EL_GR", "EN_GB", "EN_US", "ES_ES", "ES_LA", "FI_FI", "FR_FR", "HE_IL", "HI_IN", "HU_HU", "ID_ID", "IT_IT", "JA_JP", "KO_KR", "NB_NO", "NL_NL", "PL_PL", "PT_BR", "PT_PT", "RO_RO", "RU_RU", "SV_SE", "TH_TH", "TR_TR", "VI_VN", "ZH_CN", "ZH_HK", "ZH_TW"},
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
					"required":    true,
				},
				"privacy_policy": map[string]any{
					"type":        "object",
					"description": "privacy_policy parameter",
				},
				"question_page_custom_headline": map[string]any{
					"type":        "string",
					"description": "question_page_custom_headline parameter",
				},
				"questions": map[string]any{
					"type":        "array",
					"description": "questions parameter",
					"required":    true,
					"items":       map[string]any{"type": "object"},
				},
				"thank_you_page": map[string]any{
					"type":        "object",
					"description": "thank_you_page parameter",
				},
				"tracking_parameters": map[string]any{
					"type":        "object",
					"description": "tracking_parameters parameter",
				},
				"upload_gated_file": map[string]any{
					"type":        "string",
					"description": "upload_gated_file parameter",
				},
			}),
			mcp.Description("Parameters object containing: allow_organic_lead_retrieval (boolean), block_display_for_non_targeted_viewer (boolean), context_card (object), cover_photo (file), custom_disclaimer (object), follow_up_action_url (string), is_for_canvas (boolean), is_optimized_for_quality (boolean), locale (enum) [AR_AR, CS_CZ, DA_DK, DE_DE, EL_GR, ...], name (string) [required], privacy_policy (object), question_page_custom_headline (string), questions (array<object>) [required], thank_you_page (object), tracking_parameters (object), upload_gated_file (file)"),
		),
	)
}

// HandlePage_post_leadgen_forms handles the page_post_leadgen_forms tool with context-based auth
func HandlePage_post_leadgen_forms(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	// Parse required params object and expand into args
	val, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(val), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the API method
	result, err := Page_post_leadgen_forms(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute page_post_leadgen_forms: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Page_post_leadgen_forms performs POST leadgen_forms for Page
func Page_post_leadgen_forms(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "/leadgen_forms"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
