// Code generated by Facebook Business API codegen. DO NOT EDIT.

package page

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolPage_post_nlp_configs returns the MCP tool definition for page_post_nlp_configs
func ToolPage_post_nlp_configs() mcp.Tool {

	// Params object accepts: api_version (Object), custom_token (string), model (pagenlp_configs_model_enum_param), n_best (unsigned int), nlp_enabled (bool), other_language_support (map), verbose (bool)
	return mcp.NewTool("page_post_nlp_configs",
		mcp.WithDescription("POST nlp_configs for Page"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"api_version": map[string]any{
					"type":        "object",
					"description": "api_version parameter",
				},
				"custom_token": map[string]any{
					"type":        "string",
					"description": "custom_token parameter",
				},
				"model": map[string]any{
					"type":        "string",
					"description": "model parameter",
					"enum":        []string{"ARABIC", "CHINESE", "CROATIAN", "CUSTOM", "DANISH", "DUTCH", "ENGLISH", "FRENCH_STANDARD", "GEORGIAN", "GERMAN_STANDARD", "GREEK", "HEBREW", "HUNGARIAN", "IRISH", "ITALIAN_STANDARD", "KOREAN", "NORWEGIAN_BOKMAL", "POLISH", "PORTUGUESE", "ROMANIAN", "SPANISH", "SWEDISH", "VIETNAMESE"},
				},
				"n_best": map[string]any{
					"type":        "integer",
					"description": "n_best parameter",
				},
				"nlp_enabled": map[string]any{
					"type":        "boolean",
					"description": "nlp_enabled parameter",
				},
				"other_language_support": map[string]any{
					"type":        "object",
					"description": "other_language_support parameter",
				},
				"verbose": map[string]any{
					"type":        "boolean",
					"description": "verbose parameter",
				},
			}),
			mcp.Description("Parameters object containing: api_version (object), custom_token (string), model (enum) [ARABIC, CHINESE, CROATIAN, CUSTOM, DANISH, ...], n_best (integer), nlp_enabled (boolean), other_language_support (object), verbose (boolean)"),
		),
	)
}

// HandlePage_post_nlp_configs handles the page_post_nlp_configs tool with context-based auth
func HandlePage_post_nlp_configs(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Page_post_nlp_configs(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute page_post_nlp_configs: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Page_post_nlp_configs performs POST nlp_configs for Page
func Page_post_nlp_configs(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "/nlp_configs"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
