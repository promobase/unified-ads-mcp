// Code generated by Facebook Business API codegen. DO NOT EDIT.

package page

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/shared"
)

// ToolPage_post_videos returns the MCP tool definition for page_post_videos
func ToolPage_post_videos() mcp.Tool {
	
	// Params object accepts: ad_breaks (list), application_id (string), asked_fun_fact_prompt_id (unsigned int), audio_story_wave_animation_handle (string), backdated_post (list), call_to_action (Object), composer_entry_picker (string), composer_entry_point (string), composer_entry_time (unsigned int), composer_session_events_log (string), composer_session_id (string), composer_source_surface (string), composer_type (string), container_type (pagevideos_container_type_enum_param), content_category (pagevideos_content_category_enum_param), content_tags (list<string>), creative_tools (string), crossposted_video_id (string), custom_labels (list<string>), description (string), direct_share_status (unsigned int), embeddable (bool), end_offset (unsigned int), expiration (Object), fbuploader_video_file_chunk (string), feed_targeting (Object), file_size (unsigned int), file_url (string), fisheye_video_cropped (bool), formatting (pagevideos_formatting_enum_param), fov (unsigned int), front_z_rotation (float), fun_fact_prompt_id (string), fun_fact_toastee_id (unsigned int), guide (list<list<unsigned int>>), guide_enabled (bool), initial_heading (unsigned int), initial_pitch (unsigned int), instant_game_entry_point_data (string), is_boost_intended (bool), is_explicit_share (bool), is_group_linking_post (bool), is_partnership_ad (bool), is_voice_clip (bool), location_source_id (string), manual_privacy (bool), multilingual_data (list<Object>), no_story (bool), og_action_type_id (string), og_icon_id (string), og_object_id (string), og_phrase (string), og_suggestion_mechanism (string), original_fov (unsigned int), original_projection_type (pagevideos_original_projection_type_enum_param), partnership_ad_ad_code (string), publish_event_id (unsigned int), published (bool), reference_only (bool), referenced_sticker_id (string), replace_video_id (string), scheduled_publish_time (unsigned int), secret (bool), slideshow_spec (map), social_actions (bool), source (string), source_instagram_media_id (string), specified_dialect (string), spherical (bool), sponsor_id (string), sponsor_relationship (unsigned int), start_offset (unsigned int), swap_mode (pagevideos_swap_mode_enum_param), targeting (Object), text_format_metadata (string), thumb (file), time_since_original_post (unsigned int), title (string), transcode_setting_properties (string), universal_video_id (string), unpublished_content_type (pagevideos_unpublished_content_type_enum_param), upload_phase (pagevideos_upload_phase_enum_param), upload_session_id (string), upload_setting_properties (string), video_asset_id (string), video_file_chunk (string), video_id_original (string), video_start_time_ms (unsigned int), waterfall_id (string)
	return mcp.NewTool("page_post_videos",
		mcp.WithDescription("POST videos for Page"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"ad_breaks": map[string]any{
					"type": "string",
					"description": "ad_breaks parameter",
				},
				"application_id": map[string]any{
					"type": "string",
					"description": "application_id parameter",
				},
				"asked_fun_fact_prompt_id": map[string]any{
					"type": "integer",
					"description": "asked_fun_fact_prompt_id parameter",
				},
				"audio_story_wave_animation_handle": map[string]any{
					"type": "string",
					"description": "audio_story_wave_animation_handle parameter",
				},
				"backdated_post": map[string]any{
					"type": "string",
					"description": "backdated_post parameter",
				},
				"call_to_action": map[string]any{
					"type": "object",
					"description": "call_to_action parameter",
				},
				"composer_entry_picker": map[string]any{
					"type": "string",
					"description": "composer_entry_picker parameter",
				},
				"composer_entry_point": map[string]any{
					"type": "string",
					"description": "composer_entry_point parameter",
				},
				"composer_entry_time": map[string]any{
					"type": "integer",
					"description": "composer_entry_time parameter",
				},
				"composer_session_events_log": map[string]any{
					"type": "string",
					"description": "composer_session_events_log parameter",
				},
				"composer_session_id": map[string]any{
					"type": "string",
					"description": "composer_session_id parameter",
				},
				"composer_source_surface": map[string]any{
					"type": "string",
					"description": "composer_source_surface parameter",
				},
				"composer_type": map[string]any{
					"type": "string",
					"description": "composer_type parameter",
				},
				"container_type": map[string]any{
					"type": "string",
					"description": "container_type parameter",
					"enum": []string{ "ACO_VIDEO_VARIATION", "ADS_AI_GENERATED", "AD_BREAK_PREVIEW", "AD_DERIVATIVE", "AD_LIBRARY_WATERMARK", "ALBUM_MULTIMEDIA_POST", "ALOHA_SUPERFRAME", "APP_REREVIEW_SCREENCAST", "APP_REVIEW_SCREENCAST", "ASSET_MANAGER", "ATLAS_VIDEO", "AUDIO_BROADCAST", "AUDIO_COMMENT", "BROADCAST", "CANVAS", "CMS_MEDIA_MANAGER", "CONTAINED_POST_ATTACHMENT", "CONTAINED_POST_AUDIO_BROADCAST", "CONTAINED_POST_COPYRIGHT_REFERENCE_BROADCAST", "COPYRIGHT_REFERENCE_BROADCAST", "COPYRIGHT_REFERENCE_IG_XPOST_VIDEO", "COPYRIGHT_REFERENCE_VIDEO", "CREATION_ML_PRECREATION", "CREATOR_FAN_CHALLENGE", "CREATOR_STOREFRONT_PERSONALIZED_VIDEO", "DATAGENIX_VIDEO", "DCO_AD_ASSET_FEED", "DCO_AUTOGEN_VIDEO", "DCO_TRIMMED_VIDEO", "DIM_SUM", "DIRECTED_POST_ATTACHMENT", "DIRECT_INBOX", "DROPS_SHOPPING_EVENT_PAGE", "DYNAMIC_ITEM_VIDEO", "DYNAMIC_TEMPLATE_VIDEO", "EVENT_COVER_VIDEO", "EVENT_TOUR", "FACECAST_DVR", "FB_AVATAR_ANIMATED_SATP", "FB_COLLECTIBLE_VIDEO", "FB_SHORTS", "FB_SHORTS_CONTENT_REMIXABLE", "FB_SHORTS_GROUP_POST", "FB_SHORTS_LINKED_PRODUCT", "FB_SHORTS_PMV_POST", "FB_SHORTS_POST", "FB_SHORTS_REMIX_POST", "FUNDRAISER_COVER_VIDEO", "GAME_CLIP", "GIF_TO_VIDEO", "GOODWILL_ANNIVERSARY_DEPRECATED", "GOODWILL_ANNIVERSARY_PROMOTION_DEPRECATED", "GOODWILL_VIDEO_CONTAINED_SHARE", "GOODWILL_VIDEO_PROMOTION", "GOODWILL_VIDEO_SHARE", "GOODWILL_VIDEO_TOKEN_REQUIRED", "GROUP_POST", "HEURISTIC_CLUSTER_VIDEO", "HIGHLIGHT_CLIP_VIDEO", "HORIZON_WORLDS_TV", "HUDDLE_BROADCAST", "IG_REELS_XPV", "IG_STORIES_READER", "INJECTABLE", "INSPIRATION_VIDEO", "INSTAGRAM_VIDEO_COPY", "INSTANT_APPLICATION_PREVIEW", "INSTANT_ARTICLE", "ISSUE_MODULE", "LEARN", "LEGACY", "LEGACY_CONTAINED_POST_BROADCAST", "LIVE_AUDIO_ROOM_BROADCAST", "LIVE_CLIP_PREVIEW", "LIVE_CLIP_WORKCHAT", "LIVE_CREATIVE_KIT_VIDEO", "LIVE_PHOTO", "LOOK_NOW_DEPRECATED", "MARKETPLACE_LISTING_VIDEO", "MARKETPLACE_PRE_RECORDED_VIDEO", "MOMENTS_VIDEO", "MUSIC_CLIP", "MUSIC_CLIP_IN_COMMENT", "MUSIC_CLIP_IN_LIGHTWEIGHT_STATUS", "MUSIC_CLIP_IN_MSGR_NOTE", "MUSIC_CLIP_IN_POLL_OPTION", "MUSIC_CLIP_ON_DATING_PROFILE", "NEO_ASYNC_GAME_VIDEO", "NEW_CONTAINED_POST_BROADCAST", "NO_STORY", "OCULUS_CREATOR_PORTAL", "OCULUS_VENUES_BROADCAST", "ORIGINALITY_SELF_ADVOCACY", "PAGES_COVER_VIDEO", "PAGE_REVIEW_SCREENCAST", "PAGE_SLIDESHOW_VIDEO", "PAID_CONTENT_PREVIEW", "PAID_CONTENT_VIDEO", "PAID_CONTENT_VIDEO__POST", "PIXELCLOUD", "PODCAST_HIGHLIGHT", "PODCAST_ML_PREVIEW", "PODCAST_ML_PREVIEW_NO_NEWSFEED_STORY", "PODCAST_RSS", "PODCAST_RSS_EPHEMERAL", "PODCAST_RSS_NO_NEWSFEED_STORY", "PODCAST_VOICES", "PODCAST_VOICES_NO_NEWSFEED_STORY", "PREMIERE_SOURCE", "PREMIUM_MUSIC_VIDEO_CLIP", "PREMIUM_MUSIC_VIDEO_CROPPED_CLIP", "PREMIUM_MUSIC_VIDEO_NO_NEWSFEED_STORY", "PREMIUM_MUSIC_VIDEO_WITH_NEWSFEED_STORY", "PRIVATE_GALLERY_VIDEO", "PRODUCT_VIDEO", "PROFILE_COVER_VIDEO", "PROFILE_INTRO_CARD", "PROFILE_VIDEO", "PROTON", "QUICK_CLIP_WORKPLACE_POST", "QUICK_PROMOTION", "REPLACE_VIDEO", "SALES_CLIENT_INTERACTION", "SHOWREEL_NATIVE_DUMMY_VIDEO", "SLIDESHOW_ANIMOTO", "SLIDESHOW_SHAKR", "SLIDESHOW_VARIATION_VIDEO", "SOUND_PLATFORM_STREAM", "SRT_ATTACHMENT", "STORIES_VIDEO", "STORYLINE", "STORYLINE_WITH_EXTERNAL_MUSIC", "STORY_ARCHIVE_VIDEO", "STORY_CARD_TEMPLATE", "STREAM_HIGHLIGHTS_VIDEO", "TAROT_DIGEST", "TEMPORARY_UNLISTED", "TEMP_VIDEO_COPYRIGHT_SCAN", "UNLISTED", "UNLISTED_OCULUS", "VIDEO_COMMENT", "VIDEO_COMPOSITION_VARIATION", "VIDEO_CREATIVE_EDITOR_AUTOGEN_AD_VIDEO", "VIDEO_SUPERRES", "VOICES_ARTICLE_VIDEO", "VU_GENERATED_VIDEO", "WOODHENGE", "WORK_KNOWLEDGE_VIDEO", "YOUR_DAY" },
				},
				"content_category": map[string]any{
					"type": "string",
					"description": "content_category parameter",
					"enum": []string{ "BEAUTY_FASHION", "BUSINESS", "CARS_TRUCKS", "COMEDY", "CUTE_ANIMALS", "ENTERTAINMENT", "FAMILY", "FOOD_HEALTH", "HOME", "LIFESTYLE", "MUSIC", "NEWS", "OTHER", "POLITICS", "SCIENCE", "SPORTS", "TECHNOLOGY", "VIDEO_GAMING" },
				},
				"content_tags": map[string]any{
					"type": "array",
					"description": "content_tags parameter",
					"items": map[string]any{"type": "string"},
				},
				"creative_tools": map[string]any{
					"type": "string",
					"description": "creative_tools parameter",
				},
				"crossposted_video_id": map[string]any{
					"type": "string",
					"description": "crossposted_video_id parameter",
				},
				"custom_labels": map[string]any{
					"type": "array",
					"description": "custom_labels parameter",
					"items": map[string]any{"type": "string"},
				},
				"description": map[string]any{
					"type": "string",
					"description": "description parameter",
				},
				"direct_share_status": map[string]any{
					"type": "integer",
					"description": "direct_share_status parameter",
				},
				"embeddable": map[string]any{
					"type": "boolean",
					"description": "embeddable parameter",
				},
				"end_offset": map[string]any{
					"type": "integer",
					"description": "end_offset parameter",
				},
				"expiration": map[string]any{
					"type": "object",
					"description": "expiration parameter",
				},
				"fbuploader_video_file_chunk": map[string]any{
					"type": "string",
					"description": "fbuploader_video_file_chunk parameter",
				},
				"feed_targeting": map[string]any{
					"type": "object",
					"description": "feed_targeting parameter",
				},
				"file_size": map[string]any{
					"type": "integer",
					"description": "file_size parameter",
				},
				"file_url": map[string]any{
					"type": "string",
					"description": "file_url parameter",
				},
				"fisheye_video_cropped": map[string]any{
					"type": "boolean",
					"description": "fisheye_video_cropped parameter",
				},
				"formatting": map[string]any{
					"type": "string",
					"description": "formatting parameter",
					"enum": []string{ "MARKDOWN", "PLAINTEXT" },
				},
				"fov": map[string]any{
					"type": "integer",
					"description": "fov parameter",
				},
				"front_z_rotation": map[string]any{
					"type": "number",
					"description": "front_z_rotation parameter",
				},
				"fun_fact_prompt_id": map[string]any{
					"type": "string",
					"description": "fun_fact_prompt_id parameter",
				},
				"fun_fact_toastee_id": map[string]any{
					"type": "integer",
					"description": "fun_fact_toastee_id parameter",
				},
				"guide": map[string]any{
					"type": "array",
					"description": "guide parameter",
					"items": map[string]any{"type": "array"},
				},
				"guide_enabled": map[string]any{
					"type": "boolean",
					"description": "guide_enabled parameter",
				},
				"initial_heading": map[string]any{
					"type": "integer",
					"description": "initial_heading parameter",
				},
				"initial_pitch": map[string]any{
					"type": "integer",
					"description": "initial_pitch parameter",
				},
				"instant_game_entry_point_data": map[string]any{
					"type": "string",
					"description": "instant_game_entry_point_data parameter",
				},
				"is_boost_intended": map[string]any{
					"type": "boolean",
					"description": "is_boost_intended parameter",
				},
				"is_explicit_share": map[string]any{
					"type": "boolean",
					"description": "is_explicit_share parameter",
				},
				"is_group_linking_post": map[string]any{
					"type": "boolean",
					"description": "is_group_linking_post parameter",
				},
				"is_partnership_ad": map[string]any{
					"type": "boolean",
					"description": "is_partnership_ad parameter",
				},
				"is_voice_clip": map[string]any{
					"type": "boolean",
					"description": "is_voice_clip parameter",
				},
				"location_source_id": map[string]any{
					"type": "string",
					"description": "location_source_id parameter",
				},
				"manual_privacy": map[string]any{
					"type": "boolean",
					"description": "manual_privacy parameter",
				},
				"multilingual_data": map[string]any{
					"type": "array",
					"description": "multilingual_data parameter",
					"items": map[string]any{"type": "object"},
				},
				"no_story": map[string]any{
					"type": "boolean",
					"description": "no_story parameter",
				},
				"og_action_type_id": map[string]any{
					"type": "string",
					"description": "og_action_type_id parameter",
				},
				"og_icon_id": map[string]any{
					"type": "string",
					"description": "og_icon_id parameter",
				},
				"og_object_id": map[string]any{
					"type": "string",
					"description": "og_object_id parameter",
				},
				"og_phrase": map[string]any{
					"type": "string",
					"description": "og_phrase parameter",
				},
				"og_suggestion_mechanism": map[string]any{
					"type": "string",
					"description": "og_suggestion_mechanism parameter",
				},
				"original_fov": map[string]any{
					"type": "integer",
					"description": "original_fov parameter",
				},
				"original_projection_type": map[string]any{
					"type": "string",
					"description": "original_projection_type parameter",
					"enum": []string{ "cubemap", "equirectangular", "half_equirectangular" },
				},
				"partnership_ad_ad_code": map[string]any{
					"type": "string",
					"description": "partnership_ad_ad_code parameter",
				},
				"publish_event_id": map[string]any{
					"type": "integer",
					"description": "publish_event_id parameter",
				},
				"published": map[string]any{
					"type": "boolean",
					"description": "published parameter",
				},
				"reference_only": map[string]any{
					"type": "boolean",
					"description": "reference_only parameter",
				},
				"referenced_sticker_id": map[string]any{
					"type": "string",
					"description": "referenced_sticker_id parameter",
				},
				"replace_video_id": map[string]any{
					"type": "string",
					"description": "replace_video_id parameter",
				},
				"scheduled_publish_time": map[string]any{
					"type": "integer",
					"description": "scheduled_publish_time parameter",
				},
				"secret": map[string]any{
					"type": "boolean",
					"description": "secret parameter",
				},
				"slideshow_spec": map[string]any{
					"type": "object",
					"description": "slideshow_spec parameter",
				},
				"social_actions": map[string]any{
					"type": "boolean",
					"description": "social_actions parameter",
				},
				"source": map[string]any{
					"type": "string",
					"description": "source parameter",
				},
				"source_instagram_media_id": map[string]any{
					"type": "string",
					"description": "source_instagram_media_id parameter",
				},
				"specified_dialect": map[string]any{
					"type": "string",
					"description": "specified_dialect parameter",
				},
				"spherical": map[string]any{
					"type": "boolean",
					"description": "spherical parameter",
				},
				"sponsor_id": map[string]any{
					"type": "string",
					"description": "sponsor_id parameter",
				},
				"sponsor_relationship": map[string]any{
					"type": "integer",
					"description": "sponsor_relationship parameter",
				},
				"start_offset": map[string]any{
					"type": "integer",
					"description": "start_offset parameter",
				},
				"swap_mode": map[string]any{
					"type": "string",
					"description": "swap_mode parameter",
					"enum": []string{ "replace" },
				},
				"targeting": map[string]any{
					"type": "object",
					"description": "targeting parameter",
				},
				"text_format_metadata": map[string]any{
					"type": "string",
					"description": "text_format_metadata parameter",
				},
				"thumb": map[string]any{
					"type": "string",
					"description": "thumb parameter",
				},
				"time_since_original_post": map[string]any{
					"type": "integer",
					"description": "time_since_original_post parameter",
				},
				"title": map[string]any{
					"type": "string",
					"description": "title parameter",
				},
				"transcode_setting_properties": map[string]any{
					"type": "string",
					"description": "transcode_setting_properties parameter",
				},
				"universal_video_id": map[string]any{
					"type": "string",
					"description": "universal_video_id parameter",
				},
				"unpublished_content_type": map[string]any{
					"type": "string",
					"description": "unpublished_content_type parameter",
					"enum": []string{ "ADS_POST", "DRAFT", "INLINE_CREATED", "PUBLISHED", "REVIEWABLE_BRANDED_CONTENT", "SCHEDULED", "SCHEDULED_RECURRING" },
				},
				"upload_phase": map[string]any{
					"type": "string",
					"description": "upload_phase parameter",
					"enum": []string{ "cancel", "finish", "start", "transfer" },
				},
				"upload_session_id": map[string]any{
					"type": "string",
					"description": "upload_session_id parameter",
				},
				"upload_setting_properties": map[string]any{
					"type": "string",
					"description": "upload_setting_properties parameter",
				},
				"video_asset_id": map[string]any{
					"type": "string",
					"description": "video_asset_id parameter",
				},
				"video_file_chunk": map[string]any{
					"type": "string",
					"description": "video_file_chunk parameter",
				},
				"video_id_original": map[string]any{
					"type": "string",
					"description": "video_id_original parameter",
				},
				"video_start_time_ms": map[string]any{
					"type": "integer",
					"description": "video_start_time_ms parameter",
				},
				"waterfall_id": map[string]any{
					"type": "string",
					"description": "waterfall_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: ad_breaks (list), application_id (string), asked_fun_fact_prompt_id (integer), audio_story_wave_animation_handle (string), backdated_post (list), call_to_action (object), composer_entry_picker (string), composer_entry_point (string), composer_entry_time (integer), composer_session_events_log (string), composer_session_id (string), composer_source_surface (string), composer_type (string), container_type (enum) [ACO_VIDEO_VARIATION, ADS_AI_GENERATED, AD_BREAK_PREVIEW, AD_DERIVATIVE, AD_LIBRARY_WATERMARK, ...], content_category (enum) [BEAUTY_FASHION, BUSINESS, CARS_TRUCKS, COMEDY, CUTE_ANIMALS, ...], content_tags (array<string>), creative_tools (string), crossposted_video_id (string), custom_labels (array<string>), description (string), direct_share_status (integer), embeddable (boolean), end_offset (integer), expiration (object), fbuploader_video_file_chunk (string), feed_targeting (object), file_size (integer), file_url (string), fisheye_video_cropped (boolean), formatting (enum) [MARKDOWN, PLAINTEXT], fov (integer), front_z_rotation (number), fun_fact_prompt_id (string), fun_fact_toastee_id (integer), guide (array<array<integer>>), guide_enabled (boolean), initial_heading (integer), initial_pitch (integer), instant_game_entry_point_data (string), is_boost_intended (boolean), is_explicit_share (boolean), is_group_linking_post (boolean), is_partnership_ad (boolean), is_voice_clip (boolean), location_source_id (string), manual_privacy (boolean), multilingual_data (array<object>), no_story (boolean), og_action_type_id (string), og_icon_id (string), og_object_id (string), og_phrase (string), og_suggestion_mechanism (string), original_fov (integer), original_projection_type (enum) [cubemap, equirectangular, half_equirectangular], partnership_ad_ad_code (string), publish_event_id (integer), published (boolean), reference_only (boolean), referenced_sticker_id (string), replace_video_id (string), scheduled_publish_time (integer), secret (boolean), slideshow_spec (object), social_actions (boolean), source (string), source_instagram_media_id (string), specified_dialect (string), spherical (boolean), sponsor_id (string), sponsor_relationship (integer), start_offset (integer), swap_mode (enum) [replace], targeting (object), text_format_metadata (string), thumb (file), time_since_original_post (integer), title (string), transcode_setting_properties (string), universal_video_id (string), unpublished_content_type (enum) [ADS_POST, DRAFT, INLINE_CREATED, PUBLISHED, REVIEWABLE_BRANDED_CONTENT, ...], upload_phase (enum) [cancel, finish, start, transfer], upload_session_id (string), upload_setting_properties (string), video_asset_id (string), video_file_chunk (string), video_id_original (string), video_start_time_ms (integer), waterfall_id (string)"),
		),
	)
}

// HandlePage_post_videos handles the page_post_videos tool with context-based auth
func HandlePage_post_videos(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}



	// Call the API method
	result, err := Page_post_videos(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute page_post_videos: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Page_post_videos performs POST videos for Page
func Page_post_videos(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/videos")
	
	urlParams := url.Values{}
	urlParams.Set("access_token", accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("params", fmt.Sprintf("%v", val))
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}