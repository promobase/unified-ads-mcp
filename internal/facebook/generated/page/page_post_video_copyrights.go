// Code generated by Facebook Business API codegen. DO NOT EDIT.

package page

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolPage_post_video_copyrights returns the MCP tool definition for page_post_video_copyrights
func ToolPage_post_video_copyrights() mcp.Tool {

	// Params object accepts: attribution_id (string), content_category (pagevideo_copyrights_content_category_enum_param), copyright_content_id (string), excluded_ownership_countries (list<string>), excluded_ownership_segments (list<Object>), is_reference_disabled (bool), is_reference_video (bool), monitoring_type (pagevideo_copyrights_monitoring_type_enum_param), ownership_countries (list<string>), rule_id (string), tags (list<string>), whitelisted_ids (list<string>), whitelisted_ig_user_ids (list<string>)
	return mcp.NewTool("page_post_video_copyrights",
		mcp.WithDescription("POST video_copyrights for Page"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"attribution_id": map[string]any{
					"type":        "string",
					"description": "attribution_id parameter",
				},
				"content_category": map[string]any{
					"type":        "string",
					"description": "content_category parameter",
					"enum":        []string{"episode", "movie", "web"},
				},
				"copyright_content_id": map[string]any{
					"type":        "string",
					"description": "copyright_content_id parameter",
					"required":    true,
				},
				"excluded_ownership_countries": map[string]any{
					"type":        "array",
					"description": "excluded_ownership_countries parameter",
					"items":       map[string]any{"type": "string"},
				},
				"excluded_ownership_segments": map[string]any{
					"type":        "array",
					"description": "excluded_ownership_segments parameter",
					"items":       map[string]any{"type": "object"},
				},
				"is_reference_disabled": map[string]any{
					"type":        "boolean",
					"description": "is_reference_disabled parameter",
				},
				"is_reference_video": map[string]any{
					"type":        "boolean",
					"description": "is_reference_video parameter",
				},
				"monitoring_type": map[string]any{
					"type":        "string",
					"description": "monitoring_type parameter",
					"enum":        []string{"AUDIO_ONLY", "VIDEO_AND_AUDIO", "VIDEO_ONLY"},
				},
				"ownership_countries": map[string]any{
					"type":        "array",
					"description": "ownership_countries parameter",
					"items":       map[string]any{"type": "string"},
				},
				"rule_id": map[string]any{
					"type":        "string",
					"description": "rule_id parameter",
				},
				"tags": map[string]any{
					"type":        "array",
					"description": "tags parameter",
					"items":       map[string]any{"type": "string"},
				},
				"whitelisted_ids": map[string]any{
					"type":        "array",
					"description": "whitelisted_ids parameter",
					"items":       map[string]any{"type": "string"},
				},
				"whitelisted_ig_user_ids": map[string]any{
					"type":        "array",
					"description": "whitelisted_ig_user_ids parameter",
					"items":       map[string]any{"type": "string"},
				},
			}),
			mcp.Description("Parameters object containing: attribution_id (string), content_category (enum) [episode, movie, web], copyright_content_id (string) [required], excluded_ownership_countries (array<string>), excluded_ownership_segments (array<object>), is_reference_disabled (boolean), is_reference_video (boolean), monitoring_type (enum) [AUDIO_ONLY, VIDEO_AND_AUDIO, VIDEO_ONLY], ownership_countries (array<string>), rule_id (string), tags (array<string>), whitelisted_ids (array<string>), whitelisted_ig_user_ids (array<string>)"),
		),
	)
}

// HandlePage_post_video_copyrights handles the page_post_video_copyrights tool with context-based auth
func HandlePage_post_video_copyrights(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	// Parse required params object and expand into args
	val, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(val), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the API method
	result, err := Page_post_video_copyrights(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute page_post_video_copyrights: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Page_post_video_copyrights performs POST video_copyrights for Page
func Page_post_video_copyrights(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "/video_copyrights"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
