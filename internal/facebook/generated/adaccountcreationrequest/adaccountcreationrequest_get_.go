// Code generated by Facebook Business API codegen. DO NOT EDIT.

package adaccountcreationrequest

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolAdaccountcreationrequest_get_ returns the MCP tool definition for adaccountcreationrequest_get_
func ToolAdaccountcreationrequest_get_() mcp.Tool {
	// Available fields for AdAccountCreationRequest: ad_accounts_currency, ad_accounts_info, additional_comment, address_in_chinese, address_in_english, address_in_local_language, advertiser_business, appeal_reason, business, business_registration_id, chinese_legal_entity_name, contact, creator, credit_card_id, disapproval_reasons, english_legal_entity_name, extended_credit_id, id, is_smb, is_test, legal_entity_name_in_local_language, oe_request_id, official_website_url, planning_agency_business, planning_agency_business_id, promotable_app_ids, promotable_page_ids, promotable_urls, request_change_reasons, status, subvertical, subvertical_v2, time_created, vertical, vertical_v2

	return mcp.NewTool("adaccountcreationrequest_get_",
		mcp.WithDescription("GET  for AdAccountCreationRequest"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for AdAccountCreationRequest objects. Available fields: ad_accounts_currency, ad_accounts_info, additional_comment, address_in_chinese, address_in_english, address_in_local_language, advertiser_business, appeal_reason, business, business_registration_id, chinese_legal_entity_name, contact, creator, credit_card_id, disapproval_reasons (and 20 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleAdaccountcreationrequest_get_ handles the adaccountcreationrequest_get_ tool with context-based auth
func HandleAdaccountcreationrequest_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	utils.ParseFieldsArray(request, args)

	// Optional: limit
	utils.ParseOptionalInt(request, "limit", args)

	// Optional: after
	utils.ParseOptionalString(request, "after", args)

	// Optional: before
	utils.ParseOptionalString(request, "before", args)

	// Call the API method
	result, err := Adaccountcreationrequest_get_(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adaccountcreationrequest_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Adaccountcreationrequest_get_ performs GET  for AdAccountCreationRequest
func Adaccountcreationrequest_get_(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + ""

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("GET", baseURL, urlParams)
}
