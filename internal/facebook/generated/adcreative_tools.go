// Code generated by codegen. DO NOT EDIT.

package generated

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// Tool schemas for AdCreative
var (
	AdCreative_POST_adlabelsSchema = json.RawMessage(`{"additionalProperties":false,"properties":{"adlabels":{"description":"adlabels","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"AdCreative ID","type":"string"}},"required":["id","adlabels"],"type":"object"}`)

	AdCreative_GET_creative_insightsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdCreative ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`)

	AdCreative_GET_previewsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"ad_format":{"description":"ad_format (enum: adcreativepreviews_ad_format_enum_param)","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"creative_feature":{"description":"creative_feature (enum: adcreativepreviews_creative_feature_enum_param)","type":"string"},"dynamic_asset_label":{"description":"dynamic_asset_label","type":"string"},"dynamic_creative_spec":{"additionalProperties":true,"description":"dynamic_creative_spec","type":"object"},"dynamic_customization":{"additionalProperties":true,"description":"dynamic_customization","type":"object"},"end_date":{"description":"end_date","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"height":{"description":"height","type":"integer"},"id":{"description":"AdCreative ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"locale":{"description":"locale","type":"string"},"place_page_id":{"description":"place_page_id","type":"integer"},"post":{"additionalProperties":true,"description":"post","type":"object"},"product_item_ids":{"description":"product_item_ids","items":{"type":"string"},"type":"array"},"render_type":{"description":"render_type (enum: adcreativepreviews_render_type_enum_param)","type":"string"},"start_date":{"description":"start_date","type":"string"},"width":{"description":"width","type":"integer"}},"required":["id","ad_format"],"type":"object"}`)

	AdCreative_DELETE_Schema = json.RawMessage(`{"additionalProperties":true,"properties":{"account_id":{"description":"account_id","type":"string"},"adlabels":{"description":"adlabels","items":{"additionalProperties":true,"type":"object"},"type":"array"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdCreative ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"name":{"description":"name","type":"string"},"status":{"description":"status (enum: adcreative_status)","type":"string"}},"required":["id"],"type":"object"}`)

	AdCreative_GET_Schema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"AdCreative ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"thumbnail_height":{"description":"thumbnail_height","type":"integer"},"thumbnail_width":{"description":"thumbnail_width","type":"integer"}},"required":["id"],"type":"object"}`)

	AdCreative_POST_Schema = json.RawMessage(`{"additionalProperties":false,"properties":{"account_id":{"description":"account_id","type":"string"},"adlabels":{"description":"adlabels","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"AdCreative ID","type":"string"},"name":{"description":"name","type":"string"},"status":{"description":"status (enum: adcreative_status)","type":"string"}},"required":["id"],"type":"object"}`)
)

// AdCreative_POST_adlabelsHandler handles AdCreative_POST_adlabels
func AdCreative_POST_adlabelsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "adlabels")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdCreative_GET_creative_insightsHandler handles AdCreative_GET_creative_insights
func AdCreative_GET_creative_insightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("AdCreative")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "creative_insights")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdCreative_GET_previewsHandler handles AdCreative_GET_previews
func AdCreative_GET_previewsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("AdCreative")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "previews")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdCreative_DELETE_Handler handles AdCreative_DELETE_
func AdCreative_DELETE_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("AdCreative")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("DELETE", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdCreative_GET_Handler handles AdCreative_GET_
func AdCreative_GET_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// Build query parameters
	query := url.Values{}

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Handle fields parameter specially
	if fields, ok := params["fields"].([]interface{}); ok {
		fieldStrs := make([]string, len(fields))
		for i, f := range fields {
			fieldStrs[i] = fmt.Sprintf("%v", f)
		}
		query.Set("fields", strings.Join(fieldStrs, ","))
		delete(params, "fields")
	} else {
		// Use default fields if none provided
		defaultFields := GetDefaultFields("AdCreative")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add all other parameters to query
	for key, value := range params {
		query.Set(key, fmt.Sprintf("%v", value))
	}

	// Build URL
	baseURL := buildGraphURL(id, "")
	if len(query) > 0 {
		baseURL = fmt.Sprintf("%s?%s", baseURL, query.Encode())
	}

	// Make request
	resp, err := makeGraphRequest("GET", baseURL, nil)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// AdCreative_POST_Handler handles AdCreative_POST_
func AdCreative_POST_Handler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get parameters from the request
	params := request.GetArguments()
	if params == nil {
		params = make(map[string]interface{})
	}

	// POST/PUT request

	// Extract ID
	id, ok := params["id"].(string)
	if !ok || id == "" {
		return mcp.NewToolResultErrorf("id is required"), nil
	}
	delete(params, "id")

	// Build URL
	url := buildGraphURL(id, "")

	// Make request with remaining params as body
	resp, err := makeGraphRequest("POST", url, params)

	if err != nil {
		return mcp.NewToolResultErrorf("API request failed: %v", err), nil
	}

	return mcp.NewToolResultText(string(resp)), nil
}

// RegisterAdCreativeTools registers all AdCreative tools with the MCP server
func RegisterAdCreativeTools(s *server.MCPServer) error {

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdCreative_POST_adlabels",
			"Associate adlabels with this AdCreative Returns AdCreative. Required: adlabels",
			AdCreative_POST_adlabelsSchema,
		),
		AdCreative_POST_adlabelsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdCreative_GET_creative_insights",
			"List creative_insights for this AdCreative Returns AdCreativeInsights.",
			AdCreative_GET_creative_insightsSchema,
		),
		AdCreative_GET_creative_insightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdCreative_GET_previews",
			"List previews for this AdCreative Returns AdPreview. Required: ad_format (enum)",
			AdCreative_GET_previewsSchema,
		),
		AdCreative_GET_previewsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdCreative_DELETE_",
			"Delete a AdCreative",
			AdCreative_DELETE_Schema,
		),
		AdCreative_DELETE_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdCreative_GET_",
			"Get details of a specific AdCreative Returns AdCreative.",
			AdCreative_GET_Schema,
		),
		AdCreative_GET_Handler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"AdCreative_POST_",
			"Update a AdCreative Returns AdCreative.",
			AdCreative_POST_Schema,
		),
		AdCreative_POST_Handler,
	)

	return nil
}

// AdCreative tools: 6 endpoints
