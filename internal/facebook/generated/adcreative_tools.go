// Code generated by codegen. DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"reflect"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// create_ad_creative_adlabelArgs defines the typed arguments for create_ad_creative_adlabel
type create_ad_creative_adlabelArgs struct {
	ID       string     `json:"id" jsonschema:"required,description=AdCreative ID,pattern=^[0-9]+$"`
	Adlabels []*AdLabel `json:"adlabels" jsonschema:"description=Adlabels,required"`
}

// list_ad_creative_creative_insightsArgs defines the typed arguments for list_ad_creative_creative_insights
type list_ad_creative_creative_insightsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdCreative ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// list_ad_creative_previewsArgs defines the typed arguments for list_ad_creative_previews
type list_ad_creative_previewsArgs struct {
	ID                   string                 `json:"id" jsonschema:"required,description=AdCreative ID,pattern=^[0-9]+$"`
	Fields               []string               `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit                int                    `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After                string                 `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before               string                 `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AdFormat             string                 `json:"ad_format" jsonschema:"description=Ad Format,required"`
	CreativeFeature      string                 `json:"creative_feature,omitempty" jsonschema:"description=Creative Feature"`
	DynamicAssetLabel    string                 `json:"dynamic_asset_label,omitempty" jsonschema:"description=Dynamic Asset Label"`
	DynamicCreativeSpec  map[string]interface{} `json:"dynamic_creative_spec,omitempty" jsonschema:"description=Dynamic Creative Spec"`
	DynamicCustomization map[string]interface{} `json:"dynamic_customization,omitempty" jsonschema:"description=Dynamic Customization"`
	EndDate              string                 `json:"end_date,omitempty" jsonschema:"description=End Date,format=date-time"`
	Height               int                    `json:"height,omitempty" jsonschema:"description=Height"`
	Locale               string                 `json:"locale,omitempty" jsonschema:"description=Locale"`
	PlacePageId          int                    `json:"place_page_id,omitempty" jsonschema:"description=ID of the Place Page,pattern=^[0-9]+$"`
	Post                 map[string]interface{} `json:"post,omitempty" jsonschema:"description=Post"`
	ProductItemIds       []string               `json:"product_item_ids,omitempty" jsonschema:"description=Product Item Ids,pattern=^[0-9]+$"`
	RenderType           string                 `json:"render_type,omitempty" jsonschema:"description=Render Type"`
	StartDate            string                 `json:"start_date,omitempty" jsonschema:"description=Start Date,format=date-time"`
	Width                int                    `json:"width,omitempty" jsonschema:"description=Width"`
}

// delete_ad_creativeArgs defines the typed arguments for delete_ad_creative
type delete_ad_creativeArgs struct {
	ID        string     `json:"id" jsonschema:"required,description=AdCreative ID,pattern=^[0-9]+$"`
	AccountId string     `json:"account_id,omitempty" jsonschema:"description=ID of the Account,pattern=^[0-9]+$"`
	Adlabels  []*AdLabel `json:"adlabels,omitempty" jsonschema:"description=Adlabels"`
	Name      string     `json:"name,omitempty" jsonschema:"description=Name"`
	Status    string     `json:"status,omitempty" jsonschema:"description=Status,enum=ACTIVE,enum=PAUSED,enum=DELETED,enum=ARCHIVED"`
}

// get_ad_creativeArgs defines the typed arguments for get_ad_creative
type get_ad_creativeArgs struct {
	ID              string   `json:"id" jsonschema:"required,description=AdCreative ID,pattern=^[0-9]+$"`
	Fields          []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit           int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After           string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before          string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	ThumbnailHeight int      `json:"thumbnail_height,omitempty" jsonschema:"description=Thumbnail Height"`
	ThumbnailWidth  int      `json:"thumbnail_width,omitempty" jsonschema:"description=Thumbnail Width"`
}

// update_ad_creativeArgs defines the typed arguments for update_ad_creative
type update_ad_creativeArgs struct {
	ID        string     `json:"id" jsonschema:"required,description=AdCreative ID,pattern=^[0-9]+$"`
	AccountId string     `json:"account_id,omitempty" jsonschema:"description=ID of the Account,pattern=^[0-9]+$"`
	Adlabels  []*AdLabel `json:"adlabels,omitempty" jsonschema:"description=Adlabels"`
	Name      string     `json:"name,omitempty" jsonschema:"description=Name"`
	Status    string     `json:"status,omitempty" jsonschema:"description=Status,enum=ACTIVE,enum=PAUSED,enum=DELETED,enum=ARCHIVED"`
}

var (
	create_ad_creative_adlabelSchema = generateSchemaForType(reflect.TypeOf(create_ad_creative_adlabelArgs{}))

	list_ad_creative_creative_insightsSchema = generateSchemaForType(reflect.TypeOf(list_ad_creative_creative_insightsArgs{}))

	list_ad_creative_previewsSchema = generateSchemaForType(reflect.TypeOf(list_ad_creative_previewsArgs{}))

	delete_ad_creativeSchema = generateSchemaForType(reflect.TypeOf(delete_ad_creativeArgs{}))

	get_ad_creativeSchema = generateSchemaForType(reflect.TypeOf(get_ad_creativeArgs{}))

	update_ad_creativeSchema = generateSchemaForType(reflect.TypeOf(update_ad_creativeArgs{}))
)

// CreateAdCreativeAdlabelHandler handles create_ad_creative_adlabel with typed arguments
func CreateAdCreativeAdlabelHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_creative_adlabelArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.Adlabels) > 0 {
		body["adlabels"] = args.Adlabels
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "adlabels")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdCreativeCreativeInsightsHandler handles list_ad_creative_creative_insights with typed arguments
func ListAdCreativeCreativeInsightsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_creative_creative_insightsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdCreative")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "creative_insights")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdCreativePreviewsHandler handles list_ad_creative_previews with typed arguments
func ListAdCreativePreviewsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_creative_previewsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdCreative")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.AdFormat != "" {
		query.Set("ad_format", args.AdFormat)
	}

	if args.CreativeFeature != "" {
		query.Set("creative_feature", args.CreativeFeature)
	}

	if args.DynamicAssetLabel != "" {
		query.Set("dynamic_asset_label", args.DynamicAssetLabel)
	}

	// Handle DynamicCreativeSpec map parameter
	for k, v := range args.DynamicCreativeSpec {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	// Handle DynamicCustomization map parameter
	for k, v := range args.DynamicCustomization {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	if args.EndDate != "" {
		query.Set("end_date", args.EndDate)
	}

	if args.Height > 0 {
		query.Set("height", fmt.Sprintf("%d", args.Height))
	}

	if args.Locale != "" {
		query.Set("locale", args.Locale)
	}

	if args.PlacePageId > 0 {
		query.Set("place_page_id", fmt.Sprintf("%d", args.PlacePageId))
	}

	// Handle Post map parameter
	for k, v := range args.Post {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	if len(args.ProductItemIds) > 0 {
		query.Set("product_item_ids", strings.Join(args.ProductItemIds, ","))
	}

	if args.RenderType != "" {
		query.Set("render_type", args.RenderType)
	}

	if args.StartDate != "" {
		query.Set("start_date", args.StartDate)
	}

	if args.Width > 0 {
		query.Set("width", fmt.Sprintf("%d", args.Width))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "previews")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// DeleteAdCreativeHandler handles delete_ad_creative with typed arguments
func DeleteAdCreativeHandler(ctx context.Context, request mcp.CallToolRequest, args delete_ad_creativeArgs) (*mcp.CallToolResult, error) {

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	url := buildGraphURL(args.ID, "")
	return ExecuteDELETERequest(ctx, url)

}

// GetAdCreativeHandler handles get_ad_creative with typed arguments
func GetAdCreativeHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_creativeArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdCreative")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.ThumbnailHeight > 0 {
		query.Set("thumbnail_height", fmt.Sprintf("%d", args.ThumbnailHeight))
	}

	if args.ThumbnailWidth > 0 {
		query.Set("thumbnail_width", fmt.Sprintf("%d", args.ThumbnailWidth))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UpdateAdCreativeHandler handles update_ad_creative with typed arguments
func UpdateAdCreativeHandler(ctx context.Context, request mcp.CallToolRequest, args update_ad_creativeArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.AccountId != "" {
		body["account_id"] = args.AccountId
	}

	if len(args.Adlabels) > 0 {
		body["adlabels"] = args.Adlabels
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.Status != "" {
		body["status"] = args.Status
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "")

	return ExecutePOSTRequest(ctx, url, body)

}

// generateSchemaForType is implemented in tools_common.go to avoid redeclaration

// RegisterAdCreativeTools registers all AdCreative tools with the MCP server
func RegisterAdCreativeTools(s *server.MCPServer) error {

	// Register create_ad_creative_adlabel using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_creative_adlabel", "Associate adlabels with this AdCreative Returns AdCreative. Required: adlabels", create_ad_creative_adlabelSchema),
		mcp.NewTypedToolHandler(CreateAdCreativeAdlabelHandler),
	)

	// Register list_ad_creative_creative_insights using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_creative_creative_insights", "List creative_insights for this AdCreative Returns AdCreativeInsights.", list_ad_creative_creative_insightsSchema),
		mcp.NewTypedToolHandler(ListAdCreativeCreativeInsightsHandler),
	)

	// Register list_ad_creative_previews using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_creative_previews", "List previews for this AdCreative Returns AdPreview. Required: ad_format (enum)", list_ad_creative_previewsSchema),
		mcp.NewTypedToolHandler(ListAdCreativePreviewsHandler),
	)

	// Register delete_ad_creative using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("delete_ad_creative", "Delete a AdCreative", delete_ad_creativeSchema),
		mcp.NewTypedToolHandler(DeleteAdCreativeHandler),
	)

	// Register get_ad_creative using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_ad_creative", "Get details of a specific AdCreative Returns AdCreative.", get_ad_creativeSchema),
		mcp.NewTypedToolHandler(GetAdCreativeHandler),
	)

	// Register update_ad_creative using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("update_ad_creative", "Update a AdCreative Returns AdCreative.", update_ad_creativeSchema),
		mcp.NewTypedToolHandler(UpdateAdCreativeHandler),
	)

	return nil
}

// AdCreative tools: 6 endpoints
