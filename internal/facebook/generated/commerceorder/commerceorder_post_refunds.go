// Code generated by Facebook Business API codegen. DO NOT EDIT.

package commerceorder

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolCommerceorder_post_refunds returns the MCP tool definition for commerceorder_post_refunds
func ToolCommerceorder_post_refunds() mcp.Tool {

	// Params object accepts: adjustment_amount (map), deductions (list<map>), idempotency_key (string), items (list<map>), reason_code (commerceorderrefunds_reason_code_enum_param), reason_text (string), return_id (string), shipping (map)
	return mcp.NewTool("commerceorder_post_refunds",
		mcp.WithDescription("POST refunds for CommerceOrder"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"adjustment_amount": map[string]any{
					"type":        "object",
					"description": "adjustment_amount parameter",
				},
				"deductions": map[string]any{
					"type":        "array",
					"description": "deductions parameter",
					"items":       map[string]any{"type": "object"},
				},
				"idempotency_key": map[string]any{
					"type":        "string",
					"description": "idempotency_key parameter",
					"required":    true,
				},
				"items": map[string]any{
					"type":        "array",
					"description": "items parameter",
					"items":       map[string]any{"type": "object"},
				},
				"reason_code": map[string]any{
					"type":        "string",
					"description": "reason_code parameter",
					"required":    true,
					"enum":        []string{"BUYERS_REMORSE", "DAMAGED_GOODS", "FACEBOOK_INITIATED", "NOT_AS_DESCRIBED", "QUALITY_ISSUE", "REFUND_COMPROMISED", "REFUND_FOR_RETURN", "REFUND_REASON_OTHER", "REFUND_SFI_FAKE", "REFUND_SFI_REAL", "WRONG_ITEM"},
				},
				"reason_text": map[string]any{
					"type":        "string",
					"description": "reason_text parameter",
				},
				"return_id": map[string]any{
					"type":        "string",
					"description": "return_id parameter",
				},
				"shipping": map[string]any{
					"type":        "object",
					"description": "shipping parameter",
				},
			}),
			mcp.Description("Parameters object containing: adjustment_amount (object), deductions (array<object>), idempotency_key (string) [required], items (array<object>), reason_code (enum) [BUYERS_REMORSE, DAMAGED_GOODS, FACEBOOK_INITIATED, NOT_AS_DESCRIBED, QUALITY_ISSUE, ...] [required], reason_text (string), return_id (string), shipping (object)"),
		),
	)
}

// HandleCommerceorder_post_refunds handles the commerceorder_post_refunds tool with context-based auth
func HandleCommerceorder_post_refunds(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	// Parse required params object and expand into args
	val, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(val), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the API method
	result, err := Commerceorder_post_refunds(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute commerceorder_post_refunds: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Commerceorder_post_refunds performs POST refunds for CommerceOrder
func Commerceorder_post_refunds(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "/refunds"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
