// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// ExtendedCreditClient provides methods for ExtendedCredit operations
type ExtendedCreditClient struct {
	accessToken string
}

// NewExtendedCreditClient creates a new ExtendedCredit client
func NewExtendedCreditClient(accessToken string) *ExtendedCreditClient {
	return &ExtendedCreditClient{
		accessToken: accessToken,
	}
}

// facebook_extendedcredit_get_extended_credit_invoice_groups GET extended_credit_invoice_groups for ExtendedCredit
func (c *ExtendedCreditClient) Facebook_extendedcredit_get_extended_credit_invoice_groups(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "extended_credit_invoice_groups")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_extendedcredit_post_extended_credit_invoice_groups POST extended_credit_invoice_groups for ExtendedCredit
func (c *ExtendedCreditClient) Facebook_extendedcredit_post_extended_credit_invoice_groups(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	emails, ok := args["emails"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: emails")
	}
	_ = emails // Suppress unused variable warning
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "extended_credit_invoice_groups")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["emails"]; ok {
		urlParams.Set("emails", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_extendedcredit_get_owning_credit_allocation_configs GET owning_credit_allocation_configs for ExtendedCredit
func (c *ExtendedCreditClient) Facebook_extendedcredit_get_owning_credit_allocation_configs(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "owning_credit_allocation_configs")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["receiving_business_id"]; ok {
		urlParams.Set("receiving_business_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_extendedcredit_post_owning_credit_allocation_configs POST owning_credit_allocation_configs for ExtendedCredit
func (c *ExtendedCreditClient) Facebook_extendedcredit_post_owning_credit_allocation_configs(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	receiving_business_id, ok := args["receiving_business_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: receiving_business_id")
	}
	_ = receiving_business_id // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "owning_credit_allocation_configs")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["amount"]; ok {
		urlParams.Set("amount", fmt.Sprintf("%v", val))
	}
	if val, ok := args["liability_type"]; ok {
		urlParams.Set("liability_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["partition_type"]; ok {
		urlParams.Set("partition_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["receiving_business_id"]; ok {
		urlParams.Set("receiving_business_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["send_bill_to"]; ok {
		urlParams.Set("send_bill_to", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_extendedcredit_post_whatsapp_credit_attach POST whatsapp_credit_attach for ExtendedCredit
func (c *ExtendedCreditClient) Facebook_extendedcredit_post_whatsapp_credit_attach(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	waba_currency, ok := args["waba_currency"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: waba_currency")
	}
	_ = waba_currency // Suppress unused variable warning
	waba_id, ok := args["waba_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: waba_id")
	}
	_ = waba_id // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "whatsapp_credit_attach")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["waba_currency"]; ok {
		urlParams.Set("waba_currency", fmt.Sprintf("%v", val))
	}
	if val, ok := args["waba_id"]; ok {
		urlParams.Set("waba_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_extendedcredit_post_whatsapp_credit_sharing POST whatsapp_credit_sharing for ExtendedCredit
func (c *ExtendedCreditClient) Facebook_extendedcredit_post_whatsapp_credit_sharing(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	receiving_business_id, ok := args["receiving_business_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: receiving_business_id")
	}
	_ = receiving_business_id // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "whatsapp_credit_sharing")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["receiving_business_id"]; ok {
		urlParams.Set("receiving_business_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_extendedcredit_post_whatsapp_credit_sharing_and_attach POST whatsapp_credit_sharing_and_attach for ExtendedCredit
func (c *ExtendedCreditClient) Facebook_extendedcredit_post_whatsapp_credit_sharing_and_attach(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	waba_currency, ok := args["waba_currency"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: waba_currency")
	}
	_ = waba_currency // Suppress unused variable warning
	waba_id, ok := args["waba_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: waba_id")
	}
	_ = waba_id // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "whatsapp_credit_sharing_and_attach")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["waba_currency"]; ok {
		urlParams.Set("waba_currency", fmt.Sprintf("%v", val))
	}
	if val, ok := args["waba_id"]; ok {
		urlParams.Set("waba_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_extendedcredit_get_ GET  for ExtendedCredit
func (c *ExtendedCreditClient) Facebook_extendedcredit_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
