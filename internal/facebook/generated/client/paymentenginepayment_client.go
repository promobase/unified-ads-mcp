// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// PaymentEnginePaymentClient provides methods for PaymentEnginePayment operations
type PaymentEnginePaymentClient struct {
	accessToken string
}

// NewPaymentEnginePaymentClient creates a new PaymentEnginePayment client
func NewPaymentEnginePaymentClient(accessToken string) *PaymentEnginePaymentClient {
	return &PaymentEnginePaymentClient{
		accessToken: accessToken,
	}
}

// facebook_paymentenginepayment_post_dispute POST dispute for PaymentEnginePayment
func (c *PaymentEnginePaymentClient) Facebook_paymentenginepayment_post_dispute(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	reason, ok := args["reason"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: reason")
	}
	_ = reason // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "dispute")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["reason"]; ok {
		urlParams.Set("reason", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_paymentenginepayment_post_refunds POST refunds for PaymentEnginePayment
func (c *PaymentEnginePaymentClient) Facebook_paymentenginepayment_post_refunds(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	amount, ok := args["amount"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: amount")
	}
	_ = amount // Suppress unused variable warning
	currency, ok := args["currency"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: currency")
	}
	_ = currency // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "refunds")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["amount"]; ok {
		urlParams.Set("amount", fmt.Sprintf("%v", val))
	}
	if val, ok := args["currency"]; ok {
		urlParams.Set("currency", fmt.Sprintf("%v", val))
	}
	if val, ok := args["reason"]; ok {
		urlParams.Set("reason", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_paymentenginepayment_get_ GET  for PaymentEnginePayment
func (c *PaymentEnginePaymentClient) Facebook_paymentenginepayment_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
