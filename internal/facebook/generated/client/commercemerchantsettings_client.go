// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// CommerceMerchantSettingsClient provides methods for CommerceMerchantSettings operations
type CommerceMerchantSettingsClient struct {
	accessToken string
}

// NewCommerceMerchantSettingsClient creates a new CommerceMerchantSettings client
func NewCommerceMerchantSettingsClient(accessToken string) *CommerceMerchantSettingsClient {
	return &CommerceMerchantSettingsClient{
		accessToken: accessToken,
	}
}

// commercemerchantsettings_post_acknowledge_orders POST acknowledge_orders for CommerceMerchantSettings
func (c *CommerceMerchantSettingsClient) Commercemerchantsettings_post_acknowledge_orders(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/acknowledge_orders")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("params", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commercemerchantsettings_get_commerce_orders GET commerce_orders for CommerceMerchantSettings
func (c *CommerceMerchantSettingsClient) Commercemerchantsettings_get_commerce_orders(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/commerce_orders")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("params", fmt.Sprintf("%v", val))

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fields", fmt.Sprintf("%v", val))

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("limit", fmt.Sprintf("%v", val))

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("after", fmt.Sprintf("%v", val))

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("before", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commercemerchantsettings_get_commerce_payouts GET commerce_payouts for CommerceMerchantSettings
func (c *CommerceMerchantSettingsClient) Commercemerchantsettings_get_commerce_payouts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/commerce_payouts")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("params", fmt.Sprintf("%v", val))

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fields", fmt.Sprintf("%v", val))

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("limit", fmt.Sprintf("%v", val))

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("after", fmt.Sprintf("%v", val))

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("before", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commercemerchantsettings_get_commerce_transactions GET commerce_transactions for CommerceMerchantSettings
func (c *CommerceMerchantSettingsClient) Commercemerchantsettings_get_commerce_transactions(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/commerce_transactions")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("params", fmt.Sprintf("%v", val))

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fields", fmt.Sprintf("%v", val))

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("limit", fmt.Sprintf("%v", val))

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("after", fmt.Sprintf("%v", val))

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("before", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commercemerchantsettings_get_order_management_apps GET order_management_apps for CommerceMerchantSettings
func (c *CommerceMerchantSettingsClient) Commercemerchantsettings_get_order_management_apps(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/order_management_apps")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fields", fmt.Sprintf("%v", val))

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("limit", fmt.Sprintf("%v", val))

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("after", fmt.Sprintf("%v", val))

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("before", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commercemerchantsettings_post_order_management_apps POST order_management_apps for CommerceMerchantSettings
func (c *CommerceMerchantSettingsClient) Commercemerchantsettings_post_order_management_apps(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/order_management_apps")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commercemerchantsettings_get_product_catalogs GET product_catalogs for CommerceMerchantSettings
func (c *CommerceMerchantSettingsClient) Commercemerchantsettings_get_product_catalogs(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/product_catalogs")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fields", fmt.Sprintf("%v", val))

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("limit", fmt.Sprintf("%v", val))

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("after", fmt.Sprintf("%v", val))

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("before", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commercemerchantsettings_get_returns GET returns for CommerceMerchantSettings
func (c *CommerceMerchantSettingsClient) Commercemerchantsettings_get_returns(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/returns")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("params", fmt.Sprintf("%v", val))

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fields", fmt.Sprintf("%v", val))

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("limit", fmt.Sprintf("%v", val))

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("after", fmt.Sprintf("%v", val))

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("before", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commercemerchantsettings_get_setup_status GET setup_status for CommerceMerchantSettings
func (c *CommerceMerchantSettingsClient) Commercemerchantsettings_get_setup_status(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/setup_status")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fields", fmt.Sprintf("%v", val))

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("limit", fmt.Sprintf("%v", val))

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("after", fmt.Sprintf("%v", val))

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("before", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commercemerchantsettings_get_shipping_profiles GET shipping_profiles for CommerceMerchantSettings
func (c *CommerceMerchantSettingsClient) Commercemerchantsettings_get_shipping_profiles(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/shipping_profiles")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("params", fmt.Sprintf("%v", val))

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fields", fmt.Sprintf("%v", val))

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("limit", fmt.Sprintf("%v", val))

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("after", fmt.Sprintf("%v", val))

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("before", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commercemerchantsettings_post_shipping_profiles POST shipping_profiles for CommerceMerchantSettings
func (c *CommerceMerchantSettingsClient) Commercemerchantsettings_post_shipping_profiles(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/shipping_profiles")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("params", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commercemerchantsettings_get_shops GET shops for CommerceMerchantSettings
func (c *CommerceMerchantSettingsClient) Commercemerchantsettings_get_shops(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/shops")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fields", fmt.Sprintf("%v", val))

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("limit", fmt.Sprintf("%v", val))

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("after", fmt.Sprintf("%v", val))

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("before", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commercemerchantsettings_get_tax_settings GET tax_settings for CommerceMerchantSettings
func (c *CommerceMerchantSettingsClient) Commercemerchantsettings_get_tax_settings(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/tax_settings")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fields", fmt.Sprintf("%v", val))

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("limit", fmt.Sprintf("%v", val))

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("after", fmt.Sprintf("%v", val))

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("before", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commercemerchantsettings_get_ GET  for CommerceMerchantSettings
func (c *CommerceMerchantSettingsClient) Commercemerchantsettings_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fields", fmt.Sprintf("%v", val))

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("limit", fmt.Sprintf("%v", val))

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("after", fmt.Sprintf("%v", val))

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("before", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
