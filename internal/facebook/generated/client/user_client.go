// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// UserClient provides methods for User operations
type UserClient struct {
	accessToken string
}

// NewUserClient creates a new User client
func NewUserClient(accessToken string) *UserClient {
	return &UserClient{
		accessToken: accessToken,
	}
}


// facebook_user_delete_access_tokens DELETE access_tokens for User
func (c *UserClient) Facebook_user_delete_access_tokens(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "access_tokens")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_post_access_tokens POST access_tokens for User
func (c *UserClient) Facebook_user_post_access_tokens(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	business_app, ok := args["business_app"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: business_app")
	}
	_ = business_app // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "access_tokens")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["business_app"]; ok {
		urlParams.Set("business_app", fmt.Sprintf("%v", val))
	}
	if val, ok := args["page_id"]; ok {
		urlParams.Set("page_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["scope"]; ok {
		urlParams.Set("scope", fmt.Sprintf("%v", val))
	}
	if val, ok := args["set_token_expires_in_60_days"]; ok {
		urlParams.Set("set_token_expires_in_60_days", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_accounts GET accounts for User
func (c *UserClient) Facebook_user_get_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "accounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_id"]; ok {
		urlParams.Set("ad_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_place"]; ok {
		urlParams.Set("is_place", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_promotable"]; ok {
		urlParams.Set("is_promotable", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_post_accounts POST accounts for User
func (c *UserClient) Facebook_user_post_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "accounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["about"]; ok {
		urlParams.Set("about", fmt.Sprintf("%v", val))
	}
	if val, ok := args["address"]; ok {
		urlParams.Set("address", fmt.Sprintf("%v", val))
	}
	if val, ok := args["category"]; ok {
		urlParams.Set("category", fmt.Sprintf("%v", val))
	}
	if val, ok := args["category_enum"]; ok {
		urlParams.Set("category_enum", fmt.Sprintf("%v", val))
	}
	if val, ok := args["category_list"]; ok {
		urlParams.Set("category_list", fmt.Sprintf("%v", val))
	}
	if val, ok := args["city_id"]; ok {
		urlParams.Set("city_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["coordinates"]; ok {
		urlParams.Set("coordinates", fmt.Sprintf("%v", val))
	}
	if val, ok := args["cover_photo"]; ok {
		urlParams.Set("cover_photo", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ignore_coordinate_warnings"]; ok {
		urlParams.Set("ignore_coordinate_warnings", fmt.Sprintf("%v", val))
	}
	if val, ok := args["location"]; ok {
		urlParams.Set("location", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["phone"]; ok {
		urlParams.Set("phone", fmt.Sprintf("%v", val))
	}
	if val, ok := args["picture"]; ok {
		urlParams.Set("picture", fmt.Sprintf("%v", val))
	}
	if val, ok := args["website"]; ok {
		urlParams.Set("website", fmt.Sprintf("%v", val))
	}
	if val, ok := args["zip"]; ok {
		urlParams.Set("zip", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_ad_studies GET ad_studies for User
func (c *UserClient) Facebook_user_get_ad_studies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "ad_studies")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_post_ad_studies POST ad_studies for User
func (c *UserClient) Facebook_user_post_ad_studies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "ad_studies")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["cells"]; ok {
		urlParams.Set("cells", fmt.Sprintf("%v", val))
	}
	if val, ok := args["client_business"]; ok {
		urlParams.Set("client_business", fmt.Sprintf("%v", val))
	}
	if val, ok := args["confidence_level"]; ok {
		urlParams.Set("confidence_level", fmt.Sprintf("%v", val))
	}
	if val, ok := args["cooldown_start_time"]; ok {
		urlParams.Set("cooldown_start_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["end_time"]; ok {
		urlParams.Set("end_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["objectives"]; ok {
		urlParams.Set("objectives", fmt.Sprintf("%v", val))
	}
	if val, ok := args["observation_end_time"]; ok {
		urlParams.Set("observation_end_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["start_time"]; ok {
		urlParams.Set("start_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["type"]; ok {
		urlParams.Set("type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["viewers"]; ok {
		urlParams.Set("viewers", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_adaccounts GET adaccounts for User
func (c *UserClient) Facebook_user_get_adaccounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "adaccounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_albums GET albums for User
func (c *UserClient) Facebook_user_get_albums(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "albums")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_post_applications POST applications for User
func (c *UserClient) Facebook_user_post_applications(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	business_app, ok := args["business_app"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: business_app")
	}
	_ = business_app // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "applications")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["business_app"]; ok {
		urlParams.Set("business_app", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_apprequestformerrecipients GET apprequestformerrecipients for User
func (c *UserClient) Facebook_user_get_apprequestformerrecipients(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "apprequestformerrecipients")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_apprequests GET apprequests for User
func (c *UserClient) Facebook_user_get_apprequests(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "apprequests")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_assigned_ad_accounts GET assigned_ad_accounts for User
func (c *UserClient) Facebook_user_get_assigned_ad_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "assigned_ad_accounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_assigned_applications GET assigned_applications for User
func (c *UserClient) Facebook_user_get_assigned_applications(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "assigned_applications")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_assigned_business_asset_groups GET assigned_business_asset_groups for User
func (c *UserClient) Facebook_user_get_assigned_business_asset_groups(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "assigned_business_asset_groups")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["contained_asset_id"]; ok {
		urlParams.Set("contained_asset_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_assigned_pages GET assigned_pages for User
func (c *UserClient) Facebook_user_get_assigned_pages(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "assigned_pages")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["pages"]; ok {
		urlParams.Set("pages", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_assigned_product_catalogs GET assigned_product_catalogs for User
func (c *UserClient) Facebook_user_get_assigned_product_catalogs(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "assigned_product_catalogs")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_avatars GET avatars for User
func (c *UserClient) Facebook_user_get_avatars(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "avatars")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_business_users GET business_users for User
func (c *UserClient) Facebook_user_get_business_users(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "business_users")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_delete_businesses DELETE businesses for User
func (c *UserClient) Facebook_user_delete_businesses(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "businesses")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["business"]; ok {
		urlParams.Set("business", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_businesses GET businesses for User
func (c *UserClient) Facebook_user_get_businesses(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "businesses")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_post_businesses POST businesses for User
func (c *UserClient) Facebook_user_post_businesses(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning
	vertical, ok := args["vertical"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: vertical")
	}
	_ = vertical // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "businesses")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["child_business_external_id"]; ok {
		urlParams.Set("child_business_external_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["email"]; ok {
		urlParams.Set("email", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["primary_page"]; ok {
		urlParams.Set("primary_page", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sales_rep_email"]; ok {
		urlParams.Set("sales_rep_email", fmt.Sprintf("%v", val))
	}
	if val, ok := args["survey_business_type"]; ok {
		urlParams.Set("survey_business_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["survey_num_assets"]; ok {
		urlParams.Set("survey_num_assets", fmt.Sprintf("%v", val))
	}
	if val, ok := args["survey_num_people"]; ok {
		urlParams.Set("survey_num_people", fmt.Sprintf("%v", val))
	}
	if val, ok := args["timezone_id"]; ok {
		urlParams.Set("timezone_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["vertical"]; ok {
		urlParams.Set("vertical", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_conversations GET conversations for User
func (c *UserClient) Facebook_user_get_conversations(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "conversations")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["folder"]; ok {
		urlParams.Set("folder", fmt.Sprintf("%v", val))
	}
	if val, ok := args["platform"]; ok {
		urlParams.Set("platform", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tags"]; ok {
		urlParams.Set("tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["user_id"]; ok {
		urlParams.Set("user_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_custom_labels GET custom_labels for User
func (c *UserClient) Facebook_user_get_custom_labels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "custom_labels")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_events GET events for User
func (c *UserClient) Facebook_user_get_events(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "events")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["include_canceled"]; ok {
		urlParams.Set("include_canceled", fmt.Sprintf("%v", val))
	}
	if val, ok := args["type"]; ok {
		urlParams.Set("type", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_feed GET feed for User
func (c *UserClient) Facebook_user_get_feed(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "feed")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["include_hidden"]; ok {
		urlParams.Set("include_hidden", fmt.Sprintf("%v", val))
	}
	if val, ok := args["q"]; ok {
		urlParams.Set("q", fmt.Sprintf("%v", val))
	}
	if val, ok := args["show_expired"]; ok {
		urlParams.Set("show_expired", fmt.Sprintf("%v", val))
	}
	if val, ok := args["since"]; ok {
		urlParams.Set("since", fmt.Sprintf("%v", val))
	}
	if val, ok := args["until"]; ok {
		urlParams.Set("until", fmt.Sprintf("%v", val))
	}
	if val, ok := args["with"]; ok {
		urlParams.Set("with", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_post_feed POST feed for User
func (c *UserClient) Facebook_user_post_feed(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "feed")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["actions"]; ok {
		urlParams.Set("actions", fmt.Sprintf("%v", val))
	}
	if val, ok := args["album_id"]; ok {
		urlParams.Set("album_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["android_key_hash"]; ok {
		urlParams.Set("android_key_hash", fmt.Sprintf("%v", val))
	}
	if val, ok := args["application_id"]; ok {
		urlParams.Set("application_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["asked_fun_fact_prompt_id"]; ok {
		urlParams.Set("asked_fun_fact_prompt_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["asset3d_id"]; ok {
		urlParams.Set("asset3d_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["associated_id"]; ok {
		urlParams.Set("associated_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["attach_place_suggestion"]; ok {
		urlParams.Set("attach_place_suggestion", fmt.Sprintf("%v", val))
	}
	if val, ok := args["attached_media"]; ok {
		urlParams.Set("attached_media", fmt.Sprintf("%v", val))
	}
	if val, ok := args["audience_exp"]; ok {
		urlParams.Set("audience_exp", fmt.Sprintf("%v", val))
	}
	if val, ok := args["backdated_time"]; ok {
		urlParams.Set("backdated_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["backdated_time_granularity"]; ok {
		urlParams.Set("backdated_time_granularity", fmt.Sprintf("%v", val))
	}
	if val, ok := args["breaking_news"]; ok {
		urlParams.Set("breaking_news", fmt.Sprintf("%v", val))
	}
	if val, ok := args["breaking_news_expiration"]; ok {
		urlParams.Set("breaking_news_expiration", fmt.Sprintf("%v", val))
	}
	if val, ok := args["call_to_action"]; ok {
		urlParams.Set("call_to_action", fmt.Sprintf("%v", val))
	}
	if val, ok := args["caption"]; ok {
		urlParams.Set("caption", fmt.Sprintf("%v", val))
	}
	if val, ok := args["child_attachments"]; ok {
		urlParams.Set("child_attachments", fmt.Sprintf("%v", val))
	}
	if val, ok := args["client_mutation_id"]; ok {
		urlParams.Set("client_mutation_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_entry_picker"]; ok {
		urlParams.Set("composer_entry_picker", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_entry_point"]; ok {
		urlParams.Set("composer_entry_point", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_entry_time"]; ok {
		urlParams.Set("composer_entry_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_session_events_log"]; ok {
		urlParams.Set("composer_session_events_log", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_session_id"]; ok {
		urlParams.Set("composer_session_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_source_surface"]; ok {
		urlParams.Set("composer_source_surface", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_type"]; ok {
		urlParams.Set("composer_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["connection_class"]; ok {
		urlParams.Set("connection_class", fmt.Sprintf("%v", val))
	}
	if val, ok := args["content_attachment"]; ok {
		urlParams.Set("content_attachment", fmt.Sprintf("%v", val))
	}
	if val, ok := args["coordinates"]; ok {
		urlParams.Set("coordinates", fmt.Sprintf("%v", val))
	}
	if val, ok := args["cta_link"]; ok {
		urlParams.Set("cta_link", fmt.Sprintf("%v", val))
	}
	if val, ok := args["cta_type"]; ok {
		urlParams.Set("cta_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["direct_share_status"]; ok {
		urlParams.Set("direct_share_status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["expanded_height"]; ok {
		urlParams.Set("expanded_height", fmt.Sprintf("%v", val))
	}
	if val, ok := args["expanded_width"]; ok {
		urlParams.Set("expanded_width", fmt.Sprintf("%v", val))
	}
	if val, ok := args["feed_targeting"]; ok {
		urlParams.Set("feed_targeting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["formatting"]; ok {
		urlParams.Set("formatting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fun_fact_prompt_id"]; ok {
		urlParams.Set("fun_fact_prompt_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fun_fact_toastee_id"]; ok {
		urlParams.Set("fun_fact_toastee_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["height"]; ok {
		urlParams.Set("height", fmt.Sprintf("%v", val))
	}
	if val, ok := args["home_checkin_city_id"]; ok {
		urlParams.Set("home_checkin_city_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["image_crops"]; ok {
		urlParams.Set("image_crops", fmt.Sprintf("%v", val))
	}
	if val, ok := args["implicit_with_tags"]; ok {
		urlParams.Set("implicit_with_tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["instant_game_entry_point_data"]; ok {
		urlParams.Set("instant_game_entry_point_data", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ios_bundle_id"]; ok {
		urlParams.Set("ios_bundle_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_backout_draft"]; ok {
		urlParams.Set("is_backout_draft", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_boost_intended"]; ok {
		urlParams.Set("is_boost_intended", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_explicit_location"]; ok {
		urlParams.Set("is_explicit_location", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_explicit_share"]; ok {
		urlParams.Set("is_explicit_share", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_group_linking_post"]; ok {
		urlParams.Set("is_group_linking_post", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_photo_container"]; ok {
		urlParams.Set("is_photo_container", fmt.Sprintf("%v", val))
	}
	if val, ok := args["link"]; ok {
		urlParams.Set("link", fmt.Sprintf("%v", val))
	}
	if val, ok := args["location_source_id"]; ok {
		urlParams.Set("location_source_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["manual_privacy"]; ok {
		urlParams.Set("manual_privacy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["message"]; ok {
		urlParams.Set("message", fmt.Sprintf("%v", val))
	}
	if val, ok := args["multi_share_end_card"]; ok {
		urlParams.Set("multi_share_end_card", fmt.Sprintf("%v", val))
	}
	if val, ok := args["multi_share_optimized"]; ok {
		urlParams.Set("multi_share_optimized", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["nectar_module"]; ok {
		urlParams.Set("nectar_module", fmt.Sprintf("%v", val))
	}
	if val, ok := args["object_attachment"]; ok {
		urlParams.Set("object_attachment", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_action_type_id"]; ok {
		urlParams.Set("og_action_type_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_hide_object_attachment"]; ok {
		urlParams.Set("og_hide_object_attachment", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_icon_id"]; ok {
		urlParams.Set("og_icon_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_object_id"]; ok {
		urlParams.Set("og_object_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_phrase"]; ok {
		urlParams.Set("og_phrase", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_set_profile_badge"]; ok {
		urlParams.Set("og_set_profile_badge", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_suggestion_mechanism"]; ok {
		urlParams.Set("og_suggestion_mechanism", fmt.Sprintf("%v", val))
	}
	if val, ok := args["page_recommendation"]; ok {
		urlParams.Set("page_recommendation", fmt.Sprintf("%v", val))
	}
	if val, ok := args["picture"]; ok {
		urlParams.Set("picture", fmt.Sprintf("%v", val))
	}
	if val, ok := args["place"]; ok {
		urlParams.Set("place", fmt.Sprintf("%v", val))
	}
	if val, ok := args["place_attachment_setting"]; ok {
		urlParams.Set("place_attachment_setting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["place_list"]; ok {
		urlParams.Set("place_list", fmt.Sprintf("%v", val))
	}
	if val, ok := args["place_list_data"]; ok {
		urlParams.Set("place_list_data", fmt.Sprintf("%v", val))
	}
	if val, ok := args["post_surfaces_blacklist"]; ok {
		urlParams.Set("post_surfaces_blacklist", fmt.Sprintf("%v", val))
	}
	if val, ok := args["posting_to_redspace"]; ok {
		urlParams.Set("posting_to_redspace", fmt.Sprintf("%v", val))
	}
	if val, ok := args["privacy"]; ok {
		urlParams.Set("privacy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["prompt_id"]; ok {
		urlParams.Set("prompt_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["prompt_tracking_string"]; ok {
		urlParams.Set("prompt_tracking_string", fmt.Sprintf("%v", val))
	}
	if val, ok := args["properties"]; ok {
		urlParams.Set("properties", fmt.Sprintf("%v", val))
	}
	if val, ok := args["proxied_app_id"]; ok {
		urlParams.Set("proxied_app_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["publish_event_id"]; ok {
		urlParams.Set("publish_event_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["published"]; ok {
		urlParams.Set("published", fmt.Sprintf("%v", val))
	}
	if val, ok := args["quote"]; ok {
		urlParams.Set("quote", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ref"]; ok {
		urlParams.Set("ref", fmt.Sprintf("%v", val))
	}
	if val, ok := args["referenceable_image_ids"]; ok {
		urlParams.Set("referenceable_image_ids", fmt.Sprintf("%v", val))
	}
	if val, ok := args["referral_id"]; ok {
		urlParams.Set("referral_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["scheduled_publish_time"]; ok {
		urlParams.Set("scheduled_publish_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["source"]; ok {
		urlParams.Set("source", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sponsor_id"]; ok {
		urlParams.Set("sponsor_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sponsor_relationship"]; ok {
		urlParams.Set("sponsor_relationship", fmt.Sprintf("%v", val))
	}
	if val, ok := args["suggested_place_id"]; ok {
		urlParams.Set("suggested_place_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tags"]; ok {
		urlParams.Set("tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["target_surface"]; ok {
		urlParams.Set("target_surface", fmt.Sprintf("%v", val))
	}
	if val, ok := args["targeting"]; ok {
		urlParams.Set("targeting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["text_format_metadata"]; ok {
		urlParams.Set("text_format_metadata", fmt.Sprintf("%v", val))
	}
	if val, ok := args["text_format_preset_id"]; ok {
		urlParams.Set("text_format_preset_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["text_only_place"]; ok {
		urlParams.Set("text_only_place", fmt.Sprintf("%v", val))
	}
	if val, ok := args["thumbnail"]; ok {
		urlParams.Set("thumbnail", fmt.Sprintf("%v", val))
	}
	if val, ok := args["time_since_original_post"]; ok {
		urlParams.Set("time_since_original_post", fmt.Sprintf("%v", val))
	}
	if val, ok := args["title"]; ok {
		urlParams.Set("title", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tracking_info"]; ok {
		urlParams.Set("tracking_info", fmt.Sprintf("%v", val))
	}
	if val, ok := args["unpublished_content_type"]; ok {
		urlParams.Set("unpublished_content_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["user_selected_tags"]; ok {
		urlParams.Set("user_selected_tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["video_start_time_ms"]; ok {
		urlParams.Set("video_start_time_ms", fmt.Sprintf("%v", val))
	}
	if val, ok := args["viewer_coordinates"]; ok {
		urlParams.Set("viewer_coordinates", fmt.Sprintf("%v", val))
	}
	if val, ok := args["width"]; ok {
		urlParams.Set("width", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_friends GET friends for User
func (c *UserClient) Facebook_user_get_friends(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "friends")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["uid"]; ok {
		urlParams.Set("uid", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_fundraisers GET fundraisers for User
func (c *UserClient) Facebook_user_get_fundraisers(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "fundraisers")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_post_fundraisers POST fundraisers for User
func (c *UserClient) Facebook_user_post_fundraisers(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	currency, ok := args["currency"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: currency")
	}
	_ = currency // Suppress unused variable warning
	description, ok := args["description"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: description")
	}
	_ = description // Suppress unused variable warning
	end_time, ok := args["end_time"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: end_time")
	}
	_ = end_time // Suppress unused variable warning
	external_id, ok := args["external_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: external_id")
	}
	_ = external_id // Suppress unused variable warning
	fundraiser_type, ok := args["fundraiser_type"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: fundraiser_type")
	}
	_ = fundraiser_type // Suppress unused variable warning
	goal_amount, ok := args["goal_amount"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: goal_amount")
	}
	_ = goal_amount // Suppress unused variable warning
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "fundraisers")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["charity_id"]; ok {
		urlParams.Set("charity_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["cover_photo"]; ok {
		urlParams.Set("cover_photo", fmt.Sprintf("%v", val))
	}
	if val, ok := args["currency"]; ok {
		urlParams.Set("currency", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["end_time"]; ok {
		urlParams.Set("end_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["external_event_name"]; ok {
		urlParams.Set("external_event_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["external_event_start_time"]; ok {
		urlParams.Set("external_event_start_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["external_event_uri"]; ok {
		urlParams.Set("external_event_uri", fmt.Sprintf("%v", val))
	}
	if val, ok := args["external_fundraiser_uri"]; ok {
		urlParams.Set("external_fundraiser_uri", fmt.Sprintf("%v", val))
	}
	if val, ok := args["external_id"]; ok {
		urlParams.Set("external_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fundraiser_type"]; ok {
		urlParams.Set("fundraiser_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["goal_amount"]; ok {
		urlParams.Set("goal_amount", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["page_id"]; ok {
		urlParams.Set("page_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_groups GET groups for User
func (c *UserClient) Facebook_user_get_groups(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "groups")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["admin_only"]; ok {
		urlParams.Set("admin_only", fmt.Sprintf("%v", val))
	}
	if val, ok := args["parent"]; ok {
		urlParams.Set("parent", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_ids_for_apps GET ids_for_apps for User
func (c *UserClient) Facebook_user_get_ids_for_apps(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "ids_for_apps")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["app"]; ok {
		urlParams.Set("app", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_ids_for_business GET ids_for_business for User
func (c *UserClient) Facebook_user_get_ids_for_business(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "ids_for_business")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["app"]; ok {
		urlParams.Set("app", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_ids_for_pages GET ids_for_pages for User
func (c *UserClient) Facebook_user_get_ids_for_pages(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "ids_for_pages")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["page"]; ok {
		urlParams.Set("page", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_likes GET likes for User
func (c *UserClient) Facebook_user_get_likes(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "likes")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["target_id"]; ok {
		urlParams.Set("target_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_live_videos GET live_videos for User
func (c *UserClient) Facebook_user_get_live_videos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "live_videos")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["broadcast_status"]; ok {
		urlParams.Set("broadcast_status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["source"]; ok {
		urlParams.Set("source", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_post_live_videos POST live_videos for User
func (c *UserClient) Facebook_user_post_live_videos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "live_videos")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["content_tags"]; ok {
		urlParams.Set("content_tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["enable_backup_ingest"]; ok {
		urlParams.Set("enable_backup_ingest", fmt.Sprintf("%v", val))
	}
	if val, ok := args["encoding_settings"]; ok {
		urlParams.Set("encoding_settings", fmt.Sprintf("%v", val))
	}
	if val, ok := args["event_params"]; ok {
		urlParams.Set("event_params", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fisheye_video_cropped"]; ok {
		urlParams.Set("fisheye_video_cropped", fmt.Sprintf("%v", val))
	}
	if val, ok := args["front_z_rotation"]; ok {
		urlParams.Set("front_z_rotation", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_audio_only"]; ok {
		urlParams.Set("is_audio_only", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_spherical"]; ok {
		urlParams.Set("is_spherical", fmt.Sprintf("%v", val))
	}
	if val, ok := args["original_fov"]; ok {
		urlParams.Set("original_fov", fmt.Sprintf("%v", val))
	}
	if val, ok := args["privacy"]; ok {
		urlParams.Set("privacy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["projection"]; ok {
		urlParams.Set("projection", fmt.Sprintf("%v", val))
	}
	if val, ok := args["published"]; ok {
		urlParams.Set("published", fmt.Sprintf("%v", val))
	}
	if val, ok := args["schedule_custom_profile_image"]; ok {
		urlParams.Set("schedule_custom_profile_image", fmt.Sprintf("%v", val))
	}
	if val, ok := args["spatial_audio_format"]; ok {
		urlParams.Set("spatial_audio_format", fmt.Sprintf("%v", val))
	}
	if val, ok := args["status"]; ok {
		urlParams.Set("status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["stereoscopic_mode"]; ok {
		urlParams.Set("stereoscopic_mode", fmt.Sprintf("%v", val))
	}
	if val, ok := args["stop_on_delete_stream"]; ok {
		urlParams.Set("stop_on_delete_stream", fmt.Sprintf("%v", val))
	}
	if val, ok := args["stream_type"]; ok {
		urlParams.Set("stream_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["title"]; ok {
		urlParams.Set("title", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_post_messenger_desktop_performance_traces POST messenger_desktop_performance_traces for User
func (c *UserClient) Facebook_user_post_messenger_desktop_performance_traces(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "messenger_desktop_performance_traces")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_post_messenger_kids_accounts_unread_badge POST messenger_kids_accounts_unread_badge for User
func (c *UserClient) Facebook_user_post_messenger_kids_accounts_unread_badge(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	proxied_app_id, ok := args["proxied_app_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: proxied_app_id")
	}
	_ = proxied_app_id // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "messenger_kids_accounts_unread_badge")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["proxied_app_id"]; ok {
		urlParams.Set("proxied_app_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_music GET music for User
func (c *UserClient) Facebook_user_get_music(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "music")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["target_id"]; ok {
		urlParams.Set("target_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_post_notifications POST notifications for User
func (c *UserClient) Facebook_user_post_notifications(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "notifications")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["bot_message_payload_elements"]; ok {
		urlParams.Set("bot_message_payload_elements", fmt.Sprintf("%v", val))
	}
	if val, ok := args["filtering"]; ok {
		urlParams.Set("filtering", fmt.Sprintf("%v", val))
	}
	if val, ok := args["href"]; ok {
		urlParams.Set("href", fmt.Sprintf("%v", val))
	}
	if val, ok := args["label"]; ok {
		urlParams.Set("label", fmt.Sprintf("%v", val))
	}
	if val, ok := args["message"]; ok {
		urlParams.Set("message", fmt.Sprintf("%v", val))
	}
	if val, ok := args["notif_ids"]; ok {
		urlParams.Set("notif_ids", fmt.Sprintf("%v", val))
	}
	if val, ok := args["payload"]; ok {
		urlParams.Set("payload", fmt.Sprintf("%v", val))
	}
	if val, ok := args["read"]; ok {
		urlParams.Set("read", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ref"]; ok {
		urlParams.Set("ref", fmt.Sprintf("%v", val))
	}
	if val, ok := args["schedule_interval"]; ok {
		urlParams.Set("schedule_interval", fmt.Sprintf("%v", val))
	}
	if val, ok := args["seen"]; ok {
		urlParams.Set("seen", fmt.Sprintf("%v", val))
	}
	if val, ok := args["template"]; ok {
		urlParams.Set("template", fmt.Sprintf("%v", val))
	}
	if val, ok := args["type"]; ok {
		urlParams.Set("type", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_payment_transactions GET payment_transactions for User
func (c *UserClient) Facebook_user_get_payment_transactions(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "payment_transactions")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_delete_permissions DELETE permissions for User
func (c *UserClient) Facebook_user_delete_permissions(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "permissions")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["permission"]; ok {
		urlParams.Set("permission", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_permissions GET permissions for User
func (c *UserClient) Facebook_user_get_permissions(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "permissions")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["permission"]; ok {
		urlParams.Set("permission", fmt.Sprintf("%v", val))
	}
	if val, ok := args["status"]; ok {
		urlParams.Set("status", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_personal_ad_accounts GET personal_ad_accounts for User
func (c *UserClient) Facebook_user_get_personal_ad_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "personal_ad_accounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_photos GET photos for User
func (c *UserClient) Facebook_user_get_photos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "photos")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["type"]; ok {
		urlParams.Set("type", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_post_photos POST photos for User
func (c *UserClient) Facebook_user_post_photos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "photos")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["aid"]; ok {
		urlParams.Set("aid", fmt.Sprintf("%v", val))
	}
	if val, ok := args["allow_spherical_photo"]; ok {
		urlParams.Set("allow_spherical_photo", fmt.Sprintf("%v", val))
	}
	if val, ok := args["alt_text_custom"]; ok {
		urlParams.Set("alt_text_custom", fmt.Sprintf("%v", val))
	}
	if val, ok := args["android_key_hash"]; ok {
		urlParams.Set("android_key_hash", fmt.Sprintf("%v", val))
	}
	if val, ok := args["application_id"]; ok {
		urlParams.Set("application_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["attempt"]; ok {
		urlParams.Set("attempt", fmt.Sprintf("%v", val))
	}
	if val, ok := args["audience_exp"]; ok {
		urlParams.Set("audience_exp", fmt.Sprintf("%v", val))
	}
	if val, ok := args["backdated_time"]; ok {
		urlParams.Set("backdated_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["backdated_time_granularity"]; ok {
		urlParams.Set("backdated_time_granularity", fmt.Sprintf("%v", val))
	}
	if val, ok := args["caption"]; ok {
		urlParams.Set("caption", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_session_id"]; ok {
		urlParams.Set("composer_session_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["direct_share_status"]; ok {
		urlParams.Set("direct_share_status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["feed_targeting"]; ok {
		urlParams.Set("feed_targeting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["filter_type"]; ok {
		urlParams.Set("filter_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["full_res_is_coming_later"]; ok {
		urlParams.Set("full_res_is_coming_later", fmt.Sprintf("%v", val))
	}
	if val, ok := args["initial_view_heading_override_degrees"]; ok {
		urlParams.Set("initial_view_heading_override_degrees", fmt.Sprintf("%v", val))
	}
	if val, ok := args["initial_view_pitch_override_degrees"]; ok {
		urlParams.Set("initial_view_pitch_override_degrees", fmt.Sprintf("%v", val))
	}
	if val, ok := args["initial_view_vertical_fov_override_degrees"]; ok {
		urlParams.Set("initial_view_vertical_fov_override_degrees", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ios_bundle_id"]; ok {
		urlParams.Set("ios_bundle_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_explicit_location"]; ok {
		urlParams.Set("is_explicit_location", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_explicit_place"]; ok {
		urlParams.Set("is_explicit_place", fmt.Sprintf("%v", val))
	}
	if val, ok := args["manual_privacy"]; ok {
		urlParams.Set("manual_privacy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["message"]; ok {
		urlParams.Set("message", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["no_story"]; ok {
		urlParams.Set("no_story", fmt.Sprintf("%v", val))
	}
	if val, ok := args["offline_id"]; ok {
		urlParams.Set("offline_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_action_type_id"]; ok {
		urlParams.Set("og_action_type_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_icon_id"]; ok {
		urlParams.Set("og_icon_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_object_id"]; ok {
		urlParams.Set("og_object_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_phrase"]; ok {
		urlParams.Set("og_phrase", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_set_profile_badge"]; ok {
		urlParams.Set("og_set_profile_badge", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_suggestion_mechanism"]; ok {
		urlParams.Set("og_suggestion_mechanism", fmt.Sprintf("%v", val))
	}
	if val, ok := args["place"]; ok {
		urlParams.Set("place", fmt.Sprintf("%v", val))
	}
	if val, ok := args["privacy"]; ok {
		urlParams.Set("privacy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["profile_id"]; ok {
		urlParams.Set("profile_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["provenance_info"]; ok {
		urlParams.Set("provenance_info", fmt.Sprintf("%v", val))
	}
	if val, ok := args["proxied_app_id"]; ok {
		urlParams.Set("proxied_app_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["published"]; ok {
		urlParams.Set("published", fmt.Sprintf("%v", val))
	}
	if val, ok := args["qn"]; ok {
		urlParams.Set("qn", fmt.Sprintf("%v", val))
	}
	if val, ok := args["scheduled_publish_time"]; ok {
		urlParams.Set("scheduled_publish_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["spherical_metadata"]; ok {
		urlParams.Set("spherical_metadata", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sponsor_id"]; ok {
		urlParams.Set("sponsor_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sponsor_relationship"]; ok {
		urlParams.Set("sponsor_relationship", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tags"]; ok {
		urlParams.Set("tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["target_id"]; ok {
		urlParams.Set("target_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["targeting"]; ok {
		urlParams.Set("targeting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["time_since_original_post"]; ok {
		urlParams.Set("time_since_original_post", fmt.Sprintf("%v", val))
	}
	if val, ok := args["uid"]; ok {
		urlParams.Set("uid", fmt.Sprintf("%v", val))
	}
	if val, ok := args["unpublished_content_type"]; ok {
		urlParams.Set("unpublished_content_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["url"]; ok {
		urlParams.Set("url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["user_selected_tags"]; ok {
		urlParams.Set("user_selected_tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["vault_image_id"]; ok {
		urlParams.Set("vault_image_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_picture GET picture for User
func (c *UserClient) Facebook_user_get_picture(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "picture")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["height"]; ok {
		urlParams.Set("height", fmt.Sprintf("%v", val))
	}
	if val, ok := args["redirect"]; ok {
		urlParams.Set("redirect", fmt.Sprintf("%v", val))
	}
	if val, ok := args["type"]; ok {
		urlParams.Set("type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["width"]; ok {
		urlParams.Set("width", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_posts GET posts for User
func (c *UserClient) Facebook_user_get_posts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "posts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["include_hidden"]; ok {
		urlParams.Set("include_hidden", fmt.Sprintf("%v", val))
	}
	if val, ok := args["q"]; ok {
		urlParams.Set("q", fmt.Sprintf("%v", val))
	}
	if val, ok := args["show_expired"]; ok {
		urlParams.Set("show_expired", fmt.Sprintf("%v", val))
	}
	if val, ok := args["since"]; ok {
		urlParams.Set("since", fmt.Sprintf("%v", val))
	}
	if val, ok := args["until"]; ok {
		urlParams.Set("until", fmt.Sprintf("%v", val))
	}
	if val, ok := args["with"]; ok {
		urlParams.Set("with", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_rich_media_documents GET rich_media_documents for User
func (c *UserClient) Facebook_user_get_rich_media_documents(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "rich_media_documents")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["query"]; ok {
		urlParams.Set("query", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_post_staging_resources POST staging_resources for User
func (c *UserClient) Facebook_user_post_staging_resources(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "staging_resources")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["file"]; ok {
		urlParams.Set("file", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_videos GET videos for User
func (c *UserClient) Facebook_user_get_videos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "videos")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["type"]; ok {
		urlParams.Set("type", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_post_videos POST videos for User
func (c *UserClient) Facebook_user_post_videos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "videos")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["application_id"]; ok {
		urlParams.Set("application_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["asked_fun_fact_prompt_id"]; ok {
		urlParams.Set("asked_fun_fact_prompt_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["audio_story_wave_animation_handle"]; ok {
		urlParams.Set("audio_story_wave_animation_handle", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_entry_picker"]; ok {
		urlParams.Set("composer_entry_picker", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_entry_point"]; ok {
		urlParams.Set("composer_entry_point", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_entry_time"]; ok {
		urlParams.Set("composer_entry_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_session_events_log"]; ok {
		urlParams.Set("composer_session_events_log", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_session_id"]; ok {
		urlParams.Set("composer_session_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_source_surface"]; ok {
		urlParams.Set("composer_source_surface", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_type"]; ok {
		urlParams.Set("composer_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["container_type"]; ok {
		urlParams.Set("container_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["content_category"]; ok {
		urlParams.Set("content_category", fmt.Sprintf("%v", val))
	}
	if val, ok := args["creative_tools"]; ok {
		urlParams.Set("creative_tools", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["direct_share_status"]; ok {
		urlParams.Set("direct_share_status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["embeddable"]; ok {
		urlParams.Set("embeddable", fmt.Sprintf("%v", val))
	}
	if val, ok := args["end_offset"]; ok {
		urlParams.Set("end_offset", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fbuploader_video_file_chunk"]; ok {
		urlParams.Set("fbuploader_video_file_chunk", fmt.Sprintf("%v", val))
	}
	if val, ok := args["file_size"]; ok {
		urlParams.Set("file_size", fmt.Sprintf("%v", val))
	}
	if val, ok := args["file_url"]; ok {
		urlParams.Set("file_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fisheye_video_cropped"]; ok {
		urlParams.Set("fisheye_video_cropped", fmt.Sprintf("%v", val))
	}
	if val, ok := args["formatting"]; ok {
		urlParams.Set("formatting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fov"]; ok {
		urlParams.Set("fov", fmt.Sprintf("%v", val))
	}
	if val, ok := args["front_z_rotation"]; ok {
		urlParams.Set("front_z_rotation", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fun_fact_prompt_id"]; ok {
		urlParams.Set("fun_fact_prompt_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fun_fact_toastee_id"]; ok {
		urlParams.Set("fun_fact_toastee_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["guide"]; ok {
		urlParams.Set("guide", fmt.Sprintf("%v", val))
	}
	if val, ok := args["guide_enabled"]; ok {
		urlParams.Set("guide_enabled", fmt.Sprintf("%v", val))
	}
	if val, ok := args["initial_heading"]; ok {
		urlParams.Set("initial_heading", fmt.Sprintf("%v", val))
	}
	if val, ok := args["initial_pitch"]; ok {
		urlParams.Set("initial_pitch", fmt.Sprintf("%v", val))
	}
	if val, ok := args["instant_game_entry_point_data"]; ok {
		urlParams.Set("instant_game_entry_point_data", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_boost_intended"]; ok {
		urlParams.Set("is_boost_intended", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_explicit_share"]; ok {
		urlParams.Set("is_explicit_share", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_group_linking_post"]; ok {
		urlParams.Set("is_group_linking_post", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_partnership_ad"]; ok {
		urlParams.Set("is_partnership_ad", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_voice_clip"]; ok {
		urlParams.Set("is_voice_clip", fmt.Sprintf("%v", val))
	}
	if val, ok := args["location_source_id"]; ok {
		urlParams.Set("location_source_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["manual_privacy"]; ok {
		urlParams.Set("manual_privacy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["no_story"]; ok {
		urlParams.Set("no_story", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_action_type_id"]; ok {
		urlParams.Set("og_action_type_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_icon_id"]; ok {
		urlParams.Set("og_icon_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_object_id"]; ok {
		urlParams.Set("og_object_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_phrase"]; ok {
		urlParams.Set("og_phrase", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_suggestion_mechanism"]; ok {
		urlParams.Set("og_suggestion_mechanism", fmt.Sprintf("%v", val))
	}
	if val, ok := args["original_fov"]; ok {
		urlParams.Set("original_fov", fmt.Sprintf("%v", val))
	}
	if val, ok := args["original_projection_type"]; ok {
		urlParams.Set("original_projection_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["partnership_ad_ad_code"]; ok {
		urlParams.Set("partnership_ad_ad_code", fmt.Sprintf("%v", val))
	}
	if val, ok := args["privacy"]; ok {
		urlParams.Set("privacy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["publish_event_id"]; ok {
		urlParams.Set("publish_event_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["referenced_sticker_id"]; ok {
		urlParams.Set("referenced_sticker_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["replace_video_id"]; ok {
		urlParams.Set("replace_video_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["slideshow_spec"]; ok {
		urlParams.Set("slideshow_spec", fmt.Sprintf("%v", val))
	}
	if val, ok := args["source"]; ok {
		urlParams.Set("source", fmt.Sprintf("%v", val))
	}
	if val, ok := args["source_instagram_media_id"]; ok {
		urlParams.Set("source_instagram_media_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["spherical"]; ok {
		urlParams.Set("spherical", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sponsor_id"]; ok {
		urlParams.Set("sponsor_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["start_offset"]; ok {
		urlParams.Set("start_offset", fmt.Sprintf("%v", val))
	}
	if val, ok := args["swap_mode"]; ok {
		urlParams.Set("swap_mode", fmt.Sprintf("%v", val))
	}
	if val, ok := args["text_format_metadata"]; ok {
		urlParams.Set("text_format_metadata", fmt.Sprintf("%v", val))
	}
	if val, ok := args["thumb"]; ok {
		urlParams.Set("thumb", fmt.Sprintf("%v", val))
	}
	if val, ok := args["time_since_original_post"]; ok {
		urlParams.Set("time_since_original_post", fmt.Sprintf("%v", val))
	}
	if val, ok := args["title"]; ok {
		urlParams.Set("title", fmt.Sprintf("%v", val))
	}
	if val, ok := args["transcode_setting_properties"]; ok {
		urlParams.Set("transcode_setting_properties", fmt.Sprintf("%v", val))
	}
	if val, ok := args["unpublished_content_type"]; ok {
		urlParams.Set("unpublished_content_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["upload_phase"]; ok {
		urlParams.Set("upload_phase", fmt.Sprintf("%v", val))
	}
	if val, ok := args["upload_session_id"]; ok {
		urlParams.Set("upload_session_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["upload_setting_properties"]; ok {
		urlParams.Set("upload_setting_properties", fmt.Sprintf("%v", val))
	}
	if val, ok := args["video_file_chunk"]; ok {
		urlParams.Set("video_file_chunk", fmt.Sprintf("%v", val))
	}
	if val, ok := args["video_id_original"]; ok {
		urlParams.Set("video_id_original", fmt.Sprintf("%v", val))
	}
	if val, ok := args["video_start_time_ms"]; ok {
		urlParams.Set("video_start_time_ms", fmt.Sprintf("%v", val))
	}
	if val, ok := args["waterfall_id"]; ok {
		urlParams.Set("waterfall_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_delete_ DELETE  for User
func (c *UserClient) Facebook_user_delete_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_get_ GET  for User
func (c *UserClient) Facebook_user_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_user_post_ POST  for User
func (c *UserClient) Facebook_user_post_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["emoji_color_pref"]; ok {
		urlParams.Set("emoji_color_pref", fmt.Sprintf("%v", val))
	}
	if val, ok := args["firstname"]; ok {
		urlParams.Set("firstname", fmt.Sprintf("%v", val))
	}
	if val, ok := args["lastname"]; ok {
		urlParams.Set("lastname", fmt.Sprintf("%v", val))
	}
	if val, ok := args["local_news_megaphone_dismiss_status"]; ok {
		urlParams.Set("local_news_megaphone_dismiss_status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["local_news_subscription_status"]; ok {
		urlParams.Set("local_news_subscription_status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["password"]; ok {
		urlParams.Set("password", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

