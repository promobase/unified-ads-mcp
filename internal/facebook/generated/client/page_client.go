// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// PageClient provides methods for Page operations
type PageClient struct {
	accessToken string
}

// NewPageClient creates a new Page client
func NewPageClient(accessToken string) *PageClient {
	return &PageClient{
		accessToken: accessToken,
	}
}

// facebook_page_get_ab_tests GET ab_tests for Page
func (c *PageClient) Facebook_page_get_ab_tests(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "ab_tests")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_ab_tests POST ab_tests for Page
func (c *PageClient) Facebook_page_post_ab_tests(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	control_video_id, ok := args["control_video_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: control_video_id")
	}
	_ = control_video_id // Suppress unused variable warning
	description, ok := args["description"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: description")
	}
	_ = description // Suppress unused variable warning
	duration, ok := args["duration"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: duration")
	}
	_ = duration // Suppress unused variable warning
	experiment_video_ids, ok := args["experiment_video_ids"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: experiment_video_ids")
	}
	_ = experiment_video_ids // Suppress unused variable warning
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning
	optimization_goal, ok := args["optimization_goal"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: optimization_goal")
	}
	_ = optimization_goal // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "ab_tests")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["control_video_id"]; ok {
		urlParams.Set("control_video_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["duration"]; ok {
		urlParams.Set("duration", fmt.Sprintf("%v", val))
	}
	if val, ok := args["experiment_video_ids"]; ok {
		urlParams.Set("experiment_video_ids", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["optimization_goal"]; ok {
		urlParams.Set("optimization_goal", fmt.Sprintf("%v", val))
	}
	if val, ok := args["scheduled_experiment_timestamp"]; ok {
		urlParams.Set("scheduled_experiment_timestamp", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_acknowledge_orders POST acknowledge_orders for Page
func (c *PageClient) Facebook_page_post_acknowledge_orders(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	idempotency_key, ok := args["idempotency_key"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: idempotency_key")
	}
	_ = idempotency_key // Suppress unused variable warning
	orders, ok := args["orders"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: orders")
	}
	_ = orders // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "acknowledge_orders")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["idempotency_key"]; ok {
		urlParams.Set("idempotency_key", fmt.Sprintf("%v", val))
	}
	if val, ok := args["orders"]; ok {
		urlParams.Set("orders", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_ads_posts GET ads_posts for Page
func (c *PageClient) Facebook_page_get_ads_posts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "ads_posts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["exclude_dynamic_ads"]; ok {
		urlParams.Set("exclude_dynamic_ads", fmt.Sprintf("%v", val))
	}
	if val, ok := args["include_inline_create"]; ok {
		urlParams.Set("include_inline_create", fmt.Sprintf("%v", val))
	}
	if val, ok := args["since"]; ok {
		urlParams.Set("since", fmt.Sprintf("%v", val))
	}
	if val, ok := args["until"]; ok {
		urlParams.Set("until", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_delete_agencies DELETE agencies for Page
func (c *PageClient) Facebook_page_delete_agencies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	business, ok := args["business"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: business")
	}
	_ = business // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "agencies")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["business"]; ok {
		urlParams.Set("business", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_agencies GET agencies for Page
func (c *PageClient) Facebook_page_get_agencies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "agencies")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_agencies POST agencies for Page
func (c *PageClient) Facebook_page_post_agencies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	business, ok := args["business"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: business")
	}
	_ = business // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "agencies")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["business"]; ok {
		urlParams.Set("business", fmt.Sprintf("%v", val))
	}
	if val, ok := args["permitted_tasks"]; ok {
		urlParams.Set("permitted_tasks", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_albums GET albums for Page
func (c *PageClient) Facebook_page_get_albums(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "albums")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_ar_experience GET ar_experience for Page
func (c *PageClient) Facebook_page_get_ar_experience(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "ar_experience")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_delete_assigned_users DELETE assigned_users for Page
func (c *PageClient) Facebook_page_delete_assigned_users(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	user, ok := args["user"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: user")
	}
	_ = user // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "assigned_users")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["user"]; ok {
		urlParams.Set("user", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_assigned_users GET assigned_users for Page
func (c *PageClient) Facebook_page_get_assigned_users(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	business, ok := args["business"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: business")
	}
	_ = business // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "assigned_users")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["business"]; ok {
		urlParams.Set("business", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_assigned_users POST assigned_users for Page
func (c *PageClient) Facebook_page_post_assigned_users(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	user, ok := args["user"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: user")
	}
	_ = user // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "assigned_users")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["tasks"]; ok {
		urlParams.Set("tasks", fmt.Sprintf("%v", val))
	}
	if val, ok := args["user"]; ok {
		urlParams.Set("user", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_delete_blocked DELETE blocked for Page
func (c *PageClient) Facebook_page_delete_blocked(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "blocked")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["asid"]; ok {
		urlParams.Set("asid", fmt.Sprintf("%v", val))
	}
	if val, ok := args["psid"]; ok {
		urlParams.Set("psid", fmt.Sprintf("%v", val))
	}
	if val, ok := args["uid"]; ok {
		urlParams.Set("uid", fmt.Sprintf("%v", val))
	}
	if val, ok := args["user"]; ok {
		urlParams.Set("user", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_blocked GET blocked for Page
func (c *PageClient) Facebook_page_get_blocked(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "blocked")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["uid"]; ok {
		urlParams.Set("uid", fmt.Sprintf("%v", val))
	}
	if val, ok := args["user"]; ok {
		urlParams.Set("user", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_blocked POST blocked for Page
func (c *PageClient) Facebook_page_post_blocked(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "blocked")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["asid"]; ok {
		urlParams.Set("asid", fmt.Sprintf("%v", val))
	}
	if val, ok := args["psid"]; ok {
		urlParams.Set("psid", fmt.Sprintf("%v", val))
	}
	if val, ok := args["uid"]; ok {
		urlParams.Set("uid", fmt.Sprintf("%v", val))
	}
	if val, ok := args["user"]; ok {
		urlParams.Set("user", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_business_data POST business_data for Page
func (c *PageClient) Facebook_page_post_business_data(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	data, ok := args["data"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: data")
	}
	_ = data // Suppress unused variable warning
	partner_agent, ok := args["partner_agent"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: partner_agent")
	}
	_ = partner_agent // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "business_data")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["data"]; ok {
		urlParams.Set("data", fmt.Sprintf("%v", val))
	}
	if val, ok := args["partner_agent"]; ok {
		urlParams.Set("partner_agent", fmt.Sprintf("%v", val))
	}
	if val, ok := args["processing_type"]; ok {
		urlParams.Set("processing_type", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_businessprojects GET businessprojects for Page
func (c *PageClient) Facebook_page_get_businessprojects(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "businessprojects")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["business"]; ok {
		urlParams.Set("business", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_call_to_actions GET call_to_actions for Page
func (c *PageClient) Facebook_page_get_call_to_actions(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "call_to_actions")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_calls POST calls for Page
func (c *PageClient) Facebook_page_post_calls(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	action, ok := args["action"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: action")
	}
	_ = action // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "calls")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["action"]; ok {
		urlParams.Set("action", fmt.Sprintf("%v", val))
	}
	if val, ok := args["call_id"]; ok {
		urlParams.Set("call_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["platform"]; ok {
		urlParams.Set("platform", fmt.Sprintf("%v", val))
	}
	if val, ok := args["session"]; ok {
		urlParams.Set("session", fmt.Sprintf("%v", val))
	}
	if val, ok := args["to"]; ok {
		urlParams.Set("to", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_canvas_elements GET canvas_elements for Page
func (c *PageClient) Facebook_page_get_canvas_elements(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "canvas_elements")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_canvas_elements POST canvas_elements for Page
func (c *PageClient) Facebook_page_post_canvas_elements(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "canvas_elements")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["canvas_button"]; ok {
		urlParams.Set("canvas_button", fmt.Sprintf("%v", val))
	}
	if val, ok := args["canvas_carousel"]; ok {
		urlParams.Set("canvas_carousel", fmt.Sprintf("%v", val))
	}
	if val, ok := args["canvas_footer"]; ok {
		urlParams.Set("canvas_footer", fmt.Sprintf("%v", val))
	}
	if val, ok := args["canvas_header"]; ok {
		urlParams.Set("canvas_header", fmt.Sprintf("%v", val))
	}
	if val, ok := args["canvas_lead_form"]; ok {
		urlParams.Set("canvas_lead_form", fmt.Sprintf("%v", val))
	}
	if val, ok := args["canvas_photo"]; ok {
		urlParams.Set("canvas_photo", fmt.Sprintf("%v", val))
	}
	if val, ok := args["canvas_product_list"]; ok {
		urlParams.Set("canvas_product_list", fmt.Sprintf("%v", val))
	}
	if val, ok := args["canvas_product_set"]; ok {
		urlParams.Set("canvas_product_set", fmt.Sprintf("%v", val))
	}
	if val, ok := args["canvas_store_locator"]; ok {
		urlParams.Set("canvas_store_locator", fmt.Sprintf("%v", val))
	}
	if val, ok := args["canvas_template_video"]; ok {
		urlParams.Set("canvas_template_video", fmt.Sprintf("%v", val))
	}
	if val, ok := args["canvas_text"]; ok {
		urlParams.Set("canvas_text", fmt.Sprintf("%v", val))
	}
	if val, ok := args["canvas_video"]; ok {
		urlParams.Set("canvas_video", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_canvases GET canvases for Page
func (c *PageClient) Facebook_page_get_canvases(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "canvases")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["is_hidden"]; ok {
		urlParams.Set("is_hidden", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_published"]; ok {
		urlParams.Set("is_published", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_canvases POST canvases for Page
func (c *PageClient) Facebook_page_post_canvases(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "canvases")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["background_color"]; ok {
		urlParams.Set("background_color", fmt.Sprintf("%v", val))
	}
	if val, ok := args["body_element_ids"]; ok {
		urlParams.Set("body_element_ids", fmt.Sprintf("%v", val))
	}
	if val, ok := args["enable_swipe_to_open"]; ok {
		urlParams.Set("enable_swipe_to_open", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_hidden"]; ok {
		urlParams.Set("is_hidden", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_published"]; ok {
		urlParams.Set("is_published", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["source_template_id"]; ok {
		urlParams.Set("source_template_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_chat_plugin GET chat_plugin for Page
func (c *PageClient) Facebook_page_get_chat_plugin(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "chat_plugin")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_commerce_merchant_settings GET commerce_merchant_settings for Page
func (c *PageClient) Facebook_page_get_commerce_merchant_settings(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "commerce_merchant_settings")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_commerce_orders GET commerce_orders for Page
func (c *PageClient) Facebook_page_get_commerce_orders(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "commerce_orders")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["filters"]; ok {
		urlParams.Set("filters", fmt.Sprintf("%v", val))
	}
	if val, ok := args["state"]; ok {
		urlParams.Set("state", fmt.Sprintf("%v", val))
	}
	if val, ok := args["updated_after"]; ok {
		urlParams.Set("updated_after", fmt.Sprintf("%v", val))
	}
	if val, ok := args["updated_before"]; ok {
		urlParams.Set("updated_before", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_commerce_payouts GET commerce_payouts for Page
func (c *PageClient) Facebook_page_get_commerce_payouts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "commerce_payouts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["end_time"]; ok {
		urlParams.Set("end_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["start_time"]; ok {
		urlParams.Set("start_time", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_commerce_transactions GET commerce_transactions for Page
func (c *PageClient) Facebook_page_get_commerce_transactions(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "commerce_transactions")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["end_time"]; ok {
		urlParams.Set("end_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["payout_reference_id"]; ok {
		urlParams.Set("payout_reference_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["start_time"]; ok {
		urlParams.Set("start_time", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_conversations GET conversations for Page
func (c *PageClient) Facebook_page_get_conversations(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "conversations")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["folder"]; ok {
		urlParams.Set("folder", fmt.Sprintf("%v", val))
	}
	if val, ok := args["platform"]; ok {
		urlParams.Set("platform", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tags"]; ok {
		urlParams.Set("tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["user_id"]; ok {
		urlParams.Set("user_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_copyright_manual_claims POST copyright_manual_claims for Page
func (c *PageClient) Facebook_page_post_copyright_manual_claims(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	match_content_type, ok := args["match_content_type"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: match_content_type")
	}
	_ = match_content_type // Suppress unused variable warning
	matched_asset_id, ok := args["matched_asset_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: matched_asset_id")
	}
	_ = matched_asset_id // Suppress unused variable warning
	reference_asset_id, ok := args["reference_asset_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: reference_asset_id")
	}
	_ = reference_asset_id // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "copyright_manual_claims")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["action"]; ok {
		urlParams.Set("action", fmt.Sprintf("%v", val))
	}
	if val, ok := args["action_reason"]; ok {
		urlParams.Set("action_reason", fmt.Sprintf("%v", val))
	}
	if val, ok := args["countries"]; ok {
		urlParams.Set("countries", fmt.Sprintf("%v", val))
	}
	if val, ok := args["match_content_type"]; ok {
		urlParams.Set("match_content_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["matched_asset_id"]; ok {
		urlParams.Set("matched_asset_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["reference_asset_id"]; ok {
		urlParams.Set("reference_asset_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["selected_segments"]; ok {
		urlParams.Set("selected_segments", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_crosspost_whitelisted_pages GET crosspost_whitelisted_pages for Page
func (c *PageClient) Facebook_page_get_crosspost_whitelisted_pages(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "crosspost_whitelisted_pages")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_ctx_optimization_eligibility GET ctx_optimization_eligibility for Page
func (c *PageClient) Facebook_page_get_ctx_optimization_eligibility(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "ctx_optimization_eligibility")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_custom_labels GET custom_labels for Page
func (c *PageClient) Facebook_page_get_custom_labels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "custom_labels")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_custom_labels POST custom_labels for Page
func (c *PageClient) Facebook_page_post_custom_labels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	page_label_name, ok := args["page_label_name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: page_label_name")
	}
	_ = page_label_name // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "custom_labels")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["page_label_name"]; ok {
		urlParams.Set("page_label_name", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_delete_custom_user_settings DELETE custom_user_settings for Page
func (c *PageClient) Facebook_page_delete_custom_user_settings(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning
	psid, ok := args["psid"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: psid")
	}
	_ = psid // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "custom_user_settings")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["params"]; ok {
		urlParams.Set("params", fmt.Sprintf("%v", val))
	}
	if val, ok := args["psid"]; ok {
		urlParams.Set("psid", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_custom_user_settings GET custom_user_settings for Page
func (c *PageClient) Facebook_page_get_custom_user_settings(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	psid, ok := args["psid"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: psid")
	}
	_ = psid // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "custom_user_settings")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["psid"]; ok {
		urlParams.Set("psid", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_custom_user_settings POST custom_user_settings for Page
func (c *PageClient) Facebook_page_post_custom_user_settings(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	psid, ok := args["psid"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: psid")
	}
	_ = psid // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "custom_user_settings")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["persistent_menu"]; ok {
		urlParams.Set("persistent_menu", fmt.Sprintf("%v", val))
	}
	if val, ok := args["psid"]; ok {
		urlParams.Set("psid", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_dataset GET dataset for Page
func (c *PageClient) Facebook_page_get_dataset(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "dataset")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_dataset POST dataset for Page
func (c *PageClient) Facebook_page_post_dataset(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "dataset")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["dataset_name"]; ok {
		urlParams.Set("dataset_name", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_events GET events for Page
func (c *PageClient) Facebook_page_get_events(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "events")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["event_state_filter"]; ok {
		urlParams.Set("event_state_filter", fmt.Sprintf("%v", val))
	}
	if val, ok := args["include_canceled"]; ok {
		urlParams.Set("include_canceled", fmt.Sprintf("%v", val))
	}
	if val, ok := args["time_filter"]; ok {
		urlParams.Set("time_filter", fmt.Sprintf("%v", val))
	}
	if val, ok := args["type"]; ok {
		urlParams.Set("type", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_extend_thread_control POST extend_thread_control for Page
func (c *PageClient) Facebook_page_post_extend_thread_control(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	recipient, ok := args["recipient"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: recipient")
	}
	_ = recipient // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "extend_thread_control")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["duration"]; ok {
		urlParams.Set("duration", fmt.Sprintf("%v", val))
	}
	if val, ok := args["recipient"]; ok {
		urlParams.Set("recipient", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_fantasy_games GET fantasy_games for Page
func (c *PageClient) Facebook_page_get_fantasy_games(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "fantasy_games")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_feed GET feed for Page
func (c *PageClient) Facebook_page_get_feed(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "feed")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["include_hidden"]; ok {
		urlParams.Set("include_hidden", fmt.Sprintf("%v", val))
	}
	if val, ok := args["limit"]; ok {
		urlParams.Set("limit", fmt.Sprintf("%v", val))
	}
	if val, ok := args["show_expired"]; ok {
		urlParams.Set("show_expired", fmt.Sprintf("%v", val))
	}
	if val, ok := args["with"]; ok {
		urlParams.Set("with", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_feed POST feed for Page
func (c *PageClient) Facebook_page_post_feed(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "feed")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["actions"]; ok {
		urlParams.Set("actions", fmt.Sprintf("%v", val))
	}
	if val, ok := args["album_id"]; ok {
		urlParams.Set("album_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["android_key_hash"]; ok {
		urlParams.Set("android_key_hash", fmt.Sprintf("%v", val))
	}
	if val, ok := args["application_id"]; ok {
		urlParams.Set("application_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["asked_fun_fact_prompt_id"]; ok {
		urlParams.Set("asked_fun_fact_prompt_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["asset3d_id"]; ok {
		urlParams.Set("asset3d_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["associated_id"]; ok {
		urlParams.Set("associated_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["attach_place_suggestion"]; ok {
		urlParams.Set("attach_place_suggestion", fmt.Sprintf("%v", val))
	}
	if val, ok := args["attached_media"]; ok {
		urlParams.Set("attached_media", fmt.Sprintf("%v", val))
	}
	if val, ok := args["audience_exp"]; ok {
		urlParams.Set("audience_exp", fmt.Sprintf("%v", val))
	}
	if val, ok := args["backdated_time"]; ok {
		urlParams.Set("backdated_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["backdated_time_granularity"]; ok {
		urlParams.Set("backdated_time_granularity", fmt.Sprintf("%v", val))
	}
	if val, ok := args["breaking_news"]; ok {
		urlParams.Set("breaking_news", fmt.Sprintf("%v", val))
	}
	if val, ok := args["breaking_news_expiration"]; ok {
		urlParams.Set("breaking_news_expiration", fmt.Sprintf("%v", val))
	}
	if val, ok := args["call_to_action"]; ok {
		urlParams.Set("call_to_action", fmt.Sprintf("%v", val))
	}
	if val, ok := args["caption"]; ok {
		urlParams.Set("caption", fmt.Sprintf("%v", val))
	}
	if val, ok := args["child_attachments"]; ok {
		urlParams.Set("child_attachments", fmt.Sprintf("%v", val))
	}
	if val, ok := args["client_mutation_id"]; ok {
		urlParams.Set("client_mutation_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_entry_picker"]; ok {
		urlParams.Set("composer_entry_picker", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_entry_point"]; ok {
		urlParams.Set("composer_entry_point", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_entry_time"]; ok {
		urlParams.Set("composer_entry_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_session_events_log"]; ok {
		urlParams.Set("composer_session_events_log", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_session_id"]; ok {
		urlParams.Set("composer_session_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_source_surface"]; ok {
		urlParams.Set("composer_source_surface", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_type"]; ok {
		urlParams.Set("composer_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["connection_class"]; ok {
		urlParams.Set("connection_class", fmt.Sprintf("%v", val))
	}
	if val, ok := args["content_attachment"]; ok {
		urlParams.Set("content_attachment", fmt.Sprintf("%v", val))
	}
	if val, ok := args["coordinates"]; ok {
		urlParams.Set("coordinates", fmt.Sprintf("%v", val))
	}
	if val, ok := args["cta_link"]; ok {
		urlParams.Set("cta_link", fmt.Sprintf("%v", val))
	}
	if val, ok := args["cta_type"]; ok {
		urlParams.Set("cta_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["direct_share_status"]; ok {
		urlParams.Set("direct_share_status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["enforce_link_ownership"]; ok {
		urlParams.Set("enforce_link_ownership", fmt.Sprintf("%v", val))
	}
	if val, ok := args["expanded_height"]; ok {
		urlParams.Set("expanded_height", fmt.Sprintf("%v", val))
	}
	if val, ok := args["expanded_width"]; ok {
		urlParams.Set("expanded_width", fmt.Sprintf("%v", val))
	}
	if val, ok := args["feed_targeting"]; ok {
		urlParams.Set("feed_targeting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["formatting"]; ok {
		urlParams.Set("formatting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fun_fact_prompt_id"]; ok {
		urlParams.Set("fun_fact_prompt_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fun_fact_toastee_id"]; ok {
		urlParams.Set("fun_fact_toastee_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["height"]; ok {
		urlParams.Set("height", fmt.Sprintf("%v", val))
	}
	if val, ok := args["home_checkin_city_id"]; ok {
		urlParams.Set("home_checkin_city_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["image_crops"]; ok {
		urlParams.Set("image_crops", fmt.Sprintf("%v", val))
	}
	if val, ok := args["implicit_with_tags"]; ok {
		urlParams.Set("implicit_with_tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["instant_game_entry_point_data"]; ok {
		urlParams.Set("instant_game_entry_point_data", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ios_bundle_id"]; ok {
		urlParams.Set("ios_bundle_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_backout_draft"]; ok {
		urlParams.Set("is_backout_draft", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_boost_intended"]; ok {
		urlParams.Set("is_boost_intended", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_explicit_location"]; ok {
		urlParams.Set("is_explicit_location", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_explicit_share"]; ok {
		urlParams.Set("is_explicit_share", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_group_linking_post"]; ok {
		urlParams.Set("is_group_linking_post", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_photo_container"]; ok {
		urlParams.Set("is_photo_container", fmt.Sprintf("%v", val))
	}
	if val, ok := args["link"]; ok {
		urlParams.Set("link", fmt.Sprintf("%v", val))
	}
	if val, ok := args["location_source_id"]; ok {
		urlParams.Set("location_source_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["manual_privacy"]; ok {
		urlParams.Set("manual_privacy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["message"]; ok {
		urlParams.Set("message", fmt.Sprintf("%v", val))
	}
	if val, ok := args["multi_share_end_card"]; ok {
		urlParams.Set("multi_share_end_card", fmt.Sprintf("%v", val))
	}
	if val, ok := args["multi_share_optimized"]; ok {
		urlParams.Set("multi_share_optimized", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["nectar_module"]; ok {
		urlParams.Set("nectar_module", fmt.Sprintf("%v", val))
	}
	if val, ok := args["object_attachment"]; ok {
		urlParams.Set("object_attachment", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_action_type_id"]; ok {
		urlParams.Set("og_action_type_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_hide_object_attachment"]; ok {
		urlParams.Set("og_hide_object_attachment", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_icon_id"]; ok {
		urlParams.Set("og_icon_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_object_id"]; ok {
		urlParams.Set("og_object_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_phrase"]; ok {
		urlParams.Set("og_phrase", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_set_profile_badge"]; ok {
		urlParams.Set("og_set_profile_badge", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_suggestion_mechanism"]; ok {
		urlParams.Set("og_suggestion_mechanism", fmt.Sprintf("%v", val))
	}
	if val, ok := args["page_recommendation"]; ok {
		urlParams.Set("page_recommendation", fmt.Sprintf("%v", val))
	}
	if val, ok := args["picture"]; ok {
		urlParams.Set("picture", fmt.Sprintf("%v", val))
	}
	if val, ok := args["place"]; ok {
		urlParams.Set("place", fmt.Sprintf("%v", val))
	}
	if val, ok := args["place_attachment_setting"]; ok {
		urlParams.Set("place_attachment_setting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["place_list"]; ok {
		urlParams.Set("place_list", fmt.Sprintf("%v", val))
	}
	if val, ok := args["place_list_data"]; ok {
		urlParams.Set("place_list_data", fmt.Sprintf("%v", val))
	}
	if val, ok := args["post_surfaces_blacklist"]; ok {
		urlParams.Set("post_surfaces_blacklist", fmt.Sprintf("%v", val))
	}
	if val, ok := args["posting_to_redspace"]; ok {
		urlParams.Set("posting_to_redspace", fmt.Sprintf("%v", val))
	}
	if val, ok := args["privacy"]; ok {
		urlParams.Set("privacy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["prompt_id"]; ok {
		urlParams.Set("prompt_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["prompt_tracking_string"]; ok {
		urlParams.Set("prompt_tracking_string", fmt.Sprintf("%v", val))
	}
	if val, ok := args["properties"]; ok {
		urlParams.Set("properties", fmt.Sprintf("%v", val))
	}
	if val, ok := args["proxied_app_id"]; ok {
		urlParams.Set("proxied_app_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["publish_event_id"]; ok {
		urlParams.Set("publish_event_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["published"]; ok {
		urlParams.Set("published", fmt.Sprintf("%v", val))
	}
	if val, ok := args["quote"]; ok {
		urlParams.Set("quote", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ref"]; ok {
		urlParams.Set("ref", fmt.Sprintf("%v", val))
	}
	if val, ok := args["referenceable_image_ids"]; ok {
		urlParams.Set("referenceable_image_ids", fmt.Sprintf("%v", val))
	}
	if val, ok := args["referral_id"]; ok {
		urlParams.Set("referral_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["scheduled_publish_time"]; ok {
		urlParams.Set("scheduled_publish_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["source"]; ok {
		urlParams.Set("source", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sponsor_id"]; ok {
		urlParams.Set("sponsor_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sponsor_relationship"]; ok {
		urlParams.Set("sponsor_relationship", fmt.Sprintf("%v", val))
	}
	if val, ok := args["suggested_place_id"]; ok {
		urlParams.Set("suggested_place_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tags"]; ok {
		urlParams.Set("tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["target_surface"]; ok {
		urlParams.Set("target_surface", fmt.Sprintf("%v", val))
	}
	if val, ok := args["targeting"]; ok {
		urlParams.Set("targeting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["text_format_metadata"]; ok {
		urlParams.Set("text_format_metadata", fmt.Sprintf("%v", val))
	}
	if val, ok := args["text_format_preset_id"]; ok {
		urlParams.Set("text_format_preset_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["text_only_place"]; ok {
		urlParams.Set("text_only_place", fmt.Sprintf("%v", val))
	}
	if val, ok := args["thumbnail"]; ok {
		urlParams.Set("thumbnail", fmt.Sprintf("%v", val))
	}
	if val, ok := args["time_since_original_post"]; ok {
		urlParams.Set("time_since_original_post", fmt.Sprintf("%v", val))
	}
	if val, ok := args["title"]; ok {
		urlParams.Set("title", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tracking_info"]; ok {
		urlParams.Set("tracking_info", fmt.Sprintf("%v", val))
	}
	if val, ok := args["unpublished_content_type"]; ok {
		urlParams.Set("unpublished_content_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["user_selected_tags"]; ok {
		urlParams.Set("user_selected_tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["video_start_time_ms"]; ok {
		urlParams.Set("video_start_time_ms", fmt.Sprintf("%v", val))
	}
	if val, ok := args["viewer_coordinates"]; ok {
		urlParams.Set("viewer_coordinates", fmt.Sprintf("%v", val))
	}
	if val, ok := args["width"]; ok {
		urlParams.Set("width", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_global_brand_children GET global_brand_children for Page
func (c *PageClient) Facebook_page_get_global_brand_children(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "global_brand_children")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_image_copyrights GET image_copyrights for Page
func (c *PageClient) Facebook_page_get_image_copyrights(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "image_copyrights")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_image_copyrights POST image_copyrights for Page
func (c *PageClient) Facebook_page_post_image_copyrights(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	filename, ok := args["filename"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: filename")
	}
	_ = filename // Suppress unused variable warning
	geo_ownership, ok := args["geo_ownership"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: geo_ownership")
	}
	_ = geo_ownership // Suppress unused variable warning
	reference_photo, ok := args["reference_photo"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: reference_photo")
	}
	_ = reference_photo // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "image_copyrights")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["artist"]; ok {
		urlParams.Set("artist", fmt.Sprintf("%v", val))
	}
	if val, ok := args["attribution_link"]; ok {
		urlParams.Set("attribution_link", fmt.Sprintf("%v", val))
	}
	if val, ok := args["creator"]; ok {
		urlParams.Set("creator", fmt.Sprintf("%v", val))
	}
	if val, ok := args["custom_id"]; ok {
		urlParams.Set("custom_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["filename"]; ok {
		urlParams.Set("filename", fmt.Sprintf("%v", val))
	}
	if val, ok := args["geo_ownership"]; ok {
		urlParams.Set("geo_ownership", fmt.Sprintf("%v", val))
	}
	if val, ok := args["original_content_creation_date"]; ok {
		urlParams.Set("original_content_creation_date", fmt.Sprintf("%v", val))
	}
	if val, ok := args["reference_photo"]; ok {
		urlParams.Set("reference_photo", fmt.Sprintf("%v", val))
	}
	if val, ok := args["title"]; ok {
		urlParams.Set("title", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_indexed_videos GET indexed_videos for Page
func (c *PageClient) Facebook_page_get_indexed_videos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "indexed_videos")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_insights GET insights for Page
func (c *PageClient) Facebook_page_get_insights(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "insights")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["breakdown"]; ok {
		urlParams.Set("breakdown", fmt.Sprintf("%v", val))
	}
	if val, ok := args["date_preset"]; ok {
		urlParams.Set("date_preset", fmt.Sprintf("%v", val))
	}
	if val, ok := args["metric"]; ok {
		urlParams.Set("metric", fmt.Sprintf("%v", val))
	}
	if val, ok := args["period"]; ok {
		urlParams.Set("period", fmt.Sprintf("%v", val))
	}
	if val, ok := args["show_description_from_api_doc"]; ok {
		urlParams.Set("show_description_from_api_doc", fmt.Sprintf("%v", val))
	}
	if val, ok := args["since"]; ok {
		urlParams.Set("since", fmt.Sprintf("%v", val))
	}
	if val, ok := args["until"]; ok {
		urlParams.Set("until", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_instagram_accounts GET instagram_accounts for Page
func (c *PageClient) Facebook_page_get_instagram_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "instagram_accounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_leadgen_forms GET leadgen_forms for Page
func (c *PageClient) Facebook_page_get_leadgen_forms(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "leadgen_forms")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_leadgen_forms POST leadgen_forms for Page
func (c *PageClient) Facebook_page_post_leadgen_forms(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning
	questions, ok := args["questions"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: questions")
	}
	_ = questions // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "leadgen_forms")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["allow_organic_lead_retrieval"]; ok {
		urlParams.Set("allow_organic_lead_retrieval", fmt.Sprintf("%v", val))
	}
	if val, ok := args["block_display_for_non_targeted_viewer"]; ok {
		urlParams.Set("block_display_for_non_targeted_viewer", fmt.Sprintf("%v", val))
	}
	if val, ok := args["context_card"]; ok {
		urlParams.Set("context_card", fmt.Sprintf("%v", val))
	}
	if val, ok := args["cover_photo"]; ok {
		urlParams.Set("cover_photo", fmt.Sprintf("%v", val))
	}
	if val, ok := args["custom_disclaimer"]; ok {
		urlParams.Set("custom_disclaimer", fmt.Sprintf("%v", val))
	}
	if val, ok := args["follow_up_action_url"]; ok {
		urlParams.Set("follow_up_action_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_for_canvas"]; ok {
		urlParams.Set("is_for_canvas", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_optimized_for_quality"]; ok {
		urlParams.Set("is_optimized_for_quality", fmt.Sprintf("%v", val))
	}
	if val, ok := args["locale"]; ok {
		urlParams.Set("locale", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["privacy_policy"]; ok {
		urlParams.Set("privacy_policy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["question_page_custom_headline"]; ok {
		urlParams.Set("question_page_custom_headline", fmt.Sprintf("%v", val))
	}
	if val, ok := args["questions"]; ok {
		urlParams.Set("questions", fmt.Sprintf("%v", val))
	}
	if val, ok := args["thank_you_page"]; ok {
		urlParams.Set("thank_you_page", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tracking_parameters"]; ok {
		urlParams.Set("tracking_parameters", fmt.Sprintf("%v", val))
	}
	if val, ok := args["upload_gated_file"]; ok {
		urlParams.Set("upload_gated_file", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_likes GET likes for Page
func (c *PageClient) Facebook_page_get_likes(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "likes")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["target_id"]; ok {
		urlParams.Set("target_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_live_videos GET live_videos for Page
func (c *PageClient) Facebook_page_get_live_videos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "live_videos")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["broadcast_status"]; ok {
		urlParams.Set("broadcast_status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["source"]; ok {
		urlParams.Set("source", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_live_videos POST live_videos for Page
func (c *PageClient) Facebook_page_post_live_videos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "live_videos")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["content_tags"]; ok {
		urlParams.Set("content_tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["crossposting_actions"]; ok {
		urlParams.Set("crossposting_actions", fmt.Sprintf("%v", val))
	}
	if val, ok := args["custom_labels"]; ok {
		urlParams.Set("custom_labels", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["enable_backup_ingest"]; ok {
		urlParams.Set("enable_backup_ingest", fmt.Sprintf("%v", val))
	}
	if val, ok := args["encoding_settings"]; ok {
		urlParams.Set("encoding_settings", fmt.Sprintf("%v", val))
	}
	if val, ok := args["event_params"]; ok {
		urlParams.Set("event_params", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fisheye_video_cropped"]; ok {
		urlParams.Set("fisheye_video_cropped", fmt.Sprintf("%v", val))
	}
	if val, ok := args["front_z_rotation"]; ok {
		urlParams.Set("front_z_rotation", fmt.Sprintf("%v", val))
	}
	if val, ok := args["game_show"]; ok {
		urlParams.Set("game_show", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_audio_only"]; ok {
		urlParams.Set("is_audio_only", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_spherical"]; ok {
		urlParams.Set("is_spherical", fmt.Sprintf("%v", val))
	}
	if val, ok := args["original_fov"]; ok {
		urlParams.Set("original_fov", fmt.Sprintf("%v", val))
	}
	if val, ok := args["privacy"]; ok {
		urlParams.Set("privacy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["projection"]; ok {
		urlParams.Set("projection", fmt.Sprintf("%v", val))
	}
	if val, ok := args["published"]; ok {
		urlParams.Set("published", fmt.Sprintf("%v", val))
	}
	if val, ok := args["schedule_custom_profile_image"]; ok {
		urlParams.Set("schedule_custom_profile_image", fmt.Sprintf("%v", val))
	}
	if val, ok := args["spatial_audio_format"]; ok {
		urlParams.Set("spatial_audio_format", fmt.Sprintf("%v", val))
	}
	if val, ok := args["status"]; ok {
		urlParams.Set("status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["stereoscopic_mode"]; ok {
		urlParams.Set("stereoscopic_mode", fmt.Sprintf("%v", val))
	}
	if val, ok := args["stop_on_delete_stream"]; ok {
		urlParams.Set("stop_on_delete_stream", fmt.Sprintf("%v", val))
	}
	if val, ok := args["stream_type"]; ok {
		urlParams.Set("stream_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["targeting"]; ok {
		urlParams.Set("targeting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["title"]; ok {
		urlParams.Set("title", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_delete_locations DELETE locations for Page
func (c *PageClient) Facebook_page_delete_locations(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	location_page_ids, ok := args["location_page_ids"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: location_page_ids")
	}
	_ = location_page_ids // Suppress unused variable warning
	store_numbers, ok := args["store_numbers"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: store_numbers")
	}
	_ = store_numbers // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "locations")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["location_page_ids"]; ok {
		urlParams.Set("location_page_ids", fmt.Sprintf("%v", val))
	}
	if val, ok := args["store_numbers"]; ok {
		urlParams.Set("store_numbers", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_locations GET locations for Page
func (c *PageClient) Facebook_page_get_locations(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "locations")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_locations POST locations for Page
func (c *PageClient) Facebook_page_post_locations(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	store_number, ok := args["store_number"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: store_number")
	}
	_ = store_number // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "locations")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["always_open"]; ok {
		urlParams.Set("always_open", fmt.Sprintf("%v", val))
	}
	if val, ok := args["delivery_and_pickup_option_info"]; ok {
		urlParams.Set("delivery_and_pickup_option_info", fmt.Sprintf("%v", val))
	}
	if val, ok := args["differently_open_offerings"]; ok {
		urlParams.Set("differently_open_offerings", fmt.Sprintf("%v", val))
	}
	if val, ok := args["hours"]; ok {
		urlParams.Set("hours", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ignore_warnings"]; ok {
		urlParams.Set("ignore_warnings", fmt.Sprintf("%v", val))
	}
	if val, ok := args["location"]; ok {
		urlParams.Set("location", fmt.Sprintf("%v", val))
	}
	if val, ok := args["location_page_id"]; ok {
		urlParams.Set("location_page_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["old_store_number"]; ok {
		urlParams.Set("old_store_number", fmt.Sprintf("%v", val))
	}
	if val, ok := args["page_username"]; ok {
		urlParams.Set("page_username", fmt.Sprintf("%v", val))
	}
	if val, ok := args["permanently_closed"]; ok {
		urlParams.Set("permanently_closed", fmt.Sprintf("%v", val))
	}
	if val, ok := args["phone"]; ok {
		urlParams.Set("phone", fmt.Sprintf("%v", val))
	}
	if val, ok := args["pickup_options"]; ok {
		urlParams.Set("pickup_options", fmt.Sprintf("%v", val))
	}
	if val, ok := args["place_topics"]; ok {
		urlParams.Set("place_topics", fmt.Sprintf("%v", val))
	}
	if val, ok := args["price_range"]; ok {
		urlParams.Set("price_range", fmt.Sprintf("%v", val))
	}
	if val, ok := args["store_code"]; ok {
		urlParams.Set("store_code", fmt.Sprintf("%v", val))
	}
	if val, ok := args["store_location_descriptor"]; ok {
		urlParams.Set("store_location_descriptor", fmt.Sprintf("%v", val))
	}
	if val, ok := args["store_name"]; ok {
		urlParams.Set("store_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["store_number"]; ok {
		urlParams.Set("store_number", fmt.Sprintf("%v", val))
	}
	if val, ok := args["temporary_status"]; ok {
		urlParams.Set("temporary_status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["website"]; ok {
		urlParams.Set("website", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_media_fingerprints GET media_fingerprints for Page
func (c *PageClient) Facebook_page_get_media_fingerprints(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "media_fingerprints")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["universal_content_id"]; ok {
		urlParams.Set("universal_content_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_media_fingerprints POST media_fingerprints for Page
func (c *PageClient) Facebook_page_post_media_fingerprints(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	fingerprint_content_type, ok := args["fingerprint_content_type"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: fingerprint_content_type")
	}
	_ = fingerprint_content_type // Suppress unused variable warning
	metadata, ok := args["metadata"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: metadata")
	}
	_ = metadata // Suppress unused variable warning
	source, ok := args["source"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: source")
	}
	_ = source // Suppress unused variable warning
	title, ok := args["title"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: title")
	}
	_ = title // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "media_fingerprints")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["fingerprint_content_type"]; ok {
		urlParams.Set("fingerprint_content_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["metadata"]; ok {
		urlParams.Set("metadata", fmt.Sprintf("%v", val))
	}
	if val, ok := args["source"]; ok {
		urlParams.Set("source", fmt.Sprintf("%v", val))
	}
	if val, ok := args["title"]; ok {
		urlParams.Set("title", fmt.Sprintf("%v", val))
	}
	if val, ok := args["universal_content_id"]; ok {
		urlParams.Set("universal_content_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_message_attachments POST message_attachments for Page
func (c *PageClient) Facebook_page_post_message_attachments(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	message, ok := args["message"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: message")
	}
	_ = message // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "message_attachments")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["message"]; ok {
		urlParams.Set("message", fmt.Sprintf("%v", val))
	}
	if val, ok := args["platform"]; ok {
		urlParams.Set("platform", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_delete_message_templates DELETE message_templates for Page
func (c *PageClient) Facebook_page_delete_message_templates(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "message_templates")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["template_id"]; ok {
		urlParams.Set("template_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_message_templates GET message_templates for Page
func (c *PageClient) Facebook_page_get_message_templates(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "message_templates")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["category"]; ok {
		urlParams.Set("category", fmt.Sprintf("%v", val))
	}
	if val, ok := args["content"]; ok {
		urlParams.Set("content", fmt.Sprintf("%v", val))
	}
	if val, ok := args["language"]; ok {
		urlParams.Set("language", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name_or_content"]; ok {
		urlParams.Set("name_or_content", fmt.Sprintf("%v", val))
	}
	if val, ok := args["status"]; ok {
		urlParams.Set("status", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_message_templates POST message_templates for Page
func (c *PageClient) Facebook_page_post_message_templates(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	category, ok := args["category"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: category")
	}
	_ = category // Suppress unused variable warning
	language, ok := args["language"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: language")
	}
	_ = language // Suppress unused variable warning
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "message_templates")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["category"]; ok {
		urlParams.Set("category", fmt.Sprintf("%v", val))
	}
	if val, ok := args["components"]; ok {
		urlParams.Set("components", fmt.Sprintf("%v", val))
	}
	if val, ok := args["language"]; ok {
		urlParams.Set("language", fmt.Sprintf("%v", val))
	}
	if val, ok := args["library_template_button_inputs"]; ok {
		urlParams.Set("library_template_button_inputs", fmt.Sprintf("%v", val))
	}
	if val, ok := args["library_template_name"]; ok {
		urlParams.Set("library_template_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_messages POST messages for Page
func (c *PageClient) Facebook_page_post_messages(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	recipient, ok := args["recipient"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: recipient")
	}
	_ = recipient // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "messages")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["message"]; ok {
		urlParams.Set("message", fmt.Sprintf("%v", val))
	}
	if val, ok := args["messaging_type"]; ok {
		urlParams.Set("messaging_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["notification_type"]; ok {
		urlParams.Set("notification_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["payload"]; ok {
		urlParams.Set("payload", fmt.Sprintf("%v", val))
	}
	if val, ok := args["persona_id"]; ok {
		urlParams.Set("persona_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["recipient"]; ok {
		urlParams.Set("recipient", fmt.Sprintf("%v", val))
	}
	if val, ok := args["reply_to"]; ok {
		urlParams.Set("reply_to", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sender_action"]; ok {
		urlParams.Set("sender_action", fmt.Sprintf("%v", val))
	}
	if val, ok := args["suggestion_action"]; ok {
		urlParams.Set("suggestion_action", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tag"]; ok {
		urlParams.Set("tag", fmt.Sprintf("%v", val))
	}
	if val, ok := args["thread_control"]; ok {
		urlParams.Set("thread_control", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_messaging_feature_review GET messaging_feature_review for Page
func (c *PageClient) Facebook_page_get_messaging_feature_review(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "messaging_feature_review")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_messenger_call_settings GET messenger_call_settings for Page
func (c *PageClient) Facebook_page_get_messenger_call_settings(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "messenger_call_settings")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_messenger_call_settings POST messenger_call_settings for Page
func (c *PageClient) Facebook_page_post_messenger_call_settings(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "messenger_call_settings")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["audio_enabled"]; ok {
		urlParams.Set("audio_enabled", fmt.Sprintf("%v", val))
	}
	if val, ok := args["call_hours"]; ok {
		urlParams.Set("call_hours", fmt.Sprintf("%v", val))
	}
	if val, ok := args["call_routing"]; ok {
		urlParams.Set("call_routing", fmt.Sprintf("%v", val))
	}
	if val, ok := args["icon_enabled"]; ok {
		urlParams.Set("icon_enabled", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_messenger_lead_forms GET messenger_lead_forms for Page
func (c *PageClient) Facebook_page_get_messenger_lead_forms(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "messenger_lead_forms")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_messenger_lead_forms POST messenger_lead_forms for Page
func (c *PageClient) Facebook_page_post_messenger_lead_forms(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	step_list, ok := args["step_list"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: step_list")
	}
	_ = step_list // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "messenger_lead_forms")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		urlParams.Set("account_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["block_send_api"]; ok {
		urlParams.Set("block_send_api", fmt.Sprintf("%v", val))
	}
	if val, ok := args["exit_keyphrases"]; ok {
		urlParams.Set("exit_keyphrases", fmt.Sprintf("%v", val))
	}
	if val, ok := args["handover_app_id"]; ok {
		urlParams.Set("handover_app_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["handover_summary"]; ok {
		urlParams.Set("handover_summary", fmt.Sprintf("%v", val))
	}
	if val, ok := args["privacy_url"]; ok {
		urlParams.Set("privacy_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["reminder_text"]; ok {
		urlParams.Set("reminder_text", fmt.Sprintf("%v", val))
	}
	if val, ok := args["step_list"]; ok {
		urlParams.Set("step_list", fmt.Sprintf("%v", val))
	}
	if val, ok := args["stop_question_message"]; ok {
		urlParams.Set("stop_question_message", fmt.Sprintf("%v", val))
	}
	if val, ok := args["template_name"]; ok {
		urlParams.Set("template_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tracking_parameters"]; ok {
		urlParams.Set("tracking_parameters", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_delete_messenger_profile DELETE messenger_profile for Page
func (c *PageClient) Facebook_page_delete_messenger_profile(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	fields, ok := args["fields"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: fields")
	}
	_ = fields // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "messenger_profile")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["fields"]; ok {
		urlParams.Set("fields", fmt.Sprintf("%v", val))
	}
	if val, ok := args["platform"]; ok {
		urlParams.Set("platform", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_messenger_profile GET messenger_profile for Page
func (c *PageClient) Facebook_page_get_messenger_profile(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "messenger_profile")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["platform"]; ok {
		urlParams.Set("platform", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_messenger_profile POST messenger_profile for Page
func (c *PageClient) Facebook_page_post_messenger_profile(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "messenger_profile")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_linking_url"]; ok {
		urlParams.Set("account_linking_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["commands"]; ok {
		urlParams.Set("commands", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["get_started"]; ok {
		urlParams.Set("get_started", fmt.Sprintf("%v", val))
	}
	if val, ok := args["greeting"]; ok {
		urlParams.Set("greeting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ice_breakers"]; ok {
		urlParams.Set("ice_breakers", fmt.Sprintf("%v", val))
	}
	if val, ok := args["persistent_menu"]; ok {
		urlParams.Set("persistent_menu", fmt.Sprintf("%v", val))
	}
	if val, ok := args["platform"]; ok {
		urlParams.Set("platform", fmt.Sprintf("%v", val))
	}
	if val, ok := args["title"]; ok {
		urlParams.Set("title", fmt.Sprintf("%v", val))
	}
	if val, ok := args["whitelisted_domains"]; ok {
		urlParams.Set("whitelisted_domains", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_moderate_conversations POST moderate_conversations for Page
func (c *PageClient) Facebook_page_post_moderate_conversations(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	actions, ok := args["actions"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: actions")
	}
	_ = actions // Suppress unused variable warning
	user_ids, ok := args["user_ids"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: user_ids")
	}
	_ = user_ids // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "moderate_conversations")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["actions"]; ok {
		urlParams.Set("actions", fmt.Sprintf("%v", val))
	}
	if val, ok := args["user_ids"]; ok {
		urlParams.Set("user_ids", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_nlp_configs POST nlp_configs for Page
func (c *PageClient) Facebook_page_post_nlp_configs(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "nlp_configs")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["api_version"]; ok {
		urlParams.Set("api_version", fmt.Sprintf("%v", val))
	}
	if val, ok := args["custom_token"]; ok {
		urlParams.Set("custom_token", fmt.Sprintf("%v", val))
	}
	if val, ok := args["model"]; ok {
		urlParams.Set("model", fmt.Sprintf("%v", val))
	}
	if val, ok := args["n_best"]; ok {
		urlParams.Set("n_best", fmt.Sprintf("%v", val))
	}
	if val, ok := args["nlp_enabled"]; ok {
		urlParams.Set("nlp_enabled", fmt.Sprintf("%v", val))
	}
	if val, ok := args["other_language_support"]; ok {
		urlParams.Set("other_language_support", fmt.Sprintf("%v", val))
	}
	if val, ok := args["verbose"]; ok {
		urlParams.Set("verbose", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_notification_message_tokens GET notification_message_tokens for Page
func (c *PageClient) Facebook_page_get_notification_message_tokens(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "notification_message_tokens")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_notification_messages_dev_support POST notification_messages_dev_support for Page
func (c *PageClient) Facebook_page_post_notification_messages_dev_support(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	developer_action, ok := args["developer_action"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: developer_action")
	}
	_ = developer_action // Suppress unused variable warning
	recipient, ok := args["recipient"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: recipient")
	}
	_ = recipient // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "notification_messages_dev_support")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["developer_action"]; ok {
		urlParams.Set("developer_action", fmt.Sprintf("%v", val))
	}
	if val, ok := args["recipient"]; ok {
		urlParams.Set("recipient", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_page_backed_instagram_accounts GET page_backed_instagram_accounts for Page
func (c *PageClient) Facebook_page_get_page_backed_instagram_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "page_backed_instagram_accounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_page_backed_instagram_accounts POST page_backed_instagram_accounts for Page
func (c *PageClient) Facebook_page_post_page_backed_instagram_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "page_backed_instagram_accounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_page_whatsapp_number_verification POST page_whatsapp_number_verification for Page
func (c *PageClient) Facebook_page_post_page_whatsapp_number_verification(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	whatsapp_number, ok := args["whatsapp_number"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: whatsapp_number")
	}
	_ = whatsapp_number // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "page_whatsapp_number_verification")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["verification_code"]; ok {
		urlParams.Set("verification_code", fmt.Sprintf("%v", val))
	}
	if val, ok := args["whatsapp_number"]; ok {
		urlParams.Set("whatsapp_number", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_pass_thread_control POST pass_thread_control for Page
func (c *PageClient) Facebook_page_post_pass_thread_control(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	recipient, ok := args["recipient"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: recipient")
	}
	_ = recipient // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "pass_thread_control")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["metadata"]; ok {
		urlParams.Set("metadata", fmt.Sprintf("%v", val))
	}
	if val, ok := args["recipient"]; ok {
		urlParams.Set("recipient", fmt.Sprintf("%v", val))
	}
	if val, ok := args["target_app_id"]; ok {
		urlParams.Set("target_app_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_personas GET personas for Page
func (c *PageClient) Facebook_page_get_personas(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "personas")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_personas POST personas for Page
func (c *PageClient) Facebook_page_post_personas(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning
	profile_picture_url, ok := args["profile_picture_url"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: profile_picture_url")
	}
	_ = profile_picture_url // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "personas")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["profile_picture_url"]; ok {
		urlParams.Set("profile_picture_url", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_photo_stories POST photo_stories for Page
func (c *PageClient) Facebook_page_post_photo_stories(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "photo_stories")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["photo_id"]; ok {
		urlParams.Set("photo_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_photos GET photos for Page
func (c *PageClient) Facebook_page_get_photos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "photos")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["biz_tag_id"]; ok {
		urlParams.Set("biz_tag_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["business_id"]; ok {
		urlParams.Set("business_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["type"]; ok {
		urlParams.Set("type", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_photos POST photos for Page
func (c *PageClient) Facebook_page_post_photos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "photos")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["aid"]; ok {
		urlParams.Set("aid", fmt.Sprintf("%v", val))
	}
	if val, ok := args["allow_spherical_photo"]; ok {
		urlParams.Set("allow_spherical_photo", fmt.Sprintf("%v", val))
	}
	if val, ok := args["alt_text_custom"]; ok {
		urlParams.Set("alt_text_custom", fmt.Sprintf("%v", val))
	}
	if val, ok := args["android_key_hash"]; ok {
		urlParams.Set("android_key_hash", fmt.Sprintf("%v", val))
	}
	if val, ok := args["application_id"]; ok {
		urlParams.Set("application_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["attempt"]; ok {
		urlParams.Set("attempt", fmt.Sprintf("%v", val))
	}
	if val, ok := args["audience_exp"]; ok {
		urlParams.Set("audience_exp", fmt.Sprintf("%v", val))
	}
	if val, ok := args["backdated_time"]; ok {
		urlParams.Set("backdated_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["backdated_time_granularity"]; ok {
		urlParams.Set("backdated_time_granularity", fmt.Sprintf("%v", val))
	}
	if val, ok := args["caption"]; ok {
		urlParams.Set("caption", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_session_id"]; ok {
		urlParams.Set("composer_session_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["direct_share_status"]; ok {
		urlParams.Set("direct_share_status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["feed_targeting"]; ok {
		urlParams.Set("feed_targeting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["filter_type"]; ok {
		urlParams.Set("filter_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["full_res_is_coming_later"]; ok {
		urlParams.Set("full_res_is_coming_later", fmt.Sprintf("%v", val))
	}
	if val, ok := args["initial_view_heading_override_degrees"]; ok {
		urlParams.Set("initial_view_heading_override_degrees", fmt.Sprintf("%v", val))
	}
	if val, ok := args["initial_view_pitch_override_degrees"]; ok {
		urlParams.Set("initial_view_pitch_override_degrees", fmt.Sprintf("%v", val))
	}
	if val, ok := args["initial_view_vertical_fov_override_degrees"]; ok {
		urlParams.Set("initial_view_vertical_fov_override_degrees", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ios_bundle_id"]; ok {
		urlParams.Set("ios_bundle_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_explicit_location"]; ok {
		urlParams.Set("is_explicit_location", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_explicit_place"]; ok {
		urlParams.Set("is_explicit_place", fmt.Sprintf("%v", val))
	}
	if val, ok := args["location_source_id"]; ok {
		urlParams.Set("location_source_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["manual_privacy"]; ok {
		urlParams.Set("manual_privacy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["message"]; ok {
		urlParams.Set("message", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["nectar_module"]; ok {
		urlParams.Set("nectar_module", fmt.Sprintf("%v", val))
	}
	if val, ok := args["no_story"]; ok {
		urlParams.Set("no_story", fmt.Sprintf("%v", val))
	}
	if val, ok := args["offline_id"]; ok {
		urlParams.Set("offline_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_action_type_id"]; ok {
		urlParams.Set("og_action_type_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_icon_id"]; ok {
		urlParams.Set("og_icon_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_object_id"]; ok {
		urlParams.Set("og_object_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_phrase"]; ok {
		urlParams.Set("og_phrase", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_set_profile_badge"]; ok {
		urlParams.Set("og_set_profile_badge", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_suggestion_mechanism"]; ok {
		urlParams.Set("og_suggestion_mechanism", fmt.Sprintf("%v", val))
	}
	if val, ok := args["parent_media_id"]; ok {
		urlParams.Set("parent_media_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["place"]; ok {
		urlParams.Set("place", fmt.Sprintf("%v", val))
	}
	if val, ok := args["privacy"]; ok {
		urlParams.Set("privacy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["profile_id"]; ok {
		urlParams.Set("profile_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["provenance_info"]; ok {
		urlParams.Set("provenance_info", fmt.Sprintf("%v", val))
	}
	if val, ok := args["proxied_app_id"]; ok {
		urlParams.Set("proxied_app_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["published"]; ok {
		urlParams.Set("published", fmt.Sprintf("%v", val))
	}
	if val, ok := args["qn"]; ok {
		urlParams.Set("qn", fmt.Sprintf("%v", val))
	}
	if val, ok := args["scheduled_publish_time"]; ok {
		urlParams.Set("scheduled_publish_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["spherical_metadata"]; ok {
		urlParams.Set("spherical_metadata", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sponsor_id"]; ok {
		urlParams.Set("sponsor_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sponsor_relationship"]; ok {
		urlParams.Set("sponsor_relationship", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tags"]; ok {
		urlParams.Set("tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["target_id"]; ok {
		urlParams.Set("target_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["targeting"]; ok {
		urlParams.Set("targeting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["temporary"]; ok {
		urlParams.Set("temporary", fmt.Sprintf("%v", val))
	}
	if val, ok := args["time_since_original_post"]; ok {
		urlParams.Set("time_since_original_post", fmt.Sprintf("%v", val))
	}
	if val, ok := args["uid"]; ok {
		urlParams.Set("uid", fmt.Sprintf("%v", val))
	}
	if val, ok := args["unpublished_content_type"]; ok {
		urlParams.Set("unpublished_content_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["url"]; ok {
		urlParams.Set("url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["user_selected_tags"]; ok {
		urlParams.Set("user_selected_tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["vault_image_id"]; ok {
		urlParams.Set("vault_image_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_picture GET picture for Page
func (c *PageClient) Facebook_page_get_picture(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "picture")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["height"]; ok {
		urlParams.Set("height", fmt.Sprintf("%v", val))
	}
	if val, ok := args["redirect"]; ok {
		urlParams.Set("redirect", fmt.Sprintf("%v", val))
	}
	if val, ok := args["type"]; ok {
		urlParams.Set("type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["width"]; ok {
		urlParams.Set("width", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_picture POST picture for Page
func (c *PageClient) Facebook_page_post_picture(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "picture")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["android_key_hash"]; ok {
		urlParams.Set("android_key_hash", fmt.Sprintf("%v", val))
	}
	if val, ok := args["burn_media_effect"]; ok {
		urlParams.Set("burn_media_effect", fmt.Sprintf("%v", val))
	}
	if val, ok := args["caption"]; ok {
		urlParams.Set("caption", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_session_id"]; ok {
		urlParams.Set("composer_session_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["frame_entrypoint"]; ok {
		urlParams.Set("frame_entrypoint", fmt.Sprintf("%v", val))
	}
	if val, ok := args["has_umg"]; ok {
		urlParams.Set("has_umg", fmt.Sprintf("%v", val))
	}
	if val, ok := args["height"]; ok {
		urlParams.Set("height", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ios_bundle_id"]; ok {
		urlParams.Set("ios_bundle_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["media_effect_ids"]; ok {
		urlParams.Set("media_effect_ids", fmt.Sprintf("%v", val))
	}
	if val, ok := args["media_effect_source_object_id"]; ok {
		urlParams.Set("media_effect_source_object_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["msqrd_mask_id"]; ok {
		urlParams.Set("msqrd_mask_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["photo"]; ok {
		urlParams.Set("photo", fmt.Sprintf("%v", val))
	}
	if val, ok := args["picture"]; ok {
		urlParams.Set("picture", fmt.Sprintf("%v", val))
	}
	if val, ok := args["profile_pic_method"]; ok {
		urlParams.Set("profile_pic_method", fmt.Sprintf("%v", val))
	}
	if val, ok := args["profile_pic_source"]; ok {
		urlParams.Set("profile_pic_source", fmt.Sprintf("%v", val))
	}
	if val, ok := args["proxied_app_id"]; ok {
		urlParams.Set("proxied_app_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["qn"]; ok {
		urlParams.Set("qn", fmt.Sprintf("%v", val))
	}
	if val, ok := args["reuse"]; ok {
		urlParams.Set("reuse", fmt.Sprintf("%v", val))
	}
	if val, ok := args["scaled_crop_rect"]; ok {
		urlParams.Set("scaled_crop_rect", fmt.Sprintf("%v", val))
	}
	if val, ok := args["set_profile_photo_shield"]; ok {
		urlParams.Set("set_profile_photo_shield", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sticker_id"]; ok {
		urlParams.Set("sticker_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sticker_source_object_id"]; ok {
		urlParams.Set("sticker_source_object_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["suppress_stories"]; ok {
		urlParams.Set("suppress_stories", fmt.Sprintf("%v", val))
	}
	if val, ok := args["width"]; ok {
		urlParams.Set("width", fmt.Sprintf("%v", val))
	}
	if val, ok := args["x"]; ok {
		urlParams.Set("x", fmt.Sprintf("%v", val))
	}
	if val, ok := args["y"]; ok {
		urlParams.Set("y", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_posts GET posts for Page
func (c *PageClient) Facebook_page_get_posts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "posts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["include_hidden"]; ok {
		urlParams.Set("include_hidden", fmt.Sprintf("%v", val))
	}
	if val, ok := args["limit"]; ok {
		urlParams.Set("limit", fmt.Sprintf("%v", val))
	}
	if val, ok := args["q"]; ok {
		urlParams.Set("q", fmt.Sprintf("%v", val))
	}
	if val, ok := args["show_expired"]; ok {
		urlParams.Set("show_expired", fmt.Sprintf("%v", val))
	}
	if val, ok := args["with"]; ok {
		urlParams.Set("with", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_product_catalogs GET product_catalogs for Page
func (c *PageClient) Facebook_page_get_product_catalogs(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "product_catalogs")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_published_posts GET published_posts for Page
func (c *PageClient) Facebook_page_get_published_posts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "published_posts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["include_hidden"]; ok {
		urlParams.Set("include_hidden", fmt.Sprintf("%v", val))
	}
	if val, ok := args["limit"]; ok {
		urlParams.Set("limit", fmt.Sprintf("%v", val))
	}
	if val, ok := args["show_expired"]; ok {
		urlParams.Set("show_expired", fmt.Sprintf("%v", val))
	}
	if val, ok := args["with"]; ok {
		urlParams.Set("with", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_release_thread_control POST release_thread_control for Page
func (c *PageClient) Facebook_page_post_release_thread_control(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	recipient, ok := args["recipient"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: recipient")
	}
	_ = recipient // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "release_thread_control")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["recipient"]; ok {
		urlParams.Set("recipient", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_request_thread_control POST request_thread_control for Page
func (c *PageClient) Facebook_page_post_request_thread_control(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	recipient, ok := args["recipient"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: recipient")
	}
	_ = recipient // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "request_thread_control")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["metadata"]; ok {
		urlParams.Set("metadata", fmt.Sprintf("%v", val))
	}
	if val, ok := args["recipient"]; ok {
		urlParams.Set("recipient", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_roles GET roles for Page
func (c *PageClient) Facebook_page_get_roles(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "roles")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["include_deactivated"]; ok {
		urlParams.Set("include_deactivated", fmt.Sprintf("%v", val))
	}
	if val, ok := args["uid"]; ok {
		urlParams.Set("uid", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_rtb_dynamic_posts GET rtb_dynamic_posts for Page
func (c *PageClient) Facebook_page_get_rtb_dynamic_posts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "rtb_dynamic_posts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_scheduled_posts GET scheduled_posts for Page
func (c *PageClient) Facebook_page_get_scheduled_posts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "scheduled_posts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_secondary_receivers GET secondary_receivers for Page
func (c *PageClient) Facebook_page_get_secondary_receivers(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "secondary_receivers")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["platform"]; ok {
		urlParams.Set("platform", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_settings GET settings for Page
func (c *PageClient) Facebook_page_get_settings(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "settings")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_settings POST settings for Page
func (c *PageClient) Facebook_page_post_settings(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "settings")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["option"]; ok {
		urlParams.Set("option", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_shop_setup_status GET shop_setup_status for Page
func (c *PageClient) Facebook_page_get_shop_setup_status(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "shop_setup_status")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_store_locations GET store_locations for Page
func (c *PageClient) Facebook_page_get_store_locations(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "store_locations")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_stories GET stories for Page
func (c *PageClient) Facebook_page_get_stories(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "stories")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["since"]; ok {
		urlParams.Set("since", fmt.Sprintf("%v", val))
	}
	if val, ok := args["status"]; ok {
		urlParams.Set("status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["until"]; ok {
		urlParams.Set("until", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_delete_subscribed_apps DELETE subscribed_apps for Page
func (c *PageClient) Facebook_page_delete_subscribed_apps(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "subscribed_apps")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_subscribed_apps GET subscribed_apps for Page
func (c *PageClient) Facebook_page_get_subscribed_apps(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "subscribed_apps")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_subscribed_apps POST subscribed_apps for Page
func (c *PageClient) Facebook_page_post_subscribed_apps(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	subscribed_fields, ok := args["subscribed_fields"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: subscribed_fields")
	}
	_ = subscribed_fields // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "subscribed_apps")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["subscribed_fields"]; ok {
		urlParams.Set("subscribed_fields", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_tabs GET tabs for Page
func (c *PageClient) Facebook_page_get_tabs(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "tabs")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["tab"]; ok {
		urlParams.Set("tab", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_tagged GET tagged for Page
func (c *PageClient) Facebook_page_get_tagged(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "tagged")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_take_thread_control POST take_thread_control for Page
func (c *PageClient) Facebook_page_post_take_thread_control(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	recipient, ok := args["recipient"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: recipient")
	}
	_ = recipient // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "take_thread_control")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["metadata"]; ok {
		urlParams.Set("metadata", fmt.Sprintf("%v", val))
	}
	if val, ok := args["recipient"]; ok {
		urlParams.Set("recipient", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_thread_owner GET thread_owner for Page
func (c *PageClient) Facebook_page_get_thread_owner(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	recipient, ok := args["recipient"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: recipient")
	}
	_ = recipient // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "thread_owner")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["recipient"]; ok {
		urlParams.Set("recipient", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_threads GET threads for Page
func (c *PageClient) Facebook_page_get_threads(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "threads")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["folder"]; ok {
		urlParams.Set("folder", fmt.Sprintf("%v", val))
	}
	if val, ok := args["platform"]; ok {
		urlParams.Set("platform", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tags"]; ok {
		urlParams.Set("tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["user_id"]; ok {
		urlParams.Set("user_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_unlink_accounts POST unlink_accounts for Page
func (c *PageClient) Facebook_page_post_unlink_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	psid, ok := args["psid"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: psid")
	}
	_ = psid // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "unlink_accounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["psid"]; ok {
		urlParams.Set("psid", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_video_copyright_rules GET video_copyright_rules for Page
func (c *PageClient) Facebook_page_get_video_copyright_rules(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "video_copyright_rules")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["selected_rule_id"]; ok {
		urlParams.Set("selected_rule_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["source"]; ok {
		urlParams.Set("source", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_video_copyright_rules POST video_copyright_rules for Page
func (c *PageClient) Facebook_page_post_video_copyright_rules(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	condition_groups, ok := args["condition_groups"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: condition_groups")
	}
	_ = condition_groups // Suppress unused variable warning
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "video_copyright_rules")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["condition_groups"]; ok {
		urlParams.Set("condition_groups", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_video_copyrights POST video_copyrights for Page
func (c *PageClient) Facebook_page_post_video_copyrights(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	copyright_content_id, ok := args["copyright_content_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: copyright_content_id")
	}
	_ = copyright_content_id // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "video_copyrights")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["attribution_id"]; ok {
		urlParams.Set("attribution_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["content_category"]; ok {
		urlParams.Set("content_category", fmt.Sprintf("%v", val))
	}
	if val, ok := args["copyright_content_id"]; ok {
		urlParams.Set("copyright_content_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["excluded_ownership_countries"]; ok {
		urlParams.Set("excluded_ownership_countries", fmt.Sprintf("%v", val))
	}
	if val, ok := args["excluded_ownership_segments"]; ok {
		urlParams.Set("excluded_ownership_segments", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_reference_disabled"]; ok {
		urlParams.Set("is_reference_disabled", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_reference_video"]; ok {
		urlParams.Set("is_reference_video", fmt.Sprintf("%v", val))
	}
	if val, ok := args["monitoring_type"]; ok {
		urlParams.Set("monitoring_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ownership_countries"]; ok {
		urlParams.Set("ownership_countries", fmt.Sprintf("%v", val))
	}
	if val, ok := args["rule_id"]; ok {
		urlParams.Set("rule_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tags"]; ok {
		urlParams.Set("tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["whitelisted_ids"]; ok {
		urlParams.Set("whitelisted_ids", fmt.Sprintf("%v", val))
	}
	if val, ok := args["whitelisted_ig_user_ids"]; ok {
		urlParams.Set("whitelisted_ig_user_ids", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_video_lists GET video_lists for Page
func (c *PageClient) Facebook_page_get_video_lists(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "video_lists")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_video_reels GET video_reels for Page
func (c *PageClient) Facebook_page_get_video_reels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "video_reels")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["since"]; ok {
		urlParams.Set("since", fmt.Sprintf("%v", val))
	}
	if val, ok := args["until"]; ok {
		urlParams.Set("until", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_video_reels POST video_reels for Page
func (c *PageClient) Facebook_page_post_video_reels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	upload_phase, ok := args["upload_phase"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: upload_phase")
	}
	_ = upload_phase // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "video_reels")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["feed_targeting"]; ok {
		urlParams.Set("feed_targeting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["place"]; ok {
		urlParams.Set("place", fmt.Sprintf("%v", val))
	}
	if val, ok := args["scheduled_publish_time"]; ok {
		urlParams.Set("scheduled_publish_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["targeting"]; ok {
		urlParams.Set("targeting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["title"]; ok {
		urlParams.Set("title", fmt.Sprintf("%v", val))
	}
	if val, ok := args["upload_phase"]; ok {
		urlParams.Set("upload_phase", fmt.Sprintf("%v", val))
	}
	if val, ok := args["video_id"]; ok {
		urlParams.Set("video_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["video_state"]; ok {
		urlParams.Set("video_state", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_video_stories POST video_stories for Page
func (c *PageClient) Facebook_page_post_video_stories(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	upload_phase, ok := args["upload_phase"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: upload_phase")
	}
	_ = upload_phase // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "video_stories")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["feed_targeting"]; ok {
		urlParams.Set("feed_targeting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["place"]; ok {
		urlParams.Set("place", fmt.Sprintf("%v", val))
	}
	if val, ok := args["scheduled_publish_time"]; ok {
		urlParams.Set("scheduled_publish_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["targeting"]; ok {
		urlParams.Set("targeting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["title"]; ok {
		urlParams.Set("title", fmt.Sprintf("%v", val))
	}
	if val, ok := args["upload_phase"]; ok {
		urlParams.Set("upload_phase", fmt.Sprintf("%v", val))
	}
	if val, ok := args["video_id"]; ok {
		urlParams.Set("video_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["video_state"]; ok {
		urlParams.Set("video_state", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_videos GET videos for Page
func (c *PageClient) Facebook_page_get_videos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "videos")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["type"]; ok {
		urlParams.Set("type", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_videos POST videos for Page
func (c *PageClient) Facebook_page_post_videos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "videos")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_breaks"]; ok {
		urlParams.Set("ad_breaks", fmt.Sprintf("%v", val))
	}
	if val, ok := args["application_id"]; ok {
		urlParams.Set("application_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["asked_fun_fact_prompt_id"]; ok {
		urlParams.Set("asked_fun_fact_prompt_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["audio_story_wave_animation_handle"]; ok {
		urlParams.Set("audio_story_wave_animation_handle", fmt.Sprintf("%v", val))
	}
	if val, ok := args["backdated_post"]; ok {
		urlParams.Set("backdated_post", fmt.Sprintf("%v", val))
	}
	if val, ok := args["call_to_action"]; ok {
		urlParams.Set("call_to_action", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_entry_picker"]; ok {
		urlParams.Set("composer_entry_picker", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_entry_point"]; ok {
		urlParams.Set("composer_entry_point", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_entry_time"]; ok {
		urlParams.Set("composer_entry_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_session_events_log"]; ok {
		urlParams.Set("composer_session_events_log", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_session_id"]; ok {
		urlParams.Set("composer_session_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_source_surface"]; ok {
		urlParams.Set("composer_source_surface", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_type"]; ok {
		urlParams.Set("composer_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["container_type"]; ok {
		urlParams.Set("container_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["content_category"]; ok {
		urlParams.Set("content_category", fmt.Sprintf("%v", val))
	}
	if val, ok := args["content_tags"]; ok {
		urlParams.Set("content_tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["creative_tools"]; ok {
		urlParams.Set("creative_tools", fmt.Sprintf("%v", val))
	}
	if val, ok := args["crossposted_video_id"]; ok {
		urlParams.Set("crossposted_video_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["custom_labels"]; ok {
		urlParams.Set("custom_labels", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["direct_share_status"]; ok {
		urlParams.Set("direct_share_status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["embeddable"]; ok {
		urlParams.Set("embeddable", fmt.Sprintf("%v", val))
	}
	if val, ok := args["end_offset"]; ok {
		urlParams.Set("end_offset", fmt.Sprintf("%v", val))
	}
	if val, ok := args["expiration"]; ok {
		urlParams.Set("expiration", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fbuploader_video_file_chunk"]; ok {
		urlParams.Set("fbuploader_video_file_chunk", fmt.Sprintf("%v", val))
	}
	if val, ok := args["feed_targeting"]; ok {
		urlParams.Set("feed_targeting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["file_size"]; ok {
		urlParams.Set("file_size", fmt.Sprintf("%v", val))
	}
	if val, ok := args["file_url"]; ok {
		urlParams.Set("file_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fisheye_video_cropped"]; ok {
		urlParams.Set("fisheye_video_cropped", fmt.Sprintf("%v", val))
	}
	if val, ok := args["formatting"]; ok {
		urlParams.Set("formatting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fov"]; ok {
		urlParams.Set("fov", fmt.Sprintf("%v", val))
	}
	if val, ok := args["front_z_rotation"]; ok {
		urlParams.Set("front_z_rotation", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fun_fact_prompt_id"]; ok {
		urlParams.Set("fun_fact_prompt_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fun_fact_toastee_id"]; ok {
		urlParams.Set("fun_fact_toastee_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["guide"]; ok {
		urlParams.Set("guide", fmt.Sprintf("%v", val))
	}
	if val, ok := args["guide_enabled"]; ok {
		urlParams.Set("guide_enabled", fmt.Sprintf("%v", val))
	}
	if val, ok := args["initial_heading"]; ok {
		urlParams.Set("initial_heading", fmt.Sprintf("%v", val))
	}
	if val, ok := args["initial_pitch"]; ok {
		urlParams.Set("initial_pitch", fmt.Sprintf("%v", val))
	}
	if val, ok := args["instant_game_entry_point_data"]; ok {
		urlParams.Set("instant_game_entry_point_data", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_boost_intended"]; ok {
		urlParams.Set("is_boost_intended", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_explicit_share"]; ok {
		urlParams.Set("is_explicit_share", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_group_linking_post"]; ok {
		urlParams.Set("is_group_linking_post", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_partnership_ad"]; ok {
		urlParams.Set("is_partnership_ad", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_voice_clip"]; ok {
		urlParams.Set("is_voice_clip", fmt.Sprintf("%v", val))
	}
	if val, ok := args["location_source_id"]; ok {
		urlParams.Set("location_source_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["manual_privacy"]; ok {
		urlParams.Set("manual_privacy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["multilingual_data"]; ok {
		urlParams.Set("multilingual_data", fmt.Sprintf("%v", val))
	}
	if val, ok := args["no_story"]; ok {
		urlParams.Set("no_story", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_action_type_id"]; ok {
		urlParams.Set("og_action_type_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_icon_id"]; ok {
		urlParams.Set("og_icon_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_object_id"]; ok {
		urlParams.Set("og_object_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_phrase"]; ok {
		urlParams.Set("og_phrase", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_suggestion_mechanism"]; ok {
		urlParams.Set("og_suggestion_mechanism", fmt.Sprintf("%v", val))
	}
	if val, ok := args["original_fov"]; ok {
		urlParams.Set("original_fov", fmt.Sprintf("%v", val))
	}
	if val, ok := args["original_projection_type"]; ok {
		urlParams.Set("original_projection_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["partnership_ad_ad_code"]; ok {
		urlParams.Set("partnership_ad_ad_code", fmt.Sprintf("%v", val))
	}
	if val, ok := args["publish_event_id"]; ok {
		urlParams.Set("publish_event_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["published"]; ok {
		urlParams.Set("published", fmt.Sprintf("%v", val))
	}
	if val, ok := args["reference_only"]; ok {
		urlParams.Set("reference_only", fmt.Sprintf("%v", val))
	}
	if val, ok := args["referenced_sticker_id"]; ok {
		urlParams.Set("referenced_sticker_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["replace_video_id"]; ok {
		urlParams.Set("replace_video_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["scheduled_publish_time"]; ok {
		urlParams.Set("scheduled_publish_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["secret"]; ok {
		urlParams.Set("secret", fmt.Sprintf("%v", val))
	}
	if val, ok := args["slideshow_spec"]; ok {
		urlParams.Set("slideshow_spec", fmt.Sprintf("%v", val))
	}
	if val, ok := args["social_actions"]; ok {
		urlParams.Set("social_actions", fmt.Sprintf("%v", val))
	}
	if val, ok := args["source"]; ok {
		urlParams.Set("source", fmt.Sprintf("%v", val))
	}
	if val, ok := args["source_instagram_media_id"]; ok {
		urlParams.Set("source_instagram_media_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["specified_dialect"]; ok {
		urlParams.Set("specified_dialect", fmt.Sprintf("%v", val))
	}
	if val, ok := args["spherical"]; ok {
		urlParams.Set("spherical", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sponsor_id"]; ok {
		urlParams.Set("sponsor_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sponsor_relationship"]; ok {
		urlParams.Set("sponsor_relationship", fmt.Sprintf("%v", val))
	}
	if val, ok := args["start_offset"]; ok {
		urlParams.Set("start_offset", fmt.Sprintf("%v", val))
	}
	if val, ok := args["swap_mode"]; ok {
		urlParams.Set("swap_mode", fmt.Sprintf("%v", val))
	}
	if val, ok := args["targeting"]; ok {
		urlParams.Set("targeting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["text_format_metadata"]; ok {
		urlParams.Set("text_format_metadata", fmt.Sprintf("%v", val))
	}
	if val, ok := args["thumb"]; ok {
		urlParams.Set("thumb", fmt.Sprintf("%v", val))
	}
	if val, ok := args["time_since_original_post"]; ok {
		urlParams.Set("time_since_original_post", fmt.Sprintf("%v", val))
	}
	if val, ok := args["title"]; ok {
		urlParams.Set("title", fmt.Sprintf("%v", val))
	}
	if val, ok := args["transcode_setting_properties"]; ok {
		urlParams.Set("transcode_setting_properties", fmt.Sprintf("%v", val))
	}
	if val, ok := args["universal_video_id"]; ok {
		urlParams.Set("universal_video_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["unpublished_content_type"]; ok {
		urlParams.Set("unpublished_content_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["upload_phase"]; ok {
		urlParams.Set("upload_phase", fmt.Sprintf("%v", val))
	}
	if val, ok := args["upload_session_id"]; ok {
		urlParams.Set("upload_session_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["upload_setting_properties"]; ok {
		urlParams.Set("upload_setting_properties", fmt.Sprintf("%v", val))
	}
	if val, ok := args["video_asset_id"]; ok {
		urlParams.Set("video_asset_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["video_file_chunk"]; ok {
		urlParams.Set("video_file_chunk", fmt.Sprintf("%v", val))
	}
	if val, ok := args["video_id_original"]; ok {
		urlParams.Set("video_id_original", fmt.Sprintf("%v", val))
	}
	if val, ok := args["video_start_time_ms"]; ok {
		urlParams.Set("video_start_time_ms", fmt.Sprintf("%v", val))
	}
	if val, ok := args["waterfall_id"]; ok {
		urlParams.Set("waterfall_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_visitor_posts GET visitor_posts for Page
func (c *PageClient) Facebook_page_get_visitor_posts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "visitor_posts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["include_hidden"]; ok {
		urlParams.Set("include_hidden", fmt.Sprintf("%v", val))
	}
	if val, ok := args["limit"]; ok {
		urlParams.Set("limit", fmt.Sprintf("%v", val))
	}
	if val, ok := args["show_expired"]; ok {
		urlParams.Set("show_expired", fmt.Sprintf("%v", val))
	}
	if val, ok := args["with"]; ok {
		urlParams.Set("with", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_delete_welcome_message_flows DELETE welcome_message_flows for Page
func (c *PageClient) Facebook_page_delete_welcome_message_flows(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	flow_id, ok := args["flow_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: flow_id")
	}
	_ = flow_id // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "welcome_message_flows")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["flow_id"]; ok {
		urlParams.Set("flow_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_welcome_message_flows GET welcome_message_flows for Page
func (c *PageClient) Facebook_page_get_welcome_message_flows(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "welcome_message_flows")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["app_id"]; ok {
		urlParams.Set("app_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["flow_id"]; ok {
		urlParams.Set("flow_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_welcome_message_flows POST welcome_message_flows for Page
func (c *PageClient) Facebook_page_post_welcome_message_flows(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "welcome_message_flows")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["eligible_platforms"]; ok {
		urlParams.Set("eligible_platforms", fmt.Sprintf("%v", val))
	}
	if val, ok := args["flow_id"]; ok {
		urlParams.Set("flow_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["welcome_message_flow"]; ok {
		urlParams.Set("welcome_message_flow", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_get_ GET  for Page
func (c *PageClient) Facebook_page_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_linking_token"]; ok {
		urlParams.Set("account_linking_token", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_page_post_ POST  for Page
func (c *PageClient) Facebook_page_post_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["about"]; ok {
		urlParams.Set("about", fmt.Sprintf("%v", val))
	}
	if val, ok := args["accept_crossposting_handshake"]; ok {
		urlParams.Set("accept_crossposting_handshake", fmt.Sprintf("%v", val))
	}
	if val, ok := args["allow_spherical_photo"]; ok {
		urlParams.Set("allow_spherical_photo", fmt.Sprintf("%v", val))
	}
	if val, ok := args["attire"]; ok {
		urlParams.Set("attire", fmt.Sprintf("%v", val))
	}
	if val, ok := args["begin_crossposting_handshake"]; ok {
		urlParams.Set("begin_crossposting_handshake", fmt.Sprintf("%v", val))
	}
	if val, ok := args["bio"]; ok {
		urlParams.Set("bio", fmt.Sprintf("%v", val))
	}
	if val, ok := args["category_list"]; ok {
		urlParams.Set("category_list", fmt.Sprintf("%v", val))
	}
	if val, ok := args["company_overview"]; ok {
		urlParams.Set("company_overview", fmt.Sprintf("%v", val))
	}
	if val, ok := args["contact_address"]; ok {
		urlParams.Set("contact_address", fmt.Sprintf("%v", val))
	}
	if val, ok := args["cover"]; ok {
		urlParams.Set("cover", fmt.Sprintf("%v", val))
	}
	if val, ok := args["culinary_team"]; ok {
		urlParams.Set("culinary_team", fmt.Sprintf("%v", val))
	}
	if val, ok := args["delivery_and_pickup_option_info"]; ok {
		urlParams.Set("delivery_and_pickup_option_info", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["differently_open_offerings"]; ok {
		urlParams.Set("differently_open_offerings", fmt.Sprintf("%v", val))
	}
	if val, ok := args["directed_by"]; ok {
		urlParams.Set("directed_by", fmt.Sprintf("%v", val))
	}
	if val, ok := args["displayed_message_response_time"]; ok {
		urlParams.Set("displayed_message_response_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["emails"]; ok {
		urlParams.Set("emails", fmt.Sprintf("%v", val))
	}
	if val, ok := args["focus_x"]; ok {
		urlParams.Set("focus_x", fmt.Sprintf("%v", val))
	}
	if val, ok := args["focus_y"]; ok {
		urlParams.Set("focus_y", fmt.Sprintf("%v", val))
	}
	if val, ok := args["food_styles"]; ok {
		urlParams.Set("food_styles", fmt.Sprintf("%v", val))
	}
	if val, ok := args["gen_ai_provenance_type"]; ok {
		urlParams.Set("gen_ai_provenance_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["general_info"]; ok {
		urlParams.Set("general_info", fmt.Sprintf("%v", val))
	}
	if val, ok := args["general_manager"]; ok {
		urlParams.Set("general_manager", fmt.Sprintf("%v", val))
	}
	if val, ok := args["genre"]; ok {
		urlParams.Set("genre", fmt.Sprintf("%v", val))
	}
	if val, ok := args["hours"]; ok {
		urlParams.Set("hours", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ignore_coordinate_warnings"]; ok {
		urlParams.Set("ignore_coordinate_warnings", fmt.Sprintf("%v", val))
	}
	if val, ok := args["impressum"]; ok {
		urlParams.Set("impressum", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_always_open"]; ok {
		urlParams.Set("is_always_open", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_permanently_closed"]; ok {
		urlParams.Set("is_permanently_closed", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_published"]; ok {
		urlParams.Set("is_published", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_webhooks_subscribed"]; ok {
		urlParams.Set("is_webhooks_subscribed", fmt.Sprintf("%v", val))
	}
	if val, ok := args["location"]; ok {
		urlParams.Set("location", fmt.Sprintf("%v", val))
	}
	if val, ok := args["menu"]; ok {
		urlParams.Set("menu", fmt.Sprintf("%v", val))
	}
	if val, ok := args["mission"]; ok {
		urlParams.Set("mission", fmt.Sprintf("%v", val))
	}
	if val, ok := args["no_feed_story"]; ok {
		urlParams.Set("no_feed_story", fmt.Sprintf("%v", val))
	}
	if val, ok := args["no_notification"]; ok {
		urlParams.Set("no_notification", fmt.Sprintf("%v", val))
	}
	if val, ok := args["offset_x"]; ok {
		urlParams.Set("offset_x", fmt.Sprintf("%v", val))
	}
	if val, ok := args["offset_y"]; ok {
		urlParams.Set("offset_y", fmt.Sprintf("%v", val))
	}
	if val, ok := args["parking"]; ok {
		urlParams.Set("parking", fmt.Sprintf("%v", val))
	}
	if val, ok := args["payment_options"]; ok {
		urlParams.Set("payment_options", fmt.Sprintf("%v", val))
	}
	if val, ok := args["phone"]; ok {
		urlParams.Set("phone", fmt.Sprintf("%v", val))
	}
	if val, ok := args["pickup_options"]; ok {
		urlParams.Set("pickup_options", fmt.Sprintf("%v", val))
	}
	if val, ok := args["plot_outline"]; ok {
		urlParams.Set("plot_outline", fmt.Sprintf("%v", val))
	}
	if val, ok := args["price_range"]; ok {
		urlParams.Set("price_range", fmt.Sprintf("%v", val))
	}
	if val, ok := args["public_transit"]; ok {
		urlParams.Set("public_transit", fmt.Sprintf("%v", val))
	}
	if val, ok := args["restaurant_services"]; ok {
		urlParams.Set("restaurant_services", fmt.Sprintf("%v", val))
	}
	if val, ok := args["restaurant_specialties"]; ok {
		urlParams.Set("restaurant_specialties", fmt.Sprintf("%v", val))
	}
	if val, ok := args["scrape"]; ok {
		urlParams.Set("scrape", fmt.Sprintf("%v", val))
	}
	if val, ok := args["service_details"]; ok {
		urlParams.Set("service_details", fmt.Sprintf("%v", val))
	}
	if val, ok := args["spherical_metadata"]; ok {
		urlParams.Set("spherical_metadata", fmt.Sprintf("%v", val))
	}
	if val, ok := args["start_info"]; ok {
		urlParams.Set("start_info", fmt.Sprintf("%v", val))
	}
	if val, ok := args["store_location_descriptor"]; ok {
		urlParams.Set("store_location_descriptor", fmt.Sprintf("%v", val))
	}
	if val, ok := args["temporary_status"]; ok {
		urlParams.Set("temporary_status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["website"]; ok {
		urlParams.Set("website", fmt.Sprintf("%v", val))
	}
	if val, ok := args["zoom_scale_x"]; ok {
		urlParams.Set("zoom_scale_x", fmt.Sprintf("%v", val))
	}
	if val, ok := args["zoom_scale_y"]; ok {
		urlParams.Set("zoom_scale_y", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
