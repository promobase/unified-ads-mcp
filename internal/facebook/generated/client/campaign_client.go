// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// CampaignClient provides methods for Campaign operations
type CampaignClient struct {
	accessToken string
}

// NewCampaignClient creates a new Campaign client
func NewCampaignClient(accessToken string) *CampaignClient {
	return &CampaignClient{
		accessToken: accessToken,
	}
}

// campaign_get_ad_studies GET ad_studies for Campaign
func (c *CampaignClient) Campaign_get_ad_studies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	campaign_id, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	_ = campaign_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Campaign endpoints, include campaign_id in the URL path
	campaignId, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/ad_studies", campaignId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["campaign_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "campaign_id" != "campaign_id" {
			urlParams.Set("campaign_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "campaign_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "campaign_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "campaign_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "campaign_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// campaign_post_adlabels POST adlabels for Campaign
func (c *CampaignClient) Campaign_post_adlabels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	campaign_id, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	_ = campaign_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Campaign endpoints, include campaign_id in the URL path
	campaignId, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/adlabels", campaignId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["campaign_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "campaign_id" != "campaign_id" {
			urlParams.Set("campaign_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "campaign_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// campaign_get_adrules_governed GET adrules_governed for Campaign
func (c *CampaignClient) Campaign_get_adrules_governed(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	campaign_id, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	_ = campaign_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Campaign endpoints, include campaign_id in the URL path
	campaignId, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/adrules_governed", campaignId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["campaign_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "campaign_id" != "campaign_id" {
			urlParams.Set("campaign_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "campaign_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "campaign_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "campaign_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "campaign_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "campaign_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// campaign_get_ads GET ads for Campaign
func (c *CampaignClient) Campaign_get_ads(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	campaign_id, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	_ = campaign_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Campaign endpoints, include campaign_id in the URL path
	campaignId, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/ads", campaignId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["campaign_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "campaign_id" != "campaign_id" {
			urlParams.Set("campaign_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "campaign_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "campaign_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "campaign_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "campaign_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "campaign_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// campaign_get_adsets GET adsets for Campaign
func (c *CampaignClient) Campaign_get_adsets(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	campaign_id, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	_ = campaign_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Campaign endpoints, include campaign_id in the URL path
	campaignId, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/adsets", campaignId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["campaign_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "campaign_id" != "campaign_id" {
			urlParams.Set("campaign_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "campaign_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "campaign_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "campaign_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "campaign_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "campaign_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// campaign_post_budget_schedules POST budget_schedules for Campaign
func (c *CampaignClient) Campaign_post_budget_schedules(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	campaign_id, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	_ = campaign_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Campaign endpoints, include campaign_id in the URL path
	campaignId, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/budget_schedules", campaignId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["campaign_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "campaign_id" != "campaign_id" {
			urlParams.Set("campaign_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "campaign_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// campaign_get_copies GET copies for Campaign
func (c *CampaignClient) Campaign_get_copies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	campaign_id, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	_ = campaign_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Campaign endpoints, include campaign_id in the URL path
	campaignId, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/copies", campaignId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["campaign_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "campaign_id" != "campaign_id" {
			urlParams.Set("campaign_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "campaign_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "campaign_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "campaign_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "campaign_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "campaign_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// campaign_post_copies POST copies for Campaign
func (c *CampaignClient) Campaign_post_copies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	campaign_id, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	_ = campaign_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Campaign endpoints, include campaign_id in the URL path
	campaignId, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/copies", campaignId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["campaign_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "campaign_id" != "campaign_id" {
			urlParams.Set("campaign_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "campaign_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// campaign_get_insights GET insights for Campaign
func (c *CampaignClient) Campaign_get_insights(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	campaign_id, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	_ = campaign_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Campaign endpoints, include campaign_id in the URL path
	campaignId, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/insights", campaignId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["campaign_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "campaign_id" != "campaign_id" {
			urlParams.Set("campaign_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "campaign_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "campaign_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "campaign_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "campaign_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "campaign_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// campaign_post_insights POST insights for Campaign
func (c *CampaignClient) Campaign_post_insights(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	campaign_id, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	_ = campaign_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Campaign endpoints, include campaign_id in the URL path
	campaignId, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/insights", campaignId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["campaign_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "campaign_id" != "campaign_id" {
			urlParams.Set("campaign_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "campaign_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// campaign_delete_ DELETE  for Campaign
func (c *CampaignClient) Campaign_delete_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	campaign_id, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	_ = campaign_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Campaign endpoints, include campaign_id in the URL path
	campaignId, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/", campaignId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["campaign_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "campaign_id" != "campaign_id" {
			urlParams.Set("campaign_id", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// campaign_get_ GET  for Campaign
func (c *CampaignClient) Campaign_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	campaign_id, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	_ = campaign_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Campaign endpoints, include campaign_id in the URL path
	campaignId, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/", campaignId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["campaign_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "campaign_id" != "campaign_id" {
			urlParams.Set("campaign_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "campaign_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "campaign_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "campaign_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "campaign_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "campaign_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// campaign_post_ POST  for Campaign
func (c *CampaignClient) Campaign_post_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	campaign_id, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	_ = campaign_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Campaign endpoints, include campaign_id in the URL path
	campaignId, ok := args["campaign_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: campaign_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/", campaignId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["campaign_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "campaign_id" != "campaign_id" {
			urlParams.Set("campaign_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "campaign_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
