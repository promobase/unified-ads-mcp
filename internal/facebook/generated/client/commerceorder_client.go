// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// CommerceOrderClient provides methods for CommerceOrder operations
type CommerceOrderClient struct {
	accessToken string
}

// NewCommerceOrderClient creates a new CommerceOrder client
func NewCommerceOrderClient(accessToken string) *CommerceOrderClient {
	return &CommerceOrderClient{
		accessToken: accessToken,
	}
}

// commerceorder_post_acknowledge_order POST acknowledge_order for CommerceOrder
func (c *CommerceOrderClient) Commerceorder_post_acknowledge_order(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	idempotency_key, ok := args["idempotency_key"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: idempotency_key")
	}
	_ = idempotency_key // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/acknowledge_order")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["idempotency_key"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("idempotency_key", fmt.Sprintf("%v", val))

	}
	if val, ok := args["merchant_order_reference"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("merchant_order_reference", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commerceorder_get_cancellations GET cancellations for CommerceOrder
func (c *CommerceOrderClient) Commerceorder_get_cancellations(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/cancellations")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commerceorder_post_cancellations POST cancellations for CommerceOrder
func (c *CommerceOrderClient) Commerceorder_post_cancellations(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	idempotency_key, ok := args["idempotency_key"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: idempotency_key")
	}
	_ = idempotency_key // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/cancellations")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["cancel_reason"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("cancel_reason", fmt.Sprintf("%v", val))

	}
	if val, ok := args["idempotency_key"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("idempotency_key", fmt.Sprintf("%v", val))

	}
	if val, ok := args["items"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("items", fmt.Sprintf("%v", val))

	}
	if val, ok := args["restock_items"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("restock_items", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commerceorder_post_item_updates POST item_updates for CommerceOrder
func (c *CommerceOrderClient) Commerceorder_post_item_updates(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	items, ok := args["items"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: items")
	}
	_ = items // Suppress unused variable warning
	merchant_order_reference, ok := args["merchant_order_reference"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: merchant_order_reference")
	}
	_ = merchant_order_reference // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/item_updates")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["items"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("items", fmt.Sprintf("%v", val))

	}
	if val, ok := args["merchant_order_reference"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("merchant_order_reference", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commerceorder_get_items GET items for CommerceOrder
func (c *CommerceOrderClient) Commerceorder_get_items(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/items")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commerceorder_get_payments GET payments for CommerceOrder
func (c *CommerceOrderClient) Commerceorder_get_payments(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/payments")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commerceorder_get_promotion_details GET promotion_details for CommerceOrder
func (c *CommerceOrderClient) Commerceorder_get_promotion_details(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/promotion_details")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commerceorder_get_promotions GET promotions for CommerceOrder
func (c *CommerceOrderClient) Commerceorder_get_promotions(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/promotions")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commerceorder_get_refunds GET refunds for CommerceOrder
func (c *CommerceOrderClient) Commerceorder_get_refunds(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/refunds")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commerceorder_post_refunds POST refunds for CommerceOrder
func (c *CommerceOrderClient) Commerceorder_post_refunds(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	idempotency_key, ok := args["idempotency_key"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: idempotency_key")
	}
	_ = idempotency_key // Suppress unused variable warning
	reason_code, ok := args["reason_code"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: reason_code")
	}
	_ = reason_code // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/refunds")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["adjustment_amount"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("adjustment_amount", fmt.Sprintf("%v", val))

	}
	if val, ok := args["deductions"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("deductions", fmt.Sprintf("%v", val))

	}
	if val, ok := args["idempotency_key"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("idempotency_key", fmt.Sprintf("%v", val))

	}
	if val, ok := args["items"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("items", fmt.Sprintf("%v", val))

	}
	if val, ok := args["reason_code"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("reason_code", fmt.Sprintf("%v", val))

	}
	if val, ok := args["reason_text"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("reason_text", fmt.Sprintf("%v", val))

	}
	if val, ok := args["return_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("return_id", fmt.Sprintf("%v", val))

	}
	if val, ok := args["shipping"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("shipping", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commerceorder_get_returns GET returns for CommerceOrder
func (c *CommerceOrderClient) Commerceorder_get_returns(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/returns")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["merchant_return_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("merchant_return_id", fmt.Sprintf("%v", val))

	}
	if val, ok := args["statuses"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("statuses", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commerceorder_post_returns POST returns for CommerceOrder
func (c *CommerceOrderClient) Commerceorder_post_returns(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	items, ok := args["items"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: items")
	}
	_ = items // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/returns")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["items"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("items", fmt.Sprintf("%v", val))

	}
	if val, ok := args["merchant_return_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("merchant_return_id", fmt.Sprintf("%v", val))

	}
	if val, ok := args["return_message"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("return_message", fmt.Sprintf("%v", val))

	}
	if val, ok := args["update"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("update", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commerceorder_get_shipments GET shipments for CommerceOrder
func (c *CommerceOrderClient) Commerceorder_get_shipments(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/shipments")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commerceorder_post_shipments POST shipments for CommerceOrder
func (c *CommerceOrderClient) Commerceorder_post_shipments(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	idempotency_key, ok := args["idempotency_key"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: idempotency_key")
	}
	_ = idempotency_key // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/shipments")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["external_redemption_link"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("external_redemption_link", fmt.Sprintf("%v", val))

	}
	if val, ok := args["external_shipment_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("external_shipment_id", fmt.Sprintf("%v", val))

	}
	if val, ok := args["fulfillment"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fulfillment", fmt.Sprintf("%v", val))

	}
	if val, ok := args["idempotency_key"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("idempotency_key", fmt.Sprintf("%v", val))

	}
	if val, ok := args["items"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("items", fmt.Sprintf("%v", val))

	}
	if val, ok := args["merchant_order_reference"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("merchant_order_reference", fmt.Sprintf("%v", val))

	}
	if val, ok := args["shipment_origin_postal_code"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("shipment_origin_postal_code", fmt.Sprintf("%v", val))

	}
	if val, ok := args["shipping_tax_details"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("shipping_tax_details", fmt.Sprintf("%v", val))

	}
	if val, ok := args["should_use_default_fulfillment_location"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("should_use_default_fulfillment_location", fmt.Sprintf("%v", val))

	}
	if val, ok := args["tracking_info"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("tracking_info", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commerceorder_post_update_shipment POST update_shipment for CommerceOrder
func (c *CommerceOrderClient) Commerceorder_post_update_shipment(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	idempotency_key, ok := args["idempotency_key"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: idempotency_key")
	}
	_ = idempotency_key // Suppress unused variable warning
	tracking_info, ok := args["tracking_info"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: tracking_info")
	}
	_ = tracking_info // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/update_shipment")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["external_shipment_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("external_shipment_id", fmt.Sprintf("%v", val))

	}
	if val, ok := args["fulfillment_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fulfillment_id", fmt.Sprintf("%v", val))

	}
	if val, ok := args["idempotency_key"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("idempotency_key", fmt.Sprintf("%v", val))

	}
	if val, ok := args["shipment_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("shipment_id", fmt.Sprintf("%v", val))

	}
	if val, ok := args["tracking_info"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("tracking_info", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// commerceorder_get_ GET  for CommerceOrder
func (c *CommerceOrderClient) Commerceorder_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
