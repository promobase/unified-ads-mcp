// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// ProductCatalogClient provides methods for ProductCatalog operations
type ProductCatalogClient struct {
	accessToken string
}

// NewProductCatalogClient creates a new ProductCatalog client
func NewProductCatalogClient(accessToken string) *ProductCatalogClient {
	return &ProductCatalogClient{
		accessToken: accessToken,
	}
}

// productcatalog_delete_agencies DELETE agencies for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_delete_agencies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	business, ok := args["business"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: business")
	}
	_ = business // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "agencies")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["business"]; ok {
		urlParams.Set("business", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_agencies GET agencies for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_agencies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "agencies")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_post_agencies POST agencies for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_post_agencies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	business, ok := args["business"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: business")
	}
	_ = business // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "agencies")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["business"]; ok {
		urlParams.Set("business", fmt.Sprintf("%v", val))
	}
	if val, ok := args["permitted_roles"]; ok {
		urlParams.Set("permitted_roles", fmt.Sprintf("%v", val))
	}
	if val, ok := args["permitted_tasks"]; ok {
		urlParams.Set("permitted_tasks", fmt.Sprintf("%v", val))
	}
	if val, ok := args["skip_defaults"]; ok {
		urlParams.Set("skip_defaults", fmt.Sprintf("%v", val))
	}
	if val, ok := args["utm_settings"]; ok {
		urlParams.Set("utm_settings", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_delete_assigned_users DELETE assigned_users for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_delete_assigned_users(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	user, ok := args["user"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: user")
	}
	_ = user // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "assigned_users")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["user"]; ok {
		urlParams.Set("user", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_assigned_users GET assigned_users for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_assigned_users(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	business, ok := args["business"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: business")
	}
	_ = business // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "assigned_users")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["business"]; ok {
		urlParams.Set("business", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_post_assigned_users POST assigned_users for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_post_assigned_users(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	tasks, ok := args["tasks"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: tasks")
	}
	_ = tasks // Suppress unused variable warning
	user, ok := args["user"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: user")
	}
	_ = user // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "assigned_users")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["tasks"]; ok {
		urlParams.Set("tasks", fmt.Sprintf("%v", val))
	}
	if val, ok := args["user"]; ok {
		urlParams.Set("user", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_automotive_models GET automotive_models for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_automotive_models(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "automotive_models")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["bulk_pagination"]; ok {
		urlParams.Set("bulk_pagination", fmt.Sprintf("%v", val))
	}
	if val, ok := args["filter"]; ok {
		urlParams.Set("filter", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_post_batch POST batch for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_post_batch(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	requests, ok := args["requests"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: requests")
	}
	_ = requests // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "batch")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["allow_upsert"]; ok {
		urlParams.Set("allow_upsert", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fbe_external_business_id"]; ok {
		urlParams.Set("fbe_external_business_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["requests"]; ok {
		urlParams.Set("requests", fmt.Sprintf("%v", val))
	}
	if val, ok := args["version"]; ok {
		urlParams.Set("version", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_post_catalog_store POST catalog_store for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_post_catalog_store(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	page, ok := args["page"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: page")
	}
	_ = page // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "catalog_store")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["page"]; ok {
		urlParams.Set("page", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_categories GET categories for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_categories(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	categorization_criteria, ok := args["categorization_criteria"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: categorization_criteria")
	}
	_ = categorization_criteria // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "categories")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["categorization_criteria"]; ok {
		urlParams.Set("categorization_criteria", fmt.Sprintf("%v", val))
	}
	if val, ok := args["filter"]; ok {
		urlParams.Set("filter", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_post_categories POST categories for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_post_categories(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	data, ok := args["data"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: data")
	}
	_ = data // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "categories")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["data"]; ok {
		urlParams.Set("data", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_check_batch_request_status GET check_batch_request_status for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_check_batch_request_status(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	handle, ok := args["handle"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: handle")
	}
	_ = handle // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "check_batch_request_status")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["error_priority"]; ok {
		urlParams.Set("error_priority", fmt.Sprintf("%v", val))
	}
	if val, ok := args["handle"]; ok {
		urlParams.Set("handle", fmt.Sprintf("%v", val))
	}
	if val, ok := args["load_ids_of_invalid_requests"]; ok {
		urlParams.Set("load_ids_of_invalid_requests", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_check_marketplace_partner_sellers_status GET check_marketplace_partner_sellers_status for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_check_marketplace_partner_sellers_status(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	session_id, ok := args["session_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: session_id")
	}
	_ = session_id // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "check_marketplace_partner_sellers_status")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["session_id"]; ok {
		urlParams.Set("session_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_collaborative_ads_lsb_image_bank GET collaborative_ads_lsb_image_bank for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_collaborative_ads_lsb_image_bank(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "collaborative_ads_lsb_image_bank")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_collaborative_ads_share_settings GET collaborative_ads_share_settings for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_collaborative_ads_share_settings(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "collaborative_ads_share_settings")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_post_cpas_lsb_image_bank POST cpas_lsb_image_bank for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_post_cpas_lsb_image_bank(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	backup_image_urls, ok := args["backup_image_urls"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: backup_image_urls")
	}
	_ = backup_image_urls // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "cpas_lsb_image_bank")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_group_id"]; ok {
		urlParams.Set("ad_group_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["agency_business_id"]; ok {
		urlParams.Set("agency_business_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["backup_image_urls"]; ok {
		urlParams.Set("backup_image_urls", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_creator_asset_creatives GET creator_asset_creatives for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_creator_asset_creatives(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "creator_asset_creatives")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["moderation_status"]; ok {
		urlParams.Set("moderation_status", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_data_sources GET data_sources for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_data_sources(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "data_sources")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ingestion_source_type"]; ok {
		urlParams.Set("ingestion_source_type", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_destinations GET destinations for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_destinations(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "destinations")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["bulk_pagination"]; ok {
		urlParams.Set("bulk_pagination", fmt.Sprintf("%v", val))
	}
	if val, ok := args["filter"]; ok {
		urlParams.Set("filter", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_diagnostics GET diagnostics for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_diagnostics(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "diagnostics")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["affected_channels"]; ok {
		urlParams.Set("affected_channels", fmt.Sprintf("%v", val))
	}
	if val, ok := args["affected_entities"]; ok {
		urlParams.Set("affected_entities", fmt.Sprintf("%v", val))
	}
	if val, ok := args["affected_features"]; ok {
		urlParams.Set("affected_features", fmt.Sprintf("%v", val))
	}
	if val, ok := args["severities"]; ok {
		urlParams.Set("severities", fmt.Sprintf("%v", val))
	}
	if val, ok := args["types"]; ok {
		urlParams.Set("types", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_event_stats GET event_stats for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_event_stats(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "event_stats")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["breakdowns"]; ok {
		urlParams.Set("breakdowns", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_delete_external_event_sources DELETE external_event_sources for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_delete_external_event_sources(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "external_event_sources")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["external_event_sources"]; ok {
		urlParams.Set("external_event_sources", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_external_event_sources GET external_event_sources for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_external_event_sources(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "external_event_sources")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_post_external_event_sources POST external_event_sources for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_post_external_event_sources(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "external_event_sources")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["external_event_sources"]; ok {
		urlParams.Set("external_event_sources", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_flights GET flights for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_flights(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "flights")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["bulk_pagination"]; ok {
		urlParams.Set("bulk_pagination", fmt.Sprintf("%v", val))
	}
	if val, ok := args["filter"]; ok {
		urlParams.Set("filter", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_post_geolocated_items_batch POST geolocated_items_batch for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_post_geolocated_items_batch(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	item_type, ok := args["item_type"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: item_type")
	}
	_ = item_type // Suppress unused variable warning
	requests, ok := args["requests"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: requests")
	}
	_ = requests // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "geolocated_items_batch")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["allow_upsert"]; ok {
		urlParams.Set("allow_upsert", fmt.Sprintf("%v", val))
	}
	if val, ok := args["item_type"]; ok {
		urlParams.Set("item_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["requests"]; ok {
		urlParams.Set("requests", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_home_listings GET home_listings for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_home_listings(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "home_listings")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["bulk_pagination"]; ok {
		urlParams.Set("bulk_pagination", fmt.Sprintf("%v", val))
	}
	if val, ok := args["filter"]; ok {
		urlParams.Set("filter", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_post_home_listings POST home_listings for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_post_home_listings(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	address, ok := args["address"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: address")
	}
	_ = address // Suppress unused variable warning
	availability, ok := args["availability"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: availability")
	}
	_ = availability // Suppress unused variable warning
	currency, ok := args["currency"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: currency")
	}
	_ = currency // Suppress unused variable warning
	home_listing_id, ok := args["home_listing_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: home_listing_id")
	}
	_ = home_listing_id // Suppress unused variable warning
	images, ok := args["images"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: images")
	}
	_ = images // Suppress unused variable warning
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning
	price, ok := args["price"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: price")
	}
	_ = price // Suppress unused variable warning
	url_, ok := args["url"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: url")
	}
	_ = url_ // Suppress unused variable warning
	year_built, ok := args["year_built"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: year_built")
	}
	_ = year_built // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "home_listings")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["address"]; ok {
		urlParams.Set("address", fmt.Sprintf("%v", val))
	}
	if val, ok := args["availability"]; ok {
		urlParams.Set("availability", fmt.Sprintf("%v", val))
	}
	if val, ok := args["currency"]; ok {
		urlParams.Set("currency", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["home_listing_id"]; ok {
		urlParams.Set("home_listing_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["images"]; ok {
		urlParams.Set("images", fmt.Sprintf("%v", val))
	}
	if val, ok := args["listing_type"]; ok {
		urlParams.Set("listing_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["num_baths"]; ok {
		urlParams.Set("num_baths", fmt.Sprintf("%v", val))
	}
	if val, ok := args["num_beds"]; ok {
		urlParams.Set("num_beds", fmt.Sprintf("%v", val))
	}
	if val, ok := args["num_units"]; ok {
		urlParams.Set("num_units", fmt.Sprintf("%v", val))
	}
	if val, ok := args["price"]; ok {
		urlParams.Set("price", fmt.Sprintf("%v", val))
	}
	if val, ok := args["property_type"]; ok {
		urlParams.Set("property_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["url"]; ok {
		urlParams.Set("url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["year_built"]; ok {
		urlParams.Set("year_built", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_hotel_rooms_batch GET hotel_rooms_batch for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_hotel_rooms_batch(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	handle, ok := args["handle"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: handle")
	}
	_ = handle // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "hotel_rooms_batch")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["handle"]; ok {
		urlParams.Set("handle", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_post_hotel_rooms_batch POST hotel_rooms_batch for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_post_hotel_rooms_batch(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	standard, ok := args["standard"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: standard")
	}
	_ = standard // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "hotel_rooms_batch")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["file"]; ok {
		urlParams.Set("file", fmt.Sprintf("%v", val))
	}
	if val, ok := args["password"]; ok {
		urlParams.Set("password", fmt.Sprintf("%v", val))
	}
	if val, ok := args["standard"]; ok {
		urlParams.Set("standard", fmt.Sprintf("%v", val))
	}
	if val, ok := args["update_only"]; ok {
		urlParams.Set("update_only", fmt.Sprintf("%v", val))
	}
	if val, ok := args["url"]; ok {
		urlParams.Set("url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["username"]; ok {
		urlParams.Set("username", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_hotels GET hotels for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_hotels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "hotels")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["bulk_pagination"]; ok {
		urlParams.Set("bulk_pagination", fmt.Sprintf("%v", val))
	}
	if val, ok := args["filter"]; ok {
		urlParams.Set("filter", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_post_hotels POST hotels for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_post_hotels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	address, ok := args["address"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: address")
	}
	_ = address // Suppress unused variable warning
	description, ok := args["description"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: description")
	}
	_ = description // Suppress unused variable warning
	images, ok := args["images"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: images")
	}
	_ = images // Suppress unused variable warning
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning
	url_, ok := args["url"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: url")
	}
	_ = url_ // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "hotels")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["address"]; ok {
		urlParams.Set("address", fmt.Sprintf("%v", val))
	}
	if val, ok := args["applinks"]; ok {
		urlParams.Set("applinks", fmt.Sprintf("%v", val))
	}
	if val, ok := args["base_price"]; ok {
		urlParams.Set("base_price", fmt.Sprintf("%v", val))
	}
	if val, ok := args["brand"]; ok {
		urlParams.Set("brand", fmt.Sprintf("%v", val))
	}
	if val, ok := args["currency"]; ok {
		urlParams.Set("currency", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["guest_ratings"]; ok {
		urlParams.Set("guest_ratings", fmt.Sprintf("%v", val))
	}
	if val, ok := args["hotel_id"]; ok {
		urlParams.Set("hotel_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["images"]; ok {
		urlParams.Set("images", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["phone"]; ok {
		urlParams.Set("phone", fmt.Sprintf("%v", val))
	}
	if val, ok := args["star_rating"]; ok {
		urlParams.Set("star_rating", fmt.Sprintf("%v", val))
	}
	if val, ok := args["url"]; ok {
		urlParams.Set("url", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_post_items_batch POST items_batch for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_post_items_batch(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	item_type, ok := args["item_type"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: item_type")
	}
	_ = item_type // Suppress unused variable warning
	requests, ok := args["requests"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: requests")
	}
	_ = requests // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "items_batch")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["allow_upsert"]; ok {
		urlParams.Set("allow_upsert", fmt.Sprintf("%v", val))
	}
	if val, ok := args["item_sub_type"]; ok {
		urlParams.Set("item_sub_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["item_type"]; ok {
		urlParams.Set("item_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["requests"]; ok {
		urlParams.Set("requests", fmt.Sprintf("%v", val))
	}
	if val, ok := args["version"]; ok {
		urlParams.Set("version", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_post_localized_items_batch POST localized_items_batch for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_post_localized_items_batch(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	item_type, ok := args["item_type"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: item_type")
	}
	_ = item_type // Suppress unused variable warning
	requests, ok := args["requests"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: requests")
	}
	_ = requests // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "localized_items_batch")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["allow_upsert"]; ok {
		urlParams.Set("allow_upsert", fmt.Sprintf("%v", val))
	}
	if val, ok := args["item_type"]; ok {
		urlParams.Set("item_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["requests"]; ok {
		urlParams.Set("requests", fmt.Sprintf("%v", val))
	}
	if val, ok := args["version"]; ok {
		urlParams.Set("version", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_post_marketplace_partner_sellers_details POST marketplace_partner_sellers_details for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_post_marketplace_partner_sellers_details(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	requests, ok := args["requests"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: requests")
	}
	_ = requests // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "marketplace_partner_sellers_details")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["requests"]; ok {
		urlParams.Set("requests", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_post_marketplace_partner_signals POST marketplace_partner_signals for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_post_marketplace_partner_signals(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	event_name, ok := args["event_name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: event_name")
	}
	_ = event_name // Suppress unused variable warning
	event_time, ok := args["event_time"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: event_time")
	}
	_ = event_time // Suppress unused variable warning
	user_data, ok := args["user_data"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: user_data")
	}
	_ = user_data // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "marketplace_partner_signals")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["event_name"]; ok {
		urlParams.Set("event_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["event_source_url"]; ok {
		urlParams.Set("event_source_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["event_time"]; ok {
		urlParams.Set("event_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["order_data"]; ok {
		urlParams.Set("order_data", fmt.Sprintf("%v", val))
	}
	if val, ok := args["user_data"]; ok {
		urlParams.Set("user_data", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_pricing_variables_batch GET pricing_variables_batch for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_pricing_variables_batch(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	handle, ok := args["handle"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: handle")
	}
	_ = handle // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "pricing_variables_batch")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["handle"]; ok {
		urlParams.Set("handle", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_post_pricing_variables_batch POST pricing_variables_batch for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_post_pricing_variables_batch(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	standard, ok := args["standard"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: standard")
	}
	_ = standard // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "pricing_variables_batch")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["file"]; ok {
		urlParams.Set("file", fmt.Sprintf("%v", val))
	}
	if val, ok := args["password"]; ok {
		urlParams.Set("password", fmt.Sprintf("%v", val))
	}
	if val, ok := args["standard"]; ok {
		urlParams.Set("standard", fmt.Sprintf("%v", val))
	}
	if val, ok := args["update_only"]; ok {
		urlParams.Set("update_only", fmt.Sprintf("%v", val))
	}
	if val, ok := args["url"]; ok {
		urlParams.Set("url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["username"]; ok {
		urlParams.Set("username", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_product_feeds GET product_feeds for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_product_feeds(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "product_feeds")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_post_product_feeds POST product_feeds for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_post_product_feeds(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "product_feeds")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["country"]; ok {
		urlParams.Set("country", fmt.Sprintf("%v", val))
	}
	if val, ok := args["default_currency"]; ok {
		urlParams.Set("default_currency", fmt.Sprintf("%v", val))
	}
	if val, ok := args["deletion_enabled"]; ok {
		urlParams.Set("deletion_enabled", fmt.Sprintf("%v", val))
	}
	if val, ok := args["delimiter"]; ok {
		urlParams.Set("delimiter", fmt.Sprintf("%v", val))
	}
	if val, ok := args["encoding"]; ok {
		urlParams.Set("encoding", fmt.Sprintf("%v", val))
	}
	if val, ok := args["feed_type"]; ok {
		urlParams.Set("feed_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["file_name"]; ok {
		urlParams.Set("file_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ingestion_source_type"]; ok {
		urlParams.Set("ingestion_source_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["item_sub_type"]; ok {
		urlParams.Set("item_sub_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["migrated_from_feed_id"]; ok {
		urlParams.Set("migrated_from_feed_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["override_type"]; ok {
		urlParams.Set("override_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["override_value"]; ok {
		urlParams.Set("override_value", fmt.Sprintf("%v", val))
	}
	if val, ok := args["primary_feed_ids"]; ok {
		urlParams.Set("primary_feed_ids", fmt.Sprintf("%v", val))
	}
	if val, ok := args["quoted_fields_mode"]; ok {
		urlParams.Set("quoted_fields_mode", fmt.Sprintf("%v", val))
	}
	if val, ok := args["rules"]; ok {
		urlParams.Set("rules", fmt.Sprintf("%v", val))
	}
	if val, ok := args["schedule"]; ok {
		urlParams.Set("schedule", fmt.Sprintf("%v", val))
	}
	if val, ok := args["selected_override_fields"]; ok {
		urlParams.Set("selected_override_fields", fmt.Sprintf("%v", val))
	}
	if val, ok := args["update_schedule"]; ok {
		urlParams.Set("update_schedule", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_product_groups GET product_groups for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_product_groups(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "product_groups")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_post_product_groups POST product_groups for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_post_product_groups(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "product_groups")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["retailer_id"]; ok {
		urlParams.Set("retailer_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["variants"]; ok {
		urlParams.Set("variants", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_product_sets GET product_sets for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_product_sets(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "product_sets")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ancestor_id"]; ok {
		urlParams.Set("ancestor_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["has_children"]; ok {
		urlParams.Set("has_children", fmt.Sprintf("%v", val))
	}
	if val, ok := args["parent_id"]; ok {
		urlParams.Set("parent_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["retailer_id"]; ok {
		urlParams.Set("retailer_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_post_product_sets POST product_sets for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_post_product_sets(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "product_sets")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["filter"]; ok {
		urlParams.Set("filter", fmt.Sprintf("%v", val))
	}
	if val, ok := args["metadata"]; ok {
		urlParams.Set("metadata", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ordering_info"]; ok {
		urlParams.Set("ordering_info", fmt.Sprintf("%v", val))
	}
	if val, ok := args["publish_to_shops"]; ok {
		urlParams.Set("publish_to_shops", fmt.Sprintf("%v", val))
	}
	if val, ok := args["retailer_id"]; ok {
		urlParams.Set("retailer_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_product_sets_batch GET product_sets_batch for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_product_sets_batch(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	handle, ok := args["handle"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: handle")
	}
	_ = handle // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "product_sets_batch")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["handle"]; ok {
		urlParams.Set("handle", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_products GET products for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_products(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "products")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["bulk_pagination"]; ok {
		urlParams.Set("bulk_pagination", fmt.Sprintf("%v", val))
	}
	if val, ok := args["error_priority"]; ok {
		urlParams.Set("error_priority", fmt.Sprintf("%v", val))
	}
	if val, ok := args["error_type"]; ok {
		urlParams.Set("error_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["filter"]; ok {
		urlParams.Set("filter", fmt.Sprintf("%v", val))
	}
	if val, ok := args["return_only_approved_products"]; ok {
		urlParams.Set("return_only_approved_products", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_post_products POST products for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_post_products(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	currency, ok := args["currency"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: currency")
	}
	_ = currency // Suppress unused variable warning
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning
	price, ok := args["price"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: price")
	}
	_ = price // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "products")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["additional_image_urls"]; ok {
		urlParams.Set("additional_image_urls", fmt.Sprintf("%v", val))
	}
	if val, ok := args["additional_variant_attributes"]; ok {
		urlParams.Set("additional_variant_attributes", fmt.Sprintf("%v", val))
	}
	if val, ok := args["age_group"]; ok {
		urlParams.Set("age_group", fmt.Sprintf("%v", val))
	}
	if val, ok := args["android_app_name"]; ok {
		urlParams.Set("android_app_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["android_class"]; ok {
		urlParams.Set("android_class", fmt.Sprintf("%v", val))
	}
	if val, ok := args["android_package"]; ok {
		urlParams.Set("android_package", fmt.Sprintf("%v", val))
	}
	if val, ok := args["android_url"]; ok {
		urlParams.Set("android_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["availability"]; ok {
		urlParams.Set("availability", fmt.Sprintf("%v", val))
	}
	if val, ok := args["brand"]; ok {
		urlParams.Set("brand", fmt.Sprintf("%v", val))
	}
	if val, ok := args["category"]; ok {
		urlParams.Set("category", fmt.Sprintf("%v", val))
	}
	if val, ok := args["category_specific_fields"]; ok {
		urlParams.Set("category_specific_fields", fmt.Sprintf("%v", val))
	}
	if val, ok := args["checkout_url"]; ok {
		urlParams.Set("checkout_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["color"]; ok {
		urlParams.Set("color", fmt.Sprintf("%v", val))
	}
	if val, ok := args["commerce_tax_category"]; ok {
		urlParams.Set("commerce_tax_category", fmt.Sprintf("%v", val))
	}
	if val, ok := args["condition"]; ok {
		urlParams.Set("condition", fmt.Sprintf("%v", val))
	}
	if val, ok := args["currency"]; ok {
		urlParams.Set("currency", fmt.Sprintf("%v", val))
	}
	if val, ok := args["custom_data"]; ok {
		urlParams.Set("custom_data", fmt.Sprintf("%v", val))
	}
	if val, ok := args["custom_label_0"]; ok {
		urlParams.Set("custom_label_0", fmt.Sprintf("%v", val))
	}
	if val, ok := args["custom_label_1"]; ok {
		urlParams.Set("custom_label_1", fmt.Sprintf("%v", val))
	}
	if val, ok := args["custom_label_2"]; ok {
		urlParams.Set("custom_label_2", fmt.Sprintf("%v", val))
	}
	if val, ok := args["custom_label_3"]; ok {
		urlParams.Set("custom_label_3", fmt.Sprintf("%v", val))
	}
	if val, ok := args["custom_label_4"]; ok {
		urlParams.Set("custom_label_4", fmt.Sprintf("%v", val))
	}
	if val, ok := args["custom_number_0"]; ok {
		urlParams.Set("custom_number_0", fmt.Sprintf("%v", val))
	}
	if val, ok := args["custom_number_1"]; ok {
		urlParams.Set("custom_number_1", fmt.Sprintf("%v", val))
	}
	if val, ok := args["custom_number_2"]; ok {
		urlParams.Set("custom_number_2", fmt.Sprintf("%v", val))
	}
	if val, ok := args["custom_number_3"]; ok {
		urlParams.Set("custom_number_3", fmt.Sprintf("%v", val))
	}
	if val, ok := args["custom_number_4"]; ok {
		urlParams.Set("custom_number_4", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["expiration_date"]; ok {
		urlParams.Set("expiration_date", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fb_product_category"]; ok {
		urlParams.Set("fb_product_category", fmt.Sprintf("%v", val))
	}
	if val, ok := args["gender"]; ok {
		urlParams.Set("gender", fmt.Sprintf("%v", val))
	}
	if val, ok := args["gtin"]; ok {
		urlParams.Set("gtin", fmt.Sprintf("%v", val))
	}
	if val, ok := args["image_url"]; ok {
		urlParams.Set("image_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["importer_address"]; ok {
		urlParams.Set("importer_address", fmt.Sprintf("%v", val))
	}
	if val, ok := args["importer_name"]; ok {
		urlParams.Set("importer_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["inventory"]; ok {
		urlParams.Set("inventory", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ios_app_name"]; ok {
		urlParams.Set("ios_app_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ios_app_store_id"]; ok {
		urlParams.Set("ios_app_store_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ios_url"]; ok {
		urlParams.Set("ios_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ipad_app_name"]; ok {
		urlParams.Set("ipad_app_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ipad_app_store_id"]; ok {
		urlParams.Set("ipad_app_store_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ipad_url"]; ok {
		urlParams.Set("ipad_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["iphone_app_name"]; ok {
		urlParams.Set("iphone_app_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["iphone_app_store_id"]; ok {
		urlParams.Set("iphone_app_store_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["iphone_url"]; ok {
		urlParams.Set("iphone_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["launch_date"]; ok {
		urlParams.Set("launch_date", fmt.Sprintf("%v", val))
	}
	if val, ok := args["manufacturer_info"]; ok {
		urlParams.Set("manufacturer_info", fmt.Sprintf("%v", val))
	}
	if val, ok := args["manufacturer_part_number"]; ok {
		urlParams.Set("manufacturer_part_number", fmt.Sprintf("%v", val))
	}
	if val, ok := args["marked_for_product_launch"]; ok {
		urlParams.Set("marked_for_product_launch", fmt.Sprintf("%v", val))
	}
	if val, ok := args["material"]; ok {
		urlParams.Set("material", fmt.Sprintf("%v", val))
	}
	if val, ok := args["mobile_link"]; ok {
		urlParams.Set("mobile_link", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ordering_index"]; ok {
		urlParams.Set("ordering_index", fmt.Sprintf("%v", val))
	}
	if val, ok := args["origin_country"]; ok {
		urlParams.Set("origin_country", fmt.Sprintf("%v", val))
	}
	if val, ok := args["pattern"]; ok {
		urlParams.Set("pattern", fmt.Sprintf("%v", val))
	}
	if val, ok := args["price"]; ok {
		urlParams.Set("price", fmt.Sprintf("%v", val))
	}
	if val, ok := args["product_priority_0"]; ok {
		urlParams.Set("product_priority_0", fmt.Sprintf("%v", val))
	}
	if val, ok := args["product_priority_1"]; ok {
		urlParams.Set("product_priority_1", fmt.Sprintf("%v", val))
	}
	if val, ok := args["product_priority_2"]; ok {
		urlParams.Set("product_priority_2", fmt.Sprintf("%v", val))
	}
	if val, ok := args["product_priority_3"]; ok {
		urlParams.Set("product_priority_3", fmt.Sprintf("%v", val))
	}
	if val, ok := args["product_priority_4"]; ok {
		urlParams.Set("product_priority_4", fmt.Sprintf("%v", val))
	}
	if val, ok := args["product_type"]; ok {
		urlParams.Set("product_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["quantity_to_sell_on_facebook"]; ok {
		urlParams.Set("quantity_to_sell_on_facebook", fmt.Sprintf("%v", val))
	}
	if val, ok := args["retailer_id"]; ok {
		urlParams.Set("retailer_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["retailer_product_group_id"]; ok {
		urlParams.Set("retailer_product_group_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["return_policy_days"]; ok {
		urlParams.Set("return_policy_days", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sale_price"]; ok {
		urlParams.Set("sale_price", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sale_price_end_date"]; ok {
		urlParams.Set("sale_price_end_date", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sale_price_start_date"]; ok {
		urlParams.Set("sale_price_start_date", fmt.Sprintf("%v", val))
	}
	if val, ok := args["short_description"]; ok {
		urlParams.Set("short_description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["size"]; ok {
		urlParams.Set("size", fmt.Sprintf("%v", val))
	}
	if val, ok := args["start_date"]; ok {
		urlParams.Set("start_date", fmt.Sprintf("%v", val))
	}
	if val, ok := args["url"]; ok {
		urlParams.Set("url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["visibility"]; ok {
		urlParams.Set("visibility", fmt.Sprintf("%v", val))
	}
	if val, ok := args["wa_compliance_category"]; ok {
		urlParams.Set("wa_compliance_category", fmt.Sprintf("%v", val))
	}
	if val, ok := args["windows_phone_app_id"]; ok {
		urlParams.Set("windows_phone_app_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["windows_phone_app_name"]; ok {
		urlParams.Set("windows_phone_app_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["windows_phone_url"]; ok {
		urlParams.Set("windows_phone_url", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_post_update_generated_image_config POST update_generated_image_config for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_post_update_generated_image_config(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	data, ok := args["data"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: data")
	}
	_ = data // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "update_generated_image_config")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["data"]; ok {
		urlParams.Set("data", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_vehicle_offers GET vehicle_offers for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_vehicle_offers(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "vehicle_offers")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["bulk_pagination"]; ok {
		urlParams.Set("bulk_pagination", fmt.Sprintf("%v", val))
	}
	if val, ok := args["filter"]; ok {
		urlParams.Set("filter", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_vehicles GET vehicles for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_vehicles(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "vehicles")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["bulk_pagination"]; ok {
		urlParams.Set("bulk_pagination", fmt.Sprintf("%v", val))
	}
	if val, ok := args["filter"]; ok {
		urlParams.Set("filter", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_post_vehicles POST vehicles for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_post_vehicles(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	address, ok := args["address"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: address")
	}
	_ = address // Suppress unused variable warning
	body_style, ok := args["body_style"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: body_style")
	}
	_ = body_style // Suppress unused variable warning
	currency, ok := args["currency"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: currency")
	}
	_ = currency // Suppress unused variable warning
	description, ok := args["description"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: description")
	}
	_ = description // Suppress unused variable warning
	exterior_color, ok := args["exterior_color"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: exterior_color")
	}
	_ = exterior_color // Suppress unused variable warning
	images, ok := args["images"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: images")
	}
	_ = images // Suppress unused variable warning
	make, ok := args["make"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: make")
	}
	_ = make // Suppress unused variable warning
	mileage, ok := args["mileage"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: mileage")
	}
	_ = mileage // Suppress unused variable warning
	model, ok := args["model"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: model")
	}
	_ = model // Suppress unused variable warning
	price, ok := args["price"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: price")
	}
	_ = price // Suppress unused variable warning
	state_of_vehicle, ok := args["state_of_vehicle"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: state_of_vehicle")
	}
	_ = state_of_vehicle // Suppress unused variable warning
	title, ok := args["title"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: title")
	}
	_ = title // Suppress unused variable warning
	url_, ok := args["url"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: url")
	}
	_ = url_ // Suppress unused variable warning
	vehicle_id, ok := args["vehicle_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: vehicle_id")
	}
	_ = vehicle_id // Suppress unused variable warning
	vin, ok := args["vin"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: vin")
	}
	_ = vin // Suppress unused variable warning
	year, ok := args["year"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: year")
	}
	_ = year // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "vehicles")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["address"]; ok {
		urlParams.Set("address", fmt.Sprintf("%v", val))
	}
	if val, ok := args["applinks"]; ok {
		urlParams.Set("applinks", fmt.Sprintf("%v", val))
	}
	if val, ok := args["availability"]; ok {
		urlParams.Set("availability", fmt.Sprintf("%v", val))
	}
	if val, ok := args["body_style"]; ok {
		urlParams.Set("body_style", fmt.Sprintf("%v", val))
	}
	if val, ok := args["condition"]; ok {
		urlParams.Set("condition", fmt.Sprintf("%v", val))
	}
	if val, ok := args["currency"]; ok {
		urlParams.Set("currency", fmt.Sprintf("%v", val))
	}
	if val, ok := args["date_first_on_lot"]; ok {
		urlParams.Set("date_first_on_lot", fmt.Sprintf("%v", val))
	}
	if val, ok := args["dealer_id"]; ok {
		urlParams.Set("dealer_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["dealer_name"]; ok {
		urlParams.Set("dealer_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["dealer_phone"]; ok {
		urlParams.Set("dealer_phone", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["drivetrain"]; ok {
		urlParams.Set("drivetrain", fmt.Sprintf("%v", val))
	}
	if val, ok := args["exterior_color"]; ok {
		urlParams.Set("exterior_color", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fb_page_id"]; ok {
		urlParams.Set("fb_page_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fuel_type"]; ok {
		urlParams.Set("fuel_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["images"]; ok {
		urlParams.Set("images", fmt.Sprintf("%v", val))
	}
	if val, ok := args["interior_color"]; ok {
		urlParams.Set("interior_color", fmt.Sprintf("%v", val))
	}
	if val, ok := args["make"]; ok {
		urlParams.Set("make", fmt.Sprintf("%v", val))
	}
	if val, ok := args["mileage"]; ok {
		urlParams.Set("mileage", fmt.Sprintf("%v", val))
	}
	if val, ok := args["model"]; ok {
		urlParams.Set("model", fmt.Sprintf("%v", val))
	}
	if val, ok := args["price"]; ok {
		urlParams.Set("price", fmt.Sprintf("%v", val))
	}
	if val, ok := args["state_of_vehicle"]; ok {
		urlParams.Set("state_of_vehicle", fmt.Sprintf("%v", val))
	}
	if val, ok := args["title"]; ok {
		urlParams.Set("title", fmt.Sprintf("%v", val))
	}
	if val, ok := args["transmission"]; ok {
		urlParams.Set("transmission", fmt.Sprintf("%v", val))
	}
	if val, ok := args["trim"]; ok {
		urlParams.Set("trim", fmt.Sprintf("%v", val))
	}
	if val, ok := args["url"]; ok {
		urlParams.Set("url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["vehicle_id"]; ok {
		urlParams.Set("vehicle_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["vehicle_type"]; ok {
		urlParams.Set("vehicle_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["vin"]; ok {
		urlParams.Set("vin", fmt.Sprintf("%v", val))
	}
	if val, ok := args["year"]; ok {
		urlParams.Set("year", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_version_configs GET version_configs for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_version_configs(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "version_configs")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_post_version_items_batch POST version_items_batch for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_post_version_items_batch(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	item_type, ok := args["item_type"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: item_type")
	}
	_ = item_type // Suppress unused variable warning
	item_version, ok := args["item_version"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: item_version")
	}
	_ = item_version // Suppress unused variable warning
	requests, ok := args["requests"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: requests")
	}
	_ = requests // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "version_items_batch")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["allow_upsert"]; ok {
		urlParams.Set("allow_upsert", fmt.Sprintf("%v", val))
	}
	if val, ok := args["item_type"]; ok {
		urlParams.Set("item_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["item_version"]; ok {
		urlParams.Set("item_version", fmt.Sprintf("%v", val))
	}
	if val, ok := args["requests"]; ok {
		urlParams.Set("requests", fmt.Sprintf("%v", val))
	}
	if val, ok := args["version"]; ok {
		urlParams.Set("version", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_delete_ DELETE  for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_delete_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["allow_delete_catalog_with_live_product_set"]; ok {
		urlParams.Set("allow_delete_catalog_with_live_product_set", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_get_ GET  for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["segment_use_cases"]; ok {
		urlParams.Set("segment_use_cases", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// productcatalog_post_ POST  for ProductCatalog
func (c *ProductCatalogClient) Productcatalog_post_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["additional_vertical_option"]; ok {
		urlParams.Set("additional_vertical_option", fmt.Sprintf("%v", val))
	}
	if val, ok := args["da_display_settings"]; ok {
		urlParams.Set("da_display_settings", fmt.Sprintf("%v", val))
	}
	if val, ok := args["default_image_url"]; ok {
		urlParams.Set("default_image_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["destination_catalog_settings"]; ok {
		urlParams.Set("destination_catalog_settings", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fallback_image_url"]; ok {
		urlParams.Set("fallback_image_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["flight_catalog_settings"]; ok {
		urlParams.Set("flight_catalog_settings", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["partner_integration"]; ok {
		urlParams.Set("partner_integration", fmt.Sprintf("%v", val))
	}
	if val, ok := args["store_catalog_settings"]; ok {
		urlParams.Set("store_catalog_settings", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
