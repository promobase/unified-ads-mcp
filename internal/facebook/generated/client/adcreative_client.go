// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// AdCreativeClient represents a client for AdCreative operations
type AdCreativeClient struct {
	accessToken string
}

// NewAdCreativeClient creates a new AdCreative client
func NewAdCreativeClient(accessToken string) *AdCreativeClient {
	return &AdCreativeClient{
		accessToken: accessToken,
	}
}

// Adcreative_post_adlabels performs POST adlabels for AdCreative
func (c *AdCreativeClient) Adcreative_post_adlabels(args map[string]interface{}) (interface{}, error) {
	var baseURL string

	// Extract ad_creative_id for URL construction
	adCreativeId, ok := args["ad_creative_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_creative_id is required for adcreative_post_adlabels")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/adlabels", adCreativeId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_creative_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_creative_id" != "ad_creative_id" {
			urlParams.Set("ad_creative_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_creative_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// Adcreative_get_creative_insights performs GET creative_insights for AdCreative
func (c *AdCreativeClient) Adcreative_get_creative_insights(args map[string]interface{}) (interface{}, error) {
	var baseURL string

	// Extract ad_creative_id for URL construction
	adCreativeId, ok := args["ad_creative_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_creative_id is required for adcreative_get_creative_insights")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/creative_insights", adCreativeId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_creative_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_creative_id" != "ad_creative_id" {
			urlParams.Set("ad_creative_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_creative_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_creative_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_creative_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_creative_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// Adcreative_get_previews performs GET previews for AdCreative
func (c *AdCreativeClient) Adcreative_get_previews(args map[string]interface{}) (interface{}, error) {
	var baseURL string

	// Extract ad_creative_id for URL construction
	adCreativeId, ok := args["ad_creative_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_creative_id is required for adcreative_get_previews")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/previews", adCreativeId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_creative_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_creative_id" != "ad_creative_id" {
			urlParams.Set("ad_creative_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_creative_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_creative_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_creative_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_creative_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_creative_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// Adcreative_delete_ performs DELETE  for AdCreative
func (c *AdCreativeClient) Adcreative_delete_(args map[string]interface{}) (interface{}, error) {
	var baseURL string

	// Extract ad_creative_id for URL construction
	adCreativeId, ok := args["ad_creative_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_creative_id is required for adcreative_delete_")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/", adCreativeId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_creative_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_creative_id" != "ad_creative_id" {
			urlParams.Set("ad_creative_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_creative_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// Adcreative_get_ performs GET  for AdCreative
func (c *AdCreativeClient) Adcreative_get_(args map[string]interface{}) (interface{}, error) {
	var baseURL string

	// Extract ad_creative_id for URL construction
	adCreativeId, ok := args["ad_creative_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_creative_id is required for adcreative_get_")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/", adCreativeId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_creative_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_creative_id" != "ad_creative_id" {
			urlParams.Set("ad_creative_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_creative_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_creative_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_creative_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_creative_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_creative_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// Adcreative_post_ performs POST  for AdCreative
func (c *AdCreativeClient) Adcreative_post_(args map[string]interface{}) (interface{}, error) {
	var baseURL string

	// Extract ad_creative_id for URL construction
	adCreativeId, ok := args["ad_creative_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_creative_id is required for adcreative_post_")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/", adCreativeId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_creative_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_creative_id" != "ad_creative_id" {
			urlParams.Set("ad_creative_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_creative_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
