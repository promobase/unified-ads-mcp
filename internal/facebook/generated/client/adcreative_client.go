// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// AdCreativeClient provides methods for AdCreative operations
type AdCreativeClient struct {
	accessToken string
}

// NewAdCreativeClient creates a new AdCreative client
func NewAdCreativeClient(accessToken string) *AdCreativeClient {
	return &AdCreativeClient{
		accessToken: accessToken,
	}
}

// adcreative_post_adlabels POST adlabels for AdCreative
func (c *AdCreativeClient) Adcreative_post_adlabels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_creative_id, ok := args["ad_creative_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_creative_id")
	}
	_ = ad_creative_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdCreative endpoints, include ad_creative_id in the URL path
	adCreativeId, ok := args["ad_creative_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_creative_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/adlabels", adCreativeId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_creative_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_creative_id" != "ad_creative_id" {
			urlParams.Set("ad_creative_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_creative_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adcreative_get_creative_insights GET creative_insights for AdCreative
func (c *AdCreativeClient) Adcreative_get_creative_insights(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_creative_id, ok := args["ad_creative_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_creative_id")
	}
	_ = ad_creative_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdCreative endpoints, include ad_creative_id in the URL path
	adCreativeId, ok := args["ad_creative_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_creative_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/creative_insights", adCreativeId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_creative_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_creative_id" != "ad_creative_id" {
			urlParams.Set("ad_creative_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_creative_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_creative_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_creative_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_creative_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adcreative_get_previews GET previews for AdCreative
func (c *AdCreativeClient) Adcreative_get_previews(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_creative_id, ok := args["ad_creative_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_creative_id")
	}
	_ = ad_creative_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdCreative endpoints, include ad_creative_id in the URL path
	adCreativeId, ok := args["ad_creative_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_creative_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/previews", adCreativeId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_creative_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_creative_id" != "ad_creative_id" {
			urlParams.Set("ad_creative_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_creative_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_creative_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_creative_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_creative_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_creative_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adcreative_delete_ DELETE  for AdCreative
func (c *AdCreativeClient) Adcreative_delete_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_creative_id, ok := args["ad_creative_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_creative_id")
	}
	_ = ad_creative_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdCreative endpoints, include ad_creative_id in the URL path
	adCreativeId, ok := args["ad_creative_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_creative_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/", adCreativeId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_creative_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_creative_id" != "ad_creative_id" {
			urlParams.Set("ad_creative_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_creative_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adcreative_get_ GET  for AdCreative
func (c *AdCreativeClient) Adcreative_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_creative_id, ok := args["ad_creative_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_creative_id")
	}
	_ = ad_creative_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdCreative endpoints, include ad_creative_id in the URL path
	adCreativeId, ok := args["ad_creative_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_creative_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/", adCreativeId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_creative_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_creative_id" != "ad_creative_id" {
			urlParams.Set("ad_creative_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_creative_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_creative_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_creative_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_creative_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_creative_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adcreative_post_ POST  for AdCreative
func (c *AdCreativeClient) Adcreative_post_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_creative_id, ok := args["ad_creative_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_creative_id")
	}
	_ = ad_creative_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdCreative endpoints, include ad_creative_id in the URL path
	adCreativeId, ok := args["ad_creative_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_creative_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/", adCreativeId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_creative_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_creative_id" != "ad_creative_id" {
			urlParams.Set("ad_creative_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_creative_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
