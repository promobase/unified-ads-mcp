// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// OfflineConversionDataSetClient provides methods for OfflineConversionDataSet operations
type OfflineConversionDataSetClient struct {
	accessToken string
}

// NewOfflineConversionDataSetClient creates a new OfflineConversionDataSet client
func NewOfflineConversionDataSetClient(accessToken string) *OfflineConversionDataSetClient {
	return &OfflineConversionDataSetClient{
		accessToken: accessToken,
	}
}

// facebook_offlineconversiondataset_get_adaccounts GET adaccounts for OfflineConversionDataSet
func (c *OfflineConversionDataSetClient) Facebook_offlineconversiondataset_get_adaccounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	business, ok := args["business"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: business")
	}
	_ = business // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "adaccounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["business"]; ok {
		urlParams.Set("business", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_offlineconversiondataset_get_agencies GET agencies for OfflineConversionDataSet
func (c *OfflineConversionDataSetClient) Facebook_offlineconversiondataset_get_agencies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "agencies")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_offlineconversiondataset_get_audiences GET audiences for OfflineConversionDataSet
func (c *OfflineConversionDataSetClient) Facebook_offlineconversiondataset_get_audiences(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "audiences")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["action_source"]; ok {
		urlParams.Set("action_source", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ad_account"]; ok {
		urlParams.Set("ad_account", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_offlineconversiondataset_get_customconversions GET customconversions for OfflineConversionDataSet
func (c *OfflineConversionDataSetClient) Facebook_offlineconversiondataset_get_customconversions(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "customconversions")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_account"]; ok {
		urlParams.Set("ad_account", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_offlineconversiondataset_get_server_events_permitted_business GET server_events_permitted_business for OfflineConversionDataSet
func (c *OfflineConversionDataSetClient) Facebook_offlineconversiondataset_get_server_events_permitted_business(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "server_events_permitted_business")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_offlineconversiondataset_get_shared_accounts GET shared_accounts for OfflineConversionDataSet
func (c *OfflineConversionDataSetClient) Facebook_offlineconversiondataset_get_shared_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	action_source, ok := args["action_source"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: action_source")
	}
	_ = action_source // Suppress unused variable warning
	business, ok := args["business"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: business")
	}
	_ = business // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "shared_accounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["action_source"]; ok {
		urlParams.Set("action_source", fmt.Sprintf("%v", val))
	}
	if val, ok := args["business"]; ok {
		urlParams.Set("business", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_offlineconversiondataset_get_shared_agencies GET shared_agencies for OfflineConversionDataSet
func (c *OfflineConversionDataSetClient) Facebook_offlineconversiondataset_get_shared_agencies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	action_source, ok := args["action_source"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: action_source")
	}
	_ = action_source // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "shared_agencies")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["action_source"]; ok {
		urlParams.Set("action_source", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_offlineconversiondataset_get_stats GET stats for OfflineConversionDataSet
func (c *OfflineConversionDataSetClient) Facebook_offlineconversiondataset_get_stats(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "stats")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["aggr_time"]; ok {
		urlParams.Set("aggr_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["end"]; ok {
		urlParams.Set("end", fmt.Sprintf("%v", val))
	}
	if val, ok := args["granularity"]; ok {
		urlParams.Set("granularity", fmt.Sprintf("%v", val))
	}
	if val, ok := args["skip_empty_values"]; ok {
		urlParams.Set("skip_empty_values", fmt.Sprintf("%v", val))
	}
	if val, ok := args["start"]; ok {
		urlParams.Set("start", fmt.Sprintf("%v", val))
	}
	if val, ok := args["user_timezone_id"]; ok {
		urlParams.Set("user_timezone_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_offlineconversiondataset_get_uploads GET uploads for OfflineConversionDataSet
func (c *OfflineConversionDataSetClient) Facebook_offlineconversiondataset_get_uploads(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "uploads")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["end_time"]; ok {
		urlParams.Set("end_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["order"]; ok {
		urlParams.Set("order", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sort_by"]; ok {
		urlParams.Set("sort_by", fmt.Sprintf("%v", val))
	}
	if val, ok := args["start_time"]; ok {
		urlParams.Set("start_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["upload_tag"]; ok {
		urlParams.Set("upload_tag", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_offlineconversiondataset_get_ GET  for OfflineConversionDataSet
func (c *OfflineConversionDataSetClient) Facebook_offlineconversiondataset_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
