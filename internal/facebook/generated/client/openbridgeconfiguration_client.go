// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// OpenBridgeConfigurationClient provides methods for OpenBridgeConfiguration operations
type OpenBridgeConfigurationClient struct {
	accessToken string
}

// NewOpenBridgeConfigurationClient creates a new OpenBridgeConfiguration client
func NewOpenBridgeConfigurationClient(accessToken string) *OpenBridgeConfigurationClient {
	return &OpenBridgeConfigurationClient{
		accessToken: accessToken,
	}
}

// openbridgeconfiguration_delete_ DELETE  for OpenBridgeConfiguration
func (c *OpenBridgeConfigurationClient) Openbridgeconfiguration_delete_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// openbridgeconfiguration_get_ GET  for OpenBridgeConfiguration
func (c *OpenBridgeConfigurationClient) Openbridgeconfiguration_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// openbridgeconfiguration_post_ POST  for OpenBridgeConfiguration
func (c *OpenBridgeConfigurationClient) Openbridgeconfiguration_post_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["active"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("active", fmt.Sprintf("%v", val))

	}
	if val, ok := args["cloud_provider"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("cloud_provider", fmt.Sprintf("%v", val))

	}
	if val, ok := args["cloud_region"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("cloud_region", fmt.Sprintf("%v", val))

	}
	if val, ok := args["destination_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("destination_id", fmt.Sprintf("%v", val))

	}
	if val, ok := args["endpoint"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("endpoint", fmt.Sprintf("%v", val))

	}
	if val, ok := args["fallback_domain"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fallback_domain", fmt.Sprintf("%v", val))

	}
	if val, ok := args["first_party_domain"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("first_party_domain", fmt.Sprintf("%v", val))

	}
	if val, ok := args["host_business_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("host_business_id", fmt.Sprintf("%v", val))

	}
	if val, ok := args["instance_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("instance_id", fmt.Sprintf("%v", val))

	}
	if val, ok := args["instance_version"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("instance_version", fmt.Sprintf("%v", val))

	}
	if val, ok := args["is_sgw_instance"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("is_sgw_instance", fmt.Sprintf("%v", val))

	}
	if val, ok := args["is_sgw_pixel_from_meta_pixel"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("is_sgw_pixel_from_meta_pixel", fmt.Sprintf("%v", val))

	}
	if val, ok := args["partner_name"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("partner_name", fmt.Sprintf("%v", val))

	}
	if val, ok := args["sgw_account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("sgw_account_id", fmt.Sprintf("%v", val))

	}
	if val, ok := args["sgw_instance_url"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("sgw_instance_url", fmt.Sprintf("%v", val))

	}
	if val, ok := args["sgw_pixel_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("sgw_pixel_id", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
