// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// WhatsAppBusinessPreVerifiedPhoneNumberClient provides methods for WhatsAppBusinessPreVerifiedPhoneNumber operations
type WhatsAppBusinessPreVerifiedPhoneNumberClient struct {
	accessToken string
}

// NewWhatsAppBusinessPreVerifiedPhoneNumberClient creates a new WhatsAppBusinessPreVerifiedPhoneNumber client
func NewWhatsAppBusinessPreVerifiedPhoneNumberClient(accessToken string) *WhatsAppBusinessPreVerifiedPhoneNumberClient {
	return &WhatsAppBusinessPreVerifiedPhoneNumberClient{
		accessToken: accessToken,
	}
}


// whatsappbusinesspreverifiedphonenumber_get_partners GET partners for WhatsAppBusinessPreVerifiedPhoneNumber
func (c *WhatsAppBusinessPreVerifiedPhoneNumberClient) Whatsappbusinesspreverifiedphonenumber_get_partners(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "partners")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// whatsappbusinesspreverifiedphonenumber_post_request_code POST request_code for WhatsAppBusinessPreVerifiedPhoneNumber
func (c *WhatsAppBusinessPreVerifiedPhoneNumberClient) Whatsappbusinesspreverifiedphonenumber_post_request_code(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	code_method, ok := args["code_method"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: code_method")
	}
	_ = code_method // Suppress unused variable warning
	language, ok := args["language"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: language")
	}
	_ = language // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "request_code")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["code_method"]; ok {
		urlParams.Set("code_method", fmt.Sprintf("%v", val))
	}
	if val, ok := args["language"]; ok {
		urlParams.Set("language", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// whatsappbusinesspreverifiedphonenumber_post_verify_code POST verify_code for WhatsAppBusinessPreVerifiedPhoneNumber
func (c *WhatsAppBusinessPreVerifiedPhoneNumberClient) Whatsappbusinesspreverifiedphonenumber_post_verify_code(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	code, ok := args["code"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: code")
	}
	_ = code // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "verify_code")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["code"]; ok {
		urlParams.Set("code", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// whatsappbusinesspreverifiedphonenumber_delete_ DELETE  for WhatsAppBusinessPreVerifiedPhoneNumber
func (c *WhatsAppBusinessPreVerifiedPhoneNumberClient) Whatsappbusinesspreverifiedphonenumber_delete_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// whatsappbusinesspreverifiedphonenumber_get_ GET  for WhatsAppBusinessPreVerifiedPhoneNumber
func (c *WhatsAppBusinessPreVerifiedPhoneNumberClient) Whatsappbusinesspreverifiedphonenumber_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

