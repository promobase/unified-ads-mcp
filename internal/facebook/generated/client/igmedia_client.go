// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// IGMediaClient provides methods for IGMedia operations
type IGMediaClient struct {
	accessToken string
}

// NewIGMediaClient creates a new IGMedia client
func NewIGMediaClient(accessToken string) *IGMediaClient {
	return &IGMediaClient{
		accessToken: accessToken,
	}
}

// igmedia_get_boost_ads_list GET boost_ads_list for IGMedia
func (c *IGMediaClient) Igmedia_get_boost_ads_list(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/boost_ads_list")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fields", fmt.Sprintf("%v", val))

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("limit", fmt.Sprintf("%v", val))

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("after", fmt.Sprintf("%v", val))

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("before", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// igmedia_get_branded_content_partner_promote GET branded_content_partner_promote for IGMedia
func (c *IGMediaClient) Igmedia_get_branded_content_partner_promote(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/branded_content_partner_promote")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fields", fmt.Sprintf("%v", val))

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("limit", fmt.Sprintf("%v", val))

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("after", fmt.Sprintf("%v", val))

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("before", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// igmedia_post_branded_content_partner_promote POST branded_content_partner_promote for IGMedia
func (c *IGMediaClient) Igmedia_post_branded_content_partner_promote(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/branded_content_partner_promote")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("params", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// igmedia_get_children GET children for IGMedia
func (c *IGMediaClient) Igmedia_get_children(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/children")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fields", fmt.Sprintf("%v", val))

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("limit", fmt.Sprintf("%v", val))

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("after", fmt.Sprintf("%v", val))

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("before", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// igmedia_get_collaborators GET collaborators for IGMedia
func (c *IGMediaClient) Igmedia_get_collaborators(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/collaborators")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fields", fmt.Sprintf("%v", val))

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("limit", fmt.Sprintf("%v", val))

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("after", fmt.Sprintf("%v", val))

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("before", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// igmedia_get_comments GET comments for IGMedia
func (c *IGMediaClient) Igmedia_get_comments(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/comments")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fields", fmt.Sprintf("%v", val))

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("limit", fmt.Sprintf("%v", val))

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("after", fmt.Sprintf("%v", val))

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("before", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// igmedia_post_comments POST comments for IGMedia
func (c *IGMediaClient) Igmedia_post_comments(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/comments")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("params", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// igmedia_get_insights GET insights for IGMedia
func (c *IGMediaClient) Igmedia_get_insights(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/insights")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("params", fmt.Sprintf("%v", val))

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fields", fmt.Sprintf("%v", val))

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("limit", fmt.Sprintf("%v", val))

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("after", fmt.Sprintf("%v", val))

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("before", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// igmedia_delete_partnership_ad_code DELETE partnership_ad_code for IGMedia
func (c *IGMediaClient) Igmedia_delete_partnership_ad_code(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/partnership_ad_code")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// igmedia_post_partnership_ad_code POST partnership_ad_code for IGMedia
func (c *IGMediaClient) Igmedia_post_partnership_ad_code(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/partnership_ad_code")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// igmedia_get_product_tags GET product_tags for IGMedia
func (c *IGMediaClient) Igmedia_get_product_tags(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/product_tags")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fields", fmt.Sprintf("%v", val))

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("limit", fmt.Sprintf("%v", val))

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("after", fmt.Sprintf("%v", val))

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("before", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// igmedia_post_product_tags POST product_tags for IGMedia
func (c *IGMediaClient) Igmedia_post_product_tags(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/product_tags")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("params", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// igmedia_get_ GET  for IGMedia
func (c *IGMediaClient) Igmedia_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("params", fmt.Sprintf("%v", val))

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fields", fmt.Sprintf("%v", val))

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("limit", fmt.Sprintf("%v", val))

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("after", fmt.Sprintf("%v", val))

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("before", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// igmedia_post_ POST  for IGMedia
func (c *IGMediaClient) Igmedia_post_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("params", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
