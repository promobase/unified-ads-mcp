// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// CommentClient provides methods for Comment operations
type CommentClient struct {
	accessToken string
}

// NewCommentClient creates a new Comment client
func NewCommentClient(accessToken string) *CommentClient {
	return &CommentClient{
		accessToken: accessToken,
	}
}

// comment_get_comments GET comments for Comment
func (c *CommentClient) Comment_get_comments(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/comments")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["filter"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("filter", fmt.Sprintf("%v", val))

	}
	if val, ok := args["live_filter"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("live_filter", fmt.Sprintf("%v", val))

	}
	if val, ok := args["order"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("order", fmt.Sprintf("%v", val))

	}
	if val, ok := args["since"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("since", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// comment_post_comments POST comments for Comment
func (c *CommentClient) Comment_post_comments(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/comments")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["attachment_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("attachment_id", fmt.Sprintf("%v", val))

	}
	if val, ok := args["attachment_share_url"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("attachment_share_url", fmt.Sprintf("%v", val))

	}
	if val, ok := args["attachment_url"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("attachment_url", fmt.Sprintf("%v", val))

	}
	if val, ok := args["comment_privacy_value"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("comment_privacy_value", fmt.Sprintf("%v", val))

	}
	if val, ok := args["facepile_mentioned_ids"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("facepile_mentioned_ids", fmt.Sprintf("%v", val))

	}
	if val, ok := args["feedback_source"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("feedback_source", fmt.Sprintf("%v", val))

	}
	if val, ok := args["is_offline"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("is_offline", fmt.Sprintf("%v", val))

	}
	if val, ok := args["message"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("message", fmt.Sprintf("%v", val))

	}
	if val, ok := args["nectar_module"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("nectar_module", fmt.Sprintf("%v", val))

	}
	if val, ok := args["object_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("object_id", fmt.Sprintf("%v", val))

	}
	if val, ok := args["parent_comment_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("parent_comment_id", fmt.Sprintf("%v", val))

	}
	if val, ok := args["text"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("text", fmt.Sprintf("%v", val))

	}
	if val, ok := args["tracking"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("tracking", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// comment_delete_likes DELETE likes for Comment
func (c *CommentClient) Comment_delete_likes(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/likes")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["feedback_source"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("feedback_source", fmt.Sprintf("%v", val))

	}
	if val, ok := args["nectar_module"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("nectar_module", fmt.Sprintf("%v", val))

	}
	if val, ok := args["tracking"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("tracking", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// comment_get_likes GET likes for Comment
func (c *CommentClient) Comment_get_likes(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/likes")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// comment_post_likes POST likes for Comment
func (c *CommentClient) Comment_post_likes(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/likes")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["feedback_source"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("feedback_source", fmt.Sprintf("%v", val))

	}
	if val, ok := args["nectar_module"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("nectar_module", fmt.Sprintf("%v", val))

	}
	if val, ok := args["tracking"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("tracking", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// comment_get_reactions GET reactions for Comment
func (c *CommentClient) Comment_get_reactions(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/reactions")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["type"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("type", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// comment_delete_ DELETE  for Comment
func (c *CommentClient) Comment_delete_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// comment_get_ GET  for Comment
func (c *CommentClient) Comment_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// comment_post_ POST  for Comment
func (c *CommentClient) Comment_post_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["attachment_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("attachment_id", fmt.Sprintf("%v", val))

	}
	if val, ok := args["attachment_share_url"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("attachment_share_url", fmt.Sprintf("%v", val))

	}
	if val, ok := args["attachment_url"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("attachment_url", fmt.Sprintf("%v", val))

	}
	if val, ok := args["is_hidden"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("is_hidden", fmt.Sprintf("%v", val))

	}
	if val, ok := args["message"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("message", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
