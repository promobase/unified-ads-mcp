// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// VideoCopyrightClient provides methods for VideoCopyright operations
type VideoCopyrightClient struct {
	accessToken string
}

// NewVideoCopyrightClient creates a new VideoCopyright client
func NewVideoCopyrightClient(accessToken string) *VideoCopyrightClient {
	return &VideoCopyrightClient{
		accessToken: accessToken,
	}
}


// facebook_videocopyright_get_update_records GET update_records for VideoCopyright
func (c *VideoCopyrightClient) Facebook_videocopyright_get_update_records(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "update_records")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_videocopyright_get_ GET  for VideoCopyright
func (c *VideoCopyrightClient) Facebook_videocopyright_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_videocopyright_post_ POST  for VideoCopyright
func (c *VideoCopyrightClient) Facebook_videocopyright_post_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["append_excluded_ownership_segments"]; ok {
		urlParams.Set("append_excluded_ownership_segments", fmt.Sprintf("%v", val))
	}
	if val, ok := args["attribution_id"]; ok {
		urlParams.Set("attribution_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["content_category"]; ok {
		urlParams.Set("content_category", fmt.Sprintf("%v", val))
	}
	if val, ok := args["excluded_ownership_countries"]; ok {
		urlParams.Set("excluded_ownership_countries", fmt.Sprintf("%v", val))
	}
	if val, ok := args["excluded_ownership_segments"]; ok {
		urlParams.Set("excluded_ownership_segments", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_reference_disabled"]; ok {
		urlParams.Set("is_reference_disabled", fmt.Sprintf("%v", val))
	}
	if val, ok := args["monitoring_type"]; ok {
		urlParams.Set("monitoring_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ownership_countries"]; ok {
		urlParams.Set("ownership_countries", fmt.Sprintf("%v", val))
	}
	if val, ok := args["rule_id"]; ok {
		urlParams.Set("rule_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["whitelisted_ids"]; ok {
		urlParams.Set("whitelisted_ids", fmt.Sprintf("%v", val))
	}
	if val, ok := args["whitelisted_ig_user_ids"]; ok {
		urlParams.Set("whitelisted_ig_user_ids", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

