// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// IGUserForIGOnlyAPIClient provides methods for IGUserForIGOnlyAPI operations
type IGUserForIGOnlyAPIClient struct {
	accessToken string
}

// NewIGUserForIGOnlyAPIClient creates a new IGUserForIGOnlyAPI client
func NewIGUserForIGOnlyAPIClient(accessToken string) *IGUserForIGOnlyAPIClient {
	return &IGUserForIGOnlyAPIClient{
		accessToken: accessToken,
	}
}

// iguserforigonlyapi_get_business_messaging_feature_status GET business_messaging_feature_status for IGUserForIGOnlyAPI
func (c *IGUserForIGOnlyAPIClient) Iguserforigonlyapi_get_business_messaging_feature_status(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	feature, ok := args["feature"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: feature")
	}
	_ = feature // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/business_messaging_feature_status")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["feature"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("feature", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// iguserforigonlyapi_get_content_publishing_limit GET content_publishing_limit for IGUserForIGOnlyAPI
func (c *IGUserForIGOnlyAPIClient) Iguserforigonlyapi_get_content_publishing_limit(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/content_publishing_limit")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["since"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("since", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// iguserforigonlyapi_get_conversations GET conversations for IGUserForIGOnlyAPI
func (c *IGUserForIGOnlyAPIClient) Iguserforigonlyapi_get_conversations(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/conversations")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["folder"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("folder", fmt.Sprintf("%v", val))

	}
	if val, ok := args["platform"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("platform", fmt.Sprintf("%v", val))

	}
	if val, ok := args["tags"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("tags", fmt.Sprintf("%v", val))

	}
	if val, ok := args["user_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("user_id", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// iguserforigonlyapi_get_insights GET insights for IGUserForIGOnlyAPI
func (c *IGUserForIGOnlyAPIClient) Iguserforigonlyapi_get_insights(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	metric, ok := args["metric"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: metric")
	}
	_ = metric // Suppress unused variable warning
	period, ok := args["period"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: period")
	}
	_ = period // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/insights")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["breakdown"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("breakdown", fmt.Sprintf("%v", val))

	}
	if val, ok := args["metric"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("metric", fmt.Sprintf("%v", val))

	}
	if val, ok := args["metric_type"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("metric_type", fmt.Sprintf("%v", val))

	}
	if val, ok := args["period"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("period", fmt.Sprintf("%v", val))

	}
	if val, ok := args["since"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("since", fmt.Sprintf("%v", val))

	}
	if val, ok := args["timeframe"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("timeframe", fmt.Sprintf("%v", val))

	}
	if val, ok := args["until"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("until", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// iguserforigonlyapi_get_live_media GET live_media for IGUserForIGOnlyAPI
func (c *IGUserForIGOnlyAPIClient) Iguserforigonlyapi_get_live_media(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/live_media")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// iguserforigonlyapi_get_media GET media for IGUserForIGOnlyAPI
func (c *IGUserForIGOnlyAPIClient) Iguserforigonlyapi_get_media(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/media")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["since"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("since", fmt.Sprintf("%v", val))

	}
	if val, ok := args["until"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("until", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// iguserforigonlyapi_post_media POST media for IGUserForIGOnlyAPI
func (c *IGUserForIGOnlyAPIClient) Iguserforigonlyapi_post_media(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/media")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["alt_text"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("alt_text", fmt.Sprintf("%v", val))

	}
	if val, ok := args["audio_name"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("audio_name", fmt.Sprintf("%v", val))

	}
	if val, ok := args["caption"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("caption", fmt.Sprintf("%v", val))

	}
	if val, ok := args["children"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("children", fmt.Sprintf("%v", val))

	}
	if val, ok := args["collaborators"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("collaborators", fmt.Sprintf("%v", val))

	}
	if val, ok := args["cover_url"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("cover_url", fmt.Sprintf("%v", val))

	}
	if val, ok := args["image_url"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("image_url", fmt.Sprintf("%v", val))

	}
	if val, ok := args["is_carousel_item"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("is_carousel_item", fmt.Sprintf("%v", val))

	}
	if val, ok := args["location_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("location_id", fmt.Sprintf("%v", val))

	}
	if val, ok := args["media_type"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("media_type", fmt.Sprintf("%v", val))

	}
	if val, ok := args["product_tags"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("product_tags", fmt.Sprintf("%v", val))

	}
	if val, ok := args["share_to_feed"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("share_to_feed", fmt.Sprintf("%v", val))

	}
	if val, ok := args["thumb_offset"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("thumb_offset", fmt.Sprintf("%v", val))

	}
	if val, ok := args["upload_type"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("upload_type", fmt.Sprintf("%v", val))

	}
	if val, ok := args["user_tags"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("user_tags", fmt.Sprintf("%v", val))

	}
	if val, ok := args["video_url"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("video_url", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// iguserforigonlyapi_post_mediapublish POST mediapublish for IGUserForIGOnlyAPI
func (c *IGUserForIGOnlyAPIClient) Iguserforigonlyapi_post_mediapublish(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	creation_id, ok := args["creation_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: creation_id")
	}
	_ = creation_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/mediapublish")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["creation_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("creation_id", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// iguserforigonlyapi_post_mentions POST mentions for IGUserForIGOnlyAPI
func (c *IGUserForIGOnlyAPIClient) Iguserforigonlyapi_post_mentions(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	media_id, ok := args["media_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: media_id")
	}
	_ = media_id // Suppress unused variable warning
	message, ok := args["message"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: message")
	}
	_ = message // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/mentions")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["comment_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("comment_id", fmt.Sprintf("%v", val))

	}
	if val, ok := args["media_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("media_id", fmt.Sprintf("%v", val))

	}
	if val, ok := args["message"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("message", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// iguserforigonlyapi_post_messageattachments POST messageattachments for IGUserForIGOnlyAPI
func (c *IGUserForIGOnlyAPIClient) Iguserforigonlyapi_post_messageattachments(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	message, ok := args["message"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: message")
	}
	_ = message // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/messageattachments")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["message"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("message", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// iguserforigonlyapi_post_messages POST messages for IGUserForIGOnlyAPI
func (c *IGUserForIGOnlyAPIClient) Iguserforigonlyapi_post_messages(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/messages")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["message"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("message", fmt.Sprintf("%v", val))

	}
	if val, ok := args["messaging_type"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("messaging_type", fmt.Sprintf("%v", val))

	}
	if val, ok := args["payload"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("payload", fmt.Sprintf("%v", val))

	}
	if val, ok := args["recipient"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("recipient", fmt.Sprintf("%v", val))

	}
	if val, ok := args["sender_action"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("sender_action", fmt.Sprintf("%v", val))

	}
	if val, ok := args["tag"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("tag", fmt.Sprintf("%v", val))

	}
	if val, ok := args["thread_control"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("thread_control", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// iguserforigonlyapi_delete_messenger_profile DELETE messenger_profile for IGUserForIGOnlyAPI
func (c *IGUserForIGOnlyAPIClient) Iguserforigonlyapi_delete_messenger_profile(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	fields, ok := args["fields"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: fields")
	}
	_ = fields // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/messenger_profile")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fields", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// iguserforigonlyapi_get_messenger_profile GET messenger_profile for IGUserForIGOnlyAPI
func (c *IGUserForIGOnlyAPIClient) Iguserforigonlyapi_get_messenger_profile(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/messenger_profile")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// iguserforigonlyapi_post_messenger_profile POST messenger_profile for IGUserForIGOnlyAPI
func (c *IGUserForIGOnlyAPIClient) Iguserforigonlyapi_post_messenger_profile(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/messenger_profile")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ice_breakers"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("ice_breakers", fmt.Sprintf("%v", val))

	}
	if val, ok := args["persistent_menu"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("persistent_menu", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// iguserforigonlyapi_get_stories GET stories for IGUserForIGOnlyAPI
func (c *IGUserForIGOnlyAPIClient) Iguserforigonlyapi_get_stories(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/stories")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// iguserforigonlyapi_delete_subscribed_apps DELETE subscribed_apps for IGUserForIGOnlyAPI
func (c *IGUserForIGOnlyAPIClient) Iguserforigonlyapi_delete_subscribed_apps(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/subscribed_apps")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// iguserforigonlyapi_get_subscribed_apps GET subscribed_apps for IGUserForIGOnlyAPI
func (c *IGUserForIGOnlyAPIClient) Iguserforigonlyapi_get_subscribed_apps(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/subscribed_apps")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// iguserforigonlyapi_post_subscribed_apps POST subscribed_apps for IGUserForIGOnlyAPI
func (c *IGUserForIGOnlyAPIClient) Iguserforigonlyapi_post_subscribed_apps(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	subscribed_fields, ok := args["subscribed_fields"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: subscribed_fields")
	}
	_ = subscribed_fields // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/subscribed_apps")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["subscribed_fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("subscribed_fields", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// iguserforigonlyapi_get_tags GET tags for IGUserForIGOnlyAPI
func (c *IGUserForIGOnlyAPIClient) Iguserforigonlyapi_get_tags(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/tags")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// iguserforigonlyapi_delete_welcome_message_flows DELETE welcome_message_flows for IGUserForIGOnlyAPI
func (c *IGUserForIGOnlyAPIClient) Iguserforigonlyapi_delete_welcome_message_flows(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/welcome_message_flows")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["flow_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("flow_id", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// iguserforigonlyapi_get_welcome_message_flows GET welcome_message_flows for IGUserForIGOnlyAPI
func (c *IGUserForIGOnlyAPIClient) Iguserforigonlyapi_get_welcome_message_flows(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/welcome_message_flows")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["app_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("app_id", fmt.Sprintf("%v", val))

	}
	if val, ok := args["flow_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("flow_id", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// iguserforigonlyapi_post_welcome_message_flows POST welcome_message_flows for IGUserForIGOnlyAPI
func (c *IGUserForIGOnlyAPIClient) Iguserforigonlyapi_post_welcome_message_flows(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/welcome_message_flows")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["eligible_platforms"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("eligible_platforms", fmt.Sprintf("%v", val))

	}
	if val, ok := args["flow_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("flow_id", fmt.Sprintf("%v", val))

	}
	if val, ok := args["name"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("name", fmt.Sprintf("%v", val))

	}
	if val, ok := args["welcome_message_flow"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("welcome_message_flow", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// iguserforigonlyapi_get_ GET  for IGUserForIGOnlyAPI
func (c *IGUserForIGOnlyAPIClient) Iguserforigonlyapi_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
