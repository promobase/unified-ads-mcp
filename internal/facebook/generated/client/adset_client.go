// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// AdSetClient represents a client for AdSet operations
type AdSetClient struct {
	accessToken string
}

// NewAdSetClient creates a new AdSet client
func NewAdSetClient(accessToken string) *AdSetClient {
	return &AdSetClient{
		accessToken: accessToken,
	}
}


// Adset_get_activities performs GET activities for AdSet
func (c *AdSetClient) Adset_get_activities(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for adset_get_activities")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/activities", adSetId)
	
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// Adset_get_ad_studies performs GET ad_studies for AdSet
func (c *AdSetClient) Adset_get_ad_studies(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for adset_get_ad_studies")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/ad_studies", adSetId)
	
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// Adset_get_adcreatives performs GET adcreatives for AdSet
func (c *AdSetClient) Adset_get_adcreatives(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for adset_get_adcreatives")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/adcreatives", adSetId)
	
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// Adset_delete_adlabels performs DELETE adlabels for AdSet
func (c *AdSetClient) Adset_delete_adlabels(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for adset_delete_adlabels")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/adlabels", adSetId)
	
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// Adset_post_adlabels performs POST adlabels for AdSet
func (c *AdSetClient) Adset_post_adlabels(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for adset_post_adlabels")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/adlabels", adSetId)
	
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// Adset_get_adrules_governed performs GET adrules_governed for AdSet
func (c *AdSetClient) Adset_get_adrules_governed(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for adset_get_adrules_governed")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/adrules_governed", adSetId)
	
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// Adset_get_ads performs GET ads for AdSet
func (c *AdSetClient) Adset_get_ads(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for adset_get_ads")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/ads", adSetId)
	
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// Adset_get_asyncadrequests performs GET asyncadrequests for AdSet
func (c *AdSetClient) Adset_get_asyncadrequests(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for adset_get_asyncadrequests")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/asyncadrequests", adSetId)
	
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// Adset_post_budget_schedules performs POST budget_schedules for AdSet
func (c *AdSetClient) Adset_post_budget_schedules(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for adset_post_budget_schedules")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/budget_schedules", adSetId)
	
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// Adset_get_copies performs GET copies for AdSet
func (c *AdSetClient) Adset_get_copies(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for adset_get_copies")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/copies", adSetId)
	
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// Adset_post_copies performs POST copies for AdSet
func (c *AdSetClient) Adset_post_copies(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for adset_post_copies")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/copies", adSetId)
	
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// Adset_get_delivery_estimate performs GET delivery_estimate for AdSet
func (c *AdSetClient) Adset_get_delivery_estimate(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for adset_get_delivery_estimate")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/delivery_estimate", adSetId)
	
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// Adset_get_insights performs GET insights for AdSet
func (c *AdSetClient) Adset_get_insights(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for adset_get_insights")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/insights", adSetId)
	
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// Adset_post_insights performs POST insights for AdSet
func (c *AdSetClient) Adset_post_insights(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for adset_post_insights")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/insights", adSetId)
	
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// Adset_get_message_delivery_estimate performs GET message_delivery_estimate for AdSet
func (c *AdSetClient) Adset_get_message_delivery_estimate(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for adset_get_message_delivery_estimate")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/message_delivery_estimate", adSetId)
	
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// Adset_get_targetingsentencelines performs GET targetingsentencelines for AdSet
func (c *AdSetClient) Adset_get_targetingsentencelines(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for adset_get_targetingsentencelines")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/targetingsentencelines", adSetId)
	
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// Adset_delete_ performs DELETE  for AdSet
func (c *AdSetClient) Adset_delete_(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for adset_delete_")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/", adSetId)
	
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// Adset_get_ performs GET  for AdSet
func (c *AdSetClient) Adset_get_(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for adset_get_")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/", adSetId)
	
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// Adset_post_ performs POST  for AdSet
func (c *AdSetClient) Adset_post_(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	// Extract ad_set_id for URL construction
	adSetId, ok := args["ad_set_id"].(string)
	if !ok {
		return nil, fmt.Errorf("ad_set_id is required for adset_post_")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%s/", adSetId)
	
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}
		
	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

