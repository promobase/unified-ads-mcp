// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// AdSetClient provides methods for AdSet operations
type AdSetClient struct {
	accessToken string
}

// NewAdSetClient creates a new AdSet client
func NewAdSetClient(accessToken string) *AdSetClient {
	return &AdSetClient{
		accessToken: accessToken,
	}
}

// adset_get_activities GET activities for AdSet
func (c *AdSetClient) Adset_get_activities(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_set_id, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	_ = ad_set_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdSet endpoints, include ad_set_id in the URL path
	adSetId, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/activities", adSetId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adset_get_ad_studies GET ad_studies for AdSet
func (c *AdSetClient) Adset_get_ad_studies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_set_id, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	_ = ad_set_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdSet endpoints, include ad_set_id in the URL path
	adSetId, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/ad_studies", adSetId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adset_get_adcreatives GET adcreatives for AdSet
func (c *AdSetClient) Adset_get_adcreatives(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_set_id, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	_ = ad_set_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdSet endpoints, include ad_set_id in the URL path
	adSetId, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/adcreatives", adSetId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adset_delete_adlabels DELETE adlabels for AdSet
func (c *AdSetClient) Adset_delete_adlabels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_set_id, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	_ = ad_set_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdSet endpoints, include ad_set_id in the URL path
	adSetId, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/adlabels", adSetId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adset_post_adlabels POST adlabels for AdSet
func (c *AdSetClient) Adset_post_adlabels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_set_id, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	_ = ad_set_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdSet endpoints, include ad_set_id in the URL path
	adSetId, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/adlabels", adSetId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adset_get_adrules_governed GET adrules_governed for AdSet
func (c *AdSetClient) Adset_get_adrules_governed(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_set_id, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	_ = ad_set_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdSet endpoints, include ad_set_id in the URL path
	adSetId, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/adrules_governed", adSetId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adset_get_ads GET ads for AdSet
func (c *AdSetClient) Adset_get_ads(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_set_id, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	_ = ad_set_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdSet endpoints, include ad_set_id in the URL path
	adSetId, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/ads", adSetId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adset_get_asyncadrequests GET asyncadrequests for AdSet
func (c *AdSetClient) Adset_get_asyncadrequests(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_set_id, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	_ = ad_set_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdSet endpoints, include ad_set_id in the URL path
	adSetId, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/asyncadrequests", adSetId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adset_post_budget_schedules POST budget_schedules for AdSet
func (c *AdSetClient) Adset_post_budget_schedules(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_set_id, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	_ = ad_set_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdSet endpoints, include ad_set_id in the URL path
	adSetId, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/budget_schedules", adSetId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adset_get_copies GET copies for AdSet
func (c *AdSetClient) Adset_get_copies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_set_id, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	_ = ad_set_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdSet endpoints, include ad_set_id in the URL path
	adSetId, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/copies", adSetId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adset_post_copies POST copies for AdSet
func (c *AdSetClient) Adset_post_copies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_set_id, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	_ = ad_set_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdSet endpoints, include ad_set_id in the URL path
	adSetId, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/copies", adSetId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adset_get_delivery_estimate GET delivery_estimate for AdSet
func (c *AdSetClient) Adset_get_delivery_estimate(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_set_id, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	_ = ad_set_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdSet endpoints, include ad_set_id in the URL path
	adSetId, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/delivery_estimate", adSetId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adset_get_insights GET insights for AdSet
func (c *AdSetClient) Adset_get_insights(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_set_id, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	_ = ad_set_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdSet endpoints, include ad_set_id in the URL path
	adSetId, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/insights", adSetId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adset_post_insights POST insights for AdSet
func (c *AdSetClient) Adset_post_insights(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_set_id, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	_ = ad_set_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdSet endpoints, include ad_set_id in the URL path
	adSetId, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/insights", adSetId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adset_get_message_delivery_estimate GET message_delivery_estimate for AdSet
func (c *AdSetClient) Adset_get_message_delivery_estimate(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_set_id, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	_ = ad_set_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdSet endpoints, include ad_set_id in the URL path
	adSetId, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/message_delivery_estimate", adSetId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adset_get_targetingsentencelines GET targetingsentencelines for AdSet
func (c *AdSetClient) Adset_get_targetingsentencelines(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_set_id, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	_ = ad_set_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdSet endpoints, include ad_set_id in the URL path
	adSetId, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/targetingsentencelines", adSetId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adset_delete_ DELETE  for AdSet
func (c *AdSetClient) Adset_delete_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_set_id, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	_ = ad_set_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdSet endpoints, include ad_set_id in the URL path
	adSetId, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/", adSetId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adset_get_ GET  for AdSet
func (c *AdSetClient) Adset_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_set_id, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	_ = ad_set_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdSet endpoints, include ad_set_id in the URL path
	adSetId, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/", adSetId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_set_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_set_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_set_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_set_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adset_post_ POST  for AdSet
func (c *AdSetClient) Adset_post_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_set_id, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	_ = ad_set_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdSet endpoints, include ad_set_id in the URL path
	adSetId, ok := args["ad_set_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_set_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/", adSetId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_set_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_set_id" != "ad_set_id" {
			urlParams.Set("ad_set_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_set_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
