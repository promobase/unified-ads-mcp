// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// AdClient provides methods for Ad operations
type AdClient struct {
	accessToken string
}

// NewAdClient creates a new Ad client
func NewAdClient(accessToken string) *AdClient {
	return &AdClient{
		accessToken: accessToken,
	}
}

// ad_get_adcreatives GET adcreatives for Ad
func (c *AdClient) Ad_get_adcreatives(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_id, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	_ = ad_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Ad endpoints, include ad_id in the URL path
	adId, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/adcreatives", adId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_id" != "ad_id" {
			urlParams.Set("ad_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// ad_post_adlabels POST adlabels for Ad
func (c *AdClient) Ad_post_adlabels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_id, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	_ = ad_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Ad endpoints, include ad_id in the URL path
	adId, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/adlabels", adId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_id" != "ad_id" {
			urlParams.Set("ad_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// ad_get_adrules_governed GET adrules_governed for Ad
func (c *AdClient) Ad_get_adrules_governed(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_id, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	_ = ad_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Ad endpoints, include ad_id in the URL path
	adId, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/adrules_governed", adId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_id" != "ad_id" {
			urlParams.Set("ad_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// ad_get_copies GET copies for Ad
func (c *AdClient) Ad_get_copies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_id, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	_ = ad_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Ad endpoints, include ad_id in the URL path
	adId, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/copies", adId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_id" != "ad_id" {
			urlParams.Set("ad_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// ad_post_copies POST copies for Ad
func (c *AdClient) Ad_post_copies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_id, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	_ = ad_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Ad endpoints, include ad_id in the URL path
	adId, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/copies", adId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_id" != "ad_id" {
			urlParams.Set("ad_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// ad_get_insights GET insights for Ad
func (c *AdClient) Ad_get_insights(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_id, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	_ = ad_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Ad endpoints, include ad_id in the URL path
	adId, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/insights", adId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_id" != "ad_id" {
			urlParams.Set("ad_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// ad_post_insights POST insights for Ad
func (c *AdClient) Ad_post_insights(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_id, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	_ = ad_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Ad endpoints, include ad_id in the URL path
	adId, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/insights", adId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_id" != "ad_id" {
			urlParams.Set("ad_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// ad_get_leads GET leads for Ad
func (c *AdClient) Ad_get_leads(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_id, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	_ = ad_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Ad endpoints, include ad_id in the URL path
	adId, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/leads", adId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_id" != "ad_id" {
			urlParams.Set("ad_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// ad_get_previews GET previews for Ad
func (c *AdClient) Ad_get_previews(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_id, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	_ = ad_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Ad endpoints, include ad_id in the URL path
	adId, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/previews", adId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_id" != "ad_id" {
			urlParams.Set("ad_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// ad_get_targetingsentencelines GET targetingsentencelines for Ad
func (c *AdClient) Ad_get_targetingsentencelines(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_id, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	_ = ad_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Ad endpoints, include ad_id in the URL path
	adId, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/targetingsentencelines", adId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_id" != "ad_id" {
			urlParams.Set("ad_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// ad_delete_ DELETE  for Ad
func (c *AdClient) Ad_delete_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_id, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	_ = ad_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Ad endpoints, include ad_id in the URL path
	adId, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/", adId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_id" != "ad_id" {
			urlParams.Set("ad_id", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// ad_get_ GET  for Ad
func (c *AdClient) Ad_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_id, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	_ = ad_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Ad endpoints, include ad_id in the URL path
	adId, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/", adId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_id" != "ad_id" {
			urlParams.Set("ad_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "ad_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "ad_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "ad_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "ad_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// ad_post_ POST  for Ad
func (c *AdClient) Ad_post_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_id, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	_ = ad_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For Ad endpoints, include ad_id in the URL path
	adId, ok := args["ad_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/%v/", adId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "ad_id" != "ad_id" {
			urlParams.Set("ad_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "ad_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
