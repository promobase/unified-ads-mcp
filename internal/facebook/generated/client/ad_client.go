// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// AdClient provides methods for Ad operations
type AdClient struct {
	accessToken string
}

// NewAdClient creates a new Ad client
func NewAdClient(accessToken string) *AdClient {
	return &AdClient{
		accessToken: accessToken,
	}
}


// ad_get_adcreatives GET adcreatives for Ad
func (c *AdClient) Ad_get_adcreatives(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "adcreatives")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// ad_post_adlabels POST adlabels for Ad
func (c *AdClient) Ad_post_adlabels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	adlabels, ok := args["adlabels"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: adlabels")
	}
	_ = adlabels // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "adlabels")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["adlabels"]; ok {
		urlParams.Set("adlabels", fmt.Sprintf("%v", val))
	}
	if val, ok := args["execution_options"]; ok {
		urlParams.Set("execution_options", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// ad_get_adrules_governed GET adrules_governed for Ad
func (c *AdClient) Ad_get_adrules_governed(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "adrules_governed")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["pass_evaluation"]; ok {
		urlParams.Set("pass_evaluation", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// ad_get_copies GET copies for Ad
func (c *AdClient) Ad_get_copies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "copies")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["date_preset"]; ok {
		urlParams.Set("date_preset", fmt.Sprintf("%v", val))
	}
	if val, ok := args["effective_status"]; ok {
		urlParams.Set("effective_status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["time_range"]; ok {
		urlParams.Set("time_range", fmt.Sprintf("%v", val))
	}
	if val, ok := args["updated_since"]; ok {
		urlParams.Set("updated_since", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// ad_post_copies POST copies for Ad
func (c *AdClient) Ad_post_copies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "copies")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["adset_id"]; ok {
		urlParams.Set("adset_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["creative_parameters"]; ok {
		urlParams.Set("creative_parameters", fmt.Sprintf("%v", val))
	}
	if val, ok := args["rename_options"]; ok {
		urlParams.Set("rename_options", fmt.Sprintf("%v", val))
	}
	if val, ok := args["status_option"]; ok {
		urlParams.Set("status_option", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// ad_get_insights GET insights for Ad
func (c *AdClient) Ad_get_insights(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "insights")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["action_attribution_windows"]; ok {
		urlParams.Set("action_attribution_windows", fmt.Sprintf("%v", val))
	}
	if val, ok := args["action_breakdowns"]; ok {
		urlParams.Set("action_breakdowns", fmt.Sprintf("%v", val))
	}
	if val, ok := args["action_report_time"]; ok {
		urlParams.Set("action_report_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["breakdowns"]; ok {
		urlParams.Set("breakdowns", fmt.Sprintf("%v", val))
	}
	if val, ok := args["date_preset"]; ok {
		urlParams.Set("date_preset", fmt.Sprintf("%v", val))
	}
	if val, ok := args["default_summary"]; ok {
		urlParams.Set("default_summary", fmt.Sprintf("%v", val))
	}
	if val, ok := args["export_columns"]; ok {
		urlParams.Set("export_columns", fmt.Sprintf("%v", val))
	}
	if val, ok := args["export_format"]; ok {
		urlParams.Set("export_format", fmt.Sprintf("%v", val))
	}
	if val, ok := args["export_name"]; ok {
		urlParams.Set("export_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fields"]; ok {
		urlParams.Set("fields", fmt.Sprintf("%v", val))
	}
	if val, ok := args["filtering"]; ok {
		urlParams.Set("filtering", fmt.Sprintf("%v", val))
	}
	if val, ok := args["level"]; ok {
		urlParams.Set("level", fmt.Sprintf("%v", val))
	}
	if val, ok := args["limit"]; ok {
		urlParams.Set("limit", fmt.Sprintf("%v", val))
	}
	if val, ok := args["product_id_limit"]; ok {
		urlParams.Set("product_id_limit", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sort"]; ok {
		urlParams.Set("sort", fmt.Sprintf("%v", val))
	}
	if val, ok := args["summary"]; ok {
		urlParams.Set("summary", fmt.Sprintf("%v", val))
	}
	if val, ok := args["summary_action_breakdowns"]; ok {
		urlParams.Set("summary_action_breakdowns", fmt.Sprintf("%v", val))
	}
	if val, ok := args["time_increment"]; ok {
		urlParams.Set("time_increment", fmt.Sprintf("%v", val))
	}
	if val, ok := args["time_range"]; ok {
		urlParams.Set("time_range", fmt.Sprintf("%v", val))
	}
	if val, ok := args["time_ranges"]; ok {
		urlParams.Set("time_ranges", fmt.Sprintf("%v", val))
	}
	if val, ok := args["use_account_attribution_setting"]; ok {
		urlParams.Set("use_account_attribution_setting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["use_unified_attribution_setting"]; ok {
		urlParams.Set("use_unified_attribution_setting", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// ad_post_insights POST insights for Ad
func (c *AdClient) Ad_post_insights(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "insights")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["action_attribution_windows"]; ok {
		urlParams.Set("action_attribution_windows", fmt.Sprintf("%v", val))
	}
	if val, ok := args["action_breakdowns"]; ok {
		urlParams.Set("action_breakdowns", fmt.Sprintf("%v", val))
	}
	if val, ok := args["action_report_time"]; ok {
		urlParams.Set("action_report_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["breakdowns"]; ok {
		urlParams.Set("breakdowns", fmt.Sprintf("%v", val))
	}
	if val, ok := args["date_preset"]; ok {
		urlParams.Set("date_preset", fmt.Sprintf("%v", val))
	}
	if val, ok := args["default_summary"]; ok {
		urlParams.Set("default_summary", fmt.Sprintf("%v", val))
	}
	if val, ok := args["export_columns"]; ok {
		urlParams.Set("export_columns", fmt.Sprintf("%v", val))
	}
	if val, ok := args["export_format"]; ok {
		urlParams.Set("export_format", fmt.Sprintf("%v", val))
	}
	if val, ok := args["export_name"]; ok {
		urlParams.Set("export_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fields"]; ok {
		urlParams.Set("fields", fmt.Sprintf("%v", val))
	}
	if val, ok := args["filtering"]; ok {
		urlParams.Set("filtering", fmt.Sprintf("%v", val))
	}
	if val, ok := args["level"]; ok {
		urlParams.Set("level", fmt.Sprintf("%v", val))
	}
	if val, ok := args["limit"]; ok {
		urlParams.Set("limit", fmt.Sprintf("%v", val))
	}
	if val, ok := args["product_id_limit"]; ok {
		urlParams.Set("product_id_limit", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sort"]; ok {
		urlParams.Set("sort", fmt.Sprintf("%v", val))
	}
	if val, ok := args["summary"]; ok {
		urlParams.Set("summary", fmt.Sprintf("%v", val))
	}
	if val, ok := args["summary_action_breakdowns"]; ok {
		urlParams.Set("summary_action_breakdowns", fmt.Sprintf("%v", val))
	}
	if val, ok := args["time_increment"]; ok {
		urlParams.Set("time_increment", fmt.Sprintf("%v", val))
	}
	if val, ok := args["time_range"]; ok {
		urlParams.Set("time_range", fmt.Sprintf("%v", val))
	}
	if val, ok := args["time_ranges"]; ok {
		urlParams.Set("time_ranges", fmt.Sprintf("%v", val))
	}
	if val, ok := args["use_account_attribution_setting"]; ok {
		urlParams.Set("use_account_attribution_setting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["use_unified_attribution_setting"]; ok {
		urlParams.Set("use_unified_attribution_setting", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// ad_get_leads GET leads for Ad
func (c *AdClient) Ad_get_leads(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "leads")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// ad_get_previews GET previews for Ad
func (c *AdClient) Ad_get_previews(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_format, ok := args["ad_format"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_format")
	}
	_ = ad_format // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "previews")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_format"]; ok {
		urlParams.Set("ad_format", fmt.Sprintf("%v", val))
	}
	if val, ok := args["creative_feature"]; ok {
		urlParams.Set("creative_feature", fmt.Sprintf("%v", val))
	}
	if val, ok := args["dynamic_asset_label"]; ok {
		urlParams.Set("dynamic_asset_label", fmt.Sprintf("%v", val))
	}
	if val, ok := args["dynamic_creative_spec"]; ok {
		urlParams.Set("dynamic_creative_spec", fmt.Sprintf("%v", val))
	}
	if val, ok := args["dynamic_customization"]; ok {
		urlParams.Set("dynamic_customization", fmt.Sprintf("%v", val))
	}
	if val, ok := args["end_date"]; ok {
		urlParams.Set("end_date", fmt.Sprintf("%v", val))
	}
	if val, ok := args["height"]; ok {
		urlParams.Set("height", fmt.Sprintf("%v", val))
	}
	if val, ok := args["locale"]; ok {
		urlParams.Set("locale", fmt.Sprintf("%v", val))
	}
	if val, ok := args["place_page_id"]; ok {
		urlParams.Set("place_page_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["post"]; ok {
		urlParams.Set("post", fmt.Sprintf("%v", val))
	}
	if val, ok := args["product_item_ids"]; ok {
		urlParams.Set("product_item_ids", fmt.Sprintf("%v", val))
	}
	if val, ok := args["render_type"]; ok {
		urlParams.Set("render_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["start_date"]; ok {
		urlParams.Set("start_date", fmt.Sprintf("%v", val))
	}
	if val, ok := args["width"]; ok {
		urlParams.Set("width", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// ad_get_targetingsentencelines GET targetingsentencelines for Ad
func (c *AdClient) Ad_get_targetingsentencelines(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "targetingsentencelines")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// ad_delete_ DELETE  for Ad
func (c *AdClient) Ad_delete_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// ad_get_ GET  for Ad
func (c *AdClient) Ad_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["am_call_tags"]; ok {
		urlParams.Set("am_call_tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["date_preset"]; ok {
		urlParams.Set("date_preset", fmt.Sprintf("%v", val))
	}
	if val, ok := args["from_adtable"]; ok {
		urlParams.Set("from_adtable", fmt.Sprintf("%v", val))
	}
	if val, ok := args["review_feedback_breakdown"]; ok {
		urlParams.Set("review_feedback_breakdown", fmt.Sprintf("%v", val))
	}
	if val, ok := args["time_range"]; ok {
		urlParams.Set("time_range", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// ad_post_ POST  for Ad
func (c *AdClient) Ad_post_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_schedule_end_time"]; ok {
		urlParams.Set("ad_schedule_end_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ad_schedule_start_time"]; ok {
		urlParams.Set("ad_schedule_start_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["adlabels"]; ok {
		urlParams.Set("adlabels", fmt.Sprintf("%v", val))
	}
	if val, ok := args["adset_spec"]; ok {
		urlParams.Set("adset_spec", fmt.Sprintf("%v", val))
	}
	if val, ok := args["audience_id"]; ok {
		urlParams.Set("audience_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["bid_amount"]; ok {
		urlParams.Set("bid_amount", fmt.Sprintf("%v", val))
	}
	if val, ok := args["conversion_domain"]; ok {
		urlParams.Set("conversion_domain", fmt.Sprintf("%v", val))
	}
	if val, ok := args["creative"]; ok {
		urlParams.Set("creative", fmt.Sprintf("%v", val))
	}
	if val, ok := args["creative_asset_groups_spec"]; ok {
		urlParams.Set("creative_asset_groups_spec", fmt.Sprintf("%v", val))
	}
	if val, ok := args["display_sequence"]; ok {
		urlParams.Set("display_sequence", fmt.Sprintf("%v", val))
	}
	if val, ok := args["draft_adgroup_id"]; ok {
		urlParams.Set("draft_adgroup_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["engagement_audience"]; ok {
		urlParams.Set("engagement_audience", fmt.Sprintf("%v", val))
	}
	if val, ok := args["execution_options"]; ok {
		urlParams.Set("execution_options", fmt.Sprintf("%v", val))
	}
	if val, ok := args["include_demolink_hashes"]; ok {
		urlParams.Set("include_demolink_hashes", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["priority"]; ok {
		urlParams.Set("priority", fmt.Sprintf("%v", val))
	}
	if val, ok := args["status"]; ok {
		urlParams.Set("status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tracking_specs"]; ok {
		urlParams.Set("tracking_specs", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

