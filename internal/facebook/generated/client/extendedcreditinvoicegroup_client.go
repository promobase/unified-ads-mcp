// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// ExtendedCreditInvoiceGroupClient provides methods for ExtendedCreditInvoiceGroup operations
type ExtendedCreditInvoiceGroupClient struct {
	accessToken string
}

// NewExtendedCreditInvoiceGroupClient creates a new ExtendedCreditInvoiceGroup client
func NewExtendedCreditInvoiceGroupClient(accessToken string) *ExtendedCreditInvoiceGroupClient {
	return &ExtendedCreditInvoiceGroupClient{
		accessToken: accessToken,
	}
}


// extendedcreditinvoicegroup_delete_ad_accounts DELETE ad_accounts for ExtendedCreditInvoiceGroup
func (c *ExtendedCreditInvoiceGroupClient) Extendedcreditinvoicegroup_delete_ad_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_account_id, ok := args["ad_account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_account_id")
	}
	_ = ad_account_id // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "ad_accounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_account_id"]; ok {
		urlParams.Set("ad_account_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// extendedcreditinvoicegroup_get_ad_accounts GET ad_accounts for ExtendedCreditInvoiceGroup
func (c *ExtendedCreditInvoiceGroupClient) Extendedcreditinvoicegroup_get_ad_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "ad_accounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// extendedcreditinvoicegroup_post_ad_accounts POST ad_accounts for ExtendedCreditInvoiceGroup
func (c *ExtendedCreditInvoiceGroupClient) Extendedcreditinvoicegroup_post_ad_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	ad_account_id, ok := args["ad_account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: ad_account_id")
	}
	_ = ad_account_id // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "ad_accounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_account_id"]; ok {
		urlParams.Set("ad_account_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// extendedcreditinvoicegroup_delete_ DELETE  for ExtendedCreditInvoiceGroup
func (c *ExtendedCreditInvoiceGroupClient) Extendedcreditinvoicegroup_delete_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// extendedcreditinvoicegroup_get_ GET  for ExtendedCreditInvoiceGroup
func (c *ExtendedCreditInvoiceGroupClient) Extendedcreditinvoicegroup_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// extendedcreditinvoicegroup_post_ POST  for ExtendedCreditInvoiceGroup
func (c *ExtendedCreditInvoiceGroupClient) Extendedcreditinvoicegroup_post_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["emails"]; ok {
		urlParams.Set("emails", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

