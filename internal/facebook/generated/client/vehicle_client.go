// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// VehicleClient provides methods for Vehicle operations
type VehicleClient struct {
	accessToken string
}

// NewVehicleClient creates a new Vehicle client
func NewVehicleClient(accessToken string) *VehicleClient {
	return &VehicleClient{
		accessToken: accessToken,
	}
}

// vehicle_get_channels_to_integrity_status GET channels_to_integrity_status for Vehicle
func (c *VehicleClient) Vehicle_get_channels_to_integrity_status(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/channels_to_integrity_status")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// vehicle_get_override_details GET override_details for Vehicle
func (c *VehicleClient) Vehicle_get_override_details(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/override_details")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["keys"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("keys", fmt.Sprintf("%v", val))

	}
	if val, ok := args["type"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("type", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// vehicle_get_videos_metadata GET videos_metadata for Vehicle
func (c *VehicleClient) Vehicle_get_videos_metadata(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/videos_metadata")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// vehicle_get_ GET  for Vehicle
func (c *VehicleClient) Vehicle_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// vehicle_post_ POST  for Vehicle
func (c *VehicleClient) Vehicle_post_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["address"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("address", fmt.Sprintf("%v", val))

	}
	if val, ok := args["applinks"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("applinks", fmt.Sprintf("%v", val))

	}
	if val, ok := args["availability"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("availability", fmt.Sprintf("%v", val))

	}
	if val, ok := args["body_style"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("body_style", fmt.Sprintf("%v", val))

	}
	if val, ok := args["condition"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("condition", fmt.Sprintf("%v", val))

	}
	if val, ok := args["currency"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("currency", fmt.Sprintf("%v", val))

	}
	if val, ok := args["date_first_on_lot"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("date_first_on_lot", fmt.Sprintf("%v", val))

	}
	if val, ok := args["dealer_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("dealer_id", fmt.Sprintf("%v", val))

	}
	if val, ok := args["dealer_name"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("dealer_name", fmt.Sprintf("%v", val))

	}
	if val, ok := args["dealer_phone"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("dealer_phone", fmt.Sprintf("%v", val))

	}
	if val, ok := args["description"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("description", fmt.Sprintf("%v", val))

	}
	if val, ok := args["drivetrain"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("drivetrain", fmt.Sprintf("%v", val))

	}
	if val, ok := args["exterior_color"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("exterior_color", fmt.Sprintf("%v", val))

	}
	if val, ok := args["fb_page_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fb_page_id", fmt.Sprintf("%v", val))

	}
	if val, ok := args["fuel_type"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fuel_type", fmt.Sprintf("%v", val))

	}
	if val, ok := args["images"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("images", fmt.Sprintf("%v", val))

	}
	if val, ok := args["interior_color"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("interior_color", fmt.Sprintf("%v", val))

	}
	if val, ok := args["make"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("make", fmt.Sprintf("%v", val))

	}
	if val, ok := args["mileage"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("mileage", fmt.Sprintf("%v", val))

	}
	if val, ok := args["model"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("model", fmt.Sprintf("%v", val))

	}
	if val, ok := args["price"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("price", fmt.Sprintf("%v", val))

	}
	if val, ok := args["state_of_vehicle"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("state_of_vehicle", fmt.Sprintf("%v", val))

	}
	if val, ok := args["title"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("title", fmt.Sprintf("%v", val))

	}
	if val, ok := args["transmission"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("transmission", fmt.Sprintf("%v", val))

	}
	if val, ok := args["trim"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("trim", fmt.Sprintf("%v", val))

	}
	if val, ok := args["url"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("url", fmt.Sprintf("%v", val))

	}
	if val, ok := args["vehicle_type"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("vehicle_type", fmt.Sprintf("%v", val))

	}
	if val, ok := args["vin"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("vin", fmt.Sprintf("%v", val))

	}
	if val, ok := args["year"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("year", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
