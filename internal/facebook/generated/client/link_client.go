// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// LinkClient provides methods for Link operations
type LinkClient struct {
	accessToken string
}

// NewLinkClient creates a new Link client
func NewLinkClient(accessToken string) *LinkClient {
	return &LinkClient{
		accessToken: accessToken,
	}
}

// link_post_comments POST comments for Link
func (c *LinkClient) Link_post_comments(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "comments")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["attachment_id"]; ok {
		urlParams.Set("attachment_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["attachment_share_url"]; ok {
		urlParams.Set("attachment_share_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["attachment_url"]; ok {
		urlParams.Set("attachment_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["comment_privacy_value"]; ok {
		urlParams.Set("comment_privacy_value", fmt.Sprintf("%v", val))
	}
	if val, ok := args["facepile_mentioned_ids"]; ok {
		urlParams.Set("facepile_mentioned_ids", fmt.Sprintf("%v", val))
	}
	if val, ok := args["feedback_source"]; ok {
		urlParams.Set("feedback_source", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_offline"]; ok {
		urlParams.Set("is_offline", fmt.Sprintf("%v", val))
	}
	if val, ok := args["message"]; ok {
		urlParams.Set("message", fmt.Sprintf("%v", val))
	}
	if val, ok := args["nectar_module"]; ok {
		urlParams.Set("nectar_module", fmt.Sprintf("%v", val))
	}
	if val, ok := args["object_id"]; ok {
		urlParams.Set("object_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["parent_comment_id"]; ok {
		urlParams.Set("parent_comment_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["text"]; ok {
		urlParams.Set("text", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tracking"]; ok {
		urlParams.Set("tracking", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// link_get_likes GET likes for Link
func (c *LinkClient) Link_get_likes(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "likes")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// link_get_ GET  for Link
func (c *LinkClient) Link_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
