// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// AlbumClient provides methods for Album operations
type AlbumClient struct {
	accessToken string
}

// NewAlbumClient creates a new Album client
func NewAlbumClient(accessToken string) *AlbumClient {
	return &AlbumClient{
		accessToken: accessToken,
	}
}


// facebook_album_get_comments GET comments for Album
func (c *AlbumClient) Facebook_album_get_comments(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "comments")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["filter"]; ok {
		urlParams.Set("filter", fmt.Sprintf("%v", val))
	}
	if val, ok := args["live_filter"]; ok {
		urlParams.Set("live_filter", fmt.Sprintf("%v", val))
	}
	if val, ok := args["order"]; ok {
		urlParams.Set("order", fmt.Sprintf("%v", val))
	}
	if val, ok := args["since"]; ok {
		urlParams.Set("since", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_album_post_comments POST comments for Album
func (c *AlbumClient) Facebook_album_post_comments(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "comments")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["attachment_id"]; ok {
		urlParams.Set("attachment_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["attachment_share_url"]; ok {
		urlParams.Set("attachment_share_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["attachment_url"]; ok {
		urlParams.Set("attachment_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["comment_privacy_value"]; ok {
		urlParams.Set("comment_privacy_value", fmt.Sprintf("%v", val))
	}
	if val, ok := args["facepile_mentioned_ids"]; ok {
		urlParams.Set("facepile_mentioned_ids", fmt.Sprintf("%v", val))
	}
	if val, ok := args["feedback_source"]; ok {
		urlParams.Set("feedback_source", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_offline"]; ok {
		urlParams.Set("is_offline", fmt.Sprintf("%v", val))
	}
	if val, ok := args["message"]; ok {
		urlParams.Set("message", fmt.Sprintf("%v", val))
	}
	if val, ok := args["nectar_module"]; ok {
		urlParams.Set("nectar_module", fmt.Sprintf("%v", val))
	}
	if val, ok := args["object_id"]; ok {
		urlParams.Set("object_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["parent_comment_id"]; ok {
		urlParams.Set("parent_comment_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["text"]; ok {
		urlParams.Set("text", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tracking"]; ok {
		urlParams.Set("tracking", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_album_get_likes GET likes for Album
func (c *AlbumClient) Facebook_album_get_likes(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "likes")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_album_post_likes POST likes for Album
func (c *AlbumClient) Facebook_album_post_likes(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "likes")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["feedback_source"]; ok {
		urlParams.Set("feedback_source", fmt.Sprintf("%v", val))
	}
	if val, ok := args["nectar_module"]; ok {
		urlParams.Set("nectar_module", fmt.Sprintf("%v", val))
	}
	if val, ok := args["notify"]; ok {
		urlParams.Set("notify", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tracking"]; ok {
		urlParams.Set("tracking", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_album_get_photos GET photos for Album
func (c *AlbumClient) Facebook_album_get_photos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "photos")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_album_post_photos POST photos for Album
func (c *AlbumClient) Facebook_album_post_photos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "photos")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["aid"]; ok {
		urlParams.Set("aid", fmt.Sprintf("%v", val))
	}
	if val, ok := args["allow_spherical_photo"]; ok {
		urlParams.Set("allow_spherical_photo", fmt.Sprintf("%v", val))
	}
	if val, ok := args["alt_text_custom"]; ok {
		urlParams.Set("alt_text_custom", fmt.Sprintf("%v", val))
	}
	if val, ok := args["android_key_hash"]; ok {
		urlParams.Set("android_key_hash", fmt.Sprintf("%v", val))
	}
	if val, ok := args["application_id"]; ok {
		urlParams.Set("application_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["attempt"]; ok {
		urlParams.Set("attempt", fmt.Sprintf("%v", val))
	}
	if val, ok := args["audience_exp"]; ok {
		urlParams.Set("audience_exp", fmt.Sprintf("%v", val))
	}
	if val, ok := args["backdated_time"]; ok {
		urlParams.Set("backdated_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["backdated_time_granularity"]; ok {
		urlParams.Set("backdated_time_granularity", fmt.Sprintf("%v", val))
	}
	if val, ok := args["caption"]; ok {
		urlParams.Set("caption", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_session_id"]; ok {
		urlParams.Set("composer_session_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["direct_share_status"]; ok {
		urlParams.Set("direct_share_status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["feed_targeting"]; ok {
		urlParams.Set("feed_targeting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["filter_type"]; ok {
		urlParams.Set("filter_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["full_res_is_coming_later"]; ok {
		urlParams.Set("full_res_is_coming_later", fmt.Sprintf("%v", val))
	}
	if val, ok := args["initial_view_heading_override_degrees"]; ok {
		urlParams.Set("initial_view_heading_override_degrees", fmt.Sprintf("%v", val))
	}
	if val, ok := args["initial_view_pitch_override_degrees"]; ok {
		urlParams.Set("initial_view_pitch_override_degrees", fmt.Sprintf("%v", val))
	}
	if val, ok := args["initial_view_vertical_fov_override_degrees"]; ok {
		urlParams.Set("initial_view_vertical_fov_override_degrees", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ios_bundle_id"]; ok {
		urlParams.Set("ios_bundle_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_explicit_location"]; ok {
		urlParams.Set("is_explicit_location", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_explicit_place"]; ok {
		urlParams.Set("is_explicit_place", fmt.Sprintf("%v", val))
	}
	if val, ok := args["manual_privacy"]; ok {
		urlParams.Set("manual_privacy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["message"]; ok {
		urlParams.Set("message", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["no_story"]; ok {
		urlParams.Set("no_story", fmt.Sprintf("%v", val))
	}
	if val, ok := args["offline_id"]; ok {
		urlParams.Set("offline_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_action_type_id"]; ok {
		urlParams.Set("og_action_type_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_icon_id"]; ok {
		urlParams.Set("og_icon_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_object_id"]; ok {
		urlParams.Set("og_object_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_phrase"]; ok {
		urlParams.Set("og_phrase", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_set_profile_badge"]; ok {
		urlParams.Set("og_set_profile_badge", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_suggestion_mechanism"]; ok {
		urlParams.Set("og_suggestion_mechanism", fmt.Sprintf("%v", val))
	}
	if val, ok := args["place"]; ok {
		urlParams.Set("place", fmt.Sprintf("%v", val))
	}
	if val, ok := args["privacy"]; ok {
		urlParams.Set("privacy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["profile_id"]; ok {
		urlParams.Set("profile_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["provenance_info"]; ok {
		urlParams.Set("provenance_info", fmt.Sprintf("%v", val))
	}
	if val, ok := args["proxied_app_id"]; ok {
		urlParams.Set("proxied_app_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["published"]; ok {
		urlParams.Set("published", fmt.Sprintf("%v", val))
	}
	if val, ok := args["qn"]; ok {
		urlParams.Set("qn", fmt.Sprintf("%v", val))
	}
	if val, ok := args["spherical_metadata"]; ok {
		urlParams.Set("spherical_metadata", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sponsor_id"]; ok {
		urlParams.Set("sponsor_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sponsor_relationship"]; ok {
		urlParams.Set("sponsor_relationship", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tags"]; ok {
		urlParams.Set("tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["target_id"]; ok {
		urlParams.Set("target_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["targeting"]; ok {
		urlParams.Set("targeting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["time_since_original_post"]; ok {
		urlParams.Set("time_since_original_post", fmt.Sprintf("%v", val))
	}
	if val, ok := args["uid"]; ok {
		urlParams.Set("uid", fmt.Sprintf("%v", val))
	}
	if val, ok := args["unpublished_content_type"]; ok {
		urlParams.Set("unpublished_content_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["url"]; ok {
		urlParams.Set("url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["user_selected_tags"]; ok {
		urlParams.Set("user_selected_tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["vault_image_id"]; ok {
		urlParams.Set("vault_image_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_album_get_picture GET picture for Album
func (c *AlbumClient) Facebook_album_get_picture(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "picture")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["redirect"]; ok {
		urlParams.Set("redirect", fmt.Sprintf("%v", val))
	}
	if val, ok := args["type"]; ok {
		urlParams.Set("type", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_album_get_ GET  for Album
func (c *AlbumClient) Facebook_album_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

