// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// AdAccountClient provides methods for AdAccount operations
type AdAccountClient struct {
	accessToken string
}

// NewAdAccountClient creates a new AdAccount client
func NewAdAccountClient(accessToken string) *AdAccountClient {
	return &AdAccountClient{
		accessToken: accessToken,
	}
}

// adaccount_get_account_controls GET account_controls for AdAccount
func (c *AdAccountClient) Adaccount_get_account_controls(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/account_controls", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_account_controls POST account_controls for AdAccount
func (c *AdAccountClient) Adaccount_post_account_controls(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/account_controls", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_activities GET activities for AdAccount
func (c *AdAccountClient) Adaccount_get_activities(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/activities", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_ad_place_page_sets GET ad_place_page_sets for AdAccount
func (c *AdAccountClient) Adaccount_get_ad_place_page_sets(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/ad_place_page_sets", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_ad_place_page_sets POST ad_place_page_sets for AdAccount
func (c *AdAccountClient) Adaccount_post_ad_place_page_sets(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/ad_place_page_sets", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_ad_place_page_sets_async POST ad_place_page_sets_async for AdAccount
func (c *AdAccountClient) Adaccount_post_ad_place_page_sets_async(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/ad_place_page_sets_async", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_ad_saved_keywords GET ad_saved_keywords for AdAccount
func (c *AdAccountClient) Adaccount_get_ad_saved_keywords(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/ad_saved_keywords", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_ad_studies GET ad_studies for AdAccount
func (c *AdAccountClient) Adaccount_get_ad_studies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/ad_studies", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_adcloudplayables GET adcloudplayables for AdAccount
func (c *AdAccountClient) Adaccount_get_adcloudplayables(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/adcloudplayables", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_adcreatives GET adcreatives for AdAccount
func (c *AdAccountClient) Adaccount_get_adcreatives(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/adcreatives", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_adcreatives POST adcreatives for AdAccount
func (c *AdAccountClient) Adaccount_post_adcreatives(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/adcreatives", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_adcreativesbylabels GET adcreativesbylabels for AdAccount
func (c *AdAccountClient) Adaccount_get_adcreativesbylabels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/adcreativesbylabels", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_delete_adimages DELETE adimages for AdAccount
func (c *AdAccountClient) Adaccount_delete_adimages(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/adimages", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_adimages GET adimages for AdAccount
func (c *AdAccountClient) Adaccount_get_adimages(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/adimages", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_adimages POST adimages for AdAccount
func (c *AdAccountClient) Adaccount_post_adimages(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/adimages", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_adlabels GET adlabels for AdAccount
func (c *AdAccountClient) Adaccount_get_adlabels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/adlabels", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_adlabels POST adlabels for AdAccount
func (c *AdAccountClient) Adaccount_post_adlabels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/adlabels", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_adplayables GET adplayables for AdAccount
func (c *AdAccountClient) Adaccount_get_adplayables(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/adplayables", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_adplayables POST adplayables for AdAccount
func (c *AdAccountClient) Adaccount_post_adplayables(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/adplayables", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_adrules_history GET adrules_history for AdAccount
func (c *AdAccountClient) Adaccount_get_adrules_history(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/adrules_history", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_adrules_library GET adrules_library for AdAccount
func (c *AdAccountClient) Adaccount_get_adrules_library(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/adrules_library", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_adrules_library POST adrules_library for AdAccount
func (c *AdAccountClient) Adaccount_post_adrules_library(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/adrules_library", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_ads GET ads for AdAccount
func (c *AdAccountClient) Adaccount_get_ads(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/ads", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_ads POST ads for AdAccount
func (c *AdAccountClient) Adaccount_post_ads(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/ads", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_ads_reporting_mmm_reports GET ads_reporting_mmm_reports for AdAccount
func (c *AdAccountClient) Adaccount_get_ads_reporting_mmm_reports(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/ads_reporting_mmm_reports", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_ads_reporting_mmm_schedulers GET ads_reporting_mmm_schedulers for AdAccount
func (c *AdAccountClient) Adaccount_get_ads_reporting_mmm_schedulers(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/ads_reporting_mmm_schedulers", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_ads_volume GET ads_volume for AdAccount
func (c *AdAccountClient) Adaccount_get_ads_volume(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/ads_volume", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_adsbylabels GET adsbylabels for AdAccount
func (c *AdAccountClient) Adaccount_get_adsbylabels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/adsbylabels", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_adsets GET adsets for AdAccount
func (c *AdAccountClient) Adaccount_get_adsets(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/adsets", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_adsets POST adsets for AdAccount
func (c *AdAccountClient) Adaccount_post_adsets(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/adsets", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_adsetsbylabels GET adsetsbylabels for AdAccount
func (c *AdAccountClient) Adaccount_get_adsetsbylabels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/adsetsbylabels", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_adspixels GET adspixels for AdAccount
func (c *AdAccountClient) Adaccount_get_adspixels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/adspixels", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_adspixels POST adspixels for AdAccount
func (c *AdAccountClient) Adaccount_post_adspixels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/adspixels", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_advertisable_applications GET advertisable_applications for AdAccount
func (c *AdAccountClient) Adaccount_get_advertisable_applications(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/advertisable_applications", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_delete_advideos DELETE advideos for AdAccount
func (c *AdAccountClient) Adaccount_delete_advideos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/advideos", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_advideos GET advideos for AdAccount
func (c *AdAccountClient) Adaccount_get_advideos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/advideos", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_advideos POST advideos for AdAccount
func (c *AdAccountClient) Adaccount_post_advideos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/advideos", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_affectedadsets GET affectedadsets for AdAccount
func (c *AdAccountClient) Adaccount_get_affectedadsets(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/affectedadsets", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_delete_agencies DELETE agencies for AdAccount
func (c *AdAccountClient) Adaccount_delete_agencies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/agencies", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_agencies GET agencies for AdAccount
func (c *AdAccountClient) Adaccount_get_agencies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/agencies", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_agencies POST agencies for AdAccount
func (c *AdAccountClient) Adaccount_post_agencies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/agencies", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_applications GET applications for AdAccount
func (c *AdAccountClient) Adaccount_get_applications(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/applications", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_delete_assigned_users DELETE assigned_users for AdAccount
func (c *AdAccountClient) Adaccount_delete_assigned_users(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/assigned_users", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_assigned_users GET assigned_users for AdAccount
func (c *AdAccountClient) Adaccount_get_assigned_users(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/assigned_users", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_assigned_users POST assigned_users for AdAccount
func (c *AdAccountClient) Adaccount_post_assigned_users(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/assigned_users", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_async_batch_requests POST async_batch_requests for AdAccount
func (c *AdAccountClient) Adaccount_post_async_batch_requests(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/async_batch_requests", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_async_requests GET async_requests for AdAccount
func (c *AdAccountClient) Adaccount_get_async_requests(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/async_requests", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_asyncadcreatives GET asyncadcreatives for AdAccount
func (c *AdAccountClient) Adaccount_get_asyncadcreatives(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/asyncadcreatives", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_asyncadcreatives POST asyncadcreatives for AdAccount
func (c *AdAccountClient) Adaccount_post_asyncadcreatives(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/asyncadcreatives", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_asyncadrequestsets GET asyncadrequestsets for AdAccount
func (c *AdAccountClient) Adaccount_get_asyncadrequestsets(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/asyncadrequestsets", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_asyncadrequestsets POST asyncadrequestsets for AdAccount
func (c *AdAccountClient) Adaccount_post_asyncadrequestsets(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/asyncadrequestsets", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_audience_funnel GET audience_funnel for AdAccount
func (c *AdAccountClient) Adaccount_get_audience_funnel(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/audience_funnel", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_block_list_drafts POST block_list_drafts for AdAccount
func (c *AdAccountClient) Adaccount_post_block_list_drafts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/block_list_drafts", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_brand_safety_content_filter_levels POST brand_safety_content_filter_levels for AdAccount
func (c *AdAccountClient) Adaccount_post_brand_safety_content_filter_levels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/brand_safety_content_filter_levels", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_broadtargetingcategories GET broadtargetingcategories for AdAccount
func (c *AdAccountClient) Adaccount_get_broadtargetingcategories(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/broadtargetingcategories", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_businessprojects GET businessprojects for AdAccount
func (c *AdAccountClient) Adaccount_get_businessprojects(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/businessprojects", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_delete_campaigns DELETE campaigns for AdAccount
func (c *AdAccountClient) Adaccount_delete_campaigns(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/campaigns", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_campaigns GET campaigns for AdAccount
func (c *AdAccountClient) Adaccount_get_campaigns(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/campaigns", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_campaigns POST campaigns for AdAccount
func (c *AdAccountClient) Adaccount_post_campaigns(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/campaigns", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_campaignsbylabels GET campaignsbylabels for AdAccount
func (c *AdAccountClient) Adaccount_get_campaignsbylabels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/campaignsbylabels", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_connected_instagram_accounts GET connected_instagram_accounts for AdAccount
func (c *AdAccountClient) Adaccount_get_connected_instagram_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/connected_instagram_accounts", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_connected_instagram_accounts_with_iabp GET connected_instagram_accounts_with_iabp for AdAccount
func (c *AdAccountClient) Adaccount_get_connected_instagram_accounts_with_iabp(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/connected_instagram_accounts_with_iabp", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_conversion_goals GET conversion_goals for AdAccount
func (c *AdAccountClient) Adaccount_get_conversion_goals(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/conversion_goals", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_customaudiences GET customaudiences for AdAccount
func (c *AdAccountClient) Adaccount_get_customaudiences(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/customaudiences", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_customaudiences POST customaudiences for AdAccount
func (c *AdAccountClient) Adaccount_post_customaudiences(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/customaudiences", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_customaudiencestos GET customaudiencestos for AdAccount
func (c *AdAccountClient) Adaccount_get_customaudiencestos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/customaudiencestos", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_customaudiencestos POST customaudiencestos for AdAccount
func (c *AdAccountClient) Adaccount_post_customaudiencestos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/customaudiencestos", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_customconversions GET customconversions for AdAccount
func (c *AdAccountClient) Adaccount_get_customconversions(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/customconversions", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_customconversions POST customconversions for AdAccount
func (c *AdAccountClient) Adaccount_post_customconversions(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/customconversions", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_delivery_estimate GET delivery_estimate for AdAccount
func (c *AdAccountClient) Adaccount_get_delivery_estimate(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/delivery_estimate", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_deprecatedtargetingadsets GET deprecatedtargetingadsets for AdAccount
func (c *AdAccountClient) Adaccount_get_deprecatedtargetingadsets(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/deprecatedtargetingadsets", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_dsa_recommendations GET dsa_recommendations for AdAccount
func (c *AdAccountClient) Adaccount_get_dsa_recommendations(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/dsa_recommendations", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_generatepreviews GET generatepreviews for AdAccount
func (c *AdAccountClient) Adaccount_get_generatepreviews(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/generatepreviews", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_impacting_ad_studies GET impacting_ad_studies for AdAccount
func (c *AdAccountClient) Adaccount_get_impacting_ad_studies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/impacting_ad_studies", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_insights GET insights for AdAccount
func (c *AdAccountClient) Adaccount_get_insights(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/insights", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_insights POST insights for AdAccount
func (c *AdAccountClient) Adaccount_post_insights(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/insights", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_instagram_accounts GET instagram_accounts for AdAccount
func (c *AdAccountClient) Adaccount_get_instagram_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/instagram_accounts", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_ios_fourteen_campaign_limits GET ios_fourteen_campaign_limits for AdAccount
func (c *AdAccountClient) Adaccount_get_ios_fourteen_campaign_limits(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/ios_fourteen_campaign_limits", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_matched_search_applications GET matched_search_applications for AdAccount
func (c *AdAccountClient) Adaccount_get_matched_search_applications(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/matched_search_applications", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_max_bid GET max_bid for AdAccount
func (c *AdAccountClient) Adaccount_get_max_bid(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/max_bid", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_mcmeconversions GET mcmeconversions for AdAccount
func (c *AdAccountClient) Adaccount_get_mcmeconversions(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/mcmeconversions", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_minimum_budgets GET minimum_budgets for AdAccount
func (c *AdAccountClient) Adaccount_get_minimum_budgets(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/minimum_budgets", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_onbehalf_requests GET onbehalf_requests for AdAccount
func (c *AdAccountClient) Adaccount_get_onbehalf_requests(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/onbehalf_requests", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_product_audiences POST product_audiences for AdAccount
func (c *AdAccountClient) Adaccount_post_product_audiences(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/product_audiences", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_promote_pages GET promote_pages for AdAccount
func (c *AdAccountClient) Adaccount_get_promote_pages(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/promote_pages", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_publisher_block_lists GET publisher_block_lists for AdAccount
func (c *AdAccountClient) Adaccount_get_publisher_block_lists(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/publisher_block_lists", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_publisher_block_lists POST publisher_block_lists for AdAccount
func (c *AdAccountClient) Adaccount_post_publisher_block_lists(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/publisher_block_lists", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_reachestimate GET reachestimate for AdAccount
func (c *AdAccountClient) Adaccount_get_reachestimate(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/reachestimate", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_reachfrequencypredictions GET reachfrequencypredictions for AdAccount
func (c *AdAccountClient) Adaccount_get_reachfrequencypredictions(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/reachfrequencypredictions", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_reachfrequencypredictions POST reachfrequencypredictions for AdAccount
func (c *AdAccountClient) Adaccount_post_reachfrequencypredictions(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/reachfrequencypredictions", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_recommendations GET recommendations for AdAccount
func (c *AdAccountClient) Adaccount_get_recommendations(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/recommendations", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_recommendations POST recommendations for AdAccount
func (c *AdAccountClient) Adaccount_post_recommendations(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/recommendations", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_saved_audiences GET saved_audiences for AdAccount
func (c *AdAccountClient) Adaccount_get_saved_audiences(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/saved_audiences", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_delete_subscribed_apps DELETE subscribed_apps for AdAccount
func (c *AdAccountClient) Adaccount_delete_subscribed_apps(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/subscribed_apps", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_subscribed_apps GET subscribed_apps for AdAccount
func (c *AdAccountClient) Adaccount_get_subscribed_apps(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/subscribed_apps", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_subscribed_apps POST subscribed_apps for AdAccount
func (c *AdAccountClient) Adaccount_post_subscribed_apps(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/subscribed_apps", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_targetingbrowse GET targetingbrowse for AdAccount
func (c *AdAccountClient) Adaccount_get_targetingbrowse(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/targetingbrowse", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_targetingsearch GET targetingsearch for AdAccount
func (c *AdAccountClient) Adaccount_get_targetingsearch(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/targetingsearch", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_targetingsentencelines GET targetingsentencelines for AdAccount
func (c *AdAccountClient) Adaccount_get_targetingsentencelines(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/targetingsentencelines", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_targetingsuggestions GET targetingsuggestions for AdAccount
func (c *AdAccountClient) Adaccount_get_targetingsuggestions(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/targetingsuggestions", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_targetingvalidation GET targetingvalidation for AdAccount
func (c *AdAccountClient) Adaccount_get_targetingvalidation(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/targetingvalidation", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_tracking GET tracking for AdAccount
func (c *AdAccountClient) Adaccount_get_tracking(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/tracking", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_tracking POST tracking for AdAccount
func (c *AdAccountClient) Adaccount_post_tracking(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/tracking", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_users GET users for AdAccount
func (c *AdAccountClient) Adaccount_get_users(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/users", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_delete_usersofanyaudience DELETE usersofanyaudience for AdAccount
func (c *AdAccountClient) Adaccount_delete_usersofanyaudience(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/usersofanyaudience", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_value_rule_set GET value_rule_set for AdAccount
func (c *AdAccountClient) Adaccount_get_value_rule_set(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/value_rule_set", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_value_rule_set POST value_rule_set for AdAccount
func (c *AdAccountClient) Adaccount_post_value_rule_set(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/value_rule_set", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_video_ads GET video_ads for AdAccount
func (c *AdAccountClient) Adaccount_get_video_ads(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/video_ads", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_video_ads POST video_ads for AdAccount
func (c *AdAccountClient) Adaccount_post_video_ads(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	params, ok := args["params"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: params")
	}
	_ = params // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/video_ads", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_get_ GET  for AdAccount
func (c *AdAccountClient) Adaccount_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "fields" != "account_id" {
			urlParams.Set("fields", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "limit" != "account_id" {
			urlParams.Set("limit", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "after" != "account_id" {
			urlParams.Set("after", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "before" != "account_id" {
			urlParams.Set("before", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// adaccount_post_ POST  for AdAccount
func (c *AdAccountClient) Adaccount_post_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	// For AdAccount endpoints, include account_id in the URL path
	accountId, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/act_%v/", accountId)

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "account_id" != "account_id" {
			urlParams.Set("account_id", fmt.Sprintf("%v", val))
		}

	}
	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		if "params" != "account_id" {
			urlParams.Set("params", fmt.Sprintf("%v", val))
		}

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
