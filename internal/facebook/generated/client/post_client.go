// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// PostClient provides methods for Post operations
type PostClient struct {
	accessToken string
}

// NewPostClient creates a new Post client
func NewPostClient(accessToken string) *PostClient {
	return &PostClient{
		accessToken: accessToken,
	}
}


// post_get_attachments GET attachments for Post
func (c *PostClient) Post_get_attachments(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "attachments")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// post_get_comments GET comments for Post
func (c *PostClient) Post_get_comments(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "comments")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["filter"]; ok {
		urlParams.Set("filter", fmt.Sprintf("%v", val))
	}
	if val, ok := args["live_filter"]; ok {
		urlParams.Set("live_filter", fmt.Sprintf("%v", val))
	}
	if val, ok := args["order"]; ok {
		urlParams.Set("order", fmt.Sprintf("%v", val))
	}
	if val, ok := args["since"]; ok {
		urlParams.Set("since", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// post_post_comments POST comments for Post
func (c *PostClient) Post_post_comments(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "comments")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["attachment_id"]; ok {
		urlParams.Set("attachment_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["attachment_share_url"]; ok {
		urlParams.Set("attachment_share_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["attachment_url"]; ok {
		urlParams.Set("attachment_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["comment"]; ok {
		urlParams.Set("comment", fmt.Sprintf("%v", val))
	}
	if val, ok := args["comment_privacy_value"]; ok {
		urlParams.Set("comment_privacy_value", fmt.Sprintf("%v", val))
	}
	if val, ok := args["feedback_source"]; ok {
		urlParams.Set("feedback_source", fmt.Sprintf("%v", val))
	}
	if val, ok := args["message"]; ok {
		urlParams.Set("message", fmt.Sprintf("%v", val))
	}
	if val, ok := args["nectar_module"]; ok {
		urlParams.Set("nectar_module", fmt.Sprintf("%v", val))
	}
	if val, ok := args["parent_comment_id"]; ok {
		urlParams.Set("parent_comment_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["post_id"]; ok {
		urlParams.Set("post_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tracking"]; ok {
		urlParams.Set("tracking", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// post_get_dynamic_posts GET dynamic_posts for Post
func (c *PostClient) Post_get_dynamic_posts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "dynamic_posts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// post_get_insights GET insights for Post
func (c *PostClient) Post_get_insights(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "insights")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["date_preset"]; ok {
		urlParams.Set("date_preset", fmt.Sprintf("%v", val))
	}
	if val, ok := args["metric"]; ok {
		urlParams.Set("metric", fmt.Sprintf("%v", val))
	}
	if val, ok := args["period"]; ok {
		urlParams.Set("period", fmt.Sprintf("%v", val))
	}
	if val, ok := args["since"]; ok {
		urlParams.Set("since", fmt.Sprintf("%v", val))
	}
	if val, ok := args["until"]; ok {
		urlParams.Set("until", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// post_delete_likes DELETE likes for Post
func (c *PostClient) Post_delete_likes(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "likes")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["nectar_module"]; ok {
		urlParams.Set("nectar_module", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tracking"]; ok {
		urlParams.Set("tracking", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// post_post_likes POST likes for Post
func (c *PostClient) Post_post_likes(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "likes")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["feedback_source"]; ok {
		urlParams.Set("feedback_source", fmt.Sprintf("%v", val))
	}
	if val, ok := args["nectar_module"]; ok {
		urlParams.Set("nectar_module", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tracking"]; ok {
		urlParams.Set("tracking", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// post_get_reactions GET reactions for Post
func (c *PostClient) Post_get_reactions(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "reactions")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["type"]; ok {
		urlParams.Set("type", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// post_get_sharedposts GET sharedposts for Post
func (c *PostClient) Post_get_sharedposts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "sharedposts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// post_get_sponsor_tags GET sponsor_tags for Post
func (c *PostClient) Post_get_sponsor_tags(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "sponsor_tags")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// post_get_to GET to for Post
func (c *PostClient) Post_get_to(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "to")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// post_delete_ DELETE  for Post
func (c *PostClient) Post_delete_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// post_get_ GET  for Post
func (c *PostClient) Post_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["primary_fb_page_id"]; ok {
		urlParams.Set("primary_fb_page_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["primary_ig_user_id"]; ok {
		urlParams.Set("primary_ig_user_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// post_post_ POST  for Post
func (c *PostClient) Post_post_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["attached_media"]; ok {
		urlParams.Set("attached_media", fmt.Sprintf("%v", val))
	}
	if val, ok := args["backdated_time"]; ok {
		urlParams.Set("backdated_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["backdated_time_granularity"]; ok {
		urlParams.Set("backdated_time_granularity", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_session_id"]; ok {
		urlParams.Set("composer_session_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["direct_share_status"]; ok {
		urlParams.Set("direct_share_status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["explicitly_added_mentionee_ids"]; ok {
		urlParams.Set("explicitly_added_mentionee_ids", fmt.Sprintf("%v", val))
	}
	if val, ok := args["feed_story_visibility"]; ok {
		urlParams.Set("feed_story_visibility", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_explicit_location"]; ok {
		urlParams.Set("is_explicit_location", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_hidden"]; ok {
		urlParams.Set("is_hidden", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_pinned"]; ok {
		urlParams.Set("is_pinned", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_published"]; ok {
		urlParams.Set("is_published", fmt.Sprintf("%v", val))
	}
	if val, ok := args["message"]; ok {
		urlParams.Set("message", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_action_type_id"]; ok {
		urlParams.Set("og_action_type_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_hide_object_attachment"]; ok {
		urlParams.Set("og_hide_object_attachment", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_icon_id"]; ok {
		urlParams.Set("og_icon_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_object_id"]; ok {
		urlParams.Set("og_object_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_phrase"]; ok {
		urlParams.Set("og_phrase", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_set_profile_badge"]; ok {
		urlParams.Set("og_set_profile_badge", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_suggestion_mechanism"]; ok {
		urlParams.Set("og_suggestion_mechanism", fmt.Sprintf("%v", val))
	}
	if val, ok := args["place"]; ok {
		urlParams.Set("place", fmt.Sprintf("%v", val))
	}
	if val, ok := args["privacy"]; ok {
		urlParams.Set("privacy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["product_item"]; ok {
		urlParams.Set("product_item", fmt.Sprintf("%v", val))
	}
	if val, ok := args["scheduled_publish_time"]; ok {
		urlParams.Set("scheduled_publish_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["should_sync_product_edit"]; ok {
		urlParams.Set("should_sync_product_edit", fmt.Sprintf("%v", val))
	}
	if val, ok := args["source_type"]; ok {
		urlParams.Set("source_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sponsor_id"]; ok {
		urlParams.Set("sponsor_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sponsor_relationship"]; ok {
		urlParams.Set("sponsor_relationship", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tags"]; ok {
		urlParams.Set("tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["text_format_preset_id"]; ok {
		urlParams.Set("text_format_preset_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["timeline_visibility"]; ok {
		urlParams.Set("timeline_visibility", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tracking"]; ok {
		urlParams.Set("tracking", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

