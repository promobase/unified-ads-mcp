// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// IGUserClient provides methods for IGUser operations
type IGUserClient struct {
	accessToken string
}

// NewIGUserClient creates a new IGUser client
func NewIGUserClient(accessToken string) *IGUserClient {
	return &IGUserClient{
		accessToken: accessToken,
	}
}


// facebook_iguser_get_agencies GET agencies for IGUser
func (c *IGUserClient) Facebook_iguser_get_agencies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "agencies")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_get_authorized_adaccounts GET authorized_adaccounts for IGUser
func (c *IGUserClient) Facebook_iguser_get_authorized_adaccounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	business, ok := args["business"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: business")
	}
	_ = business // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "authorized_adaccounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["business"]; ok {
		urlParams.Set("business", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_post_authorized_adaccounts POST authorized_adaccounts for IGUser
func (c *IGUserClient) Facebook_iguser_post_authorized_adaccounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	account_id, ok := args["account_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: account_id")
	}
	_ = account_id // Suppress unused variable warning
	business, ok := args["business"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: business")
	}
	_ = business // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "authorized_adaccounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["account_id"]; ok {
		urlParams.Set("account_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["business"]; ok {
		urlParams.Set("business", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_get_available_catalogs GET available_catalogs for IGUser
func (c *IGUserClient) Facebook_iguser_get_available_catalogs(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "available_catalogs")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_get_branded_content_ad_permissions GET branded_content_ad_permissions for IGUser
func (c *IGUserClient) Facebook_iguser_get_branded_content_ad_permissions(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "branded_content_ad_permissions")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_post_branded_content_ad_permissions POST branded_content_ad_permissions for IGUser
func (c *IGUserClient) Facebook_iguser_post_branded_content_ad_permissions(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "branded_content_ad_permissions")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["creator_instagram_account"]; ok {
		urlParams.Set("creator_instagram_account", fmt.Sprintf("%v", val))
	}
	if val, ok := args["creator_instagram_username"]; ok {
		urlParams.Set("creator_instagram_username", fmt.Sprintf("%v", val))
	}
	if val, ok := args["revoke"]; ok {
		urlParams.Set("revoke", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_get_branded_content_advertisable_medias GET branded_content_advertisable_medias for IGUser
func (c *IGUserClient) Facebook_iguser_get_branded_content_advertisable_medias(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "branded_content_advertisable_medias")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_code"]; ok {
		urlParams.Set("ad_code", fmt.Sprintf("%v", val))
	}
	if val, ok := args["creator_username"]; ok {
		urlParams.Set("creator_username", fmt.Sprintf("%v", val))
	}
	if val, ok := args["only_fetch_allowlisted"]; ok {
		urlParams.Set("only_fetch_allowlisted", fmt.Sprintf("%v", val))
	}
	if val, ok := args["only_fetch_recommended_content"]; ok {
		urlParams.Set("only_fetch_recommended_content", fmt.Sprintf("%v", val))
	}
	if val, ok := args["permalinks"]; ok {
		urlParams.Set("permalinks", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_delete_branded_content_tag_approval DELETE branded_content_tag_approval for IGUser
func (c *IGUserClient) Facebook_iguser_delete_branded_content_tag_approval(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	user_ids, ok := args["user_ids"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: user_ids")
	}
	_ = user_ids // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "branded_content_tag_approval")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["user_ids"]; ok {
		urlParams.Set("user_ids", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_get_branded_content_tag_approval GET branded_content_tag_approval for IGUser
func (c *IGUserClient) Facebook_iguser_get_branded_content_tag_approval(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	user_ids, ok := args["user_ids"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: user_ids")
	}
	_ = user_ids // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "branded_content_tag_approval")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["user_ids"]; ok {
		urlParams.Set("user_ids", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_post_branded_content_tag_approval POST branded_content_tag_approval for IGUser
func (c *IGUserClient) Facebook_iguser_post_branded_content_tag_approval(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	user_ids, ok := args["user_ids"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: user_ids")
	}
	_ = user_ids // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "branded_content_tag_approval")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["user_ids"]; ok {
		urlParams.Set("user_ids", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_get_catalog_product_search GET catalog_product_search for IGUser
func (c *IGUserClient) Facebook_iguser_get_catalog_product_search(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	catalog_id, ok := args["catalog_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: catalog_id")
	}
	_ = catalog_id // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "catalog_product_search")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["catalog_id"]; ok {
		urlParams.Set("catalog_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["q"]; ok {
		urlParams.Set("q", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_get_connected_threads_user GET connected_threads_user for IGUser
func (c *IGUserClient) Facebook_iguser_get_connected_threads_user(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "connected_threads_user")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_get_content_publishing_limit GET content_publishing_limit for IGUser
func (c *IGUserClient) Facebook_iguser_get_content_publishing_limit(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "content_publishing_limit")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["since"]; ok {
		urlParams.Set("since", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_get_dataset GET dataset for IGUser
func (c *IGUserClient) Facebook_iguser_get_dataset(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "dataset")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_post_dataset POST dataset for IGUser
func (c *IGUserClient) Facebook_iguser_post_dataset(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "dataset")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["dataset_name"]; ok {
		urlParams.Set("dataset_name", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_get_insights GET insights for IGUser
func (c *IGUserClient) Facebook_iguser_get_insights(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	metric, ok := args["metric"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: metric")
	}
	_ = metric // Suppress unused variable warning
	period, ok := args["period"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: period")
	}
	_ = period // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "insights")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["breakdown"]; ok {
		urlParams.Set("breakdown", fmt.Sprintf("%v", val))
	}
	if val, ok := args["metric"]; ok {
		urlParams.Set("metric", fmt.Sprintf("%v", val))
	}
	if val, ok := args["metric_type"]; ok {
		urlParams.Set("metric_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["period"]; ok {
		urlParams.Set("period", fmt.Sprintf("%v", val))
	}
	if val, ok := args["since"]; ok {
		urlParams.Set("since", fmt.Sprintf("%v", val))
	}
	if val, ok := args["timeframe"]; ok {
		urlParams.Set("timeframe", fmt.Sprintf("%v", val))
	}
	if val, ok := args["until"]; ok {
		urlParams.Set("until", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_get_instagram_backed_threads_user GET instagram_backed_threads_user for IGUser
func (c *IGUserClient) Facebook_iguser_get_instagram_backed_threads_user(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "instagram_backed_threads_user")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_get_live_media GET live_media for IGUser
func (c *IGUserClient) Facebook_iguser_get_live_media(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "live_media")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["since"]; ok {
		urlParams.Set("since", fmt.Sprintf("%v", val))
	}
	if val, ok := args["until"]; ok {
		urlParams.Set("until", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_get_media GET media for IGUser
func (c *IGUserClient) Facebook_iguser_get_media(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "media")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["since"]; ok {
		urlParams.Set("since", fmt.Sprintf("%v", val))
	}
	if val, ok := args["until"]; ok {
		urlParams.Set("until", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_post_media POST media for IGUser
func (c *IGUserClient) Facebook_iguser_post_media(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "media")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["alt_text"]; ok {
		urlParams.Set("alt_text", fmt.Sprintf("%v", val))
	}
	if val, ok := args["audio_name"]; ok {
		urlParams.Set("audio_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["caption"]; ok {
		urlParams.Set("caption", fmt.Sprintf("%v", val))
	}
	if val, ok := args["children"]; ok {
		urlParams.Set("children", fmt.Sprintf("%v", val))
	}
	if val, ok := args["collaborators"]; ok {
		urlParams.Set("collaborators", fmt.Sprintf("%v", val))
	}
	if val, ok := args["cover_url"]; ok {
		urlParams.Set("cover_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["image_url"]; ok {
		urlParams.Set("image_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_carousel_item"]; ok {
		urlParams.Set("is_carousel_item", fmt.Sprintf("%v", val))
	}
	if val, ok := args["location_id"]; ok {
		urlParams.Set("location_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["media_type"]; ok {
		urlParams.Set("media_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["product_tags"]; ok {
		urlParams.Set("product_tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["share_to_feed"]; ok {
		urlParams.Set("share_to_feed", fmt.Sprintf("%v", val))
	}
	if val, ok := args["thumb_offset"]; ok {
		urlParams.Set("thumb_offset", fmt.Sprintf("%v", val))
	}
	if val, ok := args["upload_type"]; ok {
		urlParams.Set("upload_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["user_tags"]; ok {
		urlParams.Set("user_tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["video_url"]; ok {
		urlParams.Set("video_url", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_post_media_publish POST media_publish for IGUser
func (c *IGUserClient) Facebook_iguser_post_media_publish(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	creation_id, ok := args["creation_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: creation_id")
	}
	_ = creation_id // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "media_publish")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["creation_id"]; ok {
		urlParams.Set("creation_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_post_mentions POST mentions for IGUser
func (c *IGUserClient) Facebook_iguser_post_mentions(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	media_id, ok := args["media_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: media_id")
	}
	_ = media_id // Suppress unused variable warning
	message, ok := args["message"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: message")
	}
	_ = message // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "mentions")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["comment_id"]; ok {
		urlParams.Set("comment_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["media_id"]; ok {
		urlParams.Set("media_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["message"]; ok {
		urlParams.Set("message", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_get_notification_message_tokens GET notification_message_tokens for IGUser
func (c *IGUserClient) Facebook_iguser_get_notification_message_tokens(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "notification_message_tokens")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_get_product_appeal GET product_appeal for IGUser
func (c *IGUserClient) Facebook_iguser_get_product_appeal(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	product_id, ok := args["product_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: product_id")
	}
	_ = product_id // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "product_appeal")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["product_id"]; ok {
		urlParams.Set("product_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_post_product_appeal POST product_appeal for IGUser
func (c *IGUserClient) Facebook_iguser_post_product_appeal(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	appeal_reason, ok := args["appeal_reason"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: appeal_reason")
	}
	_ = appeal_reason // Suppress unused variable warning
	product_id, ok := args["product_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: product_id")
	}
	_ = product_id // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "product_appeal")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["appeal_reason"]; ok {
		urlParams.Set("appeal_reason", fmt.Sprintf("%v", val))
	}
	if val, ok := args["product_id"]; ok {
		urlParams.Set("product_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_get_recently_searched_hashtags GET recently_searched_hashtags for IGUser
func (c *IGUserClient) Facebook_iguser_get_recently_searched_hashtags(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "recently_searched_hashtags")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_get_stories GET stories for IGUser
func (c *IGUserClient) Facebook_iguser_get_stories(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "stories")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_get_tags GET tags for IGUser
func (c *IGUserClient) Facebook_iguser_get_tags(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "tags")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_get_upcoming_events GET upcoming_events for IGUser
func (c *IGUserClient) Facebook_iguser_get_upcoming_events(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "upcoming_events")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_post_upcoming_events POST upcoming_events for IGUser
func (c *IGUserClient) Facebook_iguser_post_upcoming_events(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	start_time, ok := args["start_time"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: start_time")
	}
	_ = start_time // Suppress unused variable warning
	title, ok := args["title"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: title")
	}
	_ = title // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "upcoming_events")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["end_time"]; ok {
		urlParams.Set("end_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["notification_subtypes"]; ok {
		urlParams.Set("notification_subtypes", fmt.Sprintf("%v", val))
	}
	if val, ok := args["start_time"]; ok {
		urlParams.Set("start_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["title"]; ok {
		urlParams.Set("title", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_get_welcome_message_flows GET welcome_message_flows for IGUser
func (c *IGUserClient) Facebook_iguser_get_welcome_message_flows(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "welcome_message_flows")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["app_id"]; ok {
		urlParams.Set("app_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["flow_id"]; ok {
		urlParams.Set("flow_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_iguser_get_ GET  for IGUser
func (c *IGUserClient) Facebook_iguser_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["adgroup_id"]; ok {
		urlParams.Set("adgroup_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

