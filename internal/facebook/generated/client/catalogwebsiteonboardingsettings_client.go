// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// CatalogWebsiteOnboardingSettingsClient provides methods for CatalogWebsiteOnboardingSettings operations
type CatalogWebsiteOnboardingSettingsClient struct {
	accessToken string
}

// NewCatalogWebsiteOnboardingSettingsClient creates a new CatalogWebsiteOnboardingSettings client
func NewCatalogWebsiteOnboardingSettingsClient(accessToken string) *CatalogWebsiteOnboardingSettingsClient {
	return &CatalogWebsiteOnboardingSettingsClient{
		accessToken: accessToken,
	}
}

// facebook_catalogwebsiteonboardingsettings_get_ GET  for CatalogWebsiteOnboardingSettings
func (c *CatalogWebsiteOnboardingSettingsClient) Facebook_catalogwebsiteonboardingsettings_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
