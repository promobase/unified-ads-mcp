// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// GroupClient provides methods for Group operations
type GroupClient struct {
	accessToken string
}

// NewGroupClient creates a new Group client
func NewGroupClient(accessToken string) *GroupClient {
	return &GroupClient{
		accessToken: accessToken,
	}
}


// facebook_group_delete_admins DELETE admins for Group
func (c *GroupClient) Facebook_group_delete_admins(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	uid, ok := args["uid"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: uid")
	}
	_ = uid // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "admins")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["uid"]; ok {
		urlParams.Set("uid", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_group_post_admins POST admins for Group
func (c *GroupClient) Facebook_group_post_admins(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	uid, ok := args["uid"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: uid")
	}
	_ = uid // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "admins")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["uid"]; ok {
		urlParams.Set("uid", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_group_get_albums GET albums for Group
func (c *GroupClient) Facebook_group_get_albums(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "albums")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_group_get_docs GET docs for Group
func (c *GroupClient) Facebook_group_get_docs(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "docs")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_group_get_events GET events for Group
func (c *GroupClient) Facebook_group_get_events(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "events")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_group_get_feed GET feed for Group
func (c *GroupClient) Facebook_group_get_feed(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "feed")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["include_hidden"]; ok {
		urlParams.Set("include_hidden", fmt.Sprintf("%v", val))
	}
	if val, ok := args["q"]; ok {
		urlParams.Set("q", fmt.Sprintf("%v", val))
	}
	if val, ok := args["show_expired"]; ok {
		urlParams.Set("show_expired", fmt.Sprintf("%v", val))
	}
	if val, ok := args["since"]; ok {
		urlParams.Set("since", fmt.Sprintf("%v", val))
	}
	if val, ok := args["until"]; ok {
		urlParams.Set("until", fmt.Sprintf("%v", val))
	}
	if val, ok := args["with"]; ok {
		urlParams.Set("with", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_group_post_feed POST feed for Group
func (c *GroupClient) Facebook_group_post_feed(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "feed")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["actions"]; ok {
		urlParams.Set("actions", fmt.Sprintf("%v", val))
	}
	if val, ok := args["album_id"]; ok {
		urlParams.Set("album_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["android_key_hash"]; ok {
		urlParams.Set("android_key_hash", fmt.Sprintf("%v", val))
	}
	if val, ok := args["application_id"]; ok {
		urlParams.Set("application_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["asked_fun_fact_prompt_id"]; ok {
		urlParams.Set("asked_fun_fact_prompt_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["asset3d_id"]; ok {
		urlParams.Set("asset3d_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["associated_id"]; ok {
		urlParams.Set("associated_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["attach_place_suggestion"]; ok {
		urlParams.Set("attach_place_suggestion", fmt.Sprintf("%v", val))
	}
	if val, ok := args["attached_media"]; ok {
		urlParams.Set("attached_media", fmt.Sprintf("%v", val))
	}
	if val, ok := args["audience_exp"]; ok {
		urlParams.Set("audience_exp", fmt.Sprintf("%v", val))
	}
	if val, ok := args["backdated_time"]; ok {
		urlParams.Set("backdated_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["backdated_time_granularity"]; ok {
		urlParams.Set("backdated_time_granularity", fmt.Sprintf("%v", val))
	}
	if val, ok := args["breaking_news"]; ok {
		urlParams.Set("breaking_news", fmt.Sprintf("%v", val))
	}
	if val, ok := args["breaking_news_expiration"]; ok {
		urlParams.Set("breaking_news_expiration", fmt.Sprintf("%v", val))
	}
	if val, ok := args["call_to_action"]; ok {
		urlParams.Set("call_to_action", fmt.Sprintf("%v", val))
	}
	if val, ok := args["caption"]; ok {
		urlParams.Set("caption", fmt.Sprintf("%v", val))
	}
	if val, ok := args["child_attachments"]; ok {
		urlParams.Set("child_attachments", fmt.Sprintf("%v", val))
	}
	if val, ok := args["client_mutation_id"]; ok {
		urlParams.Set("client_mutation_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_entry_picker"]; ok {
		urlParams.Set("composer_entry_picker", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_entry_point"]; ok {
		urlParams.Set("composer_entry_point", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_entry_time"]; ok {
		urlParams.Set("composer_entry_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_session_events_log"]; ok {
		urlParams.Set("composer_session_events_log", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_session_id"]; ok {
		urlParams.Set("composer_session_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_source_surface"]; ok {
		urlParams.Set("composer_source_surface", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_type"]; ok {
		urlParams.Set("composer_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["connection_class"]; ok {
		urlParams.Set("connection_class", fmt.Sprintf("%v", val))
	}
	if val, ok := args["content_attachment"]; ok {
		urlParams.Set("content_attachment", fmt.Sprintf("%v", val))
	}
	if val, ok := args["coordinates"]; ok {
		urlParams.Set("coordinates", fmt.Sprintf("%v", val))
	}
	if val, ok := args["cta_link"]; ok {
		urlParams.Set("cta_link", fmt.Sprintf("%v", val))
	}
	if val, ok := args["cta_type"]; ok {
		urlParams.Set("cta_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["direct_share_status"]; ok {
		urlParams.Set("direct_share_status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["expanded_height"]; ok {
		urlParams.Set("expanded_height", fmt.Sprintf("%v", val))
	}
	if val, ok := args["expanded_width"]; ok {
		urlParams.Set("expanded_width", fmt.Sprintf("%v", val))
	}
	if val, ok := args["feed_targeting"]; ok {
		urlParams.Set("feed_targeting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["formatting"]; ok {
		urlParams.Set("formatting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fun_fact_prompt_id"]; ok {
		urlParams.Set("fun_fact_prompt_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fun_fact_toastee_id"]; ok {
		urlParams.Set("fun_fact_toastee_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["height"]; ok {
		urlParams.Set("height", fmt.Sprintf("%v", val))
	}
	if val, ok := args["home_checkin_city_id"]; ok {
		urlParams.Set("home_checkin_city_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["image_crops"]; ok {
		urlParams.Set("image_crops", fmt.Sprintf("%v", val))
	}
	if val, ok := args["implicit_with_tags"]; ok {
		urlParams.Set("implicit_with_tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["instant_game_entry_point_data"]; ok {
		urlParams.Set("instant_game_entry_point_data", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ios_bundle_id"]; ok {
		urlParams.Set("ios_bundle_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_backout_draft"]; ok {
		urlParams.Set("is_backout_draft", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_boost_intended"]; ok {
		urlParams.Set("is_boost_intended", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_explicit_location"]; ok {
		urlParams.Set("is_explicit_location", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_explicit_share"]; ok {
		urlParams.Set("is_explicit_share", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_group_linking_post"]; ok {
		urlParams.Set("is_group_linking_post", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_photo_container"]; ok {
		urlParams.Set("is_photo_container", fmt.Sprintf("%v", val))
	}
	if val, ok := args["link"]; ok {
		urlParams.Set("link", fmt.Sprintf("%v", val))
	}
	if val, ok := args["location_source_id"]; ok {
		urlParams.Set("location_source_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["manual_privacy"]; ok {
		urlParams.Set("manual_privacy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["message"]; ok {
		urlParams.Set("message", fmt.Sprintf("%v", val))
	}
	if val, ok := args["multi_share_end_card"]; ok {
		urlParams.Set("multi_share_end_card", fmt.Sprintf("%v", val))
	}
	if val, ok := args["multi_share_optimized"]; ok {
		urlParams.Set("multi_share_optimized", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["nectar_module"]; ok {
		urlParams.Set("nectar_module", fmt.Sprintf("%v", val))
	}
	if val, ok := args["object_attachment"]; ok {
		urlParams.Set("object_attachment", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_action_type_id"]; ok {
		urlParams.Set("og_action_type_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_hide_object_attachment"]; ok {
		urlParams.Set("og_hide_object_attachment", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_icon_id"]; ok {
		urlParams.Set("og_icon_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_object_id"]; ok {
		urlParams.Set("og_object_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_phrase"]; ok {
		urlParams.Set("og_phrase", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_set_profile_badge"]; ok {
		urlParams.Set("og_set_profile_badge", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_suggestion_mechanism"]; ok {
		urlParams.Set("og_suggestion_mechanism", fmt.Sprintf("%v", val))
	}
	if val, ok := args["page_recommendation"]; ok {
		urlParams.Set("page_recommendation", fmt.Sprintf("%v", val))
	}
	if val, ok := args["picture"]; ok {
		urlParams.Set("picture", fmt.Sprintf("%v", val))
	}
	if val, ok := args["place"]; ok {
		urlParams.Set("place", fmt.Sprintf("%v", val))
	}
	if val, ok := args["place_attachment_setting"]; ok {
		urlParams.Set("place_attachment_setting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["place_list"]; ok {
		urlParams.Set("place_list", fmt.Sprintf("%v", val))
	}
	if val, ok := args["place_list_data"]; ok {
		urlParams.Set("place_list_data", fmt.Sprintf("%v", val))
	}
	if val, ok := args["post_surfaces_blacklist"]; ok {
		urlParams.Set("post_surfaces_blacklist", fmt.Sprintf("%v", val))
	}
	if val, ok := args["posting_to_redspace"]; ok {
		urlParams.Set("posting_to_redspace", fmt.Sprintf("%v", val))
	}
	if val, ok := args["privacy"]; ok {
		urlParams.Set("privacy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["prompt_id"]; ok {
		urlParams.Set("prompt_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["prompt_tracking_string"]; ok {
		urlParams.Set("prompt_tracking_string", fmt.Sprintf("%v", val))
	}
	if val, ok := args["properties"]; ok {
		urlParams.Set("properties", fmt.Sprintf("%v", val))
	}
	if val, ok := args["proxied_app_id"]; ok {
		urlParams.Set("proxied_app_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["publish_event_id"]; ok {
		urlParams.Set("publish_event_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["published"]; ok {
		urlParams.Set("published", fmt.Sprintf("%v", val))
	}
	if val, ok := args["quote"]; ok {
		urlParams.Set("quote", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ref"]; ok {
		urlParams.Set("ref", fmt.Sprintf("%v", val))
	}
	if val, ok := args["referenceable_image_ids"]; ok {
		urlParams.Set("referenceable_image_ids", fmt.Sprintf("%v", val))
	}
	if val, ok := args["referral_id"]; ok {
		urlParams.Set("referral_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["scheduled_publish_time"]; ok {
		urlParams.Set("scheduled_publish_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["source"]; ok {
		urlParams.Set("source", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sponsor_id"]; ok {
		urlParams.Set("sponsor_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sponsor_relationship"]; ok {
		urlParams.Set("sponsor_relationship", fmt.Sprintf("%v", val))
	}
	if val, ok := args["suggested_place_id"]; ok {
		urlParams.Set("suggested_place_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tags"]; ok {
		urlParams.Set("tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["target_surface"]; ok {
		urlParams.Set("target_surface", fmt.Sprintf("%v", val))
	}
	if val, ok := args["targeting"]; ok {
		urlParams.Set("targeting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["text_format_metadata"]; ok {
		urlParams.Set("text_format_metadata", fmt.Sprintf("%v", val))
	}
	if val, ok := args["text_format_preset_id"]; ok {
		urlParams.Set("text_format_preset_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["text_only_place"]; ok {
		urlParams.Set("text_only_place", fmt.Sprintf("%v", val))
	}
	if val, ok := args["thumbnail"]; ok {
		urlParams.Set("thumbnail", fmt.Sprintf("%v", val))
	}
	if val, ok := args["time_since_original_post"]; ok {
		urlParams.Set("time_since_original_post", fmt.Sprintf("%v", val))
	}
	if val, ok := args["title"]; ok {
		urlParams.Set("title", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tracking_info"]; ok {
		urlParams.Set("tracking_info", fmt.Sprintf("%v", val))
	}
	if val, ok := args["unpublished_content_type"]; ok {
		urlParams.Set("unpublished_content_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["user_selected_tags"]; ok {
		urlParams.Set("user_selected_tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["video_start_time_ms"]; ok {
		urlParams.Set("video_start_time_ms", fmt.Sprintf("%v", val))
	}
	if val, ok := args["viewer_coordinates"]; ok {
		urlParams.Set("viewer_coordinates", fmt.Sprintf("%v", val))
	}
	if val, ok := args["width"]; ok {
		urlParams.Set("width", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_group_get_files GET files for Group
func (c *GroupClient) Facebook_group_get_files(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "files")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_group_get_groups GET groups for Group
func (c *GroupClient) Facebook_group_get_groups(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "groups")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_group_post_groups POST groups for Group
func (c *GroupClient) Facebook_group_post_groups(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "groups")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["admin"]; ok {
		urlParams.Set("admin", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["group_icon_id"]; ok {
		urlParams.Set("group_icon_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["group_type"]; ok {
		urlParams.Set("group_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["join_setting"]; ok {
		urlParams.Set("join_setting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["parent_id"]; ok {
		urlParams.Set("parent_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["post_permissions"]; ok {
		urlParams.Set("post_permissions", fmt.Sprintf("%v", val))
	}
	if val, ok := args["post_requires_admin_approval"]; ok {
		urlParams.Set("post_requires_admin_approval", fmt.Sprintf("%v", val))
	}
	if val, ok := args["privacy"]; ok {
		urlParams.Set("privacy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ref"]; ok {
		urlParams.Set("ref", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_group_get_live_videos GET live_videos for Group
func (c *GroupClient) Facebook_group_get_live_videos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "live_videos")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["broadcast_status"]; ok {
		urlParams.Set("broadcast_status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["source"]; ok {
		urlParams.Set("source", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_group_post_live_videos POST live_videos for Group
func (c *GroupClient) Facebook_group_post_live_videos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "live_videos")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["content_tags"]; ok {
		urlParams.Set("content_tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["enable_backup_ingest"]; ok {
		urlParams.Set("enable_backup_ingest", fmt.Sprintf("%v", val))
	}
	if val, ok := args["encoding_settings"]; ok {
		urlParams.Set("encoding_settings", fmt.Sprintf("%v", val))
	}
	if val, ok := args["event_params"]; ok {
		urlParams.Set("event_params", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fisheye_video_cropped"]; ok {
		urlParams.Set("fisheye_video_cropped", fmt.Sprintf("%v", val))
	}
	if val, ok := args["front_z_rotation"]; ok {
		urlParams.Set("front_z_rotation", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_audio_only"]; ok {
		urlParams.Set("is_audio_only", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_spherical"]; ok {
		urlParams.Set("is_spherical", fmt.Sprintf("%v", val))
	}
	if val, ok := args["original_fov"]; ok {
		urlParams.Set("original_fov", fmt.Sprintf("%v", val))
	}
	if val, ok := args["privacy"]; ok {
		urlParams.Set("privacy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["projection"]; ok {
		urlParams.Set("projection", fmt.Sprintf("%v", val))
	}
	if val, ok := args["published"]; ok {
		urlParams.Set("published", fmt.Sprintf("%v", val))
	}
	if val, ok := args["schedule_custom_profile_image"]; ok {
		urlParams.Set("schedule_custom_profile_image", fmt.Sprintf("%v", val))
	}
	if val, ok := args["spatial_audio_format"]; ok {
		urlParams.Set("spatial_audio_format", fmt.Sprintf("%v", val))
	}
	if val, ok := args["status"]; ok {
		urlParams.Set("status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["stereoscopic_mode"]; ok {
		urlParams.Set("stereoscopic_mode", fmt.Sprintf("%v", val))
	}
	if val, ok := args["stop_on_delete_stream"]; ok {
		urlParams.Set("stop_on_delete_stream", fmt.Sprintf("%v", val))
	}
	if val, ok := args["stream_type"]; ok {
		urlParams.Set("stream_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["title"]; ok {
		urlParams.Set("title", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_group_delete_members DELETE members for Group
func (c *GroupClient) Facebook_group_delete_members(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "members")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["email"]; ok {
		urlParams.Set("email", fmt.Sprintf("%v", val))
	}
	if val, ok := args["member"]; ok {
		urlParams.Set("member", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_group_post_members POST members for Group
func (c *GroupClient) Facebook_group_post_members(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "members")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["email"]; ok {
		urlParams.Set("email", fmt.Sprintf("%v", val))
	}
	if val, ok := args["from"]; ok {
		urlParams.Set("from", fmt.Sprintf("%v", val))
	}
	if val, ok := args["member"]; ok {
		urlParams.Set("member", fmt.Sprintf("%v", val))
	}
	if val, ok := args["rate"]; ok {
		urlParams.Set("rate", fmt.Sprintf("%v", val))
	}
	if val, ok := args["source"]; ok {
		urlParams.Set("source", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_group_get_opted_in_members GET opted_in_members for Group
func (c *GroupClient) Facebook_group_get_opted_in_members(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "opted_in_members")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_group_post_photos POST photos for Group
func (c *GroupClient) Facebook_group_post_photos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "photos")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["aid"]; ok {
		urlParams.Set("aid", fmt.Sprintf("%v", val))
	}
	if val, ok := args["allow_spherical_photo"]; ok {
		urlParams.Set("allow_spherical_photo", fmt.Sprintf("%v", val))
	}
	if val, ok := args["alt_text_custom"]; ok {
		urlParams.Set("alt_text_custom", fmt.Sprintf("%v", val))
	}
	if val, ok := args["android_key_hash"]; ok {
		urlParams.Set("android_key_hash", fmt.Sprintf("%v", val))
	}
	if val, ok := args["application_id"]; ok {
		urlParams.Set("application_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["attempt"]; ok {
		urlParams.Set("attempt", fmt.Sprintf("%v", val))
	}
	if val, ok := args["audience_exp"]; ok {
		urlParams.Set("audience_exp", fmt.Sprintf("%v", val))
	}
	if val, ok := args["backdated_time"]; ok {
		urlParams.Set("backdated_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["backdated_time_granularity"]; ok {
		urlParams.Set("backdated_time_granularity", fmt.Sprintf("%v", val))
	}
	if val, ok := args["caption"]; ok {
		urlParams.Set("caption", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_session_id"]; ok {
		urlParams.Set("composer_session_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["direct_share_status"]; ok {
		urlParams.Set("direct_share_status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["feed_targeting"]; ok {
		urlParams.Set("feed_targeting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["filter_type"]; ok {
		urlParams.Set("filter_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["full_res_is_coming_later"]; ok {
		urlParams.Set("full_res_is_coming_later", fmt.Sprintf("%v", val))
	}
	if val, ok := args["initial_view_heading_override_degrees"]; ok {
		urlParams.Set("initial_view_heading_override_degrees", fmt.Sprintf("%v", val))
	}
	if val, ok := args["initial_view_pitch_override_degrees"]; ok {
		urlParams.Set("initial_view_pitch_override_degrees", fmt.Sprintf("%v", val))
	}
	if val, ok := args["initial_view_vertical_fov_override_degrees"]; ok {
		urlParams.Set("initial_view_vertical_fov_override_degrees", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ios_bundle_id"]; ok {
		urlParams.Set("ios_bundle_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_explicit_location"]; ok {
		urlParams.Set("is_explicit_location", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_explicit_place"]; ok {
		urlParams.Set("is_explicit_place", fmt.Sprintf("%v", val))
	}
	if val, ok := args["manual_privacy"]; ok {
		urlParams.Set("manual_privacy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["message"]; ok {
		urlParams.Set("message", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["no_story"]; ok {
		urlParams.Set("no_story", fmt.Sprintf("%v", val))
	}
	if val, ok := args["offline_id"]; ok {
		urlParams.Set("offline_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_action_type_id"]; ok {
		urlParams.Set("og_action_type_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_icon_id"]; ok {
		urlParams.Set("og_icon_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_object_id"]; ok {
		urlParams.Set("og_object_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_phrase"]; ok {
		urlParams.Set("og_phrase", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_set_profile_badge"]; ok {
		urlParams.Set("og_set_profile_badge", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_suggestion_mechanism"]; ok {
		urlParams.Set("og_suggestion_mechanism", fmt.Sprintf("%v", val))
	}
	if val, ok := args["place"]; ok {
		urlParams.Set("place", fmt.Sprintf("%v", val))
	}
	if val, ok := args["privacy"]; ok {
		urlParams.Set("privacy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["profile_id"]; ok {
		urlParams.Set("profile_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["provenance_info"]; ok {
		urlParams.Set("provenance_info", fmt.Sprintf("%v", val))
	}
	if val, ok := args["proxied_app_id"]; ok {
		urlParams.Set("proxied_app_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["published"]; ok {
		urlParams.Set("published", fmt.Sprintf("%v", val))
	}
	if val, ok := args["qn"]; ok {
		urlParams.Set("qn", fmt.Sprintf("%v", val))
	}
	if val, ok := args["spherical_metadata"]; ok {
		urlParams.Set("spherical_metadata", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sponsor_id"]; ok {
		urlParams.Set("sponsor_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sponsor_relationship"]; ok {
		urlParams.Set("sponsor_relationship", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tags"]; ok {
		urlParams.Set("tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["target_id"]; ok {
		urlParams.Set("target_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["targeting"]; ok {
		urlParams.Set("targeting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["time_since_original_post"]; ok {
		urlParams.Set("time_since_original_post", fmt.Sprintf("%v", val))
	}
	if val, ok := args["uid"]; ok {
		urlParams.Set("uid", fmt.Sprintf("%v", val))
	}
	if val, ok := args["unpublished_content_type"]; ok {
		urlParams.Set("unpublished_content_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["url"]; ok {
		urlParams.Set("url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["user_selected_tags"]; ok {
		urlParams.Set("user_selected_tags", fmt.Sprintf("%v", val))
	}
	if val, ok := args["vault_image_id"]; ok {
		urlParams.Set("vault_image_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_group_get_picture GET picture for Group
func (c *GroupClient) Facebook_group_get_picture(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "picture")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["height"]; ok {
		urlParams.Set("height", fmt.Sprintf("%v", val))
	}
	if val, ok := args["redirect"]; ok {
		urlParams.Set("redirect", fmt.Sprintf("%v", val))
	}
	if val, ok := args["type"]; ok {
		urlParams.Set("type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["width"]; ok {
		urlParams.Set("width", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_group_get_videos GET videos for Group
func (c *GroupClient) Facebook_group_get_videos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "videos")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["type"]; ok {
		urlParams.Set("type", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_group_post_videos POST videos for Group
func (c *GroupClient) Facebook_group_post_videos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "videos")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["application_id"]; ok {
		urlParams.Set("application_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["asked_fun_fact_prompt_id"]; ok {
		urlParams.Set("asked_fun_fact_prompt_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["audio_story_wave_animation_handle"]; ok {
		urlParams.Set("audio_story_wave_animation_handle", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_entry_picker"]; ok {
		urlParams.Set("composer_entry_picker", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_entry_point"]; ok {
		urlParams.Set("composer_entry_point", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_entry_time"]; ok {
		urlParams.Set("composer_entry_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_session_events_log"]; ok {
		urlParams.Set("composer_session_events_log", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_session_id"]; ok {
		urlParams.Set("composer_session_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_source_surface"]; ok {
		urlParams.Set("composer_source_surface", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_type"]; ok {
		urlParams.Set("composer_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["container_type"]; ok {
		urlParams.Set("container_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["content_category"]; ok {
		urlParams.Set("content_category", fmt.Sprintf("%v", val))
	}
	if val, ok := args["creative_tools"]; ok {
		urlParams.Set("creative_tools", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["embeddable"]; ok {
		urlParams.Set("embeddable", fmt.Sprintf("%v", val))
	}
	if val, ok := args["end_offset"]; ok {
		urlParams.Set("end_offset", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fbuploader_video_file_chunk"]; ok {
		urlParams.Set("fbuploader_video_file_chunk", fmt.Sprintf("%v", val))
	}
	if val, ok := args["file_size"]; ok {
		urlParams.Set("file_size", fmt.Sprintf("%v", val))
	}
	if val, ok := args["file_url"]; ok {
		urlParams.Set("file_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fisheye_video_cropped"]; ok {
		urlParams.Set("fisheye_video_cropped", fmt.Sprintf("%v", val))
	}
	if val, ok := args["formatting"]; ok {
		urlParams.Set("formatting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fov"]; ok {
		urlParams.Set("fov", fmt.Sprintf("%v", val))
	}
	if val, ok := args["front_z_rotation"]; ok {
		urlParams.Set("front_z_rotation", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fun_fact_prompt_id"]; ok {
		urlParams.Set("fun_fact_prompt_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fun_fact_toastee_id"]; ok {
		urlParams.Set("fun_fact_toastee_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["guide"]; ok {
		urlParams.Set("guide", fmt.Sprintf("%v", val))
	}
	if val, ok := args["guide_enabled"]; ok {
		urlParams.Set("guide_enabled", fmt.Sprintf("%v", val))
	}
	if val, ok := args["initial_heading"]; ok {
		urlParams.Set("initial_heading", fmt.Sprintf("%v", val))
	}
	if val, ok := args["initial_pitch"]; ok {
		urlParams.Set("initial_pitch", fmt.Sprintf("%v", val))
	}
	if val, ok := args["instant_game_entry_point_data"]; ok {
		urlParams.Set("instant_game_entry_point_data", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_boost_intended"]; ok {
		urlParams.Set("is_boost_intended", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_explicit_share"]; ok {
		urlParams.Set("is_explicit_share", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_group_linking_post"]; ok {
		urlParams.Set("is_group_linking_post", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_partnership_ad"]; ok {
		urlParams.Set("is_partnership_ad", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_voice_clip"]; ok {
		urlParams.Set("is_voice_clip", fmt.Sprintf("%v", val))
	}
	if val, ok := args["location_source_id"]; ok {
		urlParams.Set("location_source_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["manual_privacy"]; ok {
		urlParams.Set("manual_privacy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_action_type_id"]; ok {
		urlParams.Set("og_action_type_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_icon_id"]; ok {
		urlParams.Set("og_icon_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_object_id"]; ok {
		urlParams.Set("og_object_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_phrase"]; ok {
		urlParams.Set("og_phrase", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_suggestion_mechanism"]; ok {
		urlParams.Set("og_suggestion_mechanism", fmt.Sprintf("%v", val))
	}
	if val, ok := args["original_fov"]; ok {
		urlParams.Set("original_fov", fmt.Sprintf("%v", val))
	}
	if val, ok := args["original_projection_type"]; ok {
		urlParams.Set("original_projection_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["partnership_ad_ad_code"]; ok {
		urlParams.Set("partnership_ad_ad_code", fmt.Sprintf("%v", val))
	}
	if val, ok := args["publish_event_id"]; ok {
		urlParams.Set("publish_event_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["published"]; ok {
		urlParams.Set("published", fmt.Sprintf("%v", val))
	}
	if val, ok := args["referenced_sticker_id"]; ok {
		urlParams.Set("referenced_sticker_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["replace_video_id"]; ok {
		urlParams.Set("replace_video_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["scheduled_publish_time"]; ok {
		urlParams.Set("scheduled_publish_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["slideshow_spec"]; ok {
		urlParams.Set("slideshow_spec", fmt.Sprintf("%v", val))
	}
	if val, ok := args["source"]; ok {
		urlParams.Set("source", fmt.Sprintf("%v", val))
	}
	if val, ok := args["source_instagram_media_id"]; ok {
		urlParams.Set("source_instagram_media_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["spherical"]; ok {
		urlParams.Set("spherical", fmt.Sprintf("%v", val))
	}
	if val, ok := args["start_offset"]; ok {
		urlParams.Set("start_offset", fmt.Sprintf("%v", val))
	}
	if val, ok := args["swap_mode"]; ok {
		urlParams.Set("swap_mode", fmt.Sprintf("%v", val))
	}
	if val, ok := args["text_format_metadata"]; ok {
		urlParams.Set("text_format_metadata", fmt.Sprintf("%v", val))
	}
	if val, ok := args["thumb"]; ok {
		urlParams.Set("thumb", fmt.Sprintf("%v", val))
	}
	if val, ok := args["time_since_original_post"]; ok {
		urlParams.Set("time_since_original_post", fmt.Sprintf("%v", val))
	}
	if val, ok := args["title"]; ok {
		urlParams.Set("title", fmt.Sprintf("%v", val))
	}
	if val, ok := args["transcode_setting_properties"]; ok {
		urlParams.Set("transcode_setting_properties", fmt.Sprintf("%v", val))
	}
	if val, ok := args["unpublished_content_type"]; ok {
		urlParams.Set("unpublished_content_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["upload_phase"]; ok {
		urlParams.Set("upload_phase", fmt.Sprintf("%v", val))
	}
	if val, ok := args["upload_session_id"]; ok {
		urlParams.Set("upload_session_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["upload_setting_properties"]; ok {
		urlParams.Set("upload_setting_properties", fmt.Sprintf("%v", val))
	}
	if val, ok := args["video_file_chunk"]; ok {
		urlParams.Set("video_file_chunk", fmt.Sprintf("%v", val))
	}
	if val, ok := args["video_id_original"]; ok {
		urlParams.Set("video_id_original", fmt.Sprintf("%v", val))
	}
	if val, ok := args["video_start_time_ms"]; ok {
		urlParams.Set("video_start_time_ms", fmt.Sprintf("%v", val))
	}
	if val, ok := args["waterfall_id"]; ok {
		urlParams.Set("waterfall_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_group_get_ GET  for Group
func (c *GroupClient) Facebook_group_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["icon_size"]; ok {
		urlParams.Set("icon_size", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_group_post_ POST  for Group
func (c *GroupClient) Facebook_group_post_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["cover"]; ok {
		urlParams.Set("cover", fmt.Sprintf("%v", val))
	}
	if val, ok := args["cover_url"]; ok {
		urlParams.Set("cover_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["focus_x"]; ok {
		urlParams.Set("focus_x", fmt.Sprintf("%v", val))
	}
	if val, ok := args["focus_y"]; ok {
		urlParams.Set("focus_y", fmt.Sprintf("%v", val))
	}
	if val, ok := args["group_icon"]; ok {
		urlParams.Set("group_icon", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_official_group"]; ok {
		urlParams.Set("is_official_group", fmt.Sprintf("%v", val))
	}
	if val, ok := args["join_setting"]; ok {
		urlParams.Set("join_setting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["no_feed_story"]; ok {
		urlParams.Set("no_feed_story", fmt.Sprintf("%v", val))
	}
	if val, ok := args["offset_y"]; ok {
		urlParams.Set("offset_y", fmt.Sprintf("%v", val))
	}
	if val, ok := args["post_permissions"]; ok {
		urlParams.Set("post_permissions", fmt.Sprintf("%v", val))
	}
	if val, ok := args["post_requires_admin_approval"]; ok {
		urlParams.Set("post_requires_admin_approval", fmt.Sprintf("%v", val))
	}
	if val, ok := args["privacy"]; ok {
		urlParams.Set("privacy", fmt.Sprintf("%v", val))
	}
	if val, ok := args["purpose"]; ok {
		urlParams.Set("purpose", fmt.Sprintf("%v", val))
	}
	if val, ok := args["update_view_time"]; ok {
		urlParams.Set("update_view_time", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

