// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// IGAccessTokenForIGOnlyAPIClient provides methods for IGAccessTokenForIGOnlyAPI operations
type IGAccessTokenForIGOnlyAPIClient struct {
	accessToken string
}

// NewIGAccessTokenForIGOnlyAPIClient creates a new IGAccessTokenForIGOnlyAPI client
func NewIGAccessTokenForIGOnlyAPIClient(accessToken string) *IGAccessTokenForIGOnlyAPIClient {
	return &IGAccessTokenForIGOnlyAPIClient{
		accessToken: accessToken,
	}
}

// igaccesstokenforigonlyapi_get_ GET  for IGAccessTokenForIGOnlyAPI
func (c *IGAccessTokenForIGOnlyAPIClient) Igaccesstokenforigonlyapi_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	access_token, ok := args["access_token"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: access_token")
	}
	_ = access_token // Suppress unused variable warning
	client_secret, ok := args["client_secret"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: client_secret")
	}
	_ = client_secret // Suppress unused variable warning
	grant_type, ok := args["grant_type"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: grant_type")
	}
	_ = grant_type // Suppress unused variable warning

	// Build request URL and parameters
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")

	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["access_token"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("access_token", fmt.Sprintf("%v", val))

	}
	if val, ok := args["client_secret"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("client_secret", fmt.Sprintf("%v", val))

	}
	if val, ok := args["grant_type"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("grant_type", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
