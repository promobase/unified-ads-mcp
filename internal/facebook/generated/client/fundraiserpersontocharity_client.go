// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// FundraiserPersonToCharityClient provides methods for FundraiserPersonToCharity operations
type FundraiserPersonToCharityClient struct {
	accessToken string
}

// NewFundraiserPersonToCharityClient creates a new FundraiserPersonToCharity client
func NewFundraiserPersonToCharityClient(accessToken string) *FundraiserPersonToCharityClient {
	return &FundraiserPersonToCharityClient{
		accessToken: accessToken,
	}
}

// facebook_fundraiserpersontocharity_get_donations GET donations for FundraiserPersonToCharity
func (c *FundraiserPersonToCharityClient) Facebook_fundraiserpersontocharity_get_donations(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "donations")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_fundraiserpersontocharity_post_end_fundraiser POST end_fundraiser for FundraiserPersonToCharity
func (c *FundraiserPersonToCharityClient) Facebook_fundraiserpersontocharity_post_end_fundraiser(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "end_fundraiser")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_fundraiserpersontocharity_get_external_donations GET external_donations for FundraiserPersonToCharity
func (c *FundraiserPersonToCharityClient) Facebook_fundraiserpersontocharity_get_external_donations(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "external_donations")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_fundraiserpersontocharity_post_external_donations POST external_donations for FundraiserPersonToCharity
func (c *FundraiserPersonToCharityClient) Facebook_fundraiserpersontocharity_post_external_donations(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	amount_received, ok := args["amount_received"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: amount_received")
	}
	_ = amount_received // Suppress unused variable warning
	currency, ok := args["currency"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: currency")
	}
	_ = currency // Suppress unused variable warning
	donation_id_hash, ok := args["donation_id_hash"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: donation_id_hash")
	}
	_ = donation_id_hash // Suppress unused variable warning
	donation_time, ok := args["donation_time"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: donation_time")
	}
	_ = donation_time // Suppress unused variable warning
	donor_id_hash, ok := args["donor_id_hash"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: donor_id_hash")
	}
	_ = donor_id_hash // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "external_donations")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["amount_received"]; ok {
		urlParams.Set("amount_received", fmt.Sprintf("%v", val))
	}
	if val, ok := args["currency"]; ok {
		urlParams.Set("currency", fmt.Sprintf("%v", val))
	}
	if val, ok := args["donation_id_hash"]; ok {
		urlParams.Set("donation_id_hash", fmt.Sprintf("%v", val))
	}
	if val, ok := args["donation_time"]; ok {
		urlParams.Set("donation_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["donor_id_hash"]; ok {
		urlParams.Set("donor_id_hash", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_fundraiserpersontocharity_get_ GET  for FundraiserPersonToCharity
func (c *FundraiserPersonToCharityClient) Facebook_fundraiserpersontocharity_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_fundraiserpersontocharity_post_ POST  for FundraiserPersonToCharity
func (c *FundraiserPersonToCharityClient) Facebook_fundraiserpersontocharity_post_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["end_time"]; ok {
		urlParams.Set("end_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["external_event_name"]; ok {
		urlParams.Set("external_event_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["external_event_start_time"]; ok {
		urlParams.Set("external_event_start_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["external_event_uri"]; ok {
		urlParams.Set("external_event_uri", fmt.Sprintf("%v", val))
	}
	if val, ok := args["external_fundraiser_uri"]; ok {
		urlParams.Set("external_fundraiser_uri", fmt.Sprintf("%v", val))
	}
	if val, ok := args["external_id"]; ok {
		urlParams.Set("external_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["goal_amount"]; ok {
		urlParams.Set("goal_amount", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
