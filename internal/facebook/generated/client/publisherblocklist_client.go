// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// PublisherBlockListClient represents a client for PublisherBlockList operations
type PublisherBlockListClient struct {
	accessToken string
}

// NewPublisherBlockListClient creates a new PublisherBlockList client
func NewPublisherBlockListClient(accessToken string) *PublisherBlockListClient {
	return &PublisherBlockListClient{
		accessToken: accessToken,
	}
}


// Publisherblocklist_post_append_publisher_urls performs POST append_publisher_urls for PublisherBlockList
func (c *PublisherBlockListClient) Publisherblocklist_post_append_publisher_urls(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/append_publisher_urls")
	
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("params", fmt.Sprintf("%v", val))
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// Publisherblocklist_get_paged_web_publishers performs GET paged_web_publishers for PublisherBlockList
func (c *PublisherBlockListClient) Publisherblocklist_get_paged_web_publishers(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/paged_web_publishers")
	
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("params", fmt.Sprintf("%v", val))
		
	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("fields", fmt.Sprintf("%v", val))
		
	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("limit", fmt.Sprintf("%v", val))
		
	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("after", fmt.Sprintf("%v", val))
		
	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("before", fmt.Sprintf("%v", val))
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// Publisherblocklist_delete_ performs DELETE  for PublisherBlockList
func (c *PublisherBlockListClient) Publisherblocklist_delete_(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")
	
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// Publisherblocklist_get_ performs GET  for PublisherBlockList
func (c *PublisherBlockListClient) Publisherblocklist_get_(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")
	
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("params", fmt.Sprintf("%v", val))
		
	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("fields", fmt.Sprintf("%v", val))
		
	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("limit", fmt.Sprintf("%v", val))
		
	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("after", fmt.Sprintf("%v", val))
		
	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("before", fmt.Sprintf("%v", val))
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// Publisherblocklist_post_ performs POST  for PublisherBlockList
func (c *PublisherBlockListClient) Publisherblocklist_post_(args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")
	
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("params", fmt.Sprintf("%v", val))
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

