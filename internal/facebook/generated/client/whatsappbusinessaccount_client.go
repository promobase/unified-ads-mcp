// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// WhatsAppBusinessAccountClient provides methods for WhatsAppBusinessAccount operations
type WhatsAppBusinessAccountClient struct {
	accessToken string
}

// NewWhatsAppBusinessAccountClient creates a new WhatsAppBusinessAccount client
func NewWhatsAppBusinessAccountClient(accessToken string) *WhatsAppBusinessAccountClient {
	return &WhatsAppBusinessAccountClient{
		accessToken: accessToken,
	}
}

// facebook_whatsappbusinessaccount_get_activities GET activities for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_get_activities(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "activities")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_delete_assigned_users DELETE assigned_users for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_delete_assigned_users(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	user, ok := args["user"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: user")
	}
	_ = user // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "assigned_users")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["user"]; ok {
		urlParams.Set("user", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_get_assigned_users GET assigned_users for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_get_assigned_users(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	business, ok := args["business"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: business")
	}
	_ = business // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "assigned_users")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["business"]; ok {
		urlParams.Set("business", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_post_assigned_users POST assigned_users for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_post_assigned_users(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	tasks, ok := args["tasks"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: tasks")
	}
	_ = tasks // Suppress unused variable warning
	user, ok := args["user"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: user")
	}
	_ = user // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "assigned_users")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["tasks"]; ok {
		urlParams.Set("tasks", fmt.Sprintf("%v", val))
	}
	if val, ok := args["user"]; ok {
		urlParams.Set("user", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_get_audiences GET audiences for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_get_audiences(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "audiences")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_get_call_analytics GET call_analytics for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_get_call_analytics(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	end, ok := args["end"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: end")
	}
	_ = end // Suppress unused variable warning
	granularity, ok := args["granularity"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: granularity")
	}
	_ = granularity // Suppress unused variable warning
	start, ok := args["start"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: start")
	}
	_ = start // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "call_analytics")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["country_codes"]; ok {
		urlParams.Set("country_codes", fmt.Sprintf("%v", val))
	}
	if val, ok := args["dimensions"]; ok {
		urlParams.Set("dimensions", fmt.Sprintf("%v", val))
	}
	if val, ok := args["directions"]; ok {
		urlParams.Set("directions", fmt.Sprintf("%v", val))
	}
	if val, ok := args["end"]; ok {
		urlParams.Set("end", fmt.Sprintf("%v", val))
	}
	if val, ok := args["granularity"]; ok {
		urlParams.Set("granularity", fmt.Sprintf("%v", val))
	}
	if val, ok := args["metric_types"]; ok {
		urlParams.Set("metric_types", fmt.Sprintf("%v", val))
	}
	if val, ok := args["phone_numbers"]; ok {
		urlParams.Set("phone_numbers", fmt.Sprintf("%v", val))
	}
	if val, ok := args["start"]; ok {
		urlParams.Set("start", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_get_conversation_analytics GET conversation_analytics for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_get_conversation_analytics(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	end, ok := args["end"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: end")
	}
	_ = end // Suppress unused variable warning
	granularity, ok := args["granularity"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: granularity")
	}
	_ = granularity // Suppress unused variable warning
	start, ok := args["start"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: start")
	}
	_ = start // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "conversation_analytics")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["conversation_categories"]; ok {
		urlParams.Set("conversation_categories", fmt.Sprintf("%v", val))
	}
	if val, ok := args["conversation_directions"]; ok {
		urlParams.Set("conversation_directions", fmt.Sprintf("%v", val))
	}
	if val, ok := args["conversation_types"]; ok {
		urlParams.Set("conversation_types", fmt.Sprintf("%v", val))
	}
	if val, ok := args["country_codes"]; ok {
		urlParams.Set("country_codes", fmt.Sprintf("%v", val))
	}
	if val, ok := args["dimensions"]; ok {
		urlParams.Set("dimensions", fmt.Sprintf("%v", val))
	}
	if val, ok := args["end"]; ok {
		urlParams.Set("end", fmt.Sprintf("%v", val))
	}
	if val, ok := args["granularity"]; ok {
		urlParams.Set("granularity", fmt.Sprintf("%v", val))
	}
	if val, ok := args["metric_types"]; ok {
		urlParams.Set("metric_types", fmt.Sprintf("%v", val))
	}
	if val, ok := args["phone_numbers"]; ok {
		urlParams.Set("phone_numbers", fmt.Sprintf("%v", val))
	}
	if val, ok := args["start"]; ok {
		urlParams.Set("start", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_get_dataset GET dataset for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_get_dataset(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "dataset")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_post_dataset POST dataset for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_post_dataset(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "dataset")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["dataset_name"]; ok {
		urlParams.Set("dataset_name", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_get_flows GET flows for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_get_flows(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "flows")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_post_flows POST flows for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_post_flows(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	categories, ok := args["categories"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: categories")
	}
	_ = categories // Suppress unused variable warning
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "flows")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["categories"]; ok {
		urlParams.Set("categories", fmt.Sprintf("%v", val))
	}
	if val, ok := args["clone_flow_id"]; ok {
		urlParams.Set("clone_flow_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["endpoint_uri"]; ok {
		urlParams.Set("endpoint_uri", fmt.Sprintf("%v", val))
	}
	if val, ok := args["flow_json"]; ok {
		urlParams.Set("flow_json", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["publish"]; ok {
		urlParams.Set("publish", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_post_generate_payment_configuration_oauth_link POST generate_payment_configuration_oauth_link for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_post_generate_payment_configuration_oauth_link(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	configuration_name, ok := args["configuration_name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: configuration_name")
	}
	_ = configuration_name // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "generate_payment_configuration_oauth_link")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["configuration_name"]; ok {
		urlParams.Set("configuration_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["redirect_url"]; ok {
		urlParams.Set("redirect_url", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_get_message_campaigns GET message_campaigns for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_get_message_campaigns(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "message_campaigns")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_get_message_template_previews GET message_template_previews for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_get_message_template_previews(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	category, ok := args["category"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: category")
	}
	_ = category // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "message_template_previews")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["add_security_recommendation"]; ok {
		urlParams.Set("add_security_recommendation", fmt.Sprintf("%v", val))
	}
	if val, ok := args["button_types"]; ok {
		urlParams.Set("button_types", fmt.Sprintf("%v", val))
	}
	if val, ok := args["category"]; ok {
		urlParams.Set("category", fmt.Sprintf("%v", val))
	}
	if val, ok := args["code_expiration_minutes"]; ok {
		urlParams.Set("code_expiration_minutes", fmt.Sprintf("%v", val))
	}
	if val, ok := args["languages"]; ok {
		urlParams.Set("languages", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_delete_message_templates DELETE message_templates for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_delete_message_templates(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "message_templates")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["hsm_id"]; ok {
		urlParams.Set("hsm_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_get_message_templates GET message_templates for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_get_message_templates(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "message_templates")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["category"]; ok {
		urlParams.Set("category", fmt.Sprintf("%v", val))
	}
	if val, ok := args["content"]; ok {
		urlParams.Set("content", fmt.Sprintf("%v", val))
	}
	if val, ok := args["language"]; ok {
		urlParams.Set("language", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name_or_content"]; ok {
		urlParams.Set("name_or_content", fmt.Sprintf("%v", val))
	}
	if val, ok := args["quality_score"]; ok {
		urlParams.Set("quality_score", fmt.Sprintf("%v", val))
	}
	if val, ok := args["status"]; ok {
		urlParams.Set("status", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_post_message_templates POST message_templates for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_post_message_templates(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	category, ok := args["category"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: category")
	}
	_ = category // Suppress unused variable warning
	language, ok := args["language"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: language")
	}
	_ = language // Suppress unused variable warning
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "message_templates")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["allow_category_change"]; ok {
		urlParams.Set("allow_category_change", fmt.Sprintf("%v", val))
	}
	if val, ok := args["category"]; ok {
		urlParams.Set("category", fmt.Sprintf("%v", val))
	}
	if val, ok := args["components"]; ok {
		urlParams.Set("components", fmt.Sprintf("%v", val))
	}
	if val, ok := args["cta_url_link_tracking_opted_out"]; ok {
		urlParams.Set("cta_url_link_tracking_opted_out", fmt.Sprintf("%v", val))
	}
	if val, ok := args["degrees_of_freedom_spec"]; ok {
		urlParams.Set("degrees_of_freedom_spec", fmt.Sprintf("%v", val))
	}
	if val, ok := args["display_format"]; ok {
		urlParams.Set("display_format", fmt.Sprintf("%v", val))
	}
	if val, ok := args["language"]; ok {
		urlParams.Set("language", fmt.Sprintf("%v", val))
	}
	if val, ok := args["library_template_body_inputs"]; ok {
		urlParams.Set("library_template_body_inputs", fmt.Sprintf("%v", val))
	}
	if val, ok := args["library_template_button_inputs"]; ok {
		urlParams.Set("library_template_button_inputs", fmt.Sprintf("%v", val))
	}
	if val, ok := args["library_template_name"]; ok {
		urlParams.Set("library_template_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["message_send_ttl_seconds"]; ok {
		urlParams.Set("message_send_ttl_seconds", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["parameter_format"]; ok {
		urlParams.Set("parameter_format", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sub_category"]; ok {
		urlParams.Set("sub_category", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_post_migrate_flows POST migrate_flows for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_post_migrate_flows(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	source_waba_id, ok := args["source_waba_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: source_waba_id")
	}
	_ = source_waba_id // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "migrate_flows")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["source_flow_names"]; ok {
		urlParams.Set("source_flow_names", fmt.Sprintf("%v", val))
	}
	if val, ok := args["source_waba_id"]; ok {
		urlParams.Set("source_waba_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_post_migrate_message_templates POST migrate_message_templates for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_post_migrate_message_templates(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	source_waba_id, ok := args["source_waba_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: source_waba_id")
	}
	_ = source_waba_id // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "migrate_message_templates")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["page_number"]; ok {
		urlParams.Set("page_number", fmt.Sprintf("%v", val))
	}
	if val, ok := args["source_waba_id"]; ok {
		urlParams.Set("source_waba_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_delete_payment_configuration DELETE payment_configuration for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_delete_payment_configuration(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	configuration_name, ok := args["configuration_name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: configuration_name")
	}
	_ = configuration_name // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "payment_configuration")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["configuration_name"]; ok {
		urlParams.Set("configuration_name", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_get_payment_configuration GET payment_configuration for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_get_payment_configuration(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	configuration_name, ok := args["configuration_name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: configuration_name")
	}
	_ = configuration_name // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "payment_configuration")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["configuration_name"]; ok {
		urlParams.Set("configuration_name", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_post_payment_configuration POST payment_configuration for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_post_payment_configuration(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	configuration_name, ok := args["configuration_name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: configuration_name")
	}
	_ = configuration_name // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "payment_configuration")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["configuration_name"]; ok {
		urlParams.Set("configuration_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["data_endpoint_url"]; ok {
		urlParams.Set("data_endpoint_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["merchant_category_code"]; ok {
		urlParams.Set("merchant_category_code", fmt.Sprintf("%v", val))
	}
	if val, ok := args["merchant_vpa"]; ok {
		urlParams.Set("merchant_vpa", fmt.Sprintf("%v", val))
	}
	if val, ok := args["provider_name"]; ok {
		urlParams.Set("provider_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["purpose_code"]; ok {
		urlParams.Set("purpose_code", fmt.Sprintf("%v", val))
	}
	if val, ok := args["redirect_url"]; ok {
		urlParams.Set("redirect_url", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_get_payment_configurations GET payment_configurations for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_get_payment_configurations(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "payment_configurations")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_get_phone_numbers GET phone_numbers for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_get_phone_numbers(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "phone_numbers")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_post_phone_numbers POST phone_numbers for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_post_phone_numbers(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "phone_numbers")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["cc"]; ok {
		urlParams.Set("cc", fmt.Sprintf("%v", val))
	}
	if val, ok := args["migrate_phone_number"]; ok {
		urlParams.Set("migrate_phone_number", fmt.Sprintf("%v", val))
	}
	if val, ok := args["phone_number"]; ok {
		urlParams.Set("phone_number", fmt.Sprintf("%v", val))
	}
	if val, ok := args["preverified_id"]; ok {
		urlParams.Set("preverified_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["verified_name"]; ok {
		urlParams.Set("verified_name", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_get_pricing_analytics GET pricing_analytics for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_get_pricing_analytics(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	end, ok := args["end"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: end")
	}
	_ = end // Suppress unused variable warning
	granularity, ok := args["granularity"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: granularity")
	}
	_ = granularity // Suppress unused variable warning
	start, ok := args["start"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: start")
	}
	_ = start // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "pricing_analytics")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["country_codes"]; ok {
		urlParams.Set("country_codes", fmt.Sprintf("%v", val))
	}
	if val, ok := args["dimensions"]; ok {
		urlParams.Set("dimensions", fmt.Sprintf("%v", val))
	}
	if val, ok := args["end"]; ok {
		urlParams.Set("end", fmt.Sprintf("%v", val))
	}
	if val, ok := args["granularity"]; ok {
		urlParams.Set("granularity", fmt.Sprintf("%v", val))
	}
	if val, ok := args["metric_types"]; ok {
		urlParams.Set("metric_types", fmt.Sprintf("%v", val))
	}
	if val, ok := args["phone_numbers"]; ok {
		urlParams.Set("phone_numbers", fmt.Sprintf("%v", val))
	}
	if val, ok := args["pricing_categories"]; ok {
		urlParams.Set("pricing_categories", fmt.Sprintf("%v", val))
	}
	if val, ok := args["pricing_types"]; ok {
		urlParams.Set("pricing_types", fmt.Sprintf("%v", val))
	}
	if val, ok := args["start"]; ok {
		urlParams.Set("start", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tiers"]; ok {
		urlParams.Set("tiers", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_delete_product_catalogs DELETE product_catalogs for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_delete_product_catalogs(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	catalog_id, ok := args["catalog_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: catalog_id")
	}
	_ = catalog_id // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "product_catalogs")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["catalog_id"]; ok {
		urlParams.Set("catalog_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_get_product_catalogs GET product_catalogs for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_get_product_catalogs(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "product_catalogs")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_post_product_catalogs POST product_catalogs for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_post_product_catalogs(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	catalog_id, ok := args["catalog_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: catalog_id")
	}
	_ = catalog_id // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "product_catalogs")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["catalog_id"]; ok {
		urlParams.Set("catalog_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_get_schedules GET schedules for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_get_schedules(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "schedules")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_post_set_obo_mobility_intent POST set_obo_mobility_intent for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_post_set_obo_mobility_intent(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "set_obo_mobility_intent")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["solution_id"]; ok {
		urlParams.Set("solution_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_post_set_solution_migration_intent POST set_solution_migration_intent for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_post_set_solution_migration_intent(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "set_solution_migration_intent")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["app_id"]; ok {
		urlParams.Set("app_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["solution_id"]; ok {
		urlParams.Set("solution_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_get_solutions GET solutions for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_get_solutions(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "solutions")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_delete_subscribed_apps DELETE subscribed_apps for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_delete_subscribed_apps(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "subscribed_apps")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_get_subscribed_apps GET subscribed_apps for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_get_subscribed_apps(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "subscribed_apps")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_post_subscribed_apps POST subscribed_apps for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_post_subscribed_apps(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "subscribed_apps")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["override_callback_uri"]; ok {
		urlParams.Set("override_callback_uri", fmt.Sprintf("%v", val))
	}
	if val, ok := args["verify_token"]; ok {
		urlParams.Set("verify_token", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_get_template_analytics GET template_analytics for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_get_template_analytics(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	end, ok := args["end"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: end")
	}
	_ = end // Suppress unused variable warning
	granularity, ok := args["granularity"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: granularity")
	}
	_ = granularity // Suppress unused variable warning
	start, ok := args["start"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: start")
	}
	_ = start // Suppress unused variable warning
	template_ids, ok := args["template_ids"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: template_ids")
	}
	_ = template_ids // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "template_analytics")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["end"]; ok {
		urlParams.Set("end", fmt.Sprintf("%v", val))
	}
	if val, ok := args["granularity"]; ok {
		urlParams.Set("granularity", fmt.Sprintf("%v", val))
	}
	if val, ok := args["metric_types"]; ok {
		urlParams.Set("metric_types", fmt.Sprintf("%v", val))
	}
	if val, ok := args["product_type"]; ok {
		urlParams.Set("product_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["start"]; ok {
		urlParams.Set("start", fmt.Sprintf("%v", val))
	}
	if val, ok := args["template_ids"]; ok {
		urlParams.Set("template_ids", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_get_template_group_analytics GET template_group_analytics for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_get_template_group_analytics(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	end, ok := args["end"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: end")
	}
	_ = end // Suppress unused variable warning
	granularity, ok := args["granularity"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: granularity")
	}
	_ = granularity // Suppress unused variable warning
	start, ok := args["start"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: start")
	}
	_ = start // Suppress unused variable warning
	template_group_ids, ok := args["template_group_ids"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: template_group_ids")
	}
	_ = template_group_ids // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "template_group_analytics")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["end"]; ok {
		urlParams.Set("end", fmt.Sprintf("%v", val))
	}
	if val, ok := args["granularity"]; ok {
		urlParams.Set("granularity", fmt.Sprintf("%v", val))
	}
	if val, ok := args["metric_types"]; ok {
		urlParams.Set("metric_types", fmt.Sprintf("%v", val))
	}
	if val, ok := args["start"]; ok {
		urlParams.Set("start", fmt.Sprintf("%v", val))
	}
	if val, ok := args["template_group_ids"]; ok {
		urlParams.Set("template_group_ids", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_get_template_groups GET template_groups for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_get_template_groups(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "template_groups")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_post_template_groups POST template_groups for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_post_template_groups(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	description, ok := args["description"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: description")
	}
	_ = description // Suppress unused variable warning
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning
	whatsapp_business_templates, ok := args["whatsapp_business_templates"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: whatsapp_business_templates")
	}
	_ = whatsapp_business_templates // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "template_groups")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["whatsapp_business_templates"]; ok {
		urlParams.Set("whatsapp_business_templates", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_get_template_performance_metrics GET template_performance_metrics for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_get_template_performance_metrics(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "template_performance_metrics")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["template_id"]; ok {
		urlParams.Set("template_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_post_upsert_message_templates POST upsert_message_templates for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_post_upsert_message_templates(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	category, ok := args["category"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: category")
	}
	_ = category // Suppress unused variable warning
	components, ok := args["components"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: components")
	}
	_ = components // Suppress unused variable warning
	languages, ok := args["languages"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: languages")
	}
	_ = languages // Suppress unused variable warning
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "upsert_message_templates")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["category"]; ok {
		urlParams.Set("category", fmt.Sprintf("%v", val))
	}
	if val, ok := args["components"]; ok {
		urlParams.Set("components", fmt.Sprintf("%v", val))
	}
	if val, ok := args["languages"]; ok {
		urlParams.Set("languages", fmt.Sprintf("%v", val))
	}
	if val, ok := args["message_send_ttl_seconds"]; ok {
		urlParams.Set("message_send_ttl_seconds", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_get_welcome_message_sequences GET welcome_message_sequences for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_get_welcome_message_sequences(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "welcome_message_sequences")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["app_id"]; ok {
		urlParams.Set("app_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sequence_id"]; ok {
		urlParams.Set("sequence_id", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_get_ GET  for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

// facebook_whatsappbusinessaccount_post_ POST  for WhatsAppBusinessAccount
func (c *WhatsAppBusinessAccountClient) Facebook_whatsappbusinessaccount_post_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters

	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["is_enabled_for_insights"]; ok {
		urlParams.Set("is_enabled_for_insights", fmt.Sprintf("%v", val))
	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
