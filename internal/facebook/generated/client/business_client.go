// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// BusinessClient provides methods for Business operations
type BusinessClient struct {
	accessToken string
}

// NewBusinessClient creates a new Business client
func NewBusinessClient(accessToken string) *BusinessClient {
	return &BusinessClient{
		accessToken: accessToken,
	}
}


// business_post_access_token POST access_token for Business
func (c *BusinessClient) Business_post_access_token(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	app_id, ok := args["app_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: app_id")
	}
	_ = app_id // Suppress unused variable warning
	scope, ok := args["scope"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: scope")
	}
	_ = scope // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "access_token")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["app_id"]; ok {
		urlParams.Set("app_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fbe_external_business_id"]; ok {
		urlParams.Set("fbe_external_business_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["scope"]; ok {
		urlParams.Set("scope", fmt.Sprintf("%v", val))
	}
	if val, ok := args["system_user_name"]; ok {
		urlParams.Set("system_user_name", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_ad_account_infos GET ad_account_infos for Business
func (c *BusinessClient) Business_get_ad_account_infos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "ad_account_infos")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_account_id"]; ok {
		urlParams.Set("ad_account_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["parent_advertiser_id"]; ok {
		urlParams.Set("parent_advertiser_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["user_id"]; ok {
		urlParams.Set("user_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_delete_ad_accounts DELETE ad_accounts for Business
func (c *BusinessClient) Business_delete_ad_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	adaccount_id, ok := args["adaccount_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: adaccount_id")
	}
	_ = adaccount_id // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "ad_accounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["adaccount_id"]; ok {
		urlParams.Set("adaccount_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_ad_review_requests POST ad_review_requests for Business
func (c *BusinessClient) Business_post_ad_review_requests(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "ad_review_requests")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_account_ids"]; ok {
		urlParams.Set("ad_account_ids", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_ad_studies GET ad_studies for Business
func (c *BusinessClient) Business_get_ad_studies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "ad_studies")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_ad_studies POST ad_studies for Business
func (c *BusinessClient) Business_post_ad_studies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	cells, ok := args["cells"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: cells")
	}
	_ = cells // Suppress unused variable warning
	end_time, ok := args["end_time"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: end_time")
	}
	_ = end_time // Suppress unused variable warning
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning
	start_time, ok := args["start_time"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: start_time")
	}
	_ = start_time // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "ad_studies")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["cells"]; ok {
		urlParams.Set("cells", fmt.Sprintf("%v", val))
	}
	if val, ok := args["client_business"]; ok {
		urlParams.Set("client_business", fmt.Sprintf("%v", val))
	}
	if val, ok := args["confidence_level"]; ok {
		urlParams.Set("confidence_level", fmt.Sprintf("%v", val))
	}
	if val, ok := args["cooldown_start_time"]; ok {
		urlParams.Set("cooldown_start_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["end_time"]; ok {
		urlParams.Set("end_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["objectives"]; ok {
		urlParams.Set("objectives", fmt.Sprintf("%v", val))
	}
	if val, ok := args["observation_end_time"]; ok {
		urlParams.Set("observation_end_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["start_time"]; ok {
		urlParams.Set("start_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["type"]; ok {
		urlParams.Set("type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["viewers"]; ok {
		urlParams.Set("viewers", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_adaccount POST adaccount for Business
func (c *BusinessClient) Business_post_adaccount(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	currency, ok := args["currency"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: currency")
	}
	_ = currency // Suppress unused variable warning
	end_advertiser, ok := args["end_advertiser"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: end_advertiser")
	}
	_ = end_advertiser // Suppress unused variable warning
	media_agency, ok := args["media_agency"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: media_agency")
	}
	_ = media_agency // Suppress unused variable warning
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning
	partner, ok := args["partner"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: partner")
	}
	_ = partner // Suppress unused variable warning
	timezone_id, ok := args["timezone_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: timezone_id")
	}
	_ = timezone_id // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "adaccount")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_account_created_from_bm_flag"]; ok {
		urlParams.Set("ad_account_created_from_bm_flag", fmt.Sprintf("%v", val))
	}
	if val, ok := args["currency"]; ok {
		urlParams.Set("currency", fmt.Sprintf("%v", val))
	}
	if val, ok := args["end_advertiser"]; ok {
		urlParams.Set("end_advertiser", fmt.Sprintf("%v", val))
	}
	if val, ok := args["funding_id"]; ok {
		urlParams.Set("funding_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["invoice"]; ok {
		urlParams.Set("invoice", fmt.Sprintf("%v", val))
	}
	if val, ok := args["invoice_group_id"]; ok {
		urlParams.Set("invoice_group_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["invoicing_emails"]; ok {
		urlParams.Set("invoicing_emails", fmt.Sprintf("%v", val))
	}
	if val, ok := args["io"]; ok {
		urlParams.Set("io", fmt.Sprintf("%v", val))
	}
	if val, ok := args["media_agency"]; ok {
		urlParams.Set("media_agency", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["partner"]; ok {
		urlParams.Set("partner", fmt.Sprintf("%v", val))
	}
	if val, ok := args["po_number"]; ok {
		urlParams.Set("po_number", fmt.Sprintf("%v", val))
	}
	if val, ok := args["timezone_id"]; ok {
		urlParams.Set("timezone_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_add_phone_numbers POST add_phone_numbers for Business
func (c *BusinessClient) Business_post_add_phone_numbers(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	phone_number, ok := args["phone_number"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: phone_number")
	}
	_ = phone_number // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "add_phone_numbers")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["phone_number"]; ok {
		urlParams.Set("phone_number", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_adnetwork_applications POST adnetwork_applications for Business
func (c *BusinessClient) Business_post_adnetwork_applications(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "adnetwork_applications")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_adnetworkanalytics GET adnetworkanalytics for Business
func (c *BusinessClient) Business_get_adnetworkanalytics(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	metrics, ok := args["metrics"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: metrics")
	}
	_ = metrics // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "adnetworkanalytics")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["aggregation_period"]; ok {
		urlParams.Set("aggregation_period", fmt.Sprintf("%v", val))
	}
	if val, ok := args["breakdowns"]; ok {
		urlParams.Set("breakdowns", fmt.Sprintf("%v", val))
	}
	if val, ok := args["filters"]; ok {
		urlParams.Set("filters", fmt.Sprintf("%v", val))
	}
	if val, ok := args["limit"]; ok {
		urlParams.Set("limit", fmt.Sprintf("%v", val))
	}
	if val, ok := args["metrics"]; ok {
		urlParams.Set("metrics", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ordering_column"]; ok {
		urlParams.Set("ordering_column", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ordering_type"]; ok {
		urlParams.Set("ordering_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["should_include_until"]; ok {
		urlParams.Set("should_include_until", fmt.Sprintf("%v", val))
	}
	if val, ok := args["since"]; ok {
		urlParams.Set("since", fmt.Sprintf("%v", val))
	}
	if val, ok := args["until"]; ok {
		urlParams.Set("until", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_adnetworkanalytics POST adnetworkanalytics for Business
func (c *BusinessClient) Business_post_adnetworkanalytics(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	metrics, ok := args["metrics"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: metrics")
	}
	_ = metrics // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "adnetworkanalytics")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["aggregation_period"]; ok {
		urlParams.Set("aggregation_period", fmt.Sprintf("%v", val))
	}
	if val, ok := args["breakdowns"]; ok {
		urlParams.Set("breakdowns", fmt.Sprintf("%v", val))
	}
	if val, ok := args["filters"]; ok {
		urlParams.Set("filters", fmt.Sprintf("%v", val))
	}
	if val, ok := args["limit"]; ok {
		urlParams.Set("limit", fmt.Sprintf("%v", val))
	}
	if val, ok := args["metrics"]; ok {
		urlParams.Set("metrics", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ordering_column"]; ok {
		urlParams.Set("ordering_column", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ordering_type"]; ok {
		urlParams.Set("ordering_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["since"]; ok {
		urlParams.Set("since", fmt.Sprintf("%v", val))
	}
	if val, ok := args["until"]; ok {
		urlParams.Set("until", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_adnetworkanalytics_results GET adnetworkanalytics_results for Business
func (c *BusinessClient) Business_get_adnetworkanalytics_results(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "adnetworkanalytics_results")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["query_ids"]; ok {
		urlParams.Set("query_ids", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_ads_dataset GET ads_dataset for Business
func (c *BusinessClient) Business_get_ads_dataset(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "ads_dataset")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["id_filter"]; ok {
		urlParams.Set("id_filter", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name_filter"]; ok {
		urlParams.Set("name_filter", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sort_by"]; ok {
		urlParams.Set("sort_by", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_ads_dataset POST ads_dataset for Business
func (c *BusinessClient) Business_post_ads_dataset(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "ads_dataset")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_account_id"]; ok {
		urlParams.Set("ad_account_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["app_id"]; ok {
		urlParams.Set("app_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_crm"]; ok {
		urlParams.Set("is_crm", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_ads_reporting_mmm_reports GET ads_reporting_mmm_reports for Business
func (c *BusinessClient) Business_get_ads_reporting_mmm_reports(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "ads_reporting_mmm_reports")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["filtering"]; ok {
		urlParams.Set("filtering", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_ads_reporting_mmm_schedulers GET ads_reporting_mmm_schedulers for Business
func (c *BusinessClient) Business_get_ads_reporting_mmm_schedulers(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "ads_reporting_mmm_schedulers")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_adspixels GET adspixels for Business
func (c *BusinessClient) Business_get_adspixels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "adspixels")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["id_filter"]; ok {
		urlParams.Set("id_filter", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name_filter"]; ok {
		urlParams.Set("name_filter", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sort_by"]; ok {
		urlParams.Set("sort_by", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_adspixels POST adspixels for Business
func (c *BusinessClient) Business_post_adspixels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "adspixels")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["is_crm"]; ok {
		urlParams.Set("is_crm", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_delete_agencies DELETE agencies for Business
func (c *BusinessClient) Business_delete_agencies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	business, ok := args["business"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: business")
	}
	_ = business // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "agencies")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["business"]; ok {
		urlParams.Set("business", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_agencies GET agencies for Business
func (c *BusinessClient) Business_get_agencies(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "agencies")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_an_placements GET an_placements for Business
func (c *BusinessClient) Business_get_an_placements(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "an_placements")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_block_list_drafts POST block_list_drafts for Business
func (c *BusinessClient) Business_post_block_list_drafts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	publisher_urls_file, ok := args["publisher_urls_file"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: publisher_urls_file")
	}
	_ = publisher_urls_file // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "block_list_drafts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["publisher_urls_file"]; ok {
		urlParams.Set("publisher_urls_file", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_bm_review_requests POST bm_review_requests for Business
func (c *BusinessClient) Business_post_bm_review_requests(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	business_manager_ids, ok := args["business_manager_ids"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: business_manager_ids")
	}
	_ = business_manager_ids // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "bm_review_requests")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["business_manager_ids"]; ok {
		urlParams.Set("business_manager_ids", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_business_asset_groups GET business_asset_groups for Business
func (c *BusinessClient) Business_get_business_asset_groups(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "business_asset_groups")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_business_invoices GET business_invoices for Business
func (c *BusinessClient) Business_get_business_invoices(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "business_invoices")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["end_date"]; ok {
		urlParams.Set("end_date", fmt.Sprintf("%v", val))
	}
	if val, ok := args["invoice_id"]; ok {
		urlParams.Set("invoice_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["issue_end_date"]; ok {
		urlParams.Set("issue_end_date", fmt.Sprintf("%v", val))
	}
	if val, ok := args["issue_start_date"]; ok {
		urlParams.Set("issue_start_date", fmt.Sprintf("%v", val))
	}
	if val, ok := args["root_id"]; ok {
		urlParams.Set("root_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["start_date"]; ok {
		urlParams.Set("start_date", fmt.Sprintf("%v", val))
	}
	if val, ok := args["type"]; ok {
		urlParams.Set("type", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_business_users GET business_users for Business
func (c *BusinessClient) Business_get_business_users(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "business_users")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_business_users POST business_users for Business
func (c *BusinessClient) Business_post_business_users(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	email, ok := args["email"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: email")
	}
	_ = email // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "business_users")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["email"]; ok {
		urlParams.Set("email", fmt.Sprintf("%v", val))
	}
	if val, ok := args["invited_user_type"]; ok {
		urlParams.Set("invited_user_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["role"]; ok {
		urlParams.Set("role", fmt.Sprintf("%v", val))
	}
	if val, ok := args["tasks"]; ok {
		urlParams.Set("tasks", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_businessprojects GET businessprojects for Business
func (c *BusinessClient) Business_get_businessprojects(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "businessprojects")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_claim_custom_conversions POST claim_custom_conversions for Business
func (c *BusinessClient) Business_post_claim_custom_conversions(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	custom_conversion_id, ok := args["custom_conversion_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: custom_conversion_id")
	}
	_ = custom_conversion_id // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "claim_custom_conversions")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["custom_conversion_id"]; ok {
		urlParams.Set("custom_conversion_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_client_ad_accounts GET client_ad_accounts for Business
func (c *BusinessClient) Business_get_client_ad_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "client_ad_accounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["search_query"]; ok {
		urlParams.Set("search_query", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_client_apps GET client_apps for Business
func (c *BusinessClient) Business_get_client_apps(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "client_apps")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_client_apps POST client_apps for Business
func (c *BusinessClient) Business_post_client_apps(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	app_id, ok := args["app_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: app_id")
	}
	_ = app_id // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "client_apps")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["app_id"]; ok {
		urlParams.Set("app_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_client_offsite_signal_container_business_objects GET client_offsite_signal_container_business_objects for Business
func (c *BusinessClient) Business_get_client_offsite_signal_container_business_objects(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "client_offsite_signal_container_business_objects")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_client_pages GET client_pages for Business
func (c *BusinessClient) Business_get_client_pages(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "client_pages")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_client_pages POST client_pages for Business
func (c *BusinessClient) Business_post_client_pages(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	page_id, ok := args["page_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: page_id")
	}
	_ = page_id // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "client_pages")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["page_id"]; ok {
		urlParams.Set("page_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["permitted_tasks"]; ok {
		urlParams.Set("permitted_tasks", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_client_pixels GET client_pixels for Business
func (c *BusinessClient) Business_get_client_pixels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "client_pixels")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_client_product_catalogs GET client_product_catalogs for Business
func (c *BusinessClient) Business_get_client_product_catalogs(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "client_product_catalogs")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_client_whatsapp_business_accounts GET client_whatsapp_business_accounts for Business
func (c *BusinessClient) Business_get_client_whatsapp_business_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "client_whatsapp_business_accounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_delete_clients DELETE clients for Business
func (c *BusinessClient) Business_delete_clients(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	business, ok := args["business"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: business")
	}
	_ = business // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "clients")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["business"]; ok {
		urlParams.Set("business", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_clients GET clients for Business
func (c *BusinessClient) Business_get_clients(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "clients")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_collaborative_ads_collaboration_requests GET collaborative_ads_collaboration_requests for Business
func (c *BusinessClient) Business_get_collaborative_ads_collaboration_requests(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "collaborative_ads_collaboration_requests")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["status"]; ok {
		urlParams.Set("status", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_collaborative_ads_collaboration_requests POST collaborative_ads_collaboration_requests for Business
func (c *BusinessClient) Business_post_collaborative_ads_collaboration_requests(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	brands, ok := args["brands"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: brands")
	}
	_ = brands // Suppress unused variable warning
	contact_email, ok := args["contact_email"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: contact_email")
	}
	_ = contact_email // Suppress unused variable warning
	contact_first_name, ok := args["contact_first_name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: contact_first_name")
	}
	_ = contact_first_name // Suppress unused variable warning
	contact_last_name, ok := args["contact_last_name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: contact_last_name")
	}
	_ = contact_last_name // Suppress unused variable warning
	receiver_business, ok := args["receiver_business"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: receiver_business")
	}
	_ = receiver_business // Suppress unused variable warning
	requester_agency_or_brand, ok := args["requester_agency_or_brand"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: requester_agency_or_brand")
	}
	_ = requester_agency_or_brand // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "collaborative_ads_collaboration_requests")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["brands"]; ok {
		urlParams.Set("brands", fmt.Sprintf("%v", val))
	}
	if val, ok := args["contact_email"]; ok {
		urlParams.Set("contact_email", fmt.Sprintf("%v", val))
	}
	if val, ok := args["contact_first_name"]; ok {
		urlParams.Set("contact_first_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["contact_last_name"]; ok {
		urlParams.Set("contact_last_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["phone_number"]; ok {
		urlParams.Set("phone_number", fmt.Sprintf("%v", val))
	}
	if val, ok := args["receiver_business"]; ok {
		urlParams.Set("receiver_business", fmt.Sprintf("%v", val))
	}
	if val, ok := args["requester_agency_or_brand"]; ok {
		urlParams.Set("requester_agency_or_brand", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sender_client_business"]; ok {
		urlParams.Set("sender_client_business", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_collaborative_ads_suggested_partners GET collaborative_ads_suggested_partners for Business
func (c *BusinessClient) Business_get_collaborative_ads_suggested_partners(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "collaborative_ads_suggested_partners")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_commerce_merchant_settings GET commerce_merchant_settings for Business
func (c *BusinessClient) Business_get_commerce_merchant_settings(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "commerce_merchant_settings")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_cpas_business_setup_config GET cpas_business_setup_config for Business
func (c *BusinessClient) Business_get_cpas_business_setup_config(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "cpas_business_setup_config")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_cpas_business_setup_config POST cpas_business_setup_config for Business
func (c *BusinessClient) Business_post_cpas_business_setup_config(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "cpas_business_setup_config")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["accepted_collab_ads_tos"]; ok {
		urlParams.Set("accepted_collab_ads_tos", fmt.Sprintf("%v", val))
	}
	if val, ok := args["ad_accounts"]; ok {
		urlParams.Set("ad_accounts", fmt.Sprintf("%v", val))
	}
	if val, ok := args["business_capabilities_status"]; ok {
		urlParams.Set("business_capabilities_status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["capabilities_compliance_status"]; ok {
		urlParams.Set("capabilities_compliance_status", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_cpas_merchant_config GET cpas_merchant_config for Business
func (c *BusinessClient) Business_get_cpas_merchant_config(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "cpas_merchant_config")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_creative_folders POST creative_folders for Business
func (c *BusinessClient) Business_post_creative_folders(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "creative_folders")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["parent_folder_id"]; ok {
		urlParams.Set("parent_folder_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_creditcards GET creditcards for Business
func (c *BusinessClient) Business_get_creditcards(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "creditcards")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_customconversions POST customconversions for Business
func (c *BusinessClient) Business_post_customconversions(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	custom_event_type, ok := args["custom_event_type"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: custom_event_type")
	}
	_ = custom_event_type // Suppress unused variable warning
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "customconversions")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["action_source_type"]; ok {
		urlParams.Set("action_source_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["advanced_rule"]; ok {
		urlParams.Set("advanced_rule", fmt.Sprintf("%v", val))
	}
	if val, ok := args["custom_event_type"]; ok {
		urlParams.Set("custom_event_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["default_conversion_value"]; ok {
		urlParams.Set("default_conversion_value", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["event_source_id"]; ok {
		urlParams.Set("event_source_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["rule"]; ok {
		urlParams.Set("rule", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_event_source_groups GET event_source_groups for Business
func (c *BusinessClient) Business_get_event_source_groups(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "event_source_groups")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_event_source_groups POST event_source_groups for Business
func (c *BusinessClient) Business_post_event_source_groups(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	event_sources, ok := args["event_sources"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: event_sources")
	}
	_ = event_sources // Suppress unused variable warning
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "event_source_groups")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["event_sources"]; ok {
		urlParams.Set("event_sources", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_extendedcreditapplications GET extendedcreditapplications for Business
func (c *BusinessClient) Business_get_extendedcreditapplications(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "extendedcreditapplications")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["only_show_pending"]; ok {
		urlParams.Set("only_show_pending", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_extendedcredits GET extendedcredits for Business
func (c *BusinessClient) Business_get_extendedcredits(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "extendedcredits")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["order_by_is_owned_credential"]; ok {
		urlParams.Set("order_by_is_owned_credential", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_images POST images for Business
func (c *BusinessClient) Business_post_images(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	creative_folder_id, ok := args["creative_folder_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: creative_folder_id")
	}
	_ = creative_folder_id // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "images")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_placements_validation_only"]; ok {
		urlParams.Set("ad_placements_validation_only", fmt.Sprintf("%v", val))
	}
	if val, ok := args["bytes"]; ok {
		urlParams.Set("bytes", fmt.Sprintf("%v", val))
	}
	if val, ok := args["creative_folder_id"]; ok {
		urlParams.Set("creative_folder_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["validation_ad_placements"]; ok {
		urlParams.Set("validation_ad_placements", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_initiated_audience_sharing_requests GET initiated_audience_sharing_requests for Business
func (c *BusinessClient) Business_get_initiated_audience_sharing_requests(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "initiated_audience_sharing_requests")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["recipient_id"]; ok {
		urlParams.Set("recipient_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["request_status"]; ok {
		urlParams.Set("request_status", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_delete_instagram_accounts DELETE instagram_accounts for Business
func (c *BusinessClient) Business_delete_instagram_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	instagram_account, ok := args["instagram_account"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: instagram_account")
	}
	_ = instagram_account // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "instagram_accounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["instagram_account"]; ok {
		urlParams.Set("instagram_account", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_instagram_accounts GET instagram_accounts for Business
func (c *BusinessClient) Business_get_instagram_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "instagram_accounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_instagram_business_accounts GET instagram_business_accounts for Business
func (c *BusinessClient) Business_get_instagram_business_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "instagram_business_accounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_delete_managed_businesses DELETE managed_businesses for Business
func (c *BusinessClient) Business_delete_managed_businesses(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	existing_client_business_id, ok := args["existing_client_business_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: existing_client_business_id")
	}
	_ = existing_client_business_id // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "managed_businesses")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["existing_client_business_id"]; ok {
		urlParams.Set("existing_client_business_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_managed_businesses POST managed_businesses for Business
func (c *BusinessClient) Business_post_managed_businesses(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "managed_businesses")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["child_business_external_id"]; ok {
		urlParams.Set("child_business_external_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["existing_client_business_id"]; ok {
		urlParams.Set("existing_client_business_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sales_rep_email"]; ok {
		urlParams.Set("sales_rep_email", fmt.Sprintf("%v", val))
	}
	if val, ok := args["survey_business_type"]; ok {
		urlParams.Set("survey_business_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["survey_num_assets"]; ok {
		urlParams.Set("survey_num_assets", fmt.Sprintf("%v", val))
	}
	if val, ok := args["survey_num_people"]; ok {
		urlParams.Set("survey_num_people", fmt.Sprintf("%v", val))
	}
	if val, ok := args["timezone_id"]; ok {
		urlParams.Set("timezone_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["vertical"]; ok {
		urlParams.Set("vertical", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_managed_partner_ads_funding_source_details GET managed_partner_ads_funding_source_details for Business
func (c *BusinessClient) Business_get_managed_partner_ads_funding_source_details(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "managed_partner_ads_funding_source_details")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["year_quarter"]; ok {
		urlParams.Set("year_quarter", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_managed_partner_business_setup POST managed_partner_business_setup for Business
func (c *BusinessClient) Business_post_managed_partner_business_setup(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "managed_partner_business_setup")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["active_ad_account_id"]; ok {
		urlParams.Set("active_ad_account_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["active_page_id"]; ok {
		urlParams.Set("active_page_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["partner_facebook_page_url"]; ok {
		urlParams.Set("partner_facebook_page_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["partner_registration_countries"]; ok {
		urlParams.Set("partner_registration_countries", fmt.Sprintf("%v", val))
	}
	if val, ok := args["seller_email_address"]; ok {
		urlParams.Set("seller_email_address", fmt.Sprintf("%v", val))
	}
	if val, ok := args["seller_external_website_url"]; ok {
		urlParams.Set("seller_external_website_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["template"]; ok {
		urlParams.Set("template", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_delete_managed_partner_businesses DELETE managed_partner_businesses for Business
func (c *BusinessClient) Business_delete_managed_partner_businesses(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "managed_partner_businesses")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["child_business_external_id"]; ok {
		urlParams.Set("child_business_external_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["child_business_id"]; ok {
		urlParams.Set("child_business_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_managed_partner_businesses POST managed_partner_businesses for Business
func (c *BusinessClient) Business_post_managed_partner_businesses(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	catalog_id, ok := args["catalog_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: catalog_id")
	}
	_ = catalog_id // Suppress unused variable warning
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning
	seller_external_website_url, ok := args["seller_external_website_url"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: seller_external_website_url")
	}
	_ = seller_external_website_url // Suppress unused variable warning
	seller_targeting_countries, ok := args["seller_targeting_countries"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: seller_targeting_countries")
	}
	_ = seller_targeting_countries // Suppress unused variable warning
	vertical, ok := args["vertical"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: vertical")
	}
	_ = vertical // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "managed_partner_businesses")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_account_currency"]; ok {
		urlParams.Set("ad_account_currency", fmt.Sprintf("%v", val))
	}
	if val, ok := args["catalog_id"]; ok {
		urlParams.Set("catalog_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["child_business_external_id"]; ok {
		urlParams.Set("child_business_external_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["credit_limit"]; ok {
		urlParams.Set("credit_limit", fmt.Sprintf("%v", val))
	}
	if val, ok := args["line_of_credit_id"]; ok {
		urlParams.Set("line_of_credit_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["no_ad_account"]; ok {
		urlParams.Set("no_ad_account", fmt.Sprintf("%v", val))
	}
	if val, ok := args["page_name"]; ok {
		urlParams.Set("page_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["page_profile_image_url"]; ok {
		urlParams.Set("page_profile_image_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["partition_type"]; ok {
		urlParams.Set("partition_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["partner_facebook_page_url"]; ok {
		urlParams.Set("partner_facebook_page_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["partner_registration_countries"]; ok {
		urlParams.Set("partner_registration_countries", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sales_rep_email"]; ok {
		urlParams.Set("sales_rep_email", fmt.Sprintf("%v", val))
	}
	if val, ok := args["seller_external_website_url"]; ok {
		urlParams.Set("seller_external_website_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["seller_targeting_countries"]; ok {
		urlParams.Set("seller_targeting_countries", fmt.Sprintf("%v", val))
	}
	if val, ok := args["skip_partner_page_creation"]; ok {
		urlParams.Set("skip_partner_page_creation", fmt.Sprintf("%v", val))
	}
	if val, ok := args["survey_business_type"]; ok {
		urlParams.Set("survey_business_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["survey_num_assets"]; ok {
		urlParams.Set("survey_num_assets", fmt.Sprintf("%v", val))
	}
	if val, ok := args["survey_num_people"]; ok {
		urlParams.Set("survey_num_people", fmt.Sprintf("%v", val))
	}
	if val, ok := args["timezone_id"]; ok {
		urlParams.Set("timezone_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["vertical"]; ok {
		urlParams.Set("vertical", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_onboard_partners_to_mm_lite POST onboard_partners_to_mm_lite for Business
func (c *BusinessClient) Business_post_onboard_partners_to_mm_lite(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "onboard_partners_to_mm_lite")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["solution_id"]; ok {
		urlParams.Set("solution_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_openbridge_configurations GET openbridge_configurations for Business
func (c *BusinessClient) Business_get_openbridge_configurations(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "openbridge_configurations")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_openbridge_configurations POST openbridge_configurations for Business
func (c *BusinessClient) Business_post_openbridge_configurations(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	pixel_id, ok := args["pixel_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: pixel_id")
	}
	_ = pixel_id // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "openbridge_configurations")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["active"]; ok {
		urlParams.Set("active", fmt.Sprintf("%v", val))
	}
	if val, ok := args["cloud_provider"]; ok {
		urlParams.Set("cloud_provider", fmt.Sprintf("%v", val))
	}
	if val, ok := args["cloud_region"]; ok {
		urlParams.Set("cloud_region", fmt.Sprintf("%v", val))
	}
	if val, ok := args["destination_id"]; ok {
		urlParams.Set("destination_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["endpoint"]; ok {
		urlParams.Set("endpoint", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fallback_domain"]; ok {
		urlParams.Set("fallback_domain", fmt.Sprintf("%v", val))
	}
	if val, ok := args["first_party_domain"]; ok {
		urlParams.Set("first_party_domain", fmt.Sprintf("%v", val))
	}
	if val, ok := args["host_business_id"]; ok {
		urlParams.Set("host_business_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["instance_id"]; ok {
		urlParams.Set("instance_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["instance_version"]; ok {
		urlParams.Set("instance_version", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_sgw_instance"]; ok {
		urlParams.Set("is_sgw_instance", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_sgw_pixel_from_meta_pixel"]; ok {
		urlParams.Set("is_sgw_pixel_from_meta_pixel", fmt.Sprintf("%v", val))
	}
	if val, ok := args["partner_name"]; ok {
		urlParams.Set("partner_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["pixel_id"]; ok {
		urlParams.Set("pixel_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sgw_account_id"]; ok {
		urlParams.Set("sgw_account_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sgw_instance_url"]; ok {
		urlParams.Set("sgw_instance_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sgw_pixel_id"]; ok {
		urlParams.Set("sgw_pixel_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_owned_ad_accounts GET owned_ad_accounts for Business
func (c *BusinessClient) Business_get_owned_ad_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "owned_ad_accounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["search_query"]; ok {
		urlParams.Set("search_query", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_owned_ad_accounts POST owned_ad_accounts for Business
func (c *BusinessClient) Business_post_owned_ad_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	adaccount_id, ok := args["adaccount_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: adaccount_id")
	}
	_ = adaccount_id // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "owned_ad_accounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["adaccount_id"]; ok {
		urlParams.Set("adaccount_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_owned_apps GET owned_apps for Business
func (c *BusinessClient) Business_get_owned_apps(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "owned_apps")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_owned_apps POST owned_apps for Business
func (c *BusinessClient) Business_post_owned_apps(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	app_id, ok := args["app_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: app_id")
	}
	_ = app_id // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "owned_apps")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["app_id"]; ok {
		urlParams.Set("app_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_delete_owned_businesses DELETE owned_businesses for Business
func (c *BusinessClient) Business_delete_owned_businesses(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	client_id, ok := args["client_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: client_id")
	}
	_ = client_id // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "owned_businesses")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["client_id"]; ok {
		urlParams.Set("client_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_owned_businesses GET owned_businesses for Business
func (c *BusinessClient) Business_get_owned_businesses(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "owned_businesses")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["child_business_external_id"]; ok {
		urlParams.Set("child_business_external_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["client_user_id"]; ok {
		urlParams.Set("client_user_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_owned_businesses POST owned_businesses for Business
func (c *BusinessClient) Business_post_owned_businesses(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning
	vertical, ok := args["vertical"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: vertical")
	}
	_ = vertical // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "owned_businesses")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["child_business_external_id"]; ok {
		urlParams.Set("child_business_external_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["page_permitted_tasks"]; ok {
		urlParams.Set("page_permitted_tasks", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sales_rep_email"]; ok {
		urlParams.Set("sales_rep_email", fmt.Sprintf("%v", val))
	}
	if val, ok := args["shared_page_id"]; ok {
		urlParams.Set("shared_page_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["should_generate_name"]; ok {
		urlParams.Set("should_generate_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["survey_business_type"]; ok {
		urlParams.Set("survey_business_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["survey_num_assets"]; ok {
		urlParams.Set("survey_num_assets", fmt.Sprintf("%v", val))
	}
	if val, ok := args["survey_num_people"]; ok {
		urlParams.Set("survey_num_people", fmt.Sprintf("%v", val))
	}
	if val, ok := args["timezone_id"]; ok {
		urlParams.Set("timezone_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["vertical"]; ok {
		urlParams.Set("vertical", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_owned_instagram_accounts GET owned_instagram_accounts for Business
func (c *BusinessClient) Business_get_owned_instagram_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "owned_instagram_accounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_owned_offsite_signal_container_business_objects GET owned_offsite_signal_container_business_objects for Business
func (c *BusinessClient) Business_get_owned_offsite_signal_container_business_objects(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "owned_offsite_signal_container_business_objects")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_owned_pages GET owned_pages for Business
func (c *BusinessClient) Business_get_owned_pages(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "owned_pages")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_owned_pages POST owned_pages for Business
func (c *BusinessClient) Business_post_owned_pages(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	page_id, ok := args["page_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: page_id")
	}
	_ = page_id // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "owned_pages")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["code"]; ok {
		urlParams.Set("code", fmt.Sprintf("%v", val))
	}
	if val, ok := args["entry_point"]; ok {
		urlParams.Set("entry_point", fmt.Sprintf("%v", val))
	}
	if val, ok := args["page_id"]; ok {
		urlParams.Set("page_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_owned_pixels GET owned_pixels for Business
func (c *BusinessClient) Business_get_owned_pixels(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "owned_pixels")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_owned_product_catalogs GET owned_product_catalogs for Business
func (c *BusinessClient) Business_get_owned_product_catalogs(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "owned_product_catalogs")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_owned_product_catalogs POST owned_product_catalogs for Business
func (c *BusinessClient) Business_post_owned_product_catalogs(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "owned_product_catalogs")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["additional_vertical_option"]; ok {
		urlParams.Set("additional_vertical_option", fmt.Sprintf("%v", val))
	}
	if val, ok := args["business_metadata"]; ok {
		urlParams.Set("business_metadata", fmt.Sprintf("%v", val))
	}
	if val, ok := args["catalog_segment_filter"]; ok {
		urlParams.Set("catalog_segment_filter", fmt.Sprintf("%v", val))
	}
	if val, ok := args["catalog_segment_product_set_id"]; ok {
		urlParams.Set("catalog_segment_product_set_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["da_display_settings"]; ok {
		urlParams.Set("da_display_settings", fmt.Sprintf("%v", val))
	}
	if val, ok := args["destination_catalog_settings"]; ok {
		urlParams.Set("destination_catalog_settings", fmt.Sprintf("%v", val))
	}
	if val, ok := args["flight_catalog_settings"]; ok {
		urlParams.Set("flight_catalog_settings", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["parent_catalog_id"]; ok {
		urlParams.Set("parent_catalog_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["partner_integration"]; ok {
		urlParams.Set("partner_integration", fmt.Sprintf("%v", val))
	}
	if val, ok := args["store_catalog_settings"]; ok {
		urlParams.Set("store_catalog_settings", fmt.Sprintf("%v", val))
	}
	if val, ok := args["vertical"]; ok {
		urlParams.Set("vertical", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_owned_whatsapp_business_accounts GET owned_whatsapp_business_accounts for Business
func (c *BusinessClient) Business_get_owned_whatsapp_business_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "owned_whatsapp_business_accounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_delete_pages DELETE pages for Business
func (c *BusinessClient) Business_delete_pages(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	page_id, ok := args["page_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: page_id")
	}
	_ = page_id // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "pages")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["page_id"]; ok {
		urlParams.Set("page_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_partner_account_linking GET partner_account_linking for Business
func (c *BusinessClient) Business_get_partner_account_linking(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "partner_account_linking")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_partner_premium_options POST partner_premium_options for Business
func (c *BusinessClient) Business_post_partner_premium_options(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	enable_basket_insight, ok := args["enable_basket_insight"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: enable_basket_insight")
	}
	_ = enable_basket_insight // Suppress unused variable warning
	enable_extended_audience_retargeting, ok := args["enable_extended_audience_retargeting"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: enable_extended_audience_retargeting")
	}
	_ = enable_extended_audience_retargeting // Suppress unused variable warning
	partner_business_id, ok := args["partner_business_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: partner_business_id")
	}
	_ = partner_business_id // Suppress unused variable warning
	retailer_custom_audience_config, ok := args["retailer_custom_audience_config"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: retailer_custom_audience_config")
	}
	_ = retailer_custom_audience_config // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "partner_premium_options")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["catalog_segment_id"]; ok {
		urlParams.Set("catalog_segment_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["enable_basket_insight"]; ok {
		urlParams.Set("enable_basket_insight", fmt.Sprintf("%v", val))
	}
	if val, ok := args["enable_extended_audience_retargeting"]; ok {
		urlParams.Set("enable_extended_audience_retargeting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["partner_business_id"]; ok {
		urlParams.Set("partner_business_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["retailer_custom_audience_config"]; ok {
		urlParams.Set("retailer_custom_audience_config", fmt.Sprintf("%v", val))
	}
	if val, ok := args["vendor_id"]; ok {
		urlParams.Set("vendor_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_passback_attribution_metadata_configs GET passback_attribution_metadata_configs for Business
func (c *BusinessClient) Business_get_passback_attribution_metadata_configs(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "passback_attribution_metadata_configs")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_pending_client_ad_accounts GET pending_client_ad_accounts for Business
func (c *BusinessClient) Business_get_pending_client_ad_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "pending_client_ad_accounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_pending_client_apps GET pending_client_apps for Business
func (c *BusinessClient) Business_get_pending_client_apps(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "pending_client_apps")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_pending_client_pages GET pending_client_pages for Business
func (c *BusinessClient) Business_get_pending_client_pages(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "pending_client_pages")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_pending_owned_ad_accounts GET pending_owned_ad_accounts for Business
func (c *BusinessClient) Business_get_pending_owned_ad_accounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "pending_owned_ad_accounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_pending_owned_pages GET pending_owned_pages for Business
func (c *BusinessClient) Business_get_pending_owned_pages(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "pending_owned_pages")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_pending_shared_offsite_signal_container_business_objects GET pending_shared_offsite_signal_container_business_objects for Business
func (c *BusinessClient) Business_get_pending_shared_offsite_signal_container_business_objects(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "pending_shared_offsite_signal_container_business_objects")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_pending_users GET pending_users for Business
func (c *BusinessClient) Business_get_pending_users(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "pending_users")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["email"]; ok {
		urlParams.Set("email", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_picture GET picture for Business
func (c *BusinessClient) Business_get_picture(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "picture")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["height"]; ok {
		urlParams.Set("height", fmt.Sprintf("%v", val))
	}
	if val, ok := args["redirect"]; ok {
		urlParams.Set("redirect", fmt.Sprintf("%v", val))
	}
	if val, ok := args["type"]; ok {
		urlParams.Set("type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["width"]; ok {
		urlParams.Set("width", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_pixel_tos POST pixel_tos for Business
func (c *BusinessClient) Business_post_pixel_tos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "pixel_tos")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_preverified_numbers GET preverified_numbers for Business
func (c *BusinessClient) Business_get_preverified_numbers(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "preverified_numbers")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["code_verification_status"]; ok {
		urlParams.Set("code_verification_status", fmt.Sprintf("%v", val))
	}
	if val, ok := args["phone_number"]; ok {
		urlParams.Set("phone_number", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_received_audience_sharing_requests GET received_audience_sharing_requests for Business
func (c *BusinessClient) Business_get_received_audience_sharing_requests(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "received_audience_sharing_requests")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["initiator_id"]; ok {
		urlParams.Set("initiator_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["request_status"]; ok {
		urlParams.Set("request_status", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_reseller_guidances GET reseller_guidances for Business
func (c *BusinessClient) Business_get_reseller_guidances(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "reseller_guidances")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_self_certified_whatsapp_business_submissions GET self_certified_whatsapp_business_submissions for Business
func (c *BusinessClient) Business_get_self_certified_whatsapp_business_submissions(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "self_certified_whatsapp_business_submissions")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["end_business_id"]; ok {
		urlParams.Set("end_business_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_self_certify_whatsapp_business POST self_certify_whatsapp_business for Business
func (c *BusinessClient) Business_post_self_certify_whatsapp_business(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	business_documents, ok := args["business_documents"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: business_documents")
	}
	_ = business_documents // Suppress unused variable warning
	end_business_id, ok := args["end_business_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: end_business_id")
	}
	_ = end_business_id // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "self_certify_whatsapp_business")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["average_monthly_revenue_spend_with_partner"]; ok {
		urlParams.Set("average_monthly_revenue_spend_with_partner", fmt.Sprintf("%v", val))
	}
	if val, ok := args["business_documents"]; ok {
		urlParams.Set("business_documents", fmt.Sprintf("%v", val))
	}
	if val, ok := args["business_vertical"]; ok {
		urlParams.Set("business_vertical", fmt.Sprintf("%v", val))
	}
	if val, ok := args["end_business_address"]; ok {
		urlParams.Set("end_business_address", fmt.Sprintf("%v", val))
	}
	if val, ok := args["end_business_id"]; ok {
		urlParams.Set("end_business_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["end_business_legal_name"]; ok {
		urlParams.Set("end_business_legal_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["end_business_trade_names"]; ok {
		urlParams.Set("end_business_trade_names", fmt.Sprintf("%v", val))
	}
	if val, ok := args["end_business_website"]; ok {
		urlParams.Set("end_business_website", fmt.Sprintf("%v", val))
	}
	if val, ok := args["num_billing_cycles_with_partner"]; ok {
		urlParams.Set("num_billing_cycles_with_partner", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_setup_managed_partner_adaccounts POST setup_managed_partner_adaccounts for Business
func (c *BusinessClient) Business_post_setup_managed_partner_adaccounts(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	credit_line_id, ok := args["credit_line_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: credit_line_id")
	}
	_ = credit_line_id // Suppress unused variable warning
	marketplace_business_id, ok := args["marketplace_business_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: marketplace_business_id")
	}
	_ = marketplace_business_id // Suppress unused variable warning
	subvertical_v2, ok := args["subvertical_v2"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: subvertical_v2")
	}
	_ = subvertical_v2 // Suppress unused variable warning
	vendor_id, ok := args["vendor_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: vendor_id")
	}
	_ = vendor_id // Suppress unused variable warning
	vertical_v2, ok := args["vertical_v2"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: vertical_v2")
	}
	_ = vertical_v2 // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "setup_managed_partner_adaccounts")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["credit_line_id"]; ok {
		urlParams.Set("credit_line_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["marketplace_business_id"]; ok {
		urlParams.Set("marketplace_business_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["subvertical_v2"]; ok {
		urlParams.Set("subvertical_v2", fmt.Sprintf("%v", val))
	}
	if val, ok := args["vendor_id"]; ok {
		urlParams.Set("vendor_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["vertical_v2"]; ok {
		urlParams.Set("vertical_v2", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_delete_share_preverified_numbers DELETE share_preverified_numbers for Business
func (c *BusinessClient) Business_delete_share_preverified_numbers(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	partner_business_id, ok := args["partner_business_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: partner_business_id")
	}
	_ = partner_business_id // Suppress unused variable warning
	preverified_id, ok := args["preverified_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: preverified_id")
	}
	_ = preverified_id // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "share_preverified_numbers")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["partner_business_id"]; ok {
		urlParams.Set("partner_business_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["preverified_id"]; ok {
		urlParams.Set("preverified_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "DELETE" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: DELETE")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_share_preverified_numbers POST share_preverified_numbers for Business
func (c *BusinessClient) Business_post_share_preverified_numbers(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	partner_business_id, ok := args["partner_business_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: partner_business_id")
	}
	_ = partner_business_id // Suppress unused variable warning
	preverified_id, ok := args["preverified_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: preverified_id")
	}
	_ = preverified_id // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "share_preverified_numbers")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["partner_business_id"]; ok {
		urlParams.Set("partner_business_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["preverified_id"]; ok {
		urlParams.Set("preverified_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_system_user_access_tokens POST system_user_access_tokens for Business
func (c *BusinessClient) Business_post_system_user_access_tokens(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "system_user_access_tokens")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["asset"]; ok {
		urlParams.Set("asset", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fetch_only"]; ok {
		urlParams.Set("fetch_only", fmt.Sprintf("%v", val))
	}
	if val, ok := args["scope"]; ok {
		urlParams.Set("scope", fmt.Sprintf("%v", val))
	}
	if val, ok := args["set_token_expires_in_60_days"]; ok {
		urlParams.Set("set_token_expires_in_60_days", fmt.Sprintf("%v", val))
	}
	if val, ok := args["system_user_id"]; ok {
		urlParams.Set("system_user_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_system_users GET system_users for Business
func (c *BusinessClient) Business_get_system_users(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "system_users")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_system_users POST system_users for Business
func (c *BusinessClient) Business_post_system_users(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	name, ok := args["name"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: name")
	}
	_ = name // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "system_users")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["role"]; ok {
		urlParams.Set("role", fmt.Sprintf("%v", val))
	}
	if val, ok := args["system_user_id"]; ok {
		urlParams.Set("system_user_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_third_party_measurement_report_dataset GET third_party_measurement_report_dataset for Business
func (c *BusinessClient) Business_get_third_party_measurement_report_dataset(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "third_party_measurement_report_dataset")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_videos POST videos for Business
func (c *BusinessClient) Business_post_videos(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	creative_folder_id, ok := args["creative_folder_id"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: creative_folder_id")
	}
	_ = creative_folder_id // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "videos")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["ad_placements_validation_only"]; ok {
		urlParams.Set("ad_placements_validation_only", fmt.Sprintf("%v", val))
	}
	if val, ok := args["application_id"]; ok {
		urlParams.Set("application_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["asked_fun_fact_prompt_id"]; ok {
		urlParams.Set("asked_fun_fact_prompt_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["audio_story_wave_animation_handle"]; ok {
		urlParams.Set("audio_story_wave_animation_handle", fmt.Sprintf("%v", val))
	}
	if val, ok := args["chunk_session_id"]; ok {
		urlParams.Set("chunk_session_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_entry_picker"]; ok {
		urlParams.Set("composer_entry_picker", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_entry_point"]; ok {
		urlParams.Set("composer_entry_point", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_entry_time"]; ok {
		urlParams.Set("composer_entry_time", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_session_events_log"]; ok {
		urlParams.Set("composer_session_events_log", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_session_id"]; ok {
		urlParams.Set("composer_session_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_source_surface"]; ok {
		urlParams.Set("composer_source_surface", fmt.Sprintf("%v", val))
	}
	if val, ok := args["composer_type"]; ok {
		urlParams.Set("composer_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["container_type"]; ok {
		urlParams.Set("container_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["content_category"]; ok {
		urlParams.Set("content_category", fmt.Sprintf("%v", val))
	}
	if val, ok := args["creative_folder_id"]; ok {
		urlParams.Set("creative_folder_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["creative_tools"]; ok {
		urlParams.Set("creative_tools", fmt.Sprintf("%v", val))
	}
	if val, ok := args["description"]; ok {
		urlParams.Set("description", fmt.Sprintf("%v", val))
	}
	if val, ok := args["embeddable"]; ok {
		urlParams.Set("embeddable", fmt.Sprintf("%v", val))
	}
	if val, ok := args["end_offset"]; ok {
		urlParams.Set("end_offset", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fbuploader_video_file_chunk"]; ok {
		urlParams.Set("fbuploader_video_file_chunk", fmt.Sprintf("%v", val))
	}
	if val, ok := args["file_size"]; ok {
		urlParams.Set("file_size", fmt.Sprintf("%v", val))
	}
	if val, ok := args["file_url"]; ok {
		urlParams.Set("file_url", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fisheye_video_cropped"]; ok {
		urlParams.Set("fisheye_video_cropped", fmt.Sprintf("%v", val))
	}
	if val, ok := args["formatting"]; ok {
		urlParams.Set("formatting", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fov"]; ok {
		urlParams.Set("fov", fmt.Sprintf("%v", val))
	}
	if val, ok := args["front_z_rotation"]; ok {
		urlParams.Set("front_z_rotation", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fun_fact_prompt_id"]; ok {
		urlParams.Set("fun_fact_prompt_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["fun_fact_toastee_id"]; ok {
		urlParams.Set("fun_fact_toastee_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["guide"]; ok {
		urlParams.Set("guide", fmt.Sprintf("%v", val))
	}
	if val, ok := args["guide_enabled"]; ok {
		urlParams.Set("guide_enabled", fmt.Sprintf("%v", val))
	}
	if val, ok := args["initial_heading"]; ok {
		urlParams.Set("initial_heading", fmt.Sprintf("%v", val))
	}
	if val, ok := args["initial_pitch"]; ok {
		urlParams.Set("initial_pitch", fmt.Sprintf("%v", val))
	}
	if val, ok := args["instant_game_entry_point_data"]; ok {
		urlParams.Set("instant_game_entry_point_data", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_boost_intended"]; ok {
		urlParams.Set("is_boost_intended", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_group_linking_post"]; ok {
		urlParams.Set("is_group_linking_post", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_partnership_ad"]; ok {
		urlParams.Set("is_partnership_ad", fmt.Sprintf("%v", val))
	}
	if val, ok := args["is_voice_clip"]; ok {
		urlParams.Set("is_voice_clip", fmt.Sprintf("%v", val))
	}
	if val, ok := args["location_source_id"]; ok {
		urlParams.Set("location_source_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_action_type_id"]; ok {
		urlParams.Set("og_action_type_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_icon_id"]; ok {
		urlParams.Set("og_icon_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_object_id"]; ok {
		urlParams.Set("og_object_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_phrase"]; ok {
		urlParams.Set("og_phrase", fmt.Sprintf("%v", val))
	}
	if val, ok := args["og_suggestion_mechanism"]; ok {
		urlParams.Set("og_suggestion_mechanism", fmt.Sprintf("%v", val))
	}
	if val, ok := args["original_fov"]; ok {
		urlParams.Set("original_fov", fmt.Sprintf("%v", val))
	}
	if val, ok := args["original_projection_type"]; ok {
		urlParams.Set("original_projection_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["partnership_ad_ad_code"]; ok {
		urlParams.Set("partnership_ad_ad_code", fmt.Sprintf("%v", val))
	}
	if val, ok := args["publish_event_id"]; ok {
		urlParams.Set("publish_event_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["referenced_sticker_id"]; ok {
		urlParams.Set("referenced_sticker_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["replace_video_id"]; ok {
		urlParams.Set("replace_video_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["slideshow_spec"]; ok {
		urlParams.Set("slideshow_spec", fmt.Sprintf("%v", val))
	}
	if val, ok := args["source"]; ok {
		urlParams.Set("source", fmt.Sprintf("%v", val))
	}
	if val, ok := args["source_instagram_media_id"]; ok {
		urlParams.Set("source_instagram_media_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["spherical"]; ok {
		urlParams.Set("spherical", fmt.Sprintf("%v", val))
	}
	if val, ok := args["start_offset"]; ok {
		urlParams.Set("start_offset", fmt.Sprintf("%v", val))
	}
	if val, ok := args["swap_mode"]; ok {
		urlParams.Set("swap_mode", fmt.Sprintf("%v", val))
	}
	if val, ok := args["text_format_metadata"]; ok {
		urlParams.Set("text_format_metadata", fmt.Sprintf("%v", val))
	}
	if val, ok := args["thumb"]; ok {
		urlParams.Set("thumb", fmt.Sprintf("%v", val))
	}
	if val, ok := args["time_since_original_post"]; ok {
		urlParams.Set("time_since_original_post", fmt.Sprintf("%v", val))
	}
	if val, ok := args["title"]; ok {
		urlParams.Set("title", fmt.Sprintf("%v", val))
	}
	if val, ok := args["transcode_setting_properties"]; ok {
		urlParams.Set("transcode_setting_properties", fmt.Sprintf("%v", val))
	}
	if val, ok := args["unpublished_content_type"]; ok {
		urlParams.Set("unpublished_content_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["upload_phase"]; ok {
		urlParams.Set("upload_phase", fmt.Sprintf("%v", val))
	}
	if val, ok := args["upload_session_id"]; ok {
		urlParams.Set("upload_session_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["upload_setting_properties"]; ok {
		urlParams.Set("upload_setting_properties", fmt.Sprintf("%v", val))
	}
	if val, ok := args["validation_ad_placements"]; ok {
		urlParams.Set("validation_ad_placements", fmt.Sprintf("%v", val))
	}
	if val, ok := args["video_file_chunk"]; ok {
		urlParams.Set("video_file_chunk", fmt.Sprintf("%v", val))
	}
	if val, ok := args["video_id_original"]; ok {
		urlParams.Set("video_id_original", fmt.Sprintf("%v", val))
	}
	if val, ok := args["video_start_time_ms"]; ok {
		urlParams.Set("video_start_time_ms", fmt.Sprintf("%v", val))
	}
	if val, ok := args["waterfall_id"]; ok {
		urlParams.Set("waterfall_id", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_get_ GET  for Business
func (c *BusinessClient) Business_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// business_post_ POST  for Business
func (c *BusinessClient) Business_post_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/%s/%s", "v23.0", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["entry_point"]; ok {
		urlParams.Set("entry_point", fmt.Sprintf("%v", val))
	}
	if val, ok := args["name"]; ok {
		urlParams.Set("name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["primary_page"]; ok {
		urlParams.Set("primary_page", fmt.Sprintf("%v", val))
	}
	if val, ok := args["timezone_id"]; ok {
		urlParams.Set("timezone_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["two_factor_type"]; ok {
		urlParams.Set("two_factor_type", fmt.Sprintf("%v", val))
	}
	if val, ok := args["vertical"]; ok {
		urlParams.Set("vertical", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

