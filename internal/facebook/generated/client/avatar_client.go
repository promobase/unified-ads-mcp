// Code generated by Facebook Business API codegen. DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// AvatarClient provides methods for Avatar operations
type AvatarClient struct {
	accessToken string
}

// NewAvatarClient creates a new Avatar client
func NewAvatarClient(accessToken string) *AvatarClient {
	return &AvatarClient{
		accessToken: accessToken,
	}
}


// facebook_avatar_get_models GET models for Avatar
func (c *AvatarClient) Facebook_avatar_get_models(args map[string]interface{}) (interface{}, error) {
	// Extract parameters
	profile, ok := args["profile"]
	if !ok {
		return nil, fmt.Errorf("missing required parameter: profile")
	}
	_ = profile // Suppress unused variable warning


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "models")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)

	if val, ok := args["client_name"]; ok {
		urlParams.Set("client_name", fmt.Sprintf("%v", val))
	}
	if val, ok := args["client_version"]; ok {
		urlParams.Set("client_version", fmt.Sprintf("%v", val))
	}
	if val, ok := args["config_id"]; ok {
		urlParams.Set("config_id", fmt.Sprintf("%v", val))
	}
	if val, ok := args["force_generate"]; ok {
		urlParams.Set("force_generate", fmt.Sprintf("%v", val))
	}
	if val, ok := args["platform"]; ok {
		urlParams.Set("platform", fmt.Sprintf("%v", val))
	}
	if val, ok := args["profile"]; ok {
		urlParams.Set("profile", fmt.Sprintf("%v", val))
	}
	if val, ok := args["sdk_version"]; ok {
		urlParams.Set("sdk_version", fmt.Sprintf("%v", val))
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}


// facebook_avatar_get_ GET  for Avatar
func (c *AvatarClient) Facebook_avatar_get_(args map[string]interface{}) (interface{}, error) {
	// Extract parameters


	// Build request URL and parameters
	baseURL := fmt.Sprintf("https://graph.facebook.com/v23.0/%s", "")
	urlParams := url.Values{}
	urlParams.Set("access_token", c.accessToken)



	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

