// Code generated by Facebook Business API codegen. DO NOT EDIT.

package adsreportbuildersavedreport

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolAdsreportbuildersavedreport_get_ returns the MCP tool definition for adsreportbuildersavedreport_get_
func ToolAdsreportbuildersavedreport_get_() mcp.Tool {
	// Available fields for AdsReportBuilderSavedReport: action_report_time, ad_account_id, attribution_windows, comparison_date_interval, creation_source, creation_time, currency, date_interval, date_preset, default_attribution_windows, dimension_groups, dimensions, filtering, formatting, id, last_access_by, last_access_time, last_report_snapshot_id, last_report_snapshot_time, last_shared_report_expiration, limit, locked_dimensions, metrics, report_name, report_snapshot_async_percent_completion, report_snapshot_async_status, schedule_frequency, scope, show_deprecate_aw_banner, sorting, start_date, status, subscribers, update_by, update_time, user, user_dimensions, user_metrics, view_type

	return mcp.NewTool("adsreportbuildersavedreport_get_",
		mcp.WithDescription("GET  for AdsReportBuilderSavedReport"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for AdsReportBuilderSavedReport objects. Available fields: action_report_time, ad_account_id, attribution_windows, comparison_date_interval, creation_source, creation_time, currency, date_interval, date_preset, default_attribution_windows, dimension_groups, dimensions, filtering, formatting, id (and 24 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleAdsreportbuildersavedreport_get_ handles the adsreportbuildersavedreport_get_ tool with context-based auth
func HandleAdsreportbuildersavedreport_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	utils.ParseFieldsArray(request, args)

	// Optional: limit
	utils.ParseOptionalInt(request, "limit", args)

	// Optional: after
	utils.ParseOptionalString(request, "after", args)

	// Optional: before
	utils.ParseOptionalString(request, "before", args)

	// Call the API method
	result, err := Adsreportbuildersavedreport_get_(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adsreportbuildersavedreport_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Adsreportbuildersavedreport_get_ performs GET  for AdsReportBuilderSavedReport
func Adsreportbuildersavedreport_get_(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + ""

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("GET", baseURL, urlParams)
}
