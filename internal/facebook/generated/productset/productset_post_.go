// Code generated by Facebook Business API codegen. DO NOT EDIT.

package productset

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolProductset_post_ returns the MCP tool definition for productset_post_
func ToolProductset_post_() mcp.Tool {

	// Params object accepts: filter (Object), metadata (map), name (string), ordering_info (list<unsigned int>), publish_to_shops (list<map>), retailer_id (string)
	return mcp.NewTool("productset_post_",
		mcp.WithDescription("POST  for ProductSet"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"filter": map[string]any{
					"type":        "object",
					"description": "filter parameter",
				},
				"metadata": map[string]any{
					"type":        "object",
					"description": "metadata parameter",
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
				},
				"ordering_info": map[string]any{
					"type":        "array",
					"description": "ordering_info parameter",
					"items":       map[string]any{"type": "integer"},
				},
				"publish_to_shops": map[string]any{
					"type":        "array",
					"description": "publish_to_shops parameter",
					"items":       map[string]any{"type": "object"},
				},
				"retailer_id": map[string]any{
					"type":        "string",
					"description": "retailer_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: filter (object), metadata (object), name (string), ordering_info (array<integer>), publish_to_shops (array<object>), retailer_id (string)"),
		),
	)
}

// HandleProductset_post_ handles the productset_post_ tool with context-based auth
func HandleProductset_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Productset_post_(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute productset_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Productset_post_ performs POST  for ProductSet
func Productset_post_(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + ""

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
