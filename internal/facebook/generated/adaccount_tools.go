// Code generated by codegen. DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"reflect"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// list_ad_account_account_controlsArgs defines the typed arguments for list_ad_account_account_controls
type list_ad_account_account_controlsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// create_ad_account_account_controlArgs defines the typed arguments for create_ad_account_account_control
type create_ad_account_account_controlArgs struct {
	ID                string                 `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	AudienceControls  map[string]interface{} `json:"audience_controls" jsonschema:"description=Audience Controls,required"`
	PlacementControls map[string]interface{} `json:"placement_controls,omitempty" jsonschema:"description=Placement Controls"`
}

// list_ad_account_activitiesArgs defines the typed arguments for list_ad_account_activities
type list_ad_account_activitiesArgs struct {
	ID          string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields      []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit       int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After       string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before      string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AddChildren bool     `json:"add_children,omitempty" jsonschema:"description=Add Children"`
	BusinessId  string   `json:"business_id,omitempty" jsonschema:"description=ID of the Business,pattern=^[0-9]+$"`
	Category    string   `json:"category,omitempty" jsonschema:"description=Category"`
	DataSource  string   `json:"data_source,omitempty" jsonschema:"description=Data Source"`
	ExtraOids   []string `json:"extra_oids,omitempty" jsonschema:"description=Extra Oids"`
	Oid         string   `json:"oid,omitempty" jsonschema:"description=Oid"`
	Since       string   `json:"since,omitempty" jsonschema:"description=Since,format=date-time"`
	Uid         int      `json:"uid,omitempty" jsonschema:"description=Uid"`
	Until       string   `json:"until,omitempty" jsonschema:"description=Until,format=date-time"`
}

// list_ad_account_ad_place_page_setsArgs defines the typed arguments for list_ad_account_ad_place_page_sets
type list_ad_account_ad_place_page_setsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// create_ad_account_ad_place_page_setArgs defines the typed arguments for create_ad_account_ad_place_page_set
type create_ad_account_ad_place_page_setArgs struct {
	ID               string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	LocationTypes    []string `json:"location_types,omitempty" jsonschema:"description=Location Types"`
	Name             string   `json:"name" jsonschema:"description=Name,required"`
	ParentPage       string   `json:"parent_page" jsonschema:"description=Parent Page,required"`
	TargetedAreaType string   `json:"targeted_area_type,omitempty" jsonschema:"description=Targeted Area Type"`
}

// update_ad_account_ad_place_page_sets_asyncArgs defines the typed arguments for update_ad_account_ad_place_page_sets_async
type update_ad_account_ad_place_page_sets_asyncArgs struct {
	ID               string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	LocationTypes    []string `json:"location_types,omitempty" jsonschema:"description=Location Types"`
	Name             string   `json:"name" jsonschema:"description=Name,required"`
	ParentPage       string   `json:"parent_page" jsonschema:"description=Parent Page,required"`
	TargetedAreaType string   `json:"targeted_area_type,omitempty" jsonschema:"description=Targeted Area Type"`
}

// list_ad_account_ad_saved_keywordsArgs defines the typed arguments for list_ad_account_ad_saved_keywords
type list_ad_account_ad_saved_keywordsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// list_ad_account_ad_studiesArgs defines the typed arguments for list_ad_account_ad_studies
type list_ad_account_ad_studiesArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// list_ad_account_adcloudplayablesArgs defines the typed arguments for list_ad_account_adcloudplayables
type list_ad_account_adcloudplayablesArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// list_ad_account_adcreativesArgs defines the typed arguments for list_ad_account_adcreatives
type list_ad_account_adcreativesArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// create_ad_account_adcreativeArgs defines the typed arguments for create_ad_account_adcreative
type create_ad_account_adcreativeArgs struct {
	ID                               string                     `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	ActorId                          int                        `json:"actor_id,omitempty" jsonschema:"description=ID of the Actor,pattern=^[0-9]+$"`
	AdDisclaimerSpec                 map[string]interface{}     `json:"ad_disclaimer_spec,omitempty" jsonschema:"description=Ad Disclaimer Spec"`
	Adlabels                         []*AdLabel                 `json:"adlabels,omitempty" jsonschema:"description=Adlabels"`
	ApplinkTreatment                 string                     `json:"applink_treatment,omitempty" jsonschema:"description=Applink Treatment"`
	AssetFeedSpec                    map[string]interface{}     `json:"asset_feed_spec,omitempty" jsonschema:"description=Asset Feed Spec"`
	AuthorizationCategory            string                     `json:"authorization_category,omitempty" jsonschema:"description=Authorization Category"`
	Body                             string                     `json:"body,omitempty" jsonschema:"description=Body"`
	BrandedContent                   map[string]interface{}     `json:"branded_content,omitempty" jsonschema:"description=Branded Content"`
	BrandedContentSponsorPageId      string                     `json:"branded_content_sponsor_page_id,omitempty" jsonschema:"description=ID of the Branded Content Sponsor Page,pattern=^[0-9]+$"`
	BundleFolderId                   string                     `json:"bundle_folder_id,omitempty" jsonschema:"description=ID of the Bundle Folder,pattern=^[0-9]+$"`
	CallToAction                     map[string]interface{}     `json:"call_to_action,omitempty" jsonschema:"description=Call To Action"`
	CategorizationCriteria           string                     `json:"categorization_criteria,omitempty" jsonschema:"description=Categorization Criteria"`
	CategoryMediaSource              string                     `json:"category_media_source,omitempty" jsonschema:"description=Category Media Source"`
	ContextualMultiAds               map[string]interface{}     `json:"contextual_multi_ads,omitempty" jsonschema:"description=Contextual Multi Ads"`
	CreativeSourcingSpec             map[string]interface{}     `json:"creative_sourcing_spec,omitempty" jsonschema:"description=Creative Sourcing Spec"`
	DegreesOfFreedomSpec             map[string]interface{}     `json:"degrees_of_freedom_spec,omitempty" jsonschema:"description=Degrees Of Freedom Spec"`
	DestinationSetId                 string                     `json:"destination_set_id,omitempty" jsonschema:"description=ID of the Destination Set,pattern=^[0-9]+$"`
	DynamicAdVoice                   string                     `json:"dynamic_ad_voice,omitempty" jsonschema:"description=Dynamic Ad Voice"`
	EnableLaunchInstantApp           bool                       `json:"enable_launch_instant_app,omitempty" jsonschema:"description=Enable Launch Instant App"`
	FacebookBrandedContent           map[string]interface{}     `json:"facebook_branded_content,omitempty" jsonschema:"description=Facebook Branded Content"`
	ImageCrops                       map[string]interface{}     `json:"image_crops,omitempty" jsonschema:"description=Image Crops,minimum=13,maximum=100"`
	ImageFile                        string                     `json:"image_file,omitempty" jsonschema:"description=Image File"`
	ImageHash                        string                     `json:"image_hash,omitempty" jsonschema:"description=Image Hash"`
	ImageUrl                         string                     `json:"image_url,omitempty" jsonschema:"description=Image URL,format=uri"`
	InstagramBrandedContent          map[string]interface{}     `json:"instagram_branded_content,omitempty" jsonschema:"description=Instagram Branded Content"`
	InstagramPermalinkUrl            string                     `json:"instagram_permalink_url,omitempty" jsonschema:"description=Instagram Permalink URL,format=uri"`
	InstagramUserId                  string                     `json:"instagram_user_id,omitempty" jsonschema:"description=ID of the Instagram User,pattern=^[0-9]+$"`
	InteractiveComponentsSpec        map[string]interface{}     `json:"interactive_components_spec,omitempty" jsonschema:"description=Interactive Components Spec"`
	IsDcoInternal                    bool                       `json:"is_dco_internal,omitempty" jsonschema:"description=Is Dco Internal"`
	LinkOgId                         string                     `json:"link_og_id,omitempty" jsonschema:"description=ID of the Link Og,pattern=^[0-9]+$"`
	LinkUrl                          string                     `json:"link_url,omitempty" jsonschema:"description=Link URL,format=uri"`
	Name                             string                     `json:"name,omitempty" jsonschema:"description=Name"`
	ObjectId                         int                        `json:"object_id,omitempty" jsonschema:"description=ID of the Object,pattern=^[0-9]+$"`
	ObjectStoryId                    string                     `json:"object_story_id,omitempty" jsonschema:"description=ID of the Object Story,pattern=^[0-9]+$"`
	ObjectStorySpec                  *AdCreativeObjectStorySpec `json:"object_story_spec,omitempty" jsonschema:"description=Object Story Spec"`
	ObjectType                       string                     `json:"object_type,omitempty" jsonschema:"description=Object Type"`
	ObjectUrl                        string                     `json:"object_url,omitempty" jsonschema:"description=Object URL,format=uri"`
	OmnichannelLinkSpec              map[string]interface{}     `json:"omnichannel_link_spec,omitempty" jsonschema:"description=Omnichannel Link Spec"`
	PageWelcomeMessage               string                     `json:"page_welcome_message,omitempty" jsonschema:"description=Page Welcome Message"`
	PlacePageSetId                   string                     `json:"place_page_set_id,omitempty" jsonschema:"description=ID of the Place Page Set,pattern=^[0-9]+$"`
	PlatformCustomizations           map[string]interface{}     `json:"platform_customizations,omitempty" jsonschema:"description=Platform Customizations"`
	PlayableAssetId                  string                     `json:"playable_asset_id,omitempty" jsonschema:"description=ID of the Playable Asset,pattern=^[0-9]+$"`
	PortraitCustomizations           map[string]interface{}     `json:"portrait_customizations,omitempty" jsonschema:"description=Portrait Customizations"`
	ProductSetId                     string                     `json:"product_set_id,omitempty" jsonschema:"description=ID of the Product Set,pattern=^[0-9]+$"`
	RecommenderSettings              map[string]interface{}     `json:"recommender_settings,omitempty" jsonschema:"description=Recommender Settings"`
	RegionalRegulationDisclaimerSpec map[string]interface{}     `json:"regional_regulation_disclaimer_spec,omitempty" jsonschema:"description=Regional Regulation Disclaimer Spec"`
	SourceInstagramMediaId           string                     `json:"source_instagram_media_id,omitempty" jsonschema:"description=ID of the Source Instagram Media,pattern=^[0-9]+$"`
	TemplateUrl                      string                     `json:"template_url,omitempty" jsonschema:"description=Template URL,format=uri"`
	TemplateUrlSpec                  string                     `json:"template_url_spec,omitempty" jsonschema:"description=Template URL Spec,format=uri"`
	ThumbnailUrl                     string                     `json:"thumbnail_url,omitempty" jsonschema:"description=Thumbnail URL,format=uri"`
	Title                            string                     `json:"title,omitempty" jsonschema:"description=Title"`
	UrlTags                          string                     `json:"url_tags,omitempty" jsonschema:"description=URL Tags,format=uri"`
	UsePageActorOverride             bool                       `json:"use_page_actor_override,omitempty" jsonschema:"description=Use Page Actor Override"`
}

// list_ad_account_adcreativesbylabelsArgs defines the typed arguments for list_ad_account_adcreativesbylabels
type list_ad_account_adcreativesbylabelsArgs struct {
	ID         string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields     []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit      int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After      string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before     string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AdLabelIds []string `json:"ad_label_ids" jsonschema:"description=Ad Label Ids,required,pattern=^[0-9]+$"`
	Operator   string   `json:"operator,omitempty" jsonschema:"description=Operator"`
}

// remove_adimages_from_ad_accountArgs defines the typed arguments for remove_adimages_from_ad_account
type remove_adimages_from_ad_accountArgs struct {
	ID   string `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Hash string `json:"hash" jsonschema:"description=Hash,required"`
}

// list_ad_account_adimagesArgs defines the typed arguments for list_ad_account_adimages
type list_ad_account_adimagesArgs struct {
	ID             string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields         []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit          int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After          string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before         string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	BizTagId       int      `json:"biz_tag_id,omitempty" jsonschema:"description=ID of the Biz Tag,pattern=^[0-9]+$"`
	BusinessId     string   `json:"business_id,omitempty" jsonschema:"description=ID of the Business,pattern=^[0-9]+$"`
	Hashes         []string `json:"hashes,omitempty" jsonschema:"description=Hashes"`
	Minheight      int      `json:"minheight,omitempty" jsonschema:"description=Minheight"`
	Minwidth       int      `json:"minwidth,omitempty" jsonschema:"description=Minwidth"`
	Name           string   `json:"name,omitempty" jsonschema:"description=Name"`
	SelectedHashes []string `json:"selected_hashes,omitempty" jsonschema:"description=Selected Hashes"`
}

// create_ad_account_adimageArgs defines the typed arguments for create_ad_account_adimage
type create_ad_account_adimageArgs struct {
	ID       string                 `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Bytes    string                 `json:"bytes,omitempty" jsonschema:"description=Bytes"`
	CopyFrom map[string]interface{} `json:"copy_from,omitempty" jsonschema:"description=Copy From"`
}

// list_ad_account_adlabelsArgs defines the typed arguments for list_ad_account_adlabels
type list_ad_account_adlabelsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// create_ad_account_adlabelArgs defines the typed arguments for create_ad_account_adlabel
type create_ad_account_adlabelArgs struct {
	ID   string `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Name string `json:"name" jsonschema:"description=Name,required"`
}

// list_ad_account_adplayablesArgs defines the typed arguments for list_ad_account_adplayables
type list_ad_account_adplayablesArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// create_ad_account_adplayableArgs defines the typed arguments for create_ad_account_adplayable
type create_ad_account_adplayableArgs struct {
	ID        string      `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	AppId     string      `json:"app_id,omitempty" jsonschema:"description=ID of the App,pattern=^[0-9]+$"`
	Name      string      `json:"name" jsonschema:"description=Name,required"`
	SessionId string      `json:"session_id,omitempty" jsonschema:"description=ID of the Session,pattern=^[0-9]+$"`
	Source    interface{} `json:"source,omitempty" jsonschema:"description=Source"`
	SourceUrl string      `json:"source_url,omitempty" jsonschema:"description=Source URL,format=uri"`
	SourceZip interface{} `json:"source_zip,omitempty" jsonschema:"description=Source Zip"`
}

// get_ad_account_adrules_historyArgs defines the typed arguments for get_ad_account_adrules_history
type get_ad_account_adrules_historyArgs struct {
	ID             string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields         []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit          int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After          string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before         string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Action         string   `json:"action,omitempty" jsonschema:"description=Action"`
	EvaluationType string   `json:"evaluation_type,omitempty" jsonschema:"description=Evaluation Type"`
	HideNoChanges  bool     `json:"hide_no_changes,omitempty" jsonschema:"description=Hide No Changes"`
	ObjectId       string   `json:"object_id,omitempty" jsonschema:"description=ID of the Object,pattern=^[0-9]+$"`
}

// get_ad_account_adrules_libraryArgs defines the typed arguments for get_ad_account_adrules_library
type get_ad_account_adrules_libraryArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// update_ad_account_adrules_libraryArgs defines the typed arguments for update_ad_account_adrules_library
type update_ad_account_adrules_libraryArgs struct {
	ID               string                 `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	AccountId        string                 `json:"account_id,omitempty" jsonschema:"description=ID of the Account,pattern=^[0-9]+$"`
	EvaluationSpec   map[string]interface{} `json:"evaluation_spec" jsonschema:"description=Evaluation Spec,required"`
	ExecutionSpec    map[string]interface{} `json:"execution_spec" jsonschema:"description=Execution Spec,required"`
	Name             string                 `json:"name" jsonschema:"description=Name,required"`
	ScheduleSpec     map[string]interface{} `json:"schedule_spec,omitempty" jsonschema:"description=Schedule Spec"`
	Status           string                 `json:"status,omitempty" jsonschema:"description=Status,enum=ACTIVE,enum=PAUSED,enum=DELETED,enum=ARCHIVED"`
	UiCreationSource string                 `json:"ui_creation_source,omitempty" jsonschema:"description=Ui Creation Source"`
}

// list_ad_account_adsArgs defines the typed arguments for list_ad_account_ads
type list_ad_account_adsArgs struct {
	ID              string                 `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields          []string               `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit           int                    `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After           string                 `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before          string                 `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	DatePreset      string                 `json:"date_preset,omitempty" jsonschema:"description=Date Preset"`
	EffectiveStatus []string               `json:"effective_status,omitempty" jsonschema:"description=Effective Status"`
	TimeRange       map[string]interface{} `json:"time_range,omitempty" jsonschema:"description=Time Range"`
	UpdatedSince    int                    `json:"updated_since,omitempty" jsonschema:"description=When last updated"`
}

// create_ad_account_adArgs defines the typed arguments for create_ad_account_ad
type create_ad_account_adArgs struct {
	ID                      string                 `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	AdScheduleEndTime       string                 `json:"ad_schedule_end_time,omitempty" jsonschema:"description=Ad Schedule End Time,format=date-time"`
	AdScheduleStartTime     string                 `json:"ad_schedule_start_time,omitempty" jsonschema:"description=Ad Schedule Start Time,format=date-time"`
	Adlabels                []*AdLabel             `json:"adlabels,omitempty" jsonschema:"description=Adlabels"`
	AdsetId                 int                    `json:"adset_id,omitempty" jsonschema:"description=ID of the Adset,pattern=^[0-9]+$"`
	AdsetSpec               *AdSet                 `json:"adset_spec,omitempty" jsonschema:"description=Adset Spec"`
	AudienceId              string                 `json:"audience_id,omitempty" jsonschema:"description=ID of the Audience,pattern=^[0-9]+$"`
	BidAmount               int                    `json:"bid_amount,omitempty" jsonschema:"description=Bid Amount,minimum=1"`
	ConversionDomain        string                 `json:"conversion_domain,omitempty" jsonschema:"description=Conversion Domain"`
	Creative                *AdCreative            `json:"creative" jsonschema:"description=Creative,required"`
	CreativeAssetGroupsSpec map[string]interface{} `json:"creative_asset_groups_spec,omitempty" jsonschema:"description=Creative Asset Groups Spec"`
	DateFormat              string                 `json:"date_format,omitempty" jsonschema:"description=Date Format"`
	DisplaySequence         int                    `json:"display_sequence,omitempty" jsonschema:"description=Display Sequence"`
	DraftAdgroupId          string                 `json:"draft_adgroup_id,omitempty" jsonschema:"description=ID of the Draft Adgroup,pattern=^[0-9]+$"`
	EngagementAudience      bool                   `json:"engagement_audience,omitempty" jsonschema:"description=Engagement Audience"`
	ExecutionOptions        []string               `json:"execution_options,omitempty" jsonschema:"description=Execution Options"`
	IncludeDemolinkHashes   bool                   `json:"include_demolink_hashes,omitempty" jsonschema:"description=Include Demolink Hashes"`
	Name                    string                 `json:"name" jsonschema:"description=Name,required"`
	Priority                int                    `json:"priority,omitempty" jsonschema:"description=Priority"`
	SourceAdId              string                 `json:"source_ad_id,omitempty" jsonschema:"description=ID of the Source Ad,pattern=^[0-9]+$"`
	Status                  string                 `json:"status,omitempty" jsonschema:"description=Status,enum=ACTIVE,enum=PAUSED,enum=DELETED,enum=ARCHIVED"`
	TrackingSpecs           map[string]interface{} `json:"tracking_specs,omitempty" jsonschema:"description=Tracking Specs"`
}

// list_ad_account_ads_reporting_mmm_reportsArgs defines the typed arguments for list_ad_account_ads_reporting_mmm_reports
type list_ad_account_ads_reporting_mmm_reportsArgs struct {
	ID        string                   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields    []string                 `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit     int                      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After     string                   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before    string                   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Filtering []map[string]interface{} `json:"filtering,omitempty" jsonschema:"description=Filtering"`
}

// list_ad_account_ads_reporting_mmm_schedulersArgs defines the typed arguments for list_ad_account_ads_reporting_mmm_schedulers
type list_ad_account_ads_reporting_mmm_schedulersArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// get_ad_account_ads_volumeArgs defines the typed arguments for get_ad_account_ads_volume
type get_ad_account_ads_volumeArgs struct {
	Fields               []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit                int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After                string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before               string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	PageId               string   `json:"page_id,omitempty" jsonschema:"description=ID of the Page,pattern=^[0-9]+$"`
	RecommendationType   string   `json:"recommendation_type,omitempty" jsonschema:"description=Recommendation Type"`
	ShowBreakdownByActor bool     `json:"show_breakdown_by_actor,omitempty" jsonschema:"description=Show Breakdown By Actor"`
}

// list_ad_account_adsbylabelsArgs defines the typed arguments for list_ad_account_adsbylabels
type list_ad_account_adsbylabelsArgs struct {
	ID         string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields     []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit      int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After      string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before     string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AdLabelIds []string `json:"ad_label_ids" jsonschema:"description=Ad Label Ids,required,pattern=^[0-9]+$"`
	Operator   string   `json:"operator,omitempty" jsonschema:"description=Operator"`
}

// list_ad_account_adsetsArgs defines the typed arguments for list_ad_account_adsets
type list_ad_account_adsetsArgs struct {
	ID              string                 `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields          []string               `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit           int                    `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After           string                 `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before          string                 `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	DatePreset      string                 `json:"date_preset,omitempty" jsonschema:"description=Date Preset"`
	EffectiveStatus []string               `json:"effective_status,omitempty" jsonschema:"description=Effective Status"`
	IsCompleted     bool                   `json:"is_completed,omitempty" jsonschema:"description=Is Completed"`
	TimeRange       map[string]interface{} `json:"time_range,omitempty" jsonschema:"description=Time Range"`
	UpdatedSince    int                    `json:"updated_since,omitempty" jsonschema:"description=When last updated"`
}

// create_ad_account_adsetArgs defines the typed arguments for create_ad_account_adset
type create_ad_account_adsetArgs struct {
	ID                                string                   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Adlabels                          []*AdLabel               `json:"adlabels,omitempty" jsonschema:"description=Adlabels"`
	AdsetSchedule                     []map[string]interface{} `json:"adset_schedule,omitempty" jsonschema:"description=Adset Schedule"`
	AttributionSpec                   []map[string]interface{} `json:"attribution_spec,omitempty" jsonschema:"description=Attribution Spec"`
	BidAdjustments                    map[string]interface{}   `json:"bid_adjustments,omitempty" jsonschema:"description=Bid Adjustments"`
	BidAmount                         int                      `json:"bid_amount,omitempty" jsonschema:"description=Bid Amount,minimum=1"`
	BidConstraints                    map[string]interface{}   `json:"bid_constraints,omitempty" jsonschema:"description=Bid Constraints"`
	BidStrategy                       string                   `json:"bid_strategy,omitempty" jsonschema:"description=Bid Strategy"`
	BillingEvent                      string                   `json:"billing_event,omitempty" jsonschema:"description=Billing Event"`
	BudgetSource                      string                   `json:"budget_source,omitempty" jsonschema:"description=Budget Source"`
	BudgetSplitSetId                  string                   `json:"budget_split_set_id,omitempty" jsonschema:"description=ID of the Budget Split Set,pattern=^[0-9]+$"`
	CampaignAttribution               map[string]interface{}   `json:"campaign_attribution,omitempty" jsonschema:"description=Campaign Attribution"`
	CampaignId                        string                   `json:"campaign_id,omitempty" jsonschema:"description=ID of the Campaign,pattern=^[0-9]+$"`
	CampaignSpec                      map[string]interface{}   `json:"campaign_spec,omitempty" jsonschema:"description=Campaign Spec"`
	CreativeSequence                  []string                 `json:"creative_sequence,omitempty" jsonschema:"description=Creative Sequence"`
	CreativeSequenceRepetitionPattern string                   `json:"creative_sequence_repetition_pattern,omitempty" jsonschema:"description=Creative Sequence Repetition Pattern"`
	DailyBudget                       int                      `json:"daily_budget,omitempty" jsonschema:"description=Daily Budget,minimum=1"`
	DailyImps                         int                      `json:"daily_imps,omitempty" jsonschema:"description=Daily Imps"`
	DailyMinSpendTarget               int                      `json:"daily_min_spend_target,omitempty" jsonschema:"description=Daily Min Spend Target"`
	DailySpendCap                     int                      `json:"daily_spend_cap,omitempty" jsonschema:"description=Daily Spend Cap"`
	DateFormat                        string                   `json:"date_format,omitempty" jsonschema:"description=Date Format"`
	DestinationType                   string                   `json:"destination_type,omitempty" jsonschema:"description=Destination Type"`
	DsaBeneficiary                    string                   `json:"dsa_beneficiary,omitempty" jsonschema:"description=Dsa Beneficiary"`
	DsaPayor                          string                   `json:"dsa_payor,omitempty" jsonschema:"description=Dsa Payor"`
	EndTime                           string                   `json:"end_time,omitempty" jsonschema:"description=End Time,format=date-time"`
	ExecutionOptions                  []string                 `json:"execution_options,omitempty" jsonschema:"description=Execution Options"`
	ExistingCustomerBudgetPercentage  int                      `json:"existing_customer_budget_percentage,omitempty" jsonschema:"description=Existing Customer Budget Percentage,minimum=13,maximum=100"`
	FrequencyControlSpecs             []map[string]interface{} `json:"frequency_control_specs,omitempty" jsonschema:"description=Frequency Control Specs"`
	FullFunnelExplorationMode         string                   `json:"full_funnel_exploration_mode,omitempty" jsonschema:"description=Full Funnel Exploration Mode"`
	IsBaSkipDelayedEligible           bool                     `json:"is_ba_skip_delayed_eligible,omitempty" jsonschema:"description=Is Ba Skip Delayed Eligible"`
	IsDynamicCreative                 bool                     `json:"is_dynamic_creative,omitempty" jsonschema:"description=Is Dynamic Creative"`
	IsIncrementalAttributionEnabled   bool                     `json:"is_incremental_attribution_enabled,omitempty" jsonschema:"description=Is Incremental Attribution Enabled"`
	IsSacCfcaTermsCertified           bool                     `json:"is_sac_cfca_terms_certified,omitempty" jsonschema:"description=Is Sac Cfca Terms Certified"`
	LifetimeBudget                    int                      `json:"lifetime_budget,omitempty" jsonschema:"description=Lifetime Budget,minimum=1"`
	LifetimeImps                      int                      `json:"lifetime_imps,omitempty" jsonschema:"description=Lifetime Imps"`
	LifetimeMinSpendTarget            int                      `json:"lifetime_min_spend_target,omitempty" jsonschema:"description=Lifetime Min Spend Target"`
	LifetimeSpendCap                  int                      `json:"lifetime_spend_cap,omitempty" jsonschema:"description=Lifetime Spend Cap"`
	LineNumber                        int                      `json:"line_number,omitempty" jsonschema:"description=Line Number"`
	MaxBudgetSpendPercentage          int                      `json:"max_budget_spend_percentage,omitempty" jsonschema:"description=Max Budget Spend Percentage,minimum=13,maximum=100"`
	MinBudgetSpendPercentage          int                      `json:"min_budget_spend_percentage,omitempty" jsonschema:"description=Min Budget Spend Percentage,minimum=13,maximum=100"`
	MultiOptimizationGoalWeight       string                   `json:"multi_optimization_goal_weight,omitempty" jsonschema:"description=Multi Optimization Goal Weight"`
	Name                              string                   `json:"name" jsonschema:"description=Name,required"`
	OptimizationGoal                  string                   `json:"optimization_goal,omitempty" jsonschema:"description=Optimization Goal"`
	OptimizationSubEvent              string                   `json:"optimization_sub_event,omitempty" jsonschema:"description=Optimization Sub Event"`
	PacingType                        []string                 `json:"pacing_type,omitempty" jsonschema:"description=Pacing Type"`
	PromotedObject                    *AdPromotedObject        `json:"promoted_object,omitempty" jsonschema:"description=Promoted Object"`
	RbPredictionId                    string                   `json:"rb_prediction_id,omitempty" jsonschema:"description=ID of the Rb Prediction,pattern=^[0-9]+$"`
	RegionalRegulatedCategories       []string                 `json:"regional_regulated_categories,omitempty" jsonschema:"description=Regional Regulated Categories"`
	RegionalRegulationIdentities      map[string]interface{}   `json:"regional_regulation_identities,omitempty" jsonschema:"description=Regional Regulation Identities,pattern=^[0-9]+$"`
	RfPredictionId                    string                   `json:"rf_prediction_id,omitempty" jsonschema:"description=ID of the Rf Prediction,pattern=^[0-9]+$"`
	SourceAdsetId                     string                   `json:"source_adset_id,omitempty" jsonschema:"description=ID of the Source Adset,pattern=^[0-9]+$"`
	StartTime                         string                   `json:"start_time,omitempty" jsonschema:"description=Start Time,format=date-time"`
	Status                            string                   `json:"status,omitempty" jsonschema:"description=Status,enum=ACTIVE,enum=PAUSED,enum=DELETED,enum=ARCHIVED"`
	Targeting                         *Targeting               `json:"targeting,omitempty" jsonschema:"description=Targeting"`
	TimeBasedAdRotationIdBlocks       []interface{}            `json:"time_based_ad_rotation_id_blocks,omitempty" jsonschema:"description=Time Based Ad Rotation ID Blocks,pattern=^[0-9]+$"`
	TimeBasedAdRotationIntervals      []interface{}            `json:"time_based_ad_rotation_intervals,omitempty" jsonschema:"description=Time Based Ad Rotation Intervals"`
	TimeStart                         string                   `json:"time_start,omitempty" jsonschema:"description=Time Start,format=date-time"`
	TimeStop                          string                   `json:"time_stop,omitempty" jsonschema:"description=Time Stop,format=date-time"`
	ToplineId                         string                   `json:"topline_id,omitempty" jsonschema:"description=ID of the Topline,pattern=^[0-9]+$"`
	TuneForCategory                   string                   `json:"tune_for_category,omitempty" jsonschema:"description=Tune For Category"`
}

// list_ad_account_adsetsbylabelsArgs defines the typed arguments for list_ad_account_adsetsbylabels
type list_ad_account_adsetsbylabelsArgs struct {
	ID         string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields     []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit      int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After      string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before     string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AdLabelIds []string `json:"ad_label_ids" jsonschema:"description=Ad Label Ids,required,pattern=^[0-9]+$"`
	Operator   string   `json:"operator,omitempty" jsonschema:"description=Operator"`
}

// list_ad_account_adspixelsArgs defines the typed arguments for list_ad_account_adspixels
type list_ad_account_adspixelsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	SortBy string   `json:"sort_by,omitempty" jsonschema:"description=Sort By"`
}

// create_ad_account_adspixelArgs defines the typed arguments for create_ad_account_adspixel
type create_ad_account_adspixelArgs struct {
	ID   string `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Name string `json:"name,omitempty" jsonschema:"description=Name"`
}

// list_ad_account_advertisable_applicationsArgs defines the typed arguments for list_ad_account_advertisable_applications
type list_ad_account_advertisable_applicationsArgs struct {
	ID         string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields     []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit      int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After      string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before     string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AppId      string   `json:"app_id,omitempty" jsonschema:"description=ID of the App,pattern=^[0-9]+$"`
	BusinessId string   `json:"business_id,omitempty" jsonschema:"description=ID of the Business,pattern=^[0-9]+$"`
}

// remove_advideos_from_ad_accountArgs defines the typed arguments for remove_advideos_from_ad_account
type remove_advideos_from_ad_accountArgs struct {
	ID      string `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	VideoId string `json:"video_id" jsonschema:"description=ID of the Video,required,pattern=^[0-9]+$"`
}

// list_ad_account_advideosArgs defines the typed arguments for list_ad_account_advideos
type list_ad_account_advideosArgs struct {
	ID             string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields         []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit          int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After          string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before         string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	MaxAspectRatio float64  `json:"max_aspect_ratio,omitempty" jsonschema:"description=Max Aspect Ratio"`
	Maxheight      int      `json:"maxheight,omitempty" jsonschema:"description=Maxheight"`
	Maxlength      int      `json:"maxlength,omitempty" jsonschema:"description=Maxlength"`
	Maxwidth       int      `json:"maxwidth,omitempty" jsonschema:"description=Maxwidth"`
	MinAspectRatio float64  `json:"min_aspect_ratio,omitempty" jsonschema:"description=Min Aspect Ratio"`
	Minheight      int      `json:"minheight,omitempty" jsonschema:"description=Minheight"`
	Minlength      int      `json:"minlength,omitempty" jsonschema:"description=Minlength"`
	Minwidth       int      `json:"minwidth,omitempty" jsonschema:"description=Minwidth"`
	Title          string   `json:"title,omitempty" jsonschema:"description=Title"`
}

// create_ad_account_advideoArgs defines the typed arguments for create_ad_account_advideo
type create_ad_account_advideoArgs struct {
	ID                            string                 `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	ApplicationId                 string                 `json:"application_id,omitempty" jsonschema:"description=ID of the Application,pattern=^[0-9]+$"`
	AskedFunFactPromptId          int                    `json:"asked_fun_fact_prompt_id,omitempty" jsonschema:"description=ID of the Asked Fun Fact Prompt,pattern=^[0-9]+$"`
	AudioStoryWaveAnimationHandle string                 `json:"audio_story_wave_animation_handle,omitempty" jsonschema:"description=Audio Story Wave Animation Handle"`
	ChunkSessionId                string                 `json:"chunk_session_id,omitempty" jsonschema:"description=ID of the Chunk Session,pattern=^[0-9]+$"`
	ComposerEntryPicker           string                 `json:"composer_entry_picker,omitempty" jsonschema:"description=Composer Entry Picker"`
	ComposerEntryPoint            string                 `json:"composer_entry_point,omitempty" jsonschema:"description=Composer Entry Point"`
	ComposerEntryTime             int                    `json:"composer_entry_time,omitempty" jsonschema:"description=Composer Entry Time"`
	ComposerSessionEventsLog      string                 `json:"composer_session_events_log,omitempty" jsonschema:"description=Composer Session Events Log"`
	ComposerSessionId             string                 `json:"composer_session_id,omitempty" jsonschema:"description=ID of the Composer Session,pattern=^[0-9]+$"`
	ComposerSourceSurface         string                 `json:"composer_source_surface,omitempty" jsonschema:"description=Composer Source Surface"`
	ComposerType                  string                 `json:"composer_type,omitempty" jsonschema:"description=Composer Type"`
	ContainerType                 string                 `json:"container_type,omitempty" jsonschema:"description=Container Type"`
	ContentCategory               string                 `json:"content_category,omitempty" jsonschema:"description=Content Category"`
	CreativeTools                 string                 `json:"creative_tools,omitempty" jsonschema:"description=Creative Tools"`
	Description                   string                 `json:"description,omitempty" jsonschema:"description=Description"`
	Embeddable                    bool                   `json:"embeddable,omitempty" jsonschema:"description=Embeddable"`
	EndOffset                     int                    `json:"end_offset,omitempty" jsonschema:"description=End Offset"`
	FbuploaderVideoFileChunk      string                 `json:"fbuploader_video_file_chunk,omitempty" jsonschema:"description=Fbuploader Video File Chunk"`
	FileSize                      int                    `json:"file_size,omitempty" jsonschema:"description=File Size"`
	FileUrl                       string                 `json:"file_url,omitempty" jsonschema:"description=File URL,format=uri"`
	FisheyeVideoCropped           bool                   `json:"fisheye_video_cropped,omitempty" jsonschema:"description=Fisheye Video Cropped"`
	Formatting                    string                 `json:"formatting,omitempty" jsonschema:"description=Formatting"`
	Fov                           int                    `json:"fov,omitempty" jsonschema:"description=Fov"`
	FrontZRotation                float64                `json:"front_z_rotation,omitempty" jsonschema:"description=Front Z Rotation"`
	FunFactPromptId               string                 `json:"fun_fact_prompt_id,omitempty" jsonschema:"description=ID of the Fun Fact Prompt,pattern=^[0-9]+$"`
	FunFactToasteeId              int                    `json:"fun_fact_toastee_id,omitempty" jsonschema:"description=ID of the Fun Fact Toastee,pattern=^[0-9]+$"`
	Guide                         []interface{}          `json:"guide,omitempty" jsonschema:"description=Guide"`
	GuideEnabled                  bool                   `json:"guide_enabled,omitempty" jsonschema:"description=Guide Enabled"`
	InitialHeading                int                    `json:"initial_heading,omitempty" jsonschema:"description=Initial Heading"`
	InitialPitch                  int                    `json:"initial_pitch,omitempty" jsonschema:"description=Initial Pitch"`
	InstantGameEntryPointData     string                 `json:"instant_game_entry_point_data,omitempty" jsonschema:"description=Instant Game Entry Point Data"`
	IsBoostIntended               bool                   `json:"is_boost_intended,omitempty" jsonschema:"description=Is Boost Intended"`
	IsGroupLinkingPost            bool                   `json:"is_group_linking_post,omitempty" jsonschema:"description=Is Group Linking Post"`
	IsPartnershipAd               bool                   `json:"is_partnership_ad,omitempty" jsonschema:"description=Is Partnership Ad"`
	IsVoiceClip                   bool                   `json:"is_voice_clip,omitempty" jsonschema:"description=Is Voice Clip"`
	LocationSourceId              string                 `json:"location_source_id,omitempty" jsonschema:"description=ID of the Location Source,pattern=^[0-9]+$"`
	Name                          string                 `json:"name,omitempty" jsonschema:"description=Name"`
	OgActionTypeId                string                 `json:"og_action_type_id,omitempty" jsonschema:"description=ID of the Og Action Type,pattern=^[0-9]+$"`
	OgIconId                      string                 `json:"og_icon_id,omitempty" jsonschema:"description=ID of the Og Icon,pattern=^[0-9]+$"`
	OgObjectId                    string                 `json:"og_object_id,omitempty" jsonschema:"description=ID of the Og Object,pattern=^[0-9]+$"`
	OgPhrase                      string                 `json:"og_phrase,omitempty" jsonschema:"description=Og Phrase"`
	OgSuggestionMechanism         string                 `json:"og_suggestion_mechanism,omitempty" jsonschema:"description=Og Suggestion Mechanism"`
	OriginalFov                   int                    `json:"original_fov,omitempty" jsonschema:"description=Original Fov"`
	OriginalProjectionType        string                 `json:"original_projection_type,omitempty" jsonschema:"description=Original Projection Type"`
	PartnershipAdAdCode           string                 `json:"partnership_ad_ad_code,omitempty" jsonschema:"description=Partnership Ad Ad Code"`
	PublishEventId                int                    `json:"publish_event_id,omitempty" jsonschema:"description=ID of the Publish Event,pattern=^[0-9]+$"`
	ReferencedStickerId           string                 `json:"referenced_sticker_id,omitempty" jsonschema:"description=ID of the Referenced Sticker,pattern=^[0-9]+$"`
	ReplaceVideoId                string                 `json:"replace_video_id,omitempty" jsonschema:"description=ID of the Replace Video,pattern=^[0-9]+$"`
	SlideshowSpec                 map[string]interface{} `json:"slideshow_spec,omitempty" jsonschema:"description=Slideshow Spec"`
	Source                        string                 `json:"source,omitempty" jsonschema:"description=Source"`
	SourceInstagramMediaId        string                 `json:"source_instagram_media_id,omitempty" jsonschema:"description=ID of the Source Instagram Media,pattern=^[0-9]+$"`
	Spherical                     bool                   `json:"spherical,omitempty" jsonschema:"description=Spherical"`
	StartOffset                   int                    `json:"start_offset,omitempty" jsonschema:"description=Start Offset"`
	SwapMode                      string                 `json:"swap_mode,omitempty" jsonschema:"description=Swap Mode"`
	TextFormatMetadata            string                 `json:"text_format_metadata,omitempty" jsonschema:"description=Text Format Metadata"`
	Thumb                         interface{}            `json:"thumb,omitempty" jsonschema:"description=Thumb"`
	TimeSinceOriginalPost         int                    `json:"time_since_original_post,omitempty" jsonschema:"description=Time Since Original Post"`
	Title                         string                 `json:"title,omitempty" jsonschema:"description=Title"`
	TranscodeSettingProperties    string                 `json:"transcode_setting_properties,omitempty" jsonschema:"description=Transcode Setting Properties"`
	UnpublishedContentType        string                 `json:"unpublished_content_type,omitempty" jsonschema:"description=Unpublished Content Type"`
	UploadPhase                   string                 `json:"upload_phase,omitempty" jsonschema:"description=Upload Phase"`
	UploadSessionId               string                 `json:"upload_session_id,omitempty" jsonschema:"description=ID of the Upload Session,pattern=^[0-9]+$"`
	UploadSettingProperties       string                 `json:"upload_setting_properties,omitempty" jsonschema:"description=Upload Setting Properties"`
	VideoFileChunk                string                 `json:"video_file_chunk,omitempty" jsonschema:"description=Video File Chunk"`
	VideoIdOriginal               string                 `json:"video_id_original,omitempty" jsonschema:"description=Video ID Original,pattern=^[0-9]+$"`
	VideoStartTimeMs              int                    `json:"video_start_time_ms,omitempty" jsonschema:"description=Video Start Time Ms"`
	WaterfallId                   string                 `json:"waterfall_id,omitempty" jsonschema:"description=ID of the Waterfall,pattern=^[0-9]+$"`
}

// list_ad_account_affectedadsetsArgs defines the typed arguments for list_ad_account_affectedadsets
type list_ad_account_affectedadsetsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// remove_agencies_from_ad_accountArgs defines the typed arguments for remove_agencies_from_ad_account
type remove_agencies_from_ad_accountArgs struct {
	ID       string `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Business string `json:"business" jsonschema:"description=Business,required"`
}

// list_ad_account_agenciesArgs defines the typed arguments for list_ad_account_agencies
type list_ad_account_agenciesArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// create_ad_account_agencieArgs defines the typed arguments for create_ad_account_agencie
type create_ad_account_agencieArgs struct {
	ID             string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Business       string   `json:"business" jsonschema:"description=Business,required"`
	PermittedTasks []string `json:"permitted_tasks,omitempty" jsonschema:"description=Permitted Tasks"`
}

// list_ad_account_applicationsArgs defines the typed arguments for list_ad_account_applications
type list_ad_account_applicationsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// remove_assigned_users_from_ad_accountArgs defines the typed arguments for remove_assigned_users_from_ad_account
type remove_assigned_users_from_ad_accountArgs struct {
	ID   string `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	User int    `json:"user" jsonschema:"description=User,required"`
}

// list_ad_account_assigned_usersArgs defines the typed arguments for list_ad_account_assigned_users
type list_ad_account_assigned_usersArgs struct {
	ID       string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields   []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit    int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After    string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before   string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Business string   `json:"business" jsonschema:"description=Business,required"`
}

// create_ad_account_assigned_userArgs defines the typed arguments for create_ad_account_assigned_user
type create_ad_account_assigned_userArgs struct {
	ID    string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Tasks []string `json:"tasks,omitempty" jsonschema:"description=Tasks"`
	User  int      `json:"user" jsonschema:"description=User,required"`
}

// create_ad_account_async_batch_requestArgs defines the typed arguments for create_ad_account_async_batch_request
type create_ad_account_async_batch_requestArgs struct {
	ID      string                   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Adbatch []map[string]interface{} `json:"adbatch" jsonschema:"description=Adbatch,required"`
	Name    string                   `json:"name" jsonschema:"description=Name,required"`
}

// list_ad_account_async_requestsArgs defines the typed arguments for list_ad_account_async_requests
type list_ad_account_async_requestsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Status string   `json:"status,omitempty" jsonschema:"description=Status,enum=ACTIVE,enum=PAUSED,enum=DELETED,enum=ARCHIVED"`
	Type   string   `json:"type,omitempty" jsonschema:"description=Type"`
}

// list_ad_account_asyncadcreativesArgs defines the typed arguments for list_ad_account_asyncadcreatives
type list_ad_account_asyncadcreativesArgs struct {
	ID          string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields      []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit       int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After       string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before      string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	IsCompleted bool     `json:"is_completed,omitempty" jsonschema:"description=Is Completed"`
}

// create_ad_account_asyncadcreativeArgs defines the typed arguments for create_ad_account_asyncadcreative
type create_ad_account_asyncadcreativeArgs struct {
	ID               string      `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	CreativeSpec     *AdCreative `json:"creative_spec" jsonschema:"description=Creative Spec,required"`
	Name             string      `json:"name" jsonschema:"description=Name,required"`
	NotificationMode string      `json:"notification_mode,omitempty" jsonschema:"description=Notification Mode"`
	NotificationUri  string      `json:"notification_uri,omitempty" jsonschema:"description=Notification Uri"`
}

// list_ad_account_asyncadrequestsetsArgs defines the typed arguments for list_ad_account_asyncadrequestsets
type list_ad_account_asyncadrequestsetsArgs struct {
	ID          string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields      []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit       int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After       string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before      string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	IsCompleted bool     `json:"is_completed,omitempty" jsonschema:"description=Is Completed"`
}

// create_ad_account_asyncadrequestsetArgs defines the typed arguments for create_ad_account_asyncadrequestset
type create_ad_account_asyncadrequestsetArgs struct {
	ID               string                   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	AdSpecs          []map[string]interface{} `json:"ad_specs" jsonschema:"description=Ad Specs,required"`
	Name             string                   `json:"name" jsonschema:"description=Name,required"`
	NotificationMode string                   `json:"notification_mode,omitempty" jsonschema:"description=Notification Mode"`
	NotificationUri  string                   `json:"notification_uri,omitempty" jsonschema:"description=Notification Uri"`
}

// get_ad_account_audience_funnelArgs defines the typed arguments for get_ad_account_audience_funnel
type get_ad_account_audience_funnelArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// create_ad_account_block_list_draftArgs defines the typed arguments for create_ad_account_block_list_draft
type create_ad_account_block_list_draftArgs struct {
	ID                string      `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	PublisherUrlsFile interface{} `json:"publisher_urls_file" jsonschema:"description=Publisher Urls File,required"`
}

// create_ad_account_brand_safety_content_filter_levelArgs defines the typed arguments for create_ad_account_brand_safety_content_filter_level
type create_ad_account_brand_safety_content_filter_levelArgs struct {
	ID                             string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	BrandSafetyContentFilterLevels []string `json:"brand_safety_content_filter_levels" jsonschema:"description=Brand Safety Content Filter Levels,required"`
	BusinessId                     string   `json:"business_id,omitempty" jsonschema:"description=ID of the Business,pattern=^[0-9]+$"`
}

// list_ad_account_broadtargetingcategoriesArgs defines the typed arguments for list_ad_account_broadtargetingcategories
type list_ad_account_broadtargetingcategoriesArgs struct {
	ID                   string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields               []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit                int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After                string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before               string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	CustomCategoriesOnly bool     `json:"custom_categories_only,omitempty" jsonschema:"description=Custom Categories Only"`
}

// list_ad_account_businessprojectsArgs defines the typed arguments for list_ad_account_businessprojects
type list_ad_account_businessprojectsArgs struct {
	ID       string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields   []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit    int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After    string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before   string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Business string   `json:"business,omitempty" jsonschema:"description=Business"`
}

// remove_campaigns_from_ad_accountArgs defines the typed arguments for remove_campaigns_from_ad_account
type remove_campaigns_from_ad_accountArgs struct {
	ID             string `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	BeforeDate     string `json:"before_date,omitempty" jsonschema:"description=Before Date,format=date-time"`
	DeleteOffset   int    `json:"delete_offset,omitempty" jsonschema:"description=Delete Offset"`
	DeleteStrategy string `json:"delete_strategy" jsonschema:"description=Delete Strategy,required"`
	ObjectCount    int    `json:"object_count,omitempty" jsonschema:"description=Object Count"`
}

// list_ad_account_campaignsArgs defines the typed arguments for list_ad_account_campaigns
type list_ad_account_campaignsArgs struct {
	ID              string                 `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields          []string               `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit           int                    `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After           string                 `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before          string                 `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	DatePreset      string                 `json:"date_preset,omitempty" jsonschema:"description=Date Preset"`
	EffectiveStatus []string               `json:"effective_status,omitempty" jsonschema:"description=Effective Status"`
	IsCompleted     bool                   `json:"is_completed,omitempty" jsonschema:"description=Is Completed"`
	TimeRange       map[string]interface{} `json:"time_range,omitempty" jsonschema:"description=Time Range"`
}

// create_ad_account_campaignArgs defines the typed arguments for create_ad_account_campaign
type create_ad_account_campaignArgs struct {
	ID                        string                   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Adlabels                  []*AdLabel               `json:"adlabels,omitempty" jsonschema:"description=Adlabels"`
	BidStrategy               string                   `json:"bid_strategy,omitempty" jsonschema:"description=Bid Strategy"`
	BuyingType                string                   `json:"buying_type,omitempty" jsonschema:"description=Buying Type"`
	DailyBudget               int                      `json:"daily_budget,omitempty" jsonschema:"description=Daily Budget,minimum=1"`
	ExecutionOptions          []string                 `json:"execution_options,omitempty" jsonschema:"description=Execution Options"`
	IsSkadnetworkAttribution  bool                     `json:"is_skadnetwork_attribution,omitempty" jsonschema:"description=Is Skadnetwork Attribution"`
	IterativeSplitTestConfigs []map[string]interface{} `json:"iterative_split_test_configs,omitempty" jsonschema:"description=Iterative Split Test Configs"`
	LifetimeBudget            int                      `json:"lifetime_budget,omitempty" jsonschema:"description=Lifetime Budget,minimum=1"`
	Name                      string                   `json:"name,omitempty" jsonschema:"description=Name"`
	Objective                 string                   `json:"objective,omitempty" jsonschema:"description=Objective"`
	PacingType                []string                 `json:"pacing_type,omitempty" jsonschema:"description=Pacing Type"`
	PromotedObject            *AdPromotedObject        `json:"promoted_object,omitempty" jsonschema:"description=Promoted Object"`
	SmartPromotionType        string                   `json:"smart_promotion_type,omitempty" jsonschema:"description=Smart Promotion Type"`
	SourceCampaignId          string                   `json:"source_campaign_id,omitempty" jsonschema:"description=ID of the Source Campaign,pattern=^[0-9]+$"`
	SpecialAdCategories       []string                 `json:"special_ad_categories" jsonschema:"description=Special Ad Categories,required"`
	SpecialAdCategoryCountry  []string                 `json:"special_ad_category_country,omitempty" jsonschema:"description=Special Ad Category Country"`
	SpendCap                  int                      `json:"spend_cap,omitempty" jsonschema:"description=Spend Cap"`
	StartTime                 string                   `json:"start_time,omitempty" jsonschema:"description=Start Time,format=date-time"`
	Status                    string                   `json:"status,omitempty" jsonschema:"description=Status,enum=ACTIVE,enum=PAUSED,enum=DELETED,enum=ARCHIVED"`
	StopTime                  string                   `json:"stop_time,omitempty" jsonschema:"description=Stop Time,format=date-time"`
	ToplineId                 string                   `json:"topline_id,omitempty" jsonschema:"description=ID of the Topline,pattern=^[0-9]+$"`
}

// list_ad_account_campaignsbylabelsArgs defines the typed arguments for list_ad_account_campaignsbylabels
type list_ad_account_campaignsbylabelsArgs struct {
	ID         string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields     []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit      int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After      string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before     string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AdLabelIds []string `json:"ad_label_ids" jsonschema:"description=Ad Label Ids,required,pattern=^[0-9]+$"`
	Operator   string   `json:"operator,omitempty" jsonschema:"description=Operator"`
}

// list_ad_account_connected_instagram_accountsArgs defines the typed arguments for list_ad_account_connected_instagram_accounts
type list_ad_account_connected_instagram_accountsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// get_ad_account_connected_instagram_accounts_with_iabpArgs defines the typed arguments for get_ad_account_connected_instagram_accounts_with_iabp
type get_ad_account_connected_instagram_accounts_with_iabpArgs struct {
	ID         string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields     []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit      int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After      string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before     string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	BusinessId string   `json:"business_id,omitempty" jsonschema:"description=ID of the Business,pattern=^[0-9]+$"`
}

// list_ad_account_conversion_goalsArgs defines the typed arguments for list_ad_account_conversion_goals
type list_ad_account_conversion_goalsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// list_ad_account_customaudiencesArgs defines the typed arguments for list_ad_account_customaudiences
type list_ad_account_customaudiencesArgs struct {
	ID                   string                   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields               []string                 `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit                int                      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After                string                   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before               string                   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	BusinessId           string                   `json:"business_id,omitempty" jsonschema:"description=ID of the Business,pattern=^[0-9]+$"`
	FetchPrimaryAudience bool                     `json:"fetch_primary_audience,omitempty" jsonschema:"description=Fetch Primary Audience"`
	Filtering            []map[string]interface{} `json:"filtering,omitempty" jsonschema:"description=Filtering"`
	PixelId              string                   `json:"pixel_id,omitempty" jsonschema:"description=ID of the Pixel,pattern=^[0-9]+$"`
}

// create_ad_account_customaudienceArgs defines the typed arguments for create_ad_account_customaudience
type create_ad_account_customaudienceArgs struct {
	ID                            string                   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	AllowedDomains                []string                 `json:"allowed_domains,omitempty" jsonschema:"description=Allowed Domains"`
	AssociatedAudienceId          int                      `json:"associated_audience_id,omitempty" jsonschema:"description=ID of the Associated Audience,pattern=^[0-9]+$"`
	ClaimObjective                string                   `json:"claim_objective,omitempty" jsonschema:"description=Claim Objective"`
	ContentType                   string                   `json:"content_type,omitempty" jsonschema:"description=Content Type"`
	Countries                     string                   `json:"countries,omitempty" jsonschema:"description=Countries"`
	CreationParams                map[string]interface{}   `json:"creation_params,omitempty" jsonschema:"description=Creation Params"`
	CustomerFileSource            string                   `json:"customer_file_source,omitempty" jsonschema:"description=Customer File Source"`
	DatasetId                     string                   `json:"dataset_id,omitempty" jsonschema:"description=ID of the Dataset,pattern=^[0-9]+$"`
	Description                   string                   `json:"description,omitempty" jsonschema:"description=Description"`
	EnableFetchOrCreate           bool                     `json:"enable_fetch_or_create,omitempty" jsonschema:"description=Enable Fetch Or Create"`
	EventSourceGroup              string                   `json:"event_source_group,omitempty" jsonschema:"description=Event Source Group"`
	EventSources                  []map[string]interface{} `json:"event_sources,omitempty" jsonschema:"description=Event Sources"`
	Exclusions                    []map[string]interface{} `json:"exclusions,omitempty" jsonschema:"description=Exclusions"`
	FacebookPageId                string                   `json:"facebook_page_id,omitempty" jsonschema:"description=ID of the Facebook Page,pattern=^[0-9]+$"`
	Inclusions                    []map[string]interface{} `json:"inclusions,omitempty" jsonschema:"description=Inclusions"`
	IsSnapshot                    bool                     `json:"is_snapshot,omitempty" jsonschema:"description=Is Snapshot"`
	IsValueBased                  bool                     `json:"is_value_based,omitempty" jsonschema:"description=Is Value Based"`
	ListOfAccounts                []interface{}            `json:"list_of_accounts,omitempty" jsonschema:"description=List Of Accounts"`
	LookalikeSpec                 string                   `json:"lookalike_spec,omitempty" jsonschema:"description=Lookalike Spec"`
	MarketingMessageChannels      map[string]interface{}   `json:"marketing_message_channels,omitempty" jsonschema:"description=Marketing Message Channels,minimum=13,maximum=100"`
	Name                          string                   `json:"name,omitempty" jsonschema:"description=Name"`
	OptOutLink                    string                   `json:"opt_out_link,omitempty" jsonschema:"description=Opt Out Link"`
	OriginAudienceId              string                   `json:"origin_audience_id,omitempty" jsonschema:"description=ID of the Origin Audience,pattern=^[0-9]+$"`
	ParentAudienceId              int                      `json:"parent_audience_id,omitempty" jsonschema:"description=ID of the Parent Audience,pattern=^[0-9]+$"`
	PartnerReferenceKey           string                   `json:"partner_reference_key,omitempty" jsonschema:"description=Partner Reference Key"`
	PixelId                       string                   `json:"pixel_id,omitempty" jsonschema:"description=ID of the Pixel,pattern=^[0-9]+$"`
	Prefill                       bool                     `json:"prefill,omitempty" jsonschema:"description=Prefill"`
	ProductSetId                  string                   `json:"product_set_id,omitempty" jsonschema:"description=ID of the Product Set,pattern=^[0-9]+$"`
	RegulatedAudienceSpec         string                   `json:"regulated_audience_spec,omitempty" jsonschema:"description=Regulated Audience Spec"`
	RetentionDays                 int                      `json:"retention_days,omitempty" jsonschema:"description=Retention Days"`
	RevSharePolicyId              int                      `json:"rev_share_policy_id,omitempty" jsonschema:"description=ID of the Rev Share Policy,pattern=^[0-9]+$"`
	Rule                          string                   `json:"rule,omitempty" jsonschema:"description=Rule"`
	RuleAggregation               string                   `json:"rule_aggregation,omitempty" jsonschema:"description=Rule Aggregation"`
	SubscriptionInfo              []string                 `json:"subscription_info,omitempty" jsonschema:"description=Subscription Info"`
	Subtype                       string                   `json:"subtype,omitempty" jsonschema:"description=Subtype"`
	UseForProducts                []string                 `json:"use_for_products,omitempty" jsonschema:"description=Use For Products"`
	UseInCampaigns                bool                     `json:"use_in_campaigns,omitempty" jsonschema:"description=Use In Campaigns"`
	VideoGroupIds                 []string                 `json:"video_group_ids,omitempty" jsonschema:"description=Video Group Ids,pattern=^[0-9]+$"`
	WhatsAppBusinessPhoneNumberId string                   `json:"whats_app_business_phone_number_id,omitempty" jsonschema:"description=ID of the Whats App Business Phone Number,pattern=^[0-9]+$"`
}

// list_ad_account_customaudiencestosArgs defines the typed arguments for list_ad_account_customaudiencestos
type list_ad_account_customaudiencestosArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// create_ad_account_customaudiencestoArgs defines the typed arguments for create_ad_account_customaudiencesto
type create_ad_account_customaudiencestoArgs struct {
	ID         string `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	BusinessId string `json:"business_id,omitempty" jsonschema:"description=ID of the Business,pattern=^[0-9]+$"`
	TosId      string `json:"tos_id" jsonschema:"description=ID of the Tos,required,pattern=^[0-9]+$"`
}

// list_ad_account_customconversionsArgs defines the typed arguments for list_ad_account_customconversions
type list_ad_account_customconversionsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// create_ad_account_customconversionArgs defines the typed arguments for create_ad_account_customconversion
type create_ad_account_customconversionArgs struct {
	ID                     string  `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	ActionSourceType       string  `json:"action_source_type,omitempty" jsonschema:"description=Action Source Type"`
	AdvancedRule           string  `json:"advanced_rule,omitempty" jsonschema:"description=Advanced Rule"`
	CustomEventType        string  `json:"custom_event_type,omitempty" jsonschema:"description=Custom Event Type"`
	DefaultConversionValue float64 `json:"default_conversion_value,omitempty" jsonschema:"description=Default Conversion Value"`
	Description            string  `json:"description,omitempty" jsonschema:"description=Description"`
	EventSourceId          string  `json:"event_source_id,omitempty" jsonschema:"description=ID of the Event Source,pattern=^[0-9]+$"`
	Name                   string  `json:"name" jsonschema:"description=Name,required"`
	Rule                   string  `json:"rule,omitempty" jsonschema:"description=Rule"`
}

// get_ad_account_delivery_estimateArgs defines the typed arguments for get_ad_account_delivery_estimate
type get_ad_account_delivery_estimateArgs struct {
	ID               string            `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields           []string          `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit            int               `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After            string            `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before           string            `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	OptimizationGoal string            `json:"optimization_goal" jsonschema:"description=Optimization Goal,required"`
	PromotedObject   *AdPromotedObject `json:"promoted_object,omitempty" jsonschema:"description=Promoted Object"`
	TargetingSpec    *Targeting        `json:"targeting_spec" jsonschema:"description=Targeting Spec,required"`
}

// list_ad_account_deprecatedtargetingadsetsArgs defines the typed arguments for list_ad_account_deprecatedtargetingadsets
type list_ad_account_deprecatedtargetingadsetsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Type   string   `json:"type,omitempty" jsonschema:"description=Type"`
}

// list_ad_account_dsa_recommendationsArgs defines the typed arguments for list_ad_account_dsa_recommendations
type list_ad_account_dsa_recommendationsArgs struct {
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// list_ad_account_generatepreviewsArgs defines the typed arguments for list_ad_account_generatepreviews
type list_ad_account_generatepreviewsArgs struct {
	ID                   string                 `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields               []string               `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit                int                    `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After                string                 `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before               string                 `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AdFormat             string                 `json:"ad_format" jsonschema:"description=Ad Format,required"`
	Creative             *AdCreative            `json:"creative" jsonschema:"description=Creative,required"`
	CreativeFeature      string                 `json:"creative_feature,omitempty" jsonschema:"description=Creative Feature"`
	DynamicAssetLabel    string                 `json:"dynamic_asset_label,omitempty" jsonschema:"description=Dynamic Asset Label"`
	DynamicCreativeSpec  map[string]interface{} `json:"dynamic_creative_spec,omitempty" jsonschema:"description=Dynamic Creative Spec"`
	DynamicCustomization map[string]interface{} `json:"dynamic_customization,omitempty" jsonschema:"description=Dynamic Customization"`
	EndDate              string                 `json:"end_date,omitempty" jsonschema:"description=End Date,format=date-time"`
	Height               int                    `json:"height,omitempty" jsonschema:"description=Height"`
	Locale               string                 `json:"locale,omitempty" jsonschema:"description=Locale"`
	PlacePageId          int                    `json:"place_page_id,omitempty" jsonschema:"description=ID of the Place Page,pattern=^[0-9]+$"`
	Post                 map[string]interface{} `json:"post,omitempty" jsonschema:"description=Post"`
	ProductItemIds       []string               `json:"product_item_ids,omitempty" jsonschema:"description=Product Item Ids,pattern=^[0-9]+$"`
	RenderType           string                 `json:"render_type,omitempty" jsonschema:"description=Render Type"`
	StartDate            string                 `json:"start_date,omitempty" jsonschema:"description=Start Date,format=date-time"`
	Width                int                    `json:"width,omitempty" jsonschema:"description=Width"`
}

// list_ad_account_impacting_ad_studiesArgs defines the typed arguments for list_ad_account_impacting_ad_studies
type list_ad_account_impacting_ad_studiesArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// get_ad_account_insightsArgs defines the typed arguments for get_ad_account_insights
type get_ad_account_insightsArgs struct {
	ID                           string                   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields                       []string                 `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit                        int                      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After                        string                   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before                       string                   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	ActionAttributionWindows     []string                 `json:"action_attribution_windows,omitempty" jsonschema:"description=Action Attribution Windows"`
	ActionBreakdowns             []string                 `json:"action_breakdowns,omitempty" jsonschema:"description=Action Breakdowns"`
	ActionReportTime             string                   `json:"action_report_time,omitempty" jsonschema:"description=Action Report Time"`
	Breakdowns                   []string                 `json:"breakdowns,omitempty" jsonschema:"description=Breakdowns"`
	DatePreset                   string                   `json:"date_preset,omitempty" jsonschema:"description=Date Preset"`
	DefaultSummary               bool                     `json:"default_summary,omitempty" jsonschema:"description=Default Summary"`
	ExportColumns                []string                 `json:"export_columns,omitempty" jsonschema:"description=Export Columns"`
	ExportFormat                 string                   `json:"export_format,omitempty" jsonschema:"description=Export Format"`
	ExportName                   string                   `json:"export_name,omitempty" jsonschema:"description=Export Name"`
	Filtering                    []map[string]interface{} `json:"filtering,omitempty" jsonschema:"description=Filtering"`
	Level                        string                   `json:"level,omitempty" jsonschema:"description=Level"`
	ProductIdLimit               int                      `json:"product_id_limit,omitempty" jsonschema:"description=Product ID Limit,pattern=^[0-9]+$"`
	Sort                         []string                 `json:"sort,omitempty" jsonschema:"description=Sort"`
	Summary                      []string                 `json:"summary,omitempty" jsonschema:"description=Summary"`
	SummaryActionBreakdowns      []string                 `json:"summary_action_breakdowns,omitempty" jsonschema:"description=Summary Action Breakdowns"`
	TimeIncrement                string                   `json:"time_increment,omitempty" jsonschema:"description=Time Increment"`
	TimeRange                    map[string]interface{}   `json:"time_range,omitempty" jsonschema:"description=Time Range"`
	TimeRanges                   []map[string]interface{} `json:"time_ranges,omitempty" jsonschema:"description=Time Ranges"`
	UseAccountAttributionSetting bool                     `json:"use_account_attribution_setting,omitempty" jsonschema:"description=Use Account Attribution Setting"`
	UseUnifiedAttributionSetting bool                     `json:"use_unified_attribution_setting,omitempty" jsonschema:"description=Use Unified Attribution Setting"`
}

// create_ad_account_insights_reportArgs defines the typed arguments for create_ad_account_insights_report
type create_ad_account_insights_reportArgs struct {
	ID                           string                   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	ActionAttributionWindows     []string                 `json:"action_attribution_windows,omitempty" jsonschema:"description=Action Attribution Windows"`
	ActionBreakdowns             []string                 `json:"action_breakdowns,omitempty" jsonschema:"description=Action Breakdowns"`
	ActionReportTime             string                   `json:"action_report_time,omitempty" jsonschema:"description=Action Report Time"`
	Breakdowns                   []string                 `json:"breakdowns,omitempty" jsonschema:"description=Breakdowns"`
	DatePreset                   string                   `json:"date_preset,omitempty" jsonschema:"description=Date Preset"`
	DefaultSummary               bool                     `json:"default_summary,omitempty" jsonschema:"description=Default Summary"`
	ExportColumns                []string                 `json:"export_columns,omitempty" jsonschema:"description=Export Columns"`
	ExportFormat                 string                   `json:"export_format,omitempty" jsonschema:"description=Export Format"`
	ExportName                   string                   `json:"export_name,omitempty" jsonschema:"description=Export Name"`
	Fields                       []string                 `json:"fields,omitempty" jsonschema:"description=Fields"`
	Filtering                    []map[string]interface{} `json:"filtering,omitempty" jsonschema:"description=Filtering"`
	Level                        string                   `json:"level,omitempty" jsonschema:"description=Level"`
	Limit                        int                      `json:"limit,omitempty" jsonschema:"description=Limit"`
	ProductIdLimit               int                      `json:"product_id_limit,omitempty" jsonschema:"description=Product ID Limit,pattern=^[0-9]+$"`
	Sort                         []string                 `json:"sort,omitempty" jsonschema:"description=Sort"`
	Summary                      []string                 `json:"summary,omitempty" jsonschema:"description=Summary"`
	SummaryActionBreakdowns      []string                 `json:"summary_action_breakdowns,omitempty" jsonschema:"description=Summary Action Breakdowns"`
	TimeIncrement                string                   `json:"time_increment,omitempty" jsonschema:"description=Time Increment"`
	TimeRange                    map[string]interface{}   `json:"time_range,omitempty" jsonschema:"description=Time Range"`
	TimeRanges                   []map[string]interface{} `json:"time_ranges,omitempty" jsonschema:"description=Time Ranges"`
	UseAccountAttributionSetting bool                     `json:"use_account_attribution_setting,omitempty" jsonschema:"description=Use Account Attribution Setting"`
	UseUnifiedAttributionSetting bool                     `json:"use_unified_attribution_setting,omitempty" jsonschema:"description=Use Unified Attribution Setting"`
}

// list_ad_account_instagram_accountsArgs defines the typed arguments for list_ad_account_instagram_accounts
type list_ad_account_instagram_accountsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// list_ad_account_ios_fourteen_campaign_limitsArgs defines the typed arguments for list_ad_account_ios_fourteen_campaign_limits
type list_ad_account_ios_fourteen_campaign_limitsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AppId  string   `json:"app_id" jsonschema:"description=ID of the App,required,pattern=^[0-9]+$"`
}

// list_ad_account_matched_search_applicationsArgs defines the typed arguments for list_ad_account_matched_search_applications
type list_ad_account_matched_search_applicationsArgs struct {
	Fields                 []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit                  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After                  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before                 string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AllowIncompleteApp     bool     `json:"allow_incomplete_app,omitempty" jsonschema:"description=Allow Incomplete App"`
	AppStore               string   `json:"app_store" jsonschema:"description=App Store,required"`
	AppStoreCountry        string   `json:"app_store_country,omitempty" jsonschema:"description=App Store Country"`
	BusinessId             string   `json:"business_id,omitempty" jsonschema:"description=ID of the Business,pattern=^[0-9]+$"`
	IsSkadnetworkSearch    bool     `json:"is_skadnetwork_search,omitempty" jsonschema:"description=Is Skadnetwork Search"`
	OnlyAppsWithPermission bool     `json:"only_apps_with_permission,omitempty" jsonschema:"description=Only Apps With Permission"`
	QueryTerm              string   `json:"query_term" jsonschema:"description=Query Term,required"`
}

// get_ad_account_max_bidArgs defines the typed arguments for get_ad_account_max_bid
type get_ad_account_max_bidArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// list_ad_account_mcmeconversionsArgs defines the typed arguments for list_ad_account_mcmeconversions
type list_ad_account_mcmeconversionsArgs struct {
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// list_ad_account_minimum_budgetsArgs defines the typed arguments for list_ad_account_minimum_budgets
type list_ad_account_minimum_budgetsArgs struct {
	ID        string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields    []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit     int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After     string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before    string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	BidAmount int      `json:"bid_amount,omitempty" jsonschema:"description=Bid Amount,minimum=1"`
}

// list_ad_account_onbehalf_requestsArgs defines the typed arguments for list_ad_account_onbehalf_requests
type list_ad_account_onbehalf_requestsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Status string   `json:"status,omitempty" jsonschema:"description=Status,enum=ACTIVE,enum=PAUSED,enum=DELETED,enum=ARCHIVED"`
}

// create_ad_account_product_audienceArgs defines the typed arguments for create_ad_account_product_audience
type create_ad_account_product_audienceArgs struct {
	ID                   string                   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	AllowedDomains       []string                 `json:"allowed_domains,omitempty" jsonschema:"description=Allowed Domains"`
	AssociatedAudienceId int                      `json:"associated_audience_id,omitempty" jsonschema:"description=ID of the Associated Audience,pattern=^[0-9]+$"`
	ClaimObjective       string                   `json:"claim_objective,omitempty" jsonschema:"description=Claim Objective"`
	ContentType          string                   `json:"content_type,omitempty" jsonschema:"description=Content Type"`
	CreationParams       map[string]interface{}   `json:"creation_params,omitempty" jsonschema:"description=Creation Params"`
	Description          string                   `json:"description,omitempty" jsonschema:"description=Description"`
	EnableFetchOrCreate  bool                     `json:"enable_fetch_or_create,omitempty" jsonschema:"description=Enable Fetch Or Create"`
	EventSourceGroup     string                   `json:"event_source_group,omitempty" jsonschema:"description=Event Source Group"`
	EventSources         []map[string]interface{} `json:"event_sources,omitempty" jsonschema:"description=Event Sources"`
	Exclusions           []map[string]interface{} `json:"exclusions,omitempty" jsonschema:"description=Exclusions"`
	Inclusions           []map[string]interface{} `json:"inclusions,omitempty" jsonschema:"description=Inclusions"`
	IsSnapshot           bool                     `json:"is_snapshot,omitempty" jsonschema:"description=Is Snapshot"`
	IsValueBased         bool                     `json:"is_value_based,omitempty" jsonschema:"description=Is Value Based"`
	Name                 string                   `json:"name" jsonschema:"description=Name,required"`
	OptOutLink           string                   `json:"opt_out_link,omitempty" jsonschema:"description=Opt Out Link"`
	ParentAudienceId     int                      `json:"parent_audience_id,omitempty" jsonschema:"description=ID of the Parent Audience,pattern=^[0-9]+$"`
	ProductSetId         string                   `json:"product_set_id" jsonschema:"description=ID of the Product Set,required,pattern=^[0-9]+$"`
	RevSharePolicyId     int                      `json:"rev_share_policy_id,omitempty" jsonschema:"description=ID of the Rev Share Policy,pattern=^[0-9]+$"`
	Subtype              string                   `json:"subtype,omitempty" jsonschema:"description=Subtype"`
}

// list_ad_account_promote_pagesArgs defines the typed arguments for list_ad_account_promote_pages
type list_ad_account_promote_pagesArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// list_ad_account_publisher_block_listsArgs defines the typed arguments for list_ad_account_publisher_block_lists
type list_ad_account_publisher_block_listsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// create_ad_account_publisher_block_listArgs defines the typed arguments for create_ad_account_publisher_block_list
type create_ad_account_publisher_block_listArgs struct {
	ID   string `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Name string `json:"name,omitempty" jsonschema:"description=Name"`
}

// get_ad_account_reachestimateArgs defines the typed arguments for get_ad_account_reachestimate
type get_ad_account_reachestimateArgs struct {
	ID                 string     `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields             []string   `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit              int        `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After              string     `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before             string     `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AdgroupIds         []string   `json:"adgroup_ids,omitempty" jsonschema:"description=Adgroup Ids,pattern=^[0-9]+$"`
	CallerId           string     `json:"caller_id,omitempty" jsonschema:"description=ID of the Caller,pattern=^[0-9]+$"`
	Concepts           string     `json:"concepts,omitempty" jsonschema:"description=Concepts"`
	CreativeActionSpec string     `json:"creative_action_spec,omitempty" jsonschema:"description=Creative Action Spec"`
	IsDebug            bool       `json:"is_debug,omitempty" jsonschema:"description=Is Debug"`
	ObjectStoreUrl     string     `json:"object_store_url,omitempty" jsonschema:"description=Object Store URL,format=uri"`
	TargetingSpec      *Targeting `json:"targeting_spec" jsonschema:"description=Targeting Spec,required"`
}

// list_ad_account_reachfrequencypredictionsArgs defines the typed arguments for list_ad_account_reachfrequencypredictions
type list_ad_account_reachfrequencypredictionsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// create_ad_account_reachfrequencypredictionArgs defines the typed arguments for create_ad_account_reachfrequencyprediction
type create_ad_account_reachfrequencypredictionArgs struct {
	ID                              string                   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Action                          string                   `json:"action,omitempty" jsonschema:"description=Action"`
	AdFormats                       []map[string]interface{} `json:"ad_formats,omitempty" jsonschema:"description=Ad Formats"`
	AuctionEntryOptionIndex         int                      `json:"auction_entry_option_index,omitempty" jsonschema:"description=Auction Entry Option Index"`
	Budget                          int                      `json:"budget,omitempty" jsonschema:"description=Budget,minimum=1"`
	BuyingType                      string                   `json:"buying_type,omitempty" jsonschema:"description=Buying Type"`
	CampaignGroupId                 string                   `json:"campaign_group_id,omitempty" jsonschema:"description=ID of the Campaign Group,pattern=^[0-9]+$"`
	DayPartingSchedule              []map[string]interface{} `json:"day_parting_schedule,omitempty" jsonschema:"description=Day Parting Schedule"`
	DealId                          string                   `json:"deal_id,omitempty" jsonschema:"description=ID of the Deal,pattern=^[0-9]+$"`
	DestinationId                   int                      `json:"destination_id,omitempty" jsonschema:"description=ID of the Destination,pattern=^[0-9]+$"`
	DestinationIds                  []string                 `json:"destination_ids,omitempty" jsonschema:"description=Destination Ids,pattern=^[0-9]+$"`
	EndTime                         int                      `json:"end_time,omitempty" jsonschema:"description=End Time"`
	Exceptions                      bool                     `json:"exceptions,omitempty" jsonschema:"description=Exceptions"`
	ExistingCampaignId              string                   `json:"existing_campaign_id,omitempty" jsonschema:"description=ID of the Existing Campaign,pattern=^[0-9]+$"`
	ExpirationTime                  int                      `json:"expiration_time,omitempty" jsonschema:"description=Expiration Time"`
	FrequencyCap                    int                      `json:"frequency_cap,omitempty" jsonschema:"description=Frequency Cap"`
	GrpBuying                       bool                     `json:"grp_buying,omitempty" jsonschema:"description=Grp Buying"`
	Impression                      int                      `json:"impression,omitempty" jsonschema:"description=Impression"`
	InstreamPackages                []string                 `json:"instream_packages,omitempty" jsonschema:"description=Instream Packages"`
	IntervalFrequencyCapResetPeriod int                      `json:"interval_frequency_cap_reset_period,omitempty" jsonschema:"description=Interval Frequency Cap Reset Period"`
	IsBalancedFrequency             bool                     `json:"is_balanced_frequency,omitempty" jsonschema:"description=Is Balanced Frequency"`
	IsBonusMedia                    bool                     `json:"is_bonus_media,omitempty" jsonschema:"description=Is Bonus Media"`
	IsConversionGoal                bool                     `json:"is_conversion_goal,omitempty" jsonschema:"description=Is Conversion Goal"`
	IsFullView                      bool                     `json:"is_full_view,omitempty" jsonschema:"description=Is Full View"`
	IsHigherAverageFrequency        bool                     `json:"is_higher_average_frequency,omitempty" jsonschema:"description=Is Higher Average Frequency"`
	IsReachAndFrequencyIoBuying     bool                     `json:"is_reach_and_frequency_io_buying,omitempty" jsonschema:"description=Is Reach And Frequency Io Buying"`
	IsReservedBuying                bool                     `json:"is_reserved_buying,omitempty" jsonschema:"description=Is Reserved Buying"`
	NumCurvePoints                  int                      `json:"num_curve_points,omitempty" jsonschema:"description=Num Curve Points"`
	Objective                       string                   `json:"objective,omitempty" jsonschema:"description=Objective"`
	OptimizationGoal                string                   `json:"optimization_goal,omitempty" jsonschema:"description=Optimization Goal"`
	PredictionMode                  int                      `json:"prediction_mode,omitempty" jsonschema:"description=Prediction Mode"`
	Reach                           int                      `json:"reach,omitempty" jsonschema:"description=Reach"`
	RfPredictionId                  string                   `json:"rf_prediction_id,omitempty" jsonschema:"description=ID of the Rf Prediction,pattern=^[0-9]+$"`
	RfPredictionIdToRelease         string                   `json:"rf_prediction_id_to_release,omitempty" jsonschema:"description=Rf Prediction ID To Release,pattern=^[0-9]+$"`
	RfPredictionIdToShare           string                   `json:"rf_prediction_id_to_share,omitempty" jsonschema:"description=Rf Prediction ID To Share,pattern=^[0-9]+$"`
	StartTime                       int                      `json:"start_time,omitempty" jsonschema:"description=Start Time"`
	StopTime                        int                      `json:"stop_time,omitempty" jsonschema:"description=Stop Time"`
	StoryEventType                  int                      `json:"story_event_type,omitempty" jsonschema:"description=Story Event Type"`
	TargetCpm                       int                      `json:"target_cpm,omitempty" jsonschema:"description=Target Cpm"`
	TargetFrequency                 int                      `json:"target_frequency,omitempty" jsonschema:"description=Target Frequency"`
	TargetFrequencyResetPeriod      int                      `json:"target_frequency_reset_period,omitempty" jsonschema:"description=Target Frequency Reset Period"`
	TargetSpec                      *Targeting               `json:"target_spec,omitempty" jsonschema:"description=Target Spec"`
	VideoViewLengthConstraint       int                      `json:"video_view_length_constraint,omitempty" jsonschema:"description=Video View Length Constraint"`
}

// list_ad_account_recommendationsArgs defines the typed arguments for list_ad_account_recommendations
type list_ad_account_recommendationsArgs struct {
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// create_ad_account_recommendationArgs defines the typed arguments for create_ad_account_recommendation
type create_ad_account_recommendationArgs struct {
	AscFragmentationParameters  map[string]interface{} `json:"asc_fragmentation_parameters,omitempty" jsonschema:"description=Asc Fragmentation Parameters"`
	AutoflowParameters          map[string]interface{} `json:"autoflow_parameters,omitempty" jsonschema:"description=Autoflow Parameters"`
	FragmentationParameters     map[string]interface{} `json:"fragmentation_parameters,omitempty" jsonschema:"description=Fragmentation Parameters"`
	MusicParameters             map[string]interface{} `json:"music_parameters,omitempty" jsonschema:"description=Music Parameters"`
	RecommendationSignature     string                 `json:"recommendation_signature" jsonschema:"description=Recommendation Signature,required"`
	ScaleGoodCampaignParameters map[string]interface{} `json:"scale_good_campaign_parameters,omitempty" jsonschema:"description=Scale Good Campaign Parameters"`
}

// list_ad_account_saved_audiencesArgs defines the typed arguments for list_ad_account_saved_audiences
type list_ad_account_saved_audiencesArgs struct {
	ID         string                   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields     []string                 `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit      int                      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After      string                   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before     string                   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	BusinessId string                   `json:"business_id,omitempty" jsonschema:"description=ID of the Business,pattern=^[0-9]+$"`
	Filtering  []map[string]interface{} `json:"filtering,omitempty" jsonschema:"description=Filtering"`
}

// remove_subscribed_apps_from_ad_accountArgs defines the typed arguments for remove_subscribed_apps_from_ad_account
type remove_subscribed_apps_from_ad_accountArgs struct {
	ID    string `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	AppId string `json:"app_id,omitempty" jsonschema:"description=ID of the App,pattern=^[0-9]+$"`
}

// list_ad_account_subscribed_appsArgs defines the typed arguments for list_ad_account_subscribed_apps
type list_ad_account_subscribed_appsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// create_ad_account_subscribed_appArgs defines the typed arguments for create_ad_account_subscribed_app
type create_ad_account_subscribed_appArgs struct {
	ID    string `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	AppId string `json:"app_id,omitempty" jsonschema:"description=ID of the App,pattern=^[0-9]+$"`
}

// get_ad_account_targetingbrowseArgs defines the typed arguments for get_ad_account_targetingbrowse
type get_ad_account_targetingbrowseArgs struct {
	ID                  string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields              []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit               int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After               string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before              string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	ExcludedCategory    string   `json:"excluded_category,omitempty" jsonschema:"description=Excluded Category"`
	IncludeNodes        bool     `json:"include_nodes,omitempty" jsonschema:"description=Include Nodes"`
	IsExclusion         bool     `json:"is_exclusion,omitempty" jsonschema:"description=Is Exclusion"`
	LimitType           string   `json:"limit_type,omitempty" jsonschema:"description=Limit Type"`
	RegulatedCategories []string `json:"regulated_categories,omitempty" jsonschema:"description=Regulated Categories"`
	RegulatedCountries  []string `json:"regulated_countries,omitempty" jsonschema:"description=Regulated Countries"`
	WhitelistedTypes    []string `json:"whitelisted_types,omitempty" jsonschema:"description=Whitelisted Types"`
}

// get_ad_account_targetingsearchArgs defines the typed arguments for get_ad_account_targetingsearch
type get_ad_account_targetingsearchArgs struct {
	Fields                             []string                 `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit                              int                      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After                              string                   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before                             string                   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AllowOnlyFatHeadInterests          bool                     `json:"allow_only_fat_head_interests,omitempty" jsonschema:"description=Allow Only Fat Head Interests"`
	AppStore                           string                   `json:"app_store,omitempty" jsonschema:"description=App Store"`
	Countries                          []string                 `json:"countries,omitempty" jsonschema:"description=Countries"`
	IsAccountLevelBrandSafetyExclusion bool                     `json:"is_account_level_brand_safety_exclusion,omitempty" jsonschema:"description=Is Account Level Brand Safety Exclusion"`
	IsAccountLevelEmployerExclusion    bool                     `json:"is_account_level_employer_exclusion,omitempty" jsonschema:"description=Is Account Level Employer Exclusion"`
	IsExclusion                        bool                     `json:"is_exclusion,omitempty" jsonschema:"description=Is Exclusion"`
	LimitType                          string                   `json:"limit_type,omitempty" jsonschema:"description=Limit Type"`
	Objective                          string                   `json:"objective,omitempty" jsonschema:"description=Objective"`
	PromotedObject                     *AdPromotedObject        `json:"promoted_object,omitempty" jsonschema:"description=Promoted Object"`
	Q                                  string                   `json:"q" jsonschema:"description=Q,required"`
	RegulatedCategories                []string                 `json:"regulated_categories,omitempty" jsonschema:"description=Regulated Categories"`
	RegulatedCountries                 []string                 `json:"regulated_countries,omitempty" jsonschema:"description=Regulated Countries"`
	SessionId                          int                      `json:"session_id,omitempty" jsonschema:"description=ID of the Session,pattern=^[0-9]+$"`
	TargetingList                      []map[string]interface{} `json:"targeting_list,omitempty" jsonschema:"description=Targeting List"`
	WhitelistedTypes                   []string                 `json:"whitelisted_types,omitempty" jsonschema:"description=Whitelisted Types"`
}

// list_ad_account_targetingsentencelinesArgs defines the typed arguments for list_ad_account_targetingsentencelines
type list_ad_account_targetingsentencelinesArgs struct {
	ID                          string     `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields                      []string   `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit                       int        `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After                       string     `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before                      string     `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	DiscardAges                 bool       `json:"discard_ages,omitempty" jsonschema:"description=Discard Ages"`
	DiscardPlacements           bool       `json:"discard_placements,omitempty" jsonschema:"description=Discard Placements"`
	HideTargetingSpecFromReturn bool       `json:"hide_targeting_spec_from_return,omitempty" jsonschema:"description=Hide Targeting Spec From Return"`
	TargetingSpec               *Targeting `json:"targeting_spec" jsonschema:"description=Targeting Spec,required"`
}

// list_ad_account_targetingsuggestionsArgs defines the typed arguments for list_ad_account_targetingsuggestions
type list_ad_account_targetingsuggestionsArgs struct {
	ID                  string                   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields              []string                 `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit               int                      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After               string                   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before              string                   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AppStore            string                   `json:"app_store,omitempty" jsonschema:"description=App Store"`
	Countries           []string                 `json:"countries,omitempty" jsonschema:"description=Countries"`
	LimitType           string                   `json:"limit_type,omitempty" jsonschema:"description=Limit Type"`
	Mode                string                   `json:"mode,omitempty" jsonschema:"description=Mode"`
	Objective           string                   `json:"objective,omitempty" jsonschema:"description=Objective"`
	Objects             map[string]interface{}   `json:"objects,omitempty" jsonschema:"description=Objects"`
	RegulatedCategories []string                 `json:"regulated_categories,omitempty" jsonschema:"description=Regulated Categories"`
	RegulatedCountries  []string                 `json:"regulated_countries,omitempty" jsonschema:"description=Regulated Countries"`
	SessionId           int                      `json:"session_id,omitempty" jsonschema:"description=ID of the Session,pattern=^[0-9]+$"`
	TargetingList       []map[string]interface{} `json:"targeting_list,omitempty" jsonschema:"description=Targeting List"`
	WhitelistedTypes    []string                 `json:"whitelisted_types,omitempty" jsonschema:"description=Whitelisted Types"`
}

// get_ad_account_targetingvalidationArgs defines the typed arguments for get_ad_account_targetingvalidation
type get_ad_account_targetingvalidationArgs struct {
	ID            string                   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields        []string                 `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit         int                      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After         string                   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before        string                   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	IdList        []interface{}            `json:"id_list,omitempty" jsonschema:"description=ID List"`
	IsExclusion   bool                     `json:"is_exclusion,omitempty" jsonschema:"description=Is Exclusion"`
	NameList      []string                 `json:"name_list,omitempty" jsonschema:"description=Name List"`
	TargetingList []map[string]interface{} `json:"targeting_list,omitempty" jsonschema:"description=Targeting List"`
}

// get_ad_account_trackingArgs defines the typed arguments for get_ad_account_tracking
type get_ad_account_trackingArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// update_ad_account_trackingArgs defines the typed arguments for update_ad_account_tracking
type update_ad_account_trackingArgs struct {
	ID            string                 `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	TrackingSpecs map[string]interface{} `json:"tracking_specs" jsonschema:"description=Tracking Specs,required"`
}

// list_ad_account_usersArgs defines the typed arguments for list_ad_account_users
type list_ad_account_usersArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// remove_usersofanyaudience_from_ad_accountArgs defines the typed arguments for remove_usersofanyaudience_from_ad_account
type remove_usersofanyaudience_from_ad_accountArgs struct {
	ID        string                 `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Namespace string                 `json:"namespace,omitempty" jsonschema:"description=Namespace"`
	Payload   map[string]interface{} `json:"payload,omitempty" jsonschema:"description=Payload"`
	Session   map[string]interface{} `json:"session,omitempty" jsonschema:"description=Session"`
}

// get_ad_account_value_rule_setArgs defines the typed arguments for get_ad_account_value_rule_set
type get_ad_account_value_rule_setArgs struct {
	ID          string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields      []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit       int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After       string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before      string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	ProductType string   `json:"product_type,omitempty" jsonschema:"description=Product Type"`
	Status      string   `json:"status,omitempty" jsonschema:"description=Status,enum=ACTIVE,enum=PAUSED,enum=DELETED,enum=ARCHIVED"`
}

// update_ad_account_value_rule_setArgs defines the typed arguments for update_ad_account_value_rule_set
type update_ad_account_value_rule_setArgs struct {
	ID          string                   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Name        string                   `json:"name" jsonschema:"description=Name,required"`
	ProductType string                   `json:"product_type,omitempty" jsonschema:"description=Product Type"`
	Rules       []map[string]interface{} `json:"rules" jsonschema:"description=Rules,required"`
}

// list_ad_account_video_adsArgs defines the typed arguments for list_ad_account_video_ads
type list_ad_account_video_adsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Since  string   `json:"since,omitempty" jsonschema:"description=Since,format=date-time"`
	Until  string   `json:"until,omitempty" jsonschema:"description=Until,format=date-time"`
}

// create_ad_account_video_adArgs defines the typed arguments for create_ad_account_video_ad
type create_ad_account_video_adArgs struct {
	ID          string `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Description string `json:"description,omitempty" jsonschema:"description=Description"`
	Privacy     string `json:"privacy,omitempty" jsonschema:"description=Privacy"`
	Title       string `json:"title,omitempty" jsonschema:"description=Title"`
	UploadPhase string `json:"upload_phase" jsonschema:"description=Upload Phase,required"`
	VideoId     string `json:"video_id,omitempty" jsonschema:"description=ID of the Video,pattern=^[0-9]+$"`
	VideoState  string `json:"video_state,omitempty" jsonschema:"description=Video State"`
}

// get_ad_accountArgs defines the typed arguments for get_ad_account
type get_ad_accountArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// update_ad_accountArgs defines the typed arguments for update_ad_account
type update_ad_accountArgs struct {
	ID                      string                   `json:"id" jsonschema:"required,description=AdAccount ID,pattern=^[0-9]+$"`
	AgencyClientDeclaration map[string]interface{}   `json:"agency_client_declaration,omitempty" jsonschema:"description=Agency Client Declaration,minimum=13,maximum=100"`
	AttributionSpec         []map[string]interface{} `json:"attribution_spec,omitempty" jsonschema:"description=Attribution Spec"`
	BusinessInfo            map[string]interface{}   `json:"business_info,omitempty" jsonschema:"description=Business Info"`
	Currency                string                   `json:"currency,omitempty" jsonschema:"description=Currency"`
	CustomAudienceInfo      map[string]interface{}   `json:"custom_audience_info,omitempty" jsonschema:"description=Custom Audience Info"`
	DefaultDsaBeneficiary   string                   `json:"default_dsa_beneficiary,omitempty" jsonschema:"description=Default Dsa Beneficiary"`
	DefaultDsaPayor         string                   `json:"default_dsa_payor,omitempty" jsonschema:"description=Default Dsa Payor"`
	EndAdvertiser           string                   `json:"end_advertiser,omitempty" jsonschema:"description=End Advertiser"`
	ExistingCustomers       []string                 `json:"existing_customers,omitempty" jsonschema:"description=Existing Customers"`
	IsBaSkipDelayedEligible bool                     `json:"is_ba_skip_delayed_eligible,omitempty" jsonschema:"description=Is Ba Skip Delayed Eligible"`
	IsNotificationsEnabled  bool                     `json:"is_notifications_enabled,omitempty" jsonschema:"description=Is Notifications Enabled"`
	MediaAgency             string                   `json:"media_agency,omitempty" jsonschema:"description=Media Agency"`
	Name                    string                   `json:"name,omitempty" jsonschema:"description=Name"`
	Partner                 string                   `json:"partner,omitempty" jsonschema:"description=Partner"`
	SpendCap                float64                  `json:"spend_cap,omitempty" jsonschema:"description=Spend Cap"`
	SpendCapAction          string                   `json:"spend_cap_action,omitempty" jsonschema:"description=Spend Cap Action"`
	TimezoneId              int                      `json:"timezone_id,omitempty" jsonschema:"description=ID of the Timezone,pattern=^[0-9]+$"`
	TosAccepted             map[string]interface{}   `json:"tos_accepted,omitempty" jsonschema:"description=Tos Accepted"`
}

var (
	list_ad_account_account_controlsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_account_controlsArgs{}))

	create_ad_account_account_controlSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_account_controlArgs{}))

	list_ad_account_activitiesSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_activitiesArgs{}))

	list_ad_account_ad_place_page_setsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_ad_place_page_setsArgs{}))

	create_ad_account_ad_place_page_setSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_ad_place_page_setArgs{}))

	update_ad_account_ad_place_page_sets_asyncSchema = generateSchemaForType(reflect.TypeOf(update_ad_account_ad_place_page_sets_asyncArgs{}))

	list_ad_account_ad_saved_keywordsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_ad_saved_keywordsArgs{}))

	list_ad_account_ad_studiesSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_ad_studiesArgs{}))

	list_ad_account_adcloudplayablesSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_adcloudplayablesArgs{}))

	list_ad_account_adcreativesSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_adcreativesArgs{}))

	create_ad_account_adcreativeSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_adcreativeArgs{}))

	list_ad_account_adcreativesbylabelsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_adcreativesbylabelsArgs{}))

	remove_adimages_from_ad_accountSchema = generateSchemaForType(reflect.TypeOf(remove_adimages_from_ad_accountArgs{}))

	list_ad_account_adimagesSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_adimagesArgs{}))

	create_ad_account_adimageSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_adimageArgs{}))

	list_ad_account_adlabelsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_adlabelsArgs{}))

	create_ad_account_adlabelSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_adlabelArgs{}))

	list_ad_account_adplayablesSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_adplayablesArgs{}))

	create_ad_account_adplayableSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_adplayableArgs{}))

	get_ad_account_adrules_historySchema = generateSchemaForType(reflect.TypeOf(get_ad_account_adrules_historyArgs{}))

	get_ad_account_adrules_librarySchema = generateSchemaForType(reflect.TypeOf(get_ad_account_adrules_libraryArgs{}))

	update_ad_account_adrules_librarySchema = generateSchemaForType(reflect.TypeOf(update_ad_account_adrules_libraryArgs{}))

	list_ad_account_adsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_adsArgs{}))

	create_ad_account_adSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_adArgs{}))

	list_ad_account_ads_reporting_mmm_reportsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_ads_reporting_mmm_reportsArgs{}))

	list_ad_account_ads_reporting_mmm_schedulersSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_ads_reporting_mmm_schedulersArgs{}))

	get_ad_account_ads_volumeSchema = generateSchemaForType(reflect.TypeOf(get_ad_account_ads_volumeArgs{}))

	list_ad_account_adsbylabelsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_adsbylabelsArgs{}))

	list_ad_account_adsetsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_adsetsArgs{}))

	create_ad_account_adsetSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_adsetArgs{}))

	list_ad_account_adsetsbylabelsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_adsetsbylabelsArgs{}))

	list_ad_account_adspixelsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_adspixelsArgs{}))

	create_ad_account_adspixelSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_adspixelArgs{}))

	list_ad_account_advertisable_applicationsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_advertisable_applicationsArgs{}))

	remove_advideos_from_ad_accountSchema = generateSchemaForType(reflect.TypeOf(remove_advideos_from_ad_accountArgs{}))

	list_ad_account_advideosSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_advideosArgs{}))

	create_ad_account_advideoSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_advideoArgs{}))

	list_ad_account_affectedadsetsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_affectedadsetsArgs{}))

	remove_agencies_from_ad_accountSchema = generateSchemaForType(reflect.TypeOf(remove_agencies_from_ad_accountArgs{}))

	list_ad_account_agenciesSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_agenciesArgs{}))

	create_ad_account_agencieSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_agencieArgs{}))

	list_ad_account_applicationsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_applicationsArgs{}))

	remove_assigned_users_from_ad_accountSchema = generateSchemaForType(reflect.TypeOf(remove_assigned_users_from_ad_accountArgs{}))

	list_ad_account_assigned_usersSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_assigned_usersArgs{}))

	create_ad_account_assigned_userSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_assigned_userArgs{}))

	create_ad_account_async_batch_requestSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_async_batch_requestArgs{}))

	list_ad_account_async_requestsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_async_requestsArgs{}))

	list_ad_account_asyncadcreativesSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_asyncadcreativesArgs{}))

	create_ad_account_asyncadcreativeSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_asyncadcreativeArgs{}))

	list_ad_account_asyncadrequestsetsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_asyncadrequestsetsArgs{}))

	create_ad_account_asyncadrequestsetSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_asyncadrequestsetArgs{}))

	get_ad_account_audience_funnelSchema = generateSchemaForType(reflect.TypeOf(get_ad_account_audience_funnelArgs{}))

	create_ad_account_block_list_draftSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_block_list_draftArgs{}))

	create_ad_account_brand_safety_content_filter_levelSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_brand_safety_content_filter_levelArgs{}))

	list_ad_account_broadtargetingcategoriesSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_broadtargetingcategoriesArgs{}))

	list_ad_account_businessprojectsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_businessprojectsArgs{}))

	remove_campaigns_from_ad_accountSchema = generateSchemaForType(reflect.TypeOf(remove_campaigns_from_ad_accountArgs{}))

	list_ad_account_campaignsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_campaignsArgs{}))

	create_ad_account_campaignSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_campaignArgs{}))

	list_ad_account_campaignsbylabelsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_campaignsbylabelsArgs{}))

	list_ad_account_connected_instagram_accountsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_connected_instagram_accountsArgs{}))

	get_ad_account_connected_instagram_accounts_with_iabpSchema = generateSchemaForType(reflect.TypeOf(get_ad_account_connected_instagram_accounts_with_iabpArgs{}))

	list_ad_account_conversion_goalsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_conversion_goalsArgs{}))

	list_ad_account_customaudiencesSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_customaudiencesArgs{}))

	create_ad_account_customaudienceSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_customaudienceArgs{}))

	list_ad_account_customaudiencestosSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_customaudiencestosArgs{}))

	create_ad_account_customaudiencestoSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_customaudiencestoArgs{}))

	list_ad_account_customconversionsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_customconversionsArgs{}))

	create_ad_account_customconversionSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_customconversionArgs{}))

	get_ad_account_delivery_estimateSchema = generateSchemaForType(reflect.TypeOf(get_ad_account_delivery_estimateArgs{}))

	list_ad_account_deprecatedtargetingadsetsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_deprecatedtargetingadsetsArgs{}))

	list_ad_account_dsa_recommendationsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_dsa_recommendationsArgs{}))

	list_ad_account_generatepreviewsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_generatepreviewsArgs{}))

	list_ad_account_impacting_ad_studiesSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_impacting_ad_studiesArgs{}))

	get_ad_account_insightsSchema = generateSchemaForType(reflect.TypeOf(get_ad_account_insightsArgs{}))

	create_ad_account_insights_reportSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_insights_reportArgs{}))

	list_ad_account_instagram_accountsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_instagram_accountsArgs{}))

	list_ad_account_ios_fourteen_campaign_limitsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_ios_fourteen_campaign_limitsArgs{}))

	list_ad_account_matched_search_applicationsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_matched_search_applicationsArgs{}))

	get_ad_account_max_bidSchema = generateSchemaForType(reflect.TypeOf(get_ad_account_max_bidArgs{}))

	list_ad_account_mcmeconversionsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_mcmeconversionsArgs{}))

	list_ad_account_minimum_budgetsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_minimum_budgetsArgs{}))

	list_ad_account_onbehalf_requestsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_onbehalf_requestsArgs{}))

	create_ad_account_product_audienceSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_product_audienceArgs{}))

	list_ad_account_promote_pagesSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_promote_pagesArgs{}))

	list_ad_account_publisher_block_listsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_publisher_block_listsArgs{}))

	create_ad_account_publisher_block_listSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_publisher_block_listArgs{}))

	get_ad_account_reachestimateSchema = generateSchemaForType(reflect.TypeOf(get_ad_account_reachestimateArgs{}))

	list_ad_account_reachfrequencypredictionsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_reachfrequencypredictionsArgs{}))

	create_ad_account_reachfrequencypredictionSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_reachfrequencypredictionArgs{}))

	list_ad_account_recommendationsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_recommendationsArgs{}))

	create_ad_account_recommendationSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_recommendationArgs{}))

	list_ad_account_saved_audiencesSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_saved_audiencesArgs{}))

	remove_subscribed_apps_from_ad_accountSchema = generateSchemaForType(reflect.TypeOf(remove_subscribed_apps_from_ad_accountArgs{}))

	list_ad_account_subscribed_appsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_subscribed_appsArgs{}))

	create_ad_account_subscribed_appSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_subscribed_appArgs{}))

	get_ad_account_targetingbrowseSchema = generateSchemaForType(reflect.TypeOf(get_ad_account_targetingbrowseArgs{}))

	get_ad_account_targetingsearchSchema = generateSchemaForType(reflect.TypeOf(get_ad_account_targetingsearchArgs{}))

	list_ad_account_targetingsentencelinesSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_targetingsentencelinesArgs{}))

	list_ad_account_targetingsuggestionsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_targetingsuggestionsArgs{}))

	get_ad_account_targetingvalidationSchema = generateSchemaForType(reflect.TypeOf(get_ad_account_targetingvalidationArgs{}))

	get_ad_account_trackingSchema = generateSchemaForType(reflect.TypeOf(get_ad_account_trackingArgs{}))

	update_ad_account_trackingSchema = generateSchemaForType(reflect.TypeOf(update_ad_account_trackingArgs{}))

	list_ad_account_usersSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_usersArgs{}))

	remove_usersofanyaudience_from_ad_accountSchema = generateSchemaForType(reflect.TypeOf(remove_usersofanyaudience_from_ad_accountArgs{}))

	get_ad_account_value_rule_setSchema = generateSchemaForType(reflect.TypeOf(get_ad_account_value_rule_setArgs{}))

	update_ad_account_value_rule_setSchema = generateSchemaForType(reflect.TypeOf(update_ad_account_value_rule_setArgs{}))

	list_ad_account_video_adsSchema = generateSchemaForType(reflect.TypeOf(list_ad_account_video_adsArgs{}))

	create_ad_account_video_adSchema = generateSchemaForType(reflect.TypeOf(create_ad_account_video_adArgs{}))

	get_ad_accountSchema = generateSchemaForType(reflect.TypeOf(get_ad_accountArgs{}))

	update_ad_accountSchema = generateSchemaForType(reflect.TypeOf(update_ad_accountArgs{}))
)

// ListAdAccountAccountControlsHandler handles list_ad_account_account_controls with typed arguments
func ListAdAccountAccountControlsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_account_controlsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "account_controls")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountAccountControlHandler handles create_ad_account_account_control with typed arguments
func CreateAdAccountAccountControlHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_account_controlArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.AudienceControls != nil {
		body["audience_controls"] = args.AudienceControls
	}

	if args.PlacementControls != nil {
		body["placement_controls"] = args.PlacementControls
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "account_controls")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdAccountActivitiesHandler handles list_ad_account_activities with typed arguments
func ListAdAccountActivitiesHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_activitiesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.AddChildren {
		query.Set("add_children", "true")
	}

	if args.BusinessId != "" {
		query.Set("business_id", args.BusinessId)
	}

	if args.Category != "" {
		query.Set("category", args.Category)
	}

	if args.DataSource != "" {
		query.Set("data_source", args.DataSource)
	}

	if len(args.ExtraOids) > 0 {
		query.Set("extra_oids", strings.Join(args.ExtraOids, ","))
	}

	if args.Oid != "" {
		query.Set("oid", args.Oid)
	}

	if args.Since != "" {
		query.Set("since", args.Since)
	}

	if args.Uid > 0 {
		query.Set("uid", fmt.Sprintf("%d", args.Uid))
	}

	if args.Until != "" {
		query.Set("until", args.Until)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "activities")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountAdPlacePageSetsHandler handles list_ad_account_ad_place_page_sets with typed arguments
func ListAdAccountAdPlacePageSetsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_ad_place_page_setsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ad_place_page_sets")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountAdPlacePageSetHandler handles create_ad_account_ad_place_page_set with typed arguments
func CreateAdAccountAdPlacePageSetHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_ad_place_page_setArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.LocationTypes) > 0 {
		body["location_types"] = args.LocationTypes
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.ParentPage != "" {
		body["parent_page"] = args.ParentPage
	}

	if args.TargetedAreaType != "" {
		body["targeted_area_type"] = args.TargetedAreaType
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "ad_place_page_sets")

	return ExecutePOSTRequest(ctx, url, body)

}

// UpdateAdAccountAdPlacePageSetsAsyncHandler handles update_ad_account_ad_place_page_sets_async with typed arguments
func UpdateAdAccountAdPlacePageSetsAsyncHandler(ctx context.Context, request mcp.CallToolRequest, args update_ad_account_ad_place_page_sets_asyncArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.LocationTypes) > 0 {
		body["location_types"] = args.LocationTypes
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.ParentPage != "" {
		body["parent_page"] = args.ParentPage
	}

	if args.TargetedAreaType != "" {
		body["targeted_area_type"] = args.TargetedAreaType
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "ad_place_page_sets_async")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdAccountAdSavedKeywordsHandler handles list_ad_account_ad_saved_keywords with typed arguments
func ListAdAccountAdSavedKeywordsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_ad_saved_keywordsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ad_saved_keywords")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountAdStudiesHandler handles list_ad_account_ad_studies with typed arguments
func ListAdAccountAdStudiesHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_ad_studiesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ad_studies")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountAdcloudplayablesHandler handles list_ad_account_adcloudplayables with typed arguments
func ListAdAccountAdcloudplayablesHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_adcloudplayablesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "adcloudplayables")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountAdcreativesHandler handles list_ad_account_adcreatives with typed arguments
func ListAdAccountAdcreativesHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_adcreativesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "adcreatives")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountAdcreativeHandler handles create_ad_account_adcreative with typed arguments
func CreateAdAccountAdcreativeHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_adcreativeArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.ActorId > 0 {
		body["actor_id"] = args.ActorId
	}

	if args.AdDisclaimerSpec != nil {
		body["ad_disclaimer_spec"] = args.AdDisclaimerSpec
	}

	if len(args.Adlabels) > 0 {
		body["adlabels"] = args.Adlabels
	}

	if args.ApplinkTreatment != "" {
		body["applink_treatment"] = args.ApplinkTreatment
	}

	if args.AssetFeedSpec != nil {
		body["asset_feed_spec"] = args.AssetFeedSpec
	}

	if args.AuthorizationCategory != "" {
		body["authorization_category"] = args.AuthorizationCategory
	}

	if args.Body != "" {
		body["body"] = args.Body
	}

	if args.BrandedContent != nil {
		body["branded_content"] = args.BrandedContent
	}

	if args.BrandedContentSponsorPageId != "" {
		body["branded_content_sponsor_page_id"] = args.BrandedContentSponsorPageId
	}

	if args.BundleFolderId != "" {
		body["bundle_folder_id"] = args.BundleFolderId
	}

	if args.CallToAction != nil {
		body["call_to_action"] = args.CallToAction
	}

	if args.CategorizationCriteria != "" {
		body["categorization_criteria"] = args.CategorizationCriteria
	}

	if args.CategoryMediaSource != "" {
		body["category_media_source"] = args.CategoryMediaSource
	}

	if args.ContextualMultiAds != nil {
		body["contextual_multi_ads"] = args.ContextualMultiAds
	}

	if args.CreativeSourcingSpec != nil {
		body["creative_sourcing_spec"] = args.CreativeSourcingSpec
	}

	if args.DegreesOfFreedomSpec != nil {
		body["degrees_of_freedom_spec"] = args.DegreesOfFreedomSpec
	}

	if args.DestinationSetId != "" {
		body["destination_set_id"] = args.DestinationSetId
	}

	if args.DynamicAdVoice != "" {
		body["dynamic_ad_voice"] = args.DynamicAdVoice
	}

	body["enable_launch_instant_app"] = args.EnableLaunchInstantApp

	if args.FacebookBrandedContent != nil {
		body["facebook_branded_content"] = args.FacebookBrandedContent
	}

	if args.ImageCrops != nil {
		body["image_crops"] = args.ImageCrops
	}

	if args.ImageFile != "" {
		body["image_file"] = args.ImageFile
	}

	if args.ImageHash != "" {
		body["image_hash"] = args.ImageHash
	}

	if args.ImageUrl != "" {
		body["image_url"] = args.ImageUrl
	}

	if args.InstagramBrandedContent != nil {
		body["instagram_branded_content"] = args.InstagramBrandedContent
	}

	if args.InstagramPermalinkUrl != "" {
		body["instagram_permalink_url"] = args.InstagramPermalinkUrl
	}

	if args.InstagramUserId != "" {
		body["instagram_user_id"] = args.InstagramUserId
	}

	if args.InteractiveComponentsSpec != nil {
		body["interactive_components_spec"] = args.InteractiveComponentsSpec
	}

	body["is_dco_internal"] = args.IsDcoInternal

	if args.LinkOgId != "" {
		body["link_og_id"] = args.LinkOgId
	}

	if args.LinkUrl != "" {
		body["link_url"] = args.LinkUrl
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.ObjectId > 0 {
		body["object_id"] = args.ObjectId
	}

	if args.ObjectStoryId != "" {
		body["object_story_id"] = args.ObjectStoryId
	}

	if args.ObjectStorySpec != nil {
		body["object_story_spec"] = args.ObjectStorySpec
	}

	if args.ObjectType != "" {
		body["object_type"] = args.ObjectType
	}

	if args.ObjectUrl != "" {
		body["object_url"] = args.ObjectUrl
	}

	if args.OmnichannelLinkSpec != nil {
		body["omnichannel_link_spec"] = args.OmnichannelLinkSpec
	}

	if args.PageWelcomeMessage != "" {
		body["page_welcome_message"] = args.PageWelcomeMessage
	}

	if args.PlacePageSetId != "" {
		body["place_page_set_id"] = args.PlacePageSetId
	}

	if args.PlatformCustomizations != nil {
		body["platform_customizations"] = args.PlatformCustomizations
	}

	if args.PlayableAssetId != "" {
		body["playable_asset_id"] = args.PlayableAssetId
	}

	if args.PortraitCustomizations != nil {
		body["portrait_customizations"] = args.PortraitCustomizations
	}

	if args.ProductSetId != "" {
		body["product_set_id"] = args.ProductSetId
	}

	if args.RecommenderSettings != nil {
		body["recommender_settings"] = args.RecommenderSettings
	}

	if args.RegionalRegulationDisclaimerSpec != nil {
		body["regional_regulation_disclaimer_spec"] = args.RegionalRegulationDisclaimerSpec
	}

	if args.SourceInstagramMediaId != "" {
		body["source_instagram_media_id"] = args.SourceInstagramMediaId
	}

	if args.TemplateUrl != "" {
		body["template_url"] = args.TemplateUrl
	}

	if args.TemplateUrlSpec != "" {
		body["template_url_spec"] = args.TemplateUrlSpec
	}

	if args.ThumbnailUrl != "" {
		body["thumbnail_url"] = args.ThumbnailUrl
	}

	if args.Title != "" {
		body["title"] = args.Title
	}

	if args.UrlTags != "" {
		body["url_tags"] = args.UrlTags
	}

	body["use_page_actor_override"] = args.UsePageActorOverride

	// Build URL and execute
	url := buildGraphURL(args.ID, "adcreatives")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdAccountAdcreativesbylabelsHandler handles list_ad_account_adcreativesbylabels with typed arguments
func ListAdAccountAdcreativesbylabelsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_adcreativesbylabelsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if len(args.AdLabelIds) > 0 {
		query.Set("ad_label_ids", strings.Join(args.AdLabelIds, ","))
	}

	if args.Operator != "" {
		query.Set("operator", args.Operator)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "adcreativesbylabels")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// RemoveAdimagesFromAdAccountHandler handles remove_adimages_from_ad_account with typed arguments
func RemoveAdimagesFromAdAccountHandler(ctx context.Context, request mcp.CallToolRequest, args remove_adimages_from_ad_accountArgs) (*mcp.CallToolResult, error) {

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	url := buildGraphURL(args.ID, "adimages")
	return ExecuteDELETERequest(ctx, url)

}

// ListAdAccountAdimagesHandler handles list_ad_account_adimages with typed arguments
func ListAdAccountAdimagesHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_adimagesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.BizTagId > 0 {
		query.Set("biz_tag_id", fmt.Sprintf("%d", args.BizTagId))
	}

	if args.BusinessId != "" {
		query.Set("business_id", args.BusinessId)
	}

	if len(args.Hashes) > 0 {
		query.Set("hashes", strings.Join(args.Hashes, ","))
	}

	if args.Minheight > 0 {
		query.Set("minheight", fmt.Sprintf("%d", args.Minheight))
	}

	if args.Minwidth > 0 {
		query.Set("minwidth", fmt.Sprintf("%d", args.Minwidth))
	}

	if args.Name != "" {
		query.Set("name", args.Name)
	}

	if len(args.SelectedHashes) > 0 {
		query.Set("selected_hashes", strings.Join(args.SelectedHashes, ","))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "adimages")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountAdimageHandler handles create_ad_account_adimage with typed arguments
func CreateAdAccountAdimageHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_adimageArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.Bytes != "" {
		body["bytes"] = args.Bytes
	}

	if args.CopyFrom != nil {
		body["copy_from"] = args.CopyFrom
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "adimages")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdAccountAdlabelsHandler handles list_ad_account_adlabels with typed arguments
func ListAdAccountAdlabelsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_adlabelsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "adlabels")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountAdlabelHandler handles create_ad_account_adlabel with typed arguments
func CreateAdAccountAdlabelHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_adlabelArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.Name != "" {
		body["name"] = args.Name
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "adlabels")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdAccountAdplayablesHandler handles list_ad_account_adplayables with typed arguments
func ListAdAccountAdplayablesHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_adplayablesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "adplayables")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountAdplayableHandler handles create_ad_account_adplayable with typed arguments
func CreateAdAccountAdplayableHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_adplayableArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.AppId != "" {
		body["app_id"] = args.AppId
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.SessionId != "" {
		body["session_id"] = args.SessionId
	}

	if args.Source != nil {
		body["source"] = args.Source
	}

	if args.SourceUrl != "" {
		body["source_url"] = args.SourceUrl
	}

	if args.SourceZip != nil {
		body["source_zip"] = args.SourceZip
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "adplayables")

	return ExecutePOSTRequest(ctx, url, body)

}

// GetAdAccountAdrulesHistoryHandler handles get_ad_account_adrules_history with typed arguments
func GetAdAccountAdrulesHistoryHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_account_adrules_historyArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Action != "" {
		query.Set("action", args.Action)
	}

	if args.EvaluationType != "" {
		query.Set("evaluation_type", args.EvaluationType)
	}

	if args.HideNoChanges {
		query.Set("hide_no_changes", "true")
	}

	if args.ObjectId != "" {
		query.Set("object_id", args.ObjectId)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "adrules_history")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// GetAdAccountAdrulesLibraryHandler handles get_ad_account_adrules_library with typed arguments
func GetAdAccountAdrulesLibraryHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_account_adrules_libraryArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "adrules_library")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UpdateAdAccountAdrulesLibraryHandler handles update_ad_account_adrules_library with typed arguments
func UpdateAdAccountAdrulesLibraryHandler(ctx context.Context, request mcp.CallToolRequest, args update_ad_account_adrules_libraryArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.AccountId != "" {
		body["account_id"] = args.AccountId
	}

	if args.EvaluationSpec != nil {
		body["evaluation_spec"] = args.EvaluationSpec
	}

	if args.ExecutionSpec != nil {
		body["execution_spec"] = args.ExecutionSpec
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.ScheduleSpec != nil {
		body["schedule_spec"] = args.ScheduleSpec
	}

	if args.Status != "" {
		body["status"] = args.Status
	}

	if args.UiCreationSource != "" {
		body["ui_creation_source"] = args.UiCreationSource
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "adrules_library")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdAccountAdsHandler handles list_ad_account_ads with typed arguments
func ListAdAccountAdsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_adsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.DatePreset != "" {
		query.Set("date_preset", args.DatePreset)
	}

	if len(args.EffectiveStatus) > 0 {
		query.Set("effective_status", strings.Join(args.EffectiveStatus, ","))
	}

	// Handle TimeRange map parameter
	for k, v := range args.TimeRange {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	if args.UpdatedSince > 0 {
		query.Set("updated_since", fmt.Sprintf("%d", args.UpdatedSince))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ads")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountAdHandler handles create_ad_account_ad with typed arguments
func CreateAdAccountAdHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_adArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.AdScheduleEndTime != "" {
		body["ad_schedule_end_time"] = args.AdScheduleEndTime
	}

	if args.AdScheduleStartTime != "" {
		body["ad_schedule_start_time"] = args.AdScheduleStartTime
	}

	if len(args.Adlabels) > 0 {
		body["adlabels"] = args.Adlabels
	}

	if args.AdsetId > 0 {
		body["adset_id"] = args.AdsetId
	}

	if args.AdsetSpec != nil {
		body["adset_spec"] = args.AdsetSpec
	}

	if args.AudienceId != "" {
		body["audience_id"] = args.AudienceId
	}

	if args.BidAmount > 0 {
		body["bid_amount"] = args.BidAmount
	}

	if args.ConversionDomain != "" {
		body["conversion_domain"] = args.ConversionDomain
	}

	if args.Creative != nil {
		body["creative"] = args.Creative
	}

	if args.CreativeAssetGroupsSpec != nil {
		body["creative_asset_groups_spec"] = args.CreativeAssetGroupsSpec
	}

	if args.DateFormat != "" {
		body["date_format"] = args.DateFormat
	}

	if args.DisplaySequence > 0 {
		body["display_sequence"] = args.DisplaySequence
	}

	if args.DraftAdgroupId != "" {
		body["draft_adgroup_id"] = args.DraftAdgroupId
	}

	body["engagement_audience"] = args.EngagementAudience

	if len(args.ExecutionOptions) > 0 {
		body["execution_options"] = args.ExecutionOptions
	}

	body["include_demolink_hashes"] = args.IncludeDemolinkHashes

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.Priority > 0 {
		body["priority"] = args.Priority
	}

	if args.SourceAdId != "" {
		body["source_ad_id"] = args.SourceAdId
	}

	if args.Status != "" {
		body["status"] = args.Status
	}

	if args.TrackingSpecs != nil {
		body["tracking_specs"] = args.TrackingSpecs
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "ads")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdAccountAdsReportingMmmReportsHandler handles list_ad_account_ads_reporting_mmm_reports with typed arguments
func ListAdAccountAdsReportingMmmReportsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_ads_reporting_mmm_reportsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ads_reporting_mmm_reports")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountAdsReportingMmmSchedulersHandler handles list_ad_account_ads_reporting_mmm_schedulers with typed arguments
func ListAdAccountAdsReportingMmmSchedulersHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_ads_reporting_mmm_schedulersArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ads_reporting_mmm_schedulers")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// GetAdAccountAdsVolumeHandler handles get_ad_account_ads_volume with typed arguments
func GetAdAccountAdsVolumeHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_account_ads_volumeArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.PageId != "" {
		query.Set("page_id", args.PageId)
	}

	if args.RecommendationType != "" {
		query.Set("recommendation_type", args.RecommendationType)
	}

	if args.ShowBreakdownByActor {
		query.Set("show_breakdown_by_actor", "true")
	}

	// Build URL and execute
	baseURL := buildGraphURL("", "ads_volume")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountAdsbylabelsHandler handles list_ad_account_adsbylabels with typed arguments
func ListAdAccountAdsbylabelsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_adsbylabelsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if len(args.AdLabelIds) > 0 {
		query.Set("ad_label_ids", strings.Join(args.AdLabelIds, ","))
	}

	if args.Operator != "" {
		query.Set("operator", args.Operator)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "adsbylabels")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountAdsetsHandler handles list_ad_account_adsets with typed arguments
func ListAdAccountAdsetsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_adsetsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.DatePreset != "" {
		query.Set("date_preset", args.DatePreset)
	}

	if len(args.EffectiveStatus) > 0 {
		query.Set("effective_status", strings.Join(args.EffectiveStatus, ","))
	}

	if args.IsCompleted {
		query.Set("is_completed", "true")
	}

	// Handle TimeRange map parameter
	for k, v := range args.TimeRange {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	if args.UpdatedSince > 0 {
		query.Set("updated_since", fmt.Sprintf("%d", args.UpdatedSince))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "adsets")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountAdsetHandler handles create_ad_account_adset with typed arguments
func CreateAdAccountAdsetHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_adsetArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.Adlabels) > 0 {
		body["adlabels"] = args.Adlabels
	}

	if len(args.AdsetSchedule) > 0 {
		body["adset_schedule"] = args.AdsetSchedule
	}

	if len(args.AttributionSpec) > 0 {
		body["attribution_spec"] = args.AttributionSpec
	}

	if args.BidAdjustments != nil {
		body["bid_adjustments"] = args.BidAdjustments
	}

	if args.BidAmount > 0 {
		body["bid_amount"] = args.BidAmount
	}

	if args.BidConstraints != nil {
		body["bid_constraints"] = args.BidConstraints
	}

	if args.BidStrategy != "" {
		body["bid_strategy"] = args.BidStrategy
	}

	if args.BillingEvent != "" {
		body["billing_event"] = args.BillingEvent
	}

	if args.BudgetSource != "" {
		body["budget_source"] = args.BudgetSource
	}

	if args.BudgetSplitSetId != "" {
		body["budget_split_set_id"] = args.BudgetSplitSetId
	}

	if args.CampaignAttribution != nil {
		body["campaign_attribution"] = args.CampaignAttribution
	}

	if args.CampaignId != "" {
		body["campaign_id"] = args.CampaignId
	}

	if args.CampaignSpec != nil {
		body["campaign_spec"] = args.CampaignSpec
	}

	if len(args.CreativeSequence) > 0 {
		body["creative_sequence"] = args.CreativeSequence
	}

	if args.CreativeSequenceRepetitionPattern != "" {
		body["creative_sequence_repetition_pattern"] = args.CreativeSequenceRepetitionPattern
	}

	if args.DailyBudget > 0 {
		body["daily_budget"] = args.DailyBudget
	}

	if args.DailyImps > 0 {
		body["daily_imps"] = args.DailyImps
	}

	if args.DailyMinSpendTarget > 0 {
		body["daily_min_spend_target"] = args.DailyMinSpendTarget
	}

	if args.DailySpendCap > 0 {
		body["daily_spend_cap"] = args.DailySpendCap
	}

	if args.DateFormat != "" {
		body["date_format"] = args.DateFormat
	}

	if args.DestinationType != "" {
		body["destination_type"] = args.DestinationType
	}

	if args.DsaBeneficiary != "" {
		body["dsa_beneficiary"] = args.DsaBeneficiary
	}

	if args.DsaPayor != "" {
		body["dsa_payor"] = args.DsaPayor
	}

	if args.EndTime != "" {
		body["end_time"] = args.EndTime
	}

	if len(args.ExecutionOptions) > 0 {
		body["execution_options"] = args.ExecutionOptions
	}

	if args.ExistingCustomerBudgetPercentage > 0 {
		body["existing_customer_budget_percentage"] = args.ExistingCustomerBudgetPercentage
	}

	if len(args.FrequencyControlSpecs) > 0 {
		body["frequency_control_specs"] = args.FrequencyControlSpecs
	}

	if args.FullFunnelExplorationMode != "" {
		body["full_funnel_exploration_mode"] = args.FullFunnelExplorationMode
	}

	body["is_ba_skip_delayed_eligible"] = args.IsBaSkipDelayedEligible

	body["is_dynamic_creative"] = args.IsDynamicCreative

	body["is_incremental_attribution_enabled"] = args.IsIncrementalAttributionEnabled

	body["is_sac_cfca_terms_certified"] = args.IsSacCfcaTermsCertified

	if args.LifetimeBudget > 0 {
		body["lifetime_budget"] = args.LifetimeBudget
	}

	if args.LifetimeImps > 0 {
		body["lifetime_imps"] = args.LifetimeImps
	}

	if args.LifetimeMinSpendTarget > 0 {
		body["lifetime_min_spend_target"] = args.LifetimeMinSpendTarget
	}

	if args.LifetimeSpendCap > 0 {
		body["lifetime_spend_cap"] = args.LifetimeSpendCap
	}

	if args.LineNumber > 0 {
		body["line_number"] = args.LineNumber
	}

	if args.MaxBudgetSpendPercentage > 0 {
		body["max_budget_spend_percentage"] = args.MaxBudgetSpendPercentage
	}

	if args.MinBudgetSpendPercentage > 0 {
		body["min_budget_spend_percentage"] = args.MinBudgetSpendPercentage
	}

	if args.MultiOptimizationGoalWeight != "" {
		body["multi_optimization_goal_weight"] = args.MultiOptimizationGoalWeight
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.OptimizationGoal != "" {
		body["optimization_goal"] = args.OptimizationGoal
	}

	if args.OptimizationSubEvent != "" {
		body["optimization_sub_event"] = args.OptimizationSubEvent
	}

	if len(args.PacingType) > 0 {
		body["pacing_type"] = args.PacingType
	}

	if args.PromotedObject != nil {
		body["promoted_object"] = args.PromotedObject
	}

	if args.RbPredictionId != "" {
		body["rb_prediction_id"] = args.RbPredictionId
	}

	if len(args.RegionalRegulatedCategories) > 0 {
		body["regional_regulated_categories"] = args.RegionalRegulatedCategories
	}

	if args.RegionalRegulationIdentities != nil {
		body["regional_regulation_identities"] = args.RegionalRegulationIdentities
	}

	if args.RfPredictionId != "" {
		body["rf_prediction_id"] = args.RfPredictionId
	}

	if args.SourceAdsetId != "" {
		body["source_adset_id"] = args.SourceAdsetId
	}

	if args.StartTime != "" {
		body["start_time"] = args.StartTime
	}

	if args.Status != "" {
		body["status"] = args.Status
	}

	if args.Targeting != nil {
		body["targeting"] = args.Targeting
	}

	if args.TimeBasedAdRotationIdBlocks != nil {
		body["time_based_ad_rotation_id_blocks"] = args.TimeBasedAdRotationIdBlocks
	}

	if args.TimeBasedAdRotationIntervals != nil {
		body["time_based_ad_rotation_intervals"] = args.TimeBasedAdRotationIntervals
	}

	if args.TimeStart != "" {
		body["time_start"] = args.TimeStart
	}

	if args.TimeStop != "" {
		body["time_stop"] = args.TimeStop
	}

	if args.ToplineId != "" {
		body["topline_id"] = args.ToplineId
	}

	if args.TuneForCategory != "" {
		body["tune_for_category"] = args.TuneForCategory
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "adsets")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdAccountAdsetsbylabelsHandler handles list_ad_account_adsetsbylabels with typed arguments
func ListAdAccountAdsetsbylabelsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_adsetsbylabelsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if len(args.AdLabelIds) > 0 {
		query.Set("ad_label_ids", strings.Join(args.AdLabelIds, ","))
	}

	if args.Operator != "" {
		query.Set("operator", args.Operator)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "adsetsbylabels")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountAdspixelsHandler handles list_ad_account_adspixels with typed arguments
func ListAdAccountAdspixelsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_adspixelsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.SortBy != "" {
		query.Set("sort_by", args.SortBy)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "adspixels")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountAdspixelHandler handles create_ad_account_adspixel with typed arguments
func CreateAdAccountAdspixelHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_adspixelArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.Name != "" {
		body["name"] = args.Name
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "adspixels")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdAccountAdvertisableApplicationsHandler handles list_ad_account_advertisable_applications with typed arguments
func ListAdAccountAdvertisableApplicationsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_advertisable_applicationsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.AppId != "" {
		query.Set("app_id", args.AppId)
	}

	if args.BusinessId != "" {
		query.Set("business_id", args.BusinessId)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "advertisable_applications")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// RemoveAdvideosFromAdAccountHandler handles remove_advideos_from_ad_account with typed arguments
func RemoveAdvideosFromAdAccountHandler(ctx context.Context, request mcp.CallToolRequest, args remove_advideos_from_ad_accountArgs) (*mcp.CallToolResult, error) {

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	url := buildGraphURL(args.ID, "advideos")
	return ExecuteDELETERequest(ctx, url)

}

// ListAdAccountAdvideosHandler handles list_ad_account_advideos with typed arguments
func ListAdAccountAdvideosHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_advideosArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Maxheight > 0 {
		query.Set("maxheight", fmt.Sprintf("%d", args.Maxheight))
	}

	if args.Maxlength > 0 {
		query.Set("maxlength", fmt.Sprintf("%d", args.Maxlength))
	}

	if args.Maxwidth > 0 {
		query.Set("maxwidth", fmt.Sprintf("%d", args.Maxwidth))
	}

	if args.Minheight > 0 {
		query.Set("minheight", fmt.Sprintf("%d", args.Minheight))
	}

	if args.Minlength > 0 {
		query.Set("minlength", fmt.Sprintf("%d", args.Minlength))
	}

	if args.Minwidth > 0 {
		query.Set("minwidth", fmt.Sprintf("%d", args.Minwidth))
	}

	if args.Title != "" {
		query.Set("title", args.Title)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "advideos")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountAdvideoHandler handles create_ad_account_advideo with typed arguments
func CreateAdAccountAdvideoHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_advideoArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.ApplicationId != "" {
		body["application_id"] = args.ApplicationId
	}

	if args.AskedFunFactPromptId > 0 {
		body["asked_fun_fact_prompt_id"] = args.AskedFunFactPromptId
	}

	if args.AudioStoryWaveAnimationHandle != "" {
		body["audio_story_wave_animation_handle"] = args.AudioStoryWaveAnimationHandle
	}

	if args.ChunkSessionId != "" {
		body["chunk_session_id"] = args.ChunkSessionId
	}

	if args.ComposerEntryPicker != "" {
		body["composer_entry_picker"] = args.ComposerEntryPicker
	}

	if args.ComposerEntryPoint != "" {
		body["composer_entry_point"] = args.ComposerEntryPoint
	}

	if args.ComposerEntryTime > 0 {
		body["composer_entry_time"] = args.ComposerEntryTime
	}

	if args.ComposerSessionEventsLog != "" {
		body["composer_session_events_log"] = args.ComposerSessionEventsLog
	}

	if args.ComposerSessionId != "" {
		body["composer_session_id"] = args.ComposerSessionId
	}

	if args.ComposerSourceSurface != "" {
		body["composer_source_surface"] = args.ComposerSourceSurface
	}

	if args.ComposerType != "" {
		body["composer_type"] = args.ComposerType
	}

	if args.ContainerType != "" {
		body["container_type"] = args.ContainerType
	}

	if args.ContentCategory != "" {
		body["content_category"] = args.ContentCategory
	}

	if args.CreativeTools != "" {
		body["creative_tools"] = args.CreativeTools
	}

	if args.Description != "" {
		body["description"] = args.Description
	}

	body["embeddable"] = args.Embeddable

	if args.EndOffset > 0 {
		body["end_offset"] = args.EndOffset
	}

	if args.FbuploaderVideoFileChunk != "" {
		body["fbuploader_video_file_chunk"] = args.FbuploaderVideoFileChunk
	}

	if args.FileSize > 0 {
		body["file_size"] = args.FileSize
	}

	if args.FileUrl != "" {
		body["file_url"] = args.FileUrl
	}

	body["fisheye_video_cropped"] = args.FisheyeVideoCropped

	if args.Formatting != "" {
		body["formatting"] = args.Formatting
	}

	if args.Fov > 0 {
		body["fov"] = args.Fov
	}

	if args.FrontZRotation != 0 {
		body["front_z_rotation"] = args.FrontZRotation
	}

	if args.FunFactPromptId != "" {
		body["fun_fact_prompt_id"] = args.FunFactPromptId
	}

	if args.FunFactToasteeId > 0 {
		body["fun_fact_toastee_id"] = args.FunFactToasteeId
	}

	if args.Guide != nil {
		body["guide"] = args.Guide
	}

	body["guide_enabled"] = args.GuideEnabled

	if args.InitialHeading > 0 {
		body["initial_heading"] = args.InitialHeading
	}

	if args.InitialPitch > 0 {
		body["initial_pitch"] = args.InitialPitch
	}

	if args.InstantGameEntryPointData != "" {
		body["instant_game_entry_point_data"] = args.InstantGameEntryPointData
	}

	body["is_boost_intended"] = args.IsBoostIntended

	body["is_group_linking_post"] = args.IsGroupLinkingPost

	body["is_partnership_ad"] = args.IsPartnershipAd

	body["is_voice_clip"] = args.IsVoiceClip

	if args.LocationSourceId != "" {
		body["location_source_id"] = args.LocationSourceId
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.OgActionTypeId != "" {
		body["og_action_type_id"] = args.OgActionTypeId
	}

	if args.OgIconId != "" {
		body["og_icon_id"] = args.OgIconId
	}

	if args.OgObjectId != "" {
		body["og_object_id"] = args.OgObjectId
	}

	if args.OgPhrase != "" {
		body["og_phrase"] = args.OgPhrase
	}

	if args.OgSuggestionMechanism != "" {
		body["og_suggestion_mechanism"] = args.OgSuggestionMechanism
	}

	if args.OriginalFov > 0 {
		body["original_fov"] = args.OriginalFov
	}

	if args.OriginalProjectionType != "" {
		body["original_projection_type"] = args.OriginalProjectionType
	}

	if args.PartnershipAdAdCode != "" {
		body["partnership_ad_ad_code"] = args.PartnershipAdAdCode
	}

	if args.PublishEventId > 0 {
		body["publish_event_id"] = args.PublishEventId
	}

	if args.ReferencedStickerId != "" {
		body["referenced_sticker_id"] = args.ReferencedStickerId
	}

	if args.ReplaceVideoId != "" {
		body["replace_video_id"] = args.ReplaceVideoId
	}

	if args.SlideshowSpec != nil {
		body["slideshow_spec"] = args.SlideshowSpec
	}

	if args.Source != "" {
		body["source"] = args.Source
	}

	if args.SourceInstagramMediaId != "" {
		body["source_instagram_media_id"] = args.SourceInstagramMediaId
	}

	body["spherical"] = args.Spherical

	if args.StartOffset > 0 {
		body["start_offset"] = args.StartOffset
	}

	if args.SwapMode != "" {
		body["swap_mode"] = args.SwapMode
	}

	if args.TextFormatMetadata != "" {
		body["text_format_metadata"] = args.TextFormatMetadata
	}

	if args.Thumb != nil {
		body["thumb"] = args.Thumb
	}

	if args.TimeSinceOriginalPost > 0 {
		body["time_since_original_post"] = args.TimeSinceOriginalPost
	}

	if args.Title != "" {
		body["title"] = args.Title
	}

	if args.TranscodeSettingProperties != "" {
		body["transcode_setting_properties"] = args.TranscodeSettingProperties
	}

	if args.UnpublishedContentType != "" {
		body["unpublished_content_type"] = args.UnpublishedContentType
	}

	if args.UploadPhase != "" {
		body["upload_phase"] = args.UploadPhase
	}

	if args.UploadSessionId != "" {
		body["upload_session_id"] = args.UploadSessionId
	}

	if args.UploadSettingProperties != "" {
		body["upload_setting_properties"] = args.UploadSettingProperties
	}

	if args.VideoFileChunk != "" {
		body["video_file_chunk"] = args.VideoFileChunk
	}

	if args.VideoIdOriginal != "" {
		body["video_id_original"] = args.VideoIdOriginal
	}

	if args.VideoStartTimeMs > 0 {
		body["video_start_time_ms"] = args.VideoStartTimeMs
	}

	if args.WaterfallId != "" {
		body["waterfall_id"] = args.WaterfallId
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "advideos")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdAccountAffectedadsetsHandler handles list_ad_account_affectedadsets with typed arguments
func ListAdAccountAffectedadsetsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_affectedadsetsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "affectedadsets")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// RemoveAgenciesFromAdAccountHandler handles remove_agencies_from_ad_account with typed arguments
func RemoveAgenciesFromAdAccountHandler(ctx context.Context, request mcp.CallToolRequest, args remove_agencies_from_ad_accountArgs) (*mcp.CallToolResult, error) {

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	url := buildGraphURL(args.ID, "agencies")
	return ExecuteDELETERequest(ctx, url)

}

// ListAdAccountAgenciesHandler handles list_ad_account_agencies with typed arguments
func ListAdAccountAgenciesHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_agenciesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "agencies")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountAgencieHandler handles create_ad_account_agencie with typed arguments
func CreateAdAccountAgencieHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_agencieArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.Business != "" {
		body["business"] = args.Business
	}

	if len(args.PermittedTasks) > 0 {
		body["permitted_tasks"] = args.PermittedTasks
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "agencies")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdAccountApplicationsHandler handles list_ad_account_applications with typed arguments
func ListAdAccountApplicationsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_applicationsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "applications")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// RemoveAssignedUsersFromAdAccountHandler handles remove_assigned_users_from_ad_account with typed arguments
func RemoveAssignedUsersFromAdAccountHandler(ctx context.Context, request mcp.CallToolRequest, args remove_assigned_users_from_ad_accountArgs) (*mcp.CallToolResult, error) {

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	url := buildGraphURL(args.ID, "assigned_users")
	return ExecuteDELETERequest(ctx, url)

}

// ListAdAccountAssignedUsersHandler handles list_ad_account_assigned_users with typed arguments
func ListAdAccountAssignedUsersHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_assigned_usersArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Business != "" {
		query.Set("business", args.Business)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "assigned_users")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountAssignedUserHandler handles create_ad_account_assigned_user with typed arguments
func CreateAdAccountAssignedUserHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_assigned_userArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.Tasks) > 0 {
		body["tasks"] = args.Tasks
	}

	if args.User > 0 {
		body["user"] = args.User
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "assigned_users")

	return ExecutePOSTRequest(ctx, url, body)

}

// CreateAdAccountAsyncBatchRequestHandler handles create_ad_account_async_batch_request with typed arguments
func CreateAdAccountAsyncBatchRequestHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_async_batch_requestArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.Adbatch) > 0 {
		body["adbatch"] = args.Adbatch
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "async_batch_requests")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdAccountAsyncRequestsHandler handles list_ad_account_async_requests with typed arguments
func ListAdAccountAsyncRequestsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_async_requestsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Status != "" {
		query.Set("status", args.Status)
	}

	if args.Type != "" {
		query.Set("type", args.Type)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "async_requests")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountAsyncadcreativesHandler handles list_ad_account_asyncadcreatives with typed arguments
func ListAdAccountAsyncadcreativesHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_asyncadcreativesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.IsCompleted {
		query.Set("is_completed", "true")
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "asyncadcreatives")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountAsyncadcreativeHandler handles create_ad_account_asyncadcreative with typed arguments
func CreateAdAccountAsyncadcreativeHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_asyncadcreativeArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.CreativeSpec != nil {
		body["creative_spec"] = args.CreativeSpec
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.NotificationMode != "" {
		body["notification_mode"] = args.NotificationMode
	}

	if args.NotificationUri != "" {
		body["notification_uri"] = args.NotificationUri
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "asyncadcreatives")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdAccountAsyncadrequestsetsHandler handles list_ad_account_asyncadrequestsets with typed arguments
func ListAdAccountAsyncadrequestsetsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_asyncadrequestsetsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.IsCompleted {
		query.Set("is_completed", "true")
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "asyncadrequestsets")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountAsyncadrequestsetHandler handles create_ad_account_asyncadrequestset with typed arguments
func CreateAdAccountAsyncadrequestsetHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_asyncadrequestsetArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.AdSpecs) > 0 {
		body["ad_specs"] = args.AdSpecs
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.NotificationMode != "" {
		body["notification_mode"] = args.NotificationMode
	}

	if args.NotificationUri != "" {
		body["notification_uri"] = args.NotificationUri
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "asyncadrequestsets")

	return ExecutePOSTRequest(ctx, url, body)

}

// GetAdAccountAudienceFunnelHandler handles get_ad_account_audience_funnel with typed arguments
func GetAdAccountAudienceFunnelHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_account_audience_funnelArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "audience_funnel")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountBlockListDraftHandler handles create_ad_account_block_list_draft with typed arguments
func CreateAdAccountBlockListDraftHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_block_list_draftArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.PublisherUrlsFile != nil {
		body["publisher_urls_file"] = args.PublisherUrlsFile
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "block_list_drafts")

	return ExecutePOSTRequest(ctx, url, body)

}

// CreateAdAccountBrandSafetyContentFilterLevelHandler handles create_ad_account_brand_safety_content_filter_level with typed arguments
func CreateAdAccountBrandSafetyContentFilterLevelHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_brand_safety_content_filter_levelArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.BrandSafetyContentFilterLevels) > 0 {
		body["brand_safety_content_filter_levels"] = args.BrandSafetyContentFilterLevels
	}

	if args.BusinessId != "" {
		body["business_id"] = args.BusinessId
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "brand_safety_content_filter_levels")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdAccountBroadtargetingcategoriesHandler handles list_ad_account_broadtargetingcategories with typed arguments
func ListAdAccountBroadtargetingcategoriesHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_broadtargetingcategoriesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.CustomCategoriesOnly {
		query.Set("custom_categories_only", "true")
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "broadtargetingcategories")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountBusinessprojectsHandler handles list_ad_account_businessprojects with typed arguments
func ListAdAccountBusinessprojectsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_businessprojectsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Business != "" {
		query.Set("business", args.Business)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "businessprojects")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// RemoveCampaignsFromAdAccountHandler handles remove_campaigns_from_ad_account with typed arguments
func RemoveCampaignsFromAdAccountHandler(ctx context.Context, request mcp.CallToolRequest, args remove_campaigns_from_ad_accountArgs) (*mcp.CallToolResult, error) {

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	url := buildGraphURL(args.ID, "campaigns")
	return ExecuteDELETERequest(ctx, url)

}

// ListAdAccountCampaignsHandler handles list_ad_account_campaigns with typed arguments
func ListAdAccountCampaignsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_campaignsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.DatePreset != "" {
		query.Set("date_preset", args.DatePreset)
	}

	if len(args.EffectiveStatus) > 0 {
		query.Set("effective_status", strings.Join(args.EffectiveStatus, ","))
	}

	if args.IsCompleted {
		query.Set("is_completed", "true")
	}

	// Handle TimeRange map parameter
	for k, v := range args.TimeRange {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "campaigns")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountCampaignHandler handles create_ad_account_campaign with typed arguments
func CreateAdAccountCampaignHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_campaignArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.Adlabels) > 0 {
		body["adlabels"] = args.Adlabels
	}

	if args.BidStrategy != "" {
		body["bid_strategy"] = args.BidStrategy
	}

	if args.BuyingType != "" {
		body["buying_type"] = args.BuyingType
	}

	if args.DailyBudget > 0 {
		body["daily_budget"] = args.DailyBudget
	}

	if len(args.ExecutionOptions) > 0 {
		body["execution_options"] = args.ExecutionOptions
	}

	body["is_skadnetwork_attribution"] = args.IsSkadnetworkAttribution

	if len(args.IterativeSplitTestConfigs) > 0 {
		body["iterative_split_test_configs"] = args.IterativeSplitTestConfigs
	}

	if args.LifetimeBudget > 0 {
		body["lifetime_budget"] = args.LifetimeBudget
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.Objective != "" {
		body["objective"] = args.Objective
	}

	if len(args.PacingType) > 0 {
		body["pacing_type"] = args.PacingType
	}

	if args.PromotedObject != nil {
		body["promoted_object"] = args.PromotedObject
	}

	if args.SmartPromotionType != "" {
		body["smart_promotion_type"] = args.SmartPromotionType
	}

	if args.SourceCampaignId != "" {
		body["source_campaign_id"] = args.SourceCampaignId
	}

	if len(args.SpecialAdCategories) > 0 {
		body["special_ad_categories"] = args.SpecialAdCategories
	}

	if len(args.SpecialAdCategoryCountry) > 0 {
		body["special_ad_category_country"] = args.SpecialAdCategoryCountry
	}

	if args.SpendCap > 0 {
		body["spend_cap"] = args.SpendCap
	}

	if args.StartTime != "" {
		body["start_time"] = args.StartTime
	}

	if args.Status != "" {
		body["status"] = args.Status
	}

	if args.StopTime != "" {
		body["stop_time"] = args.StopTime
	}

	if args.ToplineId != "" {
		body["topline_id"] = args.ToplineId
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "campaigns")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdAccountCampaignsbylabelsHandler handles list_ad_account_campaignsbylabels with typed arguments
func ListAdAccountCampaignsbylabelsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_campaignsbylabelsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if len(args.AdLabelIds) > 0 {
		query.Set("ad_label_ids", strings.Join(args.AdLabelIds, ","))
	}

	if args.Operator != "" {
		query.Set("operator", args.Operator)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "campaignsbylabels")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountConnectedInstagramAccountsHandler handles list_ad_account_connected_instagram_accounts with typed arguments
func ListAdAccountConnectedInstagramAccountsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_connected_instagram_accountsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "connected_instagram_accounts")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// GetAdAccountConnectedInstagramAccountsWithIabpHandler handles get_ad_account_connected_instagram_accounts_with_iabp with typed arguments
func GetAdAccountConnectedInstagramAccountsWithIabpHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_account_connected_instagram_accounts_with_iabpArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.BusinessId != "" {
		query.Set("business_id", args.BusinessId)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "connected_instagram_accounts_with_iabp")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountConversionGoalsHandler handles list_ad_account_conversion_goals with typed arguments
func ListAdAccountConversionGoalsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_conversion_goalsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "conversion_goals")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountCustomaudiencesHandler handles list_ad_account_customaudiences with typed arguments
func ListAdAccountCustomaudiencesHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_customaudiencesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.BusinessId != "" {
		query.Set("business_id", args.BusinessId)
	}

	if args.FetchPrimaryAudience {
		query.Set("fetch_primary_audience", "true")
	}

	if args.PixelId != "" {
		query.Set("pixel_id", args.PixelId)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "customaudiences")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountCustomaudienceHandler handles create_ad_account_customaudience with typed arguments
func CreateAdAccountCustomaudienceHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_customaudienceArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.AllowedDomains) > 0 {
		body["allowed_domains"] = args.AllowedDomains
	}

	if args.AssociatedAudienceId > 0 {
		body["associated_audience_id"] = args.AssociatedAudienceId
	}

	if args.ClaimObjective != "" {
		body["claim_objective"] = args.ClaimObjective
	}

	if args.ContentType != "" {
		body["content_type"] = args.ContentType
	}

	if args.Countries != "" {
		body["countries"] = args.Countries
	}

	if args.CreationParams != nil {
		body["creation_params"] = args.CreationParams
	}

	if args.CustomerFileSource != "" {
		body["customer_file_source"] = args.CustomerFileSource
	}

	if args.DatasetId != "" {
		body["dataset_id"] = args.DatasetId
	}

	if args.Description != "" {
		body["description"] = args.Description
	}

	body["enable_fetch_or_create"] = args.EnableFetchOrCreate

	if args.EventSourceGroup != "" {
		body["event_source_group"] = args.EventSourceGroup
	}

	if len(args.EventSources) > 0 {
		body["event_sources"] = args.EventSources
	}

	if len(args.Exclusions) > 0 {
		body["exclusions"] = args.Exclusions
	}

	if args.FacebookPageId != "" {
		body["facebook_page_id"] = args.FacebookPageId
	}

	if len(args.Inclusions) > 0 {
		body["inclusions"] = args.Inclusions
	}

	body["is_snapshot"] = args.IsSnapshot

	body["is_value_based"] = args.IsValueBased

	if args.ListOfAccounts != nil {
		body["list_of_accounts"] = args.ListOfAccounts
	}

	if args.LookalikeSpec != "" {
		body["lookalike_spec"] = args.LookalikeSpec
	}

	if args.MarketingMessageChannels != nil {
		body["marketing_message_channels"] = args.MarketingMessageChannels
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.OptOutLink != "" {
		body["opt_out_link"] = args.OptOutLink
	}

	if args.OriginAudienceId != "" {
		body["origin_audience_id"] = args.OriginAudienceId
	}

	if args.ParentAudienceId > 0 {
		body["parent_audience_id"] = args.ParentAudienceId
	}

	if args.PartnerReferenceKey != "" {
		body["partner_reference_key"] = args.PartnerReferenceKey
	}

	if args.PixelId != "" {
		body["pixel_id"] = args.PixelId
	}

	body["prefill"] = args.Prefill

	if args.ProductSetId != "" {
		body["product_set_id"] = args.ProductSetId
	}

	if args.RegulatedAudienceSpec != "" {
		body["regulated_audience_spec"] = args.RegulatedAudienceSpec
	}

	if args.RetentionDays > 0 {
		body["retention_days"] = args.RetentionDays
	}

	if args.RevSharePolicyId > 0 {
		body["rev_share_policy_id"] = args.RevSharePolicyId
	}

	if args.Rule != "" {
		body["rule"] = args.Rule
	}

	if args.RuleAggregation != "" {
		body["rule_aggregation"] = args.RuleAggregation
	}

	if len(args.SubscriptionInfo) > 0 {
		body["subscription_info"] = args.SubscriptionInfo
	}

	if args.Subtype != "" {
		body["subtype"] = args.Subtype
	}

	if len(args.UseForProducts) > 0 {
		body["use_for_products"] = args.UseForProducts
	}

	body["use_in_campaigns"] = args.UseInCampaigns

	if len(args.VideoGroupIds) > 0 {
		body["video_group_ids"] = args.VideoGroupIds
	}

	if args.WhatsAppBusinessPhoneNumberId != "" {
		body["whats_app_business_phone_number_id"] = args.WhatsAppBusinessPhoneNumberId
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "customaudiences")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdAccountCustomaudiencestosHandler handles list_ad_account_customaudiencestos with typed arguments
func ListAdAccountCustomaudiencestosHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_customaudiencestosArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "customaudiencestos")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountCustomaudiencestoHandler handles create_ad_account_customaudiencesto with typed arguments
func CreateAdAccountCustomaudiencestoHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_customaudiencestoArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.BusinessId != "" {
		body["business_id"] = args.BusinessId
	}

	if args.TosId != "" {
		body["tos_id"] = args.TosId
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "customaudiencestos")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdAccountCustomconversionsHandler handles list_ad_account_customconversions with typed arguments
func ListAdAccountCustomconversionsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_customconversionsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "customconversions")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountCustomconversionHandler handles create_ad_account_customconversion with typed arguments
func CreateAdAccountCustomconversionHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_customconversionArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.ActionSourceType != "" {
		body["action_source_type"] = args.ActionSourceType
	}

	if args.AdvancedRule != "" {
		body["advanced_rule"] = args.AdvancedRule
	}

	if args.CustomEventType != "" {
		body["custom_event_type"] = args.CustomEventType
	}

	if args.DefaultConversionValue != 0 {
		body["default_conversion_value"] = args.DefaultConversionValue
	}

	if args.Description != "" {
		body["description"] = args.Description
	}

	if args.EventSourceId != "" {
		body["event_source_id"] = args.EventSourceId
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.Rule != "" {
		body["rule"] = args.Rule
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "customconversions")

	return ExecutePOSTRequest(ctx, url, body)

}

// GetAdAccountDeliveryEstimateHandler handles get_ad_account_delivery_estimate with typed arguments
func GetAdAccountDeliveryEstimateHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_account_delivery_estimateArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.OptimizationGoal != "" {
		query.Set("optimization_goal", args.OptimizationGoal)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "delivery_estimate")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountDeprecatedtargetingadsetsHandler handles list_ad_account_deprecatedtargetingadsets with typed arguments
func ListAdAccountDeprecatedtargetingadsetsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_deprecatedtargetingadsetsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Type != "" {
		query.Set("type", args.Type)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "deprecatedtargetingadsets")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountDsaRecommendationsHandler handles list_ad_account_dsa_recommendations with typed arguments
func ListAdAccountDsaRecommendationsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_dsa_recommendationsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL("", "dsa_recommendations")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountGeneratepreviewsHandler handles list_ad_account_generatepreviews with typed arguments
func ListAdAccountGeneratepreviewsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_generatepreviewsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.AdFormat != "" {
		query.Set("ad_format", args.AdFormat)
	}

	if args.CreativeFeature != "" {
		query.Set("creative_feature", args.CreativeFeature)
	}

	if args.DynamicAssetLabel != "" {
		query.Set("dynamic_asset_label", args.DynamicAssetLabel)
	}

	// Handle DynamicCreativeSpec map parameter
	for k, v := range args.DynamicCreativeSpec {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	// Handle DynamicCustomization map parameter
	for k, v := range args.DynamicCustomization {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	if args.EndDate != "" {
		query.Set("end_date", args.EndDate)
	}

	if args.Height > 0 {
		query.Set("height", fmt.Sprintf("%d", args.Height))
	}

	if args.Locale != "" {
		query.Set("locale", args.Locale)
	}

	if args.PlacePageId > 0 {
		query.Set("place_page_id", fmt.Sprintf("%d", args.PlacePageId))
	}

	// Handle Post map parameter
	for k, v := range args.Post {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	if len(args.ProductItemIds) > 0 {
		query.Set("product_item_ids", strings.Join(args.ProductItemIds, ","))
	}

	if args.RenderType != "" {
		query.Set("render_type", args.RenderType)
	}

	if args.StartDate != "" {
		query.Set("start_date", args.StartDate)
	}

	if args.Width > 0 {
		query.Set("width", fmt.Sprintf("%d", args.Width))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "generatepreviews")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountImpactingAdStudiesHandler handles list_ad_account_impacting_ad_studies with typed arguments
func ListAdAccountImpactingAdStudiesHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_impacting_ad_studiesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "impacting_ad_studies")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// GetAdAccountInsightsHandler handles get_ad_account_insights with typed arguments
func GetAdAccountInsightsHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_account_insightsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if len(args.ActionAttributionWindows) > 0 {
		query.Set("action_attribution_windows", strings.Join(args.ActionAttributionWindows, ","))
	}

	if len(args.ActionBreakdowns) > 0 {
		query.Set("action_breakdowns", strings.Join(args.ActionBreakdowns, ","))
	}

	if args.ActionReportTime != "" {
		query.Set("action_report_time", args.ActionReportTime)
	}

	if len(args.Breakdowns) > 0 {
		query.Set("breakdowns", strings.Join(args.Breakdowns, ","))
	}

	if args.DatePreset != "" {
		query.Set("date_preset", args.DatePreset)
	}

	if args.DefaultSummary {
		query.Set("default_summary", "true")
	}

	if len(args.ExportColumns) > 0 {
		query.Set("export_columns", strings.Join(args.ExportColumns, ","))
	}

	if args.ExportFormat != "" {
		query.Set("export_format", args.ExportFormat)
	}

	if args.ExportName != "" {
		query.Set("export_name", args.ExportName)
	}

	if args.Level != "" {
		query.Set("level", args.Level)
	}

	if args.ProductIdLimit > 0 {
		query.Set("product_id_limit", fmt.Sprintf("%d", args.ProductIdLimit))
	}

	if len(args.Sort) > 0 {
		query.Set("sort", strings.Join(args.Sort, ","))
	}

	if len(args.Summary) > 0 {
		query.Set("summary", strings.Join(args.Summary, ","))
	}

	if len(args.SummaryActionBreakdowns) > 0 {
		query.Set("summary_action_breakdowns", strings.Join(args.SummaryActionBreakdowns, ","))
	}

	if args.TimeIncrement != "" {
		query.Set("time_increment", args.TimeIncrement)
	}

	// Handle TimeRange map parameter
	for k, v := range args.TimeRange {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	if args.UseAccountAttributionSetting {
		query.Set("use_account_attribution_setting", "true")
	}

	if args.UseUnifiedAttributionSetting {
		query.Set("use_unified_attribution_setting", "true")
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "insights")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountInsightsReportHandler handles create_ad_account_insights_report with typed arguments
func CreateAdAccountInsightsReportHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_insights_reportArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.ActionAttributionWindows) > 0 {
		body["action_attribution_windows"] = args.ActionAttributionWindows
	}

	if len(args.ActionBreakdowns) > 0 {
		body["action_breakdowns"] = args.ActionBreakdowns
	}

	if args.ActionReportTime != "" {
		body["action_report_time"] = args.ActionReportTime
	}

	if len(args.Breakdowns) > 0 {
		body["breakdowns"] = args.Breakdowns
	}

	if args.DatePreset != "" {
		body["date_preset"] = args.DatePreset
	}

	body["default_summary"] = args.DefaultSummary

	if len(args.ExportColumns) > 0 {
		body["export_columns"] = args.ExportColumns
	}

	if args.ExportFormat != "" {
		body["export_format"] = args.ExportFormat
	}

	if args.ExportName != "" {
		body["export_name"] = args.ExportName
	}

	if len(args.Fields) > 0 {
		body["fields"] = args.Fields
	}

	if len(args.Filtering) > 0 {
		body["filtering"] = args.Filtering
	}

	if args.Level != "" {
		body["level"] = args.Level
	}

	if args.Limit > 0 {
		body["limit"] = args.Limit
	}

	if args.ProductIdLimit > 0 {
		body["product_id_limit"] = args.ProductIdLimit
	}

	if len(args.Sort) > 0 {
		body["sort"] = args.Sort
	}

	if len(args.Summary) > 0 {
		body["summary"] = args.Summary
	}

	if len(args.SummaryActionBreakdowns) > 0 {
		body["summary_action_breakdowns"] = args.SummaryActionBreakdowns
	}

	if args.TimeIncrement != "" {
		body["time_increment"] = args.TimeIncrement
	}

	if args.TimeRange != nil {
		body["time_range"] = args.TimeRange
	}

	if len(args.TimeRanges) > 0 {
		body["time_ranges"] = args.TimeRanges
	}

	body["use_account_attribution_setting"] = args.UseAccountAttributionSetting

	body["use_unified_attribution_setting"] = args.UseUnifiedAttributionSetting

	// Build URL and execute
	url := buildGraphURL(args.ID, "insights")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdAccountInstagramAccountsHandler handles list_ad_account_instagram_accounts with typed arguments
func ListAdAccountInstagramAccountsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_instagram_accountsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "instagram_accounts")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountIosFourteenCampaignLimitsHandler handles list_ad_account_ios_fourteen_campaign_limits with typed arguments
func ListAdAccountIosFourteenCampaignLimitsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_ios_fourteen_campaign_limitsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.AppId != "" {
		query.Set("app_id", args.AppId)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ios_fourteen_campaign_limits")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountMatchedSearchApplicationsHandler handles list_ad_account_matched_search_applications with typed arguments
func ListAdAccountMatchedSearchApplicationsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_matched_search_applicationsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.AllowIncompleteApp {
		query.Set("allow_incomplete_app", "true")
	}

	if args.AppStore != "" {
		query.Set("app_store", args.AppStore)
	}

	if args.AppStoreCountry != "" {
		query.Set("app_store_country", args.AppStoreCountry)
	}

	if args.BusinessId != "" {
		query.Set("business_id", args.BusinessId)
	}

	if args.IsSkadnetworkSearch {
		query.Set("is_skadnetwork_search", "true")
	}

	if args.OnlyAppsWithPermission {
		query.Set("only_apps_with_permission", "true")
	}

	if args.QueryTerm != "" {
		query.Set("query_term", args.QueryTerm)
	}

	// Build URL and execute
	baseURL := buildGraphURL("", "matched_search_applications")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// GetAdAccountMaxBidHandler handles get_ad_account_max_bid with typed arguments
func GetAdAccountMaxBidHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_account_max_bidArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "max_bid")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountMcmeconversionsHandler handles list_ad_account_mcmeconversions with typed arguments
func ListAdAccountMcmeconversionsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_mcmeconversionsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL("", "mcmeconversions")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountMinimumBudgetsHandler handles list_ad_account_minimum_budgets with typed arguments
func ListAdAccountMinimumBudgetsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_minimum_budgetsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.BidAmount > 0 {
		query.Set("bid_amount", fmt.Sprintf("%d", args.BidAmount))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "minimum_budgets")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountOnbehalfRequestsHandler handles list_ad_account_onbehalf_requests with typed arguments
func ListAdAccountOnbehalfRequestsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_onbehalf_requestsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Status != "" {
		query.Set("status", args.Status)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "onbehalf_requests")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountProductAudienceHandler handles create_ad_account_product_audience with typed arguments
func CreateAdAccountProductAudienceHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_product_audienceArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.AllowedDomains) > 0 {
		body["allowed_domains"] = args.AllowedDomains
	}

	if args.AssociatedAudienceId > 0 {
		body["associated_audience_id"] = args.AssociatedAudienceId
	}

	if args.ClaimObjective != "" {
		body["claim_objective"] = args.ClaimObjective
	}

	if args.ContentType != "" {
		body["content_type"] = args.ContentType
	}

	if args.CreationParams != nil {
		body["creation_params"] = args.CreationParams
	}

	if args.Description != "" {
		body["description"] = args.Description
	}

	body["enable_fetch_or_create"] = args.EnableFetchOrCreate

	if args.EventSourceGroup != "" {
		body["event_source_group"] = args.EventSourceGroup
	}

	if len(args.EventSources) > 0 {
		body["event_sources"] = args.EventSources
	}

	if len(args.Exclusions) > 0 {
		body["exclusions"] = args.Exclusions
	}

	if len(args.Inclusions) > 0 {
		body["inclusions"] = args.Inclusions
	}

	body["is_snapshot"] = args.IsSnapshot

	body["is_value_based"] = args.IsValueBased

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.OptOutLink != "" {
		body["opt_out_link"] = args.OptOutLink
	}

	if args.ParentAudienceId > 0 {
		body["parent_audience_id"] = args.ParentAudienceId
	}

	if args.ProductSetId != "" {
		body["product_set_id"] = args.ProductSetId
	}

	if args.RevSharePolicyId > 0 {
		body["rev_share_policy_id"] = args.RevSharePolicyId
	}

	if args.Subtype != "" {
		body["subtype"] = args.Subtype
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "product_audiences")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdAccountPromotePagesHandler handles list_ad_account_promote_pages with typed arguments
func ListAdAccountPromotePagesHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_promote_pagesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "promote_pages")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountPublisherBlockListsHandler handles list_ad_account_publisher_block_lists with typed arguments
func ListAdAccountPublisherBlockListsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_publisher_block_listsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "publisher_block_lists")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountPublisherBlockListHandler handles create_ad_account_publisher_block_list with typed arguments
func CreateAdAccountPublisherBlockListHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_publisher_block_listArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.Name != "" {
		body["name"] = args.Name
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "publisher_block_lists")

	return ExecutePOSTRequest(ctx, url, body)

}

// GetAdAccountReachestimateHandler handles get_ad_account_reachestimate with typed arguments
func GetAdAccountReachestimateHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_account_reachestimateArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if len(args.AdgroupIds) > 0 {
		query.Set("adgroup_ids", strings.Join(args.AdgroupIds, ","))
	}

	if args.CallerId != "" {
		query.Set("caller_id", args.CallerId)
	}

	if args.Concepts != "" {
		query.Set("concepts", args.Concepts)
	}

	if args.CreativeActionSpec != "" {
		query.Set("creative_action_spec", args.CreativeActionSpec)
	}

	if args.IsDebug {
		query.Set("is_debug", "true")
	}

	if args.ObjectStoreUrl != "" {
		query.Set("object_store_url", args.ObjectStoreUrl)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "reachestimate")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountReachfrequencypredictionsHandler handles list_ad_account_reachfrequencypredictions with typed arguments
func ListAdAccountReachfrequencypredictionsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_reachfrequencypredictionsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "reachfrequencypredictions")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountReachfrequencypredictionHandler handles create_ad_account_reachfrequencyprediction with typed arguments
func CreateAdAccountReachfrequencypredictionHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_reachfrequencypredictionArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.Action != "" {
		body["action"] = args.Action
	}

	if len(args.AdFormats) > 0 {
		body["ad_formats"] = args.AdFormats
	}

	if args.AuctionEntryOptionIndex > 0 {
		body["auction_entry_option_index"] = args.AuctionEntryOptionIndex
	}

	if args.Budget > 0 {
		body["budget"] = args.Budget
	}

	if args.BuyingType != "" {
		body["buying_type"] = args.BuyingType
	}

	if args.CampaignGroupId != "" {
		body["campaign_group_id"] = args.CampaignGroupId
	}

	if len(args.DayPartingSchedule) > 0 {
		body["day_parting_schedule"] = args.DayPartingSchedule
	}

	if args.DealId != "" {
		body["deal_id"] = args.DealId
	}

	if args.DestinationId > 0 {
		body["destination_id"] = args.DestinationId
	}

	if len(args.DestinationIds) > 0 {
		body["destination_ids"] = args.DestinationIds
	}

	if args.EndTime > 0 {
		body["end_time"] = args.EndTime
	}

	body["exceptions"] = args.Exceptions

	if args.ExistingCampaignId != "" {
		body["existing_campaign_id"] = args.ExistingCampaignId
	}

	if args.ExpirationTime > 0 {
		body["expiration_time"] = args.ExpirationTime
	}

	if args.FrequencyCap > 0 {
		body["frequency_cap"] = args.FrequencyCap
	}

	body["grp_buying"] = args.GrpBuying

	if args.Impression > 0 {
		body["impression"] = args.Impression
	}

	if len(args.InstreamPackages) > 0 {
		body["instream_packages"] = args.InstreamPackages
	}

	if args.IntervalFrequencyCapResetPeriod > 0 {
		body["interval_frequency_cap_reset_period"] = args.IntervalFrequencyCapResetPeriod
	}

	body["is_balanced_frequency"] = args.IsBalancedFrequency

	body["is_bonus_media"] = args.IsBonusMedia

	body["is_conversion_goal"] = args.IsConversionGoal

	body["is_full_view"] = args.IsFullView

	body["is_higher_average_frequency"] = args.IsHigherAverageFrequency

	body["is_reach_and_frequency_io_buying"] = args.IsReachAndFrequencyIoBuying

	body["is_reserved_buying"] = args.IsReservedBuying

	if args.NumCurvePoints > 0 {
		body["num_curve_points"] = args.NumCurvePoints
	}

	if args.Objective != "" {
		body["objective"] = args.Objective
	}

	if args.OptimizationGoal != "" {
		body["optimization_goal"] = args.OptimizationGoal
	}

	if args.PredictionMode > 0 {
		body["prediction_mode"] = args.PredictionMode
	}

	if args.Reach > 0 {
		body["reach"] = args.Reach
	}

	if args.RfPredictionId != "" {
		body["rf_prediction_id"] = args.RfPredictionId
	}

	if args.RfPredictionIdToRelease != "" {
		body["rf_prediction_id_to_release"] = args.RfPredictionIdToRelease
	}

	if args.RfPredictionIdToShare != "" {
		body["rf_prediction_id_to_share"] = args.RfPredictionIdToShare
	}

	if args.StartTime > 0 {
		body["start_time"] = args.StartTime
	}

	if args.StopTime > 0 {
		body["stop_time"] = args.StopTime
	}

	if args.StoryEventType > 0 {
		body["story_event_type"] = args.StoryEventType
	}

	if args.TargetCpm > 0 {
		body["target_cpm"] = args.TargetCpm
	}

	if args.TargetFrequency > 0 {
		body["target_frequency"] = args.TargetFrequency
	}

	if args.TargetFrequencyResetPeriod > 0 {
		body["target_frequency_reset_period"] = args.TargetFrequencyResetPeriod
	}

	if args.TargetSpec != nil {
		body["target_spec"] = args.TargetSpec
	}

	if args.VideoViewLengthConstraint > 0 {
		body["video_view_length_constraint"] = args.VideoViewLengthConstraint
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "reachfrequencypredictions")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdAccountRecommendationsHandler handles list_ad_account_recommendations with typed arguments
func ListAdAccountRecommendationsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_recommendationsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL("", "recommendations")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountRecommendationHandler handles create_ad_account_recommendation with typed arguments
func CreateAdAccountRecommendationHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_recommendationArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	// Add parameters to body

	if args.AscFragmentationParameters != nil {
		body["asc_fragmentation_parameters"] = args.AscFragmentationParameters
	}

	if args.AutoflowParameters != nil {
		body["autoflow_parameters"] = args.AutoflowParameters
	}

	if args.FragmentationParameters != nil {
		body["fragmentation_parameters"] = args.FragmentationParameters
	}

	if args.MusicParameters != nil {
		body["music_parameters"] = args.MusicParameters
	}

	if args.RecommendationSignature != "" {
		body["recommendation_signature"] = args.RecommendationSignature
	}

	if args.ScaleGoodCampaignParameters != nil {
		body["scale_good_campaign_parameters"] = args.ScaleGoodCampaignParameters
	}

	// Build URL and execute
	url := buildGraphURL("", "recommendations")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdAccountSavedAudiencesHandler handles list_ad_account_saved_audiences with typed arguments
func ListAdAccountSavedAudiencesHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_saved_audiencesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.BusinessId != "" {
		query.Set("business_id", args.BusinessId)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "saved_audiences")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// RemoveSubscribedAppsFromAdAccountHandler handles remove_subscribed_apps_from_ad_account with typed arguments
func RemoveSubscribedAppsFromAdAccountHandler(ctx context.Context, request mcp.CallToolRequest, args remove_subscribed_apps_from_ad_accountArgs) (*mcp.CallToolResult, error) {

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	url := buildGraphURL(args.ID, "subscribed_apps")
	return ExecuteDELETERequest(ctx, url)

}

// ListAdAccountSubscribedAppsHandler handles list_ad_account_subscribed_apps with typed arguments
func ListAdAccountSubscribedAppsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_subscribed_appsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "subscribed_apps")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountSubscribedAppHandler handles create_ad_account_subscribed_app with typed arguments
func CreateAdAccountSubscribedAppHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_subscribed_appArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.AppId != "" {
		body["app_id"] = args.AppId
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "subscribed_apps")

	return ExecutePOSTRequest(ctx, url, body)

}

// GetAdAccountTargetingbrowseHandler handles get_ad_account_targetingbrowse with typed arguments
func GetAdAccountTargetingbrowseHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_account_targetingbrowseArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.ExcludedCategory != "" {
		query.Set("excluded_category", args.ExcludedCategory)
	}

	if args.IncludeNodes {
		query.Set("include_nodes", "true")
	}

	if args.IsExclusion {
		query.Set("is_exclusion", "true")
	}

	if args.LimitType != "" {
		query.Set("limit_type", args.LimitType)
	}

	if len(args.RegulatedCategories) > 0 {
		query.Set("regulated_categories", strings.Join(args.RegulatedCategories, ","))
	}

	if len(args.RegulatedCountries) > 0 {
		query.Set("regulated_countries", strings.Join(args.RegulatedCountries, ","))
	}

	if len(args.WhitelistedTypes) > 0 {
		query.Set("whitelisted_types", strings.Join(args.WhitelistedTypes, ","))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "targetingbrowse")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// GetAdAccountTargetingsearchHandler handles get_ad_account_targetingsearch with typed arguments
func GetAdAccountTargetingsearchHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_account_targetingsearchArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.AllowOnlyFatHeadInterests {
		query.Set("allow_only_fat_head_interests", "true")
	}

	if args.AppStore != "" {
		query.Set("app_store", args.AppStore)
	}

	if len(args.Countries) > 0 {
		query.Set("countries", strings.Join(args.Countries, ","))
	}

	if args.IsAccountLevelBrandSafetyExclusion {
		query.Set("is_account_level_brand_safety_exclusion", "true")
	}

	if args.IsAccountLevelEmployerExclusion {
		query.Set("is_account_level_employer_exclusion", "true")
	}

	if args.IsExclusion {
		query.Set("is_exclusion", "true")
	}

	if args.LimitType != "" {
		query.Set("limit_type", args.LimitType)
	}

	if args.Objective != "" {
		query.Set("objective", args.Objective)
	}

	if args.Q != "" {
		query.Set("q", args.Q)
	}

	if len(args.RegulatedCategories) > 0 {
		query.Set("regulated_categories", strings.Join(args.RegulatedCategories, ","))
	}

	if len(args.RegulatedCountries) > 0 {
		query.Set("regulated_countries", strings.Join(args.RegulatedCountries, ","))
	}

	if args.SessionId > 0 {
		query.Set("session_id", fmt.Sprintf("%d", args.SessionId))
	}

	if len(args.WhitelistedTypes) > 0 {
		query.Set("whitelisted_types", strings.Join(args.WhitelistedTypes, ","))
	}

	// Build URL and execute
	baseURL := buildGraphURL("", "targetingsearch")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountTargetingsentencelinesHandler handles list_ad_account_targetingsentencelines with typed arguments
func ListAdAccountTargetingsentencelinesHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_targetingsentencelinesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.DiscardAges {
		query.Set("discard_ages", "true")
	}

	if args.DiscardPlacements {
		query.Set("discard_placements", "true")
	}

	if args.HideTargetingSpecFromReturn {
		query.Set("hide_targeting_spec_from_return", "true")
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "targetingsentencelines")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListAdAccountTargetingsuggestionsHandler handles list_ad_account_targetingsuggestions with typed arguments
func ListAdAccountTargetingsuggestionsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_targetingsuggestionsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.AppStore != "" {
		query.Set("app_store", args.AppStore)
	}

	if len(args.Countries) > 0 {
		query.Set("countries", strings.Join(args.Countries, ","))
	}

	if args.LimitType != "" {
		query.Set("limit_type", args.LimitType)
	}

	if args.Mode != "" {
		query.Set("mode", args.Mode)
	}

	if args.Objective != "" {
		query.Set("objective", args.Objective)
	}

	// Handle Objects map parameter
	for k, v := range args.Objects {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	if len(args.RegulatedCategories) > 0 {
		query.Set("regulated_categories", strings.Join(args.RegulatedCategories, ","))
	}

	if len(args.RegulatedCountries) > 0 {
		query.Set("regulated_countries", strings.Join(args.RegulatedCountries, ","))
	}

	if args.SessionId > 0 {
		query.Set("session_id", fmt.Sprintf("%d", args.SessionId))
	}

	if len(args.WhitelistedTypes) > 0 {
		query.Set("whitelisted_types", strings.Join(args.WhitelistedTypes, ","))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "targetingsuggestions")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// GetAdAccountTargetingvalidationHandler handles get_ad_account_targetingvalidation with typed arguments
func GetAdAccountTargetingvalidationHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_account_targetingvalidationArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.IsExclusion {
		query.Set("is_exclusion", "true")
	}

	if len(args.NameList) > 0 {
		query.Set("name_list", strings.Join(args.NameList, ","))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "targetingvalidation")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// GetAdAccountTrackingHandler handles get_ad_account_tracking with typed arguments
func GetAdAccountTrackingHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_account_trackingArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "tracking")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UpdateAdAccountTrackingHandler handles update_ad_account_tracking with typed arguments
func UpdateAdAccountTrackingHandler(ctx context.Context, request mcp.CallToolRequest, args update_ad_account_trackingArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.TrackingSpecs != nil {
		body["tracking_specs"] = args.TrackingSpecs
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "tracking")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdAccountUsersHandler handles list_ad_account_users with typed arguments
func ListAdAccountUsersHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_usersArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "users")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// RemoveUsersofanyaudienceFromAdAccountHandler handles remove_usersofanyaudience_from_ad_account with typed arguments
func RemoveUsersofanyaudienceFromAdAccountHandler(ctx context.Context, request mcp.CallToolRequest, args remove_usersofanyaudience_from_ad_accountArgs) (*mcp.CallToolResult, error) {

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	url := buildGraphURL(args.ID, "usersofanyaudience")
	return ExecuteDELETERequest(ctx, url)

}

// GetAdAccountValueRuleSetHandler handles get_ad_account_value_rule_set with typed arguments
func GetAdAccountValueRuleSetHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_account_value_rule_setArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.ProductType != "" {
		query.Set("product_type", args.ProductType)
	}

	if args.Status != "" {
		query.Set("status", args.Status)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "value_rule_set")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UpdateAdAccountValueRuleSetHandler handles update_ad_account_value_rule_set with typed arguments
func UpdateAdAccountValueRuleSetHandler(ctx context.Context, request mcp.CallToolRequest, args update_ad_account_value_rule_setArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.ProductType != "" {
		body["product_type"] = args.ProductType
	}

	if len(args.Rules) > 0 {
		body["rules"] = args.Rules
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "value_rule_set")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListAdAccountVideoAdsHandler handles list_ad_account_video_ads with typed arguments
func ListAdAccountVideoAdsHandler(ctx context.Context, request mcp.CallToolRequest, args list_ad_account_video_adsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Since != "" {
		query.Set("since", args.Since)
	}

	if args.Until != "" {
		query.Set("until", args.Until)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "video_ads")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateAdAccountVideoAdHandler handles create_ad_account_video_ad with typed arguments
func CreateAdAccountVideoAdHandler(ctx context.Context, request mcp.CallToolRequest, args create_ad_account_video_adArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.Description != "" {
		body["description"] = args.Description
	}

	if args.Privacy != "" {
		body["privacy"] = args.Privacy
	}

	if args.Title != "" {
		body["title"] = args.Title
	}

	if args.UploadPhase != "" {
		body["upload_phase"] = args.UploadPhase
	}

	if args.VideoId != "" {
		body["video_id"] = args.VideoId
	}

	if args.VideoState != "" {
		body["video_state"] = args.VideoState
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "video_ads")

	return ExecutePOSTRequest(ctx, url, body)

}

// GetAdAccountHandler handles get_ad_account with typed arguments
func GetAdAccountHandler(ctx context.Context, request mcp.CallToolRequest, args get_ad_accountArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("AdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UpdateAdAccountHandler handles update_ad_account with typed arguments
func UpdateAdAccountHandler(ctx context.Context, request mcp.CallToolRequest, args update_ad_accountArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.AgencyClientDeclaration != nil {
		body["agency_client_declaration"] = args.AgencyClientDeclaration
	}

	if len(args.AttributionSpec) > 0 {
		body["attribution_spec"] = args.AttributionSpec
	}

	if args.BusinessInfo != nil {
		body["business_info"] = args.BusinessInfo
	}

	if args.Currency != "" {
		body["currency"] = args.Currency
	}

	if args.CustomAudienceInfo != nil {
		body["custom_audience_info"] = args.CustomAudienceInfo
	}

	if args.DefaultDsaBeneficiary != "" {
		body["default_dsa_beneficiary"] = args.DefaultDsaBeneficiary
	}

	if args.DefaultDsaPayor != "" {
		body["default_dsa_payor"] = args.DefaultDsaPayor
	}

	if args.EndAdvertiser != "" {
		body["end_advertiser"] = args.EndAdvertiser
	}

	if len(args.ExistingCustomers) > 0 {
		body["existing_customers"] = args.ExistingCustomers
	}

	body["is_ba_skip_delayed_eligible"] = args.IsBaSkipDelayedEligible

	body["is_notifications_enabled"] = args.IsNotificationsEnabled

	if args.MediaAgency != "" {
		body["media_agency"] = args.MediaAgency
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.Partner != "" {
		body["partner"] = args.Partner
	}

	if args.SpendCap != 0 {
		body["spend_cap"] = args.SpendCap
	}

	if args.SpendCapAction != "" {
		body["spend_cap_action"] = args.SpendCapAction
	}

	if args.TimezoneId > 0 {
		body["timezone_id"] = args.TimezoneId
	}

	if args.TosAccepted != nil {
		body["tos_accepted"] = args.TosAccepted
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "")

	return ExecutePOSTRequest(ctx, url, body)

}

// generateSchemaForType is implemented in tools_common.go to avoid redeclaration

// RegisterAdAccountTools registers all AdAccount tools with the MCP server
func RegisterAdAccountTools(s *server.MCPServer) error {

	// Register list_ad_account_account_controls using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_account_controls", "List account_controls for this AdAccount Returns AdAccountBusinessConstraints.", list_ad_account_account_controlsSchema),
		mcp.NewTypedToolHandler(ListAdAccountAccountControlsHandler),
	)

	// Register create_ad_account_account_control using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_account_control", "Create or update account_controls for this AdAccount Returns AdAccountBusinessConstraints. Required: audience_controls", create_ad_account_account_controlSchema),
		mcp.NewTypedToolHandler(CreateAdAccountAccountControlHandler),
	)

	// Register list_ad_account_activities using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_activities", "List activities for this AdAccount Returns AdActivity.", list_ad_account_activitiesSchema),
		mcp.NewTypedToolHandler(ListAdAccountActivitiesHandler),
	)

	// Register list_ad_account_ad_place_page_sets using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_ad_place_page_sets", "List ad_place_page_sets for this AdAccount Returns AdPlacePageSet.", list_ad_account_ad_place_page_setsSchema),
		mcp.NewTypedToolHandler(ListAdAccountAdPlacePageSetsHandler),
	)

	// Register create_ad_account_ad_place_page_set using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_ad_place_page_set", "Associate ad_place_page_sets with this AdAccount Returns AdPlacePageSet. Required: name, parent_page", create_ad_account_ad_place_page_setSchema),
		mcp.NewTypedToolHandler(CreateAdAccountAdPlacePageSetHandler),
	)

	// Register update_ad_account_ad_place_page_sets_async using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("update_ad_account_ad_place_page_sets_async", "Associate ad_place_page_sets_async with this AdAccount Returns AdPlacePageSet. Required: name, parent_page", update_ad_account_ad_place_page_sets_asyncSchema),
		mcp.NewTypedToolHandler(UpdateAdAccountAdPlacePageSetsAsyncHandler),
	)

	// Register list_ad_account_ad_saved_keywords using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_ad_saved_keywords", "List ad_saved_keywords for this AdAccount Returns AdSavedKeywords.", list_ad_account_ad_saved_keywordsSchema),
		mcp.NewTypedToolHandler(ListAdAccountAdSavedKeywordsHandler),
	)

	// Register list_ad_account_ad_studies using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_ad_studies", "List ad_studies for this AdAccount Returns AdStudy.", list_ad_account_ad_studiesSchema),
		mcp.NewTypedToolHandler(ListAdAccountAdStudiesHandler),
	)

	// Register list_ad_account_adcloudplayables using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_adcloudplayables", "List adcloudplayables for this AdAccount Returns CloudGame.", list_ad_account_adcloudplayablesSchema),
		mcp.NewTypedToolHandler(ListAdAccountAdcloudplayablesHandler),
	)

	// Register list_ad_account_adcreatives using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_adcreatives", "List adcreatives for this AdAccount Returns AdCreative.", list_ad_account_adcreativesSchema),
		mcp.NewTypedToolHandler(ListAdAccountAdcreativesHandler),
	)

	// Register create_ad_account_adcreative using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_adcreative", "Associate adcreatives with this AdAccount Returns AdCreative.", create_ad_account_adcreativeSchema),
		mcp.NewTypedToolHandler(CreateAdAccountAdcreativeHandler),
	)

	// Register list_ad_account_adcreativesbylabels using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_adcreativesbylabels", "List adcreativesbylabels for this AdAccount Returns AdCreative. Required: ad_label_ids", list_ad_account_adcreativesbylabelsSchema),
		mcp.NewTypedToolHandler(ListAdAccountAdcreativesbylabelsHandler),
	)

	// Register remove_adimages_from_ad_account using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("remove_adimages_from_ad_account", "Remove adimages from this AdAccount Required: hash", remove_adimages_from_ad_accountSchema),
		mcp.NewTypedToolHandler(RemoveAdimagesFromAdAccountHandler),
	)

	// Register list_ad_account_adimages using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_adimages", "List adimages for this AdAccount Returns AdImage.", list_ad_account_adimagesSchema),
		mcp.NewTypedToolHandler(ListAdAccountAdimagesHandler),
	)

	// Register create_ad_account_adimage using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_adimage", "Associate adimages with this AdAccount", create_ad_account_adimageSchema),
		mcp.NewTypedToolHandler(CreateAdAccountAdimageHandler),
	)

	// Register list_ad_account_adlabels using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_adlabels", "List adlabels for this AdAccount Returns AdLabel.", list_ad_account_adlabelsSchema),
		mcp.NewTypedToolHandler(ListAdAccountAdlabelsHandler),
	)

	// Register create_ad_account_adlabel using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_adlabel", "Associate adlabels with this AdAccount Returns AdLabel. Required: name", create_ad_account_adlabelSchema),
		mcp.NewTypedToolHandler(CreateAdAccountAdlabelHandler),
	)

	// Register list_ad_account_adplayables using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_adplayables", "List adplayables for this AdAccount Returns PlayableContent.", list_ad_account_adplayablesSchema),
		mcp.NewTypedToolHandler(ListAdAccountAdplayablesHandler),
	)

	// Register create_ad_account_adplayable using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_adplayable", "Associate adplayables with this AdAccount Returns PlayableContent. Required: name", create_ad_account_adplayableSchema),
		mcp.NewTypedToolHandler(CreateAdAccountAdplayableHandler),
	)

	// Register get_ad_account_adrules_history using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_ad_account_adrules_history", "Get adrules_history data for this AdAccount Returns AdAccountAdRulesHistory.", get_ad_account_adrules_historySchema),
		mcp.NewTypedToolHandler(GetAdAccountAdrulesHistoryHandler),
	)

	// Register get_ad_account_adrules_library using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_ad_account_adrules_library", "Get adrules_library data for this AdAccount Returns AdRule.", get_ad_account_adrules_librarySchema),
		mcp.NewTypedToolHandler(GetAdAccountAdrulesLibraryHandler),
	)

	// Register update_ad_account_adrules_library using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("update_ad_account_adrules_library", "Associate adrules_library with this AdAccount Returns AdRule. Required: evaluation_spec, execution_spec, name", update_ad_account_adrules_librarySchema),
		mcp.NewTypedToolHandler(UpdateAdAccountAdrulesLibraryHandler),
	)

	// Register list_ad_account_ads using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_ads", "List ads for this AdAccount Returns Ad.", list_ad_account_adsSchema),
		mcp.NewTypedToolHandler(ListAdAccountAdsHandler),
	)

	// Register create_ad_account_ad using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_ad", "Associate ads with this AdAccount Returns Ad. Required: creative, name", create_ad_account_adSchema),
		mcp.NewTypedToolHandler(CreateAdAccountAdHandler),
	)

	// Register list_ad_account_ads_reporting_mmm_reports using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_ads_reporting_mmm_reports", "List ads_reporting_mmm_reports for this AdAccount Returns AdsReportBuilderMMMReport.", list_ad_account_ads_reporting_mmm_reportsSchema),
		mcp.NewTypedToolHandler(ListAdAccountAdsReportingMmmReportsHandler),
	)

	// Register list_ad_account_ads_reporting_mmm_schedulers using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_ads_reporting_mmm_schedulers", "List ads_reporting_mmm_schedulers for this AdAccount Returns AdsReportBuilderMMMReportScheduler.", list_ad_account_ads_reporting_mmm_schedulersSchema),
		mcp.NewTypedToolHandler(ListAdAccountAdsReportingMmmSchedulersHandler),
	)

	// Register get_ad_account_ads_volume using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_ad_account_ads_volume", "Get ads_volume data for this AdAccount Returns AdAccountAdVolume.", get_ad_account_ads_volumeSchema),
		mcp.NewTypedToolHandler(GetAdAccountAdsVolumeHandler),
	)

	// Register list_ad_account_adsbylabels using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_adsbylabels", "List adsbylabels for this AdAccount Returns Ad. Required: ad_label_ids", list_ad_account_adsbylabelsSchema),
		mcp.NewTypedToolHandler(ListAdAccountAdsbylabelsHandler),
	)

	// Register list_ad_account_adsets using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_adsets", "List adsets for this AdAccount Returns AdSet.", list_ad_account_adsetsSchema),
		mcp.NewTypedToolHandler(ListAdAccountAdsetsHandler),
	)

	// Register create_ad_account_adset using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_adset", "Associate adsets with this AdAccount Returns AdSet. Required: name", create_ad_account_adsetSchema),
		mcp.NewTypedToolHandler(CreateAdAccountAdsetHandler),
	)

	// Register list_ad_account_adsetsbylabels using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_adsetsbylabels", "List adsetsbylabels for this AdAccount Returns AdSet. Required: ad_label_ids", list_ad_account_adsetsbylabelsSchema),
		mcp.NewTypedToolHandler(ListAdAccountAdsetsbylabelsHandler),
	)

	// Register list_ad_account_adspixels using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_adspixels", "List adspixels for this AdAccount Returns AdsPixel.", list_ad_account_adspixelsSchema),
		mcp.NewTypedToolHandler(ListAdAccountAdspixelsHandler),
	)

	// Register create_ad_account_adspixel using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_adspixel", "Associate adspixels with this AdAccount Returns AdsPixel.", create_ad_account_adspixelSchema),
		mcp.NewTypedToolHandler(CreateAdAccountAdspixelHandler),
	)

	// Register list_ad_account_advertisable_applications using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_advertisable_applications", "List advertisable_applications for this AdAccount Returns Application.", list_ad_account_advertisable_applicationsSchema),
		mcp.NewTypedToolHandler(ListAdAccountAdvertisableApplicationsHandler),
	)

	// Register remove_advideos_from_ad_account using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("remove_advideos_from_ad_account", "Remove advideos from this AdAccount Required: video_id", remove_advideos_from_ad_accountSchema),
		mcp.NewTypedToolHandler(RemoveAdvideosFromAdAccountHandler),
	)

	// Register list_ad_account_advideos using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_advideos", "List advideos for this AdAccount Returns AdVideo.", list_ad_account_advideosSchema),
		mcp.NewTypedToolHandler(ListAdAccountAdvideosHandler),
	)

	// Register create_ad_account_advideo using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_advideo", "Associate advideos with this AdAccount Returns AdVideo.", create_ad_account_advideoSchema),
		mcp.NewTypedToolHandler(CreateAdAccountAdvideoHandler),
	)

	// Register list_ad_account_affectedadsets using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_affectedadsets", "List affectedadsets for this AdAccount Returns AdSet.", list_ad_account_affectedadsetsSchema),
		mcp.NewTypedToolHandler(ListAdAccountAffectedadsetsHandler),
	)

	// Register remove_agencies_from_ad_account using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("remove_agencies_from_ad_account", "Remove agencies from this AdAccount Required: business", remove_agencies_from_ad_accountSchema),
		mcp.NewTypedToolHandler(RemoveAgenciesFromAdAccountHandler),
	)

	// Register list_ad_account_agencies using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_agencies", "List agencies for this AdAccount Returns Business.", list_ad_account_agenciesSchema),
		mcp.NewTypedToolHandler(ListAdAccountAgenciesHandler),
	)

	// Register create_ad_account_agencie using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_agencie", "Create or update agencies for this AdAccount Returns AdAccount. Required: business", create_ad_account_agencieSchema),
		mcp.NewTypedToolHandler(CreateAdAccountAgencieHandler),
	)

	// Register list_ad_account_applications using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_applications", "List applications for this AdAccount Returns Application.", list_ad_account_applicationsSchema),
		mcp.NewTypedToolHandler(ListAdAccountApplicationsHandler),
	)

	// Register remove_assigned_users_from_ad_account using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("remove_assigned_users_from_ad_account", "Remove assigned_users from this AdAccount Required: user", remove_assigned_users_from_ad_accountSchema),
		mcp.NewTypedToolHandler(RemoveAssignedUsersFromAdAccountHandler),
	)

	// Register list_ad_account_assigned_users using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_assigned_users", "List assigned_users for this AdAccount Returns AssignedUser. Required: business", list_ad_account_assigned_usersSchema),
		mcp.NewTypedToolHandler(ListAdAccountAssignedUsersHandler),
	)

	// Register create_ad_account_assigned_user using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_assigned_user", "Create or update assigned_users for this AdAccount Returns AdAccount. Required: user", create_ad_account_assigned_userSchema),
		mcp.NewTypedToolHandler(CreateAdAccountAssignedUserHandler),
	)

	// Register create_ad_account_async_batch_request using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_async_batch_request", "Create or update async_batch_requests for this AdAccount Returns Campaign. Required: adbatch, name", create_ad_account_async_batch_requestSchema),
		mcp.NewTypedToolHandler(CreateAdAccountAsyncBatchRequestHandler),
	)

	// Register list_ad_account_async_requests using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_async_requests", "List async_requests for this AdAccount Returns AsyncRequest.", list_ad_account_async_requestsSchema),
		mcp.NewTypedToolHandler(ListAdAccountAsyncRequestsHandler),
	)

	// Register list_ad_account_asyncadcreatives using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_asyncadcreatives", "List asyncadcreatives for this AdAccount Returns AdAsyncRequestSet.", list_ad_account_asyncadcreativesSchema),
		mcp.NewTypedToolHandler(ListAdAccountAsyncadcreativesHandler),
	)

	// Register create_ad_account_asyncadcreative using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_asyncadcreative", "Create or update asyncadcreatives for this AdAccount Returns AdAsyncRequestSet. Required: creative_spec, name", create_ad_account_asyncadcreativeSchema),
		mcp.NewTypedToolHandler(CreateAdAccountAsyncadcreativeHandler),
	)

	// Register list_ad_account_asyncadrequestsets using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_asyncadrequestsets", "List asyncadrequestsets for this AdAccount Returns AdAsyncRequestSet.", list_ad_account_asyncadrequestsetsSchema),
		mcp.NewTypedToolHandler(ListAdAccountAsyncadrequestsetsHandler),
	)

	// Register create_ad_account_asyncadrequestset using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_asyncadrequestset", "Create or update asyncadrequestsets for this AdAccount Returns AdAsyncRequestSet. Required: ad_specs, name", create_ad_account_asyncadrequestsetSchema),
		mcp.NewTypedToolHandler(CreateAdAccountAsyncadrequestsetHandler),
	)

	// Register get_ad_account_audience_funnel using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_ad_account_audience_funnel", "Get audience_funnel data for this AdAccount Returns AudienceFunnel.", get_ad_account_audience_funnelSchema),
		mcp.NewTypedToolHandler(GetAdAccountAudienceFunnelHandler),
	)

	// Register create_ad_account_block_list_draft using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_block_list_draft", "Create or update block_list_drafts for this AdAccount Returns AdAccount. Required: publisher_urls_file", create_ad_account_block_list_draftSchema),
		mcp.NewTypedToolHandler(CreateAdAccountBlockListDraftHandler),
	)

	// Register create_ad_account_brand_safety_content_filter_level using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_brand_safety_content_filter_level", "Create or update brand_safety_content_filter_levels for this AdAccount Returns AdAccount. Required: brand_safety_content_filter_levels", create_ad_account_brand_safety_content_filter_levelSchema),
		mcp.NewTypedToolHandler(CreateAdAccountBrandSafetyContentFilterLevelHandler),
	)

	// Register list_ad_account_broadtargetingcategories using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_broadtargetingcategories", "List broadtargetingcategories for this AdAccount Returns BroadTargetingCategories.", list_ad_account_broadtargetingcategoriesSchema),
		mcp.NewTypedToolHandler(ListAdAccountBroadtargetingcategoriesHandler),
	)

	// Register list_ad_account_businessprojects using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_businessprojects", "List businessprojects for this AdAccount Returns BusinessProject.", list_ad_account_businessprojectsSchema),
		mcp.NewTypedToolHandler(ListAdAccountBusinessprojectsHandler),
	)

	// Register remove_campaigns_from_ad_account using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("remove_campaigns_from_ad_account", "Remove campaigns from this AdAccount Required: delete_strategy (enum)", remove_campaigns_from_ad_accountSchema),
		mcp.NewTypedToolHandler(RemoveCampaignsFromAdAccountHandler),
	)

	// Register list_ad_account_campaigns using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_campaigns", "List campaigns for this AdAccount Returns Campaign.", list_ad_account_campaignsSchema),
		mcp.NewTypedToolHandler(ListAdAccountCampaignsHandler),
	)

	// Register create_ad_account_campaign using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_campaign", "Create or update campaigns for this AdAccount Returns Campaign. Required: special_ad_categories", create_ad_account_campaignSchema),
		mcp.NewTypedToolHandler(CreateAdAccountCampaignHandler),
	)

	// Register list_ad_account_campaignsbylabels using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_campaignsbylabels", "List campaignsbylabels for this AdAccount Returns Campaign. Required: ad_label_ids", list_ad_account_campaignsbylabelsSchema),
		mcp.NewTypedToolHandler(ListAdAccountCampaignsbylabelsHandler),
	)

	// Register list_ad_account_connected_instagram_accounts using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_connected_instagram_accounts", "List connected_instagram_accounts for this AdAccount Returns IGUser.", list_ad_account_connected_instagram_accountsSchema),
		mcp.NewTypedToolHandler(ListAdAccountConnectedInstagramAccountsHandler),
	)

	// Register get_ad_account_connected_instagram_accounts_with_iabp using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_ad_account_connected_instagram_accounts_with_iabp", "Get connected_instagram_accounts_with_iabp data for this AdAccount Returns IGUser.", get_ad_account_connected_instagram_accounts_with_iabpSchema),
		mcp.NewTypedToolHandler(GetAdAccountConnectedInstagramAccountsWithIabpHandler),
	)

	// Register list_ad_account_conversion_goals using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_conversion_goals", "List conversion_goals for this AdAccount Returns AdsConversionGoal.", list_ad_account_conversion_goalsSchema),
		mcp.NewTypedToolHandler(ListAdAccountConversionGoalsHandler),
	)

	// Register list_ad_account_customaudiences using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_customaudiences", "List customaudiences for this AdAccount Returns CustomAudience.", list_ad_account_customaudiencesSchema),
		mcp.NewTypedToolHandler(ListAdAccountCustomaudiencesHandler),
	)

	// Register create_ad_account_customaudience using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_customaudience", "Create or update customaudiences for this AdAccount Returns CustomAudience.", create_ad_account_customaudienceSchema),
		mcp.NewTypedToolHandler(CreateAdAccountCustomaudienceHandler),
	)

	// Register list_ad_account_customaudiencestos using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_customaudiencestos", "List customaudiencestos for this AdAccount Returns CustomAudiencesTOS.", list_ad_account_customaudiencestosSchema),
		mcp.NewTypedToolHandler(ListAdAccountCustomaudiencestosHandler),
	)

	// Register create_ad_account_customaudiencesto using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_customaudiencesto", "Create or update customaudiencestos for this AdAccount Returns AdAccount. Required: tos_id", create_ad_account_customaudiencestoSchema),
		mcp.NewTypedToolHandler(CreateAdAccountCustomaudiencestoHandler),
	)

	// Register list_ad_account_customconversions using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_customconversions", "List customconversions for this AdAccount Returns CustomConversion.", list_ad_account_customconversionsSchema),
		mcp.NewTypedToolHandler(ListAdAccountCustomconversionsHandler),
	)

	// Register create_ad_account_customconversion using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_customconversion", "Create or update customconversions for this AdAccount Returns CustomConversion. Required: name", create_ad_account_customconversionSchema),
		mcp.NewTypedToolHandler(CreateAdAccountCustomconversionHandler),
	)

	// Register get_ad_account_delivery_estimate using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_ad_account_delivery_estimate", "Get delivery_estimate data for this AdAccount Returns AdAccountDeliveryEstimate. Required: optimization_goal (enum), targeting_spec", get_ad_account_delivery_estimateSchema),
		mcp.NewTypedToolHandler(GetAdAccountDeliveryEstimateHandler),
	)

	// Register list_ad_account_deprecatedtargetingadsets using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_deprecatedtargetingadsets", "List deprecatedtargetingadsets for this AdAccount Returns AdSet.", list_ad_account_deprecatedtargetingadsetsSchema),
		mcp.NewTypedToolHandler(ListAdAccountDeprecatedtargetingadsetsHandler),
	)

	// Register list_ad_account_dsa_recommendations using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_dsa_recommendations", "List dsa_recommendations for this AdAccount Returns AdAccountDsaRecommendations.", list_ad_account_dsa_recommendationsSchema),
		mcp.NewTypedToolHandler(ListAdAccountDsaRecommendationsHandler),
	)

	// Register list_ad_account_generatepreviews using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_generatepreviews", "List generatepreviews for this AdAccount Returns AdPreview. Required: ad_format (enum), creative", list_ad_account_generatepreviewsSchema),
		mcp.NewTypedToolHandler(ListAdAccountGeneratepreviewsHandler),
	)

	// Register list_ad_account_impacting_ad_studies using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_impacting_ad_studies", "List impacting_ad_studies for this AdAccount Returns AdStudy.", list_ad_account_impacting_ad_studiesSchema),
		mcp.NewTypedToolHandler(ListAdAccountImpactingAdStudiesHandler),
	)

	// Register get_ad_account_insights using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_ad_account_insights", "List insights for this AdAccount Returns AdsInsights.", get_ad_account_insightsSchema),
		mcp.NewTypedToolHandler(GetAdAccountInsightsHandler),
	)

	// Register create_ad_account_insights_report using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_insights_report", "Generate an insights report for this AdAccount Returns AdReportRun.", create_ad_account_insights_reportSchema),
		mcp.NewTypedToolHandler(CreateAdAccountInsightsReportHandler),
	)

	// Register list_ad_account_instagram_accounts using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_instagram_accounts", "List instagram_accounts for this AdAccount Returns IGUser.", list_ad_account_instagram_accountsSchema),
		mcp.NewTypedToolHandler(ListAdAccountInstagramAccountsHandler),
	)

	// Register list_ad_account_ios_fourteen_campaign_limits using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_ios_fourteen_campaign_limits", "List ios_fourteen_campaign_limits for this AdAccount Returns AdAccountIosFourteenCampaignLimits. Required: app_id", list_ad_account_ios_fourteen_campaign_limitsSchema),
		mcp.NewTypedToolHandler(ListAdAccountIosFourteenCampaignLimitsHandler),
	)

	// Register list_ad_account_matched_search_applications using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_matched_search_applications", "List matched_search_applications for this AdAccount Returns AdAccountMatchedSearchApplicationsEdgeData. Required: app_store (enum), query_term", list_ad_account_matched_search_applicationsSchema),
		mcp.NewTypedToolHandler(ListAdAccountMatchedSearchApplicationsHandler),
	)

	// Register get_ad_account_max_bid using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_ad_account_max_bid", "Get max_bid data for this AdAccount Returns AdAccountMaxBid.", get_ad_account_max_bidSchema),
		mcp.NewTypedToolHandler(GetAdAccountMaxBidHandler),
	)

	// Register list_ad_account_mcmeconversions using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_mcmeconversions", "List mcmeconversions for this AdAccount Returns AdsMcmeConversion.", list_ad_account_mcmeconversionsSchema),
		mcp.NewTypedToolHandler(ListAdAccountMcmeconversionsHandler),
	)

	// Register list_ad_account_minimum_budgets using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_minimum_budgets", "List minimum_budgets for this AdAccount Returns MinimumBudget.", list_ad_account_minimum_budgetsSchema),
		mcp.NewTypedToolHandler(ListAdAccountMinimumBudgetsHandler),
	)

	// Register list_ad_account_onbehalf_requests using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_onbehalf_requests", "List onbehalf_requests for this AdAccount Returns BusinessOwnedObjectOnBehalfOfRequest.", list_ad_account_onbehalf_requestsSchema),
		mcp.NewTypedToolHandler(ListAdAccountOnbehalfRequestsHandler),
	)

	// Register create_ad_account_product_audience using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_product_audience", "Create or update product_audiences for this AdAccount Returns AdAccount. Required: name, product_set_id", create_ad_account_product_audienceSchema),
		mcp.NewTypedToolHandler(CreateAdAccountProductAudienceHandler),
	)

	// Register list_ad_account_promote_pages using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_promote_pages", "List promote_pages for this AdAccount Returns Page.", list_ad_account_promote_pagesSchema),
		mcp.NewTypedToolHandler(ListAdAccountPromotePagesHandler),
	)

	// Register list_ad_account_publisher_block_lists using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_publisher_block_lists", "List publisher_block_lists for this AdAccount Returns PublisherBlockList.", list_ad_account_publisher_block_listsSchema),
		mcp.NewTypedToolHandler(ListAdAccountPublisherBlockListsHandler),
	)

	// Register create_ad_account_publisher_block_list using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_publisher_block_list", "Create or update publisher_block_lists for this AdAccount Returns PublisherBlockList.", create_ad_account_publisher_block_listSchema),
		mcp.NewTypedToolHandler(CreateAdAccountPublisherBlockListHandler),
	)

	// Register get_ad_account_reachestimate using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_ad_account_reachestimate", "Get reachestimate data for this AdAccount Returns AdAccountReachEstimate. Required: targeting_spec", get_ad_account_reachestimateSchema),
		mcp.NewTypedToolHandler(GetAdAccountReachestimateHandler),
	)

	// Register list_ad_account_reachfrequencypredictions using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_reachfrequencypredictions", "List reachfrequencypredictions for this AdAccount Returns ReachFrequencyPrediction.", list_ad_account_reachfrequencypredictionsSchema),
		mcp.NewTypedToolHandler(ListAdAccountReachfrequencypredictionsHandler),
	)

	// Register create_ad_account_reachfrequencyprediction using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_reachfrequencyprediction", "Create or update reachfrequencypredictions for this AdAccount Returns ReachFrequencyPrediction.", create_ad_account_reachfrequencypredictionSchema),
		mcp.NewTypedToolHandler(CreateAdAccountReachfrequencypredictionHandler),
	)

	// Register list_ad_account_recommendations using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_recommendations", "List recommendations for this AdAccount Returns AdAccountRecommendations.", list_ad_account_recommendationsSchema),
		mcp.NewTypedToolHandler(ListAdAccountRecommendationsHandler),
	)

	// Register create_ad_account_recommendation using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_recommendation", "Create or update recommendations for this AdAccount Returns AdAccountRecommendations. Required: recommendation_signature", create_ad_account_recommendationSchema),
		mcp.NewTypedToolHandler(CreateAdAccountRecommendationHandler),
	)

	// Register list_ad_account_saved_audiences using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_saved_audiences", "List saved_audiences for this AdAccount Returns SavedAudience.", list_ad_account_saved_audiencesSchema),
		mcp.NewTypedToolHandler(ListAdAccountSavedAudiencesHandler),
	)

	// Register remove_subscribed_apps_from_ad_account using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("remove_subscribed_apps_from_ad_account", "Remove subscribed_apps from this AdAccount", remove_subscribed_apps_from_ad_accountSchema),
		mcp.NewTypedToolHandler(RemoveSubscribedAppsFromAdAccountHandler),
	)

	// Register list_ad_account_subscribed_apps using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_subscribed_apps", "List subscribed_apps for this AdAccount Returns AdAccountSubscribedApps.", list_ad_account_subscribed_appsSchema),
		mcp.NewTypedToolHandler(ListAdAccountSubscribedAppsHandler),
	)

	// Register create_ad_account_subscribed_app using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_subscribed_app", "Create or update subscribed_apps for this AdAccount Returns AdAccountSubscribedApps.", create_ad_account_subscribed_appSchema),
		mcp.NewTypedToolHandler(CreateAdAccountSubscribedAppHandler),
	)

	// Register get_ad_account_targetingbrowse using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_ad_account_targetingbrowse", "Get targeting information for this AdAccount Returns AdAccountTargetingUnified.", get_ad_account_targetingbrowseSchema),
		mcp.NewTypedToolHandler(GetAdAccountTargetingbrowseHandler),
	)

	// Register get_ad_account_targetingsearch using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_ad_account_targetingsearch", "Get targeting information for this AdAccount Returns AdAccountTargetingUnified. Required: q", get_ad_account_targetingsearchSchema),
		mcp.NewTypedToolHandler(GetAdAccountTargetingsearchHandler),
	)

	// Register list_ad_account_targetingsentencelines using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_targetingsentencelines", "List targetingsentencelines for this AdAccount Returns TargetingSentenceLine. Required: targeting_spec", list_ad_account_targetingsentencelinesSchema),
		mcp.NewTypedToolHandler(ListAdAccountTargetingsentencelinesHandler),
	)

	// Register list_ad_account_targetingsuggestions using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_targetingsuggestions", "List targetingsuggestions for this AdAccount Returns AdAccountTargetingUnified.", list_ad_account_targetingsuggestionsSchema),
		mcp.NewTypedToolHandler(ListAdAccountTargetingsuggestionsHandler),
	)

	// Register get_ad_account_targetingvalidation using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_ad_account_targetingvalidation", "Get targeting information for this AdAccount Returns AdAccountTargetingUnified.", get_ad_account_targetingvalidationSchema),
		mcp.NewTypedToolHandler(GetAdAccountTargetingvalidationHandler),
	)

	// Register get_ad_account_tracking using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_ad_account_tracking", "Get tracking data for this AdAccount Returns AdAccountTrackingData.", get_ad_account_trackingSchema),
		mcp.NewTypedToolHandler(GetAdAccountTrackingHandler),
	)

	// Register update_ad_account_tracking using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("update_ad_account_tracking", "Create or update tracking for this AdAccount Returns AdAccount. Required: tracking_specs", update_ad_account_trackingSchema),
		mcp.NewTypedToolHandler(UpdateAdAccountTrackingHandler),
	)

	// Register list_ad_account_users using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_users", "List users for this AdAccount Returns AdAccountUser.", list_ad_account_usersSchema),
		mcp.NewTypedToolHandler(ListAdAccountUsersHandler),
	)

	// Register remove_usersofanyaudience_from_ad_account using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("remove_usersofanyaudience_from_ad_account", "Remove usersofanyaudience from this AdAccount", remove_usersofanyaudience_from_ad_accountSchema),
		mcp.NewTypedToolHandler(RemoveUsersofanyaudienceFromAdAccountHandler),
	)

	// Register get_ad_account_value_rule_set using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_ad_account_value_rule_set", "Get value_rule_set data for this AdAccount Returns AdsValueAdjustmentRuleCollection.", get_ad_account_value_rule_setSchema),
		mcp.NewTypedToolHandler(GetAdAccountValueRuleSetHandler),
	)

	// Register update_ad_account_value_rule_set using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("update_ad_account_value_rule_set", "Create or update value_rule_set for this AdAccount Returns AdsValueAdjustmentRuleCollection. Required: name, rules", update_ad_account_value_rule_setSchema),
		mcp.NewTypedToolHandler(UpdateAdAccountValueRuleSetHandler),
	)

	// Register list_ad_account_video_ads using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_ad_account_video_ads", "List video_ads for this AdAccount Returns AdVideo.", list_ad_account_video_adsSchema),
		mcp.NewTypedToolHandler(ListAdAccountVideoAdsHandler),
	)

	// Register create_ad_account_video_ad using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_ad_account_video_ad", "Create or update video_ads for this AdAccount Returns AdVideo. Required: upload_phase (enum)", create_ad_account_video_adSchema),
		mcp.NewTypedToolHandler(CreateAdAccountVideoAdHandler),
	)

	// Register get_ad_account using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_ad_account", "Get details of a specific AdAccount Returns AdAccount.", get_ad_accountSchema),
		mcp.NewTypedToolHandler(GetAdAccountHandler),
	)

	// Register update_ad_account using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("update_ad_account", "Update a AdAccount Returns AdAccount.", update_ad_accountSchema),
		mcp.NewTypedToolHandler(UpdateAdAccountHandler),
	)

	return nil
}

// AdAccount tools: 111 endpoints
