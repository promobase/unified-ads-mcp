// Code generated by Facebook Business API codegen. DO NOT EDIT.

package adaccountusersettings

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/shared"
)

// ToolAdaccountusersettings_get_ returns the MCP tool definition for adaccountusersettings_get_
func ToolAdaccountusersettings_get_() mcp.Tool {
	// Available fields for AdAccountUserSettings: acf_should_opt_out_video_adjustments, aco_sticky_settings, actions_quick_view_created, active_ads_quick_view_created, ad_account, ad_object_export_format, ads_manager_footer_row_toast_impressions, auto_review_video_caption, campaign_overview_columns, column_suggestion_status, conditional_formatting_rules, default_account_overview_agegender_metrics, default_account_overview_location_metrics, default_account_overview_metrics, default_account_overview_time_metrics, default_builtin_column_preset, default_nam_time_range, draft_mode_enabled, export_deleted_items_with_delivery, export_summary_row, had_delivery_quick_view_created, has_seen_groups_column_flexing_experience, has_seen_instagram_column_flexing_experience, has_seen_leads_column_flexing_experience, has_seen_shops_ads_metrics_onboarding_tour, has_seen_shops_column_flexing_experience, hidden_optimization_tips, high_performing_quick_view_created, id, is_3p_auth_setting_set, is_ads_manager_footer_row_preference_set, is_ads_manager_footer_row_shown, is_text_variation_nux_close, last_used_columns, last_used_pe_filters, last_used_website_urls, outlier_preferences, pinned_ad_object_ids, rb_export_format, rb_export_raw_data, rb_export_summary_row, saip_advertiser_setup_optimisation_guidance_overall_state, saip_advertiser_setup_optimisation_guidance_state, shops_ads_metrics_onboarding_tour_close_count, shops_ads_metrics_onboarding_tour_last_action_time, should_default_image_auto_crop, should_default_image_auto_crop_for_tail, should_default_image_auto_crop_optimization, should_default_image_dof_toggle, should_default_image_lpp_ads_to_square, should_default_instagram_profile_card_optimization, should_default_text_swapping_optimization, should_logout_of_3p_sourcing, should_show_shops_ads_metrics_onboarding_tour, show_archived_data, show_text_variation_nux_tooltip, syd_campaign_trends_activemetric, syd_campaign_trends_attribution, syd_campaign_trends_metrics, syd_campaign_trends_objective, syd_campaign_trends_time_range, syd_landing_page_opt_in_status, text_gen_persona_opt_in_type, text_variations_opt_in_out_ts, text_variations_opt_in_type, user
	
	return mcp.NewTool("adaccountusersettings_get_",
		mcp.WithDescription("GET  for AdAccountUserSettings"),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for AdAccountUserSettings objects. Available fields: acf_should_opt_out_video_adjustments, aco_sticky_settings, actions_quick_view_created, active_ads_quick_view_created, ad_account, ad_object_export_format, ads_manager_footer_row_toast_impressions, auto_review_video_caption, campaign_overview_columns, column_suggestion_status, conditional_formatting_rules, default_account_overview_agegender_metrics, default_account_overview_location_metrics, default_account_overview_metrics, default_account_overview_time_metrics (and 51 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleAdaccountusersettings_get_ handles the adaccountusersettings_get_ tool with context-based auth
func HandleAdaccountusersettings_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the API method
	result, err := Adaccountusersettings_get_(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute adaccountusersettings_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Adaccountusersettings_get_ performs GET  for AdAccountUserSettings
func Adaccountusersettings_get_(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")
	
	urlParams := url.Values{}
	urlParams.Set("access_token", accessToken)

	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("fields", fmt.Sprintf("%v", val))
		
	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("limit", fmt.Sprintf("%v", val))
		
	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("after", fmt.Sprintf("%v", val))
		
	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("before", fmt.Sprintf("%v", val))
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}