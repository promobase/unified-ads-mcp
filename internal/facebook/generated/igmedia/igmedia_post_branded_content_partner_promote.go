// Code generated by Facebook Business API codegen. DO NOT EDIT.

package igmedia

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/shared"
)

// ToolIgmedia_post_branded_content_partner_promote returns the MCP tool definition for igmedia_post_branded_content_partner_promote
func ToolIgmedia_post_branded_content_partner_promote() mcp.Tool {

	// Params object accepts: permission (bool), sponsor_id (unsigned int)
	return mcp.NewTool("igmedia_post_branded_content_partner_promote",
		mcp.WithDescription("POST branded_content_partner_promote for IGMedia"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"permission": map[string]any{
					"type":        "boolean",
					"description": "permission parameter",
					"required":    true,
				},
				"sponsor_id": map[string]any{
					"type":        "integer",
					"description": "sponsor_id parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: permission (boolean) [required], sponsor_id (integer) [required]"),
		),
	)
}

// HandleIgmedia_post_branded_content_partner_promote handles the igmedia_post_branded_content_partner_promote tool with context-based auth
func HandleIgmedia_post_branded_content_partner_promote(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the API method
	result, err := Igmedia_post_branded_content_partner_promote(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute igmedia_post_branded_content_partner_promote: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Igmedia_post_branded_content_partner_promote performs POST branded_content_partner_promote for IGMedia
func Igmedia_post_branded_content_partner_promote(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/branded_content_partner_promote")

	urlParams := url.Values{}
	urlParams.Set("access_token", accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("params", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "POST" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: POST")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
