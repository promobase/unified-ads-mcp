// Code generated by Facebook Business API codegen. DO NOT EDIT.

package igmedia

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolIgmedia_get_ returns the MCP tool definition for igmedia_get_
func ToolIgmedia_get_() mcp.Tool {
	// Available fields for IGMedia: alt_text, boost_eligibility_info, caption, comments_count, copyright_check_information, id, ig_id, is_comment_enabled, is_shared_to_feed, legacy_instagram_media_id, like_count, media_product_type, media_type, media_url, owner, permalink, shortcode, thumbnail_url, timestamp, username, view_count
	// Params object accepts: ad_account_id (unsigned int), boostable_media_callsite (shadowigmedia_boostable_media_callsite), business_id (string), primary_fb_page_id (string), primary_ig_user_id (string), secondary_fb_page_id (string), secondary_ig_user_id (string)
	return mcp.NewTool("igmedia_get_",
		mcp.WithDescription("GET  for IGMedia"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"ad_account_id": map[string]any{
					"type":        "integer",
					"description": "ad_account_id parameter",
				},
				"boostable_media_callsite": map[string]any{
					"type":        "string",
					"description": "boostable_media_callsite parameter",
					"enum":        []string{"ADS_MANAGER_L1_EDITOR_DYNAMIC_ADS_WITH_EXISTING_POST"},
				},
				"business_id": map[string]any{
					"type":        "string",
					"description": "business_id parameter",
				},
				"primary_fb_page_id": map[string]any{
					"type":        "string",
					"description": "primary_fb_page_id parameter",
				},
				"primary_ig_user_id": map[string]any{
					"type":        "string",
					"description": "primary_ig_user_id parameter",
				},
				"secondary_fb_page_id": map[string]any{
					"type":        "string",
					"description": "secondary_fb_page_id parameter",
				},
				"secondary_ig_user_id": map[string]any{
					"type":        "string",
					"description": "secondary_ig_user_id parameter",
				},
			}),
			mcp.Description("Parameters object containing: ad_account_id (integer), boostable_media_callsite (shadowigmedia_boostable_media_callsite) [ADS_MANAGER_L1_EDITOR_DYNAMIC_ADS_WITH_EXISTING_POST], business_id (string), primary_fb_page_id (string), primary_ig_user_id (string), secondary_fb_page_id (string), secondary_ig_user_id (string)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for IGMedia objects. Available fields: alt_text, boost_eligibility_info, caption, comments_count, copyright_check_information, id, ig_id, is_comment_enabled, is_shared_to_feed, legacy_instagram_media_id, like_count, media_product_type, media_type, media_url, owner (and 6 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleIgmedia_get_ handles the igmedia_get_ tool with context-based auth
func HandleIgmedia_get_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Optional: fields
	utils.ParseFieldsArray(request, args)

	// Optional: limit
	utils.ParseOptionalInt(request, "limit", args)

	// Optional: after
	utils.ParseOptionalString(request, "after", args)

	// Optional: before
	utils.ParseOptionalString(request, "before", args)

	// Call the API method
	result, err := Igmedia_get_(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute igmedia_get_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Igmedia_get_ performs GET  for IGMedia
func Igmedia_get_(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/")

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("GET", baseURL, urlParams)
}
