// Code generated by codegen. DO NOT EDIT.

package generated

import (
	"context"
	"encoding/json"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// Tool schemas for Campaign
var (
	list_campaign_ad_studiesSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Campaign ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`)

	create_campaign_adlabelSchema = json.RawMessage(`{"additionalProperties":false,"properties":{"adlabels":{"description":"adlabels","items":{"additionalProperties":true,"type":"object"},"type":"array"},"execution_options":{"description":"execution_options","items":{"type":"string"},"type":"array"},"id":{"description":"Campaign ID","type":"string"}},"required":["id","adlabels"],"type":"object"}`)

	get_campaign_adrules_governedSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Campaign ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"pass_evaluation":{"description":"pass_evaluation","type":"boolean"}},"required":["id"],"type":"object"}`)

	list_campaign_adsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"date_preset":{"description":"date_preset (enum: adcampaigngroupads_date_preset_enum_param)","type":"string"},"effective_status":{"description":"effective_status","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Campaign ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"time_range":{"description":"time_range","type":"string"},"updated_since":{"description":"updated_since","type":"integer"}},"required":["id"],"type":"object"}`)

	list_campaign_adsetsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"date_preset":{"description":"date_preset (enum: adcampaigngroupadsets_date_preset_enum_param)","type":"string"},"effective_status":{"description":"effective_status","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Campaign ID","type":"string"},"is_completed":{"description":"is_completed","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"time_range":{"description":"time_range","type":"string"}},"required":["id"],"type":"object"}`)

	create_campaign_budget_scheduleSchema = json.RawMessage(`{"additionalProperties":false,"properties":{"budget_value":{"description":"budget_value","type":"integer"},"budget_value_type":{"description":"budget_value_type (enum: adcampaigngroupbudget_schedules_budget_value_type_enum_param)","type":"string"},"id":{"description":"Campaign ID","type":"string"},"time_end":{"description":"time_end","type":"integer"},"time_start":{"description":"time_start","type":"integer"}},"required":["id","budget_value","budget_value_type","time_end","time_start"],"type":"object"}`)

	list_campaign_copiesSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"date_preset":{"description":"date_preset (enum: adcampaigngroupcopies_date_preset_enum_param)","type":"string"},"effective_status":{"description":"effective_status","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Campaign ID","type":"string"},"is_completed":{"description":"is_completed","type":"boolean"},"limit":{"description":"Maximum number of results","type":"integer"},"time_range":{"description":"time_range","type":"string"}},"required":["id"],"type":"object"}`)

	create_campaign_copieSchema = json.RawMessage(`{"additionalProperties":false,"properties":{"deep_copy":{"description":"deep_copy","type":"boolean"},"end_time":{"description":"end_time","type":"string"},"id":{"description":"Campaign ID","type":"string"},"rename_options":{"additionalProperties":true,"description":"rename_options","type":"object"},"start_time":{"description":"start_time","type":"string"},"status_option":{"description":"status_option (enum: adcampaigngroupcopies_status_option_enum_param)","type":"string"}},"required":["id"],"type":"object"}`)

	get_campaign_insightsSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"action_attribution_windows":{"description":"action_attribution_windows","items":{"type":"string"},"type":"array"},"action_breakdowns":{"description":"action_breakdowns","items":{"type":"string"},"type":"array"},"action_report_time":{"description":"action_report_time (enum: adcampaigngroupinsights_action_report_time_enum_param)","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"breakdowns":{"description":"breakdowns","items":{"type":"string"},"type":"array"},"date_preset":{"description":"date_preset (enum: adcampaigngroupinsights_date_preset_enum_param)","type":"string"},"default_summary":{"description":"default_summary","type":"boolean"},"export_columns":{"description":"export_columns","items":{"type":"string"},"type":"array"},"export_format":{"description":"export_format","type":"string"},"export_name":{"description":"export_name","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"filtering":{"description":"filtering","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"Campaign ID","type":"string"},"level":{"description":"level (enum: adcampaigngroupinsights_level_enum_param)","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"product_id_limit":{"description":"product_id_limit","type":"integer"},"sort":{"description":"sort","items":{"type":"string"},"type":"array"},"summary":{"description":"summary","items":{"type":"string"},"type":"array"},"summary_action_breakdowns":{"description":"summary_action_breakdowns","items":{"type":"string"},"type":"array"},"time_increment":{"description":"time_increment","type":"string"},"time_range":{"description":"time_range","type":"string"},"time_ranges":{"description":"time_ranges","items":{"additionalProperties":true,"type":"object"},"type":"array"},"use_account_attribution_setting":{"description":"use_account_attribution_setting","type":"boolean"},"use_unified_attribution_setting":{"description":"use_unified_attribution_setting","type":"boolean"}},"required":["id"],"type":"object"}`)

	create_campaign_insights_reportSchema = json.RawMessage(`{"additionalProperties":false,"properties":{"action_attribution_windows":{"description":"action_attribution_windows","items":{"type":"string"},"type":"array"},"action_breakdowns":{"description":"action_breakdowns","items":{"type":"string"},"type":"array"},"action_report_time":{"description":"action_report_time (enum: adcampaigngroupinsights_action_report_time_enum_param)","type":"string"},"breakdowns":{"description":"breakdowns","items":{"type":"string"},"type":"array"},"date_preset":{"description":"date_preset (enum: adcampaigngroupinsights_date_preset_enum_param)","type":"string"},"default_summary":{"description":"default_summary","type":"boolean"},"export_columns":{"description":"export_columns","items":{"type":"string"},"type":"array"},"export_format":{"description":"export_format","type":"string"},"export_name":{"description":"export_name","type":"string"},"fields":{"description":"fields","items":{"type":"string"},"type":"array"},"filtering":{"description":"filtering","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"Campaign ID","type":"string"},"level":{"description":"level (enum: adcampaigngroupinsights_level_enum_param)","type":"string"},"limit":{"description":"limit","type":"integer"},"product_id_limit":{"description":"product_id_limit","type":"integer"},"sort":{"description":"sort","items":{"type":"string"},"type":"array"},"summary":{"description":"summary","items":{"type":"string"},"type":"array"},"summary_action_breakdowns":{"description":"summary_action_breakdowns","items":{"type":"string"},"type":"array"},"time_increment":{"description":"time_increment","type":"string"},"time_range":{"description":"time_range","type":"string"},"time_ranges":{"description":"time_ranges","items":{"additionalProperties":true,"type":"object"},"type":"array"},"use_account_attribution_setting":{"description":"use_account_attribution_setting","type":"boolean"},"use_unified_attribution_setting":{"description":"use_unified_attribution_setting","type":"boolean"}},"required":["id"],"type":"object"}`)

	delete_campaignSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"Campaign ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"}},"required":["id"],"type":"object"}`)

	get_campaignSchema = json.RawMessage(`{"additionalProperties":true,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"am_call_tags":{"description":"am_call_tags","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"date_preset":{"description":"date_preset (enum: adcampaigngroup_date_preset)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"from_adtable":{"description":"from_adtable","type":"boolean"},"id":{"description":"Campaign ID","type":"string"},"limit":{"description":"Maximum number of results","type":"integer"},"time_range":{"description":"time_range","type":"string"}},"required":["id"],"type":"object"}`)

	update_campaignSchema = json.RawMessage(`{"additionalProperties":false,"properties":{"adlabels":{"description":"adlabels","items":{"additionalProperties":true,"type":"object"},"type":"array"},"adset_bid_amounts":{"description":"adset_bid_amounts","type":"string"},"adset_budgets":{"description":"adset_budgets","items":{"additionalProperties":true,"type":"object"},"type":"array"},"bid_strategy":{"description":"bid_strategy (enum: adcampaigngroup_bid_strategy)","type":"string"},"budget_rebalance_flag":{"description":"budget_rebalance_flag","type":"boolean"},"daily_budget":{"description":"daily_budget","type":"integer"},"execution_options":{"description":"execution_options","items":{"type":"string"},"type":"array"},"id":{"description":"Campaign ID","type":"string"},"is_skadnetwork_attribution":{"description":"is_skadnetwork_attribution","type":"boolean"},"iterative_split_test_configs":{"description":"iterative_split_test_configs","items":{"additionalProperties":true,"type":"object"},"type":"array"},"lifetime_budget":{"description":"lifetime_budget","type":"integer"},"name":{"description":"name","type":"string"},"objective":{"description":"objective (enum: adcampaigngroup_objective)","type":"string"},"pacing_type":{"description":"pacing_type","items":{"type":"string"},"type":"array"},"promoted_object":{"additionalProperties":true,"description":"promoted_object","type":"object"},"smart_promotion_type":{"description":"smart_promotion_type (enum: adcampaigngroup_smart_promotion_type)","type":"string"},"special_ad_categories":{"description":"special_ad_categories","items":{"type":"string"},"type":"array"},"special_ad_category":{"description":"special_ad_category (enum: adcampaigngroup_special_ad_category)","type":"string"},"special_ad_category_country":{"description":"special_ad_category_country","items":{"type":"string"},"type":"array"},"spend_cap":{"description":"spend_cap","type":"integer"},"start_time":{"description":"start_time","type":"string"},"status":{"description":"status (enum: adcampaigngroup_status)","type":"string"},"stop_time":{"description":"stop_time","type":"string"}},"required":["id"],"type":"object"}`)
)

// ListCampaignAdStudiesHandler handles list_campaign_ad_studies
func ListCampaignAdStudiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {

	// Use standard GET handler
	return StandardGETHandler(ctx, request, "ad_studies", "Campaign", true)

}

// CreateCampaignAdlabelHandler handles create_campaign_adlabel
func CreateCampaignAdlabelHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {

	// Use standard POST handler
	return StandardPOSTHandler(ctx, request, "adlabels", true)

}

// GetCampaignAdrulesGovernedHandler handles get_campaign_adrules_governed
func GetCampaignAdrulesGovernedHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {

	// Use standard GET handler
	return StandardGETHandler(ctx, request, "adrules_governed", "Campaign", true)

}

// ListCampaignAdsHandler handles list_campaign_ads
func ListCampaignAdsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {

	// Use standard GET handler
	return StandardGETHandler(ctx, request, "ads", "Campaign", true)

}

// ListCampaignAdsetsHandler handles list_campaign_adsets
func ListCampaignAdsetsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {

	// Use standard GET handler
	return StandardGETHandler(ctx, request, "adsets", "Campaign", true)

}

// CreateCampaignBudgetScheduleHandler handles create_campaign_budget_schedule
func CreateCampaignBudgetScheduleHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {

	// Use standard POST handler
	return StandardPOSTHandler(ctx, request, "budget_schedules", true)

}

// ListCampaignCopiesHandler handles list_campaign_copies
func ListCampaignCopiesHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {

	// Use standard GET handler
	return StandardGETHandler(ctx, request, "copies", "Campaign", true)

}

// CreateCampaignCopieHandler handles create_campaign_copie
func CreateCampaignCopieHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {

	// Use standard POST handler
	return StandardPOSTHandler(ctx, request, "copies", true)

}

// GetCampaignInsightsHandler handles get_campaign_insights
func GetCampaignInsightsHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {

	// Use standard GET handler
	return StandardGETHandler(ctx, request, "insights", "Campaign", true)

}

// CreateCampaignInsightsReportHandler handles create_campaign_insights_report
func CreateCampaignInsightsReportHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {

	// Use standard POST handler
	return StandardPOSTHandler(ctx, request, "insights", true)

}

// DeleteCampaignHandler handles delete_campaign
func DeleteCampaignHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {

	// Use standard DELETE handler
	return StandardDELETEHandler(ctx, request, "")

}

// GetCampaignHandler handles get_campaign
func GetCampaignHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {

	// Use standard GET handler
	return StandardGETHandler(ctx, request, "", "Campaign", true)

}

// UpdateCampaignHandler handles update_campaign
func UpdateCampaignHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {

	// Use standard POST handler
	return StandardPOSTHandler(ctx, request, "", true)

}

// RegisterCampaignTools registers all Campaign tools with the MCP server
func RegisterCampaignTools(s *server.MCPServer) error {

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_campaign_ad_studies",
			"List ad_studies for this Campaign Returns AdStudy.",
			list_campaign_ad_studiesSchema,
		),
		ListCampaignAdStudiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"create_campaign_adlabel",
			"Associate adlabels with this Campaign Returns Campaign. Required: adlabels",
			create_campaign_adlabelSchema,
		),
		CreateCampaignAdlabelHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"get_campaign_adrules_governed",
			"Get adrules_governed data for this Campaign Returns AdRule.",
			get_campaign_adrules_governedSchema,
		),
		GetCampaignAdrulesGovernedHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_campaign_ads",
			"List ads for this Campaign Returns Ad.",
			list_campaign_adsSchema,
		),
		ListCampaignAdsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_campaign_adsets",
			"List adsets for this Campaign Returns AdSet.",
			list_campaign_adsetsSchema,
		),
		ListCampaignAdsetsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"create_campaign_budget_schedule",
			"Create or update budget_schedules for this Campaign Returns HighDemandPeriod. Required: budget_value, budget_value_type (enum), time_end, time_start",
			create_campaign_budget_scheduleSchema,
		),
		CreateCampaignBudgetScheduleHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"list_campaign_copies",
			"List copies for this Campaign Returns Campaign.",
			list_campaign_copiesSchema,
		),
		ListCampaignCopiesHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"create_campaign_copie",
			"Create a copy of this Campaign Returns Campaign.",
			create_campaign_copieSchema,
		),
		CreateCampaignCopieHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"get_campaign_insights",
			"List insights for this Campaign Returns AdsInsights.",
			get_campaign_insightsSchema,
		),
		GetCampaignInsightsHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"create_campaign_insights_report",
			"Generate an insights report for this Campaign Returns AdReportRun.",
			create_campaign_insights_reportSchema,
		),
		CreateCampaignInsightsReportHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"delete_campaign",
			"Delete a Campaign",
			delete_campaignSchema,
		),
		DeleteCampaignHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"get_campaign",
			"Get details of a specific Campaign Returns Campaign.",
			get_campaignSchema,
		),
		GetCampaignHandler,
	)

	s.AddTool(
		mcp.NewToolWithRawSchema(
			"update_campaign",
			"Update a Campaign Returns Campaign.",
			update_campaignSchema,
		),
		UpdateCampaignHandler,
	)

	return nil
}

// Campaign tools: 13 endpoints
