// Code generated by codegen. DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"reflect"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// list_campaign_ad_studiesArgs defines the typed arguments for list_campaign_ad_studies
type list_campaign_ad_studiesArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=Campaign ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// create_campaign_adlabelArgs defines the typed arguments for create_campaign_adlabel
type create_campaign_adlabelArgs struct {
	ID               string     `json:"id" jsonschema:"required,description=Campaign ID,pattern=^[0-9]+$"`
	Adlabels         []*AdLabel `json:"adlabels" jsonschema:"description=Adlabels,required"`
	ExecutionOptions []string   `json:"execution_options,omitempty" jsonschema:"description=Execution Options"`
}

// get_campaign_adrules_governedArgs defines the typed arguments for get_campaign_adrules_governed
type get_campaign_adrules_governedArgs struct {
	ID             string   `json:"id" jsonschema:"required,description=Campaign ID,pattern=^[0-9]+$"`
	Fields         []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit          int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After          string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before         string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	PassEvaluation bool     `json:"pass_evaluation,omitempty" jsonschema:"description=Pass Evaluation"`
}

// list_campaign_adsArgs defines the typed arguments for list_campaign_ads
type list_campaign_adsArgs struct {
	ID              string                 `json:"id" jsonschema:"required,description=Campaign ID,pattern=^[0-9]+$"`
	Fields          []string               `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit           int                    `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After           string                 `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before          string                 `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	DatePreset      string                 `json:"date_preset,omitempty" jsonschema:"description=Date Preset"`
	EffectiveStatus []string               `json:"effective_status,omitempty" jsonschema:"description=Effective Status"`
	TimeRange       map[string]interface{} `json:"time_range,omitempty" jsonschema:"description=Time Range"`
	UpdatedSince    int                    `json:"updated_since,omitempty" jsonschema:"description=When last updated"`
}

// list_campaign_adsetsArgs defines the typed arguments for list_campaign_adsets
type list_campaign_adsetsArgs struct {
	ID              string                 `json:"id" jsonschema:"required,description=Campaign ID,pattern=^[0-9]+$"`
	Fields          []string               `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit           int                    `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After           string                 `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before          string                 `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	DatePreset      string                 `json:"date_preset,omitempty" jsonschema:"description=Date Preset"`
	EffectiveStatus []string               `json:"effective_status,omitempty" jsonschema:"description=Effective Status"`
	IsCompleted     bool                   `json:"is_completed,omitempty" jsonschema:"description=Is Completed"`
	TimeRange       map[string]interface{} `json:"time_range,omitempty" jsonschema:"description=Time Range"`
}

// create_campaign_budget_scheduleArgs defines the typed arguments for create_campaign_budget_schedule
type create_campaign_budget_scheduleArgs struct {
	ID              string `json:"id" jsonschema:"required,description=Campaign ID,pattern=^[0-9]+$"`
	BudgetValue     int    `json:"budget_value" jsonschema:"description=Budget Value,required,minimum=1"`
	BudgetValueType string `json:"budget_value_type" jsonschema:"description=Budget Value Type,required"`
	TimeEnd         int    `json:"time_end" jsonschema:"description=Time End,required"`
	TimeStart       int    `json:"time_start" jsonschema:"description=Time Start,required"`
}

// list_campaign_copiesArgs defines the typed arguments for list_campaign_copies
type list_campaign_copiesArgs struct {
	ID              string                 `json:"id" jsonschema:"required,description=Campaign ID,pattern=^[0-9]+$"`
	Fields          []string               `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit           int                    `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After           string                 `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before          string                 `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	DatePreset      string                 `json:"date_preset,omitempty" jsonschema:"description=Date Preset"`
	EffectiveStatus []string               `json:"effective_status,omitempty" jsonschema:"description=Effective Status"`
	IsCompleted     bool                   `json:"is_completed,omitempty" jsonschema:"description=Is Completed"`
	TimeRange       map[string]interface{} `json:"time_range,omitempty" jsonschema:"description=Time Range"`
}

// create_campaign_copieArgs defines the typed arguments for create_campaign_copie
type create_campaign_copieArgs struct {
	ID            string                 `json:"id" jsonschema:"required,description=Campaign ID,pattern=^[0-9]+$"`
	DeepCopy      bool                   `json:"deep_copy,omitempty" jsonschema:"description=Deep Copy"`
	EndTime       string                 `json:"end_time,omitempty" jsonschema:"description=End Time,format=date-time"`
	RenameOptions map[string]interface{} `json:"rename_options,omitempty" jsonschema:"description=Rename Options"`
	StartTime     string                 `json:"start_time,omitempty" jsonschema:"description=Start Time,format=date-time"`
	StatusOption  string                 `json:"status_option,omitempty" jsonschema:"description=Status Option"`
}

// get_campaign_insightsArgs defines the typed arguments for get_campaign_insights
type get_campaign_insightsArgs struct {
	ID                           string                   `json:"id" jsonschema:"required,description=Campaign ID,pattern=^[0-9]+$"`
	Fields                       []string                 `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit                        int                      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After                        string                   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before                       string                   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	ActionAttributionWindows     []string                 `json:"action_attribution_windows,omitempty" jsonschema:"description=Action Attribution Windows"`
	ActionBreakdowns             []string                 `json:"action_breakdowns,omitempty" jsonschema:"description=Action Breakdowns"`
	ActionReportTime             string                   `json:"action_report_time,omitempty" jsonschema:"description=Action Report Time"`
	Breakdowns                   []string                 `json:"breakdowns,omitempty" jsonschema:"description=Breakdowns"`
	DatePreset                   string                   `json:"date_preset,omitempty" jsonschema:"description=Date Preset"`
	DefaultSummary               bool                     `json:"default_summary,omitempty" jsonschema:"description=Default Summary"`
	ExportColumns                []string                 `json:"export_columns,omitempty" jsonschema:"description=Export Columns"`
	ExportFormat                 string                   `json:"export_format,omitempty" jsonschema:"description=Export Format"`
	ExportName                   string                   `json:"export_name,omitempty" jsonschema:"description=Export Name"`
	Filtering                    []map[string]interface{} `json:"filtering,omitempty" jsonschema:"description=Filtering"`
	Level                        string                   `json:"level,omitempty" jsonschema:"description=Level"`
	ProductIdLimit               int                      `json:"product_id_limit,omitempty" jsonschema:"description=Product ID Limit,pattern=^[0-9]+$"`
	Sort                         []string                 `json:"sort,omitempty" jsonschema:"description=Sort"`
	Summary                      []string                 `json:"summary,omitempty" jsonschema:"description=Summary"`
	SummaryActionBreakdowns      []string                 `json:"summary_action_breakdowns,omitempty" jsonschema:"description=Summary Action Breakdowns"`
	TimeIncrement                string                   `json:"time_increment,omitempty" jsonschema:"description=Time Increment"`
	TimeRange                    map[string]interface{}   `json:"time_range,omitempty" jsonschema:"description=Time Range"`
	TimeRanges                   []map[string]interface{} `json:"time_ranges,omitempty" jsonschema:"description=Time Ranges"`
	UseAccountAttributionSetting bool                     `json:"use_account_attribution_setting,omitempty" jsonschema:"description=Use Account Attribution Setting"`
	UseUnifiedAttributionSetting bool                     `json:"use_unified_attribution_setting,omitempty" jsonschema:"description=Use Unified Attribution Setting"`
}

// create_campaign_insights_reportArgs defines the typed arguments for create_campaign_insights_report
type create_campaign_insights_reportArgs struct {
	ID                           string                   `json:"id" jsonschema:"required,description=Campaign ID,pattern=^[0-9]+$"`
	ActionAttributionWindows     []string                 `json:"action_attribution_windows,omitempty" jsonschema:"description=Action Attribution Windows"`
	ActionBreakdowns             []string                 `json:"action_breakdowns,omitempty" jsonschema:"description=Action Breakdowns"`
	ActionReportTime             string                   `json:"action_report_time,omitempty" jsonschema:"description=Action Report Time"`
	Breakdowns                   []string                 `json:"breakdowns,omitempty" jsonschema:"description=Breakdowns"`
	DatePreset                   string                   `json:"date_preset,omitempty" jsonschema:"description=Date Preset"`
	DefaultSummary               bool                     `json:"default_summary,omitempty" jsonschema:"description=Default Summary"`
	ExportColumns                []string                 `json:"export_columns,omitempty" jsonschema:"description=Export Columns"`
	ExportFormat                 string                   `json:"export_format,omitempty" jsonschema:"description=Export Format"`
	ExportName                   string                   `json:"export_name,omitempty" jsonschema:"description=Export Name"`
	Fields                       []string                 `json:"fields,omitempty" jsonschema:"description=Fields"`
	Filtering                    []map[string]interface{} `json:"filtering,omitempty" jsonschema:"description=Filtering"`
	Level                        string                   `json:"level,omitempty" jsonschema:"description=Level"`
	Limit                        int                      `json:"limit,omitempty" jsonschema:"description=Limit"`
	ProductIdLimit               int                      `json:"product_id_limit,omitempty" jsonschema:"description=Product ID Limit,pattern=^[0-9]+$"`
	Sort                         []string                 `json:"sort,omitempty" jsonschema:"description=Sort"`
	Summary                      []string                 `json:"summary,omitempty" jsonschema:"description=Summary"`
	SummaryActionBreakdowns      []string                 `json:"summary_action_breakdowns,omitempty" jsonschema:"description=Summary Action Breakdowns"`
	TimeIncrement                string                   `json:"time_increment,omitempty" jsonschema:"description=Time Increment"`
	TimeRange                    map[string]interface{}   `json:"time_range,omitempty" jsonschema:"description=Time Range"`
	TimeRanges                   []map[string]interface{} `json:"time_ranges,omitempty" jsonschema:"description=Time Ranges"`
	UseAccountAttributionSetting bool                     `json:"use_account_attribution_setting,omitempty" jsonschema:"description=Use Account Attribution Setting"`
	UseUnifiedAttributionSetting bool                     `json:"use_unified_attribution_setting,omitempty" jsonschema:"description=Use Unified Attribution Setting"`
}

// delete_campaignArgs defines the typed arguments for delete_campaign
type delete_campaignArgs struct {
	ID string `json:"id" jsonschema:"required,description=Campaign ID,pattern=^[0-9]+$"`
}

// get_campaignArgs defines the typed arguments for get_campaign
type get_campaignArgs struct {
	ID          string                 `json:"id" jsonschema:"required,description=Campaign ID,pattern=^[0-9]+$"`
	Fields      []string               `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit       int                    `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After       string                 `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before      string                 `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AmCallTags  map[string]interface{} `json:"am_call_tags,omitempty" jsonschema:"description=Am Call Tags"`
	DatePreset  string                 `json:"date_preset,omitempty" jsonschema:"description=Date Preset"`
	FromAdtable bool                   `json:"from_adtable,omitempty" jsonschema:"description=From Adtable"`
	TimeRange   map[string]interface{} `json:"time_range,omitempty" jsonschema:"description=Time Range"`
}

// update_campaignArgs defines the typed arguments for update_campaign
type update_campaignArgs struct {
	ID                        string                   `json:"id" jsonschema:"required,description=Campaign ID,pattern=^[0-9]+$"`
	Adlabels                  []*AdLabel               `json:"adlabels,omitempty" jsonschema:"description=Adlabels"`
	AdsetBidAmounts           map[string]interface{}   `json:"adset_bid_amounts,omitempty" jsonschema:"description=Adset Bid Amounts,minimum=1"`
	AdsetBudgets              []map[string]interface{} `json:"adset_budgets,omitempty" jsonschema:"description=Adset Budgets,minimum=1"`
	BidStrategy               string                   `json:"bid_strategy,omitempty" jsonschema:"description=Bid Strategy"`
	BudgetRebalanceFlag       bool                     `json:"budget_rebalance_flag,omitempty" jsonschema:"description=Budget Rebalance Flag"`
	DailyBudget               int                      `json:"daily_budget,omitempty" jsonschema:"description=Daily Budget,minimum=1"`
	ExecutionOptions          []string                 `json:"execution_options,omitempty" jsonschema:"description=Execution Options"`
	IsSkadnetworkAttribution  bool                     `json:"is_skadnetwork_attribution,omitempty" jsonschema:"description=Is Skadnetwork Attribution"`
	IterativeSplitTestConfigs []map[string]interface{} `json:"iterative_split_test_configs,omitempty" jsonschema:"description=Iterative Split Test Configs"`
	LifetimeBudget            int                      `json:"lifetime_budget,omitempty" jsonschema:"description=Lifetime Budget,minimum=1"`
	Name                      string                   `json:"name,omitempty" jsonschema:"description=Name"`
	Objective                 string                   `json:"objective,omitempty" jsonschema:"description=Objective"`
	PacingType                []string                 `json:"pacing_type,omitempty" jsonschema:"description=Pacing Type"`
	PromotedObject            *AdPromotedObject        `json:"promoted_object,omitempty" jsonschema:"description=Promoted Object"`
	SmartPromotionType        string                   `json:"smart_promotion_type,omitempty" jsonschema:"description=Smart Promotion Type"`
	SpecialAdCategories       []string                 `json:"special_ad_categories,omitempty" jsonschema:"description=Special Ad Categories"`
	SpecialAdCategory         string                   `json:"special_ad_category,omitempty" jsonschema:"description=Special Ad Category"`
	SpecialAdCategoryCountry  []string                 `json:"special_ad_category_country,omitempty" jsonschema:"description=Special Ad Category Country"`
	SpendCap                  int                      `json:"spend_cap,omitempty" jsonschema:"description=Spend Cap"`
	StartTime                 string                   `json:"start_time,omitempty" jsonschema:"description=Start Time,format=date-time"`
	Status                    string                   `json:"status,omitempty" jsonschema:"description=Status,enum=ACTIVE,enum=PAUSED,enum=DELETED,enum=ARCHIVED"`
	StopTime                  string                   `json:"stop_time,omitempty" jsonschema:"description=Stop Time,format=date-time"`
}

var (
	list_campaign_ad_studiesSchema = generateSchemaForType(reflect.TypeOf(list_campaign_ad_studiesArgs{}))

	create_campaign_adlabelSchema = generateSchemaForType(reflect.TypeOf(create_campaign_adlabelArgs{}))

	get_campaign_adrules_governedSchema = generateSchemaForType(reflect.TypeOf(get_campaign_adrules_governedArgs{}))

	list_campaign_adsSchema = generateSchemaForType(reflect.TypeOf(list_campaign_adsArgs{}))

	list_campaign_adsetsSchema = generateSchemaForType(reflect.TypeOf(list_campaign_adsetsArgs{}))

	create_campaign_budget_scheduleSchema = generateSchemaForType(reflect.TypeOf(create_campaign_budget_scheduleArgs{}))

	list_campaign_copiesSchema = generateSchemaForType(reflect.TypeOf(list_campaign_copiesArgs{}))

	create_campaign_copieSchema = generateSchemaForType(reflect.TypeOf(create_campaign_copieArgs{}))

	get_campaign_insightsSchema = generateSchemaForType(reflect.TypeOf(get_campaign_insightsArgs{}))

	create_campaign_insights_reportSchema = generateSchemaForType(reflect.TypeOf(create_campaign_insights_reportArgs{}))

	delete_campaignSchema = generateSchemaForType(reflect.TypeOf(delete_campaignArgs{}))

	get_campaignSchema = generateSchemaForType(reflect.TypeOf(get_campaignArgs{}))

	update_campaignSchema = generateSchemaForType(reflect.TypeOf(update_campaignArgs{}))
)

// ListCampaignAdStudiesHandler handles list_campaign_ad_studies with typed arguments
func ListCampaignAdStudiesHandler(ctx context.Context, request mcp.CallToolRequest, args list_campaign_ad_studiesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("Campaign")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ad_studies")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateCampaignAdlabelHandler handles create_campaign_adlabel with typed arguments
func CreateCampaignAdlabelHandler(ctx context.Context, request mcp.CallToolRequest, args create_campaign_adlabelArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.Adlabels) > 0 {
		body["adlabels"] = args.Adlabels
	}

	if len(args.ExecutionOptions) > 0 {
		body["execution_options"] = args.ExecutionOptions
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "adlabels")

	return ExecutePOSTRequest(ctx, url, body)

}

// GetCampaignAdrulesGovernedHandler handles get_campaign_adrules_governed with typed arguments
func GetCampaignAdrulesGovernedHandler(ctx context.Context, request mcp.CallToolRequest, args get_campaign_adrules_governedArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("Campaign")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.PassEvaluation {
		query.Set("pass_evaluation", "true")
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "adrules_governed")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListCampaignAdsHandler handles list_campaign_ads with typed arguments
func ListCampaignAdsHandler(ctx context.Context, request mcp.CallToolRequest, args list_campaign_adsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("Campaign")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.DatePreset != "" {
		query.Set("date_preset", args.DatePreset)
	}

	if len(args.EffectiveStatus) > 0 {
		query.Set("effective_status", strings.Join(args.EffectiveStatus, ","))
	}

	// Handle TimeRange map parameter
	for k, v := range args.TimeRange {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	if args.UpdatedSince > 0 {
		query.Set("updated_since", fmt.Sprintf("%d", args.UpdatedSince))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ads")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// ListCampaignAdsetsHandler handles list_campaign_adsets with typed arguments
func ListCampaignAdsetsHandler(ctx context.Context, request mcp.CallToolRequest, args list_campaign_adsetsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("Campaign")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.DatePreset != "" {
		query.Set("date_preset", args.DatePreset)
	}

	if len(args.EffectiveStatus) > 0 {
		query.Set("effective_status", strings.Join(args.EffectiveStatus, ","))
	}

	if args.IsCompleted {
		query.Set("is_completed", "true")
	}

	// Handle TimeRange map parameter
	for k, v := range args.TimeRange {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "adsets")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateCampaignBudgetScheduleHandler handles create_campaign_budget_schedule with typed arguments
func CreateCampaignBudgetScheduleHandler(ctx context.Context, request mcp.CallToolRequest, args create_campaign_budget_scheduleArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.BudgetValue > 0 {
		body["budget_value"] = args.BudgetValue
	}

	if args.BudgetValueType != "" {
		body["budget_value_type"] = args.BudgetValueType
	}

	if args.TimeEnd > 0 {
		body["time_end"] = args.TimeEnd
	}

	if args.TimeStart > 0 {
		body["time_start"] = args.TimeStart
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "budget_schedules")

	return ExecutePOSTRequest(ctx, url, body)

}

// ListCampaignCopiesHandler handles list_campaign_copies with typed arguments
func ListCampaignCopiesHandler(ctx context.Context, request mcp.CallToolRequest, args list_campaign_copiesArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("Campaign")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.DatePreset != "" {
		query.Set("date_preset", args.DatePreset)
	}

	if len(args.EffectiveStatus) > 0 {
		query.Set("effective_status", strings.Join(args.EffectiveStatus, ","))
	}

	if args.IsCompleted {
		query.Set("is_completed", "true")
	}

	// Handle TimeRange map parameter
	for k, v := range args.TimeRange {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "copies")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateCampaignCopieHandler handles create_campaign_copie with typed arguments
func CreateCampaignCopieHandler(ctx context.Context, request mcp.CallToolRequest, args create_campaign_copieArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	body["deep_copy"] = args.DeepCopy

	if args.EndTime != "" {
		body["end_time"] = args.EndTime
	}

	if args.RenameOptions != nil {
		body["rename_options"] = args.RenameOptions
	}

	if args.StartTime != "" {
		body["start_time"] = args.StartTime
	}

	if args.StatusOption != "" {
		body["status_option"] = args.StatusOption
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "copies")

	return ExecutePOSTRequest(ctx, url, body)

}

// GetCampaignInsightsHandler handles get_campaign_insights with typed arguments
func GetCampaignInsightsHandler(ctx context.Context, request mcp.CallToolRequest, args get_campaign_insightsArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("Campaign")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if len(args.ActionAttributionWindows) > 0 {
		query.Set("action_attribution_windows", strings.Join(args.ActionAttributionWindows, ","))
	}

	if len(args.ActionBreakdowns) > 0 {
		query.Set("action_breakdowns", strings.Join(args.ActionBreakdowns, ","))
	}

	if args.ActionReportTime != "" {
		query.Set("action_report_time", args.ActionReportTime)
	}

	if len(args.Breakdowns) > 0 {
		query.Set("breakdowns", strings.Join(args.Breakdowns, ","))
	}

	if args.DatePreset != "" {
		query.Set("date_preset", args.DatePreset)
	}

	if args.DefaultSummary {
		query.Set("default_summary", "true")
	}

	if len(args.ExportColumns) > 0 {
		query.Set("export_columns", strings.Join(args.ExportColumns, ","))
	}

	if args.ExportFormat != "" {
		query.Set("export_format", args.ExportFormat)
	}

	if args.ExportName != "" {
		query.Set("export_name", args.ExportName)
	}

	if args.Level != "" {
		query.Set("level", args.Level)
	}

	if args.ProductIdLimit > 0 {
		query.Set("product_id_limit", fmt.Sprintf("%d", args.ProductIdLimit))
	}

	if len(args.Sort) > 0 {
		query.Set("sort", strings.Join(args.Sort, ","))
	}

	if len(args.Summary) > 0 {
		query.Set("summary", strings.Join(args.Summary, ","))
	}

	if len(args.SummaryActionBreakdowns) > 0 {
		query.Set("summary_action_breakdowns", strings.Join(args.SummaryActionBreakdowns, ","))
	}

	if args.TimeIncrement != "" {
		query.Set("time_increment", args.TimeIncrement)
	}

	// Handle TimeRange map parameter
	for k, v := range args.TimeRange {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	if args.UseAccountAttributionSetting {
		query.Set("use_account_attribution_setting", "true")
	}

	if args.UseUnifiedAttributionSetting {
		query.Set("use_unified_attribution_setting", "true")
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "insights")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CreateCampaignInsightsReportHandler handles create_campaign_insights_report with typed arguments
func CreateCampaignInsightsReportHandler(ctx context.Context, request mcp.CallToolRequest, args create_campaign_insights_reportArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.ActionAttributionWindows) > 0 {
		body["action_attribution_windows"] = args.ActionAttributionWindows
	}

	if len(args.ActionBreakdowns) > 0 {
		body["action_breakdowns"] = args.ActionBreakdowns
	}

	if args.ActionReportTime != "" {
		body["action_report_time"] = args.ActionReportTime
	}

	if len(args.Breakdowns) > 0 {
		body["breakdowns"] = args.Breakdowns
	}

	if args.DatePreset != "" {
		body["date_preset"] = args.DatePreset
	}

	body["default_summary"] = args.DefaultSummary

	if len(args.ExportColumns) > 0 {
		body["export_columns"] = args.ExportColumns
	}

	if args.ExportFormat != "" {
		body["export_format"] = args.ExportFormat
	}

	if args.ExportName != "" {
		body["export_name"] = args.ExportName
	}

	if len(args.Fields) > 0 {
		body["fields"] = args.Fields
	}

	if len(args.Filtering) > 0 {
		body["filtering"] = args.Filtering
	}

	if args.Level != "" {
		body["level"] = args.Level
	}

	if args.Limit > 0 {
		body["limit"] = args.Limit
	}

	if args.ProductIdLimit > 0 {
		body["product_id_limit"] = args.ProductIdLimit
	}

	if len(args.Sort) > 0 {
		body["sort"] = args.Sort
	}

	if len(args.Summary) > 0 {
		body["summary"] = args.Summary
	}

	if len(args.SummaryActionBreakdowns) > 0 {
		body["summary_action_breakdowns"] = args.SummaryActionBreakdowns
	}

	if args.TimeIncrement != "" {
		body["time_increment"] = args.TimeIncrement
	}

	if args.TimeRange != nil {
		body["time_range"] = args.TimeRange
	}

	if len(args.TimeRanges) > 0 {
		body["time_ranges"] = args.TimeRanges
	}

	body["use_account_attribution_setting"] = args.UseAccountAttributionSetting

	body["use_unified_attribution_setting"] = args.UseUnifiedAttributionSetting

	// Build URL and execute
	url := buildGraphURL(args.ID, "insights")

	return ExecutePOSTRequest(ctx, url, body)

}

// DeleteCampaignHandler handles delete_campaign with typed arguments
func DeleteCampaignHandler(ctx context.Context, request mcp.CallToolRequest, args delete_campaignArgs) (*mcp.CallToolResult, error) {

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	url := buildGraphURL(args.ID, "")
	return ExecuteDELETERequest(ctx, url)

}

// GetCampaignHandler handles get_campaign with typed arguments
func GetCampaignHandler(ctx context.Context, request mcp.CallToolRequest, args get_campaignArgs) (*mcp.CallToolResult, error) {

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("Campaign")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Handle AmCallTags map parameter
	for k, v := range args.AmCallTags {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	if args.DatePreset != "" {
		query.Set("date_preset", args.DatePreset)
	}

	if args.FromAdtable {
		query.Set("from_adtable", "true")
	}

	// Handle TimeRange map parameter
	for k, v := range args.TimeRange {
		query.Set(k, fmt.Sprintf("%v", v))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// UpdateCampaignHandler handles update_campaign with typed arguments
func UpdateCampaignHandler(ctx context.Context, request mcp.CallToolRequest, args update_campaignArgs) (*mcp.CallToolResult, error) {

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.Adlabels) > 0 {
		body["adlabels"] = args.Adlabels
	}

	if args.AdsetBidAmounts != nil {
		body["adset_bid_amounts"] = args.AdsetBidAmounts
	}

	if len(args.AdsetBudgets) > 0 {
		body["adset_budgets"] = args.AdsetBudgets
	}

	if args.BidStrategy != "" {
		body["bid_strategy"] = args.BidStrategy
	}

	body["budget_rebalance_flag"] = args.BudgetRebalanceFlag

	if args.DailyBudget > 0 {
		body["daily_budget"] = args.DailyBudget
	}

	if len(args.ExecutionOptions) > 0 {
		body["execution_options"] = args.ExecutionOptions
	}

	body["is_skadnetwork_attribution"] = args.IsSkadnetworkAttribution

	if len(args.IterativeSplitTestConfigs) > 0 {
		body["iterative_split_test_configs"] = args.IterativeSplitTestConfigs
	}

	if args.LifetimeBudget > 0 {
		body["lifetime_budget"] = args.LifetimeBudget
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.Objective != "" {
		body["objective"] = args.Objective
	}

	if len(args.PacingType) > 0 {
		body["pacing_type"] = args.PacingType
	}

	if args.PromotedObject != nil {
		body["promoted_object"] = args.PromotedObject
	}

	if args.SmartPromotionType != "" {
		body["smart_promotion_type"] = args.SmartPromotionType
	}

	if len(args.SpecialAdCategories) > 0 {
		body["special_ad_categories"] = args.SpecialAdCategories
	}

	if args.SpecialAdCategory != "" {
		body["special_ad_category"] = args.SpecialAdCategory
	}

	if len(args.SpecialAdCategoryCountry) > 0 {
		body["special_ad_category_country"] = args.SpecialAdCategoryCountry
	}

	if args.SpendCap > 0 {
		body["spend_cap"] = args.SpendCap
	}

	if args.StartTime != "" {
		body["start_time"] = args.StartTime
	}

	if args.Status != "" {
		body["status"] = args.Status
	}

	if args.StopTime != "" {
		body["stop_time"] = args.StopTime
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "")

	return ExecutePOSTRequest(ctx, url, body)

}

// generateSchemaForType is implemented in tools_common.go to avoid redeclaration

// RegisterCampaignTools registers all Campaign tools with the MCP server
func RegisterCampaignTools(s *server.MCPServer) error {

	// Register list_campaign_ad_studies using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_campaign_ad_studies", "List ad_studies for this Campaign Returns AdStudy.", list_campaign_ad_studiesSchema),
		mcp.NewTypedToolHandler(ListCampaignAdStudiesHandler),
	)

	// Register create_campaign_adlabel using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_campaign_adlabel", "Associate adlabels with this Campaign Returns Campaign. Required: adlabels", create_campaign_adlabelSchema),
		mcp.NewTypedToolHandler(CreateCampaignAdlabelHandler),
	)

	// Register get_campaign_adrules_governed using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_campaign_adrules_governed", "Get adrules_governed data for this Campaign Returns AdRule.", get_campaign_adrules_governedSchema),
		mcp.NewTypedToolHandler(GetCampaignAdrulesGovernedHandler),
	)

	// Register list_campaign_ads using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_campaign_ads", "List ads for this Campaign Returns Ad.", list_campaign_adsSchema),
		mcp.NewTypedToolHandler(ListCampaignAdsHandler),
	)

	// Register list_campaign_adsets using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_campaign_adsets", "List adsets for this Campaign Returns AdSet.", list_campaign_adsetsSchema),
		mcp.NewTypedToolHandler(ListCampaignAdsetsHandler),
	)

	// Register create_campaign_budget_schedule using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_campaign_budget_schedule", "Create or update budget_schedules for this Campaign Returns HighDemandPeriod. Required: budget_value, budget_value_type (enum), time_end, time_start", create_campaign_budget_scheduleSchema),
		mcp.NewTypedToolHandler(CreateCampaignBudgetScheduleHandler),
	)

	// Register list_campaign_copies using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("list_campaign_copies", "List copies for this Campaign Returns Campaign.", list_campaign_copiesSchema),
		mcp.NewTypedToolHandler(ListCampaignCopiesHandler),
	)

	// Register create_campaign_copie using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_campaign_copie", "Create a copy of this Campaign Returns Campaign.", create_campaign_copieSchema),
		mcp.NewTypedToolHandler(CreateCampaignCopieHandler),
	)

	// Register get_campaign_insights using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_campaign_insights", "List insights for this Campaign Returns AdsInsights.", get_campaign_insightsSchema),
		mcp.NewTypedToolHandler(GetCampaignInsightsHandler),
	)

	// Register create_campaign_insights_report using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("create_campaign_insights_report", "Generate an insights report for this Campaign Returns AdReportRun.", create_campaign_insights_reportSchema),
		mcp.NewTypedToolHandler(CreateCampaignInsightsReportHandler),
	)

	// Register delete_campaign using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("delete_campaign", "Delete a Campaign", delete_campaignSchema),
		mcp.NewTypedToolHandler(DeleteCampaignHandler),
	)

	// Register get_campaign using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("get_campaign", "Get details of a specific Campaign Returns Campaign.", get_campaignSchema),
		mcp.NewTypedToolHandler(GetCampaignHandler),
	)

	// Register update_campaign using raw schema
	s.AddTool(
		mcp.NewToolWithRawSchema("update_campaign", "Update a Campaign Returns Campaign.", update_campaignSchema),
		mcp.NewTypedToolHandler(UpdateCampaignHandler),
	)

	return nil
}

// Campaign tools: 13 endpoints
