// Code generated by codegen. DO NOT EDIT.

package generated

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// custom_audience_remove_adaccountsArgs defines the typed arguments for custom_audience_remove_adaccounts
type custom_audience_remove_adaccountsArgs struct {
	ID         string   `json:"id" jsonschema:"required,description=CustomAudience ID,pattern=^[0-9]+$"`
	Adaccounts []string `json:"adaccounts,omitempty" jsonschema:"description=Adaccounts"`
}

// custom_audience_list_adaccountsArgs defines the typed arguments for custom_audience_list_adaccounts
type custom_audience_list_adaccountsArgs struct {
	ID          string   `json:"id" jsonschema:"required,description=CustomAudience ID,pattern=^[0-9]+$"`
	Fields      []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit       int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After       string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before      string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Permissions string   `json:"permissions,omitempty" jsonschema:"description=Permissions"`
}

// custom_audience_create_adaccountArgs defines the typed arguments for custom_audience_create_adaccount
type custom_audience_create_adaccountArgs struct {
	ID               string   `json:"id" jsonschema:"required,description=CustomAudience ID,pattern=^[0-9]+$"`
	Adaccounts       []string `json:"adaccounts,omitempty" jsonschema:"description=Adaccounts"`
	Permissions      string   `json:"permissions,omitempty" jsonschema:"description=Permissions"`
	RelationshipType []string `json:"relationship_type,omitempty" jsonschema:"description=Relationship Type"`
	Replace          bool     `json:"replace,omitempty" jsonschema:"description=Replace"`
}

// custom_audience_list_adsArgs defines the typed arguments for custom_audience_list_ads
type custom_audience_list_adsArgs struct {
	ID              string   `json:"id" jsonschema:"required,description=CustomAudience ID,pattern=^[0-9]+$"`
	Fields          []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit           int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After           string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before          string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	EffectiveStatus []string `json:"effective_status,omitempty" jsonschema:"description=Effective Status"`
	Status          []string `json:"status,omitempty" jsonschema:"description=Status,enum=ACTIVE,enum=PAUSED,enum=DELETED,enum=ARCHIVED"`
}

// custom_audience_get_healthArgs defines the typed arguments for custom_audience_get_health
type custom_audience_get_healthArgs struct {
	ID                       string   `json:"id" jsonschema:"required,description=CustomAudience ID,pattern=^[0-9]+$"`
	Fields                   []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit                    int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After                    string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before                   string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	CalculatedDate           string   `json:"calculated_date,omitempty" jsonschema:"description=Calculated Date"`
	ProcessedDate            string   `json:"processed_date,omitempty" jsonschema:"description=Processed Date"`
	ValueAggregationDuration int      `json:"value_aggregation_duration,omitempty" jsonschema:"description=Value Aggregation Duration"`
	ValueCountry             string   `json:"value_country,omitempty" jsonschema:"description=Value Country"`
	ValueCurrency            string   `json:"value_currency,omitempty" jsonschema:"description=Value Currency"`
	ValueVersion             int      `json:"value_version,omitempty" jsonschema:"description=Value Version"`
}

// custom_audience_list_saltsArgs defines the typed arguments for custom_audience_list_salts
type custom_audience_list_saltsArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=CustomAudience ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	Params []string `json:"params,omitempty" jsonschema:"description=Params"`
}

// custom_audience_create_saltArgs defines the typed arguments for custom_audience_create_salt
type custom_audience_create_saltArgs struct {
	ID        string `json:"id" jsonschema:"required,description=CustomAudience ID,pattern=^[0-9]+$"`
	Salt      string `json:"salt" jsonschema:"description=Salt,required"`
	ValidFrom string `json:"valid_from" jsonschema:"description=Valid From,required,format=date-time"`
	ValidTo   string `json:"valid_to" jsonschema:"description=Valid To,required,format=date-time"`
}

// custom_audience_list_sessionsArgs defines the typed arguments for custom_audience_list_sessions
type custom_audience_list_sessionsArgs struct {
	ID        string   `json:"id" jsonschema:"required,description=CustomAudience ID,pattern=^[0-9]+$"`
	Fields    []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit     int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After     string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before    string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	SessionId int      `json:"session_id,omitempty" jsonschema:"description=ID of the Session,pattern=^[0-9]+$"`
}

// custom_audience_get_shared_account_infoArgs defines the typed arguments for custom_audience_get_shared_account_info
type custom_audience_get_shared_account_infoArgs struct {
	ID     string   `json:"id" jsonschema:"required,description=CustomAudience ID,pattern=^[0-9]+$"`
	Fields []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit  int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After  string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
}

// custom_audience_remove_usersArgs defines the typed arguments for custom_audience_remove_users
type custom_audience_remove_usersArgs struct {
	ID        string                 `json:"id" jsonschema:"required,description=CustomAudience ID,pattern=^[0-9]+$"`
	Namespace string                 `json:"namespace,omitempty" jsonschema:"description=Namespace"`
	Payload   map[string]interface{} `json:"payload,omitempty" jsonschema:"description=Payload"`
	Session   map[string]interface{} `json:"session,omitempty" jsonschema:"description=Session"`
}

// custom_audience_create_userArgs defines the typed arguments for custom_audience_create_user
type custom_audience_create_userArgs struct {
	ID        string                 `json:"id" jsonschema:"required,description=CustomAudience ID,pattern=^[0-9]+$"`
	Namespace string                 `json:"namespace,omitempty" jsonschema:"description=Namespace"`
	Payload   map[string]interface{} `json:"payload,omitempty" jsonschema:"description=Payload"`
	Session   map[string]interface{} `json:"session,omitempty" jsonschema:"description=Session"`
}

// custom_audience_update_usersreplaceArgs defines the typed arguments for custom_audience_update_usersreplace
type custom_audience_update_usersreplaceArgs struct {
	ID        string                 `json:"id" jsonschema:"required,description=CustomAudience ID,pattern=^[0-9]+$"`
	Namespace string                 `json:"namespace,omitempty" jsonschema:"description=Namespace"`
	Payload   map[string]interface{} `json:"payload" jsonschema:"description=Payload,required"`
	Session   map[string]interface{} `json:"session" jsonschema:"description=Session,required"`
}

// custom_audience_deleteArgs defines the typed arguments for custom_audience_delete
type custom_audience_deleteArgs struct {
	ID string `json:"id" jsonschema:"required,description=CustomAudience ID,pattern=^[0-9]+$"`
}

// custom_audience_getArgs defines the typed arguments for custom_audience_get
type custom_audience_getArgs struct {
	ID                         string   `json:"id" jsonschema:"required,description=CustomAudience ID,pattern=^[0-9]+$"`
	Fields                     []string `json:"fields,omitempty" jsonschema:"description=Fields to return"`
	Limit                      int      `json:"limit,omitempty" jsonschema:"description=Maximum number of results,minimum=1,maximum=100"`
	After                      string   `json:"after,omitempty" jsonschema:"description=Cursor for pagination (next page)"`
	Before                     string   `json:"before,omitempty" jsonschema:"description=Cursor for pagination (previous page)"`
	AdAccountId                string   `json:"ad_account_id,omitempty" jsonschema:"description=ID of the Ad Account,pattern=^[0-9]+$"`
	SpecialAdCategories        []string `json:"special_ad_categories,omitempty" jsonschema:"description=Special Ad Categories"`
	SpecialAdCategoryCountries []string `json:"special_ad_category_countries,omitempty" jsonschema:"description=Special Ad Category Countries"`
	TargetCountries            []string `json:"target_countries,omitempty" jsonschema:"description=Target Countries"`
}

// custom_audience_updateArgs defines the typed arguments for custom_audience_update
type custom_audience_updateArgs struct {
	ID                  string                   `json:"id" jsonschema:"required,description=CustomAudience ID,pattern=^[0-9]+$"`
	AllowedDomains      []string                 `json:"allowed_domains,omitempty" jsonschema:"description=Allowed Domains"`
	ClaimObjective      string                   `json:"claim_objective,omitempty" jsonschema:"description=Claim Objective"`
	ContentType         string                   `json:"content_type,omitempty" jsonschema:"description=Content Type"`
	Countries           string                   `json:"countries,omitempty" jsonschema:"description=Countries"`
	CustomerFileSource  string                   `json:"customer_file_source,omitempty" jsonschema:"description=Customer File Source"`
	Description         string                   `json:"description,omitempty" jsonschema:"description=Description"`
	EnableFetchOrCreate bool                     `json:"enable_fetch_or_create,omitempty" jsonschema:"description=Enable Fetch Or Create"`
	EventSourceGroup    string                   `json:"event_source_group,omitempty" jsonschema:"description=Event Source Group"`
	EventSources        []map[string]interface{} `json:"event_sources,omitempty" jsonschema:"description=Event Sources"`
	Exclusions          []map[string]interface{} `json:"exclusions,omitempty" jsonschema:"description=Exclusions"`
	Inclusions          []map[string]interface{} `json:"inclusions,omitempty" jsonschema:"description=Inclusions"`
	LookalikeSpec       string                   `json:"lookalike_spec,omitempty" jsonschema:"description=Lookalike Spec"`
	Name                string                   `json:"name,omitempty" jsonschema:"description=Name"`
	OptOutLink          string                   `json:"opt_out_link,omitempty" jsonschema:"description=Opt Out Link"`
	ParentAudienceId    int                      `json:"parent_audience_id,omitempty" jsonschema:"description=ID of the Parent Audience,pattern=^[0-9]+$"`
	ProductSetId        string                   `json:"product_set_id,omitempty" jsonschema:"description=ID of the Product Set,pattern=^[0-9]+$"`
	RetentionDays       int                      `json:"retention_days,omitempty" jsonschema:"description=Retention Days"`
	RevSharePolicyId    int                      `json:"rev_share_policy_id,omitempty" jsonschema:"description=ID of the Rev Share Policy,pattern=^[0-9]+$"`
	Rule                string                   `json:"rule,omitempty" jsonschema:"description=Rule"`
	RuleAggregation     string                   `json:"rule_aggregation,omitempty" jsonschema:"description=Rule Aggregation"`
	Tags                []string                 `json:"tags,omitempty" jsonschema:"description=Tags"`
	UseInCampaigns      bool                     `json:"use_in_campaigns,omitempty" jsonschema:"description=Use In Campaigns"`
}

// CustomAudienceRemoveAdaccountsHandler handles custom_audience_remove_adaccounts with raw schema validation
func CustomAudienceRemoveAdaccountsHandler(ctx context.Context, request mcp.CallToolRequest, args custom_audience_remove_adaccountsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	url := buildGraphURL(args.ID, "adaccounts")
	return ExecuteDELETERequest(ctx, url)

}

// CustomAudienceListAdaccountsHandler handles custom_audience_list_adaccounts with raw schema validation
func CustomAudienceListAdaccountsHandler(ctx context.Context, request mcp.CallToolRequest, args custom_audience_list_adaccountsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("CustomAudienceAdAccount")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.Permissions != "" {
		query.Set("permissions", args.Permissions)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "adaccounts")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CustomAudienceCreateAdaccountHandler handles custom_audience_create_adaccount with raw schema validation
func CustomAudienceCreateAdaccountHandler(ctx context.Context, request mcp.CallToolRequest, args custom_audience_create_adaccountArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.Adaccounts) > 0 {
		body["adaccounts"] = args.Adaccounts
	}

	if args.Permissions != "" {
		body["permissions"] = args.Permissions
	}

	if len(args.RelationshipType) > 0 {
		body["relationship_type"] = args.RelationshipType
	}

	body["replace"] = args.Replace

	// Build URL and execute
	url := buildGraphURL(args.ID, "adaccounts")

	return ExecutePOSTRequest(ctx, url, body)

}

// CustomAudienceListAdsHandler handles custom_audience_list_ads with raw schema validation
func CustomAudienceListAdsHandler(ctx context.Context, request mcp.CallToolRequest, args custom_audience_list_adsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("Ad")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if len(args.EffectiveStatus) > 0 {
		query.Set("effective_status", strings.Join(args.EffectiveStatus, ","))
	}

	if len(args.Status) > 0 {
		query.Set("status", strings.Join(args.Status, ","))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "ads")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CustomAudienceGetHealthHandler handles custom_audience_get_health with raw schema validation
func CustomAudienceGetHealthHandler(ctx context.Context, request mcp.CallToolRequest, args custom_audience_get_healthArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("CustomAudienceHealth")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.CalculatedDate != "" {
		query.Set("calculated_date", args.CalculatedDate)
	}

	if args.ProcessedDate != "" {
		query.Set("processed_date", args.ProcessedDate)
	}

	if args.ValueAggregationDuration > 0 {
		query.Set("value_aggregation_duration", fmt.Sprintf("%d", args.ValueAggregationDuration))
	}

	if args.ValueCountry != "" {
		query.Set("value_country", args.ValueCountry)
	}

	if args.ValueCurrency != "" {
		query.Set("value_currency", args.ValueCurrency)
	}

	if args.ValueVersion > 0 {
		query.Set("value_version", fmt.Sprintf("%d", args.ValueVersion))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "health")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CustomAudienceListSaltsHandler handles custom_audience_list_salts with raw schema validation
func CustomAudienceListSaltsHandler(ctx context.Context, request mcp.CallToolRequest, args custom_audience_list_saltsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("CustomAudienceSalts")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if len(args.Params) > 0 {
		query.Set("params", strings.Join(args.Params, ","))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "salts")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CustomAudienceCreateSaltHandler handles custom_audience_create_salt with raw schema validation
func CustomAudienceCreateSaltHandler(ctx context.Context, request mcp.CallToolRequest, args custom_audience_create_saltArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.Salt != "" {
		body["salt"] = args.Salt
	}

	if args.ValidFrom != "" {
		body["valid_from"] = args.ValidFrom
	}

	if args.ValidTo != "" {
		body["valid_to"] = args.ValidTo
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "salts")

	return ExecutePOSTRequest(ctx, url, body)

}

// CustomAudienceListSessionsHandler handles custom_audience_list_sessions with raw schema validation
func CustomAudienceListSessionsHandler(ctx context.Context, request mcp.CallToolRequest, args custom_audience_list_sessionsArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("CustomAudienceSession")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.SessionId > 0 {
		query.Set("session_id", fmt.Sprintf("%d", args.SessionId))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "sessions")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CustomAudienceGetSharedAccountInfoHandler handles custom_audience_get_shared_account_info with raw schema validation
func CustomAudienceGetSharedAccountInfoHandler(ctx context.Context, request mcp.CallToolRequest, args custom_audience_get_shared_account_infoArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("CustomAudiencesharedAccountInfo")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "shared_account_info")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CustomAudienceRemoveUsersHandler handles custom_audience_remove_users with raw schema validation
func CustomAudienceRemoveUsersHandler(ctx context.Context, request mcp.CallToolRequest, args custom_audience_remove_usersArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	url := buildGraphURL(args.ID, "users")
	return ExecuteDELETERequest(ctx, url)

}

// CustomAudienceCreateUserHandler handles custom_audience_create_user with raw schema validation
func CustomAudienceCreateUserHandler(ctx context.Context, request mcp.CallToolRequest, args custom_audience_create_userArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.Namespace != "" {
		body["namespace"] = args.Namespace
	}

	if args.Payload != nil {
		body["payload"] = args.Payload
	}

	if args.Session != nil {
		body["session"] = args.Session
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "users")

	return ExecutePOSTRequest(ctx, url, body)

}

// CustomAudienceUpdateUsersreplaceHandler handles custom_audience_update_usersreplace with raw schema validation
func CustomAudienceUpdateUsersreplaceHandler(ctx context.Context, request mcp.CallToolRequest, args custom_audience_update_usersreplaceArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if args.Namespace != "" {
		body["namespace"] = args.Namespace
	}

	if args.Payload != nil {
		body["payload"] = args.Payload
	}

	if args.Session != nil {
		body["session"] = args.Session
	}

	// Build URL and execute
	url := buildGraphURL(args.ID, "usersreplace")

	return ExecutePOSTRequest(ctx, url, body)

}

// CustomAudienceDeleteHandler handles custom_audience_delete with raw schema validation
func CustomAudienceDeleteHandler(ctx context.Context, request mcp.CallToolRequest, args custom_audience_deleteArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	url := buildGraphURL(args.ID, "")
	return ExecuteDELETERequest(ctx, url)

}

// CustomAudienceGetHandler handles custom_audience_get with raw schema validation
func CustomAudienceGetHandler(ctx context.Context, request mcp.CallToolRequest, args custom_audience_getArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build query parameters
	query := BuildQueryParameters()

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Handle fields parameter
	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	} else {
		// Use default fields
		defaultFields := GetDefaultFields("CustomAudience")
		if len(defaultFields) > 0 {
			query.Set("fields", strings.Join(defaultFields, ","))
		}
	}

	// Add other parameters

	if len(args.Fields) > 0 {
		query.Set("fields", strings.Join(args.Fields, ","))
	}

	if args.Limit > 0 {
		query.Set("limit", fmt.Sprintf("%d", args.Limit))
	}

	if args.After != "" {
		query.Set("after", args.After)
	}

	if args.Before != "" {
		query.Set("before", args.Before)
	}

	if args.AdAccountId != "" {
		query.Set("ad_account_id", args.AdAccountId)
	}

	if len(args.SpecialAdCategories) > 0 {
		query.Set("special_ad_categories", strings.Join(args.SpecialAdCategories, ","))
	}

	if len(args.SpecialAdCategoryCountries) > 0 {
		query.Set("special_ad_category_countries", strings.Join(args.SpecialAdCategoryCountries, ","))
	}

	if len(args.TargetCountries) > 0 {
		query.Set("target_countries", strings.Join(args.TargetCountries, ","))
	}

	// Build URL and execute
	baseURL := buildGraphURL(args.ID, "")
	fullURL := BuildURLWithQuery(baseURL, query)

	return ExecuteGETRequest(ctx, fullURL)

}

// CustomAudienceUpdateHandler handles custom_audience_update with raw schema validation
func CustomAudienceUpdateHandler(ctx context.Context, request mcp.CallToolRequest, args custom_audience_updateArgs) (*mcp.CallToolResult, error) {
	// Arguments are explicitly passed as typed struct

	// Build request body
	body := make(map[string]interface{})

	if args.ID == "" {
		return mcp.NewToolResultError("id is required"), nil
	}

	// Add parameters to body

	if len(args.AllowedDomains) > 0 {
		body["allowed_domains"] = args.AllowedDomains
	}

	if args.ClaimObjective != "" {
		body["claim_objective"] = args.ClaimObjective
	}

	if args.ContentType != "" {
		body["content_type"] = args.ContentType
	}

	if args.Countries != "" {
		body["countries"] = args.Countries
	}

	if args.CustomerFileSource != "" {
		body["customer_file_source"] = args.CustomerFileSource
	}

	if args.Description != "" {
		body["description"] = args.Description
	}

	body["enable_fetch_or_create"] = args.EnableFetchOrCreate

	if args.EventSourceGroup != "" {
		body["event_source_group"] = args.EventSourceGroup
	}

	if len(args.EventSources) > 0 {
		body["event_sources"] = args.EventSources
	}

	if len(args.Exclusions) > 0 {
		body["exclusions"] = args.Exclusions
	}

	if len(args.Inclusions) > 0 {
		body["inclusions"] = args.Inclusions
	}

	if args.LookalikeSpec != "" {
		body["lookalike_spec"] = args.LookalikeSpec
	}

	if args.Name != "" {
		body["name"] = args.Name
	}

	if args.OptOutLink != "" {
		body["opt_out_link"] = args.OptOutLink
	}

	if args.ParentAudienceId > 0 {
		body["parent_audience_id"] = args.ParentAudienceId
	}

	if args.ProductSetId != "" {
		body["product_set_id"] = args.ProductSetId
	}

	if args.RetentionDays > 0 {
		body["retention_days"] = args.RetentionDays
	}

	if args.RevSharePolicyId > 0 {
		body["rev_share_policy_id"] = args.RevSharePolicyId
	}

	if args.Rule != "" {
		body["rule"] = args.Rule
	}

	if args.RuleAggregation != "" {
		body["rule_aggregation"] = args.RuleAggregation
	}

	if len(args.Tags) > 0 {
		body["tags"] = args.Tags
	}

	body["use_in_campaigns"] = args.UseInCampaigns

	// Build URL and execute
	url := buildGraphURL(args.ID, "")

	return ExecutePOSTRequest(ctx, url, body)

}

// RegisterCustomAudienceTools registers all CustomAudience tools with the MCP server
func RegisterCustomAudienceTools(s *server.MCPServer) error {

	// Register custom_audience_remove_adaccounts using raw JSON schema
	custom_audience_remove_adaccountsTool := mcp.NewToolWithRawSchema(
		"custom_audience_remove_adaccounts",
		"Remove adaccounts from this CustomAudience",
		json.RawMessage(`{"additionalProperties":false,"properties":{"adaccounts":{"description":"Adaccounts","items":{"type":"string"},"type":"array"},"id":{"description":"CustomAudience ID","pattern":"^[0-9]+$","type":"string"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(custom_audience_remove_adaccountsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args custom_audience_remove_adaccountsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return CustomAudienceRemoveAdaccountsHandler(ctx, request, args)
	})

	// Register custom_audience_list_adaccounts using raw JSON schema
	custom_audience_list_adaccountsTool := mcp.NewToolWithRawSchema(
		"custom_audience_list_adaccounts",
		"List adaccounts for this CustomAudience Returns CustomAudienceAdAccount.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CustomAudience ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"permissions":{"description":"Permissions","type":"string"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(custom_audience_list_adaccountsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args custom_audience_list_adaccountsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return CustomAudienceListAdaccountsHandler(ctx, request, args)
	})

	// Register custom_audience_create_adaccount using raw JSON schema
	custom_audience_create_adaccountTool := mcp.NewToolWithRawSchema(
		"custom_audience_create_adaccount",
		"Associate adaccounts with this CustomAudience Returns CustomAudience.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"adaccounts":{"description":"Adaccounts","items":{"type":"string"},"type":"array"},"id":{"description":"CustomAudience ID","pattern":"^[0-9]+$","type":"string"},"permissions":{"description":"Permissions","type":"string"},"relationship_type":{"description":"Relationship Type","items":{"type":"string"},"type":"array"},"replace":{"description":"Replace","type":"boolean"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(custom_audience_create_adaccountTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args custom_audience_create_adaccountArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return CustomAudienceCreateAdaccountHandler(ctx, request, args)
	})

	// Register custom_audience_list_ads using raw JSON schema
	custom_audience_list_adsTool := mcp.NewToolWithRawSchema(
		"custom_audience_list_ads",
		"List ads for this CustomAudience Returns Ad.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"effective_status":{"description":"Effective Status","items":{"type":"string"},"type":"array"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CustomAudience ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"status":{"description":"Status","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(custom_audience_list_adsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args custom_audience_list_adsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return CustomAudienceListAdsHandler(ctx, request, args)
	})

	// Register custom_audience_get_health using raw JSON schema
	custom_audience_get_healthTool := mcp.NewToolWithRawSchema(
		"custom_audience_get_health",
		"Get health data for this CustomAudience Returns CustomAudienceHealth.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"calculated_date":{"description":"Calculated Date","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CustomAudience ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"processed_date":{"description":"Processed Date","type":"string"},"value_aggregation_duration":{"description":"Value Aggregation Duration","type":"integer"},"value_country":{"description":"Value Country","type":"string"},"value_currency":{"description":"Value Currency","type":"string"},"value_version":{"description":"Value Version","type":"integer"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(custom_audience_get_healthTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args custom_audience_get_healthArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return CustomAudienceGetHealthHandler(ctx, request, args)
	})

	// Register custom_audience_list_salts using raw JSON schema
	custom_audience_list_saltsTool := mcp.NewToolWithRawSchema(
		"custom_audience_list_salts",
		"List salts for this CustomAudience Returns CustomAudienceSalts.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CustomAudience ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"params":{"description":"Params","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(custom_audience_list_saltsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args custom_audience_list_saltsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return CustomAudienceListSaltsHandler(ctx, request, args)
	})

	// Register custom_audience_create_salt using raw JSON schema
	custom_audience_create_saltTool := mcp.NewToolWithRawSchema(
		"custom_audience_create_salt",
		"Create or update salts for this CustomAudience Returns CustomAudience. Required: salt, valid_from, valid_to",
		json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"CustomAudience ID","pattern":"^[0-9]+$","type":"string"},"salt":{"description":"Salt","type":"string"},"valid_from":{"description":"Valid From","type":"string"},"valid_to":{"description":"Valid To","type":"string"}},"required":["id","salt","valid_from","valid_to"],"type":"object"}`),
	)
	s.AddTool(custom_audience_create_saltTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args custom_audience_create_saltArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return CustomAudienceCreateSaltHandler(ctx, request, args)
	})

	// Register custom_audience_list_sessions using raw JSON schema
	custom_audience_list_sessionsTool := mcp.NewToolWithRawSchema(
		"custom_audience_list_sessions",
		"List sessions for this CustomAudience Returns CustomAudienceSession.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CustomAudience ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"session_id":{"description":"ID of the Session","pattern":"^[0-9]+$","type":"integer"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(custom_audience_list_sessionsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args custom_audience_list_sessionsArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return CustomAudienceListSessionsHandler(ctx, request, args)
	})

	// Register custom_audience_get_shared_account_info using raw JSON schema
	custom_audience_get_shared_account_infoTool := mcp.NewToolWithRawSchema(
		"custom_audience_get_shared_account_info",
		"Get shared_account_info data for this CustomAudience Returns CustomAudiencesharedAccountInfo.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CustomAudience ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(custom_audience_get_shared_account_infoTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args custom_audience_get_shared_account_infoArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return CustomAudienceGetSharedAccountInfoHandler(ctx, request, args)
	})

	// Register custom_audience_remove_users using raw JSON schema
	custom_audience_remove_usersTool := mcp.NewToolWithRawSchema(
		"custom_audience_remove_users",
		"Remove users from this CustomAudience",
		json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"CustomAudience ID","pattern":"^[0-9]+$","type":"string"},"namespace":{"description":"Namespace","type":"string"},"payload":{"additionalProperties":true,"description":"Payload","type":"object"},"session":{"additionalProperties":true,"description":"Session","type":"object"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(custom_audience_remove_usersTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args custom_audience_remove_usersArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return CustomAudienceRemoveUsersHandler(ctx, request, args)
	})

	// Register custom_audience_create_user using raw JSON schema
	custom_audience_create_userTool := mcp.NewToolWithRawSchema(
		"custom_audience_create_user",
		"Create or update users for this CustomAudience Returns CustomAudience.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"CustomAudience ID","pattern":"^[0-9]+$","type":"string"},"namespace":{"description":"Namespace","type":"string"},"payload":{"additionalProperties":true,"description":"Payload","type":"object"},"session":{"additionalProperties":true,"description":"Session","type":"object"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(custom_audience_create_userTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args custom_audience_create_userArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return CustomAudienceCreateUserHandler(ctx, request, args)
	})

	// Register custom_audience_update_usersreplace using raw JSON schema
	custom_audience_update_usersreplaceTool := mcp.NewToolWithRawSchema(
		"custom_audience_update_usersreplace",
		"Create or update usersreplace for this CustomAudience Returns CustomAudience. Required: payload, session",
		json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"CustomAudience ID","pattern":"^[0-9]+$","type":"string"},"namespace":{"description":"Namespace","type":"string"},"payload":{"additionalProperties":true,"description":"Payload","type":"object"},"session":{"additionalProperties":true,"description":"Session","type":"object"}},"required":["id","payload","session"],"type":"object"}`),
	)
	s.AddTool(custom_audience_update_usersreplaceTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args custom_audience_update_usersreplaceArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return CustomAudienceUpdateUsersreplaceHandler(ctx, request, args)
	})

	// Register custom_audience_delete using raw JSON schema
	custom_audience_deleteTool := mcp.NewToolWithRawSchema(
		"custom_audience_delete",
		"Delete a CustomAudience",
		json.RawMessage(`{"additionalProperties":false,"properties":{"id":{"description":"CustomAudience ID","pattern":"^[0-9]+$","type":"string"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(custom_audience_deleteTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args custom_audience_deleteArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return CustomAudienceDeleteHandler(ctx, request, args)
	})

	// Register custom_audience_get using raw JSON schema
	custom_audience_getTool := mcp.NewToolWithRawSchema(
		"custom_audience_get",
		"Get details of a specific CustomAudience Returns CustomAudience.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"ad_account_id":{"description":"ID of the Ad Account","pattern":"^[0-9]+$","type":"string"},"after":{"description":"Cursor for pagination (next page)","type":"string"},"before":{"description":"Cursor for pagination (previous page)","type":"string"},"fields":{"description":"Fields to return","items":{"type":"string"},"type":"array"},"id":{"description":"CustomAudience ID","pattern":"^[0-9]+$","type":"string"},"limit":{"description":"Maximum number of results","maximum":100,"minimum":1,"type":"integer"},"special_ad_categories":{"description":"Special Ad Categories","items":{"type":"string"},"type":"array"},"special_ad_category_countries":{"description":"Special Ad Category Countries","items":{"type":"string"},"type":"array"},"target_countries":{"description":"Target Countries","items":{"type":"string"},"type":"array"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(custom_audience_getTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args custom_audience_getArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return CustomAudienceGetHandler(ctx, request, args)
	})

	// Register custom_audience_update using raw JSON schema
	custom_audience_updateTool := mcp.NewToolWithRawSchema(
		"custom_audience_update",
		"Update a CustomAudience Returns CustomAudience.",
		json.RawMessage(`{"additionalProperties":false,"properties":{"allowed_domains":{"description":"Allowed Domains","items":{"type":"string"},"type":"array"},"claim_objective":{"description":"Claim Objective (enum: customaudience_claim_objective)","enum":["AUTOMOTIVE_MODEL","COLLABORATIVE_ADS","HOME_LISTING","MEDIA_TITLE","PRODUCT","TRAVEL","VEHICLE","VEHICLE_OFFER"],"type":"string"},"content_type":{"description":"Content Type (enum: customaudience_content_type)","enum":["AUTOMOTIVE_MODEL","DESTINATION","FLIGHT","GENERIC","HOME_LISTING","HOTEL","LOCAL_SERVICE_BUSINESS","MEDIA_TITLE","OFFLINE_PRODUCT","PRODUCT","VEHICLE","VEHICLE_OFFER"],"type":"string"},"countries":{"description":"Countries","type":"string"},"customer_file_source":{"description":"Customer File Source (enum: customaudience_customer_file_source)","enum":["BOTH_USER_AND_PARTNER_PROVIDED","PARTNER_PROVIDED_ONLY","USER_PROVIDED_ONLY"],"type":"string"},"description":{"description":"Description","type":"string"},"enable_fetch_or_create":{"description":"Enable Fetch Or Create","type":"boolean"},"event_source_group":{"description":"Event Source Group","type":"string"},"event_sources":{"description":"Event Sources","items":{"additionalProperties":true,"type":"object"},"type":"array"},"exclusions":{"description":"Exclusions","items":{"additionalProperties":true,"type":"object"},"type":"array"},"id":{"description":"CustomAudience ID","pattern":"^[0-9]+$","type":"string"},"inclusions":{"description":"Inclusions","items":{"additionalProperties":true,"type":"object"},"type":"array"},"lookalike_spec":{"description":"Lookalike Spec","type":"string"},"name":{"description":"Name","type":"string"},"opt_out_link":{"description":"Opt Out Link","type":"string"},"parent_audience_id":{"description":"ID of the Parent Audience","pattern":"^[0-9]+$","type":"integer"},"product_set_id":{"description":"ID of the Product Set","pattern":"^[0-9]+$","type":"string"},"retention_days":{"description":"Retention Days","type":"integer"},"rev_share_policy_id":{"description":"ID of the Rev Share Policy","pattern":"^[0-9]+$","type":"integer"},"rule":{"description":"Rule","type":"string"},"rule_aggregation":{"description":"Rule Aggregation","type":"string"},"tags":{"description":"Tags","items":{"type":"string"},"type":"array"},"use_in_campaigns":{"description":"Use In Campaigns","type":"boolean"}},"required":["id"],"type":"object"}`),
	)
	s.AddTool(custom_audience_updateTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Parse arguments using the built-in type-safe binding
		var args custom_audience_updateArgs
		if err := request.BindArguments(&args); err != nil {
			return mcp.NewToolResultError(fmt.Sprintf("Invalid arguments: %v", err)), nil
		}
		return CustomAudienceUpdateHandler(ctx, request, args)
	})

	return nil
}

// CustomAudience tools: 15 endpoints
