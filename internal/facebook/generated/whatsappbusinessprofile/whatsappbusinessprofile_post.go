// Code generated by Facebook Business API codegen. DO NOT EDIT.

package whatsappbusinessprofile

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolWhatsappbusinessprofile_post returns the MCP tool definition for whatsappbusinessprofile_post
func ToolWhatsappbusinessprofile_post() mcp.Tool {

	return mcp.NewTool("whatsappbusinessprofile_post",
		mcp.WithDescription("POST  for WhatsAppBusinessProfile"),
	)
}

// HandleWhatsappbusinessprofile_post handles the whatsappbusinessprofile_post tool with context-based auth
func HandleWhatsappbusinessprofile_post(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Call the API method
	result, err := Whatsappbusinessprofile_post(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessprofile_post: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Whatsappbusinessprofile_post performs POST  for WhatsAppBusinessProfile
func Whatsappbusinessprofile_post(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
