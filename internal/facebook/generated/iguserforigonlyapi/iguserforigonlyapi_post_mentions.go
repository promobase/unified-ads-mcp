// Code generated by Facebook Business API codegen. DO NOT EDIT.

package iguserforigonlyapi

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolIguserforigonlyapi_post_mentions returns the MCP tool definition for iguserforigonlyapi_post_mentions
func ToolIguserforigonlyapi_post_mentions() mcp.Tool {

	// Params object accepts: comment_id (string), media_id (string), message (string)
	return mcp.NewTool("iguserforigonlyapi_post_mentions",
		mcp.WithDescription("POST mentions for IGUserForIGOnlyAPI"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"comment_id": map[string]any{
					"type":        "string",
					"description": "comment_id parameter",
				},
				"media_id": map[string]any{
					"type":        "string",
					"description": "media_id parameter",
					"required":    true,
				},
				"message": map[string]any{
					"type":        "string",
					"description": "message parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: comment_id (string), media_id (string) [required], message (string) [required]"),
		),
	)
}

// HandleIguserforigonlyapi_post_mentions handles the iguserforigonlyapi_post_mentions tool with context-based auth
func HandleIguserforigonlyapi_post_mentions(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	// Parse required params object and expand into args
	val, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(val), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the API method
	result, err := Iguserforigonlyapi_post_mentions(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute iguserforigonlyapi_post_mentions: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Iguserforigonlyapi_post_mentions performs POST mentions for IGUserForIGOnlyAPI
func Iguserforigonlyapi_post_mentions(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "mentions"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
