// Code generated by Facebook Business API codegen. DO NOT EDIT.

package iguserforigonlyapi

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolIguserforigonlyapi_get_insights returns the MCP tool definition for iguserforigonlyapi_get_insights
func ToolIguserforigonlyapi_get_insights() mcp.Tool {
	// Available fields for InsightsResult: description, description_from_api_doc, id, name, period, title, values
	// Params object accepts: breakdown (list<userinsights_breakdown_enum_param>), metric (list<userinsights_metric_enum_param>), metric_type (userinsights_metric_type_enum_param), period (list<userinsights_period_enum_param>), since (datetime), timeframe (userinsights_timeframe_enum_param), until (datetime)
	return mcp.NewTool("iguserforigonlyapi_get_insights",
		mcp.WithDescription("GET insights for IGUserForIGOnlyAPI"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"breakdown": map[string]any{
					"type":        "array",
					"description": "breakdown parameter",
					"enum":        []string{"age", "city", "contact_button_type", "country", "follow_type", "gender", "media_product_type"},
					"items":       map[string]any{"type": "string"},
				},
				"metric": map[string]any{
					"type":        "array",
					"description": "metric parameter",
					"required":    true,
					"enum":        []string{"accounts_engaged", "comments", "content_views", "engaged_audience_demographics", "follower_count", "follower_demographics", "follows_and_unfollows", "impressions", "likes", "online_followers", "profile_links_taps", "profile_views", "quotes", "reach", "reached_audience_demographics", "replies", "reposts", "saves", "shares", "threads_follower_demographics", "threads_followers", "threads_likes", "threads_replies", "threads_views", "total_interactions", "views", "website_clicks"},
					"items":       map[string]any{"type": "string"},
				},
				"metric_type": map[string]any{
					"type":        "string",
					"description": "metric_type parameter",
					"enum":        []string{"default", "time_series", "total_value"},
				},
				"period": map[string]any{
					"type":        "array",
					"description": "period parameter",
					"required":    true,
					"enum":        []string{"day", "days_28", "lifetime", "month", "total_over_range", "week"},
					"items":       map[string]any{"type": "string"},
				},
				"since": map[string]any{
					"type":        "string",
					"description": "since parameter",
				},
				"timeframe": map[string]any{
					"type":        "string",
					"description": "timeframe parameter",
					"enum":        []string{"last_14_days", "last_30_days", "last_90_days", "prev_month", "this_month", "this_week"},
				},
				"until": map[string]any{
					"type":        "string",
					"description": "until parameter",
				},
			}),
			mcp.Description("Parameters object containing: breakdown (array<enum>) [age, city, contact_button_type, country, follow_type, ...], metric (array<enum>) [accounts_engaged, comments, content_views, engaged_audience_demographics, follower_count, ...] [required], metric_type (enum) [default, time_series, total_value], period (array<enum>) [day, days_28, lifetime, month, total_over_range, ...] [required], since (datetime), timeframe (enum) [last_14_days, last_30_days, last_90_days, prev_month, this_month, ...], until (datetime)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for InsightsResult objects. Available fields: description, description_from_api_doc, id, name, period, title, values"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleIguserforigonlyapi_get_insights handles the iguserforigonlyapi_get_insights tool with context-based auth
func HandleIguserforigonlyapi_get_insights(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	// Parse required params object and expand into args
	val, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(val), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Optional: fields
	utils.ParseFieldsArray(request, args)

	// Optional: limit
	utils.ParseOptionalInt(request, "limit", args)

	// Optional: after
	utils.ParseOptionalString(request, "after", args)

	// Optional: before
	utils.ParseOptionalString(request, "before", args)

	// Call the API method
	result, err := Iguserforigonlyapi_get_insights(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute iguserforigonlyapi_get_insights: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Iguserforigonlyapi_get_insights performs GET insights for IGUserForIGOnlyAPI
func Iguserforigonlyapi_get_insights(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/insights")

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("GET", baseURL, urlParams)
}
