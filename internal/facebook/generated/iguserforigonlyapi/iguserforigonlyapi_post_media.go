// Code generated by Facebook Business API codegen. DO NOT EDIT.

package iguserforigonlyapi

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolIguserforigonlyapi_post_media returns the MCP tool definition for iguserforigonlyapi_post_media
func ToolIguserforigonlyapi_post_media() mcp.Tool {

	// Params object accepts: alt_text (string), audio_name (string), caption (string), children (list<string>), collaborators (list<string>), cover_url (string), image_url (string), is_carousel_item (bool), location_id (string), media_type (string), product_tags (list<map>), share_to_feed (bool), thumb_offset (string), upload_type (string), user_tags (list<map>), video_url (string)
	return mcp.NewTool("iguserforigonlyapi_post_media",
		mcp.WithDescription("POST media for IGUserForIGOnlyAPI"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"alt_text": map[string]any{
					"type":        "string",
					"description": "alt_text parameter",
				},
				"audio_name": map[string]any{
					"type":        "string",
					"description": "audio_name parameter",
				},
				"caption": map[string]any{
					"type":        "string",
					"description": "caption parameter",
				},
				"children": map[string]any{
					"type":        "array",
					"description": "children parameter",
					"items":       map[string]any{"type": "string"},
				},
				"collaborators": map[string]any{
					"type":        "array",
					"description": "collaborators parameter",
					"items":       map[string]any{"type": "string"},
				},
				"cover_url": map[string]any{
					"type":        "string",
					"description": "cover_url parameter",
				},
				"image_url": map[string]any{
					"type":        "string",
					"description": "image_url parameter",
				},
				"is_carousel_item": map[string]any{
					"type":        "boolean",
					"description": "is_carousel_item parameter",
				},
				"location_id": map[string]any{
					"type":        "string",
					"description": "location_id parameter",
				},
				"media_type": map[string]any{
					"type":        "string",
					"description": "media_type parameter",
				},
				"product_tags": map[string]any{
					"type":        "array",
					"description": "product_tags parameter",
					"items":       map[string]any{"type": "object"},
				},
				"share_to_feed": map[string]any{
					"type":        "boolean",
					"description": "share_to_feed parameter",
				},
				"thumb_offset": map[string]any{
					"type":        "string",
					"description": "thumb_offset parameter",
				},
				"upload_type": map[string]any{
					"type":        "string",
					"description": "upload_type parameter",
				},
				"user_tags": map[string]any{
					"type":        "array",
					"description": "user_tags parameter",
					"items":       map[string]any{"type": "object"},
				},
				"video_url": map[string]any{
					"type":        "string",
					"description": "video_url parameter",
				},
			}),
			mcp.Description("Parameters object containing: alt_text (string), audio_name (string), caption (string), children (array<string>), collaborators (array<string>), cover_url (string), image_url (string), is_carousel_item (boolean), location_id (string), media_type (string), product_tags (array<object>), share_to_feed (boolean), thumb_offset (string), upload_type (string), user_tags (array<object>), video_url (string)"),
		),
	)
}

// HandleIguserforigonlyapi_post_media handles the iguserforigonlyapi_post_media tool with context-based auth
func HandleIguserforigonlyapi_post_media(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Iguserforigonlyapi_post_media(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute iguserforigonlyapi_post_media: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Iguserforigonlyapi_post_media performs POST media for IGUserForIGOnlyAPI
func Iguserforigonlyapi_post_media(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/media")

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
