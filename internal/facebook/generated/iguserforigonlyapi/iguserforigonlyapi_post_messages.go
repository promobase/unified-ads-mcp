// Code generated by Facebook Business API codegen. DO NOT EDIT.

package iguserforigonlyapi

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolIguserforigonlyapi_post_messages returns the MCP tool definition for iguserforigonlyapi_post_messages
func ToolIguserforigonlyapi_post_messages() mcp.Tool {

	// Params object accepts: message (Object), messaging_type (iggraphusermessages_messaging_type_enum_param), payload (string), recipient (Object), sender_action (iggraphusermessages_sender_action_enum_param), tag (Object), thread_control (Object)
	return mcp.NewTool("iguserforigonlyapi_post_messages",
		mcp.WithDescription("POST messages for IGUserForIGOnlyAPI"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"message": map[string]any{
					"type":        "object",
					"description": "message parameter",
				},
				"messaging_type": map[string]any{
					"type":        "string",
					"description": "messaging_type parameter",
					"enum":        []string{"MESSAGE_TAG", "RESPONSE", "UPDATE", "UTILITY"},
				},
				"payload": map[string]any{
					"type":        "string",
					"description": "payload parameter",
				},
				"recipient": map[string]any{
					"type":        "object",
					"description": "recipient parameter",
				},
				"sender_action": map[string]any{
					"type":        "string",
					"description": "sender_action parameter",
					"enum":        []string{"MARK_SEEN", "REACT", "TYPING_OFF", "TYPING_ON", "UNREACT"},
				},
				"tag": map[string]any{
					"type":        "object",
					"description": "tag parameter",
				},
				"thread_control": map[string]any{
					"type":        "object",
					"description": "thread_control parameter",
				},
			}),
			mcp.Description("Parameters object containing: message (object), messaging_type (enum) [MESSAGE_TAG, RESPONSE, UPDATE, UTILITY], payload (string), recipient (object), sender_action (enum) [MARK_SEEN, REACT, TYPING_OFF, TYPING_ON, UNREACT], tag (object), thread_control (object)"),
		),
	)
}

// HandleIguserforigonlyapi_post_messages handles the iguserforigonlyapi_post_messages tool with context-based auth
func HandleIguserforigonlyapi_post_messages(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Iguserforigonlyapi_post_messages(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute iguserforigonlyapi_post_messages: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Iguserforigonlyapi_post_messages performs POST messages for IGUserForIGOnlyAPI
func Iguserforigonlyapi_post_messages(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "/messages"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
