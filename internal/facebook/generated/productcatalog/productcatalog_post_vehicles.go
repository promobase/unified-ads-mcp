// Code generated by Facebook Business API codegen. DO NOT EDIT.

package productcatalog

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolProductcatalog_post_vehicles returns the MCP tool definition for productcatalog_post_vehicles
func ToolProductcatalog_post_vehicles() mcp.Tool {

	// Params object accepts: address (map), applinks (Object), availability (productcatalogvehicles_availability_enum_param), body_style (productcatalogvehicles_body_style_enum_param), condition (productcatalogvehicles_condition_enum_param), currency (string), date_first_on_lot (string), dealer_id (string), dealer_name (string), dealer_phone (string), description (string), drivetrain (productcatalogvehicles_drivetrain_enum_param), exterior_color (string), fb_page_id (string), fuel_type (productcatalogvehicles_fuel_type_enum_param), images (list<Object>), interior_color (string), make (string), mileage (map), model (string), price (unsigned int), state_of_vehicle (productcatalogvehicles_state_of_vehicle_enum_param), title (string), transmission (productcatalogvehicles_transmission_enum_param), trim (string), url (string), vehicle_id (string), vehicle_type (productcatalogvehicles_vehicle_type_enum_param), vin (string), year (unsigned int)
	return mcp.NewTool("productcatalog_post_vehicles",
		mcp.WithDescription("POST vehicles for ProductCatalog"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"address": map[string]any{
					"type":        "object",
					"description": "address parameter",
					"required":    true,
				},
				"applinks": map[string]any{
					"type":        "object",
					"description": "applinks parameter",
				},
				"availability": map[string]any{
					"type":        "string",
					"description": "availability parameter",
					"enum":        []string{"AVAILABLE", "NOT_AVAILABLE", "PENDING", "UNKNOWN"},
				},
				"body_style": map[string]any{
					"type":        "string",
					"description": "body_style parameter",
					"required":    true,
					"enum":        []string{"CONVERTIBLE", "COUPE", "CROSSOVER", "ESTATE", "GRANDTOURER", "HATCHBACK", "MINIBUS", "MINIVAN", "MPV", "NONE", "OTHER", "PICKUP", "ROADSTER", "SALOON", "SEDAN", "SMALL_CAR", "SPORTSCAR", "SUPERCAR", "SUPERMINI", "SUV", "TRUCK", "VAN", "WAGON"},
				},
				"condition": map[string]any{
					"type":        "string",
					"description": "condition parameter",
					"enum":        []string{"EXCELLENT", "FAIR", "GOOD", "NONE", "OTHER", "POOR", "VERY_GOOD"},
				},
				"currency": map[string]any{
					"type":        "string",
					"description": "currency parameter",
					"required":    true,
				},
				"date_first_on_lot": map[string]any{
					"type":        "string",
					"description": "date_first_on_lot parameter",
				},
				"dealer_id": map[string]any{
					"type":        "string",
					"description": "dealer_id parameter",
				},
				"dealer_name": map[string]any{
					"type":        "string",
					"description": "dealer_name parameter",
				},
				"dealer_phone": map[string]any{
					"type":        "string",
					"description": "dealer_phone parameter",
				},
				"description": map[string]any{
					"type":        "string",
					"description": "description parameter",
					"required":    true,
				},
				"drivetrain": map[string]any{
					"type":        "string",
					"description": "drivetrain parameter",
					"enum":        []string{"AWD", "FOUR_WD", "FWD", "NONE", "OTHER", "RWD", "TWO_WD"},
				},
				"exterior_color": map[string]any{
					"type":        "string",
					"description": "exterior_color parameter",
					"required":    true,
				},
				"fb_page_id": map[string]any{
					"type":        "string",
					"description": "fb_page_id parameter",
				},
				"fuel_type": map[string]any{
					"type":        "string",
					"description": "fuel_type parameter",
					"enum":        []string{"DIESEL", "ELECTRIC", "FLEX", "GASOLINE", "HYBRID", "NONE", "OTHER", "PETROL", "PLUGIN_HYBRID"},
				},
				"images": map[string]any{
					"type":        "array",
					"description": "images parameter",
					"required":    true,
					"items":       map[string]any{"type": "object"},
				},
				"interior_color": map[string]any{
					"type":        "string",
					"description": "interior_color parameter",
				},
				"make": map[string]any{
					"type":        "string",
					"description": "make parameter",
					"required":    true,
				},
				"mileage": map[string]any{
					"type":        "object",
					"description": "mileage parameter",
					"required":    true,
				},
				"model": map[string]any{
					"type":        "string",
					"description": "model parameter",
					"required":    true,
				},
				"price": map[string]any{
					"type":        "integer",
					"description": "price parameter",
					"required":    true,
				},
				"state_of_vehicle": map[string]any{
					"type":        "string",
					"description": "state_of_vehicle parameter",
					"required":    true,
					"enum":        []string{"CPO", "NEW", "USED"},
				},
				"title": map[string]any{
					"type":        "string",
					"description": "title parameter",
					"required":    true,
				},
				"transmission": map[string]any{
					"type":        "string",
					"description": "transmission parameter",
					"enum":        []string{"AUTOMATIC", "MANUAL", "NONE", "OTHER"},
				},
				"trim": map[string]any{
					"type":        "string",
					"description": "trim parameter",
				},
				"url": map[string]any{
					"type":        "string",
					"description": "url parameter",
					"required":    true,
				},
				"vehicle_id": map[string]any{
					"type":        "string",
					"description": "vehicle_id parameter",
					"required":    true,
				},
				"vehicle_type": map[string]any{
					"type":        "string",
					"description": "vehicle_type parameter",
					"enum":        []string{"BOAT", "CAR_TRUCK", "COMMERCIAL", "MOTORCYCLE", "OTHER", "POWERSPORT", "RV_CAMPER", "TRAILER"},
				},
				"vin": map[string]any{
					"type":        "string",
					"description": "vin parameter",
					"required":    true,
				},
				"year": map[string]any{
					"type":        "integer",
					"description": "year parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: address (object) [required], applinks (object), availability (enum) [AVAILABLE, NOT_AVAILABLE, PENDING, UNKNOWN], body_style (enum) [CONVERTIBLE, COUPE, CROSSOVER, ESTATE, GRANDTOURER, ...] [required], condition (enum) [EXCELLENT, FAIR, GOOD, NONE, OTHER, ...], currency (string) [required], date_first_on_lot (string), dealer_id (string), dealer_name (string), dealer_phone (string), description (string) [required], drivetrain (enum) [AWD, FOUR_WD, FWD, NONE, OTHER, ...], exterior_color (string) [required], fb_page_id (string), fuel_type (enum) [DIESEL, ELECTRIC, FLEX, GASOLINE, HYBRID, ...], images (array<object>) [required], interior_color (string), make (string) [required], mileage (object) [required], model (string) [required], price (integer) [required], state_of_vehicle (enum) [CPO, NEW, USED] [required], title (string) [required], transmission (enum) [AUTOMATIC, MANUAL, NONE, OTHER], trim (string), url (string) [required], vehicle_id (string) [required], vehicle_type (enum) [BOAT, CAR_TRUCK, COMMERCIAL, MOTORCYCLE, OTHER, ...], vin (string) [required], year (integer) [required]"),
		),
	)
}

// HandleProductcatalog_post_vehicles handles the productcatalog_post_vehicles tool with context-based auth
func HandleProductcatalog_post_vehicles(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	// Parse required params object and expand into args
	val, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(val), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the API method
	result, err := Productcatalog_post_vehicles(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute productcatalog_post_vehicles: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Productcatalog_post_vehicles performs POST vehicles for ProductCatalog
func Productcatalog_post_vehicles(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "/vehicles"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
