// Code generated by Facebook Business API codegen. DO NOT EDIT.

package productcatalog

import (
	"context"
	"strings"
	"testing"

	"github.com/mark3labs/mcp-go/mcp"
)

func TestToolProductcatalog_delete_assigned_users_Definition(t *testing.T) {
	// Test tool definition
	tool := ToolProductcatalog_delete_assigned_users()
	if tool.Name != "productcatalog_delete_assigned_users" {
		t.Errorf("expected tool name productcatalog_delete_assigned_users, got %s", tool.Name)
	}
}

func TestToolProductcatalog_delete_assigned_users_ValidationErrors(t *testing.T) {
	tests := []struct {
		name          string
		arguments     map[string]interface{}
		setupContext  func() context.Context
		expectedError bool
		errorContains string
	}{
		{
			name:      "missing access token",
			arguments: map[string]interface{}{},
			setupContext: func() context.Context {
				return context.Background() // No token
			},
			expectedError: true,
			errorContains: "access token not found",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Setup context
			ctx := tt.setupContext()

			// Create request
			params := mcp.CallToolParams{
				Name:      "productcatalog_delete_assigned_users",
				Arguments: tt.arguments,
			}
			request := mcp.CallToolRequest{
				Params: params,
			}

			// Call handler
			result, err := HandleProductcatalog_delete_assigned_users(ctx, request)

			// Check expectations
			if tt.expectedError {
				if err != nil {
					t.Fatalf("unexpected error type: %v", err)
				}
				if result == nil || !result.IsError {
					t.Fatal("expected error result")
				}

				// Check error message contains expected text
				if tt.errorContains != "" && len(result.Content) > 0 {
					// Try to extract text from content
					errorText := ""
					for _, content := range result.Content {
						if textContent, ok := content.(mcp.TextContent); ok {
							errorText = textContent.Text
							break
						}
					}
					if errorText != "" && !strings.Contains(errorText, tt.errorContains) {
						t.Errorf("error %q does not contain %q", errorText, tt.errorContains)
					}
				}
			}
		})
	}
}
