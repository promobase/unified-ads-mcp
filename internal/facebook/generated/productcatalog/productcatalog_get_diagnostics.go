// Code generated by Facebook Business API codegen. DO NOT EDIT.

package productcatalog

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/shared"
)

// ToolProductcatalog_get_diagnostics returns the MCP tool definition for productcatalog_get_diagnostics
func ToolProductcatalog_get_diagnostics() mcp.Tool {
	// Available fields for ProductCatalogDiagnosticGroup: affected_channels, affected_entity, affected_features, diagnostics, error_code, number_of_affected_entities, number_of_affected_items, severity, subtitle, title, type
	// Params object accepts: affected_channels (list<productcatalogdiagnostics_affected_channels_enum_param>), affected_entities (list<productcatalogdiagnostics_affected_entities_enum_param>), affected_features (list<productcatalogdiagnostics_affected_features_enum_param>), severities (list<productcatalogdiagnostics_severities_enum_param>), types (list<productcatalogdiagnostics_types_enum_param>)
	return mcp.NewTool("productcatalog_get_diagnostics",
		mcp.WithDescription("GET diagnostics for ProductCatalog"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"affected_channels": map[string]any{
					"type": "array",
					"description": "affected_channels parameter",
					"enum": []string{ "b2c_marketplace", "c2c_marketplace", "da", "daily_deals", "daily_deals_legacy", "ig_product_tagging", "marketplace", "marketplace_ads_deprecated", "marketplace_shops", "mini_shops", "offline_conversions", "shops", "universal_checkout", "whatsapp" },
					"items": map[string]any{"type": "string"},
				},
				"affected_entities": map[string]any{
					"type": "array",
					"description": "affected_entities parameter",
					"enum": []string{ "product_catalog", "product_event", "product_item", "product_set" },
					"items": map[string]any{"type": "string"},
				},
				"affected_features": map[string]any{
					"type": "array",
					"description": "affected_features parameter",
					"enum": []string{ "augmented_reality", "checkout" },
					"items": map[string]any{"type": "string"},
				},
				"severities": map[string]any{
					"type": "array",
					"description": "severities parameter",
					"enum": []string{ "MUST_FIX", "OPPORTUNITY" },
					"items": map[string]any{"type": "string"},
				},
				"types": map[string]any{
					"type": "array",
					"description": "types parameter",
					"enum": []string{ "AR_VISIBILITY_ISSUES", "ATTRIBUTES_INVALID", "ATTRIBUTES_MISSING", "CATEGORY", "CHECKOUT", "DA_VISIBILITY_ISSUES", "EVENT_SOURCE_ISSUES", "IMAGE_QUALITY", "LOW_QUALITY_TITLE_AND_DESCRIPTION", "POLICY_VIOLATION", "SHOPS_VISIBILITY_ISSUES" },
					"items": map[string]any{"type": "string"},
				},
			}),
			mcp.Description("Parameters object containing: affected_channels (array<enum>) [b2c_marketplace, c2c_marketplace, da, daily_deals, daily_deals_legacy, ...], affected_entities (array<enum>) [product_catalog, product_event, product_item, product_set], affected_features (array<enum>) [augmented_reality, checkout], severities (array<enum>) [MUST_FIX, OPPORTUNITY], types (array<enum>) [AR_VISIBILITY_ISSUES, ATTRIBUTES_INVALID, ATTRIBUTES_MISSING, CATEGORY, CHECKOUT, ...]"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for ProductCatalogDiagnosticGroup objects. Available fields: affected_channels, affected_entity, affected_features, diagnostics, error_code, number_of_affected_entities, number_of_affected_items, severity, subtitle, title, type"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleProductcatalog_get_diagnostics handles the productcatalog_get_diagnostics tool with context-based auth
func HandleProductcatalog_get_diagnostics(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	// Object parameter - expecting JSON string
	if val := request.GetString("params", ""); val != "" {
		// Parse params object and extract individual parameters
		var params map[string]interface{}
		if err := json.Unmarshal([]byte(val), &params); err == nil {
			for key, value := range params {
				args[key] = value
			}
		}
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the API method
	result, err := Productcatalog_get_diagnostics(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute productcatalog_get_diagnostics: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Productcatalog_get_diagnostics performs GET diagnostics for ProductCatalog
func Productcatalog_get_diagnostics(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/diagnostics")
	
	urlParams := url.Values{}
	urlParams.Set("access_token", accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("params", fmt.Sprintf("%v", val))
		
	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("fields", fmt.Sprintf("%v", val))
		
	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("limit", fmt.Sprintf("%v", val))
		
	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("after", fmt.Sprintf("%v", val))
		
	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("before", fmt.Sprintf("%v", val))
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}