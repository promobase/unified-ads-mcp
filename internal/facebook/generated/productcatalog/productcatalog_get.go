// Code generated by Facebook Business API codegen. DO NOT EDIT.

package productcatalog

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolProductcatalog_get returns the MCP tool definition for productcatalog_get
func ToolProductcatalog_get() mcp.Tool {
	// Available fields for ProductCatalog: ad_account_to_collaborative_ads_share_settings, agency_collaborative_ads_share_settings, business, catalog_store, commerce_merchant_settings, creator_user, da_display_settings, default_image_url, fallback_image_url, feed_count, id, is_catalog_segment, is_local_catalog, name, owner_business, product_count, store_catalog_settings, user_access_expire_time, vertical
	// Params object accepts: segment_use_cases (list<productcatalog_segment_use_cases>)
	return mcp.NewTool("productcatalog_get",
		mcp.WithDescription("GET  for ProductCatalog"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"segment_use_cases": map[string]any{
					"type":        "array",
					"description": "segment_use_cases parameter",
					"enum":        []string{"AFFILIATE_SELLER_STOREFRONT", "AFFILIATE_TAGGED_ONLY_DEPRECATED", "COLLAB_ADS", "COLLAB_ADS_FOR_MARKETPLACE_PARTNER", "COLLAB_ADS_SEGMENT_WITHOUT_SEGMENT_SYNCING", "DIGITAL_CIRCULARS", "FB_LIVE_SHOPPING", "IG_SHOPPING", "IG_SHOPPING_SUGGESTED_PRODUCTS", "MARKETPLACE_SHOPS", "TEST"},
					"items":       map[string]any{"type": "string"},
				},
			}),
			mcp.Description("Parameters object containing: segment_use_cases (array<productcatalog_segment_use_cases>) [AFFILIATE_SELLER_STOREFRONT, AFFILIATE_TAGGED_ONLY_DEPRECATED, COLLAB_ADS, COLLAB_ADS_FOR_MARKETPLACE_PARTNER, COLLAB_ADS_SEGMENT_WITHOUT_SEGMENT_SYNCING, ...]"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return for ProductCatalog objects. Available fields: ad_account_to_collaborative_ads_share_settings, agency_collaborative_ads_share_settings, business, catalog_store, commerce_merchant_settings, creator_user, da_display_settings, default_image_url, fallback_image_url, feed_count, id, is_catalog_segment, is_local_catalog, name, owner_business (and 4 more)"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleProductcatalog_get handles the productcatalog_get tool with context-based auth
func HandleProductcatalog_get(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Optional: fields
	utils.ParseFieldsArray(request, args)

	// Optional: limit
	utils.ParseOptionalInt(request, "limit", args)

	// Optional: after
	utils.ParseOptionalString(request, "after", args)

	// Optional: before
	utils.ParseOptionalString(request, "before", args)

	// Call the API method
	result, err := Productcatalog_get(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute productcatalog_get: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Productcatalog_get performs GET  for ProductCatalog
func Productcatalog_get(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + ""

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("GET", baseURL, urlParams)
}
