// Code generated by Facebook Business API codegen. DO NOT EDIT.

package productcatalog

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolProductcatalog_post_agencies returns the MCP tool definition for productcatalog_post_agencies
func ToolProductcatalog_post_agencies() mcp.Tool {

	// Params object accepts: business (string), permitted_roles (list<productcatalogagencies_permitted_roles_enum_param>), permitted_tasks (list<productcatalogagencies_permitted_tasks_enum_param>), skip_defaults (bool), utm_settings (map)
	return mcp.NewTool("productcatalog_post_agencies",
		mcp.WithDescription("POST agencies for ProductCatalog"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"business": map[string]any{
					"type":        "string",
					"description": "business parameter",
					"required":    true,
				},
				"permitted_roles": map[string]any{
					"type":        "array",
					"description": "permitted_roles parameter",
					"enum":        []string{"ADMIN", "ADVERTISER"},
					"items":       map[string]any{"type": "string"},
				},
				"permitted_tasks": map[string]any{
					"type":        "array",
					"description": "permitted_tasks parameter",
					"enum":        []string{"AA_ANALYZE", "ADVERTISE", "MANAGE", "MANAGE_AR"},
					"items":       map[string]any{"type": "string"},
				},
				"skip_defaults": map[string]any{
					"type":        "boolean",
					"description": "skip_defaults parameter",
				},
				"utm_settings": map[string]any{
					"type":        "object",
					"description": "utm_settings parameter",
				},
			}),
			mcp.Description("Parameters object containing: business (string) [required], permitted_roles (array<enum>) [ADMIN, ADVERTISER], permitted_tasks (array<enum>) [AA_ANALYZE, ADVERTISE, MANAGE, MANAGE_AR], skip_defaults (boolean), utm_settings (object)"),
		),
	)
}

// HandleProductcatalog_post_agencies handles the productcatalog_post_agencies tool with context-based auth
func HandleProductcatalog_post_agencies(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	// Parse required params object and expand into args
	val, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(val), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Call the API method
	result, err := Productcatalog_post_agencies(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute productcatalog_post_agencies: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Productcatalog_post_agencies performs POST agencies for ProductCatalog
func Productcatalog_post_agencies(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "/agencies"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
