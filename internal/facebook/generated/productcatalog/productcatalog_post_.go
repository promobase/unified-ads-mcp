// Code generated by Facebook Business API codegen. DO NOT EDIT.

package productcatalog

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolProductcatalog_post_ returns the MCP tool definition for productcatalog_post_
func ToolProductcatalog_post_() mcp.Tool {

	// Params object accepts: additional_vertical_option (productcatalog_additional_vertical_option), da_display_settings (Object), default_image_url (string), destination_catalog_settings (map), fallback_image_url (string), flight_catalog_settings (map), name (string), partner_integration (map), store_catalog_settings (map)
	return mcp.NewTool("productcatalog_post_",
		mcp.WithDescription("POST  for ProductCatalog"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"additional_vertical_option": map[string]any{
					"type":        "string",
					"description": "additional_vertical_option parameter",
					"enum":        []string{"LOCAL_DA_CATALOG", "LOCAL_PRODUCTS"},
				},
				"da_display_settings": map[string]any{
					"type":        "object",
					"description": "da_display_settings parameter",
				},
				"default_image_url": map[string]any{
					"type":        "string",
					"description": "default_image_url parameter",
				},
				"destination_catalog_settings": map[string]any{
					"type":        "object",
					"description": "destination_catalog_settings parameter",
				},
				"fallback_image_url": map[string]any{
					"type":        "string",
					"description": "fallback_image_url parameter",
				},
				"flight_catalog_settings": map[string]any{
					"type":        "object",
					"description": "flight_catalog_settings parameter",
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
				},
				"partner_integration": map[string]any{
					"type":        "object",
					"description": "partner_integration parameter",
				},
				"store_catalog_settings": map[string]any{
					"type":        "object",
					"description": "store_catalog_settings parameter",
				},
			}),
			mcp.Description("Parameters object containing: additional_vertical_option (productcatalog_additional_vertical_option) [LOCAL_DA_CATALOG, LOCAL_PRODUCTS], da_display_settings (object), default_image_url (string), destination_catalog_settings (object), fallback_image_url (string), flight_catalog_settings (object), name (string), partner_integration (object), store_catalog_settings (object)"),
		),
	)
}

// HandleProductcatalog_post_ handles the productcatalog_post_ tool with context-based auth
func HandleProductcatalog_post_(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Call the API method
	result, err := Productcatalog_post_(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute productcatalog_post_: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Productcatalog_post_ performs POST  for ProductCatalog
func Productcatalog_post_(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + ""

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("POST", baseURL, urlParams)
}
