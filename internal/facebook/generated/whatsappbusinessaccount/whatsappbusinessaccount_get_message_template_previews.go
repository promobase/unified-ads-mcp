// Code generated by Facebook Business API codegen. DO NOT EDIT.

package whatsappbusinessaccount

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/shared"
)

// ToolWhatsappbusinessaccount_get_message_template_previews returns the MCP tool definition for whatsappbusinessaccount_get_message_template_previews
func ToolWhatsappbusinessaccount_get_message_template_previews() mcp.Tool {
	
	// Params object accepts: add_security_recommendation (bool), button_types (list<whatsappbusinessaccountmessage_template_previews_button_types_enum_param>), category (whatsappbusinessaccountmessage_template_previews_category_enum_param), code_expiration_minutes (unsigned int), languages (list<string>)
	return mcp.NewTool("whatsappbusinessaccount_get_message_template_previews",
		mcp.WithDescription("GET message_template_previews for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"add_security_recommendation": map[string]any{
					"type": "boolean",
					"description": "add_security_recommendation parameter",
				},
				"button_types": map[string]any{
					"type": "array",
					"description": "button_types parameter",
					"enum": []string{ "OTP" },
					"items": map[string]any{"type": "string"},
				},
				"category": map[string]any{
					"type": "string",
					"description": "category parameter",
					"required": true,
					"enum": []string{ "AUTHENTICATION" },
				},
				"code_expiration_minutes": map[string]any{
					"type": "integer",
					"description": "code_expiration_minutes parameter",
				},
				"languages": map[string]any{
					"type": "array",
					"description": "languages parameter",
					"items": map[string]any{"type": "string"},
				},
			}),
			mcp.Description("Parameters object containing: add_security_recommendation (boolean), button_types (array<enum>) [OTP], category (enum) [AUTHENTICATION] [required], code_expiration_minutes (integer), languages (array<string>)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleWhatsappbusinessaccount_get_message_template_previews handles the whatsappbusinessaccount_get_message_template_previews tool with context-based auth
func HandleWhatsappbusinessaccount_get_message_template_previews(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}



	// Call the API method
	result, err := Whatsappbusinessaccount_get_message_template_previews(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_message_template_previews: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Whatsappbusinessaccount_get_message_template_previews performs GET message_template_previews for WhatsAppBusinessAccount
func Whatsappbusinessaccount_get_message_template_previews(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string
	
	
	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/message_template_previews")
	
	urlParams := url.Values{}
	urlParams.Set("access_token", accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("params", fmt.Sprintf("%v", val))
		
	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("fields", fmt.Sprintf("%v", val))
		
	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("limit", fmt.Sprintf("%v", val))
		
	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("after", fmt.Sprintf("%v", val))
		
	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path
		
		urlParams.Set("before", fmt.Sprintf("%v", val))
		
	}


	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}