// Code generated by Facebook Business API codegen. DO NOT EDIT.

package whatsappbusinessaccount

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strings"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/shared"
)

// ToolWhatsappbusinessaccount_get_pricing_analytics returns the MCP tool definition for whatsappbusinessaccount_get_pricing_analytics
func ToolWhatsappbusinessaccount_get_pricing_analytics() mcp.Tool {

	// Params object accepts: country_codes (list<string>), dimensions (list<whatsappbusinessaccountpricing_analytics_dimensions_enum_param>), end (unsigned int), granularity (whatsappbusinessaccountpricing_analytics_granularity_enum_param), metric_types (list<whatsappbusinessaccountpricing_analytics_metric_types_enum_param>), phone_numbers (list<string>), pricing_categories (list<whatsappbusinessaccountpricing_analytics_pricing_categories_enum_param>), pricing_types (list<whatsappbusinessaccountpricing_analytics_pricing_types_enum_param>), start (unsigned int), tiers (list<string>)
	return mcp.NewTool("whatsappbusinessaccount_get_pricing_analytics",
		mcp.WithDescription("GET pricing_analytics for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"country_codes": map[string]any{
					"type":        "array",
					"description": "country_codes parameter",
					"items":       map[string]any{"type": "string"},
				},
				"dimensions": map[string]any{
					"type":        "array",
					"description": "dimensions parameter",
					"enum":        []string{"COUNTRY", "PHONE", "PRICING_CATEGORY", "PRICING_TYPE", "TIER"},
					"items":       map[string]any{"type": "string"},
				},
				"end": map[string]any{
					"type":        "integer",
					"description": "end parameter",
					"required":    true,
				},
				"granularity": map[string]any{
					"type":        "string",
					"description": "granularity parameter",
					"required":    true,
					"enum":        []string{"DAILY", "HALF_HOUR", "MONTHLY"},
				},
				"metric_types": map[string]any{
					"type":        "array",
					"description": "metric_types parameter",
					"enum":        []string{"COST", "VOLUME"},
					"items":       map[string]any{"type": "string"},
				},
				"phone_numbers": map[string]any{
					"type":        "array",
					"description": "phone_numbers parameter",
					"items":       map[string]any{"type": "string"},
				},
				"pricing_categories": map[string]any{
					"type":        "array",
					"description": "pricing_categories parameter",
					"enum":        []string{"AUTHENTICATION", "AUTHENTICATION_INTERNATIONAL", "GROUP_MARKETING", "GROUP_SERVICE", "GROUP_UTILITY", "MARKETING", "MARKETING_LITE", "SERVICE", "UTILITY"},
					"items":       map[string]any{"type": "string"},
				},
				"pricing_types": map[string]any{
					"type":        "array",
					"description": "pricing_types parameter",
					"enum":        []string{"FREE_CUSTOMER_SERVICE", "FREE_ENTRY_POINT", "REGULAR"},
					"items":       map[string]any{"type": "string"},
				},
				"start": map[string]any{
					"type":        "integer",
					"description": "start parameter",
					"required":    true,
				},
				"tiers": map[string]any{
					"type":        "array",
					"description": "tiers parameter",
					"items":       map[string]any{"type": "string"},
				},
			}),
			mcp.Description("Parameters object containing: country_codes (array<string>), dimensions (array<enum>) [COUNTRY, PHONE, PRICING_CATEGORY, PRICING_TYPE, TIER], end (integer) [required], granularity (enum) [DAILY, HALF_HOUR, MONTHLY] [required], metric_types (array<enum>) [COST, VOLUME], phone_numbers (array<string>), pricing_categories (array<enum>) [AUTHENTICATION, AUTHENTICATION_INTERNATIONAL, GROUP_MARKETING, GROUP_SERVICE, GROUP_UTILITY, ...], pricing_types (array<enum>) [FREE_CUSTOMER_SERVICE, FREE_ENTRY_POINT, REGULAR], start (integer) [required], tiers (array<string>)"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleWhatsappbusinessaccount_get_pricing_analytics handles the whatsappbusinessaccount_get_pricing_analytics tool with context-based auth
func HandleWhatsappbusinessaccount_get_pricing_analytics(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	params, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	// Parse required params object and extract parameters
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(params), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Optional: fields
	// Array parameter - expecting JSON string
	if val := request.GetString("fields", ""); val != "" {
		// Parse array of fields and convert to comma-separated string
		var fields []string
		if err := json.Unmarshal([]byte(val), &fields); err == nil && len(fields) > 0 {
			args["fields"] = strings.Join(fields, ",")
		}
	}

	// Optional: limit
	if val := request.GetInt("limit", 0); val != 0 {
		args["limit"] = val
	}

	// Optional: after
	if val := request.GetString("after", ""); val != "" {
		args["after"] = val
	}

	// Optional: before
	if val := request.GetString("before", ""); val != "" {
		args["before"] = val
	}

	// Call the API method
	result, err := Whatsappbusinessaccount_get_pricing_analytics(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_pricing_analytics: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Whatsappbusinessaccount_get_pricing_analytics performs GET pricing_analytics for WhatsAppBusinessAccount
func Whatsappbusinessaccount_get_pricing_analytics(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = fmt.Sprintf("https://graph.facebook.com/v23.0/pricing_analytics")

	urlParams := url.Values{}
	urlParams.Set("access_token", accessToken)

	if val, ok := args["params"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("params", fmt.Sprintf("%v", val))

	}
	if val, ok := args["fields"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("fields", fmt.Sprintf("%v", val))

	}
	if val, ok := args["limit"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("limit", fmt.Sprintf("%v", val))

	}
	if val, ok := args["after"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("after", fmt.Sprintf("%v", val))

	}
	if val, ok := args["before"]; ok {
		// Skip ID parameters as they're already in the URL path

		urlParams.Set("before", fmt.Sprintf("%v", val))

	}

	// Make HTTP request
	var resp *http.Response
	var err error

	switch "GET" {
	case "GET":
		resp, err = http.Get(baseURL + "?" + urlParams.Encode())
	case "POST":
		resp, err = http.PostForm(baseURL, urlParams)
	default:
		return nil, fmt.Errorf("unsupported HTTP method: GET")
	}

	if err != nil {
		return nil, fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API request failed with status: %d", resp.StatusCode)
	}

	var result interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}
