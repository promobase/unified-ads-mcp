// Code generated by Facebook Business API codegen. DO NOT EDIT.

package whatsappbusinessaccount

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolWhatsappbusinessaccount_get_message_templates returns the MCP tool definition for whatsappbusinessaccount_get_message_templates
func ToolWhatsappbusinessaccount_get_message_templates() mcp.Tool {

	// Params object accepts: category (list<whatsappbusinessaccountmessage_templates_category_enum_param>), content (string), language (list<string>), name (string), name_or_content (string), quality_score (list<whatsappbusinessaccountmessage_templates_quality_score_enum_param>), status (list<whatsappbusinessaccountmessage_templates_status_enum_param>)
	return mcp.NewTool("whatsappbusinessaccount_get_message_templates",
		mcp.WithDescription("GET message_templates for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Properties(map[string]any{
				"category": map[string]any{
					"type":        "array",
					"description": "category parameter",
					"enum":        []string{"AUTHENTICATION", "MARKETING", "UTILITY"},
					"items":       map[string]any{"type": "string"},
				},
				"content": map[string]any{
					"type":        "string",
					"description": "content parameter",
				},
				"language": map[string]any{
					"type":        "array",
					"description": "language parameter",
					"items":       map[string]any{"type": "string"},
				},
				"name": map[string]any{
					"type":        "string",
					"description": "name parameter",
				},
				"name_or_content": map[string]any{
					"type":        "string",
					"description": "name_or_content parameter",
				},
				"quality_score": map[string]any{
					"type":        "array",
					"description": "quality_score parameter",
					"enum":        []string{"GREEN", "RED", "UNKNOWN", "YELLOW"},
					"items":       map[string]any{"type": "string"},
				},
				"status": map[string]any{
					"type":        "array",
					"description": "status parameter",
					"enum":        []string{"APPROVED", "ARCHIVED", "DELETED", "DISABLED", "IN_APPEAL", "LIMIT_EXCEEDED", "PAUSED", "PENDING", "PENDING_DELETION", "REJECTED"},
					"items":       map[string]any{"type": "string"},
				},
			}),
			mcp.Description("Parameters object containing: category (array<enum>) [AUTHENTICATION, MARKETING, UTILITY], content (string), language (array<string>), name (string), name_or_content (string), quality_score (array<enum>) [GREEN, RED, UNKNOWN, YELLOW], status (array<enum>) [APPROVED, ARCHIVED, DELETED, DISABLED, IN_APPEAL, ...]"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleWhatsappbusinessaccount_get_message_templates handles the whatsappbusinessaccount_get_message_templates tool with context-based auth
func HandleWhatsappbusinessaccount_get_message_templates(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Optional: params
	utils.ParseParamsObject(request, args)

	// Optional: fields
	utils.ParseFieldsArray(request, args)

	// Optional: limit
	utils.ParseOptionalInt(request, "limit", args)

	// Optional: after
	utils.ParseOptionalString(request, "after", args)

	// Optional: before
	utils.ParseOptionalString(request, "before", args)

	// Call the API method
	result, err := Whatsappbusinessaccount_get_message_templates(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_message_templates: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Whatsappbusinessaccount_get_message_templates performs GET message_templates for WhatsAppBusinessAccount
func Whatsappbusinessaccount_get_message_templates(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "message_templates"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("GET", baseURL, urlParams)
}
