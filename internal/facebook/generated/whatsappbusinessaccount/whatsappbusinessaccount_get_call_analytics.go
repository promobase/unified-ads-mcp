// Code generated by Facebook Business API codegen. DO NOT EDIT.

package whatsappbusinessaccount

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"unified-ads-mcp/internal/facebook/utils"
	"unified-ads-mcp/internal/shared"
)

// ToolWhatsappbusinessaccount_get_call_analytics returns the MCP tool definition for whatsappbusinessaccount_get_call_analytics
func ToolWhatsappbusinessaccount_get_call_analytics() mcp.Tool {

	// Params object accepts: country_codes (list<string>), dimensions (list<whatsappbusinessaccountcall_analytics_dimensions_enum_param>), directions (list<whatsappbusinessaccountcall_analytics_directions_enum_param>), end (unsigned int), granularity (whatsappbusinessaccountcall_analytics_granularity_enum_param), metric_types (list<whatsappbusinessaccountcall_analytics_metric_types_enum_param>), phone_numbers (list<string>), start (unsigned int)
	return mcp.NewTool("whatsappbusinessaccount_get_call_analytics",
		mcp.WithDescription("GET call_analytics for WhatsAppBusinessAccount"),
		mcp.WithObject("params",
			mcp.Required(),
			mcp.Properties(map[string]any{
				"country_codes": map[string]any{
					"type":        "array",
					"description": "country_codes parameter",
					"items":       map[string]any{"type": "string"},
				},
				"dimensions": map[string]any{
					"type":        "array",
					"description": "dimensions parameter",
					"enum":        []string{"COUNTRY", "DIRECTION", "PHONE", "TIER", "UNKNOWN"},
					"items":       map[string]any{"type": "string"},
				},
				"directions": map[string]any{
					"type":        "array",
					"description": "directions parameter",
					"enum":        []string{"BUSINESS_INITIATED", "UNKNOWN", "USER_INITIATED"},
					"items":       map[string]any{"type": "string"},
				},
				"end": map[string]any{
					"type":        "integer",
					"description": "end parameter",
					"required":    true,
				},
				"granularity": map[string]any{
					"type":        "string",
					"description": "granularity parameter",
					"required":    true,
					"enum":        []string{"DAILY", "HALF_HOUR", "MONTHLY"},
				},
				"metric_types": map[string]any{
					"type":        "array",
					"description": "metric_types parameter",
					"enum":        []string{"AVERAGE_DURATION", "COST", "COUNT", "UNKNOWN"},
					"items":       map[string]any{"type": "string"},
				},
				"phone_numbers": map[string]any{
					"type":        "array",
					"description": "phone_numbers parameter",
					"items":       map[string]any{"type": "string"},
				},
				"start": map[string]any{
					"type":        "integer",
					"description": "start parameter",
					"required":    true,
				},
			}),
			mcp.Description("Parameters object containing: country_codes (array<string>), dimensions (array<enum>) [COUNTRY, DIRECTION, PHONE, TIER, UNKNOWN], directions (array<enum>) [BUSINESS_INITIATED, UNKNOWN, USER_INITIATED], end (integer) [required], granularity (enum) [DAILY, HALF_HOUR, MONTHLY] [required], metric_types (array<enum>) [AVERAGE_DURATION, COST, COUNT, UNKNOWN], phone_numbers (array<string>), start (integer) [required]"),
		),
		mcp.WithArray("fields",
			mcp.Description("Array of fields to return"),
		),
		mcp.WithNumber("limit",
			mcp.Description("Maximum number of results to return (default: 25, max: 500)"),
		),
		mcp.WithString("after",
			mcp.Description("Cursor for pagination (use 'next' cursor from previous response)"),
		),
		mcp.WithString("before",
			mcp.Description("Cursor for pagination (use 'previous' cursor from previous response)"),
		),
	)
}

// HandleWhatsappbusinessaccount_get_call_analytics handles the whatsappbusinessaccount_get_call_analytics tool with context-based auth
func HandleWhatsappbusinessaccount_get_call_analytics(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Get access token from context
	accessToken, ok := shared.FacebookAccessTokenFromContext(ctx)
	if !ok {
		return mcp.NewToolResultError("Facebook access token not found in context"), nil
	}

	// Build arguments map
	args := make(map[string]interface{})

	// Required: params
	// Parse required params object and expand into args
	val, err := request.RequireString("params")
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("missing required parameter params: %v", err)), nil
	}
	var paramsObj map[string]interface{}
	if err := json.Unmarshal([]byte(val), &paramsObj); err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("invalid params object: %v", err)), nil
	}
	for key, value := range paramsObj {
		args[key] = value
	}

	// Optional: fields
	utils.ParseFieldsArray(request, args)

	// Optional: limit
	utils.ParseOptionalInt(request, "limit", args)

	// Optional: after
	utils.ParseOptionalString(request, "after", args)

	// Optional: before
	utils.ParseOptionalString(request, "before", args)

	// Call the API method
	result, err := Whatsappbusinessaccount_get_call_analytics(accessToken, args)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to execute whatsappbusinessaccount_get_call_analytics: %v", err)), nil
	}

	// Return the result as JSON
	resultJSON, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultError(fmt.Sprintf("failed to marshal result: %v", err)), nil
	}

	return mcp.NewToolResultText(string(resultJSON)), nil
}

// Whatsappbusinessaccount_get_call_analytics performs GET call_analytics for WhatsAppBusinessAccount
func Whatsappbusinessaccount_get_call_analytics(accessToken string, args map[string]interface{}) (interface{}, error) {
	var baseURL string

	baseURL = FacebookGraphAPIBaseURL + "/call_analytics"

	// Build URL parameters, skipping ID parameters that are in the path
	skipParams := []string{}
	urlParams := utils.BuildURLParams(accessToken, args, skipParams...)

	// Execute the API request
	return utils.ExecuteAPIRequest("GET", baseURL, urlParams)
}
