name: publish

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - "v*"

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - run: git fetch --force --tags

      - uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.ref }}" == "refs/tags/"* ]]; then
            # For tags, use the exact tag
            VERSION=${GITHUB_REF#refs/tags/}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "version_short=${VERSION#v}" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            # For commits, generate snapshot version
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            COMMITS=$(git rev-list --count ${LATEST_TAG}..HEAD)
            TIMESTAMP=$(date -u +%Y%m%d%H%M%S)
            VERSION="0.0.0-${TIMESTAMP}"
            echo "version=v$VERSION" >> $GITHUB_OUTPUT
            echo "version_short=$VERSION" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        run: make deps

      - name: Run codegen
        run: make codegen

      - name: Build binaries
        run: |
          VERSION="${{ steps.version.outputs.version_short }}"
          COMMIT=$(git rev-parse --short HEAD)
          DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          mkdir -p dist
          
          # Build for all platforms
          for OS in linux darwin windows; do
            for ARCH in amd64 arm64; do
              # Skip windows arm64
              if [[ "$OS" == "windows" && "$ARCH" == "arm64" ]]; then
                continue
              fi
              
              echo "Building for $OS-$ARCH..."
              OUTPUT="unified-ads-mcp-$OS-$ARCH"
              if [[ "$OS" == "windows" ]]; then
                OUTPUT="${OUTPUT}.exe"
              fi
              
              GOOS=$OS GOARCH=$ARCH CGO_ENABLED=0 go build \
                -ldflags "-s -w -X main.version=$VERSION -X main.commit=$COMMIT -X main.date=$DATE" \
                -o "dist/$OUTPUT" \
                ./cmd/server
            done
          done

      - name: Create archives
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cd dist
          for FILE in unified-ads-mcp-*; do
            if [[ -f "$FILE" ]]; then
              BASE="${FILE%.*}"
              zip "${BASE}.zip" "$FILE"
              rm "$FILE"
            fi
          done
          
          # Create checksums
          sha256sum *.zip > checksums.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ github.sha }}
          path: dist/
          retention-days: 7

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Get previous release tag
          PREVIOUS=$(gh release list --limit 10 | grep -v Pre-release | head -1 | awk '{print $3}' || echo "")
          
          # Generate release notes
          if [[ -n "$PREVIOUS" ]]; then
            COMMITS=$(git log --pretty=format:"- %s" ${PREVIOUS}..HEAD | grep -v -E "^- (ci:|chore:|docs:|test:|wip:|ignore:)" || echo "")
          else
            COMMITS=$(git log --pretty=format:"- %s" | head -20 | grep -v -E "^- (ci:|chore:|docs:|test:|wip:|ignore:)" || echo "")
          fi
          
          cat << EOF > release_notes.md
          ## Unified Ads MCP Server ${VERSION}
          
          MCP (Model Context Protocol) server for Facebook Business API.
          
          ## What's Changed
          
          ${COMMITS:-No notable changes}
          
          ## Quick Install
          
          \`\`\`bash
          curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/main/install.sh | bash
          \`\`\`
          
          ## Manual Setup
          
          1. Download the binary for your platform below
          2. Add to Claude Desktop config (\`~/Library/Application Support/Claude/claude_desktop_config.json\`):
          
          \`\`\`json
          {
            "mcpServers": {
              "unified-ads": {
                "command": "/path/to/unified-ads-mcp",
                "env": {
                  "FACEBOOK_ACCESS_TOKEN": "your_token_here"
                }
              }
            }
          }
          \`\`\`
          
          Get your token at: https://developers.facebook.com/tools/explorer/
          EOF
          
          gh release create $VERSION \
            --title "Release $VERSION" \
            --notes-file release_notes.md \
            dist/*.zip \
            dist/checksums.txt

      - name: Upload snapshot builds
        if: "!startsWith(github.ref, 'refs/tags/')"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create or update snapshot release
          if gh release view snapshot 2>/dev/null; then
            gh release delete snapshot --yes
          fi
          
          cat << EOF > snapshot_notes.md
          ## Development Snapshot
          
          This is an automatically generated snapshot from the latest commit on main branch.
          
          **Version**: ${{ steps.version.outputs.version_short }}
          **Commit**: ${{ github.sha }}
          **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          > ⚠️ **Warning**: This is a development build and may be unstable.
          
          ## Quick Install
          
          \`\`\`bash
          curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/main/install.sh | bash --snapshot
          \`\`\`
          EOF
          
          gh release create snapshot \
            --title "Development Snapshot" \
            --notes-file snapshot_notes.md \
            --prerelease \
            --target ${{ github.sha }} \
            dist/*