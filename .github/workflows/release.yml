name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

# Ensure only one release runs at a time
concurrency:
  group: release
  cancel-in-progress: false

jobs:
  release:
    runs-on: ubuntu-latest
    # Skip if commit message starts with 'ci:'
    if: "!startsWith(github.event.head_commit.message, 'ci:')"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Get next version
        id: get_version
        run: |
          # Fetch all tags to ensure we have the latest
          git fetch --tags
          
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Extract version numbers
          VERSION=${LATEST_TAG#v}
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          
          # Increment patch version
          PATCH=$((PATCH + 1))
          
          # Create new version
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          
          # Check if this version already exists (in case of race condition)
          if git rev-parse "$NEW_VERSION" >/dev/null 2>&1; then
            echo "Version $NEW_VERSION already exists, incrementing again..."
            PATCH=$((PATCH + 1))
            NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          fi
          
          echo "New version: $NEW_VERSION"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_version_short=${MAJOR}.${MINOR}.${PATCH}" >> $GITHUB_OUTPUT

      - name: Update VERSION file
        run: |
          echo "${{ steps.get_version.outputs.new_version_short }}" > VERSION
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add VERSION
          git diff --staged --quiet || git commit -m "ci: bump version to ${{ steps.get_version.outputs.new_version }}"
          
          # Handle potential conflicts from concurrent commits
          MAX_RETRIES=3
          RETRY_COUNT=0
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if git push; then
              echo "Successfully pushed VERSION update"
              break
            else
              echo "Push failed, attempting to rebase..."
              git pull --rebase
              RETRY_COUNT=$((RETRY_COUNT + 1))
            fi
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Failed to push after $MAX_RETRIES attempts"
            exit 1
          fi

      - name: Create tag
        run: |
          git tag -a ${{ steps.get_version.outputs.new_version }} -m "Release ${{ steps.get_version.outputs.new_version }}"
          git push origin ${{ steps.get_version.outputs.new_version }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}